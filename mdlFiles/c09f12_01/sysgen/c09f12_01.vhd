--------------------------------------------------------------------------------
--    This file is owned and controlled by Xilinx and must be used solely     --
--    for design, simulation, implementation and creation of design files     --
--    limited to Xilinx devices or technologies. Use with non-Xilinx          --
--    devices or technologies is expressly prohibited and immediately         --
--    terminates your license.                                                --
--                                                                            --
--    XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" SOLELY    --
--    FOR USE IN DEVELOPING PROGRAMS AND SOLUTIONS FOR XILINX DEVICES.  BY    --
--    PROVIDING THIS DESIGN, CODE, OR INFORMATION AS ONE POSSIBLE             --
--    IMPLEMENTATION OF THIS FEATURE, APPLICATION OR STANDARD, XILINX IS      --
--    MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION IS FREE FROM ANY      --
--    CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE FOR OBTAINING ANY       --
--    RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.  XILINX EXPRESSLY       --
--    DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO THE ADEQUACY OF THE   --
--    IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OR          --
--    REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE FROM CLAIMS OF         --
--    INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A   --
--    PARTICULAR PURPOSE.                                                     --
--                                                                            --
--    Xilinx products are not intended for use in life support appliances,    --
--    devices, or systems.  Use in such applications are expressly            --
--    prohibited.                                                             --
--                                                                            --
--    (c) Copyright 1995-2014 Xilinx, Inc.                                    --
--    All rights reserved.                                                    --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
-- You must compile the wrapper file cntr_11_0_48e1762367ed2904.vhd when simulating
-- the core, cntr_11_0_48e1762367ed2904. When compiling the wrapper file, be sure to
-- reference the XilinxCoreLib VHDL simulation library. For detailed
-- instructions, please refer to the "CORE Generator Help".

-- The synthesis directives "translate_off/translate_on" specified
-- below are supported by Xilinx, Mentor Graphics and Synplicity
-- synthesis tools. Ensure they are correct for your synthesis tool(s).

LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
-- synthesis translate_off
LIBRARY XilinxCoreLib;
-- synthesis translate_on
ENTITY cntr_11_0_48e1762367ed2904 IS
  PORT (
    clk : IN STD_LOGIC;
    ce : IN STD_LOGIC;
    sclr : IN STD_LOGIC;
    q : OUT STD_LOGIC_VECTOR(23 DOWNTO 0)
  );
END cntr_11_0_48e1762367ed2904;

ARCHITECTURE cntr_11_0_48e1762367ed2904_a OF cntr_11_0_48e1762367ed2904 IS
-- synthesis translate_off
COMPONENT wrapped_cntr_11_0_48e1762367ed2904
  PORT (
    clk : IN STD_LOGIC;
    ce : IN STD_LOGIC;
    sclr : IN STD_LOGIC;
    q : OUT STD_LOGIC_VECTOR(23 DOWNTO 0)
  );
END COMPONENT;

-- Configuration specification
  FOR ALL : wrapped_cntr_11_0_48e1762367ed2904 USE ENTITY XilinxCoreLib.c_counter_binary_v11_0(behavioral)
    GENERIC MAP (
      c_ainit_val => "0",
      c_ce_overrides_sync => 0,
      c_count_by => "1",
      c_count_mode => 0,
      c_count_to => "1",
      c_fb_latency => 0,
      c_has_ce => 1,
      c_has_load => 0,
      c_has_sclr => 1,
      c_has_sinit => 0,
      c_has_sset => 0,
      c_has_thresh0 => 0,
      c_implementation => 1,
      c_latency => 1,
      c_load_low => 0,
      c_restrict_count => 0,
      c_sclr_overrides_sset => 1,
      c_sinit_val => "0",
      c_thresh0_value => "1",
      c_verbosity => 0,
      c_width => 24,
      c_xdevicefamily => "virtex5"
    );
-- synthesis translate_on
BEGIN
-- synthesis translate_off
U0 : wrapped_cntr_11_0_48e1762367ed2904
  PORT MAP (
    clk => clk,
    ce => ce,
    sclr => sclr,
    q => q
  );
-- synthesis translate_on

END cntr_11_0_48e1762367ed2904_a;
--------------------------------------------------------------------------------
--    This file is owned and controlled by Xilinx and must be used solely     --
--    for design, simulation, implementation and creation of design files     --
--    limited to Xilinx devices or technologies. Use with non-Xilinx          --
--    devices or technologies is expressly prohibited and immediately         --
--    terminates your license.                                                --
--                                                                            --
--    XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" SOLELY    --
--    FOR USE IN DEVELOPING PROGRAMS AND SOLUTIONS FOR XILINX DEVICES.  BY    --
--    PROVIDING THIS DESIGN, CODE, OR INFORMATION AS ONE POSSIBLE             --
--    IMPLEMENTATION OF THIS FEATURE, APPLICATION OR STANDARD, XILINX IS      --
--    MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION IS FREE FROM ANY      --
--    CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE FOR OBTAINING ANY       --
--    RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.  XILINX EXPRESSLY       --
--    DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO THE ADEQUACY OF THE   --
--    IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OR          --
--    REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE FROM CLAIMS OF         --
--    INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A   --
--    PARTICULAR PURPOSE.                                                     --
--                                                                            --
--    Xilinx products are not intended for use in life support appliances,    --
--    devices, or systems.  Use in such applications are expressly            --
--    prohibited.                                                             --
--                                                                            --
--    (c) Copyright 1995-2014 Xilinx, Inc.                                    --
--    All rights reserved.                                                    --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
-- You must compile the wrapper file bmg_72_a6ba22940df932c0.vhd when simulating
-- the core, bmg_72_a6ba22940df932c0. When compiling the wrapper file, be sure to
-- reference the XilinxCoreLib VHDL simulation library. For detailed
-- instructions, please refer to the "CORE Generator Help".

-- The synthesis directives "translate_off/translate_on" specified
-- below are supported by Xilinx, Mentor Graphics and Synplicity
-- synthesis tools. Ensure they are correct for your synthesis tool(s).

LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
-- synthesis translate_off
LIBRARY XilinxCoreLib;
-- synthesis translate_on
ENTITY bmg_72_a6ba22940df932c0 IS
  PORT (
    clka : IN STD_LOGIC;
    ena : IN STD_LOGIC;
    wea : IN STD_LOGIC_VECTOR(0 DOWNTO 0);
    addra : IN STD_LOGIC_VECTOR(4 DOWNTO 0);
    dina : IN STD_LOGIC_VECTOR(35 DOWNTO 0);
    douta : OUT STD_LOGIC_VECTOR(35 DOWNTO 0)
  );
END bmg_72_a6ba22940df932c0;

ARCHITECTURE bmg_72_a6ba22940df932c0_a OF bmg_72_a6ba22940df932c0 IS
-- synthesis translate_off
COMPONENT wrapped_bmg_72_a6ba22940df932c0
  PORT (
    clka : IN STD_LOGIC;
    ena : IN STD_LOGIC;
    wea : IN STD_LOGIC_VECTOR(0 DOWNTO 0);
    addra : IN STD_LOGIC_VECTOR(4 DOWNTO 0);
    dina : IN STD_LOGIC_VECTOR(35 DOWNTO 0);
    douta : OUT STD_LOGIC_VECTOR(35 DOWNTO 0)
  );
END COMPONENT;

-- Configuration specification
  FOR ALL : wrapped_bmg_72_a6ba22940df932c0 USE ENTITY XilinxCoreLib.blk_mem_gen_v7_2(behavioral)
    GENERIC MAP (
      c_addra_width => 5,
      c_addrb_width => 5,
      c_algorithm => 1,
      c_axi_id_width => 4,
      c_axi_slave_type => 0,
      c_axi_type => 1,
      c_byte_size => 9,
      c_common_clk => 0,
      c_default_data => "0",
      c_disable_warn_bhv_coll => 0,
      c_disable_warn_bhv_range => 0,
      c_enable_32bit_address => 0,
      c_family => "virtex5",
      c_has_axi_id => 0,
      c_has_ena => 1,
      c_has_enb => 0,
      c_has_injecterr => 0,
      c_has_mem_output_regs_a => 1,
      c_has_mem_output_regs_b => 0,
      c_has_mux_output_regs_a => 0,
      c_has_mux_output_regs_b => 0,
      c_has_regcea => 0,
      c_has_regceb => 0,
      c_has_rsta => 0,
      c_has_rstb => 0,
      c_has_softecc_input_regs_a => 0,
      c_has_softecc_output_regs_b => 0,
      c_init_file_name => "bmg_72_a6ba22940df932c0.mif",
      c_inita_val => "0",
      c_initb_val => "0",
      c_interface_type => 0,
      c_load_init_file => 1,
      c_mem_type => 0,
      c_mux_pipeline_stages => 0,
      c_prim_type => 1,
      c_read_depth_a => 32,
      c_read_depth_b => 32,
      c_read_width_a => 36,
      c_read_width_b => 36,
      c_rst_priority_a => "CE",
      c_rst_priority_b => "CE",
      c_rst_type => "SYNC",
      c_rstram_a => 0,
      c_rstram_b => 0,
      c_sim_collision_check => "ALL",
      c_use_byte_wea => 0,
      c_use_byte_web => 0,
      c_use_default_data => 0,
      c_use_ecc => 0,
      c_use_softecc => 0,
      c_wea_width => 1,
      c_web_width => 1,
      c_write_depth_a => 32,
      c_write_depth_b => 32,
      c_write_mode_a => "READ_FIRST",
      c_write_mode_b => "WRITE_FIRST",
      c_write_width_a => 36,
      c_write_width_b => 36,
      c_xdevicefamily => "virtex5"
    );
-- synthesis translate_on
BEGIN
-- synthesis translate_off
U0 : wrapped_bmg_72_a6ba22940df932c0
  PORT MAP (
    clka => clka,
    ena => ena,
    wea => wea,
    addra => addra,
    dina => dina,
    douta => douta
  );
-- synthesis translate_on

END bmg_72_a6ba22940df932c0_a;
--------------------------------------------------------------------------------
--    This file is owned and controlled by Xilinx and must be used solely     --
--    for design, simulation, implementation and creation of design files     --
--    limited to Xilinx devices or technologies. Use with non-Xilinx          --
--    devices or technologies is expressly prohibited and immediately         --
--    terminates your license.                                                --
--                                                                            --
--    XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" SOLELY    --
--    FOR USE IN DEVELOPING PROGRAMS AND SOLUTIONS FOR XILINX DEVICES.  BY    --
--    PROVIDING THIS DESIGN, CODE, OR INFORMATION AS ONE POSSIBLE             --
--    IMPLEMENTATION OF THIS FEATURE, APPLICATION OR STANDARD, XILINX IS      --
--    MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION IS FREE FROM ANY      --
--    CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE FOR OBTAINING ANY       --
--    RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.  XILINX EXPRESSLY       --
--    DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO THE ADEQUACY OF THE   --
--    IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OR          --
--    REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE FROM CLAIMS OF         --
--    INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A   --
--    PARTICULAR PURPOSE.                                                     --
--                                                                            --
--    Xilinx products are not intended for use in life support appliances,    --
--    devices, or systems.  Use in such applications are expressly            --
--    prohibited.                                                             --
--                                                                            --
--    (c) Copyright 1995-2014 Xilinx, Inc.                                    --
--    All rights reserved.                                                    --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
-- You must compile the wrapper file bmg_72_37c9a3ecdc0c1393.vhd when simulating
-- the core, bmg_72_37c9a3ecdc0c1393. When compiling the wrapper file, be sure to
-- reference the XilinxCoreLib VHDL simulation library. For detailed
-- instructions, please refer to the "CORE Generator Help".

-- The synthesis directives "translate_off/translate_on" specified
-- below are supported by Xilinx, Mentor Graphics and Synplicity
-- synthesis tools. Ensure they are correct for your synthesis tool(s).

LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
-- synthesis translate_off
LIBRARY XilinxCoreLib;
-- synthesis translate_on
ENTITY bmg_72_37c9a3ecdc0c1393 IS
  PORT (
    clka : IN STD_LOGIC;
    ena : IN STD_LOGIC;
    wea : IN STD_LOGIC_VECTOR(0 DOWNTO 0);
    addra : IN STD_LOGIC_VECTOR(2 DOWNTO 0);
    dina : IN STD_LOGIC_VECTOR(35 DOWNTO 0);
    douta : OUT STD_LOGIC_VECTOR(35 DOWNTO 0)
  );
END bmg_72_37c9a3ecdc0c1393;

ARCHITECTURE bmg_72_37c9a3ecdc0c1393_a OF bmg_72_37c9a3ecdc0c1393 IS
-- synthesis translate_off
COMPONENT wrapped_bmg_72_37c9a3ecdc0c1393
  PORT (
    clka : IN STD_LOGIC;
    ena : IN STD_LOGIC;
    wea : IN STD_LOGIC_VECTOR(0 DOWNTO 0);
    addra : IN STD_LOGIC_VECTOR(2 DOWNTO 0);
    dina : IN STD_LOGIC_VECTOR(35 DOWNTO 0);
    douta : OUT STD_LOGIC_VECTOR(35 DOWNTO 0)
  );
END COMPONENT;

-- Configuration specification
  FOR ALL : wrapped_bmg_72_37c9a3ecdc0c1393 USE ENTITY XilinxCoreLib.blk_mem_gen_v7_2(behavioral)
    GENERIC MAP (
      c_addra_width => 3,
      c_addrb_width => 3,
      c_algorithm => 1,
      c_axi_id_width => 4,
      c_axi_slave_type => 0,
      c_axi_type => 1,
      c_byte_size => 9,
      c_common_clk => 0,
      c_default_data => "0",
      c_disable_warn_bhv_coll => 0,
      c_disable_warn_bhv_range => 0,
      c_enable_32bit_address => 0,
      c_family => "virtex5",
      c_has_axi_id => 0,
      c_has_ena => 1,
      c_has_enb => 0,
      c_has_injecterr => 0,
      c_has_mem_output_regs_a => 1,
      c_has_mem_output_regs_b => 0,
      c_has_mux_output_regs_a => 0,
      c_has_mux_output_regs_b => 0,
      c_has_regcea => 0,
      c_has_regceb => 0,
      c_has_rsta => 0,
      c_has_rstb => 0,
      c_has_softecc_input_regs_a => 0,
      c_has_softecc_output_regs_b => 0,
      c_init_file_name => "bmg_72_37c9a3ecdc0c1393.mif",
      c_inita_val => "0",
      c_initb_val => "0",
      c_interface_type => 0,
      c_load_init_file => 1,
      c_mem_type => 0,
      c_mux_pipeline_stages => 0,
      c_prim_type => 1,
      c_read_depth_a => 8,
      c_read_depth_b => 8,
      c_read_width_a => 36,
      c_read_width_b => 36,
      c_rst_priority_a => "CE",
      c_rst_priority_b => "CE",
      c_rst_type => "SYNC",
      c_rstram_a => 0,
      c_rstram_b => 0,
      c_sim_collision_check => "ALL",
      c_use_byte_wea => 0,
      c_use_byte_web => 0,
      c_use_default_data => 0,
      c_use_ecc => 0,
      c_use_softecc => 0,
      c_wea_width => 1,
      c_web_width => 1,
      c_write_depth_a => 8,
      c_write_depth_b => 8,
      c_write_mode_a => "READ_FIRST",
      c_write_mode_b => "WRITE_FIRST",
      c_write_width_a => 36,
      c_write_width_b => 36,
      c_xdevicefamily => "virtex5"
    );
-- synthesis translate_on
BEGIN
-- synthesis translate_off
U0 : wrapped_bmg_72_37c9a3ecdc0c1393
  PORT MAP (
    clka => clka,
    ena => ena,
    wea => wea,
    addra => addra,
    dina => dina,
    douta => douta
  );
-- synthesis translate_on

END bmg_72_37c9a3ecdc0c1393_a;
--------------------------------------------------------------------------------
--    This file is owned and controlled by Xilinx and must be used solely     --
--    for design, simulation, implementation and creation of design files     --
--    limited to Xilinx devices or technologies. Use with non-Xilinx          --
--    devices or technologies is expressly prohibited and immediately         --
--    terminates your license.                                                --
--                                                                            --
--    XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" SOLELY    --
--    FOR USE IN DEVELOPING PROGRAMS AND SOLUTIONS FOR XILINX DEVICES.  BY    --
--    PROVIDING THIS DESIGN, CODE, OR INFORMATION AS ONE POSSIBLE             --
--    IMPLEMENTATION OF THIS FEATURE, APPLICATION OR STANDARD, XILINX IS      --
--    MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION IS FREE FROM ANY      --
--    CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE FOR OBTAINING ANY       --
--    RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.  XILINX EXPRESSLY       --
--    DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO THE ADEQUACY OF THE   --
--    IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OR          --
--    REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE FROM CLAIMS OF         --
--    INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A   --
--    PARTICULAR PURPOSE.                                                     --
--                                                                            --
--    Xilinx products are not intended for use in life support appliances,    --
--    devices, or systems.  Use in such applications are expressly            --
--    prohibited.                                                             --
--                                                                            --
--    (c) Copyright 1995-2014 Xilinx, Inc.                                    --
--    All rights reserved.                                                    --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
-- You must compile the wrapper file bmg_72_3bc6d5a32af9b138.vhd when simulating
-- the core, bmg_72_3bc6d5a32af9b138. When compiling the wrapper file, be sure to
-- reference the XilinxCoreLib VHDL simulation library. For detailed
-- instructions, please refer to the "CORE Generator Help".

-- The synthesis directives "translate_off/translate_on" specified
-- below are supported by Xilinx, Mentor Graphics and Synplicity
-- synthesis tools. Ensure they are correct for your synthesis tool(s).

LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
-- synthesis translate_off
LIBRARY XilinxCoreLib;
-- synthesis translate_on
ENTITY bmg_72_3bc6d5a32af9b138 IS
  PORT (
    clka : IN STD_LOGIC;
    ena : IN STD_LOGIC;
    wea : IN STD_LOGIC_VECTOR(0 DOWNTO 0);
    addra : IN STD_LOGIC_VECTOR(11 DOWNTO 0);
    dina : IN STD_LOGIC_VECTOR(71 DOWNTO 0);
    douta : OUT STD_LOGIC_VECTOR(71 DOWNTO 0);
    clkb : IN STD_LOGIC;
    enb : IN STD_LOGIC;
    web : IN STD_LOGIC_VECTOR(0 DOWNTO 0);
    addrb : IN STD_LOGIC_VECTOR(11 DOWNTO 0);
    dinb : IN STD_LOGIC_VECTOR(71 DOWNTO 0);
    doutb : OUT STD_LOGIC_VECTOR(71 DOWNTO 0)
  );
END bmg_72_3bc6d5a32af9b138;

ARCHITECTURE bmg_72_3bc6d5a32af9b138_a OF bmg_72_3bc6d5a32af9b138 IS
-- synthesis translate_off
COMPONENT wrapped_bmg_72_3bc6d5a32af9b138
  PORT (
    clka : IN STD_LOGIC;
    ena : IN STD_LOGIC;
    wea : IN STD_LOGIC_VECTOR(0 DOWNTO 0);
    addra : IN STD_LOGIC_VECTOR(11 DOWNTO 0);
    dina : IN STD_LOGIC_VECTOR(71 DOWNTO 0);
    douta : OUT STD_LOGIC_VECTOR(71 DOWNTO 0);
    clkb : IN STD_LOGIC;
    enb : IN STD_LOGIC;
    web : IN STD_LOGIC_VECTOR(0 DOWNTO 0);
    addrb : IN STD_LOGIC_VECTOR(11 DOWNTO 0);
    dinb : IN STD_LOGIC_VECTOR(71 DOWNTO 0);
    doutb : OUT STD_LOGIC_VECTOR(71 DOWNTO 0)
  );
END COMPONENT;

-- Configuration specification
  FOR ALL : wrapped_bmg_72_3bc6d5a32af9b138 USE ENTITY XilinxCoreLib.blk_mem_gen_v7_2(behavioral)
    GENERIC MAP (
      c_addra_width => 12,
      c_addrb_width => 12,
      c_algorithm => 1,
      c_axi_id_width => 4,
      c_axi_slave_type => 0,
      c_axi_type => 1,
      c_byte_size => 9,
      c_common_clk => 1,
      c_default_data => "0",
      c_disable_warn_bhv_coll => 0,
      c_disable_warn_bhv_range => 0,
      c_enable_32bit_address => 0,
      c_family => "virtex5",
      c_has_axi_id => 0,
      c_has_ena => 1,
      c_has_enb => 1,
      c_has_injecterr => 0,
      c_has_mem_output_regs_a => 0,
      c_has_mem_output_regs_b => 0,
      c_has_mux_output_regs_a => 0,
      c_has_mux_output_regs_b => 0,
      c_has_regcea => 0,
      c_has_regceb => 0,
      c_has_rsta => 0,
      c_has_rstb => 0,
      c_has_softecc_input_regs_a => 0,
      c_has_softecc_output_regs_b => 0,
      c_init_file_name => "bmg_72_3bc6d5a32af9b138.mif",
      c_inita_val => "0",
      c_initb_val => "0",
      c_interface_type => 0,
      c_load_init_file => 1,
      c_mem_type => 2,
      c_mux_pipeline_stages => 0,
      c_prim_type => 1,
      c_read_depth_a => 4096,
      c_read_depth_b => 4096,
      c_read_width_a => 72,
      c_read_width_b => 72,
      c_rst_priority_a => "CE",
      c_rst_priority_b => "CE",
      c_rst_type => "SYNC",
      c_rstram_a => 0,
      c_rstram_b => 0,
      c_sim_collision_check => "ALL",
      c_use_byte_wea => 0,
      c_use_byte_web => 0,
      c_use_default_data => 0,
      c_use_ecc => 0,
      c_use_softecc => 0,
      c_wea_width => 1,
      c_web_width => 1,
      c_write_depth_a => 4096,
      c_write_depth_b => 4096,
      c_write_mode_a => "WRITE_FIRST",
      c_write_mode_b => "WRITE_FIRST",
      c_write_width_a => 72,
      c_write_width_b => 72,
      c_xdevicefamily => "virtex5"
    );
-- synthesis translate_on
BEGIN
-- synthesis translate_off
U0 : wrapped_bmg_72_3bc6d5a32af9b138
  PORT MAP (
    clka => clka,
    ena => ena,
    wea => wea,
    addra => addra,
    dina => dina,
    douta => douta,
    clkb => clkb,
    enb => enb,
    web => web,
    addrb => addrb,
    dinb => dinb,
    doutb => doutb
  );
-- synthesis translate_on

END bmg_72_3bc6d5a32af9b138_a;
--------------------------------------------------------------------------------
--    This file is owned and controlled by Xilinx and must be used solely     --
--    for design, simulation, implementation and creation of design files     --
--    limited to Xilinx devices or technologies. Use with non-Xilinx          --
--    devices or technologies is expressly prohibited and immediately         --
--    terminates your license.                                                --
--                                                                            --
--    XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" SOLELY    --
--    FOR USE IN DEVELOPING PROGRAMS AND SOLUTIONS FOR XILINX DEVICES.  BY    --
--    PROVIDING THIS DESIGN, CODE, OR INFORMATION AS ONE POSSIBLE             --
--    IMPLEMENTATION OF THIS FEATURE, APPLICATION OR STANDARD, XILINX IS      --
--    MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION IS FREE FROM ANY      --
--    CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE FOR OBTAINING ANY       --
--    RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.  XILINX EXPRESSLY       --
--    DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO THE ADEQUACY OF THE   --
--    IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OR          --
--    REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE FROM CLAIMS OF         --
--    INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A   --
--    PARTICULAR PURPOSE.                                                     --
--                                                                            --
--    Xilinx products are not intended for use in life support appliances,    --
--    devices, or systems.  Use in such applications are expressly            --
--    prohibited.                                                             --
--                                                                            --
--    (c) Copyright 1995-2014 Xilinx, Inc.                                    --
--    All rights reserved.                                                    --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
-- You must compile the wrapper file bmg_72_765e7ee20c0385ac.vhd when simulating
-- the core, bmg_72_765e7ee20c0385ac. When compiling the wrapper file, be sure to
-- reference the XilinxCoreLib VHDL simulation library. For detailed
-- instructions, please refer to the "CORE Generator Help".

-- The synthesis directives "translate_off/translate_on" specified
-- below are supported by Xilinx, Mentor Graphics and Synplicity
-- synthesis tools. Ensure they are correct for your synthesis tool(s).

LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
-- synthesis translate_off
LIBRARY XilinxCoreLib;
-- synthesis translate_on
ENTITY bmg_72_765e7ee20c0385ac IS
  PORT (
    clka : IN STD_LOGIC;
    ena : IN STD_LOGIC;
    addra : IN STD_LOGIC_VECTOR(4 DOWNTO 0);
    douta : OUT STD_LOGIC_VECTOR(17 DOWNTO 0)
  );
END bmg_72_765e7ee20c0385ac;

ARCHITECTURE bmg_72_765e7ee20c0385ac_a OF bmg_72_765e7ee20c0385ac IS
-- synthesis translate_off
COMPONENT wrapped_bmg_72_765e7ee20c0385ac
  PORT (
    clka : IN STD_LOGIC;
    ena : IN STD_LOGIC;
    addra : IN STD_LOGIC_VECTOR(4 DOWNTO 0);
    douta : OUT STD_LOGIC_VECTOR(17 DOWNTO 0)
  );
END COMPONENT;

-- Configuration specification
  FOR ALL : wrapped_bmg_72_765e7ee20c0385ac USE ENTITY XilinxCoreLib.blk_mem_gen_v7_2(behavioral)
    GENERIC MAP (
      c_addra_width => 5,
      c_addrb_width => 5,
      c_algorithm => 1,
      c_axi_id_width => 4,
      c_axi_slave_type => 0,
      c_axi_type => 1,
      c_byte_size => 9,
      c_common_clk => 0,
      c_default_data => "0",
      c_disable_warn_bhv_coll => 0,
      c_disable_warn_bhv_range => 0,
      c_enable_32bit_address => 0,
      c_family => "virtex5",
      c_has_axi_id => 0,
      c_has_ena => 1,
      c_has_enb => 0,
      c_has_injecterr => 0,
      c_has_mem_output_regs_a => 1,
      c_has_mem_output_regs_b => 0,
      c_has_mux_output_regs_a => 0,
      c_has_mux_output_regs_b => 0,
      c_has_regcea => 0,
      c_has_regceb => 0,
      c_has_rsta => 0,
      c_has_rstb => 0,
      c_has_softecc_input_regs_a => 0,
      c_has_softecc_output_regs_b => 0,
      c_init_file_name => "bmg_72_765e7ee20c0385ac.mif",
      c_inita_val => "0",
      c_initb_val => "0",
      c_interface_type => 0,
      c_load_init_file => 1,
      c_mem_type => 3,
      c_mux_pipeline_stages => 0,
      c_prim_type => 1,
      c_read_depth_a => 32,
      c_read_depth_b => 32,
      c_read_width_a => 18,
      c_read_width_b => 18,
      c_rst_priority_a => "CE",
      c_rst_priority_b => "CE",
      c_rst_type => "SYNC",
      c_rstram_a => 0,
      c_rstram_b => 0,
      c_sim_collision_check => "ALL",
      c_use_byte_wea => 0,
      c_use_byte_web => 0,
      c_use_default_data => 0,
      c_use_ecc => 0,
      c_use_softecc => 0,
      c_wea_width => 1,
      c_web_width => 1,
      c_write_depth_a => 32,
      c_write_depth_b => 32,
      c_write_mode_a => "WRITE_FIRST",
      c_write_mode_b => "WRITE_FIRST",
      c_write_width_a => 18,
      c_write_width_b => 18,
      c_xdevicefamily => "virtex5"
    );
-- synthesis translate_on
BEGIN
-- synthesis translate_off
U0 : wrapped_bmg_72_765e7ee20c0385ac
  PORT MAP (
    clka => clka,
    ena => ena,
    addra => addra,
    douta => douta
  );
-- synthesis translate_on

END bmg_72_765e7ee20c0385ac_a;
--------------------------------------------------------------------------------
--    This file is owned and controlled by Xilinx and must be used solely     --
--    for design, simulation, implementation and creation of design files     --
--    limited to Xilinx devices or technologies. Use with non-Xilinx          --
--    devices or technologies is expressly prohibited and immediately         --
--    terminates your license.                                                --
--                                                                            --
--    XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" SOLELY    --
--    FOR USE IN DEVELOPING PROGRAMS AND SOLUTIONS FOR XILINX DEVICES.  BY    --
--    PROVIDING THIS DESIGN, CODE, OR INFORMATION AS ONE POSSIBLE             --
--    IMPLEMENTATION OF THIS FEATURE, APPLICATION OR STANDARD, XILINX IS      --
--    MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION IS FREE FROM ANY      --
--    CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE FOR OBTAINING ANY       --
--    RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.  XILINX EXPRESSLY       --
--    DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO THE ADEQUACY OF THE   --
--    IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OR          --
--    REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE FROM CLAIMS OF         --
--    INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A   --
--    PARTICULAR PURPOSE.                                                     --
--                                                                            --
--    Xilinx products are not intended for use in life support appliances,    --
--    devices, or systems.  Use in such applications are expressly            --
--    prohibited.                                                             --
--                                                                            --
--    (c) Copyright 1995-2014 Xilinx, Inc.                                    --
--    All rights reserved.                                                    --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
-- You must compile the wrapper file bmg_72_763f056d1756d515.vhd when simulating
-- the core, bmg_72_763f056d1756d515. When compiling the wrapper file, be sure to
-- reference the XilinxCoreLib VHDL simulation library. For detailed
-- instructions, please refer to the "CORE Generator Help".

-- The synthesis directives "translate_off/translate_on" specified
-- below are supported by Xilinx, Mentor Graphics and Synplicity
-- synthesis tools. Ensure they are correct for your synthesis tool(s).

LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
-- synthesis translate_off
LIBRARY XilinxCoreLib;
-- synthesis translate_on
ENTITY bmg_72_763f056d1756d515 IS
  PORT (
    clka : IN STD_LOGIC;
    ena : IN STD_LOGIC;
    addra : IN STD_LOGIC_VECTOR(3 DOWNTO 0);
    douta : OUT STD_LOGIC_VECTOR(17 DOWNTO 0)
  );
END bmg_72_763f056d1756d515;

ARCHITECTURE bmg_72_763f056d1756d515_a OF bmg_72_763f056d1756d515 IS
-- synthesis translate_off
COMPONENT wrapped_bmg_72_763f056d1756d515
  PORT (
    clka : IN STD_LOGIC;
    ena : IN STD_LOGIC;
    addra : IN STD_LOGIC_VECTOR(3 DOWNTO 0);
    douta : OUT STD_LOGIC_VECTOR(17 DOWNTO 0)
  );
END COMPONENT;

-- Configuration specification
  FOR ALL : wrapped_bmg_72_763f056d1756d515 USE ENTITY XilinxCoreLib.blk_mem_gen_v7_2(behavioral)
    GENERIC MAP (
      c_addra_width => 4,
      c_addrb_width => 4,
      c_algorithm => 1,
      c_axi_id_width => 4,
      c_axi_slave_type => 0,
      c_axi_type => 1,
      c_byte_size => 9,
      c_common_clk => 0,
      c_default_data => "0",
      c_disable_warn_bhv_coll => 0,
      c_disable_warn_bhv_range => 0,
      c_enable_32bit_address => 0,
      c_family => "virtex5",
      c_has_axi_id => 0,
      c_has_ena => 1,
      c_has_enb => 0,
      c_has_injecterr => 0,
      c_has_mem_output_regs_a => 1,
      c_has_mem_output_regs_b => 0,
      c_has_mux_output_regs_a => 0,
      c_has_mux_output_regs_b => 0,
      c_has_regcea => 0,
      c_has_regceb => 0,
      c_has_rsta => 0,
      c_has_rstb => 0,
      c_has_softecc_input_regs_a => 0,
      c_has_softecc_output_regs_b => 0,
      c_init_file_name => "bmg_72_763f056d1756d515.mif",
      c_inita_val => "0",
      c_initb_val => "0",
      c_interface_type => 0,
      c_load_init_file => 1,
      c_mem_type => 3,
      c_mux_pipeline_stages => 0,
      c_prim_type => 1,
      c_read_depth_a => 16,
      c_read_depth_b => 16,
      c_read_width_a => 18,
      c_read_width_b => 18,
      c_rst_priority_a => "CE",
      c_rst_priority_b => "CE",
      c_rst_type => "SYNC",
      c_rstram_a => 0,
      c_rstram_b => 0,
      c_sim_collision_check => "ALL",
      c_use_byte_wea => 0,
      c_use_byte_web => 0,
      c_use_default_data => 0,
      c_use_ecc => 0,
      c_use_softecc => 0,
      c_wea_width => 1,
      c_web_width => 1,
      c_write_depth_a => 16,
      c_write_depth_b => 16,
      c_write_mode_a => "WRITE_FIRST",
      c_write_mode_b => "WRITE_FIRST",
      c_write_width_a => 18,
      c_write_width_b => 18,
      c_xdevicefamily => "virtex5"
    );
-- synthesis translate_on
BEGIN
-- synthesis translate_off
U0 : wrapped_bmg_72_763f056d1756d515
  PORT MAP (
    clka => clka,
    ena => ena,
    addra => addra,
    douta => douta
  );
-- synthesis translate_on

END bmg_72_763f056d1756d515_a;
--------------------------------------------------------------------------------
--    This file is owned and controlled by Xilinx and must be used solely     --
--    for design, simulation, implementation and creation of design files     --
--    limited to Xilinx devices or technologies. Use with non-Xilinx          --
--    devices or technologies is expressly prohibited and immediately         --
--    terminates your license.                                                --
--                                                                            --
--    XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" SOLELY    --
--    FOR USE IN DEVELOPING PROGRAMS AND SOLUTIONS FOR XILINX DEVICES.  BY    --
--    PROVIDING THIS DESIGN, CODE, OR INFORMATION AS ONE POSSIBLE             --
--    IMPLEMENTATION OF THIS FEATURE, APPLICATION OR STANDARD, XILINX IS      --
--    MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION IS FREE FROM ANY      --
--    CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE FOR OBTAINING ANY       --
--    RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.  XILINX EXPRESSLY       --
--    DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO THE ADEQUACY OF THE   --
--    IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OR          --
--    REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE FROM CLAIMS OF         --
--    INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A   --
--    PARTICULAR PURPOSE.                                                     --
--                                                                            --
--    Xilinx products are not intended for use in life support appliances,    --
--    devices, or systems.  Use in such applications are expressly            --
--    prohibited.                                                             --
--                                                                            --
--    (c) Copyright 1995-2014 Xilinx, Inc.                                    --
--    All rights reserved.                                                    --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
-- You must compile the wrapper file bmg_72_47e00fa602868a13.vhd when simulating
-- the core, bmg_72_47e00fa602868a13. When compiling the wrapper file, be sure to
-- reference the XilinxCoreLib VHDL simulation library. For detailed
-- instructions, please refer to the "CORE Generator Help".

-- The synthesis directives "translate_off/translate_on" specified
-- below are supported by Xilinx, Mentor Graphics and Synplicity
-- synthesis tools. Ensure they are correct for your synthesis tool(s).

LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
-- synthesis translate_off
LIBRARY XilinxCoreLib;
-- synthesis translate_on
ENTITY bmg_72_47e00fa602868a13 IS
  PORT (
    clka : IN STD_LOGIC;
    ena : IN STD_LOGIC;
    wea : IN STD_LOGIC_VECTOR(0 DOWNTO 0);
    addra : IN STD_LOGIC_VECTOR(5 DOWNTO 0);
    dina : IN STD_LOGIC_VECTOR(35 DOWNTO 0);
    douta : OUT STD_LOGIC_VECTOR(35 DOWNTO 0)
  );
END bmg_72_47e00fa602868a13;

ARCHITECTURE bmg_72_47e00fa602868a13_a OF bmg_72_47e00fa602868a13 IS
-- synthesis translate_off
COMPONENT wrapped_bmg_72_47e00fa602868a13
  PORT (
    clka : IN STD_LOGIC;
    ena : IN STD_LOGIC;
    wea : IN STD_LOGIC_VECTOR(0 DOWNTO 0);
    addra : IN STD_LOGIC_VECTOR(5 DOWNTO 0);
    dina : IN STD_LOGIC_VECTOR(35 DOWNTO 0);
    douta : OUT STD_LOGIC_VECTOR(35 DOWNTO 0)
  );
END COMPONENT;

-- Configuration specification
  FOR ALL : wrapped_bmg_72_47e00fa602868a13 USE ENTITY XilinxCoreLib.blk_mem_gen_v7_2(behavioral)
    GENERIC MAP (
      c_addra_width => 6,
      c_addrb_width => 6,
      c_algorithm => 1,
      c_axi_id_width => 4,
      c_axi_slave_type => 0,
      c_axi_type => 1,
      c_byte_size => 9,
      c_common_clk => 0,
      c_default_data => "0",
      c_disable_warn_bhv_coll => 0,
      c_disable_warn_bhv_range => 0,
      c_enable_32bit_address => 0,
      c_family => "virtex5",
      c_has_axi_id => 0,
      c_has_ena => 1,
      c_has_enb => 0,
      c_has_injecterr => 0,
      c_has_mem_output_regs_a => 1,
      c_has_mem_output_regs_b => 0,
      c_has_mux_output_regs_a => 0,
      c_has_mux_output_regs_b => 0,
      c_has_regcea => 0,
      c_has_regceb => 0,
      c_has_rsta => 0,
      c_has_rstb => 0,
      c_has_softecc_input_regs_a => 0,
      c_has_softecc_output_regs_b => 0,
      c_init_file_name => "bmg_72_47e00fa602868a13.mif",
      c_inita_val => "0",
      c_initb_val => "0",
      c_interface_type => 0,
      c_load_init_file => 1,
      c_mem_type => 0,
      c_mux_pipeline_stages => 0,
      c_prim_type => 1,
      c_read_depth_a => 64,
      c_read_depth_b => 64,
      c_read_width_a => 36,
      c_read_width_b => 36,
      c_rst_priority_a => "CE",
      c_rst_priority_b => "CE",
      c_rst_type => "SYNC",
      c_rstram_a => 0,
      c_rstram_b => 0,
      c_sim_collision_check => "ALL",
      c_use_byte_wea => 0,
      c_use_byte_web => 0,
      c_use_default_data => 0,
      c_use_ecc => 0,
      c_use_softecc => 0,
      c_wea_width => 1,
      c_web_width => 1,
      c_write_depth_a => 64,
      c_write_depth_b => 64,
      c_write_mode_a => "READ_FIRST",
      c_write_mode_b => "WRITE_FIRST",
      c_write_width_a => 36,
      c_write_width_b => 36,
      c_xdevicefamily => "virtex5"
    );
-- synthesis translate_on
BEGIN
-- synthesis translate_off
U0 : wrapped_bmg_72_47e00fa602868a13
  PORT MAP (
    clka => clka,
    ena => ena,
    wea => wea,
    addra => addra,
    dina => dina,
    douta => douta
  );
-- synthesis translate_on

END bmg_72_47e00fa602868a13_a;
--------------------------------------------------------------------------------
--    This file is owned and controlled by Xilinx and must be used solely     --
--    for design, simulation, implementation and creation of design files     --
--    limited to Xilinx devices or technologies. Use with non-Xilinx          --
--    devices or technologies is expressly prohibited and immediately         --
--    terminates your license.                                                --
--                                                                            --
--    XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" SOLELY    --
--    FOR USE IN DEVELOPING PROGRAMS AND SOLUTIONS FOR XILINX DEVICES.  BY    --
--    PROVIDING THIS DESIGN, CODE, OR INFORMATION AS ONE POSSIBLE             --
--    IMPLEMENTATION OF THIS FEATURE, APPLICATION OR STANDARD, XILINX IS      --
--    MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION IS FREE FROM ANY      --
--    CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE FOR OBTAINING ANY       --
--    RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.  XILINX EXPRESSLY       --
--    DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO THE ADEQUACY OF THE   --
--    IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OR          --
--    REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE FROM CLAIMS OF         --
--    INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A   --
--    PARTICULAR PURPOSE.                                                     --
--                                                                            --
--    Xilinx products are not intended for use in life support appliances,    --
--    devices, or systems.  Use in such applications are expressly            --
--    prohibited.                                                             --
--                                                                            --
--    (c) Copyright 1995-2014 Xilinx, Inc.                                    --
--    All rights reserved.                                                    --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
-- You must compile the wrapper file dmg_72_c09662d4202cd49a.vhd when simulating
-- the core, dmg_72_c09662d4202cd49a. When compiling the wrapper file, be sure to
-- reference the XilinxCoreLib VHDL simulation library. For detailed
-- instructions, please refer to the "CORE Generator Help".

-- The synthesis directives "translate_off/translate_on" specified
-- below are supported by Xilinx, Mentor Graphics and Synplicity
-- synthesis tools. Ensure they are correct for your synthesis tool(s).

LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
-- synthesis translate_off
LIBRARY XilinxCoreLib;
-- synthesis translate_on
ENTITY dmg_72_c09662d4202cd49a IS
  PORT (
    a : IN STD_LOGIC_VECTOR(3 DOWNTO 0);
    clk : IN STD_LOGIC;
    qspo_ce : IN STD_LOGIC;
    qspo : OUT STD_LOGIC_VECTOR(17 DOWNTO 0)
  );
END dmg_72_c09662d4202cd49a;

ARCHITECTURE dmg_72_c09662d4202cd49a_a OF dmg_72_c09662d4202cd49a IS
-- synthesis translate_off
COMPONENT wrapped_dmg_72_c09662d4202cd49a
  PORT (
    a : IN STD_LOGIC_VECTOR(3 DOWNTO 0);
    clk : IN STD_LOGIC;
    qspo_ce : IN STD_LOGIC;
    qspo : OUT STD_LOGIC_VECTOR(17 DOWNTO 0)
  );
END COMPONENT;

-- Configuration specification
  FOR ALL : wrapped_dmg_72_c09662d4202cd49a USE ENTITY XilinxCoreLib.dist_mem_gen_v7_2(behavioral)
    GENERIC MAP (
      c_addr_width => 4,
      c_default_data => "0",
      c_depth => 16,
      c_family => "virtex5",
      c_has_clk => 1,
      c_has_d => 0,
      c_has_dpo => 0,
      c_has_dpra => 0,
      c_has_i_ce => 0,
      c_has_qdpo => 0,
      c_has_qdpo_ce => 0,
      c_has_qdpo_clk => 0,
      c_has_qdpo_rst => 0,
      c_has_qdpo_srst => 0,
      c_has_qspo => 1,
      c_has_qspo_ce => 1,
      c_has_qspo_rst => 0,
      c_has_qspo_srst => 0,
      c_has_spo => 0,
      c_has_spra => 0,
      c_has_we => 0,
      c_mem_init_file => "dmg_72_c09662d4202cd49a.mif",
      c_mem_type => 0,
      c_parser_type => 1,
      c_pipeline_stages => 0,
      c_qce_joined => 0,
      c_qualify_we => 0,
      c_read_mif => 1,
      c_reg_a_d_inputs => 0,
      c_reg_dpra_input => 0,
      c_sync_enable => 1,
      c_width => 18
    );
-- synthesis translate_on
BEGIN
-- synthesis translate_off
U0 : wrapped_dmg_72_c09662d4202cd49a
  PORT MAP (
    a => a,
    clk => clk,
    qspo_ce => qspo_ce,
    qspo => qspo
  );
-- synthesis translate_on

END dmg_72_c09662d4202cd49a_a;
--------------------------------------------------------------------------------
--    This file is owned and controlled by Xilinx and must be used solely     --
--    for design, simulation, implementation and creation of design files     --
--    limited to Xilinx devices or technologies. Use with non-Xilinx          --
--    devices or technologies is expressly prohibited and immediately         --
--    terminates your license.                                                --
--                                                                            --
--    XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" SOLELY    --
--    FOR USE IN DEVELOPING PROGRAMS AND SOLUTIONS FOR XILINX DEVICES.  BY    --
--    PROVIDING THIS DESIGN, CODE, OR INFORMATION AS ONE POSSIBLE             --
--    IMPLEMENTATION OF THIS FEATURE, APPLICATION OR STANDARD, XILINX IS      --
--    MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION IS FREE FROM ANY      --
--    CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE FOR OBTAINING ANY       --
--    RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.  XILINX EXPRESSLY       --
--    DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO THE ADEQUACY OF THE   --
--    IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OR          --
--    REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE FROM CLAIMS OF         --
--    INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A   --
--    PARTICULAR PURPOSE.                                                     --
--                                                                            --
--    Xilinx products are not intended for use in life support appliances,    --
--    devices, or systems.  Use in such applications are expressly            --
--    prohibited.                                                             --
--                                                                            --
--    (c) Copyright 1995-2014 Xilinx, Inc.                                    --
--    All rights reserved.                                                    --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
-- You must compile the wrapper file addsb_11_0_cdd18bba176b5e77.vhd when simulating
-- the core, addsb_11_0_cdd18bba176b5e77. When compiling the wrapper file, be sure to
-- reference the XilinxCoreLib VHDL simulation library. For detailed
-- instructions, please refer to the "CORE Generator Help".

-- The synthesis directives "translate_off/translate_on" specified
-- below are supported by Xilinx, Mentor Graphics and Synplicity
-- synthesis tools. Ensure they are correct for your synthesis tool(s).

LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
-- synthesis translate_off
LIBRARY XilinxCoreLib;
-- synthesis translate_on
ENTITY addsb_11_0_cdd18bba176b5e77 IS
  PORT (
    a : IN STD_LOGIC_VECTOR(22 DOWNTO 0);
    b : IN STD_LOGIC_VECTOR(22 DOWNTO 0);
    s : OUT STD_LOGIC_VECTOR(22 DOWNTO 0)
  );
END addsb_11_0_cdd18bba176b5e77;

ARCHITECTURE addsb_11_0_cdd18bba176b5e77_a OF addsb_11_0_cdd18bba176b5e77 IS
-- synthesis translate_off
COMPONENT wrapped_addsb_11_0_cdd18bba176b5e77
  PORT (
    a : IN STD_LOGIC_VECTOR(22 DOWNTO 0);
    b : IN STD_LOGIC_VECTOR(22 DOWNTO 0);
    s : OUT STD_LOGIC_VECTOR(22 DOWNTO 0)
  );
END COMPONENT;

-- Configuration specification
  FOR ALL : wrapped_addsb_11_0_cdd18bba176b5e77 USE ENTITY XilinxCoreLib.c_addsub_v11_0(behavioral)
    GENERIC MAP (
      c_a_type => 0,
      c_a_width => 23,
      c_add_mode => 0,
      c_ainit_val => "0",
      c_b_constant => 0,
      c_b_type => 0,
      c_b_value => "00000000000000000000000",
      c_b_width => 23,
      c_borrow_low => 1,
      c_bypass_low => 0,
      c_ce_overrides_bypass => 1,
      c_ce_overrides_sclr => 0,
      c_has_bypass => 0,
      c_has_c_in => 0,
      c_has_c_out => 0,
      c_has_ce => 0,
      c_has_sclr => 0,
      c_has_sinit => 0,
      c_has_sset => 0,
      c_implementation => 0,
      c_latency => 0,
      c_out_width => 23,
      c_sclr_overrides_sset => 1,
      c_sinit_val => "0",
      c_verbosity => 0,
      c_xdevicefamily => "virtex5"
    );
-- synthesis translate_on
BEGIN
-- synthesis translate_off
U0 : wrapped_addsb_11_0_cdd18bba176b5e77
  PORT MAP (
    a => a,
    b => b,
    s => s
  );
-- synthesis translate_on

END addsb_11_0_cdd18bba176b5e77_a;
--------------------------------------------------------------------------------
--    This file is owned and controlled by Xilinx and must be used solely     --
--    for design, simulation, implementation and creation of design files     --
--    limited to Xilinx devices or technologies. Use with non-Xilinx          --
--    devices or technologies is expressly prohibited and immediately         --
--    terminates your license.                                                --
--                                                                            --
--    XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" SOLELY    --
--    FOR USE IN DEVELOPING PROGRAMS AND SOLUTIONS FOR XILINX DEVICES.  BY    --
--    PROVIDING THIS DESIGN, CODE, OR INFORMATION AS ONE POSSIBLE             --
--    IMPLEMENTATION OF THIS FEATURE, APPLICATION OR STANDARD, XILINX IS      --
--    MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION IS FREE FROM ANY      --
--    CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE FOR OBTAINING ANY       --
--    RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.  XILINX EXPRESSLY       --
--    DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO THE ADEQUACY OF THE   --
--    IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OR          --
--    REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE FROM CLAIMS OF         --
--    INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A   --
--    PARTICULAR PURPOSE.                                                     --
--                                                                            --
--    Xilinx products are not intended for use in life support appliances,    --
--    devices, or systems.  Use in such applications are expressly            --
--    prohibited.                                                             --
--                                                                            --
--    (c) Copyright 1995-2014 Xilinx, Inc.                                    --
--    All rights reserved.                                                    --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
-- You must compile the wrapper file dmg_72_60b1d930b1392bee.vhd when simulating
-- the core, dmg_72_60b1d930b1392bee. When compiling the wrapper file, be sure to
-- reference the XilinxCoreLib VHDL simulation library. For detailed
-- instructions, please refer to the "CORE Generator Help".

-- The synthesis directives "translate_off/translate_on" specified
-- below are supported by Xilinx, Mentor Graphics and Synplicity
-- synthesis tools. Ensure they are correct for your synthesis tool(s).

LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
-- synthesis translate_off
LIBRARY XilinxCoreLib;
-- synthesis translate_on
ENTITY dmg_72_60b1d930b1392bee IS
  PORT (
    a : IN STD_LOGIC_VECTOR(5 DOWNTO 0);
    spo : OUT STD_LOGIC_VECTOR(5 DOWNTO 0)
  );
END dmg_72_60b1d930b1392bee;

ARCHITECTURE dmg_72_60b1d930b1392bee_a OF dmg_72_60b1d930b1392bee IS
-- synthesis translate_off
COMPONENT wrapped_dmg_72_60b1d930b1392bee
  PORT (
    a : IN STD_LOGIC_VECTOR(5 DOWNTO 0);
    spo : OUT STD_LOGIC_VECTOR(5 DOWNTO 0)
  );
END COMPONENT;

-- Configuration specification
  FOR ALL : wrapped_dmg_72_60b1d930b1392bee USE ENTITY XilinxCoreLib.dist_mem_gen_v7_2(behavioral)
    GENERIC MAP (
      c_addr_width => 6,
      c_default_data => "0",
      c_depth => 64,
      c_family => "virtex5",
      c_has_clk => 0,
      c_has_d => 0,
      c_has_dpo => 0,
      c_has_dpra => 0,
      c_has_i_ce => 0,
      c_has_qdpo => 0,
      c_has_qdpo_ce => 0,
      c_has_qdpo_clk => 0,
      c_has_qdpo_rst => 0,
      c_has_qdpo_srst => 0,
      c_has_qspo => 0,
      c_has_qspo_ce => 0,
      c_has_qspo_rst => 0,
      c_has_qspo_srst => 0,
      c_has_spo => 1,
      c_has_spra => 0,
      c_has_we => 0,
      c_mem_init_file => "dmg_72_60b1d930b1392bee.mif",
      c_mem_type => 0,
      c_parser_type => 1,
      c_pipeline_stages => 0,
      c_qce_joined => 0,
      c_qualify_we => 0,
      c_read_mif => 1,
      c_reg_a_d_inputs => 0,
      c_reg_dpra_input => 0,
      c_sync_enable => 1,
      c_width => 6
    );
-- synthesis translate_on
BEGIN
-- synthesis translate_off
U0 : wrapped_dmg_72_60b1d930b1392bee
  PORT MAP (
    a => a,
    spo => spo
  );
-- synthesis translate_on

END dmg_72_60b1d930b1392bee_a;
--------------------------------------------------------------------------------
--    This file is owned and controlled by Xilinx and must be used solely     --
--    for design, simulation, implementation and creation of design files     --
--    limited to Xilinx devices or technologies. Use with non-Xilinx          --
--    devices or technologies is expressly prohibited and immediately         --
--    terminates your license.                                                --
--                                                                            --
--    XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" SOLELY    --
--    FOR USE IN DEVELOPING PROGRAMS AND SOLUTIONS FOR XILINX DEVICES.  BY    --
--    PROVIDING THIS DESIGN, CODE, OR INFORMATION AS ONE POSSIBLE             --
--    IMPLEMENTATION OF THIS FEATURE, APPLICATION OR STANDARD, XILINX IS      --
--    MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION IS FREE FROM ANY      --
--    CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE FOR OBTAINING ANY       --
--    RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.  XILINX EXPRESSLY       --
--    DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO THE ADEQUACY OF THE   --
--    IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OR          --
--    REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE FROM CLAIMS OF         --
--    INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A   --
--    PARTICULAR PURPOSE.                                                     --
--                                                                            --
--    Xilinx products are not intended for use in life support appliances,    --
--    devices, or systems.  Use in such applications are expressly            --
--    prohibited.                                                             --
--                                                                            --
--    (c) Copyright 1995-2014 Xilinx, Inc.                                    --
--    All rights reserved.                                                    --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
-- You must compile the wrapper file cntr_11_0_09a48837e6414c49.vhd when simulating
-- the core, cntr_11_0_09a48837e6414c49. When compiling the wrapper file, be sure to
-- reference the XilinxCoreLib VHDL simulation library. For detailed
-- instructions, please refer to the "CORE Generator Help".

-- The synthesis directives "translate_off/translate_on" specified
-- below are supported by Xilinx, Mentor Graphics and Synplicity
-- synthesis tools. Ensure they are correct for your synthesis tool(s).

LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
-- synthesis translate_off
LIBRARY XilinxCoreLib;
-- synthesis translate_on
ENTITY cntr_11_0_09a48837e6414c49 IS
  PORT (
    clk : IN STD_LOGIC;
    ce : IN STD_LOGIC;
    sinit : IN STD_LOGIC;
    q : OUT STD_LOGIC_VECTOR(6 DOWNTO 0)
  );
END cntr_11_0_09a48837e6414c49;

ARCHITECTURE cntr_11_0_09a48837e6414c49_a OF cntr_11_0_09a48837e6414c49 IS
-- synthesis translate_off
COMPONENT wrapped_cntr_11_0_09a48837e6414c49
  PORT (
    clk : IN STD_LOGIC;
    ce : IN STD_LOGIC;
    sinit : IN STD_LOGIC;
    q : OUT STD_LOGIC_VECTOR(6 DOWNTO 0)
  );
END COMPONENT;

-- Configuration specification
  FOR ALL : wrapped_cntr_11_0_09a48837e6414c49 USE ENTITY XilinxCoreLib.c_counter_binary_v11_0(behavioral)
    GENERIC MAP (
      c_ainit_val => "0",
      c_ce_overrides_sync => 0,
      c_count_by => "1",
      c_count_mode => 0,
      c_count_to => "1",
      c_fb_latency => 0,
      c_has_ce => 1,
      c_has_load => 0,
      c_has_sclr => 0,
      c_has_sinit => 1,
      c_has_sset => 0,
      c_has_thresh0 => 0,
      c_implementation => 0,
      c_latency => 1,
      c_load_low => 0,
      c_restrict_count => 0,
      c_sclr_overrides_sset => 1,
      c_sinit_val => "1000000",
      c_thresh0_value => "1",
      c_verbosity => 0,
      c_width => 7,
      c_xdevicefamily => "virtex5"
    );
-- synthesis translate_on
BEGIN
-- synthesis translate_off
U0 : wrapped_cntr_11_0_09a48837e6414c49
  PORT MAP (
    clk => clk,
    ce => ce,
    sinit => sinit,
    q => q
  );
-- synthesis translate_on

END cntr_11_0_09a48837e6414c49_a;
--------------------------------------------------------------------------------
--    This file is owned and controlled by Xilinx and must be used solely     --
--    for design, simulation, implementation and creation of design files     --
--    limited to Xilinx devices or technologies. Use with non-Xilinx          --
--    devices or technologies is expressly prohibited and immediately         --
--    terminates your license.                                                --
--                                                                            --
--    XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" SOLELY    --
--    FOR USE IN DEVELOPING PROGRAMS AND SOLUTIONS FOR XILINX DEVICES.  BY    --
--    PROVIDING THIS DESIGN, CODE, OR INFORMATION AS ONE POSSIBLE             --
--    IMPLEMENTATION OF THIS FEATURE, APPLICATION OR STANDARD, XILINX IS      --
--    MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION IS FREE FROM ANY      --
--    CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE FOR OBTAINING ANY       --
--    RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.  XILINX EXPRESSLY       --
--    DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO THE ADEQUACY OF THE   --
--    IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OR          --
--    REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE FROM CLAIMS OF         --
--    INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A   --
--    PARTICULAR PURPOSE.                                                     --
--                                                                            --
--    Xilinx products are not intended for use in life support appliances,    --
--    devices, or systems.  Use in such applications are expressly            --
--    prohibited.                                                             --
--                                                                            --
--    (c) Copyright 1995-2014 Xilinx, Inc.                                    --
--    All rights reserved.                                                    --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
-- You must compile the wrapper file cntr_11_0_d443bc0f2f8ab282.vhd when simulating
-- the core, cntr_11_0_d443bc0f2f8ab282. When compiling the wrapper file, be sure to
-- reference the XilinxCoreLib VHDL simulation library. For detailed
-- instructions, please refer to the "CORE Generator Help".

-- The synthesis directives "translate_off/translate_on" specified
-- below are supported by Xilinx, Mentor Graphics and Synplicity
-- synthesis tools. Ensure they are correct for your synthesis tool(s).

LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
-- synthesis translate_off
LIBRARY XilinxCoreLib;
-- synthesis translate_on
ENTITY cntr_11_0_d443bc0f2f8ab282 IS
  PORT (
    clk : IN STD_LOGIC;
    ce : IN STD_LOGIC;
    sinit : IN STD_LOGIC;
    q : OUT STD_LOGIC_VECTOR(19 DOWNTO 0)
  );
END cntr_11_0_d443bc0f2f8ab282;

ARCHITECTURE cntr_11_0_d443bc0f2f8ab282_a OF cntr_11_0_d443bc0f2f8ab282 IS
-- synthesis translate_off
COMPONENT wrapped_cntr_11_0_d443bc0f2f8ab282
  PORT (
    clk : IN STD_LOGIC;
    ce : IN STD_LOGIC;
    sinit : IN STD_LOGIC;
    q : OUT STD_LOGIC_VECTOR(19 DOWNTO 0)
  );
END COMPONENT;

-- Configuration specification
  FOR ALL : wrapped_cntr_11_0_d443bc0f2f8ab282 USE ENTITY XilinxCoreLib.c_counter_binary_v11_0(behavioral)
    GENERIC MAP (
      c_ainit_val => "0",
      c_ce_overrides_sync => 0,
      c_count_by => "1",
      c_count_mode => 0,
      c_count_to => "1",
      c_fb_latency => 0,
      c_has_ce => 1,
      c_has_load => 0,
      c_has_sclr => 0,
      c_has_sinit => 1,
      c_has_sset => 0,
      c_has_thresh0 => 0,
      c_implementation => 0,
      c_latency => 1,
      c_load_low => 0,
      c_restrict_count => 0,
      c_sclr_overrides_sset => 1,
      c_sinit_val => "0",
      c_thresh0_value => "1",
      c_verbosity => 0,
      c_width => 20,
      c_xdevicefamily => "virtex5"
    );
-- synthesis translate_on
BEGIN
-- synthesis translate_off
U0 : wrapped_cntr_11_0_d443bc0f2f8ab282
  PORT MAP (
    clk => clk,
    ce => ce,
    sinit => sinit,
    q => q
  );
-- synthesis translate_on

END cntr_11_0_d443bc0f2f8ab282_a;
--------------------------------------------------------------------------------
--    This file is owned and controlled by Xilinx and must be used solely     --
--    for design, simulation, implementation and creation of design files     --
--    limited to Xilinx devices or technologies. Use with non-Xilinx          --
--    devices or technologies is expressly prohibited and immediately         --
--    terminates your license.                                                --
--                                                                            --
--    XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" SOLELY    --
--    FOR USE IN DEVELOPING PROGRAMS AND SOLUTIONS FOR XILINX DEVICES.  BY    --
--    PROVIDING THIS DESIGN, CODE, OR INFORMATION AS ONE POSSIBLE             --
--    IMPLEMENTATION OF THIS FEATURE, APPLICATION OR STANDARD, XILINX IS      --
--    MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION IS FREE FROM ANY      --
--    CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE FOR OBTAINING ANY       --
--    RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.  XILINX EXPRESSLY       --
--    DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO THE ADEQUACY OF THE   --
--    IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OR          --
--    REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE FROM CLAIMS OF         --
--    INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A   --
--    PARTICULAR PURPOSE.                                                     --
--                                                                            --
--    Xilinx products are not intended for use in life support appliances,    --
--    devices, or systems.  Use in such applications are expressly            --
--    prohibited.                                                             --
--                                                                            --
--    (c) Copyright 1995-2014 Xilinx, Inc.                                    --
--    All rights reserved.                                                    --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
-- You must compile the wrapper file cntr_11_0_ccf1a4007466a9ac.vhd when simulating
-- the core, cntr_11_0_ccf1a4007466a9ac. When compiling the wrapper file, be sure to
-- reference the XilinxCoreLib VHDL simulation library. For detailed
-- instructions, please refer to the "CORE Generator Help".

-- The synthesis directives "translate_off/translate_on" specified
-- below are supported by Xilinx, Mentor Graphics and Synplicity
-- synthesis tools. Ensure they are correct for your synthesis tool(s).

LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
-- synthesis translate_off
LIBRARY XilinxCoreLib;
-- synthesis translate_on
ENTITY cntr_11_0_ccf1a4007466a9ac IS
  PORT (
    clk : IN STD_LOGIC;
    ce : IN STD_LOGIC;
    sinit : IN STD_LOGIC;
    q : OUT STD_LOGIC_VECTOR(18 DOWNTO 0)
  );
END cntr_11_0_ccf1a4007466a9ac;

ARCHITECTURE cntr_11_0_ccf1a4007466a9ac_a OF cntr_11_0_ccf1a4007466a9ac IS
-- synthesis translate_off
COMPONENT wrapped_cntr_11_0_ccf1a4007466a9ac
  PORT (
    clk : IN STD_LOGIC;
    ce : IN STD_LOGIC;
    sinit : IN STD_LOGIC;
    q : OUT STD_LOGIC_VECTOR(18 DOWNTO 0)
  );
END COMPONENT;

-- Configuration specification
  FOR ALL : wrapped_cntr_11_0_ccf1a4007466a9ac USE ENTITY XilinxCoreLib.c_counter_binary_v11_0(behavioral)
    GENERIC MAP (
      c_ainit_val => "0",
      c_ce_overrides_sync => 0,
      c_count_by => "1",
      c_count_mode => 0,
      c_count_to => "1",
      c_fb_latency => 0,
      c_has_ce => 1,
      c_has_load => 0,
      c_has_sclr => 0,
      c_has_sinit => 1,
      c_has_sset => 0,
      c_has_thresh0 => 0,
      c_implementation => 0,
      c_latency => 1,
      c_load_low => 0,
      c_restrict_count => 0,
      c_sclr_overrides_sset => 1,
      c_sinit_val => "0",
      c_thresh0_value => "1",
      c_verbosity => 0,
      c_width => 19,
      c_xdevicefamily => "virtex5"
    );
-- synthesis translate_on
BEGIN
-- synthesis translate_off
U0 : wrapped_cntr_11_0_ccf1a4007466a9ac
  PORT MAP (
    clk => clk,
    ce => ce,
    sinit => sinit,
    q => q
  );
-- synthesis translate_on

END cntr_11_0_ccf1a4007466a9ac_a;
--------------------------------------------------------------------------------
--    This file is owned and controlled by Xilinx and must be used solely     --
--    for design, simulation, implementation and creation of design files     --
--    limited to Xilinx devices or technologies. Use with non-Xilinx          --
--    devices or technologies is expressly prohibited and immediately         --
--    terminates your license.                                                --
--                                                                            --
--    XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" SOLELY    --
--    FOR USE IN DEVELOPING PROGRAMS AND SOLUTIONS FOR XILINX DEVICES.  BY    --
--    PROVIDING THIS DESIGN, CODE, OR INFORMATION AS ONE POSSIBLE             --
--    IMPLEMENTATION OF THIS FEATURE, APPLICATION OR STANDARD, XILINX IS      --
--    MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION IS FREE FROM ANY      --
--    CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE FOR OBTAINING ANY       --
--    RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.  XILINX EXPRESSLY       --
--    DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO THE ADEQUACY OF THE   --
--    IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OR          --
--    REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE FROM CLAIMS OF         --
--    INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A   --
--    PARTICULAR PURPOSE.                                                     --
--                                                                            --
--    Xilinx products are not intended for use in life support appliances,    --
--    devices, or systems.  Use in such applications are expressly            --
--    prohibited.                                                             --
--                                                                            --
--    (c) Copyright 1995-2014 Xilinx, Inc.                                    --
--    All rights reserved.                                                    --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
-- You must compile the wrapper file addsb_11_0_b5c2f0e20381feb6.vhd when simulating
-- the core, addsb_11_0_b5c2f0e20381feb6. When compiling the wrapper file, be sure to
-- reference the XilinxCoreLib VHDL simulation library. For detailed
-- instructions, please refer to the "CORE Generator Help".

-- The synthesis directives "translate_off/translate_on" specified
-- below are supported by Xilinx, Mentor Graphics and Synplicity
-- synthesis tools. Ensure they are correct for your synthesis tool(s).

LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
-- synthesis translate_off
LIBRARY XilinxCoreLib;
-- synthesis translate_on
ENTITY addsb_11_0_b5c2f0e20381feb6 IS
  PORT (
    a : IN STD_LOGIC_VECTOR(19 DOWNTO 0);
    b : IN STD_LOGIC_VECTOR(19 DOWNTO 0);
    clk : IN STD_LOGIC;
    ce : IN STD_LOGIC;
    s : OUT STD_LOGIC_VECTOR(19 DOWNTO 0)
  );
END addsb_11_0_b5c2f0e20381feb6;

ARCHITECTURE addsb_11_0_b5c2f0e20381feb6_a OF addsb_11_0_b5c2f0e20381feb6 IS
-- synthesis translate_off
COMPONENT wrapped_addsb_11_0_b5c2f0e20381feb6
  PORT (
    a : IN STD_LOGIC_VECTOR(19 DOWNTO 0);
    b : IN STD_LOGIC_VECTOR(19 DOWNTO 0);
    clk : IN STD_LOGIC;
    ce : IN STD_LOGIC;
    s : OUT STD_LOGIC_VECTOR(19 DOWNTO 0)
  );
END COMPONENT;

-- Configuration specification
  FOR ALL : wrapped_addsb_11_0_b5c2f0e20381feb6 USE ENTITY XilinxCoreLib.c_addsub_v11_0(behavioral)
    GENERIC MAP (
      c_a_type => 0,
      c_a_width => 20,
      c_add_mode => 0,
      c_ainit_val => "0",
      c_b_constant => 0,
      c_b_type => 0,
      c_b_value => "00000000000000000000",
      c_b_width => 20,
      c_borrow_low => 1,
      c_bypass_low => 0,
      c_ce_overrides_bypass => 1,
      c_ce_overrides_sclr => 0,
      c_has_bypass => 0,
      c_has_c_in => 0,
      c_has_c_out => 0,
      c_has_ce => 1,
      c_has_sclr => 0,
      c_has_sinit => 0,
      c_has_sset => 0,
      c_implementation => 1,
      c_latency => 1,
      c_out_width => 20,
      c_sclr_overrides_sset => 1,
      c_sinit_val => "0",
      c_verbosity => 0,
      c_xdevicefamily => "virtex5"
    );
-- synthesis translate_on
BEGIN
-- synthesis translate_off
U0 : wrapped_addsb_11_0_b5c2f0e20381feb6
  PORT MAP (
    a => a,
    b => b,
    clk => clk,
    ce => ce,
    s => s
  );
-- synthesis translate_on

END addsb_11_0_b5c2f0e20381feb6_a;
--------------------------------------------------------------------------------
--    This file is owned and controlled by Xilinx and must be used solely     --
--    for design, simulation, implementation and creation of design files     --
--    limited to Xilinx devices or technologies. Use with non-Xilinx          --
--    devices or technologies is expressly prohibited and immediately         --
--    terminates your license.                                                --
--                                                                            --
--    XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" SOLELY    --
--    FOR USE IN DEVELOPING PROGRAMS AND SOLUTIONS FOR XILINX DEVICES.  BY    --
--    PROVIDING THIS DESIGN, CODE, OR INFORMATION AS ONE POSSIBLE             --
--    IMPLEMENTATION OF THIS FEATURE, APPLICATION OR STANDARD, XILINX IS      --
--    MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION IS FREE FROM ANY      --
--    CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE FOR OBTAINING ANY       --
--    RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.  XILINX EXPRESSLY       --
--    DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO THE ADEQUACY OF THE   --
--    IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OR          --
--    REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE FROM CLAIMS OF         --
--    INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A   --
--    PARTICULAR PURPOSE.                                                     --
--                                                                            --
--    Xilinx products are not intended for use in life support appliances,    --
--    devices, or systems.  Use in such applications are expressly            --
--    prohibited.                                                             --
--                                                                            --
--    (c) Copyright 1995-2014 Xilinx, Inc.                                    --
--    All rights reserved.                                                    --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
-- You must compile the wrapper file dmg_72_8ff5c16d3b09b3bb.vhd when simulating
-- the core, dmg_72_8ff5c16d3b09b3bb. When compiling the wrapper file, be sure to
-- reference the XilinxCoreLib VHDL simulation library. For detailed
-- instructions, please refer to the "CORE Generator Help".

-- The synthesis directives "translate_off/translate_on" specified
-- below are supported by Xilinx, Mentor Graphics and Synplicity
-- synthesis tools. Ensure they are correct for your synthesis tool(s).

LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
-- synthesis translate_off
LIBRARY XilinxCoreLib;
-- synthesis translate_on
ENTITY dmg_72_8ff5c16d3b09b3bb IS
  PORT (
    a : IN STD_LOGIC_VECTOR(6 DOWNTO 0);
    clk : IN STD_LOGIC;
    qspo_ce : IN STD_LOGIC;
    qspo : OUT STD_LOGIC_VECTOR(6 DOWNTO 0)
  );
END dmg_72_8ff5c16d3b09b3bb;

ARCHITECTURE dmg_72_8ff5c16d3b09b3bb_a OF dmg_72_8ff5c16d3b09b3bb IS
-- synthesis translate_off
COMPONENT wrapped_dmg_72_8ff5c16d3b09b3bb
  PORT (
    a : IN STD_LOGIC_VECTOR(6 DOWNTO 0);
    clk : IN STD_LOGIC;
    qspo_ce : IN STD_LOGIC;
    qspo : OUT STD_LOGIC_VECTOR(6 DOWNTO 0)
  );
END COMPONENT;

-- Configuration specification
  FOR ALL : wrapped_dmg_72_8ff5c16d3b09b3bb USE ENTITY XilinxCoreLib.dist_mem_gen_v7_2(behavioral)
    GENERIC MAP (
      c_addr_width => 7,
      c_default_data => "0",
      c_depth => 128,
      c_family => "virtex5",
      c_has_clk => 1,
      c_has_d => 0,
      c_has_dpo => 0,
      c_has_dpra => 0,
      c_has_i_ce => 0,
      c_has_qdpo => 0,
      c_has_qdpo_ce => 0,
      c_has_qdpo_clk => 0,
      c_has_qdpo_rst => 0,
      c_has_qdpo_srst => 0,
      c_has_qspo => 1,
      c_has_qspo_ce => 1,
      c_has_qspo_rst => 0,
      c_has_qspo_srst => 0,
      c_has_spo => 0,
      c_has_spra => 0,
      c_has_we => 0,
      c_mem_init_file => "dmg_72_8ff5c16d3b09b3bb.mif",
      c_mem_type => 0,
      c_parser_type => 1,
      c_pipeline_stages => 0,
      c_qce_joined => 0,
      c_qualify_we => 0,
      c_read_mif => 1,
      c_reg_a_d_inputs => 0,
      c_reg_dpra_input => 0,
      c_sync_enable => 1,
      c_width => 7
    );
-- synthesis translate_on
BEGIN
-- synthesis translate_off
U0 : wrapped_dmg_72_8ff5c16d3b09b3bb
  PORT MAP (
    a => a,
    clk => clk,
    qspo_ce => qspo_ce,
    qspo => qspo
  );
-- synthesis translate_on

END dmg_72_8ff5c16d3b09b3bb_a;
--------------------------------------------------------------------------------
--    This file is owned and controlled by Xilinx and must be used solely     --
--    for design, simulation, implementation and creation of design files     --
--    limited to Xilinx devices or technologies. Use with non-Xilinx          --
--    devices or technologies is expressly prohibited and immediately         --
--    terminates your license.                                                --
--                                                                            --
--    XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" SOLELY    --
--    FOR USE IN DEVELOPING PROGRAMS AND SOLUTIONS FOR XILINX DEVICES.  BY    --
--    PROVIDING THIS DESIGN, CODE, OR INFORMATION AS ONE POSSIBLE             --
--    IMPLEMENTATION OF THIS FEATURE, APPLICATION OR STANDARD, XILINX IS      --
--    MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION IS FREE FROM ANY      --
--    CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE FOR OBTAINING ANY       --
--    RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.  XILINX EXPRESSLY       --
--    DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO THE ADEQUACY OF THE   --
--    IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OR          --
--    REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE FROM CLAIMS OF         --
--    INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A   --
--    PARTICULAR PURPOSE.                                                     --
--                                                                            --
--    Xilinx products are not intended for use in life support appliances,    --
--    devices, or systems.  Use in such applications are expressly            --
--    prohibited.                                                             --
--                                                                            --
--    (c) Copyright 1995-2014 Xilinx, Inc.                                    --
--    All rights reserved.                                                    --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
-- You must compile the wrapper file bmg_72_5eb14d6795836fe0.vhd when simulating
-- the core, bmg_72_5eb14d6795836fe0. When compiling the wrapper file, be sure to
-- reference the XilinxCoreLib VHDL simulation library. For detailed
-- instructions, please refer to the "CORE Generator Help".

-- The synthesis directives "translate_off/translate_on" specified
-- below are supported by Xilinx, Mentor Graphics and Synplicity
-- synthesis tools. Ensure they are correct for your synthesis tool(s).

LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
-- synthesis translate_off
LIBRARY XilinxCoreLib;
-- synthesis translate_on
ENTITY bmg_72_5eb14d6795836fe0 IS
  PORT (
    clka : IN STD_LOGIC;
    ena : IN STD_LOGIC;
    addra : IN STD_LOGIC_VECTOR(2 DOWNTO 0);
    douta : OUT STD_LOGIC_VECTOR(17 DOWNTO 0)
  );
END bmg_72_5eb14d6795836fe0;

ARCHITECTURE bmg_72_5eb14d6795836fe0_a OF bmg_72_5eb14d6795836fe0 IS
-- synthesis translate_off
COMPONENT wrapped_bmg_72_5eb14d6795836fe0
  PORT (
    clka : IN STD_LOGIC;
    ena : IN STD_LOGIC;
    addra : IN STD_LOGIC_VECTOR(2 DOWNTO 0);
    douta : OUT STD_LOGIC_VECTOR(17 DOWNTO 0)
  );
END COMPONENT;

-- Configuration specification
  FOR ALL : wrapped_bmg_72_5eb14d6795836fe0 USE ENTITY XilinxCoreLib.blk_mem_gen_v7_2(behavioral)
    GENERIC MAP (
      c_addra_width => 3,
      c_addrb_width => 3,
      c_algorithm => 1,
      c_axi_id_width => 4,
      c_axi_slave_type => 0,
      c_axi_type => 1,
      c_byte_size => 9,
      c_common_clk => 0,
      c_default_data => "0",
      c_disable_warn_bhv_coll => 0,
      c_disable_warn_bhv_range => 0,
      c_enable_32bit_address => 0,
      c_family => "virtex5",
      c_has_axi_id => 0,
      c_has_ena => 1,
      c_has_enb => 0,
      c_has_injecterr => 0,
      c_has_mem_output_regs_a => 1,
      c_has_mem_output_regs_b => 0,
      c_has_mux_output_regs_a => 0,
      c_has_mux_output_regs_b => 0,
      c_has_regcea => 0,
      c_has_regceb => 0,
      c_has_rsta => 0,
      c_has_rstb => 0,
      c_has_softecc_input_regs_a => 0,
      c_has_softecc_output_regs_b => 0,
      c_init_file_name => "bmg_72_5eb14d6795836fe0.mif",
      c_inita_val => "0",
      c_initb_val => "0",
      c_interface_type => 0,
      c_load_init_file => 1,
      c_mem_type => 3,
      c_mux_pipeline_stages => 0,
      c_prim_type => 1,
      c_read_depth_a => 8,
      c_read_depth_b => 8,
      c_read_width_a => 18,
      c_read_width_b => 18,
      c_rst_priority_a => "CE",
      c_rst_priority_b => "CE",
      c_rst_type => "SYNC",
      c_rstram_a => 0,
      c_rstram_b => 0,
      c_sim_collision_check => "ALL",
      c_use_byte_wea => 0,
      c_use_byte_web => 0,
      c_use_default_data => 0,
      c_use_ecc => 0,
      c_use_softecc => 0,
      c_wea_width => 1,
      c_web_width => 1,
      c_write_depth_a => 8,
      c_write_depth_b => 8,
      c_write_mode_a => "WRITE_FIRST",
      c_write_mode_b => "WRITE_FIRST",
      c_write_width_a => 18,
      c_write_width_b => 18,
      c_xdevicefamily => "virtex5"
    );
-- synthesis translate_on
BEGIN
-- synthesis translate_off
U0 : wrapped_bmg_72_5eb14d6795836fe0
  PORT MAP (
    clka => clka,
    ena => ena,
    addra => addra,
    douta => douta
  );
-- synthesis translate_on

END bmg_72_5eb14d6795836fe0_a;
--------------------------------------------------------------------------------
--    This file is owned and controlled by Xilinx and must be used solely     --
--    for design, simulation, implementation and creation of design files     --
--    limited to Xilinx devices or technologies. Use with non-Xilinx          --
--    devices or technologies is expressly prohibited and immediately         --
--    terminates your license.                                                --
--                                                                            --
--    XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" SOLELY    --
--    FOR USE IN DEVELOPING PROGRAMS AND SOLUTIONS FOR XILINX DEVICES.  BY    --
--    PROVIDING THIS DESIGN, CODE, OR INFORMATION AS ONE POSSIBLE             --
--    IMPLEMENTATION OF THIS FEATURE, APPLICATION OR STANDARD, XILINX IS      --
--    MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION IS FREE FROM ANY      --
--    CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE FOR OBTAINING ANY       --
--    RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.  XILINX EXPRESSLY       --
--    DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO THE ADEQUACY OF THE   --
--    IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OR          --
--    REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE FROM CLAIMS OF         --
--    INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A   --
--    PARTICULAR PURPOSE.                                                     --
--                                                                            --
--    Xilinx products are not intended for use in life support appliances,    --
--    devices, or systems.  Use in such applications are expressly            --
--    prohibited.                                                             --
--                                                                            --
--    (c) Copyright 1995-2014 Xilinx, Inc.                                    --
--    All rights reserved.                                                    --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
-- You must compile the wrapper file cntr_11_0_bc43ff9b02fd1262.vhd when simulating
-- the core, cntr_11_0_bc43ff9b02fd1262. When compiling the wrapper file, be sure to
-- reference the XilinxCoreLib VHDL simulation library. For detailed
-- instructions, please refer to the "CORE Generator Help".

-- The synthesis directives "translate_off/translate_on" specified
-- below are supported by Xilinx, Mentor Graphics and Synplicity
-- synthesis tools. Ensure they are correct for your synthesis tool(s).

LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
-- synthesis translate_off
LIBRARY XilinxCoreLib;
-- synthesis translate_on
ENTITY cntr_11_0_bc43ff9b02fd1262 IS
  PORT (
    clk : IN STD_LOGIC;
    ce : IN STD_LOGIC;
    sinit : IN STD_LOGIC;
    q : OUT STD_LOGIC_VECTOR(8 DOWNTO 0)
  );
END cntr_11_0_bc43ff9b02fd1262;

ARCHITECTURE cntr_11_0_bc43ff9b02fd1262_a OF cntr_11_0_bc43ff9b02fd1262 IS
-- synthesis translate_off
COMPONENT wrapped_cntr_11_0_bc43ff9b02fd1262
  PORT (
    clk : IN STD_LOGIC;
    ce : IN STD_LOGIC;
    sinit : IN STD_LOGIC;
    q : OUT STD_LOGIC_VECTOR(8 DOWNTO 0)
  );
END COMPONENT;

-- Configuration specification
  FOR ALL : wrapped_cntr_11_0_bc43ff9b02fd1262 USE ENTITY XilinxCoreLib.c_counter_binary_v11_0(behavioral)
    GENERIC MAP (
      c_ainit_val => "0",
      c_ce_overrides_sync => 0,
      c_count_by => "1",
      c_count_mode => 0,
      c_count_to => "1",
      c_fb_latency => 0,
      c_has_ce => 1,
      c_has_load => 0,
      c_has_sclr => 0,
      c_has_sinit => 1,
      c_has_sset => 0,
      c_has_thresh0 => 0,
      c_implementation => 0,
      c_latency => 1,
      c_load_low => 0,
      c_restrict_count => 0,
      c_sclr_overrides_sset => 1,
      c_sinit_val => "0",
      c_thresh0_value => "1",
      c_verbosity => 0,
      c_width => 9,
      c_xdevicefamily => "virtex5"
    );
-- synthesis translate_on
BEGIN
-- synthesis translate_off
U0 : wrapped_cntr_11_0_bc43ff9b02fd1262
  PORT MAP (
    clk => clk,
    ce => ce,
    sinit => sinit,
    q => q
  );
-- synthesis translate_on

END cntr_11_0_bc43ff9b02fd1262_a;
--------------------------------------------------------------------------------
--    This file is owned and controlled by Xilinx and must be used solely     --
--    for design, simulation, implementation and creation of design files     --
--    limited to Xilinx devices or technologies. Use with non-Xilinx          --
--    devices or technologies is expressly prohibited and immediately         --
--    terminates your license.                                                --
--                                                                            --
--    XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" SOLELY    --
--    FOR USE IN DEVELOPING PROGRAMS AND SOLUTIONS FOR XILINX DEVICES.  BY    --
--    PROVIDING THIS DESIGN, CODE, OR INFORMATION AS ONE POSSIBLE             --
--    IMPLEMENTATION OF THIS FEATURE, APPLICATION OR STANDARD, XILINX IS      --
--    MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION IS FREE FROM ANY      --
--    CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE FOR OBTAINING ANY       --
--    RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.  XILINX EXPRESSLY       --
--    DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO THE ADEQUACY OF THE   --
--    IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OR          --
--    REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE FROM CLAIMS OF         --
--    INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A   --
--    PARTICULAR PURPOSE.                                                     --
--                                                                            --
--    Xilinx products are not intended for use in life support appliances,    --
--    devices, or systems.  Use in such applications are expressly            --
--    prohibited.                                                             --
--                                                                            --
--    (c) Copyright 1995-2014 Xilinx, Inc.                                    --
--    All rights reserved.                                                    --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
-- You must compile the wrapper file cntr_11_0_c0e9491a3fe88c1d.vhd when simulating
-- the core, cntr_11_0_c0e9491a3fe88c1d. When compiling the wrapper file, be sure to
-- reference the XilinxCoreLib VHDL simulation library. For detailed
-- instructions, please refer to the "CORE Generator Help".

-- The synthesis directives "translate_off/translate_on" specified
-- below are supported by Xilinx, Mentor Graphics and Synplicity
-- synthesis tools. Ensure they are correct for your synthesis tool(s).

LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
-- synthesis translate_off
LIBRARY XilinxCoreLib;
-- synthesis translate_on
ENTITY cntr_11_0_c0e9491a3fe88c1d IS
  PORT (
    clk : IN STD_LOGIC;
    ce : IN STD_LOGIC;
    sinit : IN STD_LOGIC;
    load : IN STD_LOGIC;
    l : IN STD_LOGIC_VECTOR(5 DOWNTO 0);
    q : OUT STD_LOGIC_VECTOR(5 DOWNTO 0)
  );
END cntr_11_0_c0e9491a3fe88c1d;

ARCHITECTURE cntr_11_0_c0e9491a3fe88c1d_a OF cntr_11_0_c0e9491a3fe88c1d IS
-- synthesis translate_off
COMPONENT wrapped_cntr_11_0_c0e9491a3fe88c1d
  PORT (
    clk : IN STD_LOGIC;
    ce : IN STD_LOGIC;
    sinit : IN STD_LOGIC;
    load : IN STD_LOGIC;
    l : IN STD_LOGIC_VECTOR(5 DOWNTO 0);
    q : OUT STD_LOGIC_VECTOR(5 DOWNTO 0)
  );
END COMPONENT;

-- Configuration specification
  FOR ALL : wrapped_cntr_11_0_c0e9491a3fe88c1d USE ENTITY XilinxCoreLib.c_counter_binary_v11_0(behavioral)
    GENERIC MAP (
      c_ainit_val => "0",
      c_ce_overrides_sync => 0,
      c_count_by => "1",
      c_count_mode => 1,
      c_count_to => "1",
      c_fb_latency => 0,
      c_has_ce => 1,
      c_has_load => 1,
      c_has_sclr => 0,
      c_has_sinit => 1,
      c_has_sset => 0,
      c_has_thresh0 => 0,
      c_implementation => 0,
      c_latency => 1,
      c_load_low => 0,
      c_restrict_count => 0,
      c_sclr_overrides_sset => 1,
      c_sinit_val => "0",
      c_thresh0_value => "1",
      c_verbosity => 0,
      c_width => 6,
      c_xdevicefamily => "virtex5"
    );
-- synthesis translate_on
BEGIN
-- synthesis translate_off
U0 : wrapped_cntr_11_0_c0e9491a3fe88c1d
  PORT MAP (
    clk => clk,
    ce => ce,
    sinit => sinit,
    load => load,
    l => l,
    q => q
  );
-- synthesis translate_on

END cntr_11_0_c0e9491a3fe88c1d_a;
--------------------------------------------------------------------------------
--    This file is owned and controlled by Xilinx and must be used solely     --
--    for design, simulation, implementation and creation of design files     --
--    limited to Xilinx devices or technologies. Use with non-Xilinx          --
--    devices or technologies is expressly prohibited and immediately         --
--    terminates your license.                                                --
--                                                                            --
--    XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" SOLELY    --
--    FOR USE IN DEVELOPING PROGRAMS AND SOLUTIONS FOR XILINX DEVICES.  BY    --
--    PROVIDING THIS DESIGN, CODE, OR INFORMATION AS ONE POSSIBLE             --
--    IMPLEMENTATION OF THIS FEATURE, APPLICATION OR STANDARD, XILINX IS      --
--    MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION IS FREE FROM ANY      --
--    CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE FOR OBTAINING ANY       --
--    RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.  XILINX EXPRESSLY       --
--    DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO THE ADEQUACY OF THE   --
--    IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OR          --
--    REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE FROM CLAIMS OF         --
--    INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A   --
--    PARTICULAR PURPOSE.                                                     --
--                                                                            --
--    Xilinx products are not intended for use in life support appliances,    --
--    devices, or systems.  Use in such applications are expressly            --
--    prohibited.                                                             --
--                                                                            --
--    (c) Copyright 1995-2014 Xilinx, Inc.                                    --
--    All rights reserved.                                                    --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
-- You must compile the wrapper file bmg_72_f27fe95e91d868c0.vhd when simulating
-- the core, bmg_72_f27fe95e91d868c0. When compiling the wrapper file, be sure to
-- reference the XilinxCoreLib VHDL simulation library. For detailed
-- instructions, please refer to the "CORE Generator Help".

-- The synthesis directives "translate_off/translate_on" specified
-- below are supported by Xilinx, Mentor Graphics and Synplicity
-- synthesis tools. Ensure they are correct for your synthesis tool(s).

LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
-- synthesis translate_off
LIBRARY XilinxCoreLib;
-- synthesis translate_on
ENTITY bmg_72_f27fe95e91d868c0 IS
  PORT (
    clka : IN STD_LOGIC;
    ena : IN STD_LOGIC;
    addra : IN STD_LOGIC_VECTOR(6 DOWNTO 0);
    douta : OUT STD_LOGIC_VECTOR(17 DOWNTO 0)
  );
END bmg_72_f27fe95e91d868c0;

ARCHITECTURE bmg_72_f27fe95e91d868c0_a OF bmg_72_f27fe95e91d868c0 IS
-- synthesis translate_off
COMPONENT wrapped_bmg_72_f27fe95e91d868c0
  PORT (
    clka : IN STD_LOGIC;
    ena : IN STD_LOGIC;
    addra : IN STD_LOGIC_VECTOR(6 DOWNTO 0);
    douta : OUT STD_LOGIC_VECTOR(17 DOWNTO 0)
  );
END COMPONENT;

-- Configuration specification
  FOR ALL : wrapped_bmg_72_f27fe95e91d868c0 USE ENTITY XilinxCoreLib.blk_mem_gen_v7_2(behavioral)
    GENERIC MAP (
      c_addra_width => 7,
      c_addrb_width => 7,
      c_algorithm => 1,
      c_axi_id_width => 4,
      c_axi_slave_type => 0,
      c_axi_type => 1,
      c_byte_size => 9,
      c_common_clk => 0,
      c_default_data => "0",
      c_disable_warn_bhv_coll => 0,
      c_disable_warn_bhv_range => 0,
      c_enable_32bit_address => 0,
      c_family => "virtex5",
      c_has_axi_id => 0,
      c_has_ena => 1,
      c_has_enb => 0,
      c_has_injecterr => 0,
      c_has_mem_output_regs_a => 1,
      c_has_mem_output_regs_b => 0,
      c_has_mux_output_regs_a => 0,
      c_has_mux_output_regs_b => 0,
      c_has_regcea => 0,
      c_has_regceb => 0,
      c_has_rsta => 0,
      c_has_rstb => 0,
      c_has_softecc_input_regs_a => 0,
      c_has_softecc_output_regs_b => 0,
      c_init_file_name => "bmg_72_f27fe95e91d868c0.mif",
      c_inita_val => "0",
      c_initb_val => "0",
      c_interface_type => 0,
      c_load_init_file => 1,
      c_mem_type => 3,
      c_mux_pipeline_stages => 0,
      c_prim_type => 1,
      c_read_depth_a => 128,
      c_read_depth_b => 128,
      c_read_width_a => 18,
      c_read_width_b => 18,
      c_rst_priority_a => "CE",
      c_rst_priority_b => "CE",
      c_rst_type => "SYNC",
      c_rstram_a => 0,
      c_rstram_b => 0,
      c_sim_collision_check => "ALL",
      c_use_byte_wea => 0,
      c_use_byte_web => 0,
      c_use_default_data => 0,
      c_use_ecc => 0,
      c_use_softecc => 0,
      c_wea_width => 1,
      c_web_width => 1,
      c_write_depth_a => 128,
      c_write_depth_b => 128,
      c_write_mode_a => "WRITE_FIRST",
      c_write_mode_b => "WRITE_FIRST",
      c_write_width_a => 18,
      c_write_width_b => 18,
      c_xdevicefamily => "virtex5"
    );
-- synthesis translate_on
BEGIN
-- synthesis translate_off
U0 : wrapped_bmg_72_f27fe95e91d868c0
  PORT MAP (
    clka => clka,
    ena => ena,
    addra => addra,
    douta => douta
  );
-- synthesis translate_on

END bmg_72_f27fe95e91d868c0_a;
--------------------------------------------------------------------------------
--    This file is owned and controlled by Xilinx and must be used solely     --
--    for design, simulation, implementation and creation of design files     --
--    limited to Xilinx devices or technologies. Use with non-Xilinx          --
--    devices or technologies is expressly prohibited and immediately         --
--    terminates your license.                                                --
--                                                                            --
--    XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" SOLELY    --
--    FOR USE IN DEVELOPING PROGRAMS AND SOLUTIONS FOR XILINX DEVICES.  BY    --
--    PROVIDING THIS DESIGN, CODE, OR INFORMATION AS ONE POSSIBLE             --
--    IMPLEMENTATION OF THIS FEATURE, APPLICATION OR STANDARD, XILINX IS      --
--    MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION IS FREE FROM ANY      --
--    CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE FOR OBTAINING ANY       --
--    RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.  XILINX EXPRESSLY       --
--    DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO THE ADEQUACY OF THE   --
--    IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OR          --
--    REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE FROM CLAIMS OF         --
--    INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A   --
--    PARTICULAR PURPOSE.                                                     --
--                                                                            --
--    Xilinx products are not intended for use in life support appliances,    --
--    devices, or systems.  Use in such applications are expressly            --
--    prohibited.                                                             --
--                                                                            --
--    (c) Copyright 1995-2014 Xilinx, Inc.                                    --
--    All rights reserved.                                                    --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
-- You must compile the wrapper file cntr_11_0_0400b347688ef51a.vhd when simulating
-- the core, cntr_11_0_0400b347688ef51a. When compiling the wrapper file, be sure to
-- reference the XilinxCoreLib VHDL simulation library. For detailed
-- instructions, please refer to the "CORE Generator Help".

-- The synthesis directives "translate_off/translate_on" specified
-- below are supported by Xilinx, Mentor Graphics and Synplicity
-- synthesis tools. Ensure they are correct for your synthesis tool(s).

LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
-- synthesis translate_off
LIBRARY XilinxCoreLib;
-- synthesis translate_on
ENTITY cntr_11_0_0400b347688ef51a IS
  PORT (
    clk : IN STD_LOGIC;
    ce : IN STD_LOGIC;
    sinit : IN STD_LOGIC;
    q : OUT STD_LOGIC_VECTOR(31 DOWNTO 0)
  );
END cntr_11_0_0400b347688ef51a;

ARCHITECTURE cntr_11_0_0400b347688ef51a_a OF cntr_11_0_0400b347688ef51a IS
-- synthesis translate_off
COMPONENT wrapped_cntr_11_0_0400b347688ef51a
  PORT (
    clk : IN STD_LOGIC;
    ce : IN STD_LOGIC;
    sinit : IN STD_LOGIC;
    q : OUT STD_LOGIC_VECTOR(31 DOWNTO 0)
  );
END COMPONENT;

-- Configuration specification
  FOR ALL : wrapped_cntr_11_0_0400b347688ef51a USE ENTITY XilinxCoreLib.c_counter_binary_v11_0(behavioral)
    GENERIC MAP (
      c_ainit_val => "0",
      c_ce_overrides_sync => 0,
      c_count_by => "1",
      c_count_mode => 0,
      c_count_to => "1",
      c_fb_latency => 0,
      c_has_ce => 1,
      c_has_load => 0,
      c_has_sclr => 0,
      c_has_sinit => 1,
      c_has_sset => 0,
      c_has_thresh0 => 0,
      c_implementation => 0,
      c_latency => 1,
      c_load_low => 0,
      c_restrict_count => 0,
      c_sclr_overrides_sset => 1,
      c_sinit_val => "0",
      c_thresh0_value => "1",
      c_verbosity => 0,
      c_width => 32,
      c_xdevicefamily => "virtex5"
    );
-- synthesis translate_on
BEGIN
-- synthesis translate_off
U0 : wrapped_cntr_11_0_0400b347688ef51a
  PORT MAP (
    clk => clk,
    ce => ce,
    sinit => sinit,
    q => q
  );
-- synthesis translate_on

END cntr_11_0_0400b347688ef51a_a;
--------------------------------------------------------------------------------
--    This file is owned and controlled by Xilinx and must be used solely     --
--    for design, simulation, implementation and creation of design files     --
--    limited to Xilinx devices or technologies. Use with non-Xilinx          --
--    devices or technologies is expressly prohibited and immediately         --
--    terminates your license.                                                --
--                                                                            --
--    XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" SOLELY    --
--    FOR USE IN DEVELOPING PROGRAMS AND SOLUTIONS FOR XILINX DEVICES.  BY    --
--    PROVIDING THIS DESIGN, CODE, OR INFORMATION AS ONE POSSIBLE             --
--    IMPLEMENTATION OF THIS FEATURE, APPLICATION OR STANDARD, XILINX IS      --
--    MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION IS FREE FROM ANY      --
--    CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE FOR OBTAINING ANY       --
--    RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.  XILINX EXPRESSLY       --
--    DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO THE ADEQUACY OF THE   --
--    IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OR          --
--    REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE FROM CLAIMS OF         --
--    INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A   --
--    PARTICULAR PURPOSE.                                                     --
--                                                                            --
--    Xilinx products are not intended for use in life support appliances,    --
--    devices, or systems.  Use in such applications are expressly            --
--    prohibited.                                                             --
--                                                                            --
--    (c) Copyright 1995-2014 Xilinx, Inc.                                    --
--    All rights reserved.                                                    --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
-- You must compile the wrapper file cntr_11_0_4df07e1ba68d0c6e.vhd when simulating
-- the core, cntr_11_0_4df07e1ba68d0c6e. When compiling the wrapper file, be sure to
-- reference the XilinxCoreLib VHDL simulation library. For detailed
-- instructions, please refer to the "CORE Generator Help".

-- The synthesis directives "translate_off/translate_on" specified
-- below are supported by Xilinx, Mentor Graphics and Synplicity
-- synthesis tools. Ensure they are correct for your synthesis tool(s).

LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
-- synthesis translate_off
LIBRARY XilinxCoreLib;
-- synthesis translate_on
ENTITY cntr_11_0_4df07e1ba68d0c6e IS
  PORT (
    clk : IN STD_LOGIC;
    ce : IN STD_LOGIC;
    sinit : IN STD_LOGIC;
    q : OUT STD_LOGIC_VECTOR(7 DOWNTO 0)
  );
END cntr_11_0_4df07e1ba68d0c6e;

ARCHITECTURE cntr_11_0_4df07e1ba68d0c6e_a OF cntr_11_0_4df07e1ba68d0c6e IS
-- synthesis translate_off
COMPONENT wrapped_cntr_11_0_4df07e1ba68d0c6e
  PORT (
    clk : IN STD_LOGIC;
    ce : IN STD_LOGIC;
    sinit : IN STD_LOGIC;
    q : OUT STD_LOGIC_VECTOR(7 DOWNTO 0)
  );
END COMPONENT;

-- Configuration specification
  FOR ALL : wrapped_cntr_11_0_4df07e1ba68d0c6e USE ENTITY XilinxCoreLib.c_counter_binary_v11_0(behavioral)
    GENERIC MAP (
      c_ainit_val => "0",
      c_ce_overrides_sync => 0,
      c_count_by => "1",
      c_count_mode => 0,
      c_count_to => "1",
      c_fb_latency => 0,
      c_has_ce => 1,
      c_has_load => 0,
      c_has_sclr => 0,
      c_has_sinit => 1,
      c_has_sset => 0,
      c_has_thresh0 => 0,
      c_implementation => 0,
      c_latency => 1,
      c_load_low => 0,
      c_restrict_count => 0,
      c_sclr_overrides_sset => 1,
      c_sinit_val => "0",
      c_thresh0_value => "1",
      c_verbosity => 0,
      c_width => 8,
      c_xdevicefamily => "virtex5"
    );
-- synthesis translate_on
BEGIN
-- synthesis translate_off
U0 : wrapped_cntr_11_0_4df07e1ba68d0c6e
  PORT MAP (
    clk => clk,
    ce => ce,
    sinit => sinit,
    q => q
  );
-- synthesis translate_on

END cntr_11_0_4df07e1ba68d0c6e_a;
--------------------------------------------------------------------------------
--    This file is owned and controlled by Xilinx and must be used solely     --
--    for design, simulation, implementation and creation of design files     --
--    limited to Xilinx devices or technologies. Use with non-Xilinx          --
--    devices or technologies is expressly prohibited and immediately         --
--    terminates your license.                                                --
--                                                                            --
--    XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" SOLELY    --
--    FOR USE IN DEVELOPING PROGRAMS AND SOLUTIONS FOR XILINX DEVICES.  BY    --
--    PROVIDING THIS DESIGN, CODE, OR INFORMATION AS ONE POSSIBLE             --
--    IMPLEMENTATION OF THIS FEATURE, APPLICATION OR STANDARD, XILINX IS      --
--    MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION IS FREE FROM ANY      --
--    CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE FOR OBTAINING ANY       --
--    RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.  XILINX EXPRESSLY       --
--    DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO THE ADEQUACY OF THE   --
--    IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OR          --
--    REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE FROM CLAIMS OF         --
--    INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A   --
--    PARTICULAR PURPOSE.                                                     --
--                                                                            --
--    Xilinx products are not intended for use in life support appliances,    --
--    devices, or systems.  Use in such applications are expressly            --
--    prohibited.                                                             --
--                                                                            --
--    (c) Copyright 1995-2014 Xilinx, Inc.                                    --
--    All rights reserved.                                                    --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
-- You must compile the wrapper file cntr_11_0_e22be57ef6aab3d8.vhd when simulating
-- the core, cntr_11_0_e22be57ef6aab3d8. When compiling the wrapper file, be sure to
-- reference the XilinxCoreLib VHDL simulation library. For detailed
-- instructions, please refer to the "CORE Generator Help".

-- The synthesis directives "translate_off/translate_on" specified
-- below are supported by Xilinx, Mentor Graphics and Synplicity
-- synthesis tools. Ensure they are correct for your synthesis tool(s).

LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
-- synthesis translate_off
LIBRARY XilinxCoreLib;
-- synthesis translate_on
ENTITY cntr_11_0_e22be57ef6aab3d8 IS
  PORT (
    clk : IN STD_LOGIC;
    ce : IN STD_LOGIC;
    sclr : IN STD_LOGIC;
    q : OUT STD_LOGIC_VECTOR(15 DOWNTO 0)
  );
END cntr_11_0_e22be57ef6aab3d8;

ARCHITECTURE cntr_11_0_e22be57ef6aab3d8_a OF cntr_11_0_e22be57ef6aab3d8 IS
-- synthesis translate_off
COMPONENT wrapped_cntr_11_0_e22be57ef6aab3d8
  PORT (
    clk : IN STD_LOGIC;
    ce : IN STD_LOGIC;
    sclr : IN STD_LOGIC;
    q : OUT STD_LOGIC_VECTOR(15 DOWNTO 0)
  );
END COMPONENT;

-- Configuration specification
  FOR ALL : wrapped_cntr_11_0_e22be57ef6aab3d8 USE ENTITY XilinxCoreLib.c_counter_binary_v11_0(behavioral)
    GENERIC MAP (
      c_ainit_val => "0",
      c_ce_overrides_sync => 0,
      c_count_by => "1",
      c_count_mode => 0,
      c_count_to => "1",
      c_fb_latency => 0,
      c_has_ce => 1,
      c_has_load => 0,
      c_has_sclr => 1,
      c_has_sinit => 0,
      c_has_sset => 0,
      c_has_thresh0 => 0,
      c_implementation => 1,
      c_latency => 1,
      c_load_low => 0,
      c_restrict_count => 0,
      c_sclr_overrides_sset => 1,
      c_sinit_val => "0",
      c_thresh0_value => "1",
      c_verbosity => 0,
      c_width => 16,
      c_xdevicefamily => "virtex5"
    );
-- synthesis translate_on
BEGIN
-- synthesis translate_off
U0 : wrapped_cntr_11_0_e22be57ef6aab3d8
  PORT MAP (
    clk => clk,
    ce => ce,
    sclr => sclr,
    q => q
  );
-- synthesis translate_on

END cntr_11_0_e22be57ef6aab3d8_a;
--------------------------------------------------------------------------------
--    This file is owned and controlled by Xilinx and must be used solely     --
--    for design, simulation, implementation and creation of design files     --
--    limited to Xilinx devices or technologies. Use with non-Xilinx          --
--    devices or technologies is expressly prohibited and immediately         --
--    terminates your license.                                                --
--                                                                            --
--    XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" SOLELY    --
--    FOR USE IN DEVELOPING PROGRAMS AND SOLUTIONS FOR XILINX DEVICES.  BY    --
--    PROVIDING THIS DESIGN, CODE, OR INFORMATION AS ONE POSSIBLE             --
--    IMPLEMENTATION OF THIS FEATURE, APPLICATION OR STANDARD, XILINX IS      --
--    MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION IS FREE FROM ANY      --
--    CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE FOR OBTAINING ANY       --
--    RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.  XILINX EXPRESSLY       --
--    DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO THE ADEQUACY OF THE   --
--    IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OR          --
--    REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE FROM CLAIMS OF         --
--    INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A   --
--    PARTICULAR PURPOSE.                                                     --
--                                                                            --
--    Xilinx products are not intended for use in life support appliances,    --
--    devices, or systems.  Use in such applications are expressly            --
--    prohibited.                                                             --
--                                                                            --
--    (c) Copyright 1995-2014 Xilinx, Inc.                                    --
--    All rights reserved.                                                    --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
-- You must compile the wrapper file cntr_11_0_10284ba20859264d.vhd when simulating
-- the core, cntr_11_0_10284ba20859264d. When compiling the wrapper file, be sure to
-- reference the XilinxCoreLib VHDL simulation library. For detailed
-- instructions, please refer to the "CORE Generator Help".

-- The synthesis directives "translate_off/translate_on" specified
-- below are supported by Xilinx, Mentor Graphics and Synplicity
-- synthesis tools. Ensure they are correct for your synthesis tool(s).

LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
-- synthesis translate_off
LIBRARY XilinxCoreLib;
-- synthesis translate_on
ENTITY cntr_11_0_10284ba20859264d IS
  PORT (
    clk : IN STD_LOGIC;
    ce : IN STD_LOGIC;
    sinit : IN STD_LOGIC;
    load : IN STD_LOGIC;
    l : IN STD_LOGIC_VECTOR(4 DOWNTO 0);
    q : OUT STD_LOGIC_VECTOR(4 DOWNTO 0)
  );
END cntr_11_0_10284ba20859264d;

ARCHITECTURE cntr_11_0_10284ba20859264d_a OF cntr_11_0_10284ba20859264d IS
-- synthesis translate_off
COMPONENT wrapped_cntr_11_0_10284ba20859264d
  PORT (
    clk : IN STD_LOGIC;
    ce : IN STD_LOGIC;
    sinit : IN STD_LOGIC;
    load : IN STD_LOGIC;
    l : IN STD_LOGIC_VECTOR(4 DOWNTO 0);
    q : OUT STD_LOGIC_VECTOR(4 DOWNTO 0)
  );
END COMPONENT;

-- Configuration specification
  FOR ALL : wrapped_cntr_11_0_10284ba20859264d USE ENTITY XilinxCoreLib.c_counter_binary_v11_0(behavioral)
    GENERIC MAP (
      c_ainit_val => "0",
      c_ce_overrides_sync => 0,
      c_count_by => "1",
      c_count_mode => 1,
      c_count_to => "1",
      c_fb_latency => 0,
      c_has_ce => 1,
      c_has_load => 1,
      c_has_sclr => 0,
      c_has_sinit => 1,
      c_has_sset => 0,
      c_has_thresh0 => 0,
      c_implementation => 0,
      c_latency => 1,
      c_load_low => 0,
      c_restrict_count => 0,
      c_sclr_overrides_sset => 1,
      c_sinit_val => "0",
      c_thresh0_value => "1",
      c_verbosity => 0,
      c_width => 5,
      c_xdevicefamily => "virtex5"
    );
-- synthesis translate_on
BEGIN
-- synthesis translate_off
U0 : wrapped_cntr_11_0_10284ba20859264d
  PORT MAP (
    clk => clk,
    ce => ce,
    sinit => sinit,
    load => load,
    l => l,
    q => q
  );
-- synthesis translate_on

END cntr_11_0_10284ba20859264d_a;
--------------------------------------------------------------------------------
--    This file is owned and controlled by Xilinx and must be used solely     --
--    for design, simulation, implementation and creation of design files     --
--    limited to Xilinx devices or technologies. Use with non-Xilinx          --
--    devices or technologies is expressly prohibited and immediately         --
--    terminates your license.                                                --
--                                                                            --
--    XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" SOLELY    --
--    FOR USE IN DEVELOPING PROGRAMS AND SOLUTIONS FOR XILINX DEVICES.  BY    --
--    PROVIDING THIS DESIGN, CODE, OR INFORMATION AS ONE POSSIBLE             --
--    IMPLEMENTATION OF THIS FEATURE, APPLICATION OR STANDARD, XILINX IS      --
--    MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION IS FREE FROM ANY      --
--    CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE FOR OBTAINING ANY       --
--    RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.  XILINX EXPRESSLY       --
--    DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO THE ADEQUACY OF THE   --
--    IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OR          --
--    REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE FROM CLAIMS OF         --
--    INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A   --
--    PARTICULAR PURPOSE.                                                     --
--                                                                            --
--    Xilinx products are not intended for use in life support appliances,    --
--    devices, or systems.  Use in such applications are expressly            --
--    prohibited.                                                             --
--                                                                            --
--    (c) Copyright 1995-2014 Xilinx, Inc.                                    --
--    All rights reserved.                                                    --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
-- You must compile the wrapper file cntr_11_0_ed472a6d5a5cb515.vhd when simulating
-- the core, cntr_11_0_ed472a6d5a5cb515. When compiling the wrapper file, be sure to
-- reference the XilinxCoreLib VHDL simulation library. For detailed
-- instructions, please refer to the "CORE Generator Help".

-- The synthesis directives "translate_off/translate_on" specified
-- below are supported by Xilinx, Mentor Graphics and Synplicity
-- synthesis tools. Ensure they are correct for your synthesis tool(s).

LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
-- synthesis translate_off
LIBRARY XilinxCoreLib;
-- synthesis translate_on
ENTITY cntr_11_0_ed472a6d5a5cb515 IS
  PORT (
    clk : IN STD_LOGIC;
    ce : IN STD_LOGIC;
    sinit : IN STD_LOGIC;
    q : OUT STD_LOGIC_VECTOR(31 DOWNTO 0)
  );
END cntr_11_0_ed472a6d5a5cb515;

ARCHITECTURE cntr_11_0_ed472a6d5a5cb515_a OF cntr_11_0_ed472a6d5a5cb515 IS
-- synthesis translate_off
COMPONENT wrapped_cntr_11_0_ed472a6d5a5cb515
  PORT (
    clk : IN STD_LOGIC;
    ce : IN STD_LOGIC;
    sinit : IN STD_LOGIC;
    q : OUT STD_LOGIC_VECTOR(31 DOWNTO 0)
  );
END COMPONENT;

-- Configuration specification
  FOR ALL : wrapped_cntr_11_0_ed472a6d5a5cb515 USE ENTITY XilinxCoreLib.c_counter_binary_v11_0(behavioral)
    GENERIC MAP (
      c_ainit_val => "0",
      c_ce_overrides_sync => 0,
      c_count_by => "1",
      c_count_mode => 0,
      c_count_to => "1",
      c_fb_latency => 0,
      c_has_ce => 1,
      c_has_load => 0,
      c_has_sclr => 0,
      c_has_sinit => 1,
      c_has_sset => 0,
      c_has_thresh0 => 0,
      c_implementation => 0,
      c_latency => 1,
      c_load_low => 0,
      c_restrict_count => 0,
      c_sclr_overrides_sset => 1,
      c_sinit_val => "1",
      c_thresh0_value => "1",
      c_verbosity => 0,
      c_width => 32,
      c_xdevicefamily => "virtex5"
    );
-- synthesis translate_on
BEGIN
-- synthesis translate_off
U0 : wrapped_cntr_11_0_ed472a6d5a5cb515
  PORT MAP (
    clk => clk,
    ce => ce,
    sinit => sinit,
    q => q
  );
-- synthesis translate_on

END cntr_11_0_ed472a6d5a5cb515_a;
--------------------------------------------------------------------------------
--    This file is owned and controlled by Xilinx and must be used solely     --
--    for design, simulation, implementation and creation of design files     --
--    limited to Xilinx devices or technologies. Use with non-Xilinx          --
--    devices or technologies is expressly prohibited and immediately         --
--    terminates your license.                                                --
--                                                                            --
--    XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" SOLELY    --
--    FOR USE IN DEVELOPING PROGRAMS AND SOLUTIONS FOR XILINX DEVICES.  BY    --
--    PROVIDING THIS DESIGN, CODE, OR INFORMATION AS ONE POSSIBLE             --
--    IMPLEMENTATION OF THIS FEATURE, APPLICATION OR STANDARD, XILINX IS      --
--    MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION IS FREE FROM ANY      --
--    CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE FOR OBTAINING ANY       --
--    RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.  XILINX EXPRESSLY       --
--    DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO THE ADEQUACY OF THE   --
--    IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OR          --
--    REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE FROM CLAIMS OF         --
--    INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A   --
--    PARTICULAR PURPOSE.                                                     --
--                                                                            --
--    Xilinx products are not intended for use in life support appliances,    --
--    devices, or systems.  Use in such applications are expressly            --
--    prohibited.                                                             --
--                                                                            --
--    (c) Copyright 1995-2014 Xilinx, Inc.                                    --
--    All rights reserved.                                                    --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
-- You must compile the wrapper file cntr_11_0_f2301c6681846b15.vhd when simulating
-- the core, cntr_11_0_f2301c6681846b15. When compiling the wrapper file, be sure to
-- reference the XilinxCoreLib VHDL simulation library. For detailed
-- instructions, please refer to the "CORE Generator Help".

-- The synthesis directives "translate_off/translate_on" specified
-- below are supported by Xilinx, Mentor Graphics and Synplicity
-- synthesis tools. Ensure they are correct for your synthesis tool(s).

LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
-- synthesis translate_off
LIBRARY XilinxCoreLib;
-- synthesis translate_on
ENTITY cntr_11_0_f2301c6681846b15 IS
  PORT (
    clk : IN STD_LOGIC;
    ce : IN STD_LOGIC;
    sinit : IN STD_LOGIC;
    q : OUT STD_LOGIC_VECTOR(4 DOWNTO 0)
  );
END cntr_11_0_f2301c6681846b15;

ARCHITECTURE cntr_11_0_f2301c6681846b15_a OF cntr_11_0_f2301c6681846b15 IS
-- synthesis translate_off
COMPONENT wrapped_cntr_11_0_f2301c6681846b15
  PORT (
    clk : IN STD_LOGIC;
    ce : IN STD_LOGIC;
    sinit : IN STD_LOGIC;
    q : OUT STD_LOGIC_VECTOR(4 DOWNTO 0)
  );
END COMPONENT;

-- Configuration specification
  FOR ALL : wrapped_cntr_11_0_f2301c6681846b15 USE ENTITY XilinxCoreLib.c_counter_binary_v11_0(behavioral)
    GENERIC MAP (
      c_ainit_val => "0",
      c_ce_overrides_sync => 0,
      c_count_by => "1",
      c_count_mode => 0,
      c_count_to => "1",
      c_fb_latency => 0,
      c_has_ce => 1,
      c_has_load => 0,
      c_has_sclr => 0,
      c_has_sinit => 1,
      c_has_sset => 0,
      c_has_thresh0 => 0,
      c_implementation => 0,
      c_latency => 1,
      c_load_low => 0,
      c_restrict_count => 0,
      c_sclr_overrides_sset => 1,
      c_sinit_val => "0",
      c_thresh0_value => "1",
      c_verbosity => 0,
      c_width => 5,
      c_xdevicefamily => "virtex5"
    );
-- synthesis translate_on
BEGIN
-- synthesis translate_off
U0 : wrapped_cntr_11_0_f2301c6681846b15
  PORT MAP (
    clk => clk,
    ce => ce,
    sinit => sinit,
    q => q
  );
-- synthesis translate_on

END cntr_11_0_f2301c6681846b15_a;
--------------------------------------------------------------------------------
--    This file is owned and controlled by Xilinx and must be used solely     --
--    for design, simulation, implementation and creation of design files     --
--    limited to Xilinx devices or technologies. Use with non-Xilinx          --
--    devices or technologies is expressly prohibited and immediately         --
--    terminates your license.                                                --
--                                                                            --
--    XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" SOLELY    --
--    FOR USE IN DEVELOPING PROGRAMS AND SOLUTIONS FOR XILINX DEVICES.  BY    --
--    PROVIDING THIS DESIGN, CODE, OR INFORMATION AS ONE POSSIBLE             --
--    IMPLEMENTATION OF THIS FEATURE, APPLICATION OR STANDARD, XILINX IS      --
--    MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION IS FREE FROM ANY      --
--    CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE FOR OBTAINING ANY       --
--    RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.  XILINX EXPRESSLY       --
--    DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO THE ADEQUACY OF THE   --
--    IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OR          --
--    REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE FROM CLAIMS OF         --
--    INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A   --
--    PARTICULAR PURPOSE.                                                     --
--                                                                            --
--    Xilinx products are not intended for use in life support appliances,    --
--    devices, or systems.  Use in such applications are expressly            --
--    prohibited.                                                             --
--                                                                            --
--    (c) Copyright 1995-2014 Xilinx, Inc.                                    --
--    All rights reserved.                                                    --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
-- You must compile the wrapper file bmg_72_043bb11b7d009cca.vhd when simulating
-- the core, bmg_72_043bb11b7d009cca. When compiling the wrapper file, be sure to
-- reference the XilinxCoreLib VHDL simulation library. For detailed
-- instructions, please refer to the "CORE Generator Help".

-- The synthesis directives "translate_off/translate_on" specified
-- below are supported by Xilinx, Mentor Graphics and Synplicity
-- synthesis tools. Ensure they are correct for your synthesis tool(s).

LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
-- synthesis translate_off
LIBRARY XilinxCoreLib;
-- synthesis translate_on
ENTITY bmg_72_043bb11b7d009cca IS
  PORT (
    clka : IN STD_LOGIC;
    ena : IN STD_LOGIC;
    addra : IN STD_LOGIC_VECTOR(10 DOWNTO 0);
    douta : OUT STD_LOGIC_VECTOR(7 DOWNTO 0)
  );
END bmg_72_043bb11b7d009cca;

ARCHITECTURE bmg_72_043bb11b7d009cca_a OF bmg_72_043bb11b7d009cca IS
-- synthesis translate_off
COMPONENT wrapped_bmg_72_043bb11b7d009cca
  PORT (
    clka : IN STD_LOGIC;
    ena : IN STD_LOGIC;
    addra : IN STD_LOGIC_VECTOR(10 DOWNTO 0);
    douta : OUT STD_LOGIC_VECTOR(7 DOWNTO 0)
  );
END COMPONENT;

-- Configuration specification
  FOR ALL : wrapped_bmg_72_043bb11b7d009cca USE ENTITY XilinxCoreLib.blk_mem_gen_v7_2(behavioral)
    GENERIC MAP (
      c_addra_width => 11,
      c_addrb_width => 11,
      c_algorithm => 1,
      c_axi_id_width => 4,
      c_axi_slave_type => 0,
      c_axi_type => 1,
      c_byte_size => 9,
      c_common_clk => 0,
      c_default_data => "0",
      c_disable_warn_bhv_coll => 0,
      c_disable_warn_bhv_range => 0,
      c_enable_32bit_address => 0,
      c_family => "virtex5",
      c_has_axi_id => 0,
      c_has_ena => 1,
      c_has_enb => 0,
      c_has_injecterr => 0,
      c_has_mem_output_regs_a => 1,
      c_has_mem_output_regs_b => 0,
      c_has_mux_output_regs_a => 0,
      c_has_mux_output_regs_b => 0,
      c_has_regcea => 0,
      c_has_regceb => 0,
      c_has_rsta => 0,
      c_has_rstb => 0,
      c_has_softecc_input_regs_a => 0,
      c_has_softecc_output_regs_b => 0,
      c_init_file_name => "bmg_72_043bb11b7d009cca.mif",
      c_inita_val => "0",
      c_initb_val => "0",
      c_interface_type => 0,
      c_load_init_file => 1,
      c_mem_type => 3,
      c_mux_pipeline_stages => 0,
      c_prim_type => 1,
      c_read_depth_a => 2048,
      c_read_depth_b => 2048,
      c_read_width_a => 8,
      c_read_width_b => 8,
      c_rst_priority_a => "CE",
      c_rst_priority_b => "CE",
      c_rst_type => "SYNC",
      c_rstram_a => 0,
      c_rstram_b => 0,
      c_sim_collision_check => "ALL",
      c_use_byte_wea => 0,
      c_use_byte_web => 0,
      c_use_default_data => 0,
      c_use_ecc => 0,
      c_use_softecc => 0,
      c_wea_width => 1,
      c_web_width => 1,
      c_write_depth_a => 2048,
      c_write_depth_b => 2048,
      c_write_mode_a => "WRITE_FIRST",
      c_write_mode_b => "WRITE_FIRST",
      c_write_width_a => 8,
      c_write_width_b => 8,
      c_xdevicefamily => "virtex5"
    );
-- synthesis translate_on
BEGIN
-- synthesis translate_off
U0 : wrapped_bmg_72_043bb11b7d009cca
  PORT MAP (
    clka => clka,
    ena => ena,
    addra => addra,
    douta => douta
  );
-- synthesis translate_on

END bmg_72_043bb11b7d009cca_a;
--------------------------------------------------------------------------------
--    This file is owned and controlled by Xilinx and must be used solely     --
--    for design, simulation, implementation and creation of design files     --
--    limited to Xilinx devices or technologies. Use with non-Xilinx          --
--    devices or technologies is expressly prohibited and immediately         --
--    terminates your license.                                                --
--                                                                            --
--    XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" SOLELY    --
--    FOR USE IN DEVELOPING PROGRAMS AND SOLUTIONS FOR XILINX DEVICES.  BY    --
--    PROVIDING THIS DESIGN, CODE, OR INFORMATION AS ONE POSSIBLE             --
--    IMPLEMENTATION OF THIS FEATURE, APPLICATION OR STANDARD, XILINX IS      --
--    MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION IS FREE FROM ANY      --
--    CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE FOR OBTAINING ANY       --
--    RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.  XILINX EXPRESSLY       --
--    DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO THE ADEQUACY OF THE   --
--    IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OR          --
--    REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE FROM CLAIMS OF         --
--    INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A   --
--    PARTICULAR PURPOSE.                                                     --
--                                                                            --
--    Xilinx products are not intended for use in life support appliances,    --
--    devices, or systems.  Use in such applications are expressly            --
--    prohibited.                                                             --
--                                                                            --
--    (c) Copyright 1995-2014 Xilinx, Inc.                                    --
--    All rights reserved.                                                    --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
-- You must compile the wrapper file cntr_11_0_5175c845ca556d8f.vhd when simulating
-- the core, cntr_11_0_5175c845ca556d8f. When compiling the wrapper file, be sure to
-- reference the XilinxCoreLib VHDL simulation library. For detailed
-- instructions, please refer to the "CORE Generator Help".

-- The synthesis directives "translate_off/translate_on" specified
-- below are supported by Xilinx, Mentor Graphics and Synplicity
-- synthesis tools. Ensure they are correct for your synthesis tool(s).

LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
-- synthesis translate_off
LIBRARY XilinxCoreLib;
-- synthesis translate_on
ENTITY cntr_11_0_5175c845ca556d8f IS
  PORT (
    clk : IN STD_LOGIC;
    ce : IN STD_LOGIC;
    sinit : IN STD_LOGIC;
    q : OUT STD_LOGIC_VECTOR(24 DOWNTO 0)
  );
END cntr_11_0_5175c845ca556d8f;

ARCHITECTURE cntr_11_0_5175c845ca556d8f_a OF cntr_11_0_5175c845ca556d8f IS
-- synthesis translate_off
COMPONENT wrapped_cntr_11_0_5175c845ca556d8f
  PORT (
    clk : IN STD_LOGIC;
    ce : IN STD_LOGIC;
    sinit : IN STD_LOGIC;
    q : OUT STD_LOGIC_VECTOR(24 DOWNTO 0)
  );
END COMPONENT;

-- Configuration specification
  FOR ALL : wrapped_cntr_11_0_5175c845ca556d8f USE ENTITY XilinxCoreLib.c_counter_binary_v11_0(behavioral)
    GENERIC MAP (
      c_ainit_val => "0",
      c_ce_overrides_sync => 0,
      c_count_by => "1",
      c_count_mode => 0,
      c_count_to => "1",
      c_fb_latency => 0,
      c_has_ce => 1,
      c_has_load => 0,
      c_has_sclr => 0,
      c_has_sinit => 1,
      c_has_sset => 0,
      c_has_thresh0 => 0,
      c_implementation => 0,
      c_latency => 1,
      c_load_low => 0,
      c_restrict_count => 0,
      c_sclr_overrides_sset => 1,
      c_sinit_val => "0",
      c_thresh0_value => "1",
      c_verbosity => 0,
      c_width => 25,
      c_xdevicefamily => "virtex5"
    );
-- synthesis translate_on
BEGIN
-- synthesis translate_off
U0 : wrapped_cntr_11_0_5175c845ca556d8f
  PORT MAP (
    clk => clk,
    ce => ce,
    sinit => sinit,
    q => q
  );
-- synthesis translate_on

END cntr_11_0_5175c845ca556d8f_a;
--------------------------------------------------------------------------------
--    This file is owned and controlled by Xilinx and must be used solely     --
--    for design, simulation, implementation and creation of design files     --
--    limited to Xilinx devices or technologies. Use with non-Xilinx          --
--    devices or technologies is expressly prohibited and immediately         --
--    terminates your license.                                                --
--                                                                            --
--    XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" SOLELY    --
--    FOR USE IN DEVELOPING PROGRAMS AND SOLUTIONS FOR XILINX DEVICES.  BY    --
--    PROVIDING THIS DESIGN, CODE, OR INFORMATION AS ONE POSSIBLE             --
--    IMPLEMENTATION OF THIS FEATURE, APPLICATION OR STANDARD, XILINX IS      --
--    MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION IS FREE FROM ANY      --
--    CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE FOR OBTAINING ANY       --
--    RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.  XILINX EXPRESSLY       --
--    DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO THE ADEQUACY OF THE   --
--    IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OR          --
--    REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE FROM CLAIMS OF         --
--    INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A   --
--    PARTICULAR PURPOSE.                                                     --
--                                                                            --
--    Xilinx products are not intended for use in life support appliances,    --
--    devices, or systems.  Use in such applications are expressly            --
--    prohibited.                                                             --
--                                                                            --
--    (c) Copyright 1995-2014 Xilinx, Inc.                                    --
--    All rights reserved.                                                    --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
-- You must compile the wrapper file bmg_72_05b952b0e97b2a0d.vhd when simulating
-- the core, bmg_72_05b952b0e97b2a0d. When compiling the wrapper file, be sure to
-- reference the XilinxCoreLib VHDL simulation library. For detailed
-- instructions, please refer to the "CORE Generator Help".

-- The synthesis directives "translate_off/translate_on" specified
-- below are supported by Xilinx, Mentor Graphics and Synplicity
-- synthesis tools. Ensure they are correct for your synthesis tool(s).

LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
-- synthesis translate_off
LIBRARY XilinxCoreLib;
-- synthesis translate_on
ENTITY bmg_72_05b952b0e97b2a0d IS
  PORT (
    clka : IN STD_LOGIC;
    ena : IN STD_LOGIC;
    addra : IN STD_LOGIC_VECTOR(5 DOWNTO 0);
    douta : OUT STD_LOGIC_VECTOR(17 DOWNTO 0)
  );
END bmg_72_05b952b0e97b2a0d;

ARCHITECTURE bmg_72_05b952b0e97b2a0d_a OF bmg_72_05b952b0e97b2a0d IS
-- synthesis translate_off
COMPONENT wrapped_bmg_72_05b952b0e97b2a0d
  PORT (
    clka : IN STD_LOGIC;
    ena : IN STD_LOGIC;
    addra : IN STD_LOGIC_VECTOR(5 DOWNTO 0);
    douta : OUT STD_LOGIC_VECTOR(17 DOWNTO 0)
  );
END COMPONENT;

-- Configuration specification
  FOR ALL : wrapped_bmg_72_05b952b0e97b2a0d USE ENTITY XilinxCoreLib.blk_mem_gen_v7_2(behavioral)
    GENERIC MAP (
      c_addra_width => 6,
      c_addrb_width => 6,
      c_algorithm => 1,
      c_axi_id_width => 4,
      c_axi_slave_type => 0,
      c_axi_type => 1,
      c_byte_size => 9,
      c_common_clk => 0,
      c_default_data => "0",
      c_disable_warn_bhv_coll => 0,
      c_disable_warn_bhv_range => 0,
      c_enable_32bit_address => 0,
      c_family => "virtex5",
      c_has_axi_id => 0,
      c_has_ena => 1,
      c_has_enb => 0,
      c_has_injecterr => 0,
      c_has_mem_output_regs_a => 1,
      c_has_mem_output_regs_b => 0,
      c_has_mux_output_regs_a => 0,
      c_has_mux_output_regs_b => 0,
      c_has_regcea => 0,
      c_has_regceb => 0,
      c_has_rsta => 0,
      c_has_rstb => 0,
      c_has_softecc_input_regs_a => 0,
      c_has_softecc_output_regs_b => 0,
      c_init_file_name => "bmg_72_05b952b0e97b2a0d.mif",
      c_inita_val => "0",
      c_initb_val => "0",
      c_interface_type => 0,
      c_load_init_file => 1,
      c_mem_type => 3,
      c_mux_pipeline_stages => 0,
      c_prim_type => 1,
      c_read_depth_a => 64,
      c_read_depth_b => 64,
      c_read_width_a => 18,
      c_read_width_b => 18,
      c_rst_priority_a => "CE",
      c_rst_priority_b => "CE",
      c_rst_type => "SYNC",
      c_rstram_a => 0,
      c_rstram_b => 0,
      c_sim_collision_check => "ALL",
      c_use_byte_wea => 0,
      c_use_byte_web => 0,
      c_use_default_data => 0,
      c_use_ecc => 0,
      c_use_softecc => 0,
      c_wea_width => 1,
      c_web_width => 1,
      c_write_depth_a => 64,
      c_write_depth_b => 64,
      c_write_mode_a => "WRITE_FIRST",
      c_write_mode_b => "WRITE_FIRST",
      c_write_width_a => 18,
      c_write_width_b => 18,
      c_xdevicefamily => "virtex5"
    );
-- synthesis translate_on
BEGIN
-- synthesis translate_off
U0 : wrapped_bmg_72_05b952b0e97b2a0d
  PORT MAP (
    clka => clka,
    ena => ena,
    addra => addra,
    douta => douta
  );
-- synthesis translate_on

END bmg_72_05b952b0e97b2a0d_a;
--------------------------------------------------------------------------------
--    This file is owned and controlled by Xilinx and must be used solely     --
--    for design, simulation, implementation and creation of design files     --
--    limited to Xilinx devices or technologies. Use with non-Xilinx          --
--    devices or technologies is expressly prohibited and immediately         --
--    terminates your license.                                                --
--                                                                            --
--    XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" SOLELY    --
--    FOR USE IN DEVELOPING PROGRAMS AND SOLUTIONS FOR XILINX DEVICES.  BY    --
--    PROVIDING THIS DESIGN, CODE, OR INFORMATION AS ONE POSSIBLE             --
--    IMPLEMENTATION OF THIS FEATURE, APPLICATION OR STANDARD, XILINX IS      --
--    MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION IS FREE FROM ANY      --
--    CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE FOR OBTAINING ANY       --
--    RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.  XILINX EXPRESSLY       --
--    DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO THE ADEQUACY OF THE   --
--    IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OR          --
--    REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE FROM CLAIMS OF         --
--    INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A   --
--    PARTICULAR PURPOSE.                                                     --
--                                                                            --
--    Xilinx products are not intended for use in life support appliances,    --
--    devices, or systems.  Use in such applications are expressly            --
--    prohibited.                                                             --
--                                                                            --
--    (c) Copyright 1995-2014 Xilinx, Inc.                                    --
--    All rights reserved.                                                    --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
-- You must compile the wrapper file bmg_72_4f929f931e999067.vhd when simulating
-- the core, bmg_72_4f929f931e999067. When compiling the wrapper file, be sure to
-- reference the XilinxCoreLib VHDL simulation library. For detailed
-- instructions, please refer to the "CORE Generator Help".

-- The synthesis directives "translate_off/translate_on" specified
-- below are supported by Xilinx, Mentor Graphics and Synplicity
-- synthesis tools. Ensure they are correct for your synthesis tool(s).

LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
-- synthesis translate_off
LIBRARY XilinxCoreLib;
-- synthesis translate_on
ENTITY bmg_72_4f929f931e999067 IS
  PORT (
    clka : IN STD_LOGIC;
    ena : IN STD_LOGIC;
    addra : IN STD_LOGIC_VECTOR(10 DOWNTO 0);
    douta : OUT STD_LOGIC_VECTOR(7 DOWNTO 0)
  );
END bmg_72_4f929f931e999067;

ARCHITECTURE bmg_72_4f929f931e999067_a OF bmg_72_4f929f931e999067 IS
-- synthesis translate_off
COMPONENT wrapped_bmg_72_4f929f931e999067
  PORT (
    clka : IN STD_LOGIC;
    ena : IN STD_LOGIC;
    addra : IN STD_LOGIC_VECTOR(10 DOWNTO 0);
    douta : OUT STD_LOGIC_VECTOR(7 DOWNTO 0)
  );
END COMPONENT;

-- Configuration specification
  FOR ALL : wrapped_bmg_72_4f929f931e999067 USE ENTITY XilinxCoreLib.blk_mem_gen_v7_2(behavioral)
    GENERIC MAP (
      c_addra_width => 11,
      c_addrb_width => 11,
      c_algorithm => 1,
      c_axi_id_width => 4,
      c_axi_slave_type => 0,
      c_axi_type => 1,
      c_byte_size => 9,
      c_common_clk => 0,
      c_default_data => "0",
      c_disable_warn_bhv_coll => 0,
      c_disable_warn_bhv_range => 0,
      c_enable_32bit_address => 0,
      c_family => "virtex5",
      c_has_axi_id => 0,
      c_has_ena => 1,
      c_has_enb => 0,
      c_has_injecterr => 0,
      c_has_mem_output_regs_a => 1,
      c_has_mem_output_regs_b => 0,
      c_has_mux_output_regs_a => 0,
      c_has_mux_output_regs_b => 0,
      c_has_regcea => 0,
      c_has_regceb => 0,
      c_has_rsta => 0,
      c_has_rstb => 0,
      c_has_softecc_input_regs_a => 0,
      c_has_softecc_output_regs_b => 0,
      c_init_file_name => "bmg_72_4f929f931e999067.mif",
      c_inita_val => "0",
      c_initb_val => "0",
      c_interface_type => 0,
      c_load_init_file => 1,
      c_mem_type => 3,
      c_mux_pipeline_stages => 0,
      c_prim_type => 1,
      c_read_depth_a => 2048,
      c_read_depth_b => 2048,
      c_read_width_a => 8,
      c_read_width_b => 8,
      c_rst_priority_a => "CE",
      c_rst_priority_b => "CE",
      c_rst_type => "SYNC",
      c_rstram_a => 0,
      c_rstram_b => 0,
      c_sim_collision_check => "ALL",
      c_use_byte_wea => 0,
      c_use_byte_web => 0,
      c_use_default_data => 0,
      c_use_ecc => 0,
      c_use_softecc => 0,
      c_wea_width => 1,
      c_web_width => 1,
      c_write_depth_a => 2048,
      c_write_depth_b => 2048,
      c_write_mode_a => "WRITE_FIRST",
      c_write_mode_b => "WRITE_FIRST",
      c_write_width_a => 8,
      c_write_width_b => 8,
      c_xdevicefamily => "virtex5"
    );
-- synthesis translate_on
BEGIN
-- synthesis translate_off
U0 : wrapped_bmg_72_4f929f931e999067
  PORT MAP (
    clka => clka,
    ena => ena,
    addra => addra,
    douta => douta
  );
-- synthesis translate_on

END bmg_72_4f929f931e999067_a;
--------------------------------------------------------------------------------
--    This file is owned and controlled by Xilinx and must be used solely     --
--    for design, simulation, implementation and creation of design files     --
--    limited to Xilinx devices or technologies. Use with non-Xilinx          --
--    devices or technologies is expressly prohibited and immediately         --
--    terminates your license.                                                --
--                                                                            --
--    XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" SOLELY    --
--    FOR USE IN DEVELOPING PROGRAMS AND SOLUTIONS FOR XILINX DEVICES.  BY    --
--    PROVIDING THIS DESIGN, CODE, OR INFORMATION AS ONE POSSIBLE             --
--    IMPLEMENTATION OF THIS FEATURE, APPLICATION OR STANDARD, XILINX IS      --
--    MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION IS FREE FROM ANY      --
--    CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE FOR OBTAINING ANY       --
--    RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.  XILINX EXPRESSLY       --
--    DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO THE ADEQUACY OF THE   --
--    IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OR          --
--    REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE FROM CLAIMS OF         --
--    INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A   --
--    PARTICULAR PURPOSE.                                                     --
--                                                                            --
--    Xilinx products are not intended for use in life support appliances,    --
--    devices, or systems.  Use in such applications are expressly            --
--    prohibited.                                                             --
--                                                                            --
--    (c) Copyright 1995-2014 Xilinx, Inc.                                    --
--    All rights reserved.                                                    --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
-- You must compile the wrapper file accm_11_0_8f8edad76401ddd0.vhd when simulating
-- the core, accm_11_0_8f8edad76401ddd0. When compiling the wrapper file, be sure to
-- reference the XilinxCoreLib VHDL simulation library. For detailed
-- instructions, please refer to the "CORE Generator Help".

-- The synthesis directives "translate_off/translate_on" specified
-- below are supported by Xilinx, Mentor Graphics and Synplicity
-- synthesis tools. Ensure they are correct for your synthesis tool(s).

LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
-- synthesis translate_off
LIBRARY XilinxCoreLib;
-- synthesis translate_on
ENTITY accm_11_0_8f8edad76401ddd0 IS
  PORT (
    b : IN STD_LOGIC_VECTOR(15 DOWNTO 0);
    clk : IN STD_LOGIC;
    ce : IN STD_LOGIC;
    sclr : IN STD_LOGIC;
    q : OUT STD_LOGIC_VECTOR(31 DOWNTO 0)
  );
END accm_11_0_8f8edad76401ddd0;

ARCHITECTURE accm_11_0_8f8edad76401ddd0_a OF accm_11_0_8f8edad76401ddd0 IS
-- synthesis translate_off
COMPONENT wrapped_accm_11_0_8f8edad76401ddd0
  PORT (
    b : IN STD_LOGIC_VECTOR(15 DOWNTO 0);
    clk : IN STD_LOGIC;
    ce : IN STD_LOGIC;
    sclr : IN STD_LOGIC;
    q : OUT STD_LOGIC_VECTOR(31 DOWNTO 0)
  );
END COMPONENT;

-- Configuration specification
  FOR ALL : wrapped_accm_11_0_8f8edad76401ddd0 USE ENTITY XilinxCoreLib.c_accum_v11_0(behavioral)
    GENERIC MAP (
      c_add_mode => 0,
      c_ainit_val => "0",
      c_b_type => 0,
      c_b_width => 16,
      c_bypass_low => 0,
      c_ce_overrides_sclr => 0,
      c_has_bypass => 0,
      c_has_c_in => 0,
      c_has_ce => 1,
      c_has_sclr => 1,
      c_has_sinit => 0,
      c_has_sset => 0,
      c_implementation => 1,
      c_latency => 1,
      c_out_width => 32,
      c_scale => 0,
      c_sclr_overrides_sset => 1,
      c_sinit_val => "0",
      c_verbosity => 0,
      c_xdevicefamily => "virtex5"
    );
-- synthesis translate_on
BEGIN
-- synthesis translate_off
U0 : wrapped_accm_11_0_8f8edad76401ddd0
  PORT MAP (
    b => b,
    clk => clk,
    ce => ce,
    sclr => sclr,
    q => q
  );
-- synthesis translate_on

END accm_11_0_8f8edad76401ddd0_a;
--------------------------------------------------------------------------------
--    This file is owned and controlled by Xilinx and must be used solely     --
--    for design, simulation, implementation and creation of design files     --
--    limited to Xilinx devices or technologies. Use with non-Xilinx          --
--    devices or technologies is expressly prohibited and immediately         --
--    terminates your license.                                                --
--                                                                            --
--    XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" SOLELY    --
--    FOR USE IN DEVELOPING PROGRAMS AND SOLUTIONS FOR XILINX DEVICES.  BY    --
--    PROVIDING THIS DESIGN, CODE, OR INFORMATION AS ONE POSSIBLE             --
--    IMPLEMENTATION OF THIS FEATURE, APPLICATION OR STANDARD, XILINX IS      --
--    MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION IS FREE FROM ANY      --
--    CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE FOR OBTAINING ANY       --
--    RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.  XILINX EXPRESSLY       --
--    DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO THE ADEQUACY OF THE   --
--    IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OR          --
--    REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE FROM CLAIMS OF         --
--    INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A   --
--    PARTICULAR PURPOSE.                                                     --
--                                                                            --
--    Xilinx products are not intended for use in life support appliances,    --
--    devices, or systems.  Use in such applications are expressly            --
--    prohibited.                                                             --
--                                                                            --
--    (c) Copyright 1995-2014 Xilinx, Inc.                                    --
--    All rights reserved.                                                    --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
-- You must compile the wrapper file cntr_11_0_047d617e0a3da9e0.vhd when simulating
-- the core, cntr_11_0_047d617e0a3da9e0. When compiling the wrapper file, be sure to
-- reference the XilinxCoreLib VHDL simulation library. For detailed
-- instructions, please refer to the "CORE Generator Help".

-- The synthesis directives "translate_off/translate_on" specified
-- below are supported by Xilinx, Mentor Graphics and Synplicity
-- synthesis tools. Ensure they are correct for your synthesis tool(s).

LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
-- synthesis translate_off
LIBRARY XilinxCoreLib;
-- synthesis translate_on
ENTITY cntr_11_0_047d617e0a3da9e0 IS
  PORT (
    clk : IN STD_LOGIC;
    ce : IN STD_LOGIC;
    sinit : IN STD_LOGIC;
    q : OUT STD_LOGIC_VECTOR(31 DOWNTO 0)
  );
END cntr_11_0_047d617e0a3da9e0;

ARCHITECTURE cntr_11_0_047d617e0a3da9e0_a OF cntr_11_0_047d617e0a3da9e0 IS
-- synthesis translate_off
COMPONENT wrapped_cntr_11_0_047d617e0a3da9e0
  PORT (
    clk : IN STD_LOGIC;
    ce : IN STD_LOGIC;
    sinit : IN STD_LOGIC;
    q : OUT STD_LOGIC_VECTOR(31 DOWNTO 0)
  );
END COMPONENT;

-- Configuration specification
  FOR ALL : wrapped_cntr_11_0_047d617e0a3da9e0 USE ENTITY XilinxCoreLib.c_counter_binary_v11_0(behavioral)
    GENERIC MAP (
      c_ainit_val => "0",
      c_ce_overrides_sync => 0,
      c_count_by => "100",
      c_count_mode => 0,
      c_count_to => "1",
      c_fb_latency => 0,
      c_has_ce => 1,
      c_has_load => 0,
      c_has_sclr => 0,
      c_has_sinit => 1,
      c_has_sset => 0,
      c_has_thresh0 => 0,
      c_implementation => 0,
      c_latency => 1,
      c_load_low => 0,
      c_restrict_count => 0,
      c_sclr_overrides_sset => 1,
      c_sinit_val => "0",
      c_thresh0_value => "1",
      c_verbosity => 0,
      c_width => 32,
      c_xdevicefamily => "virtex5"
    );
-- synthesis translate_on
BEGIN
-- synthesis translate_off
U0 : wrapped_cntr_11_0_047d617e0a3da9e0
  PORT MAP (
    clk => clk,
    ce => ce,
    sinit => sinit,
    q => q
  );
-- synthesis translate_on

END cntr_11_0_047d617e0a3da9e0_a;
--------------------------------------------------------------------------------
--    This file is owned and controlled by Xilinx and must be used solely     --
--    for design, simulation, implementation and creation of design files     --
--    limited to Xilinx devices or technologies. Use with non-Xilinx          --
--    devices or technologies is expressly prohibited and immediately         --
--    terminates your license.                                                --
--                                                                            --
--    XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" SOLELY    --
--    FOR USE IN DEVELOPING PROGRAMS AND SOLUTIONS FOR XILINX DEVICES.  BY    --
--    PROVIDING THIS DESIGN, CODE, OR INFORMATION AS ONE POSSIBLE             --
--    IMPLEMENTATION OF THIS FEATURE, APPLICATION OR STANDARD, XILINX IS      --
--    MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION IS FREE FROM ANY      --
--    CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE FOR OBTAINING ANY       --
--    RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.  XILINX EXPRESSLY       --
--    DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO THE ADEQUACY OF THE   --
--    IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OR          --
--    REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE FROM CLAIMS OF         --
--    INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A   --
--    PARTICULAR PURPOSE.                                                     --
--                                                                            --
--    Xilinx products are not intended for use in life support appliances,    --
--    devices, or systems.  Use in such applications are expressly            --
--    prohibited.                                                             --
--                                                                            --
--    (c) Copyright 1995-2014 Xilinx, Inc.                                    --
--    All rights reserved.                                                    --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
-- You must compile the wrapper file cntr_11_0_99cfda0476972b76.vhd when simulating
-- the core, cntr_11_0_99cfda0476972b76. When compiling the wrapper file, be sure to
-- reference the XilinxCoreLib VHDL simulation library. For detailed
-- instructions, please refer to the "CORE Generator Help".

-- The synthesis directives "translate_off/translate_on" specified
-- below are supported by Xilinx, Mentor Graphics and Synplicity
-- synthesis tools. Ensure they are correct for your synthesis tool(s).

LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
-- synthesis translate_off
LIBRARY XilinxCoreLib;
-- synthesis translate_on
ENTITY cntr_11_0_99cfda0476972b76 IS
  PORT (
    clk : IN STD_LOGIC;
    ce : IN STD_LOGIC;
    sinit : IN STD_LOGIC;
    q : OUT STD_LOGIC_VECTOR(10 DOWNTO 0)
  );
END cntr_11_0_99cfda0476972b76;

ARCHITECTURE cntr_11_0_99cfda0476972b76_a OF cntr_11_0_99cfda0476972b76 IS
-- synthesis translate_off
COMPONENT wrapped_cntr_11_0_99cfda0476972b76
  PORT (
    clk : IN STD_LOGIC;
    ce : IN STD_LOGIC;
    sinit : IN STD_LOGIC;
    q : OUT STD_LOGIC_VECTOR(10 DOWNTO 0)
  );
END COMPONENT;

-- Configuration specification
  FOR ALL : wrapped_cntr_11_0_99cfda0476972b76 USE ENTITY XilinxCoreLib.c_counter_binary_v11_0(behavioral)
    GENERIC MAP (
      c_ainit_val => "0",
      c_ce_overrides_sync => 0,
      c_count_by => "1",
      c_count_mode => 0,
      c_count_to => "1",
      c_fb_latency => 0,
      c_has_ce => 1,
      c_has_load => 0,
      c_has_sclr => 0,
      c_has_sinit => 1,
      c_has_sset => 0,
      c_has_thresh0 => 0,
      c_implementation => 0,
      c_latency => 1,
      c_load_low => 0,
      c_restrict_count => 0,
      c_sclr_overrides_sset => 1,
      c_sinit_val => "0",
      c_thresh0_value => "1",
      c_verbosity => 0,
      c_width => 11,
      c_xdevicefamily => "virtex5"
    );
-- synthesis translate_on
BEGIN
-- synthesis translate_off
U0 : wrapped_cntr_11_0_99cfda0476972b76
  PORT MAP (
    clk => clk,
    ce => ce,
    sinit => sinit,
    q => q
  );
-- synthesis translate_on

END cntr_11_0_99cfda0476972b76_a;
--------------------------------------------------------------------------------
--    This file is owned and controlled by Xilinx and must be used solely     --
--    for design, simulation, implementation and creation of design files     --
--    limited to Xilinx devices or technologies. Use with non-Xilinx          --
--    devices or technologies is expressly prohibited and immediately         --
--    terminates your license.                                                --
--                                                                            --
--    XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" SOLELY    --
--    FOR USE IN DEVELOPING PROGRAMS AND SOLUTIONS FOR XILINX DEVICES.  BY    --
--    PROVIDING THIS DESIGN, CODE, OR INFORMATION AS ONE POSSIBLE             --
--    IMPLEMENTATION OF THIS FEATURE, APPLICATION OR STANDARD, XILINX IS      --
--    MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION IS FREE FROM ANY      --
--    CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE FOR OBTAINING ANY       --
--    RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.  XILINX EXPRESSLY       --
--    DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO THE ADEQUACY OF THE   --
--    IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OR          --
--    REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE FROM CLAIMS OF         --
--    INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A   --
--    PARTICULAR PURPOSE.                                                     --
--                                                                            --
--    Xilinx products are not intended for use in life support appliances,    --
--    devices, or systems.  Use in such applications are expressly            --
--    prohibited.                                                             --
--                                                                            --
--    (c) Copyright 1995-2014 Xilinx, Inc.                                    --
--    All rights reserved.                                                    --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
-- You must compile the wrapper file cntr_11_0_93187ca4b7bc144e.vhd when simulating
-- the core, cntr_11_0_93187ca4b7bc144e. When compiling the wrapper file, be sure to
-- reference the XilinxCoreLib VHDL simulation library. For detailed
-- instructions, please refer to the "CORE Generator Help".

-- The synthesis directives "translate_off/translate_on" specified
-- below are supported by Xilinx, Mentor Graphics and Synplicity
-- synthesis tools. Ensure they are correct for your synthesis tool(s).

LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
-- synthesis translate_off
LIBRARY XilinxCoreLib;
-- synthesis translate_on
ENTITY cntr_11_0_93187ca4b7bc144e IS
  PORT (
    clk : IN STD_LOGIC;
    ce : IN STD_LOGIC;
    sinit : IN STD_LOGIC;
    load : IN STD_LOGIC;
    l : IN STD_LOGIC_VECTOR(1 DOWNTO 0);
    q : OUT STD_LOGIC_VECTOR(1 DOWNTO 0)
  );
END cntr_11_0_93187ca4b7bc144e;

ARCHITECTURE cntr_11_0_93187ca4b7bc144e_a OF cntr_11_0_93187ca4b7bc144e IS
-- synthesis translate_off
COMPONENT wrapped_cntr_11_0_93187ca4b7bc144e
  PORT (
    clk : IN STD_LOGIC;
    ce : IN STD_LOGIC;
    sinit : IN STD_LOGIC;
    load : IN STD_LOGIC;
    l : IN STD_LOGIC_VECTOR(1 DOWNTO 0);
    q : OUT STD_LOGIC_VECTOR(1 DOWNTO 0)
  );
END COMPONENT;

-- Configuration specification
  FOR ALL : wrapped_cntr_11_0_93187ca4b7bc144e USE ENTITY XilinxCoreLib.c_counter_binary_v11_0(behavioral)
    GENERIC MAP (
      c_ainit_val => "0",
      c_ce_overrides_sync => 0,
      c_count_by => "1",
      c_count_mode => 1,
      c_count_to => "1",
      c_fb_latency => 0,
      c_has_ce => 1,
      c_has_load => 1,
      c_has_sclr => 0,
      c_has_sinit => 1,
      c_has_sset => 0,
      c_has_thresh0 => 0,
      c_implementation => 0,
      c_latency => 1,
      c_load_low => 0,
      c_restrict_count => 0,
      c_sclr_overrides_sset => 1,
      c_sinit_val => "0",
      c_thresh0_value => "1",
      c_verbosity => 0,
      c_width => 2,
      c_xdevicefamily => "virtex5"
    );
-- synthesis translate_on
BEGIN
-- synthesis translate_off
U0 : wrapped_cntr_11_0_93187ca4b7bc144e
  PORT MAP (
    clk => clk,
    ce => ce,
    sinit => sinit,
    load => load,
    l => l,
    q => q
  );
-- synthesis translate_on

END cntr_11_0_93187ca4b7bc144e_a;
--------------------------------------------------------------------------------
--    This file is owned and controlled by Xilinx and must be used solely     --
--    for design, simulation, implementation and creation of design files     --
--    limited to Xilinx devices or technologies. Use with non-Xilinx          --
--    devices or technologies is expressly prohibited and immediately         --
--    terminates your license.                                                --
--                                                                            --
--    XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" SOLELY    --
--    FOR USE IN DEVELOPING PROGRAMS AND SOLUTIONS FOR XILINX DEVICES.  BY    --
--    PROVIDING THIS DESIGN, CODE, OR INFORMATION AS ONE POSSIBLE             --
--    IMPLEMENTATION OF THIS FEATURE, APPLICATION OR STANDARD, XILINX IS      --
--    MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION IS FREE FROM ANY      --
--    CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE FOR OBTAINING ANY       --
--    RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.  XILINX EXPRESSLY       --
--    DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO THE ADEQUACY OF THE   --
--    IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OR          --
--    REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE FROM CLAIMS OF         --
--    INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A   --
--    PARTICULAR PURPOSE.                                                     --
--                                                                            --
--    Xilinx products are not intended for use in life support appliances,    --
--    devices, or systems.  Use in such applications are expressly            --
--    prohibited.                                                             --
--                                                                            --
--    (c) Copyright 1995-2014 Xilinx, Inc.                                    --
--    All rights reserved.                                                    --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
-- You must compile the wrapper file cntr_11_0_aeada998ec385fcd.vhd when simulating
-- the core, cntr_11_0_aeada998ec385fcd. When compiling the wrapper file, be sure to
-- reference the XilinxCoreLib VHDL simulation library. For detailed
-- instructions, please refer to the "CORE Generator Help".

-- The synthesis directives "translate_off/translate_on" specified
-- below are supported by Xilinx, Mentor Graphics and Synplicity
-- synthesis tools. Ensure they are correct for your synthesis tool(s).

LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
-- synthesis translate_off
LIBRARY XilinxCoreLib;
-- synthesis translate_on
ENTITY cntr_11_0_aeada998ec385fcd IS
  PORT (
    clk : IN STD_LOGIC;
    ce : IN STD_LOGIC;
    sinit : IN STD_LOGIC;
    q : OUT STD_LOGIC_VECTOR(6 DOWNTO 0)
  );
END cntr_11_0_aeada998ec385fcd;

ARCHITECTURE cntr_11_0_aeada998ec385fcd_a OF cntr_11_0_aeada998ec385fcd IS
-- synthesis translate_off
COMPONENT wrapped_cntr_11_0_aeada998ec385fcd
  PORT (
    clk : IN STD_LOGIC;
    ce : IN STD_LOGIC;
    sinit : IN STD_LOGIC;
    q : OUT STD_LOGIC_VECTOR(6 DOWNTO 0)
  );
END COMPONENT;

-- Configuration specification
  FOR ALL : wrapped_cntr_11_0_aeada998ec385fcd USE ENTITY XilinxCoreLib.c_counter_binary_v11_0(behavioral)
    GENERIC MAP (
      c_ainit_val => "0",
      c_ce_overrides_sync => 0,
      c_count_by => "1",
      c_count_mode => 0,
      c_count_to => "1",
      c_fb_latency => 0,
      c_has_ce => 1,
      c_has_load => 0,
      c_has_sclr => 0,
      c_has_sinit => 1,
      c_has_sset => 0,
      c_has_thresh0 => 0,
      c_implementation => 0,
      c_latency => 1,
      c_load_low => 0,
      c_restrict_count => 0,
      c_sclr_overrides_sset => 1,
      c_sinit_val => "0",
      c_thresh0_value => "1",
      c_verbosity => 0,
      c_width => 7,
      c_xdevicefamily => "virtex5"
    );
-- synthesis translate_on
BEGIN
-- synthesis translate_off
U0 : wrapped_cntr_11_0_aeada998ec385fcd
  PORT MAP (
    clk => clk,
    ce => ce,
    sinit => sinit,
    q => q
  );
-- synthesis translate_on

END cntr_11_0_aeada998ec385fcd_a;
--------------------------------------------------------------------------------
--    This file is owned and controlled by Xilinx and must be used solely     --
--    for design, simulation, implementation and creation of design files     --
--    limited to Xilinx devices or technologies. Use with non-Xilinx          --
--    devices or technologies is expressly prohibited and immediately         --
--    terminates your license.                                                --
--                                                                            --
--    XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" SOLELY    --
--    FOR USE IN DEVELOPING PROGRAMS AND SOLUTIONS FOR XILINX DEVICES.  BY    --
--    PROVIDING THIS DESIGN, CODE, OR INFORMATION AS ONE POSSIBLE             --
--    IMPLEMENTATION OF THIS FEATURE, APPLICATION OR STANDARD, XILINX IS      --
--    MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION IS FREE FROM ANY      --
--    CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE FOR OBTAINING ANY       --
--    RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.  XILINX EXPRESSLY       --
--    DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO THE ADEQUACY OF THE   --
--    IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OR          --
--    REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE FROM CLAIMS OF         --
--    INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A   --
--    PARTICULAR PURPOSE.                                                     --
--                                                                            --
--    Xilinx products are not intended for use in life support appliances,    --
--    devices, or systems.  Use in such applications are expressly            --
--    prohibited.                                                             --
--                                                                            --
--    (c) Copyright 1995-2014 Xilinx, Inc.                                    --
--    All rights reserved.                                                    --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
-- You must compile the wrapper file cntr_11_0_263175d139d7ac6d.vhd when simulating
-- the core, cntr_11_0_263175d139d7ac6d. When compiling the wrapper file, be sure to
-- reference the XilinxCoreLib VHDL simulation library. For detailed
-- instructions, please refer to the "CORE Generator Help".

-- The synthesis directives "translate_off/translate_on" specified
-- below are supported by Xilinx, Mentor Graphics and Synplicity
-- synthesis tools. Ensure they are correct for your synthesis tool(s).

LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
-- synthesis translate_off
LIBRARY XilinxCoreLib;
-- synthesis translate_on
ENTITY cntr_11_0_263175d139d7ac6d IS
  PORT (
    clk : IN STD_LOGIC;
    ce : IN STD_LOGIC;
    sinit : IN STD_LOGIC;
    q : OUT STD_LOGIC_VECTOR(1 DOWNTO 0)
  );
END cntr_11_0_263175d139d7ac6d;

ARCHITECTURE cntr_11_0_263175d139d7ac6d_a OF cntr_11_0_263175d139d7ac6d IS
-- synthesis translate_off
COMPONENT wrapped_cntr_11_0_263175d139d7ac6d
  PORT (
    clk : IN STD_LOGIC;
    ce : IN STD_LOGIC;
    sinit : IN STD_LOGIC;
    q : OUT STD_LOGIC_VECTOR(1 DOWNTO 0)
  );
END COMPONENT;

-- Configuration specification
  FOR ALL : wrapped_cntr_11_0_263175d139d7ac6d USE ENTITY XilinxCoreLib.c_counter_binary_v11_0(behavioral)
    GENERIC MAP (
      c_ainit_val => "0",
      c_ce_overrides_sync => 0,
      c_count_by => "1",
      c_count_mode => 0,
      c_count_to => "1",
      c_fb_latency => 0,
      c_has_ce => 1,
      c_has_load => 0,
      c_has_sclr => 0,
      c_has_sinit => 1,
      c_has_sset => 0,
      c_has_thresh0 => 0,
      c_implementation => 0,
      c_latency => 1,
      c_load_low => 0,
      c_restrict_count => 0,
      c_sclr_overrides_sset => 1,
      c_sinit_val => "0",
      c_thresh0_value => "1",
      c_verbosity => 0,
      c_width => 2,
      c_xdevicefamily => "virtex5"
    );
-- synthesis translate_on
BEGIN
-- synthesis translate_off
U0 : wrapped_cntr_11_0_263175d139d7ac6d
  PORT MAP (
    clk => clk,
    ce => ce,
    sinit => sinit,
    q => q
  );
-- synthesis translate_on

END cntr_11_0_263175d139d7ac6d_a;
--------------------------------------------------------------------------------
--    This file is owned and controlled by Xilinx and must be used solely     --
--    for design, simulation, implementation and creation of design files     --
--    limited to Xilinx devices or technologies. Use with non-Xilinx          --
--    devices or technologies is expressly prohibited and immediately         --
--    terminates your license.                                                --
--                                                                            --
--    XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" SOLELY    --
--    FOR USE IN DEVELOPING PROGRAMS AND SOLUTIONS FOR XILINX DEVICES.  BY    --
--    PROVIDING THIS DESIGN, CODE, OR INFORMATION AS ONE POSSIBLE             --
--    IMPLEMENTATION OF THIS FEATURE, APPLICATION OR STANDARD, XILINX IS      --
--    MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION IS FREE FROM ANY      --
--    CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE FOR OBTAINING ANY       --
--    RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.  XILINX EXPRESSLY       --
--    DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO THE ADEQUACY OF THE   --
--    IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OR          --
--    REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE FROM CLAIMS OF         --
--    INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A   --
--    PARTICULAR PURPOSE.                                                     --
--                                                                            --
--    Xilinx products are not intended for use in life support appliances,    --
--    devices, or systems.  Use in such applications are expressly            --
--    prohibited.                                                             --
--                                                                            --
--    (c) Copyright 1995-2014 Xilinx, Inc.                                    --
--    All rights reserved.                                                    --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
-- You must compile the wrapper file addsb_11_0_967e0ec2eea991a6.vhd when simulating
-- the core, addsb_11_0_967e0ec2eea991a6. When compiling the wrapper file, be sure to
-- reference the XilinxCoreLib VHDL simulation library. For detailed
-- instructions, please refer to the "CORE Generator Help".

-- The synthesis directives "translate_off/translate_on" specified
-- below are supported by Xilinx, Mentor Graphics and Synplicity
-- synthesis tools. Ensure they are correct for your synthesis tool(s).

LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
-- synthesis translate_off
LIBRARY XilinxCoreLib;
-- synthesis translate_on
ENTITY addsb_11_0_967e0ec2eea991a6 IS
  PORT (
    a : IN STD_LOGIC_VECTOR(11 DOWNTO 0);
    b : IN STD_LOGIC_VECTOR(11 DOWNTO 0);
    s : OUT STD_LOGIC_VECTOR(11 DOWNTO 0)
  );
END addsb_11_0_967e0ec2eea991a6;

ARCHITECTURE addsb_11_0_967e0ec2eea991a6_a OF addsb_11_0_967e0ec2eea991a6 IS
-- synthesis translate_off
COMPONENT wrapped_addsb_11_0_967e0ec2eea991a6
  PORT (
    a : IN STD_LOGIC_VECTOR(11 DOWNTO 0);
    b : IN STD_LOGIC_VECTOR(11 DOWNTO 0);
    s : OUT STD_LOGIC_VECTOR(11 DOWNTO 0)
  );
END COMPONENT;

-- Configuration specification
  FOR ALL : wrapped_addsb_11_0_967e0ec2eea991a6 USE ENTITY XilinxCoreLib.c_addsub_v11_0(behavioral)
    GENERIC MAP (
      c_a_type => 1,
      c_a_width => 12,
      c_add_mode => 0,
      c_ainit_val => "0",
      c_b_constant => 0,
      c_b_type => 1,
      c_b_value => "000000000000",
      c_b_width => 12,
      c_borrow_low => 1,
      c_bypass_low => 0,
      c_ce_overrides_bypass => 1,
      c_ce_overrides_sclr => 0,
      c_has_bypass => 0,
      c_has_c_in => 0,
      c_has_c_out => 0,
      c_has_ce => 0,
      c_has_sclr => 0,
      c_has_sinit => 0,
      c_has_sset => 0,
      c_implementation => 0,
      c_latency => 0,
      c_out_width => 12,
      c_sclr_overrides_sset => 1,
      c_sinit_val => "0",
      c_verbosity => 0,
      c_xdevicefamily => "virtex5"
    );
-- synthesis translate_on
BEGIN
-- synthesis translate_off
U0 : wrapped_addsb_11_0_967e0ec2eea991a6
  PORT MAP (
    a => a,
    b => b,
    s => s
  );
-- synthesis translate_on

END addsb_11_0_967e0ec2eea991a6_a;
--------------------------------------------------------------------------------
--    This file is owned and controlled by Xilinx and must be used solely     --
--    for design, simulation, implementation and creation of design files     --
--    limited to Xilinx devices or technologies. Use with non-Xilinx          --
--    devices or technologies is expressly prohibited and immediately         --
--    terminates your license.                                                --
--                                                                            --
--    XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" SOLELY    --
--    FOR USE IN DEVELOPING PROGRAMS AND SOLUTIONS FOR XILINX DEVICES.  BY    --
--    PROVIDING THIS DESIGN, CODE, OR INFORMATION AS ONE POSSIBLE             --
--    IMPLEMENTATION OF THIS FEATURE, APPLICATION OR STANDARD, XILINX IS      --
--    MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION IS FREE FROM ANY      --
--    CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE FOR OBTAINING ANY       --
--    RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.  XILINX EXPRESSLY       --
--    DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO THE ADEQUACY OF THE   --
--    IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OR          --
--    REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE FROM CLAIMS OF         --
--    INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A   --
--    PARTICULAR PURPOSE.                                                     --
--                                                                            --
--    Xilinx products are not intended for use in life support appliances,    --
--    devices, or systems.  Use in such applications are expressly            --
--    prohibited.                                                             --
--                                                                            --
--    (c) Copyright 1995-2014 Xilinx, Inc.                                    --
--    All rights reserved.                                                    --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
-- You must compile the wrapper file cntr_11_0_0c0d4ef78e6c6aa9.vhd when simulating
-- the core, cntr_11_0_0c0d4ef78e6c6aa9. When compiling the wrapper file, be sure to
-- reference the XilinxCoreLib VHDL simulation library. For detailed
-- instructions, please refer to the "CORE Generator Help".

-- The synthesis directives "translate_off/translate_on" specified
-- below are supported by Xilinx, Mentor Graphics and Synplicity
-- synthesis tools. Ensure they are correct for your synthesis tool(s).

LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
-- synthesis translate_off
LIBRARY XilinxCoreLib;
-- synthesis translate_on
ENTITY cntr_11_0_0c0d4ef78e6c6aa9 IS
  PORT (
    clk : IN STD_LOGIC;
    ce : IN STD_LOGIC;
    sinit : IN STD_LOGIC;
    q : OUT STD_LOGIC_VECTOR(26 DOWNTO 0)
  );
END cntr_11_0_0c0d4ef78e6c6aa9;

ARCHITECTURE cntr_11_0_0c0d4ef78e6c6aa9_a OF cntr_11_0_0c0d4ef78e6c6aa9 IS
-- synthesis translate_off
COMPONENT wrapped_cntr_11_0_0c0d4ef78e6c6aa9
  PORT (
    clk : IN STD_LOGIC;
    ce : IN STD_LOGIC;
    sinit : IN STD_LOGIC;
    q : OUT STD_LOGIC_VECTOR(26 DOWNTO 0)
  );
END COMPONENT;

-- Configuration specification
  FOR ALL : wrapped_cntr_11_0_0c0d4ef78e6c6aa9 USE ENTITY XilinxCoreLib.c_counter_binary_v11_0(behavioral)
    GENERIC MAP (
      c_ainit_val => "0",
      c_ce_overrides_sync => 0,
      c_count_by => "1",
      c_count_mode => 0,
      c_count_to => "1",
      c_fb_latency => 0,
      c_has_ce => 1,
      c_has_load => 0,
      c_has_sclr => 0,
      c_has_sinit => 1,
      c_has_sset => 0,
      c_has_thresh0 => 0,
      c_implementation => 0,
      c_latency => 1,
      c_load_low => 0,
      c_restrict_count => 0,
      c_sclr_overrides_sset => 1,
      c_sinit_val => "0",
      c_thresh0_value => "1",
      c_verbosity => 0,
      c_width => 27,
      c_xdevicefamily => "virtex5"
    );
-- synthesis translate_on
BEGIN
-- synthesis translate_off
U0 : wrapped_cntr_11_0_0c0d4ef78e6c6aa9
  PORT MAP (
    clk => clk,
    ce => ce,
    sinit => sinit,
    q => q
  );
-- synthesis translate_on

END cntr_11_0_0c0d4ef78e6c6aa9_a;
--------------------------------------------------------------------------------
--    This file is owned and controlled by Xilinx and must be used solely     --
--    for design, simulation, implementation and creation of design files     --
--    limited to Xilinx devices or technologies. Use with non-Xilinx          --
--    devices or technologies is expressly prohibited and immediately         --
--    terminates your license.                                                --
--                                                                            --
--    XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" SOLELY    --
--    FOR USE IN DEVELOPING PROGRAMS AND SOLUTIONS FOR XILINX DEVICES.  BY    --
--    PROVIDING THIS DESIGN, CODE, OR INFORMATION AS ONE POSSIBLE             --
--    IMPLEMENTATION OF THIS FEATURE, APPLICATION OR STANDARD, XILINX IS      --
--    MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION IS FREE FROM ANY      --
--    CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE FOR OBTAINING ANY       --
--    RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.  XILINX EXPRESSLY       --
--    DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO THE ADEQUACY OF THE   --
--    IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OR          --
--    REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE FROM CLAIMS OF         --
--    INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A   --
--    PARTICULAR PURPOSE.                                                     --
--                                                                            --
--    Xilinx products are not intended for use in life support appliances,    --
--    devices, or systems.  Use in such applications are expressly            --
--    prohibited.                                                             --
--                                                                            --
--    (c) Copyright 1995-2014 Xilinx, Inc.                                    --
--    All rights reserved.                                                    --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
-- You must compile the wrapper file bmg_72_031b3366e458494d.vhd when simulating
-- the core, bmg_72_031b3366e458494d. When compiling the wrapper file, be sure to
-- reference the XilinxCoreLib VHDL simulation library. For detailed
-- instructions, please refer to the "CORE Generator Help".

-- The synthesis directives "translate_off/translate_on" specified
-- below are supported by Xilinx, Mentor Graphics and Synplicity
-- synthesis tools. Ensure they are correct for your synthesis tool(s).

LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
-- synthesis translate_off
LIBRARY XilinxCoreLib;
-- synthesis translate_on
ENTITY bmg_72_031b3366e458494d IS
  PORT (
    clka : IN STD_LOGIC;
    ena : IN STD_LOGIC;
    addra : IN STD_LOGIC_VECTOR(2 DOWNTO 0);
    douta : OUT STD_LOGIC_VECTOR(17 DOWNTO 0)
  );
END bmg_72_031b3366e458494d;

ARCHITECTURE bmg_72_031b3366e458494d_a OF bmg_72_031b3366e458494d IS
-- synthesis translate_off
COMPONENT wrapped_bmg_72_031b3366e458494d
  PORT (
    clka : IN STD_LOGIC;
    ena : IN STD_LOGIC;
    addra : IN STD_LOGIC_VECTOR(2 DOWNTO 0);
    douta : OUT STD_LOGIC_VECTOR(17 DOWNTO 0)
  );
END COMPONENT;

-- Configuration specification
  FOR ALL : wrapped_bmg_72_031b3366e458494d USE ENTITY XilinxCoreLib.blk_mem_gen_v7_2(behavioral)
    GENERIC MAP (
      c_addra_width => 3,
      c_addrb_width => 3,
      c_algorithm => 1,
      c_axi_id_width => 4,
      c_axi_slave_type => 0,
      c_axi_type => 1,
      c_byte_size => 9,
      c_common_clk => 0,
      c_default_data => "0",
      c_disable_warn_bhv_coll => 0,
      c_disable_warn_bhv_range => 0,
      c_enable_32bit_address => 0,
      c_family => "virtex5",
      c_has_axi_id => 0,
      c_has_ena => 1,
      c_has_enb => 0,
      c_has_injecterr => 0,
      c_has_mem_output_regs_a => 1,
      c_has_mem_output_regs_b => 0,
      c_has_mux_output_regs_a => 0,
      c_has_mux_output_regs_b => 0,
      c_has_regcea => 0,
      c_has_regceb => 0,
      c_has_rsta => 0,
      c_has_rstb => 0,
      c_has_softecc_input_regs_a => 0,
      c_has_softecc_output_regs_b => 0,
      c_init_file_name => "bmg_72_031b3366e458494d.mif",
      c_inita_val => "0",
      c_initb_val => "0",
      c_interface_type => 0,
      c_load_init_file => 1,
      c_mem_type => 3,
      c_mux_pipeline_stages => 0,
      c_prim_type => 1,
      c_read_depth_a => 8,
      c_read_depth_b => 8,
      c_read_width_a => 18,
      c_read_width_b => 18,
      c_rst_priority_a => "CE",
      c_rst_priority_b => "CE",
      c_rst_type => "SYNC",
      c_rstram_a => 0,
      c_rstram_b => 0,
      c_sim_collision_check => "ALL",
      c_use_byte_wea => 0,
      c_use_byte_web => 0,
      c_use_default_data => 0,
      c_use_ecc => 0,
      c_use_softecc => 0,
      c_wea_width => 1,
      c_web_width => 1,
      c_write_depth_a => 8,
      c_write_depth_b => 8,
      c_write_mode_a => "WRITE_FIRST",
      c_write_mode_b => "WRITE_FIRST",
      c_write_width_a => 18,
      c_write_width_b => 18,
      c_xdevicefamily => "virtex5"
    );
-- synthesis translate_on
BEGIN
-- synthesis translate_off
U0 : wrapped_bmg_72_031b3366e458494d
  PORT MAP (
    clka => clka,
    ena => ena,
    addra => addra,
    douta => douta
  );
-- synthesis translate_on

END bmg_72_031b3366e458494d_a;
--------------------------------------------------------------------------------
--    This file is owned and controlled by Xilinx and must be used solely     --
--    for design, simulation, implementation and creation of design files     --
--    limited to Xilinx devices or technologies. Use with non-Xilinx          --
--    devices or technologies is expressly prohibited and immediately         --
--    terminates your license.                                                --
--                                                                            --
--    XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" SOLELY    --
--    FOR USE IN DEVELOPING PROGRAMS AND SOLUTIONS FOR XILINX DEVICES.  BY    --
--    PROVIDING THIS DESIGN, CODE, OR INFORMATION AS ONE POSSIBLE             --
--    IMPLEMENTATION OF THIS FEATURE, APPLICATION OR STANDARD, XILINX IS      --
--    MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION IS FREE FROM ANY      --
--    CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE FOR OBTAINING ANY       --
--    RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.  XILINX EXPRESSLY       --
--    DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO THE ADEQUACY OF THE   --
--    IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OR          --
--    REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE FROM CLAIMS OF         --
--    INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A   --
--    PARTICULAR PURPOSE.                                                     --
--                                                                            --
--    Xilinx products are not intended for use in life support appliances,    --
--    devices, or systems.  Use in such applications are expressly            --
--    prohibited.                                                             --
--                                                                            --
--    (c) Copyright 1995-2014 Xilinx, Inc.                                    --
--    All rights reserved.                                                    --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
-- You must compile the wrapper file bmg_72_4394a065975be75e.vhd when simulating
-- the core, bmg_72_4394a065975be75e. When compiling the wrapper file, be sure to
-- reference the XilinxCoreLib VHDL simulation library. For detailed
-- instructions, please refer to the "CORE Generator Help".

-- The synthesis directives "translate_off/translate_on" specified
-- below are supported by Xilinx, Mentor Graphics and Synplicity
-- synthesis tools. Ensure they are correct for your synthesis tool(s).

LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
-- synthesis translate_off
LIBRARY XilinxCoreLib;
-- synthesis translate_on
ENTITY bmg_72_4394a065975be75e IS
  PORT (
    clka : IN STD_LOGIC;
    ena : IN STD_LOGIC;
    addra : IN STD_LOGIC_VECTOR(2 DOWNTO 0);
    douta : OUT STD_LOGIC_VECTOR(17 DOWNTO 0)
  );
END bmg_72_4394a065975be75e;

ARCHITECTURE bmg_72_4394a065975be75e_a OF bmg_72_4394a065975be75e IS
-- synthesis translate_off
COMPONENT wrapped_bmg_72_4394a065975be75e
  PORT (
    clka : IN STD_LOGIC;
    ena : IN STD_LOGIC;
    addra : IN STD_LOGIC_VECTOR(2 DOWNTO 0);
    douta : OUT STD_LOGIC_VECTOR(17 DOWNTO 0)
  );
END COMPONENT;

-- Configuration specification
  FOR ALL : wrapped_bmg_72_4394a065975be75e USE ENTITY XilinxCoreLib.blk_mem_gen_v7_2(behavioral)
    GENERIC MAP (
      c_addra_width => 3,
      c_addrb_width => 3,
      c_algorithm => 1,
      c_axi_id_width => 4,
      c_axi_slave_type => 0,
      c_axi_type => 1,
      c_byte_size => 9,
      c_common_clk => 0,
      c_default_data => "0",
      c_disable_warn_bhv_coll => 0,
      c_disable_warn_bhv_range => 0,
      c_enable_32bit_address => 0,
      c_family => "virtex5",
      c_has_axi_id => 0,
      c_has_ena => 1,
      c_has_enb => 0,
      c_has_injecterr => 0,
      c_has_mem_output_regs_a => 1,
      c_has_mem_output_regs_b => 0,
      c_has_mux_output_regs_a => 0,
      c_has_mux_output_regs_b => 0,
      c_has_regcea => 0,
      c_has_regceb => 0,
      c_has_rsta => 0,
      c_has_rstb => 0,
      c_has_softecc_input_regs_a => 0,
      c_has_softecc_output_regs_b => 0,
      c_init_file_name => "bmg_72_4394a065975be75e.mif",
      c_inita_val => "0",
      c_initb_val => "0",
      c_interface_type => 0,
      c_load_init_file => 1,
      c_mem_type => 3,
      c_mux_pipeline_stages => 0,
      c_prim_type => 1,
      c_read_depth_a => 8,
      c_read_depth_b => 8,
      c_read_width_a => 18,
      c_read_width_b => 18,
      c_rst_priority_a => "CE",
      c_rst_priority_b => "CE",
      c_rst_type => "SYNC",
      c_rstram_a => 0,
      c_rstram_b => 0,
      c_sim_collision_check => "ALL",
      c_use_byte_wea => 0,
      c_use_byte_web => 0,
      c_use_default_data => 0,
      c_use_ecc => 0,
      c_use_softecc => 0,
      c_wea_width => 1,
      c_web_width => 1,
      c_write_depth_a => 8,
      c_write_depth_b => 8,
      c_write_mode_a => "WRITE_FIRST",
      c_write_mode_b => "WRITE_FIRST",
      c_write_width_a => 18,
      c_write_width_b => 18,
      c_xdevicefamily => "virtex5"
    );
-- synthesis translate_on
BEGIN
-- synthesis translate_off
U0 : wrapped_bmg_72_4394a065975be75e
  PORT MAP (
    clka => clka,
    ena => ena,
    addra => addra,
    douta => douta
  );
-- synthesis translate_on

END bmg_72_4394a065975be75e_a;
--------------------------------------------------------------------------------
--    This file is owned and controlled by Xilinx and must be used solely     --
--    for design, simulation, implementation and creation of design files     --
--    limited to Xilinx devices or technologies. Use with non-Xilinx          --
--    devices or technologies is expressly prohibited and immediately         --
--    terminates your license.                                                --
--                                                                            --
--    XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" SOLELY    --
--    FOR USE IN DEVELOPING PROGRAMS AND SOLUTIONS FOR XILINX DEVICES.  BY    --
--    PROVIDING THIS DESIGN, CODE, OR INFORMATION AS ONE POSSIBLE             --
--    IMPLEMENTATION OF THIS FEATURE, APPLICATION OR STANDARD, XILINX IS      --
--    MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION IS FREE FROM ANY      --
--    CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE FOR OBTAINING ANY       --
--    RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.  XILINX EXPRESSLY       --
--    DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO THE ADEQUACY OF THE   --
--    IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OR          --
--    REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE FROM CLAIMS OF         --
--    INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A   --
--    PARTICULAR PURPOSE.                                                     --
--                                                                            --
--    Xilinx products are not intended for use in life support appliances,    --
--    devices, or systems.  Use in such applications are expressly            --
--    prohibited.                                                             --
--                                                                            --
--    (c) Copyright 1995-2014 Xilinx, Inc.                                    --
--    All rights reserved.                                                    --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
-- You must compile the wrapper file cntr_11_0_68c512538c59954a.vhd when simulating
-- the core, cntr_11_0_68c512538c59954a. When compiling the wrapper file, be sure to
-- reference the XilinxCoreLib VHDL simulation library. For detailed
-- instructions, please refer to the "CORE Generator Help".

-- The synthesis directives "translate_off/translate_on" specified
-- below are supported by Xilinx, Mentor Graphics and Synplicity
-- synthesis tools. Ensure they are correct for your synthesis tool(s).

LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
-- synthesis translate_off
LIBRARY XilinxCoreLib;
-- synthesis translate_on
ENTITY cntr_11_0_68c512538c59954a IS
  PORT (
    clk : IN STD_LOGIC;
    ce : IN STD_LOGIC;
    sinit : IN STD_LOGIC;
    q : OUT STD_LOGIC_VECTOR(63 DOWNTO 0)
  );
END cntr_11_0_68c512538c59954a;

ARCHITECTURE cntr_11_0_68c512538c59954a_a OF cntr_11_0_68c512538c59954a IS
-- synthesis translate_off
COMPONENT wrapped_cntr_11_0_68c512538c59954a
  PORT (
    clk : IN STD_LOGIC;
    ce : IN STD_LOGIC;
    sinit : IN STD_LOGIC;
    q : OUT STD_LOGIC_VECTOR(63 DOWNTO 0)
  );
END COMPONENT;

-- Configuration specification
  FOR ALL : wrapped_cntr_11_0_68c512538c59954a USE ENTITY XilinxCoreLib.c_counter_binary_v11_0(behavioral)
    GENERIC MAP (
      c_ainit_val => "0",
      c_ce_overrides_sync => 0,
      c_count_by => "1",
      c_count_mode => 0,
      c_count_to => "1",
      c_fb_latency => 0,
      c_has_ce => 1,
      c_has_load => 0,
      c_has_sclr => 0,
      c_has_sinit => 1,
      c_has_sset => 0,
      c_has_thresh0 => 0,
      c_implementation => 0,
      c_latency => 1,
      c_load_low => 0,
      c_restrict_count => 0,
      c_sclr_overrides_sset => 1,
      c_sinit_val => "0",
      c_thresh0_value => "1",
      c_verbosity => 0,
      c_width => 64,
      c_xdevicefamily => "virtex5"
    );
-- synthesis translate_on
BEGIN
-- synthesis translate_off
U0 : wrapped_cntr_11_0_68c512538c59954a
  PORT MAP (
    clk => clk,
    ce => ce,
    sinit => sinit,
    q => q
  );
-- synthesis translate_on

END cntr_11_0_68c512538c59954a_a;
--------------------------------------------------------------------------------
--    This file is owned and controlled by Xilinx and must be used solely     --
--    for design, simulation, implementation and creation of design files     --
--    limited to Xilinx devices or technologies. Use with non-Xilinx          --
--    devices or technologies is expressly prohibited and immediately         --
--    terminates your license.                                                --
--                                                                            --
--    XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" SOLELY    --
--    FOR USE IN DEVELOPING PROGRAMS AND SOLUTIONS FOR XILINX DEVICES.  BY    --
--    PROVIDING THIS DESIGN, CODE, OR INFORMATION AS ONE POSSIBLE             --
--    IMPLEMENTATION OF THIS FEATURE, APPLICATION OR STANDARD, XILINX IS      --
--    MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION IS FREE FROM ANY      --
--    CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE FOR OBTAINING ANY       --
--    RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.  XILINX EXPRESSLY       --
--    DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO THE ADEQUACY OF THE   --
--    IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OR          --
--    REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE FROM CLAIMS OF         --
--    INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A   --
--    PARTICULAR PURPOSE.                                                     --
--                                                                            --
--    Xilinx products are not intended for use in life support appliances,    --
--    devices, or systems.  Use in such applications are expressly            --
--    prohibited.                                                             --
--                                                                            --
--    (c) Copyright 1995-2014 Xilinx, Inc.                                    --
--    All rights reserved.                                                    --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
-- You must compile the wrapper file bmg_72_ddcdd9bb5f78a2a9.vhd when simulating
-- the core, bmg_72_ddcdd9bb5f78a2a9. When compiling the wrapper file, be sure to
-- reference the XilinxCoreLib VHDL simulation library. For detailed
-- instructions, please refer to the "CORE Generator Help".

-- The synthesis directives "translate_off/translate_on" specified
-- below are supported by Xilinx, Mentor Graphics and Synplicity
-- synthesis tools. Ensure they are correct for your synthesis tool(s).

LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
-- synthesis translate_off
LIBRARY XilinxCoreLib;
-- synthesis translate_on
ENTITY bmg_72_ddcdd9bb5f78a2a9 IS
  PORT (
    clka : IN STD_LOGIC;
    ena : IN STD_LOGIC;
    wea : IN STD_LOGIC_VECTOR(0 DOWNTO 0);
    addra : IN STD_LOGIC_VECTOR(10 DOWNTO 0);
    dina : IN STD_LOGIC_VECTOR(35 DOWNTO 0);
    douta : OUT STD_LOGIC_VECTOR(35 DOWNTO 0)
  );
END bmg_72_ddcdd9bb5f78a2a9;

ARCHITECTURE bmg_72_ddcdd9bb5f78a2a9_a OF bmg_72_ddcdd9bb5f78a2a9 IS
-- synthesis translate_off
COMPONENT wrapped_bmg_72_ddcdd9bb5f78a2a9
  PORT (
    clka : IN STD_LOGIC;
    ena : IN STD_LOGIC;
    wea : IN STD_LOGIC_VECTOR(0 DOWNTO 0);
    addra : IN STD_LOGIC_VECTOR(10 DOWNTO 0);
    dina : IN STD_LOGIC_VECTOR(35 DOWNTO 0);
    douta : OUT STD_LOGIC_VECTOR(35 DOWNTO 0)
  );
END COMPONENT;

-- Configuration specification
  FOR ALL : wrapped_bmg_72_ddcdd9bb5f78a2a9 USE ENTITY XilinxCoreLib.blk_mem_gen_v7_2(behavioral)
    GENERIC MAP (
      c_addra_width => 11,
      c_addrb_width => 11,
      c_algorithm => 1,
      c_axi_id_width => 4,
      c_axi_slave_type => 0,
      c_axi_type => 1,
      c_byte_size => 9,
      c_common_clk => 0,
      c_default_data => "0",
      c_disable_warn_bhv_coll => 0,
      c_disable_warn_bhv_range => 0,
      c_enable_32bit_address => 0,
      c_family => "virtex5",
      c_has_axi_id => 0,
      c_has_ena => 1,
      c_has_enb => 0,
      c_has_injecterr => 0,
      c_has_mem_output_regs_a => 1,
      c_has_mem_output_regs_b => 0,
      c_has_mux_output_regs_a => 0,
      c_has_mux_output_regs_b => 0,
      c_has_regcea => 0,
      c_has_regceb => 0,
      c_has_rsta => 0,
      c_has_rstb => 0,
      c_has_softecc_input_regs_a => 0,
      c_has_softecc_output_regs_b => 0,
      c_init_file_name => "bmg_72_ddcdd9bb5f78a2a9.mif",
      c_inita_val => "0",
      c_initb_val => "0",
      c_interface_type => 0,
      c_load_init_file => 1,
      c_mem_type => 0,
      c_mux_pipeline_stages => 0,
      c_prim_type => 1,
      c_read_depth_a => 2048,
      c_read_depth_b => 2048,
      c_read_width_a => 36,
      c_read_width_b => 36,
      c_rst_priority_a => "CE",
      c_rst_priority_b => "CE",
      c_rst_type => "SYNC",
      c_rstram_a => 0,
      c_rstram_b => 0,
      c_sim_collision_check => "ALL",
      c_use_byte_wea => 0,
      c_use_byte_web => 0,
      c_use_default_data => 0,
      c_use_ecc => 0,
      c_use_softecc => 0,
      c_wea_width => 1,
      c_web_width => 1,
      c_write_depth_a => 2048,
      c_write_depth_b => 2048,
      c_write_mode_a => "READ_FIRST",
      c_write_mode_b => "WRITE_FIRST",
      c_write_width_a => 36,
      c_write_width_b => 36,
      c_xdevicefamily => "virtex5"
    );
-- synthesis translate_on
BEGIN
-- synthesis translate_off
U0 : wrapped_bmg_72_ddcdd9bb5f78a2a9
  PORT MAP (
    clka => clka,
    ena => ena,
    wea => wea,
    addra => addra,
    dina => dina,
    douta => douta
  );
-- synthesis translate_on

END bmg_72_ddcdd9bb5f78a2a9_a;
--------------------------------------------------------------------------------
--    This file is owned and controlled by Xilinx and must be used solely     --
--    for design, simulation, implementation and creation of design files     --
--    limited to Xilinx devices or technologies. Use with non-Xilinx          --
--    devices or technologies is expressly prohibited and immediately         --
--    terminates your license.                                                --
--                                                                            --
--    XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" SOLELY    --
--    FOR USE IN DEVELOPING PROGRAMS AND SOLUTIONS FOR XILINX DEVICES.  BY    --
--    PROVIDING THIS DESIGN, CODE, OR INFORMATION AS ONE POSSIBLE             --
--    IMPLEMENTATION OF THIS FEATURE, APPLICATION OR STANDARD, XILINX IS      --
--    MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION IS FREE FROM ANY      --
--    CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE FOR OBTAINING ANY       --
--    RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.  XILINX EXPRESSLY       --
--    DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO THE ADEQUACY OF THE   --
--    IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OR          --
--    REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE FROM CLAIMS OF         --
--    INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A   --
--    PARTICULAR PURPOSE.                                                     --
--                                                                            --
--    Xilinx products are not intended for use in life support appliances,    --
--    devices, or systems.  Use in such applications are expressly            --
--    prohibited.                                                             --
--                                                                            --
--    (c) Copyright 1995-2014 Xilinx, Inc.                                    --
--    All rights reserved.                                                    --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
-- You must compile the wrapper file addsb_11_0_defe95552cb97446.vhd when simulating
-- the core, addsb_11_0_defe95552cb97446. When compiling the wrapper file, be sure to
-- reference the XilinxCoreLib VHDL simulation library. For detailed
-- instructions, please refer to the "CORE Generator Help".

-- The synthesis directives "translate_off/translate_on" specified
-- below are supported by Xilinx, Mentor Graphics and Synplicity
-- synthesis tools. Ensure they are correct for your synthesis tool(s).

LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
-- synthesis translate_off
LIBRARY XilinxCoreLib;
-- synthesis translate_on
ENTITY addsb_11_0_defe95552cb97446 IS
  PORT (
    a : IN STD_LOGIC_VECTOR(34 DOWNTO 0);
    b : IN STD_LOGIC_VECTOR(34 DOWNTO 0);
    clk : IN STD_LOGIC;
    ce : IN STD_LOGIC;
    s : OUT STD_LOGIC_VECTOR(34 DOWNTO 0)
  );
END addsb_11_0_defe95552cb97446;

ARCHITECTURE addsb_11_0_defe95552cb97446_a OF addsb_11_0_defe95552cb97446 IS
-- synthesis translate_off
COMPONENT wrapped_addsb_11_0_defe95552cb97446
  PORT (
    a : IN STD_LOGIC_VECTOR(34 DOWNTO 0);
    b : IN STD_LOGIC_VECTOR(34 DOWNTO 0);
    clk : IN STD_LOGIC;
    ce : IN STD_LOGIC;
    s : OUT STD_LOGIC_VECTOR(34 DOWNTO 0)
  );
END COMPONENT;

-- Configuration specification
  FOR ALL : wrapped_addsb_11_0_defe95552cb97446 USE ENTITY XilinxCoreLib.c_addsub_v11_0(behavioral)
    GENERIC MAP (
      c_a_type => 0,
      c_a_width => 35,
      c_add_mode => 0,
      c_ainit_val => "0",
      c_b_constant => 0,
      c_b_type => 0,
      c_b_value => "00000000000000000000000000000000000",
      c_b_width => 35,
      c_borrow_low => 1,
      c_bypass_low => 0,
      c_ce_overrides_bypass => 1,
      c_ce_overrides_sclr => 0,
      c_has_bypass => 0,
      c_has_c_in => 0,
      c_has_c_out => 0,
      c_has_ce => 1,
      c_has_sclr => 0,
      c_has_sinit => 0,
      c_has_sset => 0,
      c_implementation => 1,
      c_latency => 1,
      c_out_width => 35,
      c_sclr_overrides_sset => 1,
      c_sinit_val => "0",
      c_verbosity => 0,
      c_xdevicefamily => "virtex5"
    );
-- synthesis translate_on
BEGIN
-- synthesis translate_off
U0 : wrapped_addsb_11_0_defe95552cb97446
  PORT MAP (
    a => a,
    b => b,
    clk => clk,
    ce => ce,
    s => s
  );
-- synthesis translate_on

END addsb_11_0_defe95552cb97446_a;
--------------------------------------------------------------------------------
--    This file is owned and controlled by Xilinx and must be used solely     --
--    for design, simulation, implementation and creation of design files     --
--    limited to Xilinx devices or technologies. Use with non-Xilinx          --
--    devices or technologies is expressly prohibited and immediately         --
--    terminates your license.                                                --
--                                                                            --
--    XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" SOLELY    --
--    FOR USE IN DEVELOPING PROGRAMS AND SOLUTIONS FOR XILINX DEVICES.  BY    --
--    PROVIDING THIS DESIGN, CODE, OR INFORMATION AS ONE POSSIBLE             --
--    IMPLEMENTATION OF THIS FEATURE, APPLICATION OR STANDARD, XILINX IS      --
--    MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION IS FREE FROM ANY      --
--    CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE FOR OBTAINING ANY       --
--    RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.  XILINX EXPRESSLY       --
--    DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO THE ADEQUACY OF THE   --
--    IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OR          --
--    REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE FROM CLAIMS OF         --
--    INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A   --
--    PARTICULAR PURPOSE.                                                     --
--                                                                            --
--    Xilinx products are not intended for use in life support appliances,    --
--    devices, or systems.  Use in such applications are expressly            --
--    prohibited.                                                             --
--                                                                            --
--    (c) Copyright 1995-2014 Xilinx, Inc.                                    --
--    All rights reserved.                                                    --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
-- You must compile the wrapper file cntr_11_0_9cad7c433fbdcec9.vhd when simulating
-- the core, cntr_11_0_9cad7c433fbdcec9. When compiling the wrapper file, be sure to
-- reference the XilinxCoreLib VHDL simulation library. For detailed
-- instructions, please refer to the "CORE Generator Help".

-- The synthesis directives "translate_off/translate_on" specified
-- below are supported by Xilinx, Mentor Graphics and Synplicity
-- synthesis tools. Ensure they are correct for your synthesis tool(s).

LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
-- synthesis translate_off
LIBRARY XilinxCoreLib;
-- synthesis translate_on
ENTITY cntr_11_0_9cad7c433fbdcec9 IS
  PORT (
    clk : IN STD_LOGIC;
    ce : IN STD_LOGIC;
    sinit : IN STD_LOGIC;
    q : OUT STD_LOGIC_VECTOR(30 DOWNTO 0)
  );
END cntr_11_0_9cad7c433fbdcec9;

ARCHITECTURE cntr_11_0_9cad7c433fbdcec9_a OF cntr_11_0_9cad7c433fbdcec9 IS
-- synthesis translate_off
COMPONENT wrapped_cntr_11_0_9cad7c433fbdcec9
  PORT (
    clk : IN STD_LOGIC;
    ce : IN STD_LOGIC;
    sinit : IN STD_LOGIC;
    q : OUT STD_LOGIC_VECTOR(30 DOWNTO 0)
  );
END COMPONENT;

-- Configuration specification
  FOR ALL : wrapped_cntr_11_0_9cad7c433fbdcec9 USE ENTITY XilinxCoreLib.c_counter_binary_v11_0(behavioral)
    GENERIC MAP (
      c_ainit_val => "0",
      c_ce_overrides_sync => 0,
      c_count_by => "1",
      c_count_mode => 0,
      c_count_to => "1",
      c_fb_latency => 0,
      c_has_ce => 1,
      c_has_load => 0,
      c_has_sclr => 0,
      c_has_sinit => 1,
      c_has_sset => 0,
      c_has_thresh0 => 0,
      c_implementation => 0,
      c_latency => 1,
      c_load_low => 0,
      c_restrict_count => 0,
      c_sclr_overrides_sset => 1,
      c_sinit_val => "0",
      c_thresh0_value => "1",
      c_verbosity => 0,
      c_width => 31,
      c_xdevicefamily => "virtex5"
    );
-- synthesis translate_on
BEGIN
-- synthesis translate_off
U0 : wrapped_cntr_11_0_9cad7c433fbdcec9
  PORT MAP (
    clk => clk,
    ce => ce,
    sinit => sinit,
    q => q
  );
-- synthesis translate_on

END cntr_11_0_9cad7c433fbdcec9_a;
--------------------------------------------------------------------------------
--    This file is owned and controlled by Xilinx and must be used solely     --
--    for design, simulation, implementation and creation of design files     --
--    limited to Xilinx devices or technologies. Use with non-Xilinx          --
--    devices or technologies is expressly prohibited and immediately         --
--    terminates your license.                                                --
--                                                                            --
--    XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" SOLELY    --
--    FOR USE IN DEVELOPING PROGRAMS AND SOLUTIONS FOR XILINX DEVICES.  BY    --
--    PROVIDING THIS DESIGN, CODE, OR INFORMATION AS ONE POSSIBLE             --
--    IMPLEMENTATION OF THIS FEATURE, APPLICATION OR STANDARD, XILINX IS      --
--    MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION IS FREE FROM ANY      --
--    CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE FOR OBTAINING ANY       --
--    RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.  XILINX EXPRESSLY       --
--    DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO THE ADEQUACY OF THE   --
--    IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OR          --
--    REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE FROM CLAIMS OF         --
--    INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A   --
--    PARTICULAR PURPOSE.                                                     --
--                                                                            --
--    Xilinx products are not intended for use in life support appliances,    --
--    devices, or systems.  Use in such applications are expressly            --
--    prohibited.                                                             --
--                                                                            --
--    (c) Copyright 1995-2014 Xilinx, Inc.                                    --
--    All rights reserved.                                                    --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
-- You must compile the wrapper file cntr_11_0_e16427883c4a8980.vhd when simulating
-- the core, cntr_11_0_e16427883c4a8980. When compiling the wrapper file, be sure to
-- reference the XilinxCoreLib VHDL simulation library. For detailed
-- instructions, please refer to the "CORE Generator Help".

-- The synthesis directives "translate_off/translate_on" specified
-- below are supported by Xilinx, Mentor Graphics and Synplicity
-- synthesis tools. Ensure they are correct for your synthesis tool(s).

LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
-- synthesis translate_off
LIBRARY XilinxCoreLib;
-- synthesis translate_on
ENTITY cntr_11_0_e16427883c4a8980 IS
  PORT (
    clk : IN STD_LOGIC;
    ce : IN STD_LOGIC;
    sinit : IN STD_LOGIC;
    load : IN STD_LOGIC;
    l : IN STD_LOGIC_VECTOR(13 DOWNTO 0);
    q : OUT STD_LOGIC_VECTOR(13 DOWNTO 0)
  );
END cntr_11_0_e16427883c4a8980;

ARCHITECTURE cntr_11_0_e16427883c4a8980_a OF cntr_11_0_e16427883c4a8980 IS
-- synthesis translate_off
COMPONENT wrapped_cntr_11_0_e16427883c4a8980
  PORT (
    clk : IN STD_LOGIC;
    ce : IN STD_LOGIC;
    sinit : IN STD_LOGIC;
    load : IN STD_LOGIC;
    l : IN STD_LOGIC_VECTOR(13 DOWNTO 0);
    q : OUT STD_LOGIC_VECTOR(13 DOWNTO 0)
  );
END COMPONENT;

-- Configuration specification
  FOR ALL : wrapped_cntr_11_0_e16427883c4a8980 USE ENTITY XilinxCoreLib.c_counter_binary_v11_0(behavioral)
    GENERIC MAP (
      c_ainit_val => "0",
      c_ce_overrides_sync => 0,
      c_count_by => "1",
      c_count_mode => 1,
      c_count_to => "1",
      c_fb_latency => 0,
      c_has_ce => 1,
      c_has_load => 1,
      c_has_sclr => 0,
      c_has_sinit => 1,
      c_has_sset => 0,
      c_has_thresh0 => 0,
      c_implementation => 0,
      c_latency => 1,
      c_load_low => 0,
      c_restrict_count => 0,
      c_sclr_overrides_sset => 1,
      c_sinit_val => "0",
      c_thresh0_value => "1",
      c_verbosity => 0,
      c_width => 14,
      c_xdevicefamily => "virtex5"
    );
-- synthesis translate_on
BEGIN
-- synthesis translate_off
U0 : wrapped_cntr_11_0_e16427883c4a8980
  PORT MAP (
    clk => clk,
    ce => ce,
    sinit => sinit,
    load => load,
    l => l,
    q => q
  );
-- synthesis translate_on

END cntr_11_0_e16427883c4a8980_a;
--------------------------------------------------------------------------------
--    This file is owned and controlled by Xilinx and must be used solely     --
--    for design, simulation, implementation and creation of design files     --
--    limited to Xilinx devices or technologies. Use with non-Xilinx          --
--    devices or technologies is expressly prohibited and immediately         --
--    terminates your license.                                                --
--                                                                            --
--    XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" SOLELY    --
--    FOR USE IN DEVELOPING PROGRAMS AND SOLUTIONS FOR XILINX DEVICES.  BY    --
--    PROVIDING THIS DESIGN, CODE, OR INFORMATION AS ONE POSSIBLE             --
--    IMPLEMENTATION OF THIS FEATURE, APPLICATION OR STANDARD, XILINX IS      --
--    MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION IS FREE FROM ANY      --
--    CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE FOR OBTAINING ANY       --
--    RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.  XILINX EXPRESSLY       --
--    DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO THE ADEQUACY OF THE   --
--    IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OR          --
--    REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE FROM CLAIMS OF         --
--    INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A   --
--    PARTICULAR PURPOSE.                                                     --
--                                                                            --
--    Xilinx products are not intended for use in life support appliances,    --
--    devices, or systems.  Use in such applications are expressly            --
--    prohibited.                                                             --
--                                                                            --
--    (c) Copyright 1995-2014 Xilinx, Inc.                                    --
--    All rights reserved.                                                    --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
-- You must compile the wrapper file cntr_11_0_d98da069fc1111dd.vhd when simulating
-- the core, cntr_11_0_d98da069fc1111dd. When compiling the wrapper file, be sure to
-- reference the XilinxCoreLib VHDL simulation library. For detailed
-- instructions, please refer to the "CORE Generator Help".

-- The synthesis directives "translate_off/translate_on" specified
-- below are supported by Xilinx, Mentor Graphics and Synplicity
-- synthesis tools. Ensure they are correct for your synthesis tool(s).

LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
-- synthesis translate_off
LIBRARY XilinxCoreLib;
-- synthesis translate_on
ENTITY cntr_11_0_d98da069fc1111dd IS
  PORT (
    clk : IN STD_LOGIC;
    ce : IN STD_LOGIC;
    sinit : IN STD_LOGIC;
    up : IN STD_LOGIC;
    q : OUT STD_LOGIC_VECTOR(7 DOWNTO 0)
  );
END cntr_11_0_d98da069fc1111dd;

ARCHITECTURE cntr_11_0_d98da069fc1111dd_a OF cntr_11_0_d98da069fc1111dd IS
-- synthesis translate_off
COMPONENT wrapped_cntr_11_0_d98da069fc1111dd
  PORT (
    clk : IN STD_LOGIC;
    ce : IN STD_LOGIC;
    sinit : IN STD_LOGIC;
    up : IN STD_LOGIC;
    q : OUT STD_LOGIC_VECTOR(7 DOWNTO 0)
  );
END COMPONENT;

-- Configuration specification
  FOR ALL : wrapped_cntr_11_0_d98da069fc1111dd USE ENTITY XilinxCoreLib.c_counter_binary_v11_0(behavioral)
    GENERIC MAP (
      c_ainit_val => "0",
      c_ce_overrides_sync => 0,
      c_count_by => "1",
      c_count_mode => 2,
      c_count_to => "1",
      c_fb_latency => 0,
      c_has_ce => 1,
      c_has_load => 0,
      c_has_sclr => 0,
      c_has_sinit => 1,
      c_has_sset => 0,
      c_has_thresh0 => 0,
      c_implementation => 0,
      c_latency => 1,
      c_load_low => 0,
      c_restrict_count => 0,
      c_sclr_overrides_sset => 1,
      c_sinit_val => "0",
      c_thresh0_value => "1",
      c_verbosity => 0,
      c_width => 8,
      c_xdevicefamily => "virtex5"
    );
-- synthesis translate_on
BEGIN
-- synthesis translate_off
U0 : wrapped_cntr_11_0_d98da069fc1111dd
  PORT MAP (
    clk => clk,
    ce => ce,
    sinit => sinit,
    up => up,
    q => q
  );
-- synthesis translate_on

END cntr_11_0_d98da069fc1111dd_a;
--------------------------------------------------------------------------------
--    This file is owned and controlled by Xilinx and must be used solely     --
--    for design, simulation, implementation and creation of design files     --
--    limited to Xilinx devices or technologies. Use with non-Xilinx          --
--    devices or technologies is expressly prohibited and immediately         --
--    terminates your license.                                                --
--                                                                            --
--    XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" SOLELY    --
--    FOR USE IN DEVELOPING PROGRAMS AND SOLUTIONS FOR XILINX DEVICES.  BY    --
--    PROVIDING THIS DESIGN, CODE, OR INFORMATION AS ONE POSSIBLE             --
--    IMPLEMENTATION OF THIS FEATURE, APPLICATION OR STANDARD, XILINX IS      --
--    MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION IS FREE FROM ANY      --
--    CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE FOR OBTAINING ANY       --
--    RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.  XILINX EXPRESSLY       --
--    DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO THE ADEQUACY OF THE   --
--    IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OR          --
--    REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE FROM CLAIMS OF         --
--    INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A   --
--    PARTICULAR PURPOSE.                                                     --
--                                                                            --
--    Xilinx products are not intended for use in life support appliances,    --
--    devices, or systems.  Use in such applications are expressly            --
--    prohibited.                                                             --
--                                                                            --
--    (c) Copyright 1995-2014 Xilinx, Inc.                                    --
--    All rights reserved.                                                    --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
-- You must compile the wrapper file bmg_72_76e1be4e7480a75f.vhd when simulating
-- the core, bmg_72_76e1be4e7480a75f. When compiling the wrapper file, be sure to
-- reference the XilinxCoreLib VHDL simulation library. For detailed
-- instructions, please refer to the "CORE Generator Help".

-- The synthesis directives "translate_off/translate_on" specified
-- below are supported by Xilinx, Mentor Graphics and Synplicity
-- synthesis tools. Ensure they are correct for your synthesis tool(s).

LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
-- synthesis translate_off
LIBRARY XilinxCoreLib;
-- synthesis translate_on
ENTITY bmg_72_76e1be4e7480a75f IS
  PORT (
    clka : IN STD_LOGIC;
    ena : IN STD_LOGIC;
    addra : IN STD_LOGIC_VECTOR(6 DOWNTO 0);
    douta : OUT STD_LOGIC_VECTOR(17 DOWNTO 0)
  );
END bmg_72_76e1be4e7480a75f;

ARCHITECTURE bmg_72_76e1be4e7480a75f_a OF bmg_72_76e1be4e7480a75f IS
-- synthesis translate_off
COMPONENT wrapped_bmg_72_76e1be4e7480a75f
  PORT (
    clka : IN STD_LOGIC;
    ena : IN STD_LOGIC;
    addra : IN STD_LOGIC_VECTOR(6 DOWNTO 0);
    douta : OUT STD_LOGIC_VECTOR(17 DOWNTO 0)
  );
END COMPONENT;

-- Configuration specification
  FOR ALL : wrapped_bmg_72_76e1be4e7480a75f USE ENTITY XilinxCoreLib.blk_mem_gen_v7_2(behavioral)
    GENERIC MAP (
      c_addra_width => 7,
      c_addrb_width => 7,
      c_algorithm => 1,
      c_axi_id_width => 4,
      c_axi_slave_type => 0,
      c_axi_type => 1,
      c_byte_size => 9,
      c_common_clk => 0,
      c_default_data => "0",
      c_disable_warn_bhv_coll => 0,
      c_disable_warn_bhv_range => 0,
      c_enable_32bit_address => 0,
      c_family => "virtex5",
      c_has_axi_id => 0,
      c_has_ena => 1,
      c_has_enb => 0,
      c_has_injecterr => 0,
      c_has_mem_output_regs_a => 1,
      c_has_mem_output_regs_b => 0,
      c_has_mux_output_regs_a => 0,
      c_has_mux_output_regs_b => 0,
      c_has_regcea => 0,
      c_has_regceb => 0,
      c_has_rsta => 0,
      c_has_rstb => 0,
      c_has_softecc_input_regs_a => 0,
      c_has_softecc_output_regs_b => 0,
      c_init_file_name => "bmg_72_76e1be4e7480a75f.mif",
      c_inita_val => "0",
      c_initb_val => "0",
      c_interface_type => 0,
      c_load_init_file => 1,
      c_mem_type => 3,
      c_mux_pipeline_stages => 0,
      c_prim_type => 1,
      c_read_depth_a => 128,
      c_read_depth_b => 128,
      c_read_width_a => 18,
      c_read_width_b => 18,
      c_rst_priority_a => "CE",
      c_rst_priority_b => "CE",
      c_rst_type => "SYNC",
      c_rstram_a => 0,
      c_rstram_b => 0,
      c_sim_collision_check => "ALL",
      c_use_byte_wea => 0,
      c_use_byte_web => 0,
      c_use_default_data => 0,
      c_use_ecc => 0,
      c_use_softecc => 0,
      c_wea_width => 1,
      c_web_width => 1,
      c_write_depth_a => 128,
      c_write_depth_b => 128,
      c_write_mode_a => "WRITE_FIRST",
      c_write_mode_b => "WRITE_FIRST",
      c_write_width_a => 18,
      c_write_width_b => 18,
      c_xdevicefamily => "virtex5"
    );
-- synthesis translate_on
BEGIN
-- synthesis translate_off
U0 : wrapped_bmg_72_76e1be4e7480a75f
  PORT MAP (
    clka => clka,
    ena => ena,
    addra => addra,
    douta => douta
  );
-- synthesis translate_on

END bmg_72_76e1be4e7480a75f_a;
--------------------------------------------------------------------------------
--    This file is owned and controlled by Xilinx and must be used solely     --
--    for design, simulation, implementation and creation of design files     --
--    limited to Xilinx devices or technologies. Use with non-Xilinx          --
--    devices or technologies is expressly prohibited and immediately         --
--    terminates your license.                                                --
--                                                                            --
--    XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" SOLELY    --
--    FOR USE IN DEVELOPING PROGRAMS AND SOLUTIONS FOR XILINX DEVICES.  BY    --
--    PROVIDING THIS DESIGN, CODE, OR INFORMATION AS ONE POSSIBLE             --
--    IMPLEMENTATION OF THIS FEATURE, APPLICATION OR STANDARD, XILINX IS      --
--    MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION IS FREE FROM ANY      --
--    CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE FOR OBTAINING ANY       --
--    RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.  XILINX EXPRESSLY       --
--    DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO THE ADEQUACY OF THE   --
--    IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OR          --
--    REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE FROM CLAIMS OF         --
--    INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A   --
--    PARTICULAR PURPOSE.                                                     --
--                                                                            --
--    Xilinx products are not intended for use in life support appliances,    --
--    devices, or systems.  Use in such applications are expressly            --
--    prohibited.                                                             --
--                                                                            --
--    (c) Copyright 1995-2014 Xilinx, Inc.                                    --
--    All rights reserved.                                                    --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
-- You must compile the wrapper file cntr_11_0_7eefee4be204e56b.vhd when simulating
-- the core, cntr_11_0_7eefee4be204e56b. When compiling the wrapper file, be sure to
-- reference the XilinxCoreLib VHDL simulation library. For detailed
-- instructions, please refer to the "CORE Generator Help".

-- The synthesis directives "translate_off/translate_on" specified
-- below are supported by Xilinx, Mentor Graphics and Synplicity
-- synthesis tools. Ensure they are correct for your synthesis tool(s).

LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
-- synthesis translate_off
LIBRARY XilinxCoreLib;
-- synthesis translate_on
ENTITY cntr_11_0_7eefee4be204e56b IS
  PORT (
    clk : IN STD_LOGIC;
    ce : IN STD_LOGIC;
    sinit : IN STD_LOGIC;
    load : IN STD_LOGIC;
    l : IN STD_LOGIC_VECTOR(7 DOWNTO 0);
    q : OUT STD_LOGIC_VECTOR(7 DOWNTO 0)
  );
END cntr_11_0_7eefee4be204e56b;

ARCHITECTURE cntr_11_0_7eefee4be204e56b_a OF cntr_11_0_7eefee4be204e56b IS
-- synthesis translate_off
COMPONENT wrapped_cntr_11_0_7eefee4be204e56b
  PORT (
    clk : IN STD_LOGIC;
    ce : IN STD_LOGIC;
    sinit : IN STD_LOGIC;
    load : IN STD_LOGIC;
    l : IN STD_LOGIC_VECTOR(7 DOWNTO 0);
    q : OUT STD_LOGIC_VECTOR(7 DOWNTO 0)
  );
END COMPONENT;

-- Configuration specification
  FOR ALL : wrapped_cntr_11_0_7eefee4be204e56b USE ENTITY XilinxCoreLib.c_counter_binary_v11_0(behavioral)
    GENERIC MAP (
      c_ainit_val => "0",
      c_ce_overrides_sync => 0,
      c_count_by => "1",
      c_count_mode => 1,
      c_count_to => "1",
      c_fb_latency => 0,
      c_has_ce => 1,
      c_has_load => 1,
      c_has_sclr => 0,
      c_has_sinit => 1,
      c_has_sset => 0,
      c_has_thresh0 => 0,
      c_implementation => 0,
      c_latency => 1,
      c_load_low => 0,
      c_restrict_count => 0,
      c_sclr_overrides_sset => 1,
      c_sinit_val => "0",
      c_thresh0_value => "1",
      c_verbosity => 0,
      c_width => 8,
      c_xdevicefamily => "virtex5"
    );
-- synthesis translate_on
BEGIN
-- synthesis translate_off
U0 : wrapped_cntr_11_0_7eefee4be204e56b
  PORT MAP (
    clk => clk,
    ce => ce,
    sinit => sinit,
    load => load,
    l => l,
    q => q
  );
-- synthesis translate_on

END cntr_11_0_7eefee4be204e56b_a;
--------------------------------------------------------------------------------
--    This file is owned and controlled by Xilinx and must be used solely     --
--    for design, simulation, implementation and creation of design files     --
--    limited to Xilinx devices or technologies. Use with non-Xilinx          --
--    devices or technologies is expressly prohibited and immediately         --
--    terminates your license.                                                --
--                                                                            --
--    XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" SOLELY    --
--    FOR USE IN DEVELOPING PROGRAMS AND SOLUTIONS FOR XILINX DEVICES.  BY    --
--    PROVIDING THIS DESIGN, CODE, OR INFORMATION AS ONE POSSIBLE             --
--    IMPLEMENTATION OF THIS FEATURE, APPLICATION OR STANDARD, XILINX IS      --
--    MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION IS FREE FROM ANY      --
--    CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE FOR OBTAINING ANY       --
--    RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.  XILINX EXPRESSLY       --
--    DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO THE ADEQUACY OF THE   --
--    IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OR          --
--    REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE FROM CLAIMS OF         --
--    INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A   --
--    PARTICULAR PURPOSE.                                                     --
--                                                                            --
--    Xilinx products are not intended for use in life support appliances,    --
--    devices, or systems.  Use in such applications are expressly            --
--    prohibited.                                                             --
--                                                                            --
--    (c) Copyright 1995-2014 Xilinx, Inc.                                    --
--    All rights reserved.                                                    --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
-- You must compile the wrapper file dmg_72_9ddb0dccfe86828e.vhd when simulating
-- the core, dmg_72_9ddb0dccfe86828e. When compiling the wrapper file, be sure to
-- reference the XilinxCoreLib VHDL simulation library. For detailed
-- instructions, please refer to the "CORE Generator Help".

-- The synthesis directives "translate_off/translate_on" specified
-- below are supported by Xilinx, Mentor Graphics and Synplicity
-- synthesis tools. Ensure they are correct for your synthesis tool(s).

LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
-- synthesis translate_off
LIBRARY XilinxCoreLib;
-- synthesis translate_on
ENTITY dmg_72_9ddb0dccfe86828e IS
  PORT (
    a : IN STD_LOGIC_VECTOR(5 DOWNTO 0);
    spo : OUT STD_LOGIC_VECTOR(5 DOWNTO 0)
  );
END dmg_72_9ddb0dccfe86828e;

ARCHITECTURE dmg_72_9ddb0dccfe86828e_a OF dmg_72_9ddb0dccfe86828e IS
-- synthesis translate_off
COMPONENT wrapped_dmg_72_9ddb0dccfe86828e
  PORT (
    a : IN STD_LOGIC_VECTOR(5 DOWNTO 0);
    spo : OUT STD_LOGIC_VECTOR(5 DOWNTO 0)
  );
END COMPONENT;

-- Configuration specification
  FOR ALL : wrapped_dmg_72_9ddb0dccfe86828e USE ENTITY XilinxCoreLib.dist_mem_gen_v7_2(behavioral)
    GENERIC MAP (
      c_addr_width => 6,
      c_default_data => "0",
      c_depth => 64,
      c_family => "virtex5",
      c_has_clk => 0,
      c_has_d => 0,
      c_has_dpo => 0,
      c_has_dpra => 0,
      c_has_i_ce => 0,
      c_has_qdpo => 0,
      c_has_qdpo_ce => 0,
      c_has_qdpo_clk => 0,
      c_has_qdpo_rst => 0,
      c_has_qdpo_srst => 0,
      c_has_qspo => 0,
      c_has_qspo_ce => 0,
      c_has_qspo_rst => 0,
      c_has_qspo_srst => 0,
      c_has_spo => 1,
      c_has_spra => 0,
      c_has_we => 0,
      c_mem_init_file => "dmg_72_9ddb0dccfe86828e.mif",
      c_mem_type => 0,
      c_parser_type => 1,
      c_pipeline_stages => 0,
      c_qce_joined => 0,
      c_qualify_we => 0,
      c_read_mif => 1,
      c_reg_a_d_inputs => 0,
      c_reg_dpra_input => 0,
      c_sync_enable => 1,
      c_width => 6
    );
-- synthesis translate_on
BEGIN
-- synthesis translate_off
U0 : wrapped_dmg_72_9ddb0dccfe86828e
  PORT MAP (
    a => a,
    spo => spo
  );
-- synthesis translate_on

END dmg_72_9ddb0dccfe86828e_a;
--------------------------------------------------------------------------------
--    This file is owned and controlled by Xilinx and must be used solely     --
--    for design, simulation, implementation and creation of design files     --
--    limited to Xilinx devices or technologies. Use with non-Xilinx          --
--    devices or technologies is expressly prohibited and immediately         --
--    terminates your license.                                                --
--                                                                            --
--    XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" SOLELY    --
--    FOR USE IN DEVELOPING PROGRAMS AND SOLUTIONS FOR XILINX DEVICES.  BY    --
--    PROVIDING THIS DESIGN, CODE, OR INFORMATION AS ONE POSSIBLE             --
--    IMPLEMENTATION OF THIS FEATURE, APPLICATION OR STANDARD, XILINX IS      --
--    MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION IS FREE FROM ANY      --
--    CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE FOR OBTAINING ANY       --
--    RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.  XILINX EXPRESSLY       --
--    DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO THE ADEQUACY OF THE   --
--    IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OR          --
--    REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE FROM CLAIMS OF         --
--    INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A   --
--    PARTICULAR PURPOSE.                                                     --
--                                                                            --
--    Xilinx products are not intended for use in life support appliances,    --
--    devices, or systems.  Use in such applications are expressly            --
--    prohibited.                                                             --
--                                                                            --
--    (c) Copyright 1995-2014 Xilinx, Inc.                                    --
--    All rights reserved.                                                    --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
-- You must compile the wrapper file bmg_72_804e79c102c84f5c.vhd when simulating
-- the core, bmg_72_804e79c102c84f5c. When compiling the wrapper file, be sure to
-- reference the XilinxCoreLib VHDL simulation library. For detailed
-- instructions, please refer to the "CORE Generator Help".

-- The synthesis directives "translate_off/translate_on" specified
-- below are supported by Xilinx, Mentor Graphics and Synplicity
-- synthesis tools. Ensure they are correct for your synthesis tool(s).

LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
-- synthesis translate_off
LIBRARY XilinxCoreLib;
-- synthesis translate_on
ENTITY bmg_72_804e79c102c84f5c IS
  PORT (
    clka : IN STD_LOGIC;
    ena : IN STD_LOGIC;
    addra : IN STD_LOGIC_VECTOR(10 DOWNTO 0);
    douta : OUT STD_LOGIC_VECTOR(7 DOWNTO 0)
  );
END bmg_72_804e79c102c84f5c;

ARCHITECTURE bmg_72_804e79c102c84f5c_a OF bmg_72_804e79c102c84f5c IS
-- synthesis translate_off
COMPONENT wrapped_bmg_72_804e79c102c84f5c
  PORT (
    clka : IN STD_LOGIC;
    ena : IN STD_LOGIC;
    addra : IN STD_LOGIC_VECTOR(10 DOWNTO 0);
    douta : OUT STD_LOGIC_VECTOR(7 DOWNTO 0)
  );
END COMPONENT;

-- Configuration specification
  FOR ALL : wrapped_bmg_72_804e79c102c84f5c USE ENTITY XilinxCoreLib.blk_mem_gen_v7_2(behavioral)
    GENERIC MAP (
      c_addra_width => 11,
      c_addrb_width => 11,
      c_algorithm => 1,
      c_axi_id_width => 4,
      c_axi_slave_type => 0,
      c_axi_type => 1,
      c_byte_size => 9,
      c_common_clk => 0,
      c_default_data => "0",
      c_disable_warn_bhv_coll => 0,
      c_disable_warn_bhv_range => 0,
      c_enable_32bit_address => 0,
      c_family => "virtex5",
      c_has_axi_id => 0,
      c_has_ena => 1,
      c_has_enb => 0,
      c_has_injecterr => 0,
      c_has_mem_output_regs_a => 1,
      c_has_mem_output_regs_b => 0,
      c_has_mux_output_regs_a => 0,
      c_has_mux_output_regs_b => 0,
      c_has_regcea => 0,
      c_has_regceb => 0,
      c_has_rsta => 0,
      c_has_rstb => 0,
      c_has_softecc_input_regs_a => 0,
      c_has_softecc_output_regs_b => 0,
      c_init_file_name => "bmg_72_804e79c102c84f5c.mif",
      c_inita_val => "0",
      c_initb_val => "0",
      c_interface_type => 0,
      c_load_init_file => 1,
      c_mem_type => 3,
      c_mux_pipeline_stages => 0,
      c_prim_type => 1,
      c_read_depth_a => 2048,
      c_read_depth_b => 2048,
      c_read_width_a => 8,
      c_read_width_b => 8,
      c_rst_priority_a => "CE",
      c_rst_priority_b => "CE",
      c_rst_type => "SYNC",
      c_rstram_a => 0,
      c_rstram_b => 0,
      c_sim_collision_check => "ALL",
      c_use_byte_wea => 0,
      c_use_byte_web => 0,
      c_use_default_data => 0,
      c_use_ecc => 0,
      c_use_softecc => 0,
      c_wea_width => 1,
      c_web_width => 1,
      c_write_depth_a => 2048,
      c_write_depth_b => 2048,
      c_write_mode_a => "WRITE_FIRST",
      c_write_mode_b => "WRITE_FIRST",
      c_write_width_a => 8,
      c_write_width_b => 8,
      c_xdevicefamily => "virtex5"
    );
-- synthesis translate_on
BEGIN
-- synthesis translate_off
U0 : wrapped_bmg_72_804e79c102c84f5c
  PORT MAP (
    clka => clka,
    ena => ena,
    addra => addra,
    douta => douta
  );
-- synthesis translate_on

END bmg_72_804e79c102c84f5c_a;
--------------------------------------------------------------------------------
--    This file is owned and controlled by Xilinx and must be used solely     --
--    for design, simulation, implementation and creation of design files     --
--    limited to Xilinx devices or technologies. Use with non-Xilinx          --
--    devices or technologies is expressly prohibited and immediately         --
--    terminates your license.                                                --
--                                                                            --
--    XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" SOLELY    --
--    FOR USE IN DEVELOPING PROGRAMS AND SOLUTIONS FOR XILINX DEVICES.  BY    --
--    PROVIDING THIS DESIGN, CODE, OR INFORMATION AS ONE POSSIBLE             --
--    IMPLEMENTATION OF THIS FEATURE, APPLICATION OR STANDARD, XILINX IS      --
--    MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION IS FREE FROM ANY      --
--    CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE FOR OBTAINING ANY       --
--    RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.  XILINX EXPRESSLY       --
--    DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO THE ADEQUACY OF THE   --
--    IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OR          --
--    REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE FROM CLAIMS OF         --
--    INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A   --
--    PARTICULAR PURPOSE.                                                     --
--                                                                            --
--    Xilinx products are not intended for use in life support appliances,    --
--    devices, or systems.  Use in such applications are expressly            --
--    prohibited.                                                             --
--                                                                            --
--    (c) Copyright 1995-2014 Xilinx, Inc.                                    --
--    All rights reserved.                                                    --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
-- You must compile the wrapper file bmg_72_b50899b30d5ca737.vhd when simulating
-- the core, bmg_72_b50899b30d5ca737. When compiling the wrapper file, be sure to
-- reference the XilinxCoreLib VHDL simulation library. For detailed
-- instructions, please refer to the "CORE Generator Help".

-- The synthesis directives "translate_off/translate_on" specified
-- below are supported by Xilinx, Mentor Graphics and Synplicity
-- synthesis tools. Ensure they are correct for your synthesis tool(s).

LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
-- synthesis translate_off
LIBRARY XilinxCoreLib;
-- synthesis translate_on
ENTITY bmg_72_b50899b30d5ca737 IS
  PORT (
    clka : IN STD_LOGIC;
    ena : IN STD_LOGIC;
    addra : IN STD_LOGIC_VECTOR(4 DOWNTO 0);
    douta : OUT STD_LOGIC_VECTOR(17 DOWNTO 0)
  );
END bmg_72_b50899b30d5ca737;

ARCHITECTURE bmg_72_b50899b30d5ca737_a OF bmg_72_b50899b30d5ca737 IS
-- synthesis translate_off
COMPONENT wrapped_bmg_72_b50899b30d5ca737
  PORT (
    clka : IN STD_LOGIC;
    ena : IN STD_LOGIC;
    addra : IN STD_LOGIC_VECTOR(4 DOWNTO 0);
    douta : OUT STD_LOGIC_VECTOR(17 DOWNTO 0)
  );
END COMPONENT;

-- Configuration specification
  FOR ALL : wrapped_bmg_72_b50899b30d5ca737 USE ENTITY XilinxCoreLib.blk_mem_gen_v7_2(behavioral)
    GENERIC MAP (
      c_addra_width => 5,
      c_addrb_width => 5,
      c_algorithm => 1,
      c_axi_id_width => 4,
      c_axi_slave_type => 0,
      c_axi_type => 1,
      c_byte_size => 9,
      c_common_clk => 0,
      c_default_data => "0",
      c_disable_warn_bhv_coll => 0,
      c_disable_warn_bhv_range => 0,
      c_enable_32bit_address => 0,
      c_family => "virtex5",
      c_has_axi_id => 0,
      c_has_ena => 1,
      c_has_enb => 0,
      c_has_injecterr => 0,
      c_has_mem_output_regs_a => 1,
      c_has_mem_output_regs_b => 0,
      c_has_mux_output_regs_a => 0,
      c_has_mux_output_regs_b => 0,
      c_has_regcea => 0,
      c_has_regceb => 0,
      c_has_rsta => 0,
      c_has_rstb => 0,
      c_has_softecc_input_regs_a => 0,
      c_has_softecc_output_regs_b => 0,
      c_init_file_name => "bmg_72_b50899b30d5ca737.mif",
      c_inita_val => "0",
      c_initb_val => "0",
      c_interface_type => 0,
      c_load_init_file => 1,
      c_mem_type => 3,
      c_mux_pipeline_stages => 0,
      c_prim_type => 1,
      c_read_depth_a => 32,
      c_read_depth_b => 32,
      c_read_width_a => 18,
      c_read_width_b => 18,
      c_rst_priority_a => "CE",
      c_rst_priority_b => "CE",
      c_rst_type => "SYNC",
      c_rstram_a => 0,
      c_rstram_b => 0,
      c_sim_collision_check => "ALL",
      c_use_byte_wea => 0,
      c_use_byte_web => 0,
      c_use_default_data => 0,
      c_use_ecc => 0,
      c_use_softecc => 0,
      c_wea_width => 1,
      c_web_width => 1,
      c_write_depth_a => 32,
      c_write_depth_b => 32,
      c_write_mode_a => "WRITE_FIRST",
      c_write_mode_b => "WRITE_FIRST",
      c_write_width_a => 18,
      c_write_width_b => 18,
      c_xdevicefamily => "virtex5"
    );
-- synthesis translate_on
BEGIN
-- synthesis translate_off
U0 : wrapped_bmg_72_b50899b30d5ca737
  PORT MAP (
    clka => clka,
    ena => ena,
    addra => addra,
    douta => douta
  );
-- synthesis translate_on

END bmg_72_b50899b30d5ca737_a;
--------------------------------------------------------------------------------
--    This file is owned and controlled by Xilinx and must be used solely     --
--    for design, simulation, implementation and creation of design files     --
--    limited to Xilinx devices or technologies. Use with non-Xilinx          --
--    devices or technologies is expressly prohibited and immediately         --
--    terminates your license.                                                --
--                                                                            --
--    XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" SOLELY    --
--    FOR USE IN DEVELOPING PROGRAMS AND SOLUTIONS FOR XILINX DEVICES.  BY    --
--    PROVIDING THIS DESIGN, CODE, OR INFORMATION AS ONE POSSIBLE             --
--    IMPLEMENTATION OF THIS FEATURE, APPLICATION OR STANDARD, XILINX IS      --
--    MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION IS FREE FROM ANY      --
--    CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE FOR OBTAINING ANY       --
--    RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.  XILINX EXPRESSLY       --
--    DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO THE ADEQUACY OF THE   --
--    IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OR          --
--    REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE FROM CLAIMS OF         --
--    INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A   --
--    PARTICULAR PURPOSE.                                                     --
--                                                                            --
--    Xilinx products are not intended for use in life support appliances,    --
--    devices, or systems.  Use in such applications are expressly            --
--    prohibited.                                                             --
--                                                                            --
--    (c) Copyright 1995-2014 Xilinx, Inc.                                    --
--    All rights reserved.                                                    --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
-- You must compile the wrapper file cntr_11_0_3ad9dc21603f5ae0.vhd when simulating
-- the core, cntr_11_0_3ad9dc21603f5ae0. When compiling the wrapper file, be sure to
-- reference the XilinxCoreLib VHDL simulation library. For detailed
-- instructions, please refer to the "CORE Generator Help".

-- The synthesis directives "translate_off/translate_on" specified
-- below are supported by Xilinx, Mentor Graphics and Synplicity
-- synthesis tools. Ensure they are correct for your synthesis tool(s).

LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
-- synthesis translate_off
LIBRARY XilinxCoreLib;
-- synthesis translate_on
ENTITY cntr_11_0_3ad9dc21603f5ae0 IS
  PORT (
    clk : IN STD_LOGIC;
    ce : IN STD_LOGIC;
    sinit : IN STD_LOGIC;
    load : IN STD_LOGIC;
    l : IN STD_LOGIC_VECTOR(6 DOWNTO 0);
    q : OUT STD_LOGIC_VECTOR(6 DOWNTO 0)
  );
END cntr_11_0_3ad9dc21603f5ae0;

ARCHITECTURE cntr_11_0_3ad9dc21603f5ae0_a OF cntr_11_0_3ad9dc21603f5ae0 IS
-- synthesis translate_off
COMPONENT wrapped_cntr_11_0_3ad9dc21603f5ae0
  PORT (
    clk : IN STD_LOGIC;
    ce : IN STD_LOGIC;
    sinit : IN STD_LOGIC;
    load : IN STD_LOGIC;
    l : IN STD_LOGIC_VECTOR(6 DOWNTO 0);
    q : OUT STD_LOGIC_VECTOR(6 DOWNTO 0)
  );
END COMPONENT;

-- Configuration specification
  FOR ALL : wrapped_cntr_11_0_3ad9dc21603f5ae0 USE ENTITY XilinxCoreLib.c_counter_binary_v11_0(behavioral)
    GENERIC MAP (
      c_ainit_val => "0",
      c_ce_overrides_sync => 0,
      c_count_by => "1",
      c_count_mode => 1,
      c_count_to => "1",
      c_fb_latency => 0,
      c_has_ce => 1,
      c_has_load => 1,
      c_has_sclr => 0,
      c_has_sinit => 1,
      c_has_sset => 0,
      c_has_thresh0 => 0,
      c_implementation => 0,
      c_latency => 1,
      c_load_low => 0,
      c_restrict_count => 0,
      c_sclr_overrides_sset => 1,
      c_sinit_val => "0",
      c_thresh0_value => "1",
      c_verbosity => 0,
      c_width => 7,
      c_xdevicefamily => "virtex5"
    );
-- synthesis translate_on
BEGIN
-- synthesis translate_off
U0 : wrapped_cntr_11_0_3ad9dc21603f5ae0
  PORT MAP (
    clk => clk,
    ce => ce,
    sinit => sinit,
    load => load,
    l => l,
    q => q
  );
-- synthesis translate_on

END cntr_11_0_3ad9dc21603f5ae0_a;
--------------------------------------------------------------------------------
--    This file is owned and controlled by Xilinx and must be used solely     --
--    for design, simulation, implementation and creation of design files     --
--    limited to Xilinx devices or technologies. Use with non-Xilinx          --
--    devices or technologies is expressly prohibited and immediately         --
--    terminates your license.                                                --
--                                                                            --
--    XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" SOLELY    --
--    FOR USE IN DEVELOPING PROGRAMS AND SOLUTIONS FOR XILINX DEVICES.  BY    --
--    PROVIDING THIS DESIGN, CODE, OR INFORMATION AS ONE POSSIBLE             --
--    IMPLEMENTATION OF THIS FEATURE, APPLICATION OR STANDARD, XILINX IS      --
--    MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION IS FREE FROM ANY      --
--    CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE FOR OBTAINING ANY       --
--    RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.  XILINX EXPRESSLY       --
--    DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO THE ADEQUACY OF THE   --
--    IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OR          --
--    REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE FROM CLAIMS OF         --
--    INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A   --
--    PARTICULAR PURPOSE.                                                     --
--                                                                            --
--    Xilinx products are not intended for use in life support appliances,    --
--    devices, or systems.  Use in such applications are expressly            --
--    prohibited.                                                             --
--                                                                            --
--    (c) Copyright 1995-2014 Xilinx, Inc.                                    --
--    All rights reserved.                                                    --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
-- You must compile the wrapper file cntr_11_0_14e5b6d5c91ed436.vhd when simulating
-- the core, cntr_11_0_14e5b6d5c91ed436. When compiling the wrapper file, be sure to
-- reference the XilinxCoreLib VHDL simulation library. For detailed
-- instructions, please refer to the "CORE Generator Help".

-- The synthesis directives "translate_off/translate_on" specified
-- below are supported by Xilinx, Mentor Graphics and Synplicity
-- synthesis tools. Ensure they are correct for your synthesis tool(s).

LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
-- synthesis translate_off
LIBRARY XilinxCoreLib;
-- synthesis translate_on
ENTITY cntr_11_0_14e5b6d5c91ed436 IS
  PORT (
    clk : IN STD_LOGIC;
    ce : IN STD_LOGIC;
    sinit : IN STD_LOGIC;
    q : OUT STD_LOGIC_VECTOR(3 DOWNTO 0)
  );
END cntr_11_0_14e5b6d5c91ed436;

ARCHITECTURE cntr_11_0_14e5b6d5c91ed436_a OF cntr_11_0_14e5b6d5c91ed436 IS
-- synthesis translate_off
COMPONENT wrapped_cntr_11_0_14e5b6d5c91ed436
  PORT (
    clk : IN STD_LOGIC;
    ce : IN STD_LOGIC;
    sinit : IN STD_LOGIC;
    q : OUT STD_LOGIC_VECTOR(3 DOWNTO 0)
  );
END COMPONENT;

-- Configuration specification
  FOR ALL : wrapped_cntr_11_0_14e5b6d5c91ed436 USE ENTITY XilinxCoreLib.c_counter_binary_v11_0(behavioral)
    GENERIC MAP (
      c_ainit_val => "0",
      c_ce_overrides_sync => 0,
      c_count_by => "1",
      c_count_mode => 1,
      c_count_to => "1",
      c_fb_latency => 0,
      c_has_ce => 1,
      c_has_load => 0,
      c_has_sclr => 0,
      c_has_sinit => 1,
      c_has_sset => 0,
      c_has_thresh0 => 0,
      c_implementation => 0,
      c_latency => 1,
      c_load_low => 0,
      c_restrict_count => 0,
      c_sclr_overrides_sset => 1,
      c_sinit_val => "110",
      c_thresh0_value => "1",
      c_verbosity => 0,
      c_width => 4,
      c_xdevicefamily => "virtex5"
    );
-- synthesis translate_on
BEGIN
-- synthesis translate_off
U0 : wrapped_cntr_11_0_14e5b6d5c91ed436
  PORT MAP (
    clk => clk,
    ce => ce,
    sinit => sinit,
    q => q
  );
-- synthesis translate_on

END cntr_11_0_14e5b6d5c91ed436_a;
--------------------------------------------------------------------------------
--    This file is owned and controlled by Xilinx and must be used solely     --
--    for design, simulation, implementation and creation of design files     --
--    limited to Xilinx devices or technologies. Use with non-Xilinx          --
--    devices or technologies is expressly prohibited and immediately         --
--    terminates your license.                                                --
--                                                                            --
--    XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" SOLELY    --
--    FOR USE IN DEVELOPING PROGRAMS AND SOLUTIONS FOR XILINX DEVICES.  BY    --
--    PROVIDING THIS DESIGN, CODE, OR INFORMATION AS ONE POSSIBLE             --
--    IMPLEMENTATION OF THIS FEATURE, APPLICATION OR STANDARD, XILINX IS      --
--    MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION IS FREE FROM ANY      --
--    CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE FOR OBTAINING ANY       --
--    RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.  XILINX EXPRESSLY       --
--    DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO THE ADEQUACY OF THE   --
--    IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OR          --
--    REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE FROM CLAIMS OF         --
--    INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A   --
--    PARTICULAR PURPOSE.                                                     --
--                                                                            --
--    Xilinx products are not intended for use in life support appliances,    --
--    devices, or systems.  Use in such applications are expressly            --
--    prohibited.                                                             --
--                                                                            --
--    (c) Copyright 1995-2014 Xilinx, Inc.                                    --
--    All rights reserved.                                                    --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
-- You must compile the wrapper file bmg_72_48d0f511ba241493.vhd when simulating
-- the core, bmg_72_48d0f511ba241493. When compiling the wrapper file, be sure to
-- reference the XilinxCoreLib VHDL simulation library. For detailed
-- instructions, please refer to the "CORE Generator Help".

-- The synthesis directives "translate_off/translate_on" specified
-- below are supported by Xilinx, Mentor Graphics and Synplicity
-- synthesis tools. Ensure they are correct for your synthesis tool(s).

LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
-- synthesis translate_off
LIBRARY XilinxCoreLib;
-- synthesis translate_on
ENTITY bmg_72_48d0f511ba241493 IS
  PORT (
    clka : IN STD_LOGIC;
    ena : IN STD_LOGIC;
    addra : IN STD_LOGIC_VECTOR(2 DOWNTO 0);
    douta : OUT STD_LOGIC_VECTOR(17 DOWNTO 0)
  );
END bmg_72_48d0f511ba241493;

ARCHITECTURE bmg_72_48d0f511ba241493_a OF bmg_72_48d0f511ba241493 IS
-- synthesis translate_off
COMPONENT wrapped_bmg_72_48d0f511ba241493
  PORT (
    clka : IN STD_LOGIC;
    ena : IN STD_LOGIC;
    addra : IN STD_LOGIC_VECTOR(2 DOWNTO 0);
    douta : OUT STD_LOGIC_VECTOR(17 DOWNTO 0)
  );
END COMPONENT;

-- Configuration specification
  FOR ALL : wrapped_bmg_72_48d0f511ba241493 USE ENTITY XilinxCoreLib.blk_mem_gen_v7_2(behavioral)
    GENERIC MAP (
      c_addra_width => 3,
      c_addrb_width => 3,
      c_algorithm => 1,
      c_axi_id_width => 4,
      c_axi_slave_type => 0,
      c_axi_type => 1,
      c_byte_size => 9,
      c_common_clk => 0,
      c_default_data => "0",
      c_disable_warn_bhv_coll => 0,
      c_disable_warn_bhv_range => 0,
      c_enable_32bit_address => 0,
      c_family => "virtex5",
      c_has_axi_id => 0,
      c_has_ena => 1,
      c_has_enb => 0,
      c_has_injecterr => 0,
      c_has_mem_output_regs_a => 1,
      c_has_mem_output_regs_b => 0,
      c_has_mux_output_regs_a => 0,
      c_has_mux_output_regs_b => 0,
      c_has_regcea => 0,
      c_has_regceb => 0,
      c_has_rsta => 0,
      c_has_rstb => 0,
      c_has_softecc_input_regs_a => 0,
      c_has_softecc_output_regs_b => 0,
      c_init_file_name => "bmg_72_48d0f511ba241493.mif",
      c_inita_val => "0",
      c_initb_val => "0",
      c_interface_type => 0,
      c_load_init_file => 1,
      c_mem_type => 3,
      c_mux_pipeline_stages => 0,
      c_prim_type => 1,
      c_read_depth_a => 8,
      c_read_depth_b => 8,
      c_read_width_a => 18,
      c_read_width_b => 18,
      c_rst_priority_a => "CE",
      c_rst_priority_b => "CE",
      c_rst_type => "SYNC",
      c_rstram_a => 0,
      c_rstram_b => 0,
      c_sim_collision_check => "ALL",
      c_use_byte_wea => 0,
      c_use_byte_web => 0,
      c_use_default_data => 0,
      c_use_ecc => 0,
      c_use_softecc => 0,
      c_wea_width => 1,
      c_web_width => 1,
      c_write_depth_a => 8,
      c_write_depth_b => 8,
      c_write_mode_a => "WRITE_FIRST",
      c_write_mode_b => "WRITE_FIRST",
      c_write_width_a => 18,
      c_write_width_b => 18,
      c_xdevicefamily => "virtex5"
    );
-- synthesis translate_on
BEGIN
-- synthesis translate_off
U0 : wrapped_bmg_72_48d0f511ba241493
  PORT MAP (
    clka => clka,
    ena => ena,
    addra => addra,
    douta => douta
  );
-- synthesis translate_on

END bmg_72_48d0f511ba241493_a;
--------------------------------------------------------------------------------
--    This file is owned and controlled by Xilinx and must be used solely     --
--    for design, simulation, implementation and creation of design files     --
--    limited to Xilinx devices or technologies. Use with non-Xilinx          --
--    devices or technologies is expressly prohibited and immediately         --
--    terminates your license.                                                --
--                                                                            --
--    XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" SOLELY    --
--    FOR USE IN DEVELOPING PROGRAMS AND SOLUTIONS FOR XILINX DEVICES.  BY    --
--    PROVIDING THIS DESIGN, CODE, OR INFORMATION AS ONE POSSIBLE             --
--    IMPLEMENTATION OF THIS FEATURE, APPLICATION OR STANDARD, XILINX IS      --
--    MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION IS FREE FROM ANY      --
--    CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE FOR OBTAINING ANY       --
--    RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.  XILINX EXPRESSLY       --
--    DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO THE ADEQUACY OF THE   --
--    IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OR          --
--    REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE FROM CLAIMS OF         --
--    INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A   --
--    PARTICULAR PURPOSE.                                                     --
--                                                                            --
--    Xilinx products are not intended for use in life support appliances,    --
--    devices, or systems.  Use in such applications are expressly            --
--    prohibited.                                                             --
--                                                                            --
--    (c) Copyright 1995-2014 Xilinx, Inc.                                    --
--    All rights reserved.                                                    --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
-- You must compile the wrapper file cntr_11_0_904cce14b13b282e.vhd when simulating
-- the core, cntr_11_0_904cce14b13b282e. When compiling the wrapper file, be sure to
-- reference the XilinxCoreLib VHDL simulation library. For detailed
-- instructions, please refer to the "CORE Generator Help".

-- The synthesis directives "translate_off/translate_on" specified
-- below are supported by Xilinx, Mentor Graphics and Synplicity
-- synthesis tools. Ensure they are correct for your synthesis tool(s).

LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
-- synthesis translate_off
LIBRARY XilinxCoreLib;
-- synthesis translate_on
ENTITY cntr_11_0_904cce14b13b282e IS
  PORT (
    clk : IN STD_LOGIC;
    ce : IN STD_LOGIC;
    sclr : IN STD_LOGIC;
    q : OUT STD_LOGIC_VECTOR(30 DOWNTO 0)
  );
END cntr_11_0_904cce14b13b282e;

ARCHITECTURE cntr_11_0_904cce14b13b282e_a OF cntr_11_0_904cce14b13b282e IS
-- synthesis translate_off
COMPONENT wrapped_cntr_11_0_904cce14b13b282e
  PORT (
    clk : IN STD_LOGIC;
    ce : IN STD_LOGIC;
    sclr : IN STD_LOGIC;
    q : OUT STD_LOGIC_VECTOR(30 DOWNTO 0)
  );
END COMPONENT;

-- Configuration specification
  FOR ALL : wrapped_cntr_11_0_904cce14b13b282e USE ENTITY XilinxCoreLib.c_counter_binary_v11_0(behavioral)
    GENERIC MAP (
      c_ainit_val => "0",
      c_ce_overrides_sync => 0,
      c_count_by => "1",
      c_count_mode => 0,
      c_count_to => "1",
      c_fb_latency => 0,
      c_has_ce => 1,
      c_has_load => 0,
      c_has_sclr => 1,
      c_has_sinit => 0,
      c_has_sset => 0,
      c_has_thresh0 => 0,
      c_implementation => 1,
      c_latency => 1,
      c_load_low => 0,
      c_restrict_count => 0,
      c_sclr_overrides_sset => 1,
      c_sinit_val => "0",
      c_thresh0_value => "1",
      c_verbosity => 0,
      c_width => 31,
      c_xdevicefamily => "virtex5"
    );
-- synthesis translate_on
BEGIN
-- synthesis translate_off
U0 : wrapped_cntr_11_0_904cce14b13b282e
  PORT MAP (
    clk => clk,
    ce => ce,
    sclr => sclr,
    q => q
  );
-- synthesis translate_on

END cntr_11_0_904cce14b13b282e_a;
--------------------------------------------------------------------------------
--    This file is owned and controlled by Xilinx and must be used solely     --
--    for design, simulation, implementation and creation of design files     --
--    limited to Xilinx devices or technologies. Use with non-Xilinx          --
--    devices or technologies is expressly prohibited and immediately         --
--    terminates your license.                                                --
--                                                                            --
--    XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" SOLELY    --
--    FOR USE IN DEVELOPING PROGRAMS AND SOLUTIONS FOR XILINX DEVICES.  BY    --
--    PROVIDING THIS DESIGN, CODE, OR INFORMATION AS ONE POSSIBLE             --
--    IMPLEMENTATION OF THIS FEATURE, APPLICATION OR STANDARD, XILINX IS      --
--    MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION IS FREE FROM ANY      --
--    CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE FOR OBTAINING ANY       --
--    RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.  XILINX EXPRESSLY       --
--    DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO THE ADEQUACY OF THE   --
--    IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OR          --
--    REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE FROM CLAIMS OF         --
--    INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A   --
--    PARTICULAR PURPOSE.                                                     --
--                                                                            --
--    Xilinx products are not intended for use in life support appliances,    --
--    devices, or systems.  Use in such applications are expressly            --
--    prohibited.                                                             --
--                                                                            --
--    (c) Copyright 1995-2014 Xilinx, Inc.                                    --
--    All rights reserved.                                                    --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
-- You must compile the wrapper file cntr_11_0_77d9d8bb324abfb9.vhd when simulating
-- the core, cntr_11_0_77d9d8bb324abfb9. When compiling the wrapper file, be sure to
-- reference the XilinxCoreLib VHDL simulation library. For detailed
-- instructions, please refer to the "CORE Generator Help".

-- The synthesis directives "translate_off/translate_on" specified
-- below are supported by Xilinx, Mentor Graphics and Synplicity
-- synthesis tools. Ensure they are correct for your synthesis tool(s).

LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
-- synthesis translate_off
LIBRARY XilinxCoreLib;
-- synthesis translate_on
ENTITY cntr_11_0_77d9d8bb324abfb9 IS
  PORT (
    clk : IN STD_LOGIC;
    ce : IN STD_LOGIC;
    sinit : IN STD_LOGIC;
    q : OUT STD_LOGIC_VECTOR(3 DOWNTO 0)
  );
END cntr_11_0_77d9d8bb324abfb9;

ARCHITECTURE cntr_11_0_77d9d8bb324abfb9_a OF cntr_11_0_77d9d8bb324abfb9 IS
-- synthesis translate_off
COMPONENT wrapped_cntr_11_0_77d9d8bb324abfb9
  PORT (
    clk : IN STD_LOGIC;
    ce : IN STD_LOGIC;
    sinit : IN STD_LOGIC;
    q : OUT STD_LOGIC_VECTOR(3 DOWNTO 0)
  );
END COMPONENT;

-- Configuration specification
  FOR ALL : wrapped_cntr_11_0_77d9d8bb324abfb9 USE ENTITY XilinxCoreLib.c_counter_binary_v11_0(behavioral)
    GENERIC MAP (
      c_ainit_val => "0",
      c_ce_overrides_sync => 0,
      c_count_by => "1",
      c_count_mode => 0,
      c_count_to => "1",
      c_fb_latency => 0,
      c_has_ce => 1,
      c_has_load => 0,
      c_has_sclr => 0,
      c_has_sinit => 1,
      c_has_sset => 0,
      c_has_thresh0 => 0,
      c_implementation => 0,
      c_latency => 1,
      c_load_low => 0,
      c_restrict_count => 0,
      c_sclr_overrides_sset => 1,
      c_sinit_val => "0",
      c_thresh0_value => "1",
      c_verbosity => 0,
      c_width => 4,
      c_xdevicefamily => "virtex5"
    );
-- synthesis translate_on
BEGIN
-- synthesis translate_off
U0 : wrapped_cntr_11_0_77d9d8bb324abfb9
  PORT MAP (
    clk => clk,
    ce => ce,
    sinit => sinit,
    q => q
  );
-- synthesis translate_on

END cntr_11_0_77d9d8bb324abfb9_a;
--------------------------------------------------------------------------------
--    This file is owned and controlled by Xilinx and must be used solely     --
--    for design, simulation, implementation and creation of design files     --
--    limited to Xilinx devices or technologies. Use with non-Xilinx          --
--    devices or technologies is expressly prohibited and immediately         --
--    terminates your license.                                                --
--                                                                            --
--    XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" SOLELY    --
--    FOR USE IN DEVELOPING PROGRAMS AND SOLUTIONS FOR XILINX DEVICES.  BY    --
--    PROVIDING THIS DESIGN, CODE, OR INFORMATION AS ONE POSSIBLE             --
--    IMPLEMENTATION OF THIS FEATURE, APPLICATION OR STANDARD, XILINX IS      --
--    MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION IS FREE FROM ANY      --
--    CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE FOR OBTAINING ANY       --
--    RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.  XILINX EXPRESSLY       --
--    DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO THE ADEQUACY OF THE   --
--    IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OR          --
--    REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE FROM CLAIMS OF         --
--    INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A   --
--    PARTICULAR PURPOSE.                                                     --
--                                                                            --
--    Xilinx products are not intended for use in life support appliances,    --
--    devices, or systems.  Use in such applications are expressly            --
--    prohibited.                                                             --
--                                                                            --
--    (c) Copyright 1995-2014 Xilinx, Inc.                                    --
--    All rights reserved.                                                    --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
-- You must compile the wrapper file bmg_72_ba30712f7b147c00.vhd when simulating
-- the core, bmg_72_ba30712f7b147c00. When compiling the wrapper file, be sure to
-- reference the XilinxCoreLib VHDL simulation library. For detailed
-- instructions, please refer to the "CORE Generator Help".

-- The synthesis directives "translate_off/translate_on" specified
-- below are supported by Xilinx, Mentor Graphics and Synplicity
-- synthesis tools. Ensure they are correct for your synthesis tool(s).

LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
-- synthesis translate_off
LIBRARY XilinxCoreLib;
-- synthesis translate_on
ENTITY bmg_72_ba30712f7b147c00 IS
  PORT (
    clka : IN STD_LOGIC;
    ena : IN STD_LOGIC;
    addra : IN STD_LOGIC_VECTOR(10 DOWNTO 0);
    douta : OUT STD_LOGIC_VECTOR(7 DOWNTO 0)
  );
END bmg_72_ba30712f7b147c00;

ARCHITECTURE bmg_72_ba30712f7b147c00_a OF bmg_72_ba30712f7b147c00 IS
-- synthesis translate_off
COMPONENT wrapped_bmg_72_ba30712f7b147c00
  PORT (
    clka : IN STD_LOGIC;
    ena : IN STD_LOGIC;
    addra : IN STD_LOGIC_VECTOR(10 DOWNTO 0);
    douta : OUT STD_LOGIC_VECTOR(7 DOWNTO 0)
  );
END COMPONENT;

-- Configuration specification
  FOR ALL : wrapped_bmg_72_ba30712f7b147c00 USE ENTITY XilinxCoreLib.blk_mem_gen_v7_2(behavioral)
    GENERIC MAP (
      c_addra_width => 11,
      c_addrb_width => 11,
      c_algorithm => 1,
      c_axi_id_width => 4,
      c_axi_slave_type => 0,
      c_axi_type => 1,
      c_byte_size => 9,
      c_common_clk => 0,
      c_default_data => "0",
      c_disable_warn_bhv_coll => 0,
      c_disable_warn_bhv_range => 0,
      c_enable_32bit_address => 0,
      c_family => "virtex5",
      c_has_axi_id => 0,
      c_has_ena => 1,
      c_has_enb => 0,
      c_has_injecterr => 0,
      c_has_mem_output_regs_a => 1,
      c_has_mem_output_regs_b => 0,
      c_has_mux_output_regs_a => 0,
      c_has_mux_output_regs_b => 0,
      c_has_regcea => 0,
      c_has_regceb => 0,
      c_has_rsta => 0,
      c_has_rstb => 0,
      c_has_softecc_input_regs_a => 0,
      c_has_softecc_output_regs_b => 0,
      c_init_file_name => "bmg_72_ba30712f7b147c00.mif",
      c_inita_val => "0",
      c_initb_val => "0",
      c_interface_type => 0,
      c_load_init_file => 1,
      c_mem_type => 3,
      c_mux_pipeline_stages => 0,
      c_prim_type => 1,
      c_read_depth_a => 2048,
      c_read_depth_b => 2048,
      c_read_width_a => 8,
      c_read_width_b => 8,
      c_rst_priority_a => "CE",
      c_rst_priority_b => "CE",
      c_rst_type => "SYNC",
      c_rstram_a => 0,
      c_rstram_b => 0,
      c_sim_collision_check => "ALL",
      c_use_byte_wea => 0,
      c_use_byte_web => 0,
      c_use_default_data => 0,
      c_use_ecc => 0,
      c_use_softecc => 0,
      c_wea_width => 1,
      c_web_width => 1,
      c_write_depth_a => 2048,
      c_write_depth_b => 2048,
      c_write_mode_a => "WRITE_FIRST",
      c_write_mode_b => "WRITE_FIRST",
      c_write_width_a => 8,
      c_write_width_b => 8,
      c_xdevicefamily => "virtex5"
    );
-- synthesis translate_on
BEGIN
-- synthesis translate_off
U0 : wrapped_bmg_72_ba30712f7b147c00
  PORT MAP (
    clka => clka,
    ena => ena,
    addra => addra,
    douta => douta
  );
-- synthesis translate_on

END bmg_72_ba30712f7b147c00_a;
--------------------------------------------------------------------------------
--    This file is owned and controlled by Xilinx and must be used solely     --
--    for design, simulation, implementation and creation of design files     --
--    limited to Xilinx devices or technologies. Use with non-Xilinx          --
--    devices or technologies is expressly prohibited and immediately         --
--    terminates your license.                                                --
--                                                                            --
--    XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" SOLELY    --
--    FOR USE IN DEVELOPING PROGRAMS AND SOLUTIONS FOR XILINX DEVICES.  BY    --
--    PROVIDING THIS DESIGN, CODE, OR INFORMATION AS ONE POSSIBLE             --
--    IMPLEMENTATION OF THIS FEATURE, APPLICATION OR STANDARD, XILINX IS      --
--    MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION IS FREE FROM ANY      --
--    CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE FOR OBTAINING ANY       --
--    RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.  XILINX EXPRESSLY       --
--    DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO THE ADEQUACY OF THE   --
--    IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OR          --
--    REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE FROM CLAIMS OF         --
--    INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A   --
--    PARTICULAR PURPOSE.                                                     --
--                                                                            --
--    Xilinx products are not intended for use in life support appliances,    --
--    devices, or systems.  Use in such applications are expressly            --
--    prohibited.                                                             --
--                                                                            --
--    (c) Copyright 1995-2014 Xilinx, Inc.                                    --
--    All rights reserved.                                                    --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
-- You must compile the wrapper file cntr_11_0_8438db56645cca14.vhd when simulating
-- the core, cntr_11_0_8438db56645cca14. When compiling the wrapper file, be sure to
-- reference the XilinxCoreLib VHDL simulation library. For detailed
-- instructions, please refer to the "CORE Generator Help".

-- The synthesis directives "translate_off/translate_on" specified
-- below are supported by Xilinx, Mentor Graphics and Synplicity
-- synthesis tools. Ensure they are correct for your synthesis tool(s).

LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
-- synthesis translate_off
LIBRARY XilinxCoreLib;
-- synthesis translate_on
ENTITY cntr_11_0_8438db56645cca14 IS
  PORT (
    clk : IN STD_LOGIC;
    ce : IN STD_LOGIC;
    sinit : IN STD_LOGIC;
    q : OUT STD_LOGIC_VECTOR(13 DOWNTO 0)
  );
END cntr_11_0_8438db56645cca14;

ARCHITECTURE cntr_11_0_8438db56645cca14_a OF cntr_11_0_8438db56645cca14 IS
-- synthesis translate_off
COMPONENT wrapped_cntr_11_0_8438db56645cca14
  PORT (
    clk : IN STD_LOGIC;
    ce : IN STD_LOGIC;
    sinit : IN STD_LOGIC;
    q : OUT STD_LOGIC_VECTOR(13 DOWNTO 0)
  );
END COMPONENT;

-- Configuration specification
  FOR ALL : wrapped_cntr_11_0_8438db56645cca14 USE ENTITY XilinxCoreLib.c_counter_binary_v11_0(behavioral)
    GENERIC MAP (
      c_ainit_val => "0",
      c_ce_overrides_sync => 0,
      c_count_by => "1",
      c_count_mode => 0,
      c_count_to => "1",
      c_fb_latency => 0,
      c_has_ce => 1,
      c_has_load => 0,
      c_has_sclr => 0,
      c_has_sinit => 1,
      c_has_sset => 0,
      c_has_thresh0 => 0,
      c_implementation => 0,
      c_latency => 1,
      c_load_low => 0,
      c_restrict_count => 0,
      c_sclr_overrides_sset => 1,
      c_sinit_val => "0",
      c_thresh0_value => "1",
      c_verbosity => 0,
      c_width => 14,
      c_xdevicefamily => "virtex5"
    );
-- synthesis translate_on
BEGIN
-- synthesis translate_off
U0 : wrapped_cntr_11_0_8438db56645cca14
  PORT MAP (
    clk => clk,
    ce => ce,
    sinit => sinit,
    q => q
  );
-- synthesis translate_on

END cntr_11_0_8438db56645cca14_a;
--------------------------------------------------------------------------------
--    This file is owned and controlled by Xilinx and must be used solely     --
--    for design, simulation, implementation and creation of design files     --
--    limited to Xilinx devices or technologies. Use with non-Xilinx          --
--    devices or technologies is expressly prohibited and immediately         --
--    terminates your license.                                                --
--                                                                            --
--    XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" SOLELY    --
--    FOR USE IN DEVELOPING PROGRAMS AND SOLUTIONS FOR XILINX DEVICES.  BY    --
--    PROVIDING THIS DESIGN, CODE, OR INFORMATION AS ONE POSSIBLE             --
--    IMPLEMENTATION OF THIS FEATURE, APPLICATION OR STANDARD, XILINX IS      --
--    MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION IS FREE FROM ANY      --
--    CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE FOR OBTAINING ANY       --
--    RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.  XILINX EXPRESSLY       --
--    DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO THE ADEQUACY OF THE   --
--    IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OR          --
--    REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE FROM CLAIMS OF         --
--    INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A   --
--    PARTICULAR PURPOSE.                                                     --
--                                                                            --
--    Xilinx products are not intended for use in life support appliances,    --
--    devices, or systems.  Use in such applications are expressly            --
--    prohibited.                                                             --
--                                                                            --
--    (c) Copyright 1995-2014 Xilinx, Inc.                                    --
--    All rights reserved.                                                    --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
-- You must compile the wrapper file bmg_72_b673a6c277a0b565.vhd when simulating
-- the core, bmg_72_b673a6c277a0b565. When compiling the wrapper file, be sure to
-- reference the XilinxCoreLib VHDL simulation library. For detailed
-- instructions, please refer to the "CORE Generator Help".

-- The synthesis directives "translate_off/translate_on" specified
-- below are supported by Xilinx, Mentor Graphics and Synplicity
-- synthesis tools. Ensure they are correct for your synthesis tool(s).

LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
-- synthesis translate_off
LIBRARY XilinxCoreLib;
-- synthesis translate_on
ENTITY bmg_72_b673a6c277a0b565 IS
  PORT (
    clka : IN STD_LOGIC;
    ena : IN STD_LOGIC;
    wea : IN STD_LOGIC_VECTOR(0 DOWNTO 0);
    addra : IN STD_LOGIC_VECTOR(2 DOWNTO 0);
    dina : IN STD_LOGIC_VECTOR(7 DOWNTO 0);
    douta : OUT STD_LOGIC_VECTOR(7 DOWNTO 0)
  );
END bmg_72_b673a6c277a0b565;

ARCHITECTURE bmg_72_b673a6c277a0b565_a OF bmg_72_b673a6c277a0b565 IS
-- synthesis translate_off
COMPONENT wrapped_bmg_72_b673a6c277a0b565
  PORT (
    clka : IN STD_LOGIC;
    ena : IN STD_LOGIC;
    wea : IN STD_LOGIC_VECTOR(0 DOWNTO 0);
    addra : IN STD_LOGIC_VECTOR(2 DOWNTO 0);
    dina : IN STD_LOGIC_VECTOR(7 DOWNTO 0);
    douta : OUT STD_LOGIC_VECTOR(7 DOWNTO 0)
  );
END COMPONENT;

-- Configuration specification
  FOR ALL : wrapped_bmg_72_b673a6c277a0b565 USE ENTITY XilinxCoreLib.blk_mem_gen_v7_2(behavioral)
    GENERIC MAP (
      c_addra_width => 3,
      c_addrb_width => 3,
      c_algorithm => 1,
      c_axi_id_width => 4,
      c_axi_slave_type => 0,
      c_axi_type => 1,
      c_byte_size => 9,
      c_common_clk => 0,
      c_default_data => "0",
      c_disable_warn_bhv_coll => 0,
      c_disable_warn_bhv_range => 0,
      c_enable_32bit_address => 0,
      c_family => "virtex5",
      c_has_axi_id => 0,
      c_has_ena => 1,
      c_has_enb => 0,
      c_has_injecterr => 0,
      c_has_mem_output_regs_a => 1,
      c_has_mem_output_regs_b => 0,
      c_has_mux_output_regs_a => 0,
      c_has_mux_output_regs_b => 0,
      c_has_regcea => 0,
      c_has_regceb => 0,
      c_has_rsta => 0,
      c_has_rstb => 0,
      c_has_softecc_input_regs_a => 0,
      c_has_softecc_output_regs_b => 0,
      c_init_file_name => "bmg_72_b673a6c277a0b565.mif",
      c_inita_val => "0",
      c_initb_val => "0",
      c_interface_type => 0,
      c_load_init_file => 1,
      c_mem_type => 0,
      c_mux_pipeline_stages => 0,
      c_prim_type => 1,
      c_read_depth_a => 8,
      c_read_depth_b => 8,
      c_read_width_a => 8,
      c_read_width_b => 8,
      c_rst_priority_a => "CE",
      c_rst_priority_b => "CE",
      c_rst_type => "SYNC",
      c_rstram_a => 0,
      c_rstram_b => 0,
      c_sim_collision_check => "ALL",
      c_use_byte_wea => 0,
      c_use_byte_web => 0,
      c_use_default_data => 0,
      c_use_ecc => 0,
      c_use_softecc => 0,
      c_wea_width => 1,
      c_web_width => 1,
      c_write_depth_a => 8,
      c_write_depth_b => 8,
      c_write_mode_a => "READ_FIRST",
      c_write_mode_b => "WRITE_FIRST",
      c_write_width_a => 8,
      c_write_width_b => 8,
      c_xdevicefamily => "virtex5"
    );
-- synthesis translate_on
BEGIN
-- synthesis translate_off
U0 : wrapped_bmg_72_b673a6c277a0b565
  PORT MAP (
    clka => clka,
    ena => ena,
    wea => wea,
    addra => addra,
    dina => dina,
    douta => douta
  );
-- synthesis translate_on

END bmg_72_b673a6c277a0b565_a;
--------------------------------------------------------------------------------
--    This file is owned and controlled by Xilinx and must be used solely     --
--    for design, simulation, implementation and creation of design files     --
--    limited to Xilinx devices or technologies. Use with non-Xilinx          --
--    devices or technologies is expressly prohibited and immediately         --
--    terminates your license.                                                --
--                                                                            --
--    XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" SOLELY    --
--    FOR USE IN DEVELOPING PROGRAMS AND SOLUTIONS FOR XILINX DEVICES.  BY    --
--    PROVIDING THIS DESIGN, CODE, OR INFORMATION AS ONE POSSIBLE             --
--    IMPLEMENTATION OF THIS FEATURE, APPLICATION OR STANDARD, XILINX IS      --
--    MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION IS FREE FROM ANY      --
--    CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE FOR OBTAINING ANY       --
--    RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.  XILINX EXPRESSLY       --
--    DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO THE ADEQUACY OF THE   --
--    IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OR          --
--    REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE FROM CLAIMS OF         --
--    INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A   --
--    PARTICULAR PURPOSE.                                                     --
--                                                                            --
--    Xilinx products are not intended for use in life support appliances,    --
--    devices, or systems.  Use in such applications are expressly            --
--    prohibited.                                                             --
--                                                                            --
--    (c) Copyright 1995-2014 Xilinx, Inc.                                    --
--    All rights reserved.                                                    --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
-- You must compile the wrapper file bmg_72_a613d001e124acbe.vhd when simulating
-- the core, bmg_72_a613d001e124acbe. When compiling the wrapper file, be sure to
-- reference the XilinxCoreLib VHDL simulation library. For detailed
-- instructions, please refer to the "CORE Generator Help".

-- The synthesis directives "translate_off/translate_on" specified
-- below are supported by Xilinx, Mentor Graphics and Synplicity
-- synthesis tools. Ensure they are correct for your synthesis tool(s).

LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
-- synthesis translate_off
LIBRARY XilinxCoreLib;
-- synthesis translate_on
ENTITY bmg_72_a613d001e124acbe IS
  PORT (
    clka : IN STD_LOGIC;
    ena : IN STD_LOGIC;
    wea : IN STD_LOGIC_VECTOR(0 DOWNTO 0);
    addra : IN STD_LOGIC_VECTOR(10 DOWNTO 0);
    dina : IN STD_LOGIC_VECTOR(7 DOWNTO 0);
    douta : OUT STD_LOGIC_VECTOR(7 DOWNTO 0);
    clkb : IN STD_LOGIC;
    enb : IN STD_LOGIC;
    web : IN STD_LOGIC_VECTOR(0 DOWNTO 0);
    addrb : IN STD_LOGIC_VECTOR(10 DOWNTO 0);
    dinb : IN STD_LOGIC_VECTOR(7 DOWNTO 0);
    doutb : OUT STD_LOGIC_VECTOR(7 DOWNTO 0)
  );
END bmg_72_a613d001e124acbe;

ARCHITECTURE bmg_72_a613d001e124acbe_a OF bmg_72_a613d001e124acbe IS
-- synthesis translate_off
COMPONENT wrapped_bmg_72_a613d001e124acbe
  PORT (
    clka : IN STD_LOGIC;
    ena : IN STD_LOGIC;
    wea : IN STD_LOGIC_VECTOR(0 DOWNTO 0);
    addra : IN STD_LOGIC_VECTOR(10 DOWNTO 0);
    dina : IN STD_LOGIC_VECTOR(7 DOWNTO 0);
    douta : OUT STD_LOGIC_VECTOR(7 DOWNTO 0);
    clkb : IN STD_LOGIC;
    enb : IN STD_LOGIC;
    web : IN STD_LOGIC_VECTOR(0 DOWNTO 0);
    addrb : IN STD_LOGIC_VECTOR(10 DOWNTO 0);
    dinb : IN STD_LOGIC_VECTOR(7 DOWNTO 0);
    doutb : OUT STD_LOGIC_VECTOR(7 DOWNTO 0)
  );
END COMPONENT;

-- Configuration specification
  FOR ALL : wrapped_bmg_72_a613d001e124acbe USE ENTITY XilinxCoreLib.blk_mem_gen_v7_2(behavioral)
    GENERIC MAP (
      c_addra_width => 11,
      c_addrb_width => 11,
      c_algorithm => 0,
      c_axi_id_width => 4,
      c_axi_slave_type => 0,
      c_axi_type => 1,
      c_byte_size => 9,
      c_common_clk => 1,
      c_default_data => "0",
      c_disable_warn_bhv_coll => 0,
      c_disable_warn_bhv_range => 0,
      c_enable_32bit_address => 0,
      c_family => "virtex5",
      c_has_axi_id => 0,
      c_has_ena => 1,
      c_has_enb => 1,
      c_has_injecterr => 0,
      c_has_mem_output_regs_a => 1,
      c_has_mem_output_regs_b => 1,
      c_has_mux_output_regs_a => 0,
      c_has_mux_output_regs_b => 0,
      c_has_regcea => 0,
      c_has_regceb => 0,
      c_has_rsta => 0,
      c_has_rstb => 0,
      c_has_softecc_input_regs_a => 0,
      c_has_softecc_output_regs_b => 0,
      c_init_file_name => "bmg_72_a613d001e124acbe.mif",
      c_inita_val => "0",
      c_initb_val => "0",
      c_interface_type => 0,
      c_load_init_file => 1,
      c_mem_type => 2,
      c_mux_pipeline_stages => 0,
      c_prim_type => 3,
      c_read_depth_a => 2048,
      c_read_depth_b => 2048,
      c_read_width_a => 8,
      c_read_width_b => 8,
      c_rst_priority_a => "CE",
      c_rst_priority_b => "CE",
      c_rst_type => "SYNC",
      c_rstram_a => 0,
      c_rstram_b => 0,
      c_sim_collision_check => "ALL",
      c_use_byte_wea => 0,
      c_use_byte_web => 0,
      c_use_default_data => 0,
      c_use_ecc => 0,
      c_use_softecc => 0,
      c_wea_width => 1,
      c_web_width => 1,
      c_write_depth_a => 2048,
      c_write_depth_b => 2048,
      c_write_mode_a => "READ_FIRST",
      c_write_mode_b => "WRITE_FIRST",
      c_write_width_a => 8,
      c_write_width_b => 8,
      c_xdevicefamily => "virtex5"
    );
-- synthesis translate_on
BEGIN
-- synthesis translate_off
U0 : wrapped_bmg_72_a613d001e124acbe
  PORT MAP (
    clka => clka,
    ena => ena,
    wea => wea,
    addra => addra,
    dina => dina,
    douta => douta,
    clkb => clkb,
    enb => enb,
    web => web,
    addrb => addrb,
    dinb => dinb,
    doutb => doutb
  );
-- synthesis translate_on

END bmg_72_a613d001e124acbe_a;
--------------------------------------------------------------------------------
--    This file is owned and controlled by Xilinx and must be used solely     --
--    for design, simulation, implementation and creation of design files     --
--    limited to Xilinx devices or technologies. Use with non-Xilinx          --
--    devices or technologies is expressly prohibited and immediately         --
--    terminates your license.                                                --
--                                                                            --
--    XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" SOLELY    --
--    FOR USE IN DEVELOPING PROGRAMS AND SOLUTIONS FOR XILINX DEVICES.  BY    --
--    PROVIDING THIS DESIGN, CODE, OR INFORMATION AS ONE POSSIBLE             --
--    IMPLEMENTATION OF THIS FEATURE, APPLICATION OR STANDARD, XILINX IS      --
--    MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION IS FREE FROM ANY      --
--    CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE FOR OBTAINING ANY       --
--    RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.  XILINX EXPRESSLY       --
--    DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO THE ADEQUACY OF THE   --
--    IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OR          --
--    REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE FROM CLAIMS OF         --
--    INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A   --
--    PARTICULAR PURPOSE.                                                     --
--                                                                            --
--    Xilinx products are not intended for use in life support appliances,    --
--    devices, or systems.  Use in such applications are expressly            --
--    prohibited.                                                             --
--                                                                            --
--    (c) Copyright 1995-2014 Xilinx, Inc.                                    --
--    All rights reserved.                                                    --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
-- You must compile the wrapper file bmg_72_22ecfdf9c708a18d.vhd when simulating
-- the core, bmg_72_22ecfdf9c708a18d. When compiling the wrapper file, be sure to
-- reference the XilinxCoreLib VHDL simulation library. For detailed
-- instructions, please refer to the "CORE Generator Help".

-- The synthesis directives "translate_off/translate_on" specified
-- below are supported by Xilinx, Mentor Graphics and Synplicity
-- synthesis tools. Ensure they are correct for your synthesis tool(s).

LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
-- synthesis translate_off
LIBRARY XilinxCoreLib;
-- synthesis translate_on
ENTITY bmg_72_22ecfdf9c708a18d IS
  PORT (
    clka : IN STD_LOGIC;
    ena : IN STD_LOGIC;
    addra : IN STD_LOGIC_VECTOR(2 DOWNTO 0);
    douta : OUT STD_LOGIC_VECTOR(17 DOWNTO 0)
  );
END bmg_72_22ecfdf9c708a18d;

ARCHITECTURE bmg_72_22ecfdf9c708a18d_a OF bmg_72_22ecfdf9c708a18d IS
-- synthesis translate_off
COMPONENT wrapped_bmg_72_22ecfdf9c708a18d
  PORT (
    clka : IN STD_LOGIC;
    ena : IN STD_LOGIC;
    addra : IN STD_LOGIC_VECTOR(2 DOWNTO 0);
    douta : OUT STD_LOGIC_VECTOR(17 DOWNTO 0)
  );
END COMPONENT;

-- Configuration specification
  FOR ALL : wrapped_bmg_72_22ecfdf9c708a18d USE ENTITY XilinxCoreLib.blk_mem_gen_v7_2(behavioral)
    GENERIC MAP (
      c_addra_width => 3,
      c_addrb_width => 3,
      c_algorithm => 1,
      c_axi_id_width => 4,
      c_axi_slave_type => 0,
      c_axi_type => 1,
      c_byte_size => 9,
      c_common_clk => 0,
      c_default_data => "0",
      c_disable_warn_bhv_coll => 0,
      c_disable_warn_bhv_range => 0,
      c_enable_32bit_address => 0,
      c_family => "virtex5",
      c_has_axi_id => 0,
      c_has_ena => 1,
      c_has_enb => 0,
      c_has_injecterr => 0,
      c_has_mem_output_regs_a => 1,
      c_has_mem_output_regs_b => 0,
      c_has_mux_output_regs_a => 0,
      c_has_mux_output_regs_b => 0,
      c_has_regcea => 0,
      c_has_regceb => 0,
      c_has_rsta => 0,
      c_has_rstb => 0,
      c_has_softecc_input_regs_a => 0,
      c_has_softecc_output_regs_b => 0,
      c_init_file_name => "bmg_72_22ecfdf9c708a18d.mif",
      c_inita_val => "0",
      c_initb_val => "0",
      c_interface_type => 0,
      c_load_init_file => 1,
      c_mem_type => 3,
      c_mux_pipeline_stages => 0,
      c_prim_type => 1,
      c_read_depth_a => 8,
      c_read_depth_b => 8,
      c_read_width_a => 18,
      c_read_width_b => 18,
      c_rst_priority_a => "CE",
      c_rst_priority_b => "CE",
      c_rst_type => "SYNC",
      c_rstram_a => 0,
      c_rstram_b => 0,
      c_sim_collision_check => "ALL",
      c_use_byte_wea => 0,
      c_use_byte_web => 0,
      c_use_default_data => 0,
      c_use_ecc => 0,
      c_use_softecc => 0,
      c_wea_width => 1,
      c_web_width => 1,
      c_write_depth_a => 8,
      c_write_depth_b => 8,
      c_write_mode_a => "WRITE_FIRST",
      c_write_mode_b => "WRITE_FIRST",
      c_write_width_a => 18,
      c_write_width_b => 18,
      c_xdevicefamily => "virtex5"
    );
-- synthesis translate_on
BEGIN
-- synthesis translate_off
U0 : wrapped_bmg_72_22ecfdf9c708a18d
  PORT MAP (
    clka => clka,
    ena => ena,
    addra => addra,
    douta => douta
  );
-- synthesis translate_on

END bmg_72_22ecfdf9c708a18d_a;
--------------------------------------------------------------------------------
--    This file is owned and controlled by Xilinx and must be used solely     --
--    for design, simulation, implementation and creation of design files     --
--    limited to Xilinx devices or technologies. Use with non-Xilinx          --
--    devices or technologies is expressly prohibited and immediately         --
--    terminates your license.                                                --
--                                                                            --
--    XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" SOLELY    --
--    FOR USE IN DEVELOPING PROGRAMS AND SOLUTIONS FOR XILINX DEVICES.  BY    --
--    PROVIDING THIS DESIGN, CODE, OR INFORMATION AS ONE POSSIBLE             --
--    IMPLEMENTATION OF THIS FEATURE, APPLICATION OR STANDARD, XILINX IS      --
--    MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION IS FREE FROM ANY      --
--    CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE FOR OBTAINING ANY       --
--    RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.  XILINX EXPRESSLY       --
--    DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO THE ADEQUACY OF THE   --
--    IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OR          --
--    REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE FROM CLAIMS OF         --
--    INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A   --
--    PARTICULAR PURPOSE.                                                     --
--                                                                            --
--    Xilinx products are not intended for use in life support appliances,    --
--    devices, or systems.  Use in such applications are expressly            --
--    prohibited.                                                             --
--                                                                            --
--    (c) Copyright 1995-2014 Xilinx, Inc.                                    --
--    All rights reserved.                                                    --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
-- You must compile the wrapper file bmg_72_deac774267b579f6.vhd when simulating
-- the core, bmg_72_deac774267b579f6. When compiling the wrapper file, be sure to
-- reference the XilinxCoreLib VHDL simulation library. For detailed
-- instructions, please refer to the "CORE Generator Help".

-- The synthesis directives "translate_off/translate_on" specified
-- below are supported by Xilinx, Mentor Graphics and Synplicity
-- synthesis tools. Ensure they are correct for your synthesis tool(s).

LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
-- synthesis translate_off
LIBRARY XilinxCoreLib;
-- synthesis translate_on
ENTITY bmg_72_deac774267b579f6 IS
  PORT (
    clka : IN STD_LOGIC;
    ena : IN STD_LOGIC;
    wea : IN STD_LOGIC_VECTOR(0 DOWNTO 0);
    addra : IN STD_LOGIC_VECTOR(6 DOWNTO 0);
    dina : IN STD_LOGIC_VECTOR(35 DOWNTO 0);
    douta : OUT STD_LOGIC_VECTOR(35 DOWNTO 0)
  );
END bmg_72_deac774267b579f6;

ARCHITECTURE bmg_72_deac774267b579f6_a OF bmg_72_deac774267b579f6 IS
-- synthesis translate_off
COMPONENT wrapped_bmg_72_deac774267b579f6
  PORT (
    clka : IN STD_LOGIC;
    ena : IN STD_LOGIC;
    wea : IN STD_LOGIC_VECTOR(0 DOWNTO 0);
    addra : IN STD_LOGIC_VECTOR(6 DOWNTO 0);
    dina : IN STD_LOGIC_VECTOR(35 DOWNTO 0);
    douta : OUT STD_LOGIC_VECTOR(35 DOWNTO 0)
  );
END COMPONENT;

-- Configuration specification
  FOR ALL : wrapped_bmg_72_deac774267b579f6 USE ENTITY XilinxCoreLib.blk_mem_gen_v7_2(behavioral)
    GENERIC MAP (
      c_addra_width => 7,
      c_addrb_width => 7,
      c_algorithm => 1,
      c_axi_id_width => 4,
      c_axi_slave_type => 0,
      c_axi_type => 1,
      c_byte_size => 9,
      c_common_clk => 0,
      c_default_data => "0",
      c_disable_warn_bhv_coll => 0,
      c_disable_warn_bhv_range => 0,
      c_enable_32bit_address => 0,
      c_family => "virtex5",
      c_has_axi_id => 0,
      c_has_ena => 1,
      c_has_enb => 0,
      c_has_injecterr => 0,
      c_has_mem_output_regs_a => 1,
      c_has_mem_output_regs_b => 0,
      c_has_mux_output_regs_a => 0,
      c_has_mux_output_regs_b => 0,
      c_has_regcea => 0,
      c_has_regceb => 0,
      c_has_rsta => 0,
      c_has_rstb => 0,
      c_has_softecc_input_regs_a => 0,
      c_has_softecc_output_regs_b => 0,
      c_init_file_name => "bmg_72_deac774267b579f6.mif",
      c_inita_val => "0",
      c_initb_val => "0",
      c_interface_type => 0,
      c_load_init_file => 1,
      c_mem_type => 0,
      c_mux_pipeline_stages => 0,
      c_prim_type => 1,
      c_read_depth_a => 128,
      c_read_depth_b => 128,
      c_read_width_a => 36,
      c_read_width_b => 36,
      c_rst_priority_a => "CE",
      c_rst_priority_b => "CE",
      c_rst_type => "SYNC",
      c_rstram_a => 0,
      c_rstram_b => 0,
      c_sim_collision_check => "ALL",
      c_use_byte_wea => 0,
      c_use_byte_web => 0,
      c_use_default_data => 0,
      c_use_ecc => 0,
      c_use_softecc => 0,
      c_wea_width => 1,
      c_web_width => 1,
      c_write_depth_a => 128,
      c_write_depth_b => 128,
      c_write_mode_a => "READ_FIRST",
      c_write_mode_b => "WRITE_FIRST",
      c_write_width_a => 36,
      c_write_width_b => 36,
      c_xdevicefamily => "virtex5"
    );
-- synthesis translate_on
BEGIN
-- synthesis translate_off
U0 : wrapped_bmg_72_deac774267b579f6
  PORT MAP (
    clka => clka,
    ena => ena,
    wea => wea,
    addra => addra,
    dina => dina,
    douta => douta
  );
-- synthesis translate_on

END bmg_72_deac774267b579f6_a;
--------------------------------------------------------------------------------
-- Copyright (c) 1995-2013 Xilinx, Inc.  All rights reserved.
--------------------------------------------------------------------------------
--   ____  ____
--  /   /\/   /
-- /___/  \  /    Vendor: Xilinx
-- \   \   \/     Version: P.20131013
--  \   \         Application: netgen
--  /   /         Filename: xfft_v7_0_8bfb05e20d13daa5.vhd
-- /___/   /\     Timestamp: Fri Aug  8 17:27:25 2014
-- \   \  /  \ 
--  \___\/\___\
--             
-- Command	: -intstyle ise -w -sim -ofmt vhdl ./tmp/_cg/xfft_v7_0_8bfb05e20d13daa5.ngc ./tmp/_cg/xfft_v7_0_8bfb05e20d13daa5.vhd 
-- Device	: 5vsx95tff1136-1
-- Input file	: ./tmp/_cg/xfft_v7_0_8bfb05e20d13daa5.ngc
-- Output file	: ./tmp/_cg/xfft_v7_0_8bfb05e20d13daa5.vhd
-- # of Entities	: 1
-- Design Name	: xfft_v7_0_8bfb05e20d13daa5
-- Xilinx	: /opt/xilinx/14.7/ISE_DS/ISE/
--             
-- Purpose:    
--     This VHDL netlist is a verification model and uses simulation 
--     primitives which may not represent the true implementation of the 
--     device, however the netlist is functionally correct and should not 
--     be modified. This file cannot be synthesized and should only be used 
--     with supported simulation tools.
--             
-- Reference:  
--     Command Line Tools User Guide, Chapter 23
--     Synthesis and Simulation Design Guide, Chapter 6
--             
--------------------------------------------------------------------------------


-- synthesis translate_off
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
library UNISIM;
use UNISIM.VCOMPONENTS.ALL;
use UNISIM.VPKG.ALL;

entity xfft_v7_0_8bfb05e20d13daa5 is
  port (
    sclr : in STD_LOGIC := 'X'; 
    ce : in STD_LOGIC := 'X'; 
    rfd : out STD_LOGIC; 
    start : in STD_LOGIC := 'X'; 
    fwd_inv : in STD_LOGIC := 'X'; 
    dv : out STD_LOGIC; 
    unload : in STD_LOGIC := 'X'; 
    done : out STD_LOGIC; 
    clk : in STD_LOGIC := 'X'; 
    busy : out STD_LOGIC; 
    fwd_inv_we : in STD_LOGIC := 'X'; 
    edone : out STD_LOGIC; 
    xn_re : in STD_LOGIC_VECTOR ( 17 downto 0 ); 
    xk_im : out STD_LOGIC_VECTOR ( 30 downto 0 ); 
    xn_index : out STD_LOGIC_VECTOR ( 11 downto 0 ); 
    xk_re : out STD_LOGIC_VECTOR ( 30 downto 0 ); 
    xn_im : in STD_LOGIC_VECTOR ( 17 downto 0 ); 
    xk_index : out STD_LOGIC_VECTOR ( 11 downto 0 ) 
  );
end xfft_v7_0_8bfb05e20d13daa5;

architecture STRUCTURE of xfft_v7_0_8bfb05e20d13daa5 is
  signal NlwRenamedSig_OI_rfd : STD_LOGIC; 
  signal blk00000003_sig000008d2 : STD_LOGIC; 
  signal blk00000003_sig000008d1 : STD_LOGIC; 
  signal blk00000003_sig000008d0 : STD_LOGIC; 
  signal blk00000003_sig000008cf : STD_LOGIC; 
  signal blk00000003_sig000008ce : STD_LOGIC; 
  signal blk00000003_sig000008cd : STD_LOGIC; 
  signal blk00000003_sig000008cc : STD_LOGIC; 
  signal blk00000003_sig000008cb : STD_LOGIC; 
  signal blk00000003_sig000008ca : STD_LOGIC; 
  signal blk00000003_sig000008c9 : STD_LOGIC; 
  signal blk00000003_sig000008c8 : STD_LOGIC; 
  signal blk00000003_sig000008c7 : STD_LOGIC; 
  signal blk00000003_sig000008c6 : STD_LOGIC; 
  signal blk00000003_sig000008c5 : STD_LOGIC; 
  signal blk00000003_sig000008c4 : STD_LOGIC; 
  signal blk00000003_sig000008c3 : STD_LOGIC; 
  signal blk00000003_sig000008c2 : STD_LOGIC; 
  signal blk00000003_sig000008c1 : STD_LOGIC; 
  signal blk00000003_sig000008c0 : STD_LOGIC; 
  signal blk00000003_sig000008bf : STD_LOGIC; 
  signal blk00000003_sig000008be : STD_LOGIC; 
  signal blk00000003_sig000008bd : STD_LOGIC; 
  signal blk00000003_sig000008bc : STD_LOGIC; 
  signal blk00000003_sig000008bb : STD_LOGIC; 
  signal blk00000003_sig000008ba : STD_LOGIC; 
  signal blk00000003_sig000008b9 : STD_LOGIC; 
  signal blk00000003_sig000008b8 : STD_LOGIC; 
  signal blk00000003_sig000008b7 : STD_LOGIC; 
  signal blk00000003_sig000008b6 : STD_LOGIC; 
  signal blk00000003_sig000008b5 : STD_LOGIC; 
  signal blk00000003_sig000008b4 : STD_LOGIC; 
  signal blk00000003_sig000008b3 : STD_LOGIC; 
  signal blk00000003_sig000008b2 : STD_LOGIC; 
  signal blk00000003_sig000008b1 : STD_LOGIC; 
  signal blk00000003_sig000008b0 : STD_LOGIC; 
  signal blk00000003_sig000008af : STD_LOGIC; 
  signal blk00000003_sig000008ae : STD_LOGIC; 
  signal blk00000003_sig000008ad : STD_LOGIC; 
  signal blk00000003_sig000008ac : STD_LOGIC; 
  signal blk00000003_sig000008ab : STD_LOGIC; 
  signal blk00000003_sig000008aa : STD_LOGIC; 
  signal blk00000003_sig000008a9 : STD_LOGIC; 
  signal blk00000003_sig000008a8 : STD_LOGIC; 
  signal blk00000003_sig000008a7 : STD_LOGIC; 
  signal blk00000003_sig000008a6 : STD_LOGIC; 
  signal blk00000003_sig000008a5 : STD_LOGIC; 
  signal blk00000003_sig000008a4 : STD_LOGIC; 
  signal blk00000003_sig000008a3 : STD_LOGIC; 
  signal blk00000003_sig000008a2 : STD_LOGIC; 
  signal blk00000003_sig000008a1 : STD_LOGIC; 
  signal blk00000003_sig000008a0 : STD_LOGIC; 
  signal blk00000003_sig0000089f : STD_LOGIC; 
  signal blk00000003_sig0000089e : STD_LOGIC; 
  signal blk00000003_sig0000089d : STD_LOGIC; 
  signal blk00000003_sig0000089c : STD_LOGIC; 
  signal blk00000003_sig0000089b : STD_LOGIC; 
  signal blk00000003_sig0000089a : STD_LOGIC; 
  signal blk00000003_sig00000899 : STD_LOGIC; 
  signal blk00000003_sig00000898 : STD_LOGIC; 
  signal blk00000003_sig00000897 : STD_LOGIC; 
  signal blk00000003_sig00000896 : STD_LOGIC; 
  signal blk00000003_sig00000895 : STD_LOGIC; 
  signal blk00000003_sig00000894 : STD_LOGIC; 
  signal blk00000003_sig00000893 : STD_LOGIC; 
  signal blk00000003_sig00000892 : STD_LOGIC; 
  signal blk00000003_sig00000891 : STD_LOGIC; 
  signal blk00000003_sig00000890 : STD_LOGIC; 
  signal blk00000003_sig0000088f : STD_LOGIC; 
  signal blk00000003_sig0000088e : STD_LOGIC; 
  signal blk00000003_sig0000088d : STD_LOGIC; 
  signal blk00000003_sig0000088c : STD_LOGIC; 
  signal blk00000003_sig0000088b : STD_LOGIC; 
  signal blk00000003_sig0000088a : STD_LOGIC; 
  signal blk00000003_sig00000889 : STD_LOGIC; 
  signal blk00000003_sig00000888 : STD_LOGIC; 
  signal blk00000003_sig00000887 : STD_LOGIC; 
  signal blk00000003_sig00000886 : STD_LOGIC; 
  signal blk00000003_sig00000885 : STD_LOGIC; 
  signal blk00000003_sig00000884 : STD_LOGIC; 
  signal blk00000003_sig00000883 : STD_LOGIC; 
  signal blk00000003_sig00000882 : STD_LOGIC; 
  signal blk00000003_sig00000881 : STD_LOGIC; 
  signal blk00000003_sig00000880 : STD_LOGIC; 
  signal blk00000003_sig0000087f : STD_LOGIC; 
  signal blk00000003_sig0000087e : STD_LOGIC; 
  signal blk00000003_sig0000087d : STD_LOGIC; 
  signal blk00000003_sig0000087c : STD_LOGIC; 
  signal blk00000003_sig0000087b : STD_LOGIC; 
  signal blk00000003_sig0000087a : STD_LOGIC; 
  signal blk00000003_sig00000879 : STD_LOGIC; 
  signal blk00000003_sig00000878 : STD_LOGIC; 
  signal blk00000003_sig00000877 : STD_LOGIC; 
  signal blk00000003_sig00000876 : STD_LOGIC; 
  signal blk00000003_sig00000875 : STD_LOGIC; 
  signal blk00000003_sig00000874 : STD_LOGIC; 
  signal blk00000003_sig00000873 : STD_LOGIC; 
  signal blk00000003_sig00000872 : STD_LOGIC; 
  signal blk00000003_sig00000871 : STD_LOGIC; 
  signal blk00000003_sig00000870 : STD_LOGIC; 
  signal blk00000003_sig0000086f : STD_LOGIC; 
  signal blk00000003_sig0000086e : STD_LOGIC; 
  signal blk00000003_sig0000086d : STD_LOGIC; 
  signal blk00000003_sig0000086c : STD_LOGIC; 
  signal blk00000003_sig0000086b : STD_LOGIC; 
  signal blk00000003_sig0000086a : STD_LOGIC; 
  signal blk00000003_sig00000869 : STD_LOGIC; 
  signal blk00000003_sig00000868 : STD_LOGIC; 
  signal blk00000003_sig00000867 : STD_LOGIC; 
  signal blk00000003_sig00000866 : STD_LOGIC; 
  signal blk00000003_sig00000865 : STD_LOGIC; 
  signal blk00000003_sig00000864 : STD_LOGIC; 
  signal blk00000003_sig00000863 : STD_LOGIC; 
  signal blk00000003_sig00000862 : STD_LOGIC; 
  signal blk00000003_sig00000861 : STD_LOGIC; 
  signal blk00000003_sig00000860 : STD_LOGIC; 
  signal blk00000003_sig0000085f : STD_LOGIC; 
  signal blk00000003_sig0000085e : STD_LOGIC; 
  signal blk00000003_sig0000085d : STD_LOGIC; 
  signal blk00000003_sig0000085c : STD_LOGIC; 
  signal blk00000003_sig0000085b : STD_LOGIC; 
  signal blk00000003_sig0000085a : STD_LOGIC; 
  signal blk00000003_sig00000859 : STD_LOGIC; 
  signal blk00000003_sig00000858 : STD_LOGIC; 
  signal blk00000003_sig00000857 : STD_LOGIC; 
  signal blk00000003_sig00000856 : STD_LOGIC; 
  signal blk00000003_sig00000855 : STD_LOGIC; 
  signal blk00000003_sig00000854 : STD_LOGIC; 
  signal blk00000003_sig00000853 : STD_LOGIC; 
  signal blk00000003_sig00000852 : STD_LOGIC; 
  signal blk00000003_sig00000851 : STD_LOGIC; 
  signal blk00000003_sig00000850 : STD_LOGIC; 
  signal blk00000003_sig0000084f : STD_LOGIC; 
  signal blk00000003_sig0000084e : STD_LOGIC; 
  signal blk00000003_sig0000084d : STD_LOGIC; 
  signal blk00000003_sig0000084c : STD_LOGIC; 
  signal blk00000003_sig0000084b : STD_LOGIC; 
  signal blk00000003_sig0000084a : STD_LOGIC; 
  signal blk00000003_sig00000849 : STD_LOGIC; 
  signal blk00000003_sig00000848 : STD_LOGIC; 
  signal blk00000003_sig00000847 : STD_LOGIC; 
  signal blk00000003_sig00000846 : STD_LOGIC; 
  signal blk00000003_sig00000845 : STD_LOGIC; 
  signal blk00000003_sig00000844 : STD_LOGIC; 
  signal blk00000003_sig00000843 : STD_LOGIC; 
  signal blk00000003_sig00000842 : STD_LOGIC; 
  signal blk00000003_sig00000841 : STD_LOGIC; 
  signal blk00000003_sig00000840 : STD_LOGIC; 
  signal blk00000003_sig0000083f : STD_LOGIC; 
  signal blk00000003_sig0000083e : STD_LOGIC; 
  signal blk00000003_sig0000083d : STD_LOGIC; 
  signal blk00000003_sig0000083c : STD_LOGIC; 
  signal blk00000003_sig0000083b : STD_LOGIC; 
  signal blk00000003_sig0000083a : STD_LOGIC; 
  signal blk00000003_sig00000839 : STD_LOGIC; 
  signal blk00000003_sig00000838 : STD_LOGIC; 
  signal blk00000003_sig00000837 : STD_LOGIC; 
  signal blk00000003_sig00000836 : STD_LOGIC; 
  signal blk00000003_sig00000835 : STD_LOGIC; 
  signal blk00000003_sig00000834 : STD_LOGIC; 
  signal blk00000003_sig00000833 : STD_LOGIC; 
  signal blk00000003_sig00000832 : STD_LOGIC; 
  signal blk00000003_sig00000831 : STD_LOGIC; 
  signal blk00000003_sig00000830 : STD_LOGIC; 
  signal blk00000003_sig0000082f : STD_LOGIC; 
  signal blk00000003_sig0000082e : STD_LOGIC; 
  signal blk00000003_sig0000082d : STD_LOGIC; 
  signal blk00000003_sig0000082c : STD_LOGIC; 
  signal blk00000003_sig0000082b : STD_LOGIC; 
  signal blk00000003_sig0000082a : STD_LOGIC; 
  signal blk00000003_sig00000829 : STD_LOGIC; 
  signal blk00000003_sig00000828 : STD_LOGIC; 
  signal blk00000003_sig00000827 : STD_LOGIC; 
  signal blk00000003_sig00000826 : STD_LOGIC; 
  signal blk00000003_sig00000825 : STD_LOGIC; 
  signal blk00000003_sig00000824 : STD_LOGIC; 
  signal blk00000003_sig00000823 : STD_LOGIC; 
  signal blk00000003_sig00000822 : STD_LOGIC; 
  signal blk00000003_sig00000821 : STD_LOGIC; 
  signal blk00000003_sig00000820 : STD_LOGIC; 
  signal blk00000003_sig0000081f : STD_LOGIC; 
  signal blk00000003_sig0000081e : STD_LOGIC; 
  signal blk00000003_sig0000081d : STD_LOGIC; 
  signal blk00000003_sig0000081c : STD_LOGIC; 
  signal blk00000003_sig0000081b : STD_LOGIC; 
  signal blk00000003_sig0000081a : STD_LOGIC; 
  signal blk00000003_sig00000819 : STD_LOGIC; 
  signal blk00000003_sig00000818 : STD_LOGIC; 
  signal blk00000003_sig00000817 : STD_LOGIC; 
  signal blk00000003_sig00000816 : STD_LOGIC; 
  signal blk00000003_sig00000815 : STD_LOGIC; 
  signal blk00000003_sig00000814 : STD_LOGIC; 
  signal blk00000003_sig00000813 : STD_LOGIC; 
  signal blk00000003_sig00000812 : STD_LOGIC; 
  signal blk00000003_sig00000811 : STD_LOGIC; 
  signal blk00000003_sig00000810 : STD_LOGIC; 
  signal blk00000003_sig0000080f : STD_LOGIC; 
  signal blk00000003_sig0000080e : STD_LOGIC; 
  signal blk00000003_sig0000080d : STD_LOGIC; 
  signal blk00000003_sig0000080c : STD_LOGIC; 
  signal blk00000003_sig0000080b : STD_LOGIC; 
  signal blk00000003_sig0000080a : STD_LOGIC; 
  signal blk00000003_sig00000809 : STD_LOGIC; 
  signal blk00000003_sig00000808 : STD_LOGIC; 
  signal blk00000003_sig00000807 : STD_LOGIC; 
  signal blk00000003_sig00000806 : STD_LOGIC; 
  signal blk00000003_sig00000805 : STD_LOGIC; 
  signal blk00000003_sig00000804 : STD_LOGIC; 
  signal blk00000003_sig00000803 : STD_LOGIC; 
  signal blk00000003_sig00000802 : STD_LOGIC; 
  signal blk00000003_sig00000801 : STD_LOGIC; 
  signal blk00000003_sig00000800 : STD_LOGIC; 
  signal blk00000003_sig000007ff : STD_LOGIC; 
  signal blk00000003_sig000007fe : STD_LOGIC; 
  signal blk00000003_sig000007fd : STD_LOGIC; 
  signal blk00000003_sig000007fc : STD_LOGIC; 
  signal blk00000003_sig000007fb : STD_LOGIC; 
  signal blk00000003_sig000007fa : STD_LOGIC; 
  signal blk00000003_sig000007f9 : STD_LOGIC; 
  signal blk00000003_sig000007f8 : STD_LOGIC; 
  signal blk00000003_sig000007f7 : STD_LOGIC; 
  signal blk00000003_sig000007f6 : STD_LOGIC; 
  signal blk00000003_sig000007f5 : STD_LOGIC; 
  signal blk00000003_sig000007f4 : STD_LOGIC; 
  signal blk00000003_sig000007f3 : STD_LOGIC; 
  signal blk00000003_sig000007f2 : STD_LOGIC; 
  signal blk00000003_sig000007f1 : STD_LOGIC; 
  signal blk00000003_sig000007f0 : STD_LOGIC; 
  signal blk00000003_sig000007ef : STD_LOGIC; 
  signal blk00000003_sig000007ee : STD_LOGIC; 
  signal blk00000003_sig000007ed : STD_LOGIC; 
  signal blk00000003_sig000007ec : STD_LOGIC; 
  signal blk00000003_sig000007eb : STD_LOGIC; 
  signal blk00000003_sig000007ea : STD_LOGIC; 
  signal blk00000003_sig000007e9 : STD_LOGIC; 
  signal blk00000003_sig000007e8 : STD_LOGIC; 
  signal blk00000003_sig000007e7 : STD_LOGIC; 
  signal blk00000003_sig000007e6 : STD_LOGIC; 
  signal blk00000003_sig000007e5 : STD_LOGIC; 
  signal blk00000003_sig000007e4 : STD_LOGIC; 
  signal blk00000003_sig000007e3 : STD_LOGIC; 
  signal blk00000003_sig000007e2 : STD_LOGIC; 
  signal blk00000003_sig000007e1 : STD_LOGIC; 
  signal blk00000003_sig000007e0 : STD_LOGIC; 
  signal blk00000003_sig000007df : STD_LOGIC; 
  signal blk00000003_sig000007de : STD_LOGIC; 
  signal blk00000003_sig000007dd : STD_LOGIC; 
  signal blk00000003_sig000007dc : STD_LOGIC; 
  signal blk00000003_sig000007db : STD_LOGIC; 
  signal blk00000003_sig000007da : STD_LOGIC; 
  signal blk00000003_sig000007d9 : STD_LOGIC; 
  signal blk00000003_sig000007d8 : STD_LOGIC; 
  signal blk00000003_sig000007d7 : STD_LOGIC; 
  signal blk00000003_sig000007d6 : STD_LOGIC; 
  signal blk00000003_sig000007d5 : STD_LOGIC; 
  signal blk00000003_sig000007d4 : STD_LOGIC; 
  signal blk00000003_sig000007d3 : STD_LOGIC; 
  signal blk00000003_sig000007d2 : STD_LOGIC; 
  signal blk00000003_sig000007d1 : STD_LOGIC; 
  signal blk00000003_sig000007d0 : STD_LOGIC; 
  signal blk00000003_sig000007cf : STD_LOGIC; 
  signal blk00000003_sig000007ce : STD_LOGIC; 
  signal blk00000003_sig000007cd : STD_LOGIC; 
  signal blk00000003_sig000007cc : STD_LOGIC; 
  signal blk00000003_sig000007cb : STD_LOGIC; 
  signal blk00000003_sig000007ca : STD_LOGIC; 
  signal blk00000003_sig000007c9 : STD_LOGIC; 
  signal blk00000003_sig000007c8 : STD_LOGIC; 
  signal blk00000003_sig000007c7 : STD_LOGIC; 
  signal blk00000003_sig000007c6 : STD_LOGIC; 
  signal blk00000003_sig000007c5 : STD_LOGIC; 
  signal blk00000003_sig000007c4 : STD_LOGIC; 
  signal blk00000003_sig000007c3 : STD_LOGIC; 
  signal blk00000003_sig000007c2 : STD_LOGIC; 
  signal blk00000003_sig000007c1 : STD_LOGIC; 
  signal blk00000003_sig000007c0 : STD_LOGIC; 
  signal blk00000003_sig000007bf : STD_LOGIC; 
  signal blk00000003_sig000007be : STD_LOGIC; 
  signal blk00000003_sig000007bd : STD_LOGIC; 
  signal blk00000003_sig000007bc : STD_LOGIC; 
  signal blk00000003_sig000007bb : STD_LOGIC; 
  signal blk00000003_sig000007ba : STD_LOGIC; 
  signal blk00000003_sig000007b9 : STD_LOGIC; 
  signal blk00000003_sig000007b8 : STD_LOGIC; 
  signal blk00000003_sig000007b7 : STD_LOGIC; 
  signal blk00000003_sig000007b6 : STD_LOGIC; 
  signal blk00000003_sig000007b5 : STD_LOGIC; 
  signal blk00000003_sig000007b4 : STD_LOGIC; 
  signal blk00000003_sig000007b3 : STD_LOGIC; 
  signal blk00000003_sig000007b2 : STD_LOGIC; 
  signal blk00000003_sig000007b1 : STD_LOGIC; 
  signal blk00000003_sig000007b0 : STD_LOGIC; 
  signal blk00000003_sig000007af : STD_LOGIC; 
  signal blk00000003_sig000007ae : STD_LOGIC; 
  signal blk00000003_sig000007ad : STD_LOGIC; 
  signal blk00000003_sig000007ac : STD_LOGIC; 
  signal blk00000003_sig000007ab : STD_LOGIC; 
  signal blk00000003_sig000007aa : STD_LOGIC; 
  signal blk00000003_sig000007a9 : STD_LOGIC; 
  signal blk00000003_sig000007a8 : STD_LOGIC; 
  signal blk00000003_sig000007a7 : STD_LOGIC; 
  signal blk00000003_sig000007a6 : STD_LOGIC; 
  signal blk00000003_sig000007a5 : STD_LOGIC; 
  signal blk00000003_sig000007a4 : STD_LOGIC; 
  signal blk00000003_sig000007a3 : STD_LOGIC; 
  signal blk00000003_sig000007a2 : STD_LOGIC; 
  signal blk00000003_sig000007a1 : STD_LOGIC; 
  signal blk00000003_sig000007a0 : STD_LOGIC; 
  signal blk00000003_sig0000079f : STD_LOGIC; 
  signal blk00000003_sig0000079e : STD_LOGIC; 
  signal blk00000003_sig0000079d : STD_LOGIC; 
  signal blk00000003_sig0000079c : STD_LOGIC; 
  signal blk00000003_sig0000079b : STD_LOGIC; 
  signal blk00000003_sig0000079a : STD_LOGIC; 
  signal blk00000003_sig00000799 : STD_LOGIC; 
  signal blk00000003_sig00000798 : STD_LOGIC; 
  signal blk00000003_sig00000797 : STD_LOGIC; 
  signal blk00000003_sig00000796 : STD_LOGIC; 
  signal blk00000003_sig00000795 : STD_LOGIC; 
  signal blk00000003_sig00000794 : STD_LOGIC; 
  signal blk00000003_sig00000793 : STD_LOGIC; 
  signal blk00000003_sig00000792 : STD_LOGIC; 
  signal blk00000003_sig00000791 : STD_LOGIC; 
  signal blk00000003_sig00000790 : STD_LOGIC; 
  signal blk00000003_sig0000078f : STD_LOGIC; 
  signal blk00000003_sig0000078e : STD_LOGIC; 
  signal blk00000003_sig0000078d : STD_LOGIC; 
  signal blk00000003_sig0000078c : STD_LOGIC; 
  signal blk00000003_sig0000078b : STD_LOGIC; 
  signal blk00000003_sig0000078a : STD_LOGIC; 
  signal blk00000003_sig00000789 : STD_LOGIC; 
  signal blk00000003_sig00000788 : STD_LOGIC; 
  signal blk00000003_sig00000787 : STD_LOGIC; 
  signal blk00000003_sig00000786 : STD_LOGIC; 
  signal blk00000003_sig00000785 : STD_LOGIC; 
  signal blk00000003_sig00000784 : STD_LOGIC; 
  signal blk00000003_sig00000783 : STD_LOGIC; 
  signal blk00000003_sig00000782 : STD_LOGIC; 
  signal blk00000003_sig00000781 : STD_LOGIC; 
  signal blk00000003_sig00000780 : STD_LOGIC; 
  signal blk00000003_sig0000077f : STD_LOGIC; 
  signal blk00000003_sig0000077e : STD_LOGIC; 
  signal blk00000003_sig0000077d : STD_LOGIC; 
  signal blk00000003_sig0000077c : STD_LOGIC; 
  signal blk00000003_sig0000077b : STD_LOGIC; 
  signal blk00000003_sig0000077a : STD_LOGIC; 
  signal blk00000003_sig00000779 : STD_LOGIC; 
  signal blk00000003_sig00000778 : STD_LOGIC; 
  signal blk00000003_sig00000777 : STD_LOGIC; 
  signal blk00000003_sig00000776 : STD_LOGIC; 
  signal blk00000003_sig00000775 : STD_LOGIC; 
  signal blk00000003_sig00000774 : STD_LOGIC; 
  signal blk00000003_sig00000773 : STD_LOGIC; 
  signal blk00000003_sig00000772 : STD_LOGIC; 
  signal blk00000003_sig00000771 : STD_LOGIC; 
  signal blk00000003_sig00000770 : STD_LOGIC; 
  signal blk00000003_sig0000076f : STD_LOGIC; 
  signal blk00000003_sig0000076e : STD_LOGIC; 
  signal blk00000003_sig0000076d : STD_LOGIC; 
  signal blk00000003_sig0000076c : STD_LOGIC; 
  signal blk00000003_sig0000076b : STD_LOGIC; 
  signal blk00000003_sig0000076a : STD_LOGIC; 
  signal blk00000003_sig00000769 : STD_LOGIC; 
  signal blk00000003_sig00000768 : STD_LOGIC; 
  signal blk00000003_sig00000767 : STD_LOGIC; 
  signal blk00000003_sig00000766 : STD_LOGIC; 
  signal blk00000003_sig00000765 : STD_LOGIC; 
  signal blk00000003_sig00000764 : STD_LOGIC; 
  signal blk00000003_sig00000763 : STD_LOGIC; 
  signal blk00000003_sig00000762 : STD_LOGIC; 
  signal blk00000003_sig00000761 : STD_LOGIC; 
  signal blk00000003_sig00000760 : STD_LOGIC; 
  signal blk00000003_sig0000075f : STD_LOGIC; 
  signal blk00000003_sig0000075e : STD_LOGIC; 
  signal blk00000003_sig0000075d : STD_LOGIC; 
  signal blk00000003_sig0000075c : STD_LOGIC; 
  signal blk00000003_sig0000075b : STD_LOGIC; 
  signal blk00000003_sig0000075a : STD_LOGIC; 
  signal blk00000003_sig00000759 : STD_LOGIC; 
  signal blk00000003_sig00000758 : STD_LOGIC; 
  signal blk00000003_sig00000757 : STD_LOGIC; 
  signal blk00000003_sig00000756 : STD_LOGIC; 
  signal blk00000003_sig00000755 : STD_LOGIC; 
  signal blk00000003_sig00000754 : STD_LOGIC; 
  signal blk00000003_sig00000753 : STD_LOGIC; 
  signal blk00000003_sig00000752 : STD_LOGIC; 
  signal blk00000003_sig00000751 : STD_LOGIC; 
  signal blk00000003_sig00000750 : STD_LOGIC; 
  signal blk00000003_sig0000074f : STD_LOGIC; 
  signal blk00000003_sig0000074e : STD_LOGIC; 
  signal blk00000003_sig0000074d : STD_LOGIC; 
  signal blk00000003_sig0000074c : STD_LOGIC; 
  signal blk00000003_sig0000074b : STD_LOGIC; 
  signal blk00000003_sig0000074a : STD_LOGIC; 
  signal blk00000003_sig00000749 : STD_LOGIC; 
  signal blk00000003_sig00000748 : STD_LOGIC; 
  signal blk00000003_sig00000747 : STD_LOGIC; 
  signal blk00000003_sig00000746 : STD_LOGIC; 
  signal blk00000003_sig00000745 : STD_LOGIC; 
  signal blk00000003_sig00000744 : STD_LOGIC; 
  signal blk00000003_sig00000743 : STD_LOGIC; 
  signal blk00000003_sig00000742 : STD_LOGIC; 
  signal blk00000003_sig00000741 : STD_LOGIC; 
  signal blk00000003_sig00000740 : STD_LOGIC; 
  signal blk00000003_sig0000073f : STD_LOGIC; 
  signal blk00000003_sig0000073e : STD_LOGIC; 
  signal blk00000003_sig0000073d : STD_LOGIC; 
  signal blk00000003_sig0000073c : STD_LOGIC; 
  signal blk00000003_sig0000073b : STD_LOGIC; 
  signal blk00000003_sig0000073a : STD_LOGIC; 
  signal blk00000003_sig00000739 : STD_LOGIC; 
  signal blk00000003_sig00000738 : STD_LOGIC; 
  signal blk00000003_sig00000737 : STD_LOGIC; 
  signal blk00000003_sig00000736 : STD_LOGIC; 
  signal blk00000003_sig00000735 : STD_LOGIC; 
  signal blk00000003_sig00000734 : STD_LOGIC; 
  signal blk00000003_sig00000733 : STD_LOGIC; 
  signal blk00000003_sig00000732 : STD_LOGIC; 
  signal blk00000003_sig00000731 : STD_LOGIC; 
  signal blk00000003_sig00000730 : STD_LOGIC; 
  signal blk00000003_sig0000072f : STD_LOGIC; 
  signal blk00000003_sig0000072e : STD_LOGIC; 
  signal blk00000003_sig0000072d : STD_LOGIC; 
  signal blk00000003_sig0000072c : STD_LOGIC; 
  signal blk00000003_sig0000072b : STD_LOGIC; 
  signal blk00000003_sig0000072a : STD_LOGIC; 
  signal blk00000003_sig00000729 : STD_LOGIC; 
  signal blk00000003_sig00000728 : STD_LOGIC; 
  signal blk00000003_sig00000727 : STD_LOGIC; 
  signal blk00000003_sig00000726 : STD_LOGIC; 
  signal blk00000003_sig00000725 : STD_LOGIC; 
  signal blk00000003_sig00000724 : STD_LOGIC; 
  signal blk00000003_sig00000723 : STD_LOGIC; 
  signal blk00000003_sig00000722 : STD_LOGIC; 
  signal blk00000003_sig00000721 : STD_LOGIC; 
  signal blk00000003_sig00000720 : STD_LOGIC; 
  signal blk00000003_sig0000071f : STD_LOGIC; 
  signal blk00000003_sig0000071e : STD_LOGIC; 
  signal blk00000003_sig0000071d : STD_LOGIC; 
  signal blk00000003_sig0000071c : STD_LOGIC; 
  signal blk00000003_sig0000071b : STD_LOGIC; 
  signal blk00000003_sig0000071a : STD_LOGIC; 
  signal blk00000003_sig00000719 : STD_LOGIC; 
  signal blk00000003_sig00000718 : STD_LOGIC; 
  signal blk00000003_sig00000717 : STD_LOGIC; 
  signal blk00000003_sig00000716 : STD_LOGIC; 
  signal blk00000003_sig00000715 : STD_LOGIC; 
  signal blk00000003_sig00000714 : STD_LOGIC; 
  signal blk00000003_sig00000713 : STD_LOGIC; 
  signal blk00000003_sig00000712 : STD_LOGIC; 
  signal blk00000003_sig00000711 : STD_LOGIC; 
  signal blk00000003_sig00000710 : STD_LOGIC; 
  signal blk00000003_sig0000070f : STD_LOGIC; 
  signal blk00000003_sig0000070e : STD_LOGIC; 
  signal blk00000003_sig0000070d : STD_LOGIC; 
  signal blk00000003_sig0000070c : STD_LOGIC; 
  signal blk00000003_sig0000070b : STD_LOGIC; 
  signal blk00000003_sig0000070a : STD_LOGIC; 
  signal blk00000003_sig00000709 : STD_LOGIC; 
  signal blk00000003_sig00000708 : STD_LOGIC; 
  signal blk00000003_sig00000707 : STD_LOGIC; 
  signal blk00000003_sig00000706 : STD_LOGIC; 
  signal blk00000003_sig00000705 : STD_LOGIC; 
  signal blk00000003_sig00000704 : STD_LOGIC; 
  signal blk00000003_sig00000703 : STD_LOGIC; 
  signal blk00000003_sig00000702 : STD_LOGIC; 
  signal blk00000003_sig00000701 : STD_LOGIC; 
  signal blk00000003_sig00000700 : STD_LOGIC; 
  signal blk00000003_sig000006ff : STD_LOGIC; 
  signal blk00000003_sig000006fe : STD_LOGIC; 
  signal blk00000003_sig000006fd : STD_LOGIC; 
  signal blk00000003_sig000006fc : STD_LOGIC; 
  signal blk00000003_sig000006fb : STD_LOGIC; 
  signal blk00000003_sig000006fa : STD_LOGIC; 
  signal blk00000003_sig000006f9 : STD_LOGIC; 
  signal blk00000003_sig000006f8 : STD_LOGIC; 
  signal blk00000003_sig000006f7 : STD_LOGIC; 
  signal blk00000003_sig000006f6 : STD_LOGIC; 
  signal blk00000003_sig000006f5 : STD_LOGIC; 
  signal blk00000003_sig000006f4 : STD_LOGIC; 
  signal blk00000003_sig000006f3 : STD_LOGIC; 
  signal blk00000003_sig000006f2 : STD_LOGIC; 
  signal blk00000003_sig000006f1 : STD_LOGIC; 
  signal blk00000003_sig000006f0 : STD_LOGIC; 
  signal blk00000003_sig000006ef : STD_LOGIC; 
  signal blk00000003_sig000006ee : STD_LOGIC; 
  signal blk00000003_sig000006ed : STD_LOGIC; 
  signal blk00000003_sig000006ec : STD_LOGIC; 
  signal blk00000003_sig000006eb : STD_LOGIC; 
  signal blk00000003_sig000006ea : STD_LOGIC; 
  signal blk00000003_sig000006e9 : STD_LOGIC; 
  signal blk00000003_sig000006e8 : STD_LOGIC; 
  signal blk00000003_sig000006e7 : STD_LOGIC; 
  signal blk00000003_sig000006e6 : STD_LOGIC; 
  signal blk00000003_sig000006e5 : STD_LOGIC; 
  signal blk00000003_sig000006e4 : STD_LOGIC; 
  signal blk00000003_sig000006e3 : STD_LOGIC; 
  signal blk00000003_sig000006e2 : STD_LOGIC; 
  signal blk00000003_sig000006e1 : STD_LOGIC; 
  signal blk00000003_sig000006e0 : STD_LOGIC; 
  signal blk00000003_sig000006df : STD_LOGIC; 
  signal blk00000003_sig000006de : STD_LOGIC; 
  signal blk00000003_sig000006dd : STD_LOGIC; 
  signal blk00000003_sig000006dc : STD_LOGIC; 
  signal blk00000003_sig000006db : STD_LOGIC; 
  signal blk00000003_sig000006da : STD_LOGIC; 
  signal blk00000003_sig000006d9 : STD_LOGIC; 
  signal blk00000003_sig000006d8 : STD_LOGIC; 
  signal blk00000003_sig000006d7 : STD_LOGIC; 
  signal blk00000003_sig000006d6 : STD_LOGIC; 
  signal blk00000003_sig000006d5 : STD_LOGIC; 
  signal blk00000003_sig000006d4 : STD_LOGIC; 
  signal blk00000003_sig000006d3 : STD_LOGIC; 
  signal blk00000003_sig000006d2 : STD_LOGIC; 
  signal blk00000003_sig000006d1 : STD_LOGIC; 
  signal blk00000003_sig000006d0 : STD_LOGIC; 
  signal blk00000003_sig000006cf : STD_LOGIC; 
  signal blk00000003_sig000006ce : STD_LOGIC; 
  signal blk00000003_sig000006cd : STD_LOGIC; 
  signal blk00000003_sig000006cc : STD_LOGIC; 
  signal blk00000003_sig000006cb : STD_LOGIC; 
  signal blk00000003_sig000006ca : STD_LOGIC; 
  signal blk00000003_sig000006c9 : STD_LOGIC; 
  signal blk00000003_sig000006c8 : STD_LOGIC; 
  signal blk00000003_sig000006c7 : STD_LOGIC; 
  signal blk00000003_sig000006c6 : STD_LOGIC; 
  signal blk00000003_sig000006c5 : STD_LOGIC; 
  signal blk00000003_sig000006c4 : STD_LOGIC; 
  signal blk00000003_sig000006c3 : STD_LOGIC; 
  signal blk00000003_sig000006c2 : STD_LOGIC; 
  signal blk00000003_sig000006c1 : STD_LOGIC; 
  signal blk00000003_sig000006c0 : STD_LOGIC; 
  signal blk00000003_sig000006bf : STD_LOGIC; 
  signal blk00000003_sig000006be : STD_LOGIC; 
  signal blk00000003_sig000006bd : STD_LOGIC; 
  signal blk00000003_sig000006bc : STD_LOGIC; 
  signal blk00000003_sig000006bb : STD_LOGIC; 
  signal blk00000003_sig000006ba : STD_LOGIC; 
  signal blk00000003_sig000006b9 : STD_LOGIC; 
  signal blk00000003_sig000006b8 : STD_LOGIC; 
  signal blk00000003_sig000006b7 : STD_LOGIC; 
  signal blk00000003_sig000006b6 : STD_LOGIC; 
  signal blk00000003_sig000006b5 : STD_LOGIC; 
  signal blk00000003_sig000006b4 : STD_LOGIC; 
  signal blk00000003_sig000006b3 : STD_LOGIC; 
  signal blk00000003_sig000006b2 : STD_LOGIC; 
  signal blk00000003_sig000006b1 : STD_LOGIC; 
  signal blk00000003_sig000006b0 : STD_LOGIC; 
  signal blk00000003_sig000006af : STD_LOGIC; 
  signal blk00000003_sig000006ae : STD_LOGIC; 
  signal blk00000003_sig000006ad : STD_LOGIC; 
  signal blk00000003_sig000006ac : STD_LOGIC; 
  signal blk00000003_sig000006ab : STD_LOGIC; 
  signal blk00000003_sig000006aa : STD_LOGIC; 
  signal blk00000003_sig000006a9 : STD_LOGIC; 
  signal blk00000003_sig000006a8 : STD_LOGIC; 
  signal blk00000003_sig000006a7 : STD_LOGIC; 
  signal blk00000003_sig000006a6 : STD_LOGIC; 
  signal blk00000003_sig000006a5 : STD_LOGIC; 
  signal blk00000003_sig000006a4 : STD_LOGIC; 
  signal blk00000003_sig000006a3 : STD_LOGIC; 
  signal blk00000003_sig000006a2 : STD_LOGIC; 
  signal blk00000003_sig000006a1 : STD_LOGIC; 
  signal blk00000003_sig000006a0 : STD_LOGIC; 
  signal blk00000003_sig0000069f : STD_LOGIC; 
  signal blk00000003_sig0000069e : STD_LOGIC; 
  signal blk00000003_sig0000069d : STD_LOGIC; 
  signal blk00000003_sig0000069c : STD_LOGIC; 
  signal blk00000003_sig0000069b : STD_LOGIC; 
  signal blk00000003_sig0000069a : STD_LOGIC; 
  signal blk00000003_sig00000699 : STD_LOGIC; 
  signal blk00000003_sig00000698 : STD_LOGIC; 
  signal blk00000003_sig00000697 : STD_LOGIC; 
  signal blk00000003_sig00000696 : STD_LOGIC; 
  signal blk00000003_sig00000695 : STD_LOGIC; 
  signal blk00000003_sig00000694 : STD_LOGIC; 
  signal blk00000003_sig00000693 : STD_LOGIC; 
  signal blk00000003_sig00000692 : STD_LOGIC; 
  signal blk00000003_sig00000691 : STD_LOGIC; 
  signal blk00000003_sig00000690 : STD_LOGIC; 
  signal blk00000003_sig0000068f : STD_LOGIC; 
  signal blk00000003_sig0000068e : STD_LOGIC; 
  signal blk00000003_sig0000068d : STD_LOGIC; 
  signal blk00000003_sig0000068c : STD_LOGIC; 
  signal blk00000003_sig0000068b : STD_LOGIC; 
  signal blk00000003_sig0000068a : STD_LOGIC; 
  signal blk00000003_sig00000689 : STD_LOGIC; 
  signal blk00000003_sig00000688 : STD_LOGIC; 
  signal blk00000003_sig00000687 : STD_LOGIC; 
  signal blk00000003_sig00000686 : STD_LOGIC; 
  signal blk00000003_sig00000685 : STD_LOGIC; 
  signal blk00000003_sig00000684 : STD_LOGIC; 
  signal blk00000003_sig00000683 : STD_LOGIC; 
  signal blk00000003_sig00000682 : STD_LOGIC; 
  signal blk00000003_sig00000681 : STD_LOGIC; 
  signal blk00000003_sig00000680 : STD_LOGIC; 
  signal blk00000003_sig0000067f : STD_LOGIC; 
  signal blk00000003_sig0000067e : STD_LOGIC; 
  signal blk00000003_sig0000067d : STD_LOGIC; 
  signal blk00000003_sig0000067c : STD_LOGIC; 
  signal blk00000003_sig0000067b : STD_LOGIC; 
  signal blk00000003_sig0000067a : STD_LOGIC; 
  signal blk00000003_sig00000679 : STD_LOGIC; 
  signal blk00000003_sig00000678 : STD_LOGIC; 
  signal blk00000003_sig00000677 : STD_LOGIC; 
  signal blk00000003_sig00000676 : STD_LOGIC; 
  signal blk00000003_sig00000675 : STD_LOGIC; 
  signal blk00000003_sig00000674 : STD_LOGIC; 
  signal blk00000003_sig00000673 : STD_LOGIC; 
  signal blk00000003_sig00000672 : STD_LOGIC; 
  signal blk00000003_sig00000671 : STD_LOGIC; 
  signal blk00000003_sig00000670 : STD_LOGIC; 
  signal blk00000003_sig0000066f : STD_LOGIC; 
  signal blk00000003_sig0000066e : STD_LOGIC; 
  signal blk00000003_sig0000066d : STD_LOGIC; 
  signal blk00000003_sig0000066c : STD_LOGIC; 
  signal blk00000003_sig0000066b : STD_LOGIC; 
  signal blk00000003_sig0000066a : STD_LOGIC; 
  signal blk00000003_sig00000669 : STD_LOGIC; 
  signal blk00000003_sig00000668 : STD_LOGIC; 
  signal blk00000003_sig00000667 : STD_LOGIC; 
  signal blk00000003_sig00000666 : STD_LOGIC; 
  signal blk00000003_sig00000665 : STD_LOGIC; 
  signal blk00000003_sig00000664 : STD_LOGIC; 
  signal blk00000003_sig00000663 : STD_LOGIC; 
  signal blk00000003_sig00000662 : STD_LOGIC; 
  signal blk00000003_sig00000661 : STD_LOGIC; 
  signal blk00000003_sig00000660 : STD_LOGIC; 
  signal blk00000003_sig0000065f : STD_LOGIC; 
  signal blk00000003_sig0000065e : STD_LOGIC; 
  signal blk00000003_sig0000065d : STD_LOGIC; 
  signal blk00000003_sig0000065c : STD_LOGIC; 
  signal blk00000003_sig0000065b : STD_LOGIC; 
  signal blk00000003_sig0000065a : STD_LOGIC; 
  signal blk00000003_sig00000659 : STD_LOGIC; 
  signal blk00000003_sig00000658 : STD_LOGIC; 
  signal blk00000003_sig00000657 : STD_LOGIC; 
  signal blk00000003_sig00000656 : STD_LOGIC; 
  signal blk00000003_sig00000655 : STD_LOGIC; 
  signal blk00000003_sig00000654 : STD_LOGIC; 
  signal blk00000003_sig00000653 : STD_LOGIC; 
  signal blk00000003_sig00000652 : STD_LOGIC; 
  signal blk00000003_sig00000651 : STD_LOGIC; 
  signal blk00000003_sig00000650 : STD_LOGIC; 
  signal blk00000003_sig0000064f : STD_LOGIC; 
  signal blk00000003_sig0000064e : STD_LOGIC; 
  signal blk00000003_sig0000064d : STD_LOGIC; 
  signal blk00000003_sig0000064c : STD_LOGIC; 
  signal blk00000003_sig0000064b : STD_LOGIC; 
  signal blk00000003_sig0000064a : STD_LOGIC; 
  signal blk00000003_sig00000649 : STD_LOGIC; 
  signal blk00000003_sig00000648 : STD_LOGIC; 
  signal blk00000003_sig00000647 : STD_LOGIC; 
  signal blk00000003_sig00000646 : STD_LOGIC; 
  signal blk00000003_sig00000645 : STD_LOGIC; 
  signal blk00000003_sig00000644 : STD_LOGIC; 
  signal blk00000003_sig00000643 : STD_LOGIC; 
  signal blk00000003_sig00000642 : STD_LOGIC; 
  signal blk00000003_sig00000641 : STD_LOGIC; 
  signal blk00000003_sig00000640 : STD_LOGIC; 
  signal blk00000003_sig0000063f : STD_LOGIC; 
  signal blk00000003_sig0000063e : STD_LOGIC; 
  signal blk00000003_sig0000063d : STD_LOGIC; 
  signal blk00000003_sig0000063c : STD_LOGIC; 
  signal blk00000003_sig0000063b : STD_LOGIC; 
  signal blk00000003_sig0000063a : STD_LOGIC; 
  signal blk00000003_sig00000639 : STD_LOGIC; 
  signal blk00000003_sig00000638 : STD_LOGIC; 
  signal blk00000003_sig00000637 : STD_LOGIC; 
  signal blk00000003_sig00000636 : STD_LOGIC; 
  signal blk00000003_sig00000635 : STD_LOGIC; 
  signal blk00000003_sig00000634 : STD_LOGIC; 
  signal blk00000003_sig00000633 : STD_LOGIC; 
  signal blk00000003_sig00000632 : STD_LOGIC; 
  signal blk00000003_sig00000631 : STD_LOGIC; 
  signal blk00000003_sig00000630 : STD_LOGIC; 
  signal blk00000003_sig0000062f : STD_LOGIC; 
  signal blk00000003_sig0000062e : STD_LOGIC; 
  signal blk00000003_sig0000062d : STD_LOGIC; 
  signal blk00000003_sig0000062c : STD_LOGIC; 
  signal blk00000003_sig0000062b : STD_LOGIC; 
  signal blk00000003_sig0000062a : STD_LOGIC; 
  signal blk00000003_sig00000629 : STD_LOGIC; 
  signal blk00000003_sig00000628 : STD_LOGIC; 
  signal blk00000003_sig00000627 : STD_LOGIC; 
  signal blk00000003_sig00000626 : STD_LOGIC; 
  signal blk00000003_sig00000625 : STD_LOGIC; 
  signal blk00000003_sig00000624 : STD_LOGIC; 
  signal blk00000003_sig00000623 : STD_LOGIC; 
  signal blk00000003_sig00000622 : STD_LOGIC; 
  signal blk00000003_sig00000621 : STD_LOGIC; 
  signal blk00000003_sig00000620 : STD_LOGIC; 
  signal blk00000003_sig0000061f : STD_LOGIC; 
  signal blk00000003_sig0000061e : STD_LOGIC; 
  signal blk00000003_sig0000061d : STD_LOGIC; 
  signal blk00000003_sig0000061c : STD_LOGIC; 
  signal blk00000003_sig0000061b : STD_LOGIC; 
  signal blk00000003_sig0000061a : STD_LOGIC; 
  signal blk00000003_sig00000619 : STD_LOGIC; 
  signal blk00000003_sig00000618 : STD_LOGIC; 
  signal blk00000003_sig00000617 : STD_LOGIC; 
  signal blk00000003_sig00000616 : STD_LOGIC; 
  signal blk00000003_sig00000615 : STD_LOGIC; 
  signal blk00000003_sig00000614 : STD_LOGIC; 
  signal blk00000003_sig00000613 : STD_LOGIC; 
  signal blk00000003_sig00000612 : STD_LOGIC; 
  signal blk00000003_sig00000611 : STD_LOGIC; 
  signal blk00000003_sig00000610 : STD_LOGIC; 
  signal blk00000003_sig0000060f : STD_LOGIC; 
  signal blk00000003_sig0000060e : STD_LOGIC; 
  signal blk00000003_sig0000060d : STD_LOGIC; 
  signal blk00000003_sig0000060c : STD_LOGIC; 
  signal blk00000003_sig0000060b : STD_LOGIC; 
  signal blk00000003_sig0000060a : STD_LOGIC; 
  signal blk00000003_sig00000609 : STD_LOGIC; 
  signal blk00000003_sig00000608 : STD_LOGIC; 
  signal blk00000003_sig00000607 : STD_LOGIC; 
  signal blk00000003_sig00000606 : STD_LOGIC; 
  signal blk00000003_sig00000605 : STD_LOGIC; 
  signal blk00000003_sig00000604 : STD_LOGIC; 
  signal blk00000003_sig00000603 : STD_LOGIC; 
  signal blk00000003_sig00000602 : STD_LOGIC; 
  signal blk00000003_sig00000601 : STD_LOGIC; 
  signal blk00000003_sig00000600 : STD_LOGIC; 
  signal blk00000003_sig000005ff : STD_LOGIC; 
  signal blk00000003_sig000005fe : STD_LOGIC; 
  signal blk00000003_sig000005fd : STD_LOGIC; 
  signal blk00000003_sig000005fc : STD_LOGIC; 
  signal blk00000003_sig000005fb : STD_LOGIC; 
  signal blk00000003_sig000005fa : STD_LOGIC; 
  signal blk00000003_sig000005f9 : STD_LOGIC; 
  signal blk00000003_sig000005f8 : STD_LOGIC; 
  signal blk00000003_sig000005f7 : STD_LOGIC; 
  signal blk00000003_sig000005f6 : STD_LOGIC; 
  signal blk00000003_sig000005f5 : STD_LOGIC; 
  signal blk00000003_sig000005f4 : STD_LOGIC; 
  signal blk00000003_sig000005f3 : STD_LOGIC; 
  signal blk00000003_sig000005f2 : STD_LOGIC; 
  signal blk00000003_sig000005f1 : STD_LOGIC; 
  signal blk00000003_sig000005f0 : STD_LOGIC; 
  signal blk00000003_sig000005ef : STD_LOGIC; 
  signal blk00000003_sig000005ee : STD_LOGIC; 
  signal blk00000003_sig000005ed : STD_LOGIC; 
  signal blk00000003_sig000005ec : STD_LOGIC; 
  signal blk00000003_sig000005eb : STD_LOGIC; 
  signal blk00000003_sig000005ea : STD_LOGIC; 
  signal blk00000003_sig000005e9 : STD_LOGIC; 
  signal blk00000003_sig000005e8 : STD_LOGIC; 
  signal blk00000003_sig000005e7 : STD_LOGIC; 
  signal blk00000003_sig000005e6 : STD_LOGIC; 
  signal blk00000003_sig000005e5 : STD_LOGIC; 
  signal blk00000003_sig000005e4 : STD_LOGIC; 
  signal blk00000003_sig000005e3 : STD_LOGIC; 
  signal blk00000003_sig000005e2 : STD_LOGIC; 
  signal blk00000003_sig000005e1 : STD_LOGIC; 
  signal blk00000003_sig000005e0 : STD_LOGIC; 
  signal blk00000003_sig000005df : STD_LOGIC; 
  signal blk00000003_sig000005de : STD_LOGIC; 
  signal blk00000003_sig000005dd : STD_LOGIC; 
  signal blk00000003_sig000005dc : STD_LOGIC; 
  signal blk00000003_sig000005db : STD_LOGIC; 
  signal blk00000003_sig000005da : STD_LOGIC; 
  signal blk00000003_sig000005d9 : STD_LOGIC; 
  signal blk00000003_sig000005d8 : STD_LOGIC; 
  signal blk00000003_sig000005d7 : STD_LOGIC; 
  signal blk00000003_sig000005d6 : STD_LOGIC; 
  signal blk00000003_sig000005d5 : STD_LOGIC; 
  signal blk00000003_sig000005d4 : STD_LOGIC; 
  signal blk00000003_sig000005d3 : STD_LOGIC; 
  signal blk00000003_sig000005d2 : STD_LOGIC; 
  signal blk00000003_sig000005d1 : STD_LOGIC; 
  signal blk00000003_sig000005d0 : STD_LOGIC; 
  signal blk00000003_sig000005cf : STD_LOGIC; 
  signal blk00000003_sig000005ce : STD_LOGIC; 
  signal blk00000003_sig000005cd : STD_LOGIC; 
  signal blk00000003_sig000005cc : STD_LOGIC; 
  signal blk00000003_sig000005cb : STD_LOGIC; 
  signal blk00000003_sig000005ca : STD_LOGIC; 
  signal blk00000003_sig000005c9 : STD_LOGIC; 
  signal blk00000003_sig000005c8 : STD_LOGIC; 
  signal blk00000003_sig000005c7 : STD_LOGIC; 
  signal blk00000003_sig000005c6 : STD_LOGIC; 
  signal blk00000003_sig000005c5 : STD_LOGIC; 
  signal blk00000003_sig000005c4 : STD_LOGIC; 
  signal blk00000003_sig000005c3 : STD_LOGIC; 
  signal blk00000003_sig000005c2 : STD_LOGIC; 
  signal blk00000003_sig000005c1 : STD_LOGIC; 
  signal blk00000003_sig000005c0 : STD_LOGIC; 
  signal blk00000003_sig000005bf : STD_LOGIC; 
  signal blk00000003_sig000005be : STD_LOGIC; 
  signal blk00000003_sig000005bd : STD_LOGIC; 
  signal blk00000003_sig000005bc : STD_LOGIC; 
  signal blk00000003_sig000005bb : STD_LOGIC; 
  signal blk00000003_sig000005ba : STD_LOGIC; 
  signal blk00000003_sig000005b9 : STD_LOGIC; 
  signal blk00000003_sig000005b8 : STD_LOGIC; 
  signal blk00000003_sig000005b7 : STD_LOGIC; 
  signal blk00000003_sig000005b6 : STD_LOGIC; 
  signal blk00000003_sig000005b5 : STD_LOGIC; 
  signal blk00000003_sig000005b4 : STD_LOGIC; 
  signal blk00000003_sig000005b3 : STD_LOGIC; 
  signal blk00000003_sig000005b2 : STD_LOGIC; 
  signal blk00000003_sig000005b1 : STD_LOGIC; 
  signal blk00000003_sig000005b0 : STD_LOGIC; 
  signal blk00000003_sig000005af : STD_LOGIC; 
  signal blk00000003_sig000005ae : STD_LOGIC; 
  signal blk00000003_sig000005ad : STD_LOGIC; 
  signal blk00000003_sig000005ac : STD_LOGIC; 
  signal blk00000003_sig000005ab : STD_LOGIC; 
  signal blk00000003_sig000005aa : STD_LOGIC; 
  signal blk00000003_sig000005a9 : STD_LOGIC; 
  signal blk00000003_sig000005a8 : STD_LOGIC; 
  signal blk00000003_sig000005a7 : STD_LOGIC; 
  signal blk00000003_sig000005a6 : STD_LOGIC; 
  signal blk00000003_sig000005a5 : STD_LOGIC; 
  signal blk00000003_sig000005a4 : STD_LOGIC; 
  signal blk00000003_sig000005a3 : STD_LOGIC; 
  signal blk00000003_sig000005a2 : STD_LOGIC; 
  signal blk00000003_sig000005a1 : STD_LOGIC; 
  signal blk00000003_sig000005a0 : STD_LOGIC; 
  signal blk00000003_sig0000059f : STD_LOGIC; 
  signal blk00000003_sig0000059e : STD_LOGIC; 
  signal blk00000003_sig0000059d : STD_LOGIC; 
  signal blk00000003_sig0000059c : STD_LOGIC; 
  signal blk00000003_sig0000059b : STD_LOGIC; 
  signal blk00000003_sig0000059a : STD_LOGIC; 
  signal blk00000003_sig00000599 : STD_LOGIC; 
  signal blk00000003_sig00000598 : STD_LOGIC; 
  signal blk00000003_sig00000597 : STD_LOGIC; 
  signal blk00000003_sig00000596 : STD_LOGIC; 
  signal blk00000003_sig00000595 : STD_LOGIC; 
  signal blk00000003_sig00000594 : STD_LOGIC; 
  signal blk00000003_sig00000593 : STD_LOGIC; 
  signal blk00000003_sig00000592 : STD_LOGIC; 
  signal blk00000003_sig00000591 : STD_LOGIC; 
  signal blk00000003_sig00000590 : STD_LOGIC; 
  signal blk00000003_sig0000058f : STD_LOGIC; 
  signal blk00000003_sig0000058e : STD_LOGIC; 
  signal blk00000003_sig0000058d : STD_LOGIC; 
  signal blk00000003_sig0000058c : STD_LOGIC; 
  signal blk00000003_sig0000058b : STD_LOGIC; 
  signal blk00000003_sig0000058a : STD_LOGIC; 
  signal blk00000003_sig00000589 : STD_LOGIC; 
  signal blk00000003_sig00000588 : STD_LOGIC; 
  signal blk00000003_sig00000587 : STD_LOGIC; 
  signal blk00000003_sig00000586 : STD_LOGIC; 
  signal blk00000003_sig00000585 : STD_LOGIC; 
  signal blk00000003_sig00000584 : STD_LOGIC; 
  signal blk00000003_sig00000583 : STD_LOGIC; 
  signal blk00000003_sig00000582 : STD_LOGIC; 
  signal blk00000003_sig00000581 : STD_LOGIC; 
  signal blk00000003_sig00000580 : STD_LOGIC; 
  signal blk00000003_sig0000057f : STD_LOGIC; 
  signal blk00000003_sig0000057e : STD_LOGIC; 
  signal blk00000003_sig0000057d : STD_LOGIC; 
  signal blk00000003_sig0000057c : STD_LOGIC; 
  signal blk00000003_sig0000057b : STD_LOGIC; 
  signal blk00000003_sig0000057a : STD_LOGIC; 
  signal blk00000003_sig00000579 : STD_LOGIC; 
  signal blk00000003_sig00000578 : STD_LOGIC; 
  signal blk00000003_sig00000577 : STD_LOGIC; 
  signal blk00000003_sig00000576 : STD_LOGIC; 
  signal blk00000003_sig00000575 : STD_LOGIC; 
  signal blk00000003_sig00000574 : STD_LOGIC; 
  signal blk00000003_sig00000573 : STD_LOGIC; 
  signal blk00000003_sig00000572 : STD_LOGIC; 
  signal blk00000003_sig00000571 : STD_LOGIC; 
  signal blk00000003_sig00000570 : STD_LOGIC; 
  signal blk00000003_sig0000056f : STD_LOGIC; 
  signal blk00000003_sig0000056e : STD_LOGIC; 
  signal blk00000003_sig0000056d : STD_LOGIC; 
  signal blk00000003_sig0000056c : STD_LOGIC; 
  signal blk00000003_sig0000056b : STD_LOGIC; 
  signal blk00000003_sig0000056a : STD_LOGIC; 
  signal blk00000003_sig00000569 : STD_LOGIC; 
  signal blk00000003_sig00000568 : STD_LOGIC; 
  signal blk00000003_sig00000567 : STD_LOGIC; 
  signal blk00000003_sig00000566 : STD_LOGIC; 
  signal blk00000003_sig00000565 : STD_LOGIC; 
  signal blk00000003_sig00000564 : STD_LOGIC; 
  signal blk00000003_sig00000563 : STD_LOGIC; 
  signal blk00000003_sig00000562 : STD_LOGIC; 
  signal blk00000003_sig00000561 : STD_LOGIC; 
  signal blk00000003_sig00000560 : STD_LOGIC; 
  signal blk00000003_sig0000055f : STD_LOGIC; 
  signal blk00000003_sig0000055e : STD_LOGIC; 
  signal blk00000003_sig0000055d : STD_LOGIC; 
  signal blk00000003_sig0000055c : STD_LOGIC; 
  signal blk00000003_sig0000055b : STD_LOGIC; 
  signal blk00000003_sig0000055a : STD_LOGIC; 
  signal blk00000003_sig00000559 : STD_LOGIC; 
  signal blk00000003_sig00000558 : STD_LOGIC; 
  signal blk00000003_sig00000557 : STD_LOGIC; 
  signal blk00000003_sig00000556 : STD_LOGIC; 
  signal blk00000003_sig00000555 : STD_LOGIC; 
  signal blk00000003_sig00000554 : STD_LOGIC; 
  signal blk00000003_sig00000553 : STD_LOGIC; 
  signal blk00000003_sig00000552 : STD_LOGIC; 
  signal blk00000003_sig00000551 : STD_LOGIC; 
  signal blk00000003_sig00000550 : STD_LOGIC; 
  signal blk00000003_sig0000054f : STD_LOGIC; 
  signal blk00000003_sig0000054e : STD_LOGIC; 
  signal blk00000003_sig0000054d : STD_LOGIC; 
  signal blk00000003_sig0000054c : STD_LOGIC; 
  signal blk00000003_sig0000054b : STD_LOGIC; 
  signal blk00000003_sig0000054a : STD_LOGIC; 
  signal blk00000003_sig00000549 : STD_LOGIC; 
  signal blk00000003_sig00000548 : STD_LOGIC; 
  signal blk00000003_sig00000547 : STD_LOGIC; 
  signal blk00000003_sig00000546 : STD_LOGIC; 
  signal blk00000003_sig00000545 : STD_LOGIC; 
  signal blk00000003_sig00000544 : STD_LOGIC; 
  signal blk00000003_sig00000543 : STD_LOGIC; 
  signal blk00000003_sig00000542 : STD_LOGIC; 
  signal blk00000003_sig00000541 : STD_LOGIC; 
  signal blk00000003_sig00000540 : STD_LOGIC; 
  signal blk00000003_sig0000053f : STD_LOGIC; 
  signal blk00000003_sig0000053e : STD_LOGIC; 
  signal blk00000003_sig0000053d : STD_LOGIC; 
  signal blk00000003_sig0000053c : STD_LOGIC; 
  signal blk00000003_sig0000053b : STD_LOGIC; 
  signal blk00000003_sig0000053a : STD_LOGIC; 
  signal blk00000003_sig00000539 : STD_LOGIC; 
  signal blk00000003_sig00000538 : STD_LOGIC; 
  signal blk00000003_sig00000537 : STD_LOGIC; 
  signal blk00000003_sig00000536 : STD_LOGIC; 
  signal blk00000003_sig00000535 : STD_LOGIC; 
  signal blk00000003_sig00000534 : STD_LOGIC; 
  signal blk00000003_sig00000533 : STD_LOGIC; 
  signal blk00000003_sig00000532 : STD_LOGIC; 
  signal blk00000003_sig00000531 : STD_LOGIC; 
  signal blk00000003_sig00000530 : STD_LOGIC; 
  signal blk00000003_sig0000052f : STD_LOGIC; 
  signal blk00000003_sig0000052e : STD_LOGIC; 
  signal blk00000003_sig0000052d : STD_LOGIC; 
  signal blk00000003_sig0000052c : STD_LOGIC; 
  signal blk00000003_sig0000052b : STD_LOGIC; 
  signal blk00000003_sig0000052a : STD_LOGIC; 
  signal blk00000003_sig00000529 : STD_LOGIC; 
  signal blk00000003_sig00000528 : STD_LOGIC; 
  signal blk00000003_sig00000527 : STD_LOGIC; 
  signal blk00000003_sig00000526 : STD_LOGIC; 
  signal blk00000003_sig00000525 : STD_LOGIC; 
  signal blk00000003_sig00000524 : STD_LOGIC; 
  signal blk00000003_sig00000523 : STD_LOGIC; 
  signal blk00000003_sig00000522 : STD_LOGIC; 
  signal blk00000003_sig00000521 : STD_LOGIC; 
  signal blk00000003_sig00000520 : STD_LOGIC; 
  signal blk00000003_sig0000051f : STD_LOGIC; 
  signal blk00000003_sig0000051e : STD_LOGIC; 
  signal blk00000003_sig0000051d : STD_LOGIC; 
  signal blk00000003_sig0000051c : STD_LOGIC; 
  signal blk00000003_sig0000051b : STD_LOGIC; 
  signal blk00000003_sig0000051a : STD_LOGIC; 
  signal blk00000003_sig00000519 : STD_LOGIC; 
  signal blk00000003_sig00000518 : STD_LOGIC; 
  signal blk00000003_sig00000517 : STD_LOGIC; 
  signal blk00000003_sig00000516 : STD_LOGIC; 
  signal blk00000003_sig00000515 : STD_LOGIC; 
  signal blk00000003_sig00000514 : STD_LOGIC; 
  signal blk00000003_sig00000513 : STD_LOGIC; 
  signal blk00000003_sig00000512 : STD_LOGIC; 
  signal blk00000003_sig00000511 : STD_LOGIC; 
  signal blk00000003_sig00000510 : STD_LOGIC; 
  signal blk00000003_sig0000050f : STD_LOGIC; 
  signal blk00000003_sig0000050e : STD_LOGIC; 
  signal blk00000003_sig0000050d : STD_LOGIC; 
  signal blk00000003_sig0000050c : STD_LOGIC; 
  signal blk00000003_sig0000050b : STD_LOGIC; 
  signal blk00000003_sig0000050a : STD_LOGIC; 
  signal blk00000003_sig00000509 : STD_LOGIC; 
  signal blk00000003_sig00000508 : STD_LOGIC; 
  signal blk00000003_sig00000507 : STD_LOGIC; 
  signal blk00000003_sig00000506 : STD_LOGIC; 
  signal blk00000003_sig00000505 : STD_LOGIC; 
  signal blk00000003_sig00000504 : STD_LOGIC; 
  signal blk00000003_sig00000503 : STD_LOGIC; 
  signal blk00000003_sig00000502 : STD_LOGIC; 
  signal blk00000003_sig00000501 : STD_LOGIC; 
  signal blk00000003_sig00000500 : STD_LOGIC; 
  signal blk00000003_sig000004ff : STD_LOGIC; 
  signal blk00000003_sig000004fe : STD_LOGIC; 
  signal blk00000003_sig000004fd : STD_LOGIC; 
  signal blk00000003_sig000004fc : STD_LOGIC; 
  signal blk00000003_sig000004fb : STD_LOGIC; 
  signal blk00000003_sig000004fa : STD_LOGIC; 
  signal blk00000003_sig000004f9 : STD_LOGIC; 
  signal blk00000003_sig000004f8 : STD_LOGIC; 
  signal blk00000003_sig000004f7 : STD_LOGIC; 
  signal blk00000003_sig000004f6 : STD_LOGIC; 
  signal blk00000003_sig000004f5 : STD_LOGIC; 
  signal blk00000003_sig000004f4 : STD_LOGIC; 
  signal blk00000003_sig000004f3 : STD_LOGIC; 
  signal blk00000003_sig000004f2 : STD_LOGIC; 
  signal blk00000003_sig000004f1 : STD_LOGIC; 
  signal blk00000003_sig000004f0 : STD_LOGIC; 
  signal blk00000003_sig000004ef : STD_LOGIC; 
  signal blk00000003_sig000004ee : STD_LOGIC; 
  signal blk00000003_sig000004ed : STD_LOGIC; 
  signal blk00000003_sig000004ec : STD_LOGIC; 
  signal blk00000003_sig000004eb : STD_LOGIC; 
  signal blk00000003_sig000004ea : STD_LOGIC; 
  signal blk00000003_sig000004e9 : STD_LOGIC; 
  signal blk00000003_sig000004e8 : STD_LOGIC; 
  signal blk00000003_sig000004e7 : STD_LOGIC; 
  signal blk00000003_sig000004e6 : STD_LOGIC; 
  signal blk00000003_sig000004e5 : STD_LOGIC; 
  signal blk00000003_sig000004e4 : STD_LOGIC; 
  signal blk00000003_sig000004e3 : STD_LOGIC; 
  signal blk00000003_sig000004e2 : STD_LOGIC; 
  signal blk00000003_sig000004e1 : STD_LOGIC; 
  signal blk00000003_sig000004e0 : STD_LOGIC; 
  signal blk00000003_sig000004df : STD_LOGIC; 
  signal blk00000003_sig000004de : STD_LOGIC; 
  signal blk00000003_sig000004dd : STD_LOGIC; 
  signal blk00000003_sig000004dc : STD_LOGIC; 
  signal blk00000003_sig000004db : STD_LOGIC; 
  signal blk00000003_sig000004da : STD_LOGIC; 
  signal blk00000003_sig000004d9 : STD_LOGIC; 
  signal blk00000003_sig000004d8 : STD_LOGIC; 
  signal blk00000003_sig000004d7 : STD_LOGIC; 
  signal blk00000003_sig000004d6 : STD_LOGIC; 
  signal blk00000003_sig000004d5 : STD_LOGIC; 
  signal blk00000003_sig000004d4 : STD_LOGIC; 
  signal blk00000003_sig000004d3 : STD_LOGIC; 
  signal blk00000003_sig000004d2 : STD_LOGIC; 
  signal blk00000003_sig000004d1 : STD_LOGIC; 
  signal blk00000003_sig000004d0 : STD_LOGIC; 
  signal blk00000003_sig000004cf : STD_LOGIC; 
  signal blk00000003_sig000004ce : STD_LOGIC; 
  signal blk00000003_sig000004cd : STD_LOGIC; 
  signal blk00000003_sig000004cc : STD_LOGIC; 
  signal blk00000003_sig000004cb : STD_LOGIC; 
  signal blk00000003_sig000004ca : STD_LOGIC; 
  signal blk00000003_sig000004c9 : STD_LOGIC; 
  signal blk00000003_sig000004c8 : STD_LOGIC; 
  signal blk00000003_sig000004c7 : STD_LOGIC; 
  signal blk00000003_sig000004c6 : STD_LOGIC; 
  signal blk00000003_sig000004c5 : STD_LOGIC; 
  signal blk00000003_sig000004c4 : STD_LOGIC; 
  signal blk00000003_sig000004c3 : STD_LOGIC; 
  signal blk00000003_sig000004c2 : STD_LOGIC; 
  signal blk00000003_sig000004c1 : STD_LOGIC; 
  signal blk00000003_sig000004c0 : STD_LOGIC; 
  signal blk00000003_sig000004bf : STD_LOGIC; 
  signal blk00000003_sig000004be : STD_LOGIC; 
  signal blk00000003_sig000004bd : STD_LOGIC; 
  signal blk00000003_sig000004bc : STD_LOGIC; 
  signal blk00000003_sig000004bb : STD_LOGIC; 
  signal blk00000003_sig000004ba : STD_LOGIC; 
  signal blk00000003_sig000004b9 : STD_LOGIC; 
  signal blk00000003_sig000004b8 : STD_LOGIC; 
  signal blk00000003_sig000004b7 : STD_LOGIC; 
  signal blk00000003_sig000004b6 : STD_LOGIC; 
  signal blk00000003_sig000004b5 : STD_LOGIC; 
  signal blk00000003_sig000004b4 : STD_LOGIC; 
  signal blk00000003_sig000004b3 : STD_LOGIC; 
  signal blk00000003_sig000004b2 : STD_LOGIC; 
  signal blk00000003_sig000004b1 : STD_LOGIC; 
  signal blk00000003_sig000004b0 : STD_LOGIC; 
  signal blk00000003_sig000004af : STD_LOGIC; 
  signal blk00000003_sig000004ae : STD_LOGIC; 
  signal blk00000003_sig000004ad : STD_LOGIC; 
  signal blk00000003_sig000004ac : STD_LOGIC; 
  signal blk00000003_sig000004ab : STD_LOGIC; 
  signal blk00000003_sig000004aa : STD_LOGIC; 
  signal blk00000003_sig000004a9 : STD_LOGIC; 
  signal blk00000003_sig000004a8 : STD_LOGIC; 
  signal blk00000003_sig000004a7 : STD_LOGIC; 
  signal blk00000003_sig000004a6 : STD_LOGIC; 
  signal blk00000003_sig000004a5 : STD_LOGIC; 
  signal blk00000003_sig000004a4 : STD_LOGIC; 
  signal blk00000003_sig000004a3 : STD_LOGIC; 
  signal blk00000003_sig000004a2 : STD_LOGIC; 
  signal blk00000003_sig000004a1 : STD_LOGIC; 
  signal blk00000003_sig000004a0 : STD_LOGIC; 
  signal blk00000003_sig0000049f : STD_LOGIC; 
  signal blk00000003_sig0000049e : STD_LOGIC; 
  signal blk00000003_sig0000049d : STD_LOGIC; 
  signal blk00000003_sig0000049c : STD_LOGIC; 
  signal blk00000003_sig0000049b : STD_LOGIC; 
  signal blk00000003_sig0000049a : STD_LOGIC; 
  signal blk00000003_sig00000499 : STD_LOGIC; 
  signal blk00000003_sig00000498 : STD_LOGIC; 
  signal blk00000003_sig00000497 : STD_LOGIC; 
  signal blk00000003_sig00000496 : STD_LOGIC; 
  signal blk00000003_sig00000495 : STD_LOGIC; 
  signal blk00000003_sig00000494 : STD_LOGIC; 
  signal blk00000003_sig00000493 : STD_LOGIC; 
  signal blk00000003_sig00000492 : STD_LOGIC; 
  signal blk00000003_sig00000491 : STD_LOGIC; 
  signal blk00000003_sig00000490 : STD_LOGIC; 
  signal blk00000003_sig0000048f : STD_LOGIC; 
  signal blk00000003_sig0000048e : STD_LOGIC; 
  signal blk00000003_sig0000048d : STD_LOGIC; 
  signal blk00000003_sig0000048c : STD_LOGIC; 
  signal blk00000003_sig0000048b : STD_LOGIC; 
  signal blk00000003_sig0000048a : STD_LOGIC; 
  signal blk00000003_sig00000489 : STD_LOGIC; 
  signal blk00000003_sig00000488 : STD_LOGIC; 
  signal blk00000003_sig00000487 : STD_LOGIC; 
  signal blk00000003_sig00000486 : STD_LOGIC; 
  signal blk00000003_sig00000485 : STD_LOGIC; 
  signal blk00000003_sig00000484 : STD_LOGIC; 
  signal blk00000003_sig00000483 : STD_LOGIC; 
  signal blk00000003_sig00000482 : STD_LOGIC; 
  signal blk00000003_sig00000481 : STD_LOGIC; 
  signal blk00000003_sig00000480 : STD_LOGIC; 
  signal blk00000003_sig0000047f : STD_LOGIC; 
  signal blk00000003_sig0000047e : STD_LOGIC; 
  signal blk00000003_sig0000047d : STD_LOGIC; 
  signal blk00000003_sig0000047c : STD_LOGIC; 
  signal blk00000003_sig0000047b : STD_LOGIC; 
  signal blk00000003_sig0000047a : STD_LOGIC; 
  signal blk00000003_sig00000479 : STD_LOGIC; 
  signal blk00000003_sig00000478 : STD_LOGIC; 
  signal blk00000003_sig00000477 : STD_LOGIC; 
  signal blk00000003_sig00000476 : STD_LOGIC; 
  signal blk00000003_sig00000475 : STD_LOGIC; 
  signal blk00000003_sig00000474 : STD_LOGIC; 
  signal blk00000003_sig00000473 : STD_LOGIC; 
  signal blk00000003_sig00000472 : STD_LOGIC; 
  signal blk00000003_sig00000471 : STD_LOGIC; 
  signal blk00000003_sig00000470 : STD_LOGIC; 
  signal blk00000003_sig0000046f : STD_LOGIC; 
  signal blk00000003_sig0000046e : STD_LOGIC; 
  signal blk00000003_sig0000046d : STD_LOGIC; 
  signal blk00000003_sig0000046c : STD_LOGIC; 
  signal blk00000003_sig0000046b : STD_LOGIC; 
  signal blk00000003_sig0000046a : STD_LOGIC; 
  signal blk00000003_sig00000469 : STD_LOGIC; 
  signal blk00000003_sig00000468 : STD_LOGIC; 
  signal blk00000003_sig00000467 : STD_LOGIC; 
  signal blk00000003_sig00000466 : STD_LOGIC; 
  signal blk00000003_sig00000465 : STD_LOGIC; 
  signal blk00000003_sig00000464 : STD_LOGIC; 
  signal blk00000003_sig00000463 : STD_LOGIC; 
  signal blk00000003_sig00000462 : STD_LOGIC; 
  signal blk00000003_sig00000461 : STD_LOGIC; 
  signal blk00000003_sig00000460 : STD_LOGIC; 
  signal blk00000003_sig0000045f : STD_LOGIC; 
  signal blk00000003_sig0000045e : STD_LOGIC; 
  signal blk00000003_sig0000045d : STD_LOGIC; 
  signal blk00000003_sig0000045c : STD_LOGIC; 
  signal blk00000003_sig0000045b : STD_LOGIC; 
  signal blk00000003_sig0000045a : STD_LOGIC; 
  signal blk00000003_sig00000459 : STD_LOGIC; 
  signal blk00000003_sig00000458 : STD_LOGIC; 
  signal blk00000003_sig00000457 : STD_LOGIC; 
  signal blk00000003_sig00000456 : STD_LOGIC; 
  signal blk00000003_sig00000455 : STD_LOGIC; 
  signal blk00000003_sig00000454 : STD_LOGIC; 
  signal blk00000003_sig00000453 : STD_LOGIC; 
  signal blk00000003_sig00000452 : STD_LOGIC; 
  signal blk00000003_sig00000451 : STD_LOGIC; 
  signal blk00000003_sig00000450 : STD_LOGIC; 
  signal blk00000003_sig0000044f : STD_LOGIC; 
  signal blk00000003_sig0000044e : STD_LOGIC; 
  signal blk00000003_sig0000044d : STD_LOGIC; 
  signal blk00000003_sig0000044c : STD_LOGIC; 
  signal blk00000003_sig0000044b : STD_LOGIC; 
  signal blk00000003_sig0000044a : STD_LOGIC; 
  signal blk00000003_sig00000449 : STD_LOGIC; 
  signal blk00000003_sig00000448 : STD_LOGIC; 
  signal blk00000003_sig00000447 : STD_LOGIC; 
  signal blk00000003_sig00000446 : STD_LOGIC; 
  signal blk00000003_sig00000445 : STD_LOGIC; 
  signal blk00000003_sig00000444 : STD_LOGIC; 
  signal blk00000003_sig00000443 : STD_LOGIC; 
  signal blk00000003_sig00000442 : STD_LOGIC; 
  signal blk00000003_sig00000441 : STD_LOGIC; 
  signal blk00000003_sig00000440 : STD_LOGIC; 
  signal blk00000003_sig0000043f : STD_LOGIC; 
  signal blk00000003_sig0000043e : STD_LOGIC; 
  signal blk00000003_sig0000043d : STD_LOGIC; 
  signal blk00000003_sig0000043c : STD_LOGIC; 
  signal blk00000003_sig0000043b : STD_LOGIC; 
  signal blk00000003_sig0000043a : STD_LOGIC; 
  signal blk00000003_sig00000439 : STD_LOGIC; 
  signal blk00000003_sig00000438 : STD_LOGIC; 
  signal blk00000003_sig00000437 : STD_LOGIC; 
  signal blk00000003_sig00000436 : STD_LOGIC; 
  signal blk00000003_sig00000435 : STD_LOGIC; 
  signal blk00000003_sig00000434 : STD_LOGIC; 
  signal blk00000003_sig00000433 : STD_LOGIC; 
  signal blk00000003_sig00000432 : STD_LOGIC; 
  signal blk00000003_sig00000431 : STD_LOGIC; 
  signal blk00000003_sig00000430 : STD_LOGIC; 
  signal blk00000003_sig0000042f : STD_LOGIC; 
  signal blk00000003_sig0000042e : STD_LOGIC; 
  signal blk00000003_sig0000042d : STD_LOGIC; 
  signal blk00000003_sig0000042c : STD_LOGIC; 
  signal blk00000003_sig0000042b : STD_LOGIC; 
  signal blk00000003_sig0000042a : STD_LOGIC; 
  signal blk00000003_sig00000429 : STD_LOGIC; 
  signal blk00000003_sig00000428 : STD_LOGIC; 
  signal blk00000003_sig00000427 : STD_LOGIC; 
  signal blk00000003_sig00000426 : STD_LOGIC; 
  signal blk00000003_sig00000425 : STD_LOGIC; 
  signal blk00000003_sig00000424 : STD_LOGIC; 
  signal blk00000003_sig00000423 : STD_LOGIC; 
  signal blk00000003_sig00000422 : STD_LOGIC; 
  signal blk00000003_sig00000421 : STD_LOGIC; 
  signal blk00000003_sig00000420 : STD_LOGIC; 
  signal blk00000003_sig0000041f : STD_LOGIC; 
  signal blk00000003_sig0000041e : STD_LOGIC; 
  signal blk00000003_sig0000041d : STD_LOGIC; 
  signal blk00000003_sig0000041c : STD_LOGIC; 
  signal blk00000003_sig0000041b : STD_LOGIC; 
  signal blk00000003_sig0000041a : STD_LOGIC; 
  signal blk00000003_sig00000419 : STD_LOGIC; 
  signal blk00000003_sig00000418 : STD_LOGIC; 
  signal blk00000003_sig00000417 : STD_LOGIC; 
  signal blk00000003_sig00000416 : STD_LOGIC; 
  signal blk00000003_sig00000415 : STD_LOGIC; 
  signal blk00000003_sig00000414 : STD_LOGIC; 
  signal blk00000003_sig00000413 : STD_LOGIC; 
  signal blk00000003_sig00000412 : STD_LOGIC; 
  signal blk00000003_sig00000411 : STD_LOGIC; 
  signal blk00000003_sig00000410 : STD_LOGIC; 
  signal blk00000003_sig0000040f : STD_LOGIC; 
  signal blk00000003_sig0000040e : STD_LOGIC; 
  signal blk00000003_sig0000040d : STD_LOGIC; 
  signal blk00000003_sig0000040c : STD_LOGIC; 
  signal blk00000003_sig0000040b : STD_LOGIC; 
  signal blk00000003_sig0000040a : STD_LOGIC; 
  signal blk00000003_sig00000409 : STD_LOGIC; 
  signal blk00000003_sig00000408 : STD_LOGIC; 
  signal blk00000003_sig00000407 : STD_LOGIC; 
  signal blk00000003_sig00000406 : STD_LOGIC; 
  signal blk00000003_sig00000405 : STD_LOGIC; 
  signal blk00000003_sig00000404 : STD_LOGIC; 
  signal blk00000003_sig00000403 : STD_LOGIC; 
  signal blk00000003_sig00000402 : STD_LOGIC; 
  signal blk00000003_sig00000401 : STD_LOGIC; 
  signal blk00000003_sig00000400 : STD_LOGIC; 
  signal blk00000003_sig000003ff : STD_LOGIC; 
  signal blk00000003_sig000003fe : STD_LOGIC; 
  signal blk00000003_sig000003fd : STD_LOGIC; 
  signal blk00000003_sig000003fc : STD_LOGIC; 
  signal blk00000003_sig000003fb : STD_LOGIC; 
  signal blk00000003_sig000003fa : STD_LOGIC; 
  signal blk00000003_sig000003f9 : STD_LOGIC; 
  signal blk00000003_sig000003f8 : STD_LOGIC; 
  signal blk00000003_sig000003f7 : STD_LOGIC; 
  signal blk00000003_sig000003f6 : STD_LOGIC; 
  signal blk00000003_sig000003f5 : STD_LOGIC; 
  signal blk00000003_sig000003f4 : STD_LOGIC; 
  signal blk00000003_sig000003f3 : STD_LOGIC; 
  signal blk00000003_sig000003f2 : STD_LOGIC; 
  signal blk00000003_sig000003f1 : STD_LOGIC; 
  signal blk00000003_sig000003f0 : STD_LOGIC; 
  signal blk00000003_sig000003ef : STD_LOGIC; 
  signal blk00000003_sig000003ee : STD_LOGIC; 
  signal blk00000003_sig000003ed : STD_LOGIC; 
  signal blk00000003_sig000003ec : STD_LOGIC; 
  signal blk00000003_sig000003eb : STD_LOGIC; 
  signal blk00000003_sig000003ea : STD_LOGIC; 
  signal blk00000003_sig000003e9 : STD_LOGIC; 
  signal blk00000003_sig000003e8 : STD_LOGIC; 
  signal blk00000003_sig000003e7 : STD_LOGIC; 
  signal blk00000003_sig000003e6 : STD_LOGIC; 
  signal blk00000003_sig000003e5 : STD_LOGIC; 
  signal blk00000003_sig000003e4 : STD_LOGIC; 
  signal blk00000003_sig000003e3 : STD_LOGIC; 
  signal blk00000003_sig000003e2 : STD_LOGIC; 
  signal blk00000003_sig000003e1 : STD_LOGIC; 
  signal blk00000003_sig000003e0 : STD_LOGIC; 
  signal blk00000003_sig000003df : STD_LOGIC; 
  signal blk00000003_sig000003de : STD_LOGIC; 
  signal blk00000003_sig000003dd : STD_LOGIC; 
  signal blk00000003_sig000003dc : STD_LOGIC; 
  signal blk00000003_sig000003db : STD_LOGIC; 
  signal blk00000003_sig000003da : STD_LOGIC; 
  signal blk00000003_sig000003d9 : STD_LOGIC; 
  signal blk00000003_sig000003d8 : STD_LOGIC; 
  signal blk00000003_sig000003d7 : STD_LOGIC; 
  signal blk00000003_sig000003d6 : STD_LOGIC; 
  signal blk00000003_sig000003d5 : STD_LOGIC; 
  signal blk00000003_sig000003d4 : STD_LOGIC; 
  signal blk00000003_sig000003d3 : STD_LOGIC; 
  signal blk00000003_sig000003d2 : STD_LOGIC; 
  signal blk00000003_sig000003d1 : STD_LOGIC; 
  signal blk00000003_sig000003d0 : STD_LOGIC; 
  signal blk00000003_sig000003cf : STD_LOGIC; 
  signal blk00000003_sig000003ce : STD_LOGIC; 
  signal blk00000003_sig000003cd : STD_LOGIC; 
  signal blk00000003_sig000003cc : STD_LOGIC; 
  signal blk00000003_sig000003cb : STD_LOGIC; 
  signal blk00000003_sig000003ca : STD_LOGIC; 
  signal blk00000003_sig000003c9 : STD_LOGIC; 
  signal blk00000003_sig000003c8 : STD_LOGIC; 
  signal blk00000003_sig000003c7 : STD_LOGIC; 
  signal blk00000003_sig000003c6 : STD_LOGIC; 
  signal blk00000003_sig000003c5 : STD_LOGIC; 
  signal blk00000003_sig000003c4 : STD_LOGIC; 
  signal blk00000003_sig000003c3 : STD_LOGIC; 
  signal blk00000003_sig000003c2 : STD_LOGIC; 
  signal blk00000003_sig000003c1 : STD_LOGIC; 
  signal blk00000003_sig000003c0 : STD_LOGIC; 
  signal blk00000003_sig000003bf : STD_LOGIC; 
  signal blk00000003_sig000003be : STD_LOGIC; 
  signal blk00000003_sig000003bd : STD_LOGIC; 
  signal blk00000003_sig000003bc : STD_LOGIC; 
  signal blk00000003_sig000003bb : STD_LOGIC; 
  signal blk00000003_sig000003ba : STD_LOGIC; 
  signal blk00000003_sig000003b9 : STD_LOGIC; 
  signal blk00000003_sig000003b8 : STD_LOGIC; 
  signal blk00000003_sig000003b7 : STD_LOGIC; 
  signal blk00000003_sig000003b6 : STD_LOGIC; 
  signal blk00000003_sig000003b5 : STD_LOGIC; 
  signal blk00000003_sig000003b4 : STD_LOGIC; 
  signal blk00000003_sig000003b3 : STD_LOGIC; 
  signal blk00000003_sig000003b2 : STD_LOGIC; 
  signal blk00000003_sig000003b1 : STD_LOGIC; 
  signal blk00000003_sig000003b0 : STD_LOGIC; 
  signal blk00000003_sig000003af : STD_LOGIC; 
  signal blk00000003_sig000003ae : STD_LOGIC; 
  signal blk00000003_sig000003ad : STD_LOGIC; 
  signal blk00000003_sig000003ac : STD_LOGIC; 
  signal blk00000003_sig000003ab : STD_LOGIC; 
  signal blk00000003_sig000003aa : STD_LOGIC; 
  signal blk00000003_sig000003a9 : STD_LOGIC; 
  signal blk00000003_sig000003a8 : STD_LOGIC; 
  signal blk00000003_sig000003a7 : STD_LOGIC; 
  signal blk00000003_sig000003a6 : STD_LOGIC; 
  signal blk00000003_sig000003a5 : STD_LOGIC; 
  signal blk00000003_sig000003a4 : STD_LOGIC; 
  signal blk00000003_sig000003a3 : STD_LOGIC; 
  signal blk00000003_sig000003a2 : STD_LOGIC; 
  signal blk00000003_sig000003a1 : STD_LOGIC; 
  signal blk00000003_sig000003a0 : STD_LOGIC; 
  signal blk00000003_sig0000039f : STD_LOGIC; 
  signal blk00000003_sig0000039e : STD_LOGIC; 
  signal blk00000003_sig0000039d : STD_LOGIC; 
  signal blk00000003_sig0000039c : STD_LOGIC; 
  signal blk00000003_sig0000039b : STD_LOGIC; 
  signal blk00000003_sig0000039a : STD_LOGIC; 
  signal blk00000003_sig00000399 : STD_LOGIC; 
  signal blk00000003_sig00000398 : STD_LOGIC; 
  signal blk00000003_sig00000397 : STD_LOGIC; 
  signal blk00000003_sig00000396 : STD_LOGIC; 
  signal blk00000003_sig00000395 : STD_LOGIC; 
  signal blk00000003_sig00000394 : STD_LOGIC; 
  signal blk00000003_sig00000393 : STD_LOGIC; 
  signal blk00000003_sig00000392 : STD_LOGIC; 
  signal blk00000003_sig00000391 : STD_LOGIC; 
  signal blk00000003_sig00000390 : STD_LOGIC; 
  signal blk00000003_sig0000038f : STD_LOGIC; 
  signal blk00000003_sig0000038e : STD_LOGIC; 
  signal blk00000003_sig0000038d : STD_LOGIC; 
  signal blk00000003_sig0000038c : STD_LOGIC; 
  signal blk00000003_sig0000038b : STD_LOGIC; 
  signal blk00000003_sig0000038a : STD_LOGIC; 
  signal blk00000003_sig00000389 : STD_LOGIC; 
  signal blk00000003_sig00000388 : STD_LOGIC; 
  signal blk00000003_sig00000387 : STD_LOGIC; 
  signal blk00000003_sig00000386 : STD_LOGIC; 
  signal blk00000003_sig00000385 : STD_LOGIC; 
  signal blk00000003_sig00000384 : STD_LOGIC; 
  signal blk00000003_sig00000383 : STD_LOGIC; 
  signal blk00000003_sig00000382 : STD_LOGIC; 
  signal blk00000003_sig00000381 : STD_LOGIC; 
  signal blk00000003_sig00000380 : STD_LOGIC; 
  signal blk00000003_sig0000037f : STD_LOGIC; 
  signal blk00000003_sig0000037e : STD_LOGIC; 
  signal blk00000003_sig0000037d : STD_LOGIC; 
  signal blk00000003_sig0000037c : STD_LOGIC; 
  signal blk00000003_sig0000037b : STD_LOGIC; 
  signal blk00000003_sig0000037a : STD_LOGIC; 
  signal blk00000003_sig00000379 : STD_LOGIC; 
  signal blk00000003_sig00000378 : STD_LOGIC; 
  signal blk00000003_sig00000377 : STD_LOGIC; 
  signal blk00000003_sig00000376 : STD_LOGIC; 
  signal blk00000003_sig00000375 : STD_LOGIC; 
  signal blk00000003_sig00000374 : STD_LOGIC; 
  signal blk00000003_sig00000373 : STD_LOGIC; 
  signal blk00000003_sig00000372 : STD_LOGIC; 
  signal blk00000003_sig00000371 : STD_LOGIC; 
  signal blk00000003_sig00000370 : STD_LOGIC; 
  signal blk00000003_sig0000036f : STD_LOGIC; 
  signal blk00000003_sig0000036e : STD_LOGIC; 
  signal blk00000003_sig0000036d : STD_LOGIC; 
  signal blk00000003_sig0000036c : STD_LOGIC; 
  signal blk00000003_sig0000036b : STD_LOGIC; 
  signal blk00000003_sig0000036a : STD_LOGIC; 
  signal blk00000003_sig00000369 : STD_LOGIC; 
  signal blk00000003_sig00000368 : STD_LOGIC; 
  signal blk00000003_sig00000367 : STD_LOGIC; 
  signal blk00000003_sig00000366 : STD_LOGIC; 
  signal blk00000003_sig00000365 : STD_LOGIC; 
  signal blk00000003_sig00000364 : STD_LOGIC; 
  signal blk00000003_sig00000363 : STD_LOGIC; 
  signal blk00000003_sig00000362 : STD_LOGIC; 
  signal blk00000003_sig00000361 : STD_LOGIC; 
  signal blk00000003_sig00000360 : STD_LOGIC; 
  signal blk00000003_sig0000035f : STD_LOGIC; 
  signal blk00000003_sig0000035e : STD_LOGIC; 
  signal blk00000003_sig0000035d : STD_LOGIC; 
  signal blk00000003_sig0000035c : STD_LOGIC; 
  signal blk00000003_sig0000035b : STD_LOGIC; 
  signal blk00000003_sig0000035a : STD_LOGIC; 
  signal blk00000003_sig00000359 : STD_LOGIC; 
  signal blk00000003_sig00000358 : STD_LOGIC; 
  signal blk00000003_sig00000357 : STD_LOGIC; 
  signal blk00000003_sig00000356 : STD_LOGIC; 
  signal blk00000003_sig00000355 : STD_LOGIC; 
  signal blk00000003_sig00000354 : STD_LOGIC; 
  signal blk00000003_sig00000353 : STD_LOGIC; 
  signal blk00000003_sig00000352 : STD_LOGIC; 
  signal blk00000003_sig00000351 : STD_LOGIC; 
  signal blk00000003_sig00000350 : STD_LOGIC; 
  signal blk00000003_sig0000034f : STD_LOGIC; 
  signal blk00000003_sig0000034e : STD_LOGIC; 
  signal blk00000003_sig0000034d : STD_LOGIC; 
  signal blk00000003_sig0000034c : STD_LOGIC; 
  signal blk00000003_sig0000034b : STD_LOGIC; 
  signal blk00000003_sig0000034a : STD_LOGIC; 
  signal blk00000003_sig00000349 : STD_LOGIC; 
  signal blk00000003_sig00000348 : STD_LOGIC; 
  signal blk00000003_sig00000347 : STD_LOGIC; 
  signal blk00000003_sig00000346 : STD_LOGIC; 
  signal blk00000003_sig00000345 : STD_LOGIC; 
  signal blk00000003_sig00000344 : STD_LOGIC; 
  signal blk00000003_sig00000343 : STD_LOGIC; 
  signal blk00000003_sig00000342 : STD_LOGIC; 
  signal blk00000003_sig00000341 : STD_LOGIC; 
  signal blk00000003_sig00000340 : STD_LOGIC; 
  signal blk00000003_sig0000033f : STD_LOGIC; 
  signal blk00000003_sig0000033e : STD_LOGIC; 
  signal blk00000003_sig0000033d : STD_LOGIC; 
  signal blk00000003_sig0000033c : STD_LOGIC; 
  signal blk00000003_sig0000033b : STD_LOGIC; 
  signal blk00000003_sig0000033a : STD_LOGIC; 
  signal blk00000003_sig00000339 : STD_LOGIC; 
  signal blk00000003_sig00000338 : STD_LOGIC; 
  signal blk00000003_sig00000337 : STD_LOGIC; 
  signal blk00000003_sig00000336 : STD_LOGIC; 
  signal blk00000003_sig00000335 : STD_LOGIC; 
  signal blk00000003_sig00000334 : STD_LOGIC; 
  signal blk00000003_sig00000333 : STD_LOGIC; 
  signal blk00000003_sig00000332 : STD_LOGIC; 
  signal blk00000003_sig00000331 : STD_LOGIC; 
  signal blk00000003_sig00000330 : STD_LOGIC; 
  signal blk00000003_sig0000032f : STD_LOGIC; 
  signal blk00000003_sig0000032e : STD_LOGIC; 
  signal blk00000003_sig0000032d : STD_LOGIC; 
  signal blk00000003_sig0000032c : STD_LOGIC; 
  signal blk00000003_sig0000032b : STD_LOGIC; 
  signal blk00000003_sig0000032a : STD_LOGIC; 
  signal blk00000003_sig00000329 : STD_LOGIC; 
  signal blk00000003_sig00000328 : STD_LOGIC; 
  signal blk00000003_sig00000327 : STD_LOGIC; 
  signal blk00000003_sig00000326 : STD_LOGIC; 
  signal blk00000003_sig00000325 : STD_LOGIC; 
  signal blk00000003_sig00000324 : STD_LOGIC; 
  signal blk00000003_sig00000323 : STD_LOGIC; 
  signal blk00000003_sig00000322 : STD_LOGIC; 
  signal blk00000003_sig00000321 : STD_LOGIC; 
  signal blk00000003_sig00000320 : STD_LOGIC; 
  signal blk00000003_sig0000031f : STD_LOGIC; 
  signal blk00000003_sig0000031e : STD_LOGIC; 
  signal blk00000003_sig0000031d : STD_LOGIC; 
  signal blk00000003_sig0000031c : STD_LOGIC; 
  signal blk00000003_sig0000031b : STD_LOGIC; 
  signal blk00000003_sig0000031a : STD_LOGIC; 
  signal blk00000003_sig00000319 : STD_LOGIC; 
  signal blk00000003_sig00000318 : STD_LOGIC; 
  signal blk00000003_sig00000317 : STD_LOGIC; 
  signal blk00000003_sig00000316 : STD_LOGIC; 
  signal blk00000003_sig00000315 : STD_LOGIC; 
  signal blk00000003_sig00000314 : STD_LOGIC; 
  signal blk00000003_sig00000313 : STD_LOGIC; 
  signal blk00000003_sig00000312 : STD_LOGIC; 
  signal blk00000003_sig00000311 : STD_LOGIC; 
  signal blk00000003_sig00000310 : STD_LOGIC; 
  signal blk00000003_sig0000030f : STD_LOGIC; 
  signal blk00000003_sig0000030e : STD_LOGIC; 
  signal blk00000003_sig0000030d : STD_LOGIC; 
  signal blk00000003_sig0000030c : STD_LOGIC; 
  signal blk00000003_sig0000030b : STD_LOGIC; 
  signal blk00000003_sig0000030a : STD_LOGIC; 
  signal blk00000003_sig00000309 : STD_LOGIC; 
  signal blk00000003_sig00000308 : STD_LOGIC; 
  signal blk00000003_sig00000307 : STD_LOGIC; 
  signal blk00000003_sig00000306 : STD_LOGIC; 
  signal blk00000003_sig00000305 : STD_LOGIC; 
  signal blk00000003_sig00000304 : STD_LOGIC; 
  signal blk00000003_sig00000303 : STD_LOGIC; 
  signal blk00000003_sig00000302 : STD_LOGIC; 
  signal blk00000003_sig00000301 : STD_LOGIC; 
  signal blk00000003_sig00000300 : STD_LOGIC; 
  signal blk00000003_sig000002ff : STD_LOGIC; 
  signal blk00000003_sig000002fe : STD_LOGIC; 
  signal blk00000003_sig000002fd : STD_LOGIC; 
  signal blk00000003_sig000002fc : STD_LOGIC; 
  signal blk00000003_sig000002fb : STD_LOGIC; 
  signal blk00000003_sig000002fa : STD_LOGIC; 
  signal blk00000003_sig000002f9 : STD_LOGIC; 
  signal blk00000003_sig000002f8 : STD_LOGIC; 
  signal blk00000003_sig000002f7 : STD_LOGIC; 
  signal blk00000003_sig000002f6 : STD_LOGIC; 
  signal blk00000003_sig000002f5 : STD_LOGIC; 
  signal blk00000003_sig000002f4 : STD_LOGIC; 
  signal blk00000003_sig000002f3 : STD_LOGIC; 
  signal blk00000003_sig000002f2 : STD_LOGIC; 
  signal blk00000003_sig000002f1 : STD_LOGIC; 
  signal blk00000003_sig000002f0 : STD_LOGIC; 
  signal blk00000003_sig000002ef : STD_LOGIC; 
  signal blk00000003_sig000002ee : STD_LOGIC; 
  signal blk00000003_sig000002ed : STD_LOGIC; 
  signal blk00000003_sig000002ec : STD_LOGIC; 
  signal blk00000003_sig000002eb : STD_LOGIC; 
  signal blk00000003_sig000002ea : STD_LOGIC; 
  signal blk00000003_sig000002e9 : STD_LOGIC; 
  signal blk00000003_sig000002e8 : STD_LOGIC; 
  signal blk00000003_sig000002e7 : STD_LOGIC; 
  signal blk00000003_sig000002e6 : STD_LOGIC; 
  signal blk00000003_sig000002e5 : STD_LOGIC; 
  signal blk00000003_sig000002e4 : STD_LOGIC; 
  signal blk00000003_sig000002e3 : STD_LOGIC; 
  signal blk00000003_sig000002e2 : STD_LOGIC; 
  signal blk00000003_sig000002e1 : STD_LOGIC; 
  signal blk00000003_sig000002e0 : STD_LOGIC; 
  signal blk00000003_sig000002df : STD_LOGIC; 
  signal blk00000003_sig000002de : STD_LOGIC; 
  signal blk00000003_sig000002dd : STD_LOGIC; 
  signal blk00000003_sig000002dc : STD_LOGIC; 
  signal blk00000003_sig000002db : STD_LOGIC; 
  signal blk00000003_sig000002da : STD_LOGIC; 
  signal blk00000003_sig000002d9 : STD_LOGIC; 
  signal blk00000003_sig000002d8 : STD_LOGIC; 
  signal blk00000003_sig000002d7 : STD_LOGIC; 
  signal blk00000003_sig000002d6 : STD_LOGIC; 
  signal blk00000003_sig000002d5 : STD_LOGIC; 
  signal blk00000003_sig000002d4 : STD_LOGIC; 
  signal blk00000003_sig000002d3 : STD_LOGIC; 
  signal blk00000003_sig000002d2 : STD_LOGIC; 
  signal blk00000003_sig000002d1 : STD_LOGIC; 
  signal blk00000003_sig000002d0 : STD_LOGIC; 
  signal blk00000003_sig000002cf : STD_LOGIC; 
  signal blk00000003_sig000002ce : STD_LOGIC; 
  signal blk00000003_sig000002cd : STD_LOGIC; 
  signal blk00000003_sig000002cc : STD_LOGIC; 
  signal blk00000003_sig000002cb : STD_LOGIC; 
  signal blk00000003_sig000002ca : STD_LOGIC; 
  signal blk00000003_sig000002c9 : STD_LOGIC; 
  signal blk00000003_sig000002c8 : STD_LOGIC; 
  signal blk00000003_sig000002c7 : STD_LOGIC; 
  signal blk00000003_sig000002c6 : STD_LOGIC; 
  signal blk00000003_sig000002c5 : STD_LOGIC; 
  signal blk00000003_sig000002c4 : STD_LOGIC; 
  signal blk00000003_sig000002c3 : STD_LOGIC; 
  signal blk00000003_sig000002c2 : STD_LOGIC; 
  signal blk00000003_sig000002c1 : STD_LOGIC; 
  signal blk00000003_sig000002c0 : STD_LOGIC; 
  signal blk00000003_sig000002bf : STD_LOGIC; 
  signal blk00000003_sig000002be : STD_LOGIC; 
  signal blk00000003_sig000002bd : STD_LOGIC; 
  signal blk00000003_sig000002bc : STD_LOGIC; 
  signal blk00000003_sig000002bb : STD_LOGIC; 
  signal blk00000003_sig000002ba : STD_LOGIC; 
  signal blk00000003_sig000002b9 : STD_LOGIC; 
  signal blk00000003_sig000002b8 : STD_LOGIC; 
  signal blk00000003_sig000002b7 : STD_LOGIC; 
  signal blk00000003_sig000002b6 : STD_LOGIC; 
  signal blk00000003_sig000002b5 : STD_LOGIC; 
  signal blk00000003_sig000002b4 : STD_LOGIC; 
  signal blk00000003_sig000002b3 : STD_LOGIC; 
  signal blk00000003_sig000002b2 : STD_LOGIC; 
  signal blk00000003_sig000002b1 : STD_LOGIC; 
  signal blk00000003_sig000002b0 : STD_LOGIC; 
  signal blk00000003_sig000002af : STD_LOGIC; 
  signal blk00000003_sig000002ae : STD_LOGIC; 
  signal blk00000003_sig000002ad : STD_LOGIC; 
  signal blk00000003_sig000002ac : STD_LOGIC; 
  signal blk00000003_sig000002ab : STD_LOGIC; 
  signal blk00000003_sig000002aa : STD_LOGIC; 
  signal blk00000003_sig000002a9 : STD_LOGIC; 
  signal blk00000003_sig000002a8 : STD_LOGIC; 
  signal blk00000003_sig000002a7 : STD_LOGIC; 
  signal blk00000003_sig000002a6 : STD_LOGIC; 
  signal blk00000003_sig000002a5 : STD_LOGIC; 
  signal blk00000003_sig000002a4 : STD_LOGIC; 
  signal blk00000003_sig000002a3 : STD_LOGIC; 
  signal blk00000003_sig000002a2 : STD_LOGIC; 
  signal blk00000003_sig000002a1 : STD_LOGIC; 
  signal blk00000003_sig000002a0 : STD_LOGIC; 
  signal blk00000003_sig0000029f : STD_LOGIC; 
  signal blk00000003_sig0000029e : STD_LOGIC; 
  signal blk00000003_sig0000029d : STD_LOGIC; 
  signal blk00000003_sig0000029c : STD_LOGIC; 
  signal blk00000003_sig0000029b : STD_LOGIC; 
  signal blk00000003_sig0000029a : STD_LOGIC; 
  signal blk00000003_sig00000299 : STD_LOGIC; 
  signal blk00000003_sig00000298 : STD_LOGIC; 
  signal blk00000003_sig00000297 : STD_LOGIC; 
  signal blk00000003_sig00000296 : STD_LOGIC; 
  signal blk00000003_sig00000295 : STD_LOGIC; 
  signal blk00000003_sig00000294 : STD_LOGIC; 
  signal blk00000003_sig00000293 : STD_LOGIC; 
  signal blk00000003_sig00000292 : STD_LOGIC; 
  signal blk00000003_sig00000291 : STD_LOGIC; 
  signal blk00000003_sig00000290 : STD_LOGIC; 
  signal blk00000003_sig0000028f : STD_LOGIC; 
  signal blk00000003_sig0000028e : STD_LOGIC; 
  signal blk00000003_sig0000028d : STD_LOGIC; 
  signal blk00000003_sig0000028c : STD_LOGIC; 
  signal blk00000003_sig0000028b : STD_LOGIC; 
  signal blk00000003_sig0000028a : STD_LOGIC; 
  signal blk00000003_sig00000289 : STD_LOGIC; 
  signal blk00000003_sig00000288 : STD_LOGIC; 
  signal blk00000003_sig00000287 : STD_LOGIC; 
  signal blk00000003_sig00000286 : STD_LOGIC; 
  signal blk00000003_sig00000285 : STD_LOGIC; 
  signal blk00000003_sig00000284 : STD_LOGIC; 
  signal blk00000003_sig00000283 : STD_LOGIC; 
  signal blk00000003_sig00000282 : STD_LOGIC; 
  signal blk00000003_sig00000281 : STD_LOGIC; 
  signal blk00000003_sig00000280 : STD_LOGIC; 
  signal blk00000003_sig0000027f : STD_LOGIC; 
  signal blk00000003_sig0000027e : STD_LOGIC; 
  signal blk00000003_sig0000027d : STD_LOGIC; 
  signal blk00000003_sig0000027c : STD_LOGIC; 
  signal blk00000003_sig0000027b : STD_LOGIC; 
  signal blk00000003_sig0000027a : STD_LOGIC; 
  signal blk00000003_sig00000279 : STD_LOGIC; 
  signal blk00000003_sig00000278 : STD_LOGIC; 
  signal blk00000003_sig00000277 : STD_LOGIC; 
  signal blk00000003_sig00000276 : STD_LOGIC; 
  signal blk00000003_sig00000275 : STD_LOGIC; 
  signal blk00000003_sig00000274 : STD_LOGIC; 
  signal blk00000003_sig00000273 : STD_LOGIC; 
  signal blk00000003_sig00000272 : STD_LOGIC; 
  signal blk00000003_sig00000271 : STD_LOGIC; 
  signal blk00000003_sig00000270 : STD_LOGIC; 
  signal blk00000003_sig0000026f : STD_LOGIC; 
  signal blk00000003_sig0000026e : STD_LOGIC; 
  signal blk00000003_sig0000026d : STD_LOGIC; 
  signal blk00000003_sig0000026c : STD_LOGIC; 
  signal blk00000003_sig0000026b : STD_LOGIC; 
  signal blk00000003_sig0000026a : STD_LOGIC; 
  signal blk00000003_sig00000269 : STD_LOGIC; 
  signal blk00000003_sig00000268 : STD_LOGIC; 
  signal blk00000003_sig00000267 : STD_LOGIC; 
  signal blk00000003_sig00000266 : STD_LOGIC; 
  signal blk00000003_sig00000265 : STD_LOGIC; 
  signal blk00000003_sig00000264 : STD_LOGIC; 
  signal blk00000003_sig00000263 : STD_LOGIC; 
  signal blk00000003_sig00000262 : STD_LOGIC; 
  signal blk00000003_sig00000261 : STD_LOGIC; 
  signal blk00000003_sig00000260 : STD_LOGIC; 
  signal blk00000003_sig0000025f : STD_LOGIC; 
  signal blk00000003_sig0000025e : STD_LOGIC; 
  signal blk00000003_sig0000025d : STD_LOGIC; 
  signal blk00000003_sig0000025c : STD_LOGIC; 
  signal blk00000003_sig0000025b : STD_LOGIC; 
  signal blk00000003_sig0000025a : STD_LOGIC; 
  signal blk00000003_sig00000259 : STD_LOGIC; 
  signal blk00000003_sig00000258 : STD_LOGIC; 
  signal blk00000003_sig00000257 : STD_LOGIC; 
  signal blk00000003_sig00000256 : STD_LOGIC; 
  signal blk00000003_sig00000255 : STD_LOGIC; 
  signal blk00000003_sig00000254 : STD_LOGIC; 
  signal blk00000003_sig00000253 : STD_LOGIC; 
  signal blk00000003_sig00000252 : STD_LOGIC; 
  signal blk00000003_sig00000251 : STD_LOGIC; 
  signal blk00000003_sig00000250 : STD_LOGIC; 
  signal blk00000003_sig0000024f : STD_LOGIC; 
  signal blk00000003_sig0000024e : STD_LOGIC; 
  signal blk00000003_sig0000024d : STD_LOGIC; 
  signal blk00000003_sig0000024c : STD_LOGIC; 
  signal blk00000003_sig0000024b : STD_LOGIC; 
  signal blk00000003_sig0000024a : STD_LOGIC; 
  signal blk00000003_sig00000249 : STD_LOGIC; 
  signal blk00000003_sig00000248 : STD_LOGIC; 
  signal blk00000003_sig00000247 : STD_LOGIC; 
  signal blk00000003_sig00000246 : STD_LOGIC; 
  signal blk00000003_sig00000245 : STD_LOGIC; 
  signal blk00000003_sig00000244 : STD_LOGIC; 
  signal blk00000003_sig00000243 : STD_LOGIC; 
  signal blk00000003_sig00000242 : STD_LOGIC; 
  signal blk00000003_sig00000241 : STD_LOGIC; 
  signal blk00000003_sig00000240 : STD_LOGIC; 
  signal blk00000003_sig0000023f : STD_LOGIC; 
  signal blk00000003_sig0000023e : STD_LOGIC; 
  signal blk00000003_sig0000023d : STD_LOGIC; 
  signal blk00000003_sig0000023c : STD_LOGIC; 
  signal blk00000003_sig0000023b : STD_LOGIC; 
  signal blk00000003_sig0000023a : STD_LOGIC; 
  signal blk00000003_sig00000239 : STD_LOGIC; 
  signal blk00000003_sig00000238 : STD_LOGIC; 
  signal blk00000003_sig00000237 : STD_LOGIC; 
  signal blk00000003_sig00000236 : STD_LOGIC; 
  signal blk00000003_sig00000235 : STD_LOGIC; 
  signal blk00000003_sig00000234 : STD_LOGIC; 
  signal blk00000003_sig00000233 : STD_LOGIC; 
  signal blk00000003_sig00000232 : STD_LOGIC; 
  signal blk00000003_sig00000231 : STD_LOGIC; 
  signal blk00000003_sig00000230 : STD_LOGIC; 
  signal blk00000003_sig0000022f : STD_LOGIC; 
  signal blk00000003_sig0000022e : STD_LOGIC; 
  signal blk00000003_sig0000022d : STD_LOGIC; 
  signal blk00000003_sig0000022c : STD_LOGIC; 
  signal blk00000003_sig0000022b : STD_LOGIC; 
  signal blk00000003_sig0000022a : STD_LOGIC; 
  signal blk00000003_sig00000229 : STD_LOGIC; 
  signal blk00000003_sig00000228 : STD_LOGIC; 
  signal blk00000003_sig00000227 : STD_LOGIC; 
  signal blk00000003_sig00000226 : STD_LOGIC; 
  signal blk00000003_sig00000225 : STD_LOGIC; 
  signal blk00000003_sig00000224 : STD_LOGIC; 
  signal blk00000003_sig00000223 : STD_LOGIC; 
  signal blk00000003_sig00000222 : STD_LOGIC; 
  signal blk00000003_sig00000221 : STD_LOGIC; 
  signal blk00000003_sig00000220 : STD_LOGIC; 
  signal blk00000003_sig0000021f : STD_LOGIC; 
  signal blk00000003_sig0000021e : STD_LOGIC; 
  signal blk00000003_sig0000021d : STD_LOGIC; 
  signal blk00000003_sig0000021c : STD_LOGIC; 
  signal blk00000003_sig0000021b : STD_LOGIC; 
  signal blk00000003_sig0000021a : STD_LOGIC; 
  signal blk00000003_sig00000219 : STD_LOGIC; 
  signal blk00000003_sig00000218 : STD_LOGIC; 
  signal blk00000003_sig00000217 : STD_LOGIC; 
  signal blk00000003_sig00000216 : STD_LOGIC; 
  signal blk00000003_sig00000215 : STD_LOGIC; 
  signal blk00000003_sig00000214 : STD_LOGIC; 
  signal blk00000003_sig00000213 : STD_LOGIC; 
  signal blk00000003_sig00000212 : STD_LOGIC; 
  signal blk00000003_sig00000211 : STD_LOGIC; 
  signal blk00000003_sig00000210 : STD_LOGIC; 
  signal blk00000003_sig0000020f : STD_LOGIC; 
  signal blk00000003_sig0000020e : STD_LOGIC; 
  signal blk00000003_sig0000020d : STD_LOGIC; 
  signal blk00000003_sig0000020c : STD_LOGIC; 
  signal blk00000003_sig0000020b : STD_LOGIC; 
  signal blk00000003_sig0000020a : STD_LOGIC; 
  signal blk00000003_sig00000209 : STD_LOGIC; 
  signal blk00000003_sig00000208 : STD_LOGIC; 
  signal blk00000003_sig00000207 : STD_LOGIC; 
  signal blk00000003_sig00000206 : STD_LOGIC; 
  signal blk00000003_sig00000205 : STD_LOGIC; 
  signal blk00000003_sig00000204 : STD_LOGIC; 
  signal blk00000003_sig00000203 : STD_LOGIC; 
  signal blk00000003_sig00000202 : STD_LOGIC; 
  signal blk00000003_sig00000201 : STD_LOGIC; 
  signal blk00000003_sig00000200 : STD_LOGIC; 
  signal blk00000003_sig000001ff : STD_LOGIC; 
  signal blk00000003_sig000001fe : STD_LOGIC; 
  signal blk00000003_sig000001fd : STD_LOGIC; 
  signal blk00000003_sig000001fc : STD_LOGIC; 
  signal blk00000003_sig000001fb : STD_LOGIC; 
  signal blk00000003_sig000001fa : STD_LOGIC; 
  signal blk00000003_sig000001f9 : STD_LOGIC; 
  signal blk00000003_sig000001f8 : STD_LOGIC; 
  signal blk00000003_sig000001f7 : STD_LOGIC; 
  signal blk00000003_sig000001f6 : STD_LOGIC; 
  signal blk00000003_sig000001f5 : STD_LOGIC; 
  signal blk00000003_sig000001f4 : STD_LOGIC; 
  signal blk00000003_sig000001f3 : STD_LOGIC; 
  signal blk00000003_sig000001f2 : STD_LOGIC; 
  signal blk00000003_sig000001f1 : STD_LOGIC; 
  signal blk00000003_sig000001f0 : STD_LOGIC; 
  signal blk00000003_sig000001ef : STD_LOGIC; 
  signal blk00000003_sig000001ee : STD_LOGIC; 
  signal blk00000003_sig000001ed : STD_LOGIC; 
  signal blk00000003_sig000001ec : STD_LOGIC; 
  signal blk00000003_sig000001eb : STD_LOGIC; 
  signal blk00000003_sig000001ea : STD_LOGIC; 
  signal blk00000003_sig000001e9 : STD_LOGIC; 
  signal blk00000003_sig000001e8 : STD_LOGIC; 
  signal blk00000003_sig000001e7 : STD_LOGIC; 
  signal blk00000003_sig000001e6 : STD_LOGIC; 
  signal blk00000003_sig000001e5 : STD_LOGIC; 
  signal blk00000003_sig000001e4 : STD_LOGIC; 
  signal blk00000003_sig000001e3 : STD_LOGIC; 
  signal blk00000003_sig000001e2 : STD_LOGIC; 
  signal blk00000003_sig000001e1 : STD_LOGIC; 
  signal blk00000003_sig000001e0 : STD_LOGIC; 
  signal blk00000003_sig000001df : STD_LOGIC; 
  signal blk00000003_sig000001de : STD_LOGIC; 
  signal blk00000003_sig000001dd : STD_LOGIC; 
  signal blk00000003_sig000001dc : STD_LOGIC; 
  signal blk00000003_sig000001db : STD_LOGIC; 
  signal blk00000003_sig000001da : STD_LOGIC; 
  signal blk00000003_sig000001d9 : STD_LOGIC; 
  signal blk00000003_sig000001d8 : STD_LOGIC; 
  signal blk00000003_sig000001d7 : STD_LOGIC; 
  signal blk00000003_sig000001d6 : STD_LOGIC; 
  signal blk00000003_sig000001d5 : STD_LOGIC; 
  signal blk00000003_sig000001d4 : STD_LOGIC; 
  signal blk00000003_sig000001d3 : STD_LOGIC; 
  signal blk00000003_sig000001d2 : STD_LOGIC; 
  signal blk00000003_sig000001d1 : STD_LOGIC; 
  signal blk00000003_sig000001d0 : STD_LOGIC; 
  signal blk00000003_sig000001cf : STD_LOGIC; 
  signal blk00000003_sig000001ce : STD_LOGIC; 
  signal blk00000003_sig000001cd : STD_LOGIC; 
  signal blk00000003_sig000001cc : STD_LOGIC; 
  signal blk00000003_sig000001cb : STD_LOGIC; 
  signal blk00000003_sig000001ca : STD_LOGIC; 
  signal blk00000003_sig000001c9 : STD_LOGIC; 
  signal blk00000003_sig000001c8 : STD_LOGIC; 
  signal blk00000003_sig000001c7 : STD_LOGIC; 
  signal blk00000003_sig000001c6 : STD_LOGIC; 
  signal blk00000003_sig000001c5 : STD_LOGIC; 
  signal blk00000003_sig000001c4 : STD_LOGIC; 
  signal blk00000003_sig000001c3 : STD_LOGIC; 
  signal blk00000003_sig000001c2 : STD_LOGIC; 
  signal blk00000003_sig000001c1 : STD_LOGIC; 
  signal blk00000003_sig000001c0 : STD_LOGIC; 
  signal blk00000003_sig000001bf : STD_LOGIC; 
  signal blk00000003_sig000001be : STD_LOGIC; 
  signal blk00000003_sig000001bd : STD_LOGIC; 
  signal blk00000003_sig000001bc : STD_LOGIC; 
  signal blk00000003_sig000001bb : STD_LOGIC; 
  signal blk00000003_sig000001ba : STD_LOGIC; 
  signal blk00000003_sig000001b9 : STD_LOGIC; 
  signal blk00000003_sig000001b8 : STD_LOGIC; 
  signal blk00000003_sig000001b7 : STD_LOGIC; 
  signal blk00000003_sig000001b6 : STD_LOGIC; 
  signal blk00000003_sig000001b5 : STD_LOGIC; 
  signal blk00000003_sig000001b4 : STD_LOGIC; 
  signal blk00000003_sig000001b3 : STD_LOGIC; 
  signal blk00000003_sig000001b2 : STD_LOGIC; 
  signal blk00000003_sig000001b1 : STD_LOGIC; 
  signal blk00000003_sig000001b0 : STD_LOGIC; 
  signal blk00000003_sig000001af : STD_LOGIC; 
  signal blk00000003_sig000001ae : STD_LOGIC; 
  signal blk00000003_sig000001ad : STD_LOGIC; 
  signal blk00000003_sig000001ac : STD_LOGIC; 
  signal blk00000003_sig000001ab : STD_LOGIC; 
  signal blk00000003_sig000001aa : STD_LOGIC; 
  signal blk00000003_sig000001a9 : STD_LOGIC; 
  signal blk00000003_sig000001a8 : STD_LOGIC; 
  signal blk00000003_sig000001a7 : STD_LOGIC; 
  signal blk00000003_sig000001a6 : STD_LOGIC; 
  signal blk00000003_sig000001a5 : STD_LOGIC; 
  signal blk00000003_sig000001a4 : STD_LOGIC; 
  signal blk00000003_sig000001a3 : STD_LOGIC; 
  signal blk00000003_sig000001a2 : STD_LOGIC; 
  signal blk00000003_sig000001a1 : STD_LOGIC; 
  signal blk00000003_sig000001a0 : STD_LOGIC; 
  signal blk00000003_sig0000019f : STD_LOGIC; 
  signal blk00000003_sig0000019e : STD_LOGIC; 
  signal blk00000003_sig0000019d : STD_LOGIC; 
  signal blk00000003_sig0000019c : STD_LOGIC; 
  signal blk00000003_sig0000019b : STD_LOGIC; 
  signal blk00000003_sig0000019a : STD_LOGIC; 
  signal blk00000003_sig00000199 : STD_LOGIC; 
  signal blk00000003_sig00000198 : STD_LOGIC; 
  signal blk00000003_sig00000197 : STD_LOGIC; 
  signal blk00000003_sig00000196 : STD_LOGIC; 
  signal blk00000003_sig00000195 : STD_LOGIC; 
  signal blk00000003_sig00000194 : STD_LOGIC; 
  signal blk00000003_sig00000193 : STD_LOGIC; 
  signal blk00000003_sig00000192 : STD_LOGIC; 
  signal blk00000003_sig00000191 : STD_LOGIC; 
  signal blk00000003_sig00000190 : STD_LOGIC; 
  signal blk00000003_sig0000018f : STD_LOGIC; 
  signal blk00000003_sig0000018e : STD_LOGIC; 
  signal blk00000003_sig0000018d : STD_LOGIC; 
  signal blk00000003_sig0000018c : STD_LOGIC; 
  signal blk00000003_sig0000018b : STD_LOGIC; 
  signal blk00000003_sig0000018a : STD_LOGIC; 
  signal blk00000003_sig00000189 : STD_LOGIC; 
  signal blk00000003_sig00000188 : STD_LOGIC; 
  signal blk00000003_sig00000187 : STD_LOGIC; 
  signal blk00000003_sig00000186 : STD_LOGIC; 
  signal blk00000003_sig00000185 : STD_LOGIC; 
  signal blk00000003_sig00000184 : STD_LOGIC; 
  signal blk00000003_sig00000183 : STD_LOGIC; 
  signal blk00000003_sig00000182 : STD_LOGIC; 
  signal blk00000003_sig00000181 : STD_LOGIC; 
  signal blk00000003_sig00000180 : STD_LOGIC; 
  signal blk00000003_sig0000017f : STD_LOGIC; 
  signal blk00000003_sig0000017e : STD_LOGIC; 
  signal blk00000003_sig0000017d : STD_LOGIC; 
  signal blk00000003_sig0000017c : STD_LOGIC; 
  signal blk00000003_sig0000017b : STD_LOGIC; 
  signal blk00000003_sig0000017a : STD_LOGIC; 
  signal blk00000003_sig00000179 : STD_LOGIC; 
  signal blk00000003_sig00000178 : STD_LOGIC; 
  signal blk00000003_sig00000177 : STD_LOGIC; 
  signal blk00000003_sig00000176 : STD_LOGIC; 
  signal blk00000003_sig00000175 : STD_LOGIC; 
  signal blk00000003_sig00000174 : STD_LOGIC; 
  signal blk00000003_sig00000173 : STD_LOGIC; 
  signal blk00000003_sig00000172 : STD_LOGIC; 
  signal blk00000003_sig00000171 : STD_LOGIC; 
  signal blk00000003_sig00000170 : STD_LOGIC; 
  signal blk00000003_sig0000016f : STD_LOGIC; 
  signal blk00000003_sig0000016e : STD_LOGIC; 
  signal blk00000003_sig0000016d : STD_LOGIC; 
  signal blk00000003_sig0000016c : STD_LOGIC; 
  signal blk00000003_sig0000016b : STD_LOGIC; 
  signal blk00000003_sig0000016a : STD_LOGIC; 
  signal blk00000003_sig00000169 : STD_LOGIC; 
  signal blk00000003_sig00000168 : STD_LOGIC; 
  signal blk00000003_sig00000167 : STD_LOGIC; 
  signal blk00000003_sig00000166 : STD_LOGIC; 
  signal blk00000003_sig00000165 : STD_LOGIC; 
  signal blk00000003_sig00000164 : STD_LOGIC; 
  signal blk00000003_sig00000163 : STD_LOGIC; 
  signal blk00000003_sig00000162 : STD_LOGIC; 
  signal blk00000003_sig00000161 : STD_LOGIC; 
  signal blk00000003_sig00000160 : STD_LOGIC; 
  signal blk00000003_sig0000015f : STD_LOGIC; 
  signal blk00000003_sig0000015e : STD_LOGIC; 
  signal blk00000003_sig0000015d : STD_LOGIC; 
  signal blk00000003_sig0000015c : STD_LOGIC; 
  signal blk00000003_sig0000015b : STD_LOGIC; 
  signal blk00000003_sig0000015a : STD_LOGIC; 
  signal blk00000003_sig00000159 : STD_LOGIC; 
  signal blk00000003_sig00000158 : STD_LOGIC; 
  signal blk00000003_sig00000157 : STD_LOGIC; 
  signal blk00000003_sig00000156 : STD_LOGIC; 
  signal blk00000003_sig00000155 : STD_LOGIC; 
  signal blk00000003_sig00000154 : STD_LOGIC; 
  signal blk00000003_sig00000153 : STD_LOGIC; 
  signal blk00000003_sig00000152 : STD_LOGIC; 
  signal blk00000003_sig00000151 : STD_LOGIC; 
  signal blk00000003_sig00000150 : STD_LOGIC; 
  signal blk00000003_sig0000014f : STD_LOGIC; 
  signal blk00000003_sig0000014e : STD_LOGIC; 
  signal blk00000003_sig0000014d : STD_LOGIC; 
  signal blk00000003_sig0000014c : STD_LOGIC; 
  signal blk00000003_sig0000014b : STD_LOGIC; 
  signal blk00000003_sig0000014a : STD_LOGIC; 
  signal blk00000003_sig00000149 : STD_LOGIC; 
  signal blk00000003_sig00000148 : STD_LOGIC; 
  signal blk00000003_sig00000147 : STD_LOGIC; 
  signal blk00000003_sig00000146 : STD_LOGIC; 
  signal blk00000003_sig00000145 : STD_LOGIC; 
  signal blk00000003_sig00000144 : STD_LOGIC; 
  signal blk00000003_sig00000143 : STD_LOGIC; 
  signal blk00000003_sig00000142 : STD_LOGIC; 
  signal blk00000003_sig00000141 : STD_LOGIC; 
  signal blk00000003_sig00000140 : STD_LOGIC; 
  signal blk00000003_sig0000013f : STD_LOGIC; 
  signal blk00000003_sig0000013e : STD_LOGIC; 
  signal blk00000003_sig0000013d : STD_LOGIC; 
  signal blk00000003_sig0000013c : STD_LOGIC; 
  signal blk00000003_sig0000013b : STD_LOGIC; 
  signal blk00000003_sig0000013a : STD_LOGIC; 
  signal blk00000003_sig00000139 : STD_LOGIC; 
  signal blk00000003_sig00000138 : STD_LOGIC; 
  signal blk00000003_sig00000137 : STD_LOGIC; 
  signal blk00000003_sig00000136 : STD_LOGIC; 
  signal blk00000003_sig00000135 : STD_LOGIC; 
  signal blk00000003_sig00000134 : STD_LOGIC; 
  signal blk00000003_sig00000133 : STD_LOGIC; 
  signal blk00000003_sig00000132 : STD_LOGIC; 
  signal blk00000003_sig00000131 : STD_LOGIC; 
  signal blk00000003_sig00000130 : STD_LOGIC; 
  signal blk00000003_sig0000012f : STD_LOGIC; 
  signal blk00000003_sig0000012e : STD_LOGIC; 
  signal blk00000003_sig0000012d : STD_LOGIC; 
  signal blk00000003_sig0000012c : STD_LOGIC; 
  signal blk00000003_sig0000012b : STD_LOGIC; 
  signal blk00000003_sig0000012a : STD_LOGIC; 
  signal blk00000003_sig00000129 : STD_LOGIC; 
  signal blk00000003_sig00000128 : STD_LOGIC; 
  signal blk00000003_sig00000127 : STD_LOGIC; 
  signal blk00000003_sig00000126 : STD_LOGIC; 
  signal blk00000003_sig00000125 : STD_LOGIC; 
  signal blk00000003_sig00000124 : STD_LOGIC; 
  signal blk00000003_sig00000123 : STD_LOGIC; 
  signal blk00000003_sig00000122 : STD_LOGIC; 
  signal blk00000003_sig00000121 : STD_LOGIC; 
  signal blk00000003_sig00000120 : STD_LOGIC; 
  signal blk00000003_sig0000011f : STD_LOGIC; 
  signal blk00000003_sig0000011e : STD_LOGIC; 
  signal blk00000003_sig0000011d : STD_LOGIC; 
  signal blk00000003_sig0000011c : STD_LOGIC; 
  signal blk00000003_sig0000011b : STD_LOGIC; 
  signal blk00000003_sig0000011a : STD_LOGIC; 
  signal blk00000003_sig00000119 : STD_LOGIC; 
  signal blk00000003_sig00000118 : STD_LOGIC; 
  signal blk00000003_sig00000117 : STD_LOGIC; 
  signal blk00000003_sig00000116 : STD_LOGIC; 
  signal blk00000003_sig00000115 : STD_LOGIC; 
  signal blk00000003_sig00000114 : STD_LOGIC; 
  signal blk00000003_sig00000113 : STD_LOGIC; 
  signal blk00000003_sig00000112 : STD_LOGIC; 
  signal blk00000003_sig00000111 : STD_LOGIC; 
  signal blk00000003_sig00000110 : STD_LOGIC; 
  signal blk00000003_sig0000010f : STD_LOGIC; 
  signal blk00000003_sig0000010e : STD_LOGIC; 
  signal blk00000003_sig0000010d : STD_LOGIC; 
  signal blk00000003_sig0000010c : STD_LOGIC; 
  signal blk00000003_sig0000010b : STD_LOGIC; 
  signal blk00000003_sig0000010a : STD_LOGIC; 
  signal blk00000003_sig00000109 : STD_LOGIC; 
  signal blk00000003_sig00000108 : STD_LOGIC; 
  signal blk00000003_sig00000107 : STD_LOGIC; 
  signal blk00000003_sig00000106 : STD_LOGIC; 
  signal blk00000003_sig00000105 : STD_LOGIC; 
  signal blk00000003_sig00000104 : STD_LOGIC; 
  signal blk00000003_sig00000103 : STD_LOGIC; 
  signal blk00000003_sig00000102 : STD_LOGIC; 
  signal blk00000003_sig00000101 : STD_LOGIC; 
  signal blk00000003_sig00000100 : STD_LOGIC; 
  signal blk00000003_sig000000ff : STD_LOGIC; 
  signal blk00000003_sig000000fe : STD_LOGIC; 
  signal blk00000003_sig000000fd : STD_LOGIC; 
  signal blk00000003_sig000000fc : STD_LOGIC; 
  signal blk00000003_sig000000fb : STD_LOGIC; 
  signal blk00000003_sig000000fa : STD_LOGIC; 
  signal blk00000003_sig000000f9 : STD_LOGIC; 
  signal blk00000003_sig000000f8 : STD_LOGIC; 
  signal blk00000003_sig000000f7 : STD_LOGIC; 
  signal blk00000003_sig000000f6 : STD_LOGIC; 
  signal blk00000003_sig000000f5 : STD_LOGIC; 
  signal blk00000003_sig000000f4 : STD_LOGIC; 
  signal blk00000003_sig000000f3 : STD_LOGIC; 
  signal blk00000003_sig000000f2 : STD_LOGIC; 
  signal blk00000003_sig000000f1 : STD_LOGIC; 
  signal blk00000003_sig000000f0 : STD_LOGIC; 
  signal blk00000003_sig000000ef : STD_LOGIC; 
  signal blk00000003_sig000000ee : STD_LOGIC; 
  signal blk00000003_sig000000ed : STD_LOGIC; 
  signal blk00000003_sig000000ec : STD_LOGIC; 
  signal blk00000003_sig000000eb : STD_LOGIC; 
  signal blk00000003_sig000000ea : STD_LOGIC; 
  signal blk00000003_sig000000e9 : STD_LOGIC; 
  signal blk00000003_sig000000e8 : STD_LOGIC; 
  signal blk00000003_sig000000e7 : STD_LOGIC; 
  signal blk00000003_sig000000e6 : STD_LOGIC; 
  signal blk00000003_sig000000e5 : STD_LOGIC; 
  signal blk00000003_sig000000e4 : STD_LOGIC; 
  signal blk00000003_sig000000e3 : STD_LOGIC; 
  signal blk00000003_sig000000e2 : STD_LOGIC; 
  signal blk00000003_sig000000e1 : STD_LOGIC; 
  signal blk00000003_sig000000e0 : STD_LOGIC; 
  signal blk00000003_sig000000df : STD_LOGIC; 
  signal blk00000003_sig000000de : STD_LOGIC; 
  signal blk00000003_sig000000dd : STD_LOGIC; 
  signal blk00000003_sig000000dc : STD_LOGIC; 
  signal blk00000003_sig000000db : STD_LOGIC; 
  signal blk00000003_sig000000da : STD_LOGIC; 
  signal blk00000003_sig000000d9 : STD_LOGIC; 
  signal blk00000003_sig000000d8 : STD_LOGIC; 
  signal blk00000003_sig000000d7 : STD_LOGIC; 
  signal blk00000003_sig000000d6 : STD_LOGIC; 
  signal blk00000003_sig000000d5 : STD_LOGIC; 
  signal blk00000003_sig000000d4 : STD_LOGIC; 
  signal blk00000003_sig000000d3 : STD_LOGIC; 
  signal blk00000003_sig000000d2 : STD_LOGIC; 
  signal blk00000003_sig000000d1 : STD_LOGIC; 
  signal blk00000003_sig000000d0 : STD_LOGIC; 
  signal blk00000003_sig000000cf : STD_LOGIC; 
  signal blk00000003_sig000000ce : STD_LOGIC; 
  signal blk00000003_sig000000cd : STD_LOGIC; 
  signal blk00000003_sig000000cc : STD_LOGIC; 
  signal blk00000003_sig000000cb : STD_LOGIC; 
  signal blk00000003_sig000000ca : STD_LOGIC; 
  signal blk00000003_sig000000c9 : STD_LOGIC; 
  signal blk00000003_sig000000c8 : STD_LOGIC; 
  signal blk00000003_sig000000c7 : STD_LOGIC; 
  signal blk00000003_sig000000c6 : STD_LOGIC; 
  signal blk00000003_sig000000c5 : STD_LOGIC; 
  signal blk00000003_sig000000c4 : STD_LOGIC; 
  signal blk00000003_sig000000c3 : STD_LOGIC; 
  signal blk00000003_sig000000c2 : STD_LOGIC; 
  signal blk00000003_sig000000c1 : STD_LOGIC; 
  signal blk00000003_sig000000c0 : STD_LOGIC; 
  signal blk00000003_sig000000bf : STD_LOGIC; 
  signal blk00000003_sig000000be : STD_LOGIC; 
  signal blk00000003_sig000000bd : STD_LOGIC; 
  signal blk00000003_sig000000bc : STD_LOGIC; 
  signal blk00000003_sig000000bb : STD_LOGIC; 
  signal blk00000003_sig000000ba : STD_LOGIC; 
  signal blk00000003_sig000000b9 : STD_LOGIC; 
  signal blk00000003_sig000000b8 : STD_LOGIC; 
  signal blk00000003_sig000000b7 : STD_LOGIC; 
  signal blk00000003_sig000000b6 : STD_LOGIC; 
  signal blk00000003_sig000000b5 : STD_LOGIC; 
  signal blk00000003_sig000000b4 : STD_LOGIC; 
  signal blk00000003_sig000000b3 : STD_LOGIC; 
  signal blk00000003_sig000000b2 : STD_LOGIC; 
  signal blk00000003_sig000000b1 : STD_LOGIC; 
  signal blk00000003_sig000000b0 : STD_LOGIC; 
  signal blk00000003_sig000000af : STD_LOGIC; 
  signal blk00000003_sig000000ae : STD_LOGIC; 
  signal blk00000003_sig000000ad : STD_LOGIC; 
  signal blk00000003_sig000000ac : STD_LOGIC; 
  signal blk00000003_sig000000ab : STD_LOGIC; 
  signal blk00000003_sig000000aa : STD_LOGIC; 
  signal blk00000003_sig000000a9 : STD_LOGIC; 
  signal blk00000003_sig000000a8 : STD_LOGIC; 
  signal blk00000003_sig000000a7 : STD_LOGIC; 
  signal blk00000003_sig000000a6 : STD_LOGIC; 
  signal blk00000003_sig000000a5 : STD_LOGIC; 
  signal blk00000003_sig000000a4 : STD_LOGIC; 
  signal blk00000003_sig000000a3 : STD_LOGIC; 
  signal blk00000003_sig000000a2 : STD_LOGIC; 
  signal blk00000003_sig000000a1 : STD_LOGIC; 
  signal blk00000003_sig000000a0 : STD_LOGIC; 
  signal blk00000003_sig0000009f : STD_LOGIC; 
  signal blk00000003_sig0000009e : STD_LOGIC; 
  signal blk00000003_sig0000009d : STD_LOGIC; 
  signal blk00000003_sig0000009c : STD_LOGIC; 
  signal blk00000003_sig0000009b : STD_LOGIC; 
  signal blk00000003_sig0000009a : STD_LOGIC; 
  signal blk00000003_sig00000099 : STD_LOGIC; 
  signal blk00000003_sig00000098 : STD_LOGIC; 
  signal blk00000003_sig00000097 : STD_LOGIC; 
  signal blk00000003_sig00000096 : STD_LOGIC; 
  signal blk00000003_sig00000095 : STD_LOGIC; 
  signal blk00000003_sig00000094 : STD_LOGIC; 
  signal blk00000003_sig00000093 : STD_LOGIC; 
  signal blk00000003_sig00000092 : STD_LOGIC; 
  signal blk00000003_sig00000091 : STD_LOGIC; 
  signal blk00000003_sig00000090 : STD_LOGIC; 
  signal blk00000003_sig0000008f : STD_LOGIC; 
  signal blk00000003_sig0000008e : STD_LOGIC; 
  signal blk00000003_sig0000008d : STD_LOGIC; 
  signal blk00000003_sig0000008c : STD_LOGIC; 
  signal blk00000003_sig0000008b : STD_LOGIC; 
  signal blk00000003_sig0000008a : STD_LOGIC; 
  signal blk00000003_sig00000089 : STD_LOGIC; 
  signal blk00000003_sig00000088 : STD_LOGIC; 
  signal blk00000003_sig00000082 : STD_LOGIC; 
  signal blk00000003_blk000001d6_blk000001d7_sig00000974 : STD_LOGIC; 
  signal blk00000003_blk000001d6_blk000001d7_sig00000973 : STD_LOGIC; 
  signal blk00000003_blk000001d6_blk000001d7_sig00000972 : STD_LOGIC; 
  signal blk00000003_blk000001d6_blk000001d7_sig00000971 : STD_LOGIC; 
  signal blk00000003_blk000001d6_blk000001d7_sig00000970 : STD_LOGIC; 
  signal blk00000003_blk000001d6_blk000001d7_sig0000096f : STD_LOGIC; 
  signal blk00000003_blk000001d6_blk000001d7_sig0000096e : STD_LOGIC; 
  signal blk00000003_blk000001d6_blk000001d7_sig0000096d : STD_LOGIC; 
  signal blk00000003_blk000001d6_blk000001d7_sig0000096c : STD_LOGIC; 
  signal blk00000003_blk000001d6_blk000001d7_sig0000096b : STD_LOGIC; 
  signal blk00000003_blk000001d6_blk000001d7_sig0000096a : STD_LOGIC; 
  signal blk00000003_blk000001d6_blk000001d7_sig00000969 : STD_LOGIC; 
  signal blk00000003_blk000001d6_blk000001d7_sig00000968 : STD_LOGIC; 
  signal blk00000003_blk000001d6_blk000001d7_sig00000967 : STD_LOGIC; 
  signal blk00000003_blk000001d6_blk000001d7_sig00000966 : STD_LOGIC; 
  signal blk00000003_blk000001d6_blk000001d7_sig00000965 : STD_LOGIC; 
  signal blk00000003_blk000001d6_blk000001d7_sig00000964 : STD_LOGIC; 
  signal blk00000003_blk000001d6_blk000001d7_sig00000963 : STD_LOGIC; 
  signal blk00000003_blk000001d6_blk000001d7_sig00000962 : STD_LOGIC; 
  signal blk00000003_blk000001d6_blk000001d7_sig00000961 : STD_LOGIC; 
  signal blk00000003_blk000001d6_blk000001d7_sig00000960 : STD_LOGIC; 
  signal blk00000003_blk000001d6_blk000001d7_sig0000095f : STD_LOGIC; 
  signal blk00000003_blk000001d6_blk000001d7_sig0000095e : STD_LOGIC; 
  signal blk00000003_blk000001d6_blk000001d7_sig0000095d : STD_LOGIC; 
  signal blk00000003_blk000001d6_blk000001d7_sig0000095c : STD_LOGIC; 
  signal blk00000003_blk000001d6_blk000001d7_sig0000095b : STD_LOGIC; 
  signal blk00000003_blk000001d6_blk000001d7_sig0000095a : STD_LOGIC; 
  signal blk00000003_blk000001d6_blk000001d7_sig00000959 : STD_LOGIC; 
  signal blk00000003_blk000001d6_blk000001d7_sig00000958 : STD_LOGIC; 
  signal blk00000003_blk000001d6_blk000001d7_sig00000957 : STD_LOGIC; 
  signal blk00000003_blk000001d6_blk000001d7_sig00000956 : STD_LOGIC; 
  signal blk00000003_blk000001d6_blk000001d7_sig00000955 : STD_LOGIC; 
  signal blk00000003_blk000001d6_blk000001d7_sig00000954 : STD_LOGIC; 
  signal blk00000003_blk00000218_blk00000219_sig00000a16 : STD_LOGIC; 
  signal blk00000003_blk00000218_blk00000219_sig00000a15 : STD_LOGIC; 
  signal blk00000003_blk00000218_blk00000219_sig00000a14 : STD_LOGIC; 
  signal blk00000003_blk00000218_blk00000219_sig00000a13 : STD_LOGIC; 
  signal blk00000003_blk00000218_blk00000219_sig00000a12 : STD_LOGIC; 
  signal blk00000003_blk00000218_blk00000219_sig00000a11 : STD_LOGIC; 
  signal blk00000003_blk00000218_blk00000219_sig00000a10 : STD_LOGIC; 
  signal blk00000003_blk00000218_blk00000219_sig00000a0f : STD_LOGIC; 
  signal blk00000003_blk00000218_blk00000219_sig00000a0e : STD_LOGIC; 
  signal blk00000003_blk00000218_blk00000219_sig00000a0d : STD_LOGIC; 
  signal blk00000003_blk00000218_blk00000219_sig00000a0c : STD_LOGIC; 
  signal blk00000003_blk00000218_blk00000219_sig00000a0b : STD_LOGIC; 
  signal blk00000003_blk00000218_blk00000219_sig00000a0a : STD_LOGIC; 
  signal blk00000003_blk00000218_blk00000219_sig00000a09 : STD_LOGIC; 
  signal blk00000003_blk00000218_blk00000219_sig00000a08 : STD_LOGIC; 
  signal blk00000003_blk00000218_blk00000219_sig00000a07 : STD_LOGIC; 
  signal blk00000003_blk00000218_blk00000219_sig00000a06 : STD_LOGIC; 
  signal blk00000003_blk00000218_blk00000219_sig00000a05 : STD_LOGIC; 
  signal blk00000003_blk00000218_blk00000219_sig00000a04 : STD_LOGIC; 
  signal blk00000003_blk00000218_blk00000219_sig00000a03 : STD_LOGIC; 
  signal blk00000003_blk00000218_blk00000219_sig00000a02 : STD_LOGIC; 
  signal blk00000003_blk00000218_blk00000219_sig00000a01 : STD_LOGIC; 
  signal blk00000003_blk00000218_blk00000219_sig00000a00 : STD_LOGIC; 
  signal blk00000003_blk00000218_blk00000219_sig000009ff : STD_LOGIC; 
  signal blk00000003_blk00000218_blk00000219_sig000009fe : STD_LOGIC; 
  signal blk00000003_blk00000218_blk00000219_sig000009fd : STD_LOGIC; 
  signal blk00000003_blk00000218_blk00000219_sig000009fc : STD_LOGIC; 
  signal blk00000003_blk00000218_blk00000219_sig000009fb : STD_LOGIC; 
  signal blk00000003_blk00000218_blk00000219_sig000009fa : STD_LOGIC; 
  signal blk00000003_blk00000218_blk00000219_sig000009f9 : STD_LOGIC; 
  signal blk00000003_blk00000218_blk00000219_sig000009f8 : STD_LOGIC; 
  signal blk00000003_blk00000218_blk00000219_sig000009f7 : STD_LOGIC; 
  signal blk00000003_blk00000218_blk00000219_sig000009f6 : STD_LOGIC; 
  signal blk00000003_blk0000025a_sig00000aca : STD_LOGIC; 
  signal blk00000003_blk0000025a_sig00000ac9 : STD_LOGIC; 
  signal blk00000003_blk0000025a_sig00000ac8 : STD_LOGIC; 
  signal blk00000003_blk0000025a_sig00000ac7 : STD_LOGIC; 
  signal blk00000003_blk0000025a_sig00000ac6 : STD_LOGIC; 
  signal blk00000003_blk0000025a_sig00000ac5 : STD_LOGIC; 
  signal blk00000003_blk0000025a_sig00000ac4 : STD_LOGIC; 
  signal blk00000003_blk0000025a_sig00000ac3 : STD_LOGIC; 
  signal blk00000003_blk0000025a_sig00000ac2 : STD_LOGIC; 
  signal blk00000003_blk0000025a_sig00000ac1 : STD_LOGIC; 
  signal blk00000003_blk0000025a_sig00000ac0 : STD_LOGIC; 
  signal blk00000003_blk0000025a_sig00000abf : STD_LOGIC; 
  signal blk00000003_blk0000025a_sig00000abe : STD_LOGIC; 
  signal blk00000003_blk0000025a_sig00000abd : STD_LOGIC; 
  signal blk00000003_blk0000025a_sig00000abc : STD_LOGIC; 
  signal blk00000003_blk0000025a_sig00000abb : STD_LOGIC; 
  signal blk00000003_blk0000025a_sig00000aba : STD_LOGIC; 
  signal blk00000003_blk0000025a_sig00000ab9 : STD_LOGIC; 
  signal blk00000003_blk0000025a_sig00000ab8 : STD_LOGIC; 
  signal blk00000003_blk0000025a_sig00000ab7 : STD_LOGIC; 
  signal blk00000003_blk0000025a_sig00000ab6 : STD_LOGIC; 
  signal blk00000003_blk0000025a_sig00000ab5 : STD_LOGIC; 
  signal blk00000003_blk0000025a_sig00000ab4 : STD_LOGIC; 
  signal blk00000003_blk0000025a_sig00000ab3 : STD_LOGIC; 
  signal blk00000003_blk0000025a_sig00000ab2 : STD_LOGIC; 
  signal blk00000003_blk0000025a_sig00000ab1 : STD_LOGIC; 
  signal blk00000003_blk0000025a_sig00000ab0 : STD_LOGIC; 
  signal blk00000003_blk0000025a_sig00000aaf : STD_LOGIC; 
  signal blk00000003_blk0000025a_sig00000aae : STD_LOGIC; 
  signal blk00000003_blk0000025a_sig00000aad : STD_LOGIC; 
  signal blk00000003_blk0000025a_sig00000aac : STD_LOGIC; 
  signal blk00000003_blk0000025a_sig00000aab : STD_LOGIC; 
  signal blk00000003_blk0000025a_sig00000aaa : STD_LOGIC; 
  signal blk00000003_blk0000025a_sig00000aa9 : STD_LOGIC; 
  signal blk00000003_blk0000025a_sig00000aa8 : STD_LOGIC; 
  signal blk00000003_blk0000025a_sig00000aa7 : STD_LOGIC; 
  signal blk00000003_blk0000025a_sig00000aa6 : STD_LOGIC; 
  signal blk00000003_blk0000025a_sig00000aa5 : STD_LOGIC; 
  signal blk00000003_blk0000025a_sig00000aa4 : STD_LOGIC; 
  signal blk00000003_blk0000025a_sig00000aa3 : STD_LOGIC; 
  signal blk00000003_blk0000025a_sig00000aa2 : STD_LOGIC; 
  signal blk00000003_blk0000025a_sig00000aa1 : STD_LOGIC; 
  signal blk00000003_blk0000025a_sig00000aa0 : STD_LOGIC; 
  signal blk00000003_blk0000025a_sig00000a9f : STD_LOGIC; 
  signal blk00000003_blk0000025a_sig00000a9e : STD_LOGIC; 
  signal blk00000003_blk0000025a_sig00000a9d : STD_LOGIC; 
  signal blk00000003_blk0000025a_sig00000a9c : STD_LOGIC; 
  signal blk00000003_blk0000025a_sig00000a9b : STD_LOGIC; 
  signal blk00000003_blk0000025a_sig00000a9a : STD_LOGIC; 
  signal blk00000003_blk0000025a_sig00000a99 : STD_LOGIC; 
  signal blk00000003_blk0000025a_sig00000a98 : STD_LOGIC; 
  signal blk00000003_blk0000025a_sig00000a97 : STD_LOGIC; 
  signal blk00000003_blk0000025a_sig00000a96 : STD_LOGIC; 
  signal blk00000003_blk0000025a_sig00000a95 : STD_LOGIC; 
  signal blk00000003_blk0000025a_sig00000a94 : STD_LOGIC; 
  signal blk00000003_blk0000025a_sig00000a93 : STD_LOGIC; 
  signal blk00000003_blk0000025a_sig00000a92 : STD_LOGIC; 
  signal blk00000003_blk0000025a_sig00000a91 : STD_LOGIC; 
  signal blk00000003_blk0000025a_sig00000a90 : STD_LOGIC; 
  signal blk00000003_blk0000025a_sig00000a8f : STD_LOGIC; 
  signal blk00000003_blk0000025a_sig00000a8e : STD_LOGIC; 
  signal blk00000003_blk0000025a_sig00000a8d : STD_LOGIC; 
  signal blk00000003_blk0000025a_sig00000a8c : STD_LOGIC; 
  signal blk00000003_blk0000025a_sig00000a8b : STD_LOGIC; 
  signal blk00000003_blk0000025a_sig00000a8a : STD_LOGIC; 
  signal blk00000003_blk0000025a_sig00000a89 : STD_LOGIC; 
  signal blk00000003_blk0000025a_sig00000a88 : STD_LOGIC; 
  signal blk00000003_blk0000025a_sig00000a87 : STD_LOGIC; 
  signal blk00000003_blk0000025a_sig00000a86 : STD_LOGIC; 
  signal blk00000003_blk0000025a_sig00000a85 : STD_LOGIC; 
  signal blk00000003_blk0000025a_sig00000a84 : STD_LOGIC; 
  signal blk00000003_blk0000025a_sig00000a83 : STD_LOGIC; 
  signal blk00000003_blk0000025a_sig00000a82 : STD_LOGIC; 
  signal blk00000003_blk0000025a_sig00000a81 : STD_LOGIC; 
  signal blk00000003_blk0000025a_sig00000a80 : STD_LOGIC; 
  signal blk00000003_blk0000025a_sig00000a7f : STD_LOGIC; 
  signal blk00000003_blk0000025a_sig00000a7e : STD_LOGIC; 
  signal blk00000003_blk0000025a_sig00000a7d : STD_LOGIC; 
  signal blk00000003_blk0000025a_sig00000a7c : STD_LOGIC; 
  signal blk00000003_blk0000025a_sig00000a7b : STD_LOGIC; 
  signal blk00000003_blk0000025a_sig00000a7a : STD_LOGIC; 
  signal blk00000003_blk0000025a_sig00000a79 : STD_LOGIC; 
  signal blk00000003_blk0000025a_sig00000a78 : STD_LOGIC; 
  signal blk00000003_blk0000025a_sig00000a77 : STD_LOGIC; 
  signal blk00000003_blk0000025a_sig00000a76 : STD_LOGIC; 
  signal blk00000003_blk0000025a_sig00000a75 : STD_LOGIC; 
  signal blk00000003_blk0000025a_sig00000a74 : STD_LOGIC; 
  signal blk00000003_blk0000025a_sig00000a73 : STD_LOGIC; 
  signal blk00000003_blk0000025a_sig00000a72 : STD_LOGIC; 
  signal blk00000003_blk0000025a_sig00000a71 : STD_LOGIC; 
  signal blk00000003_blk000002a1_sig00000b7e : STD_LOGIC; 
  signal blk00000003_blk000002a1_sig00000b7d : STD_LOGIC; 
  signal blk00000003_blk000002a1_sig00000b7c : STD_LOGIC; 
  signal blk00000003_blk000002a1_sig00000b7b : STD_LOGIC; 
  signal blk00000003_blk000002a1_sig00000b7a : STD_LOGIC; 
  signal blk00000003_blk000002a1_sig00000b79 : STD_LOGIC; 
  signal blk00000003_blk000002a1_sig00000b78 : STD_LOGIC; 
  signal blk00000003_blk000002a1_sig00000b77 : STD_LOGIC; 
  signal blk00000003_blk000002a1_sig00000b76 : STD_LOGIC; 
  signal blk00000003_blk000002a1_sig00000b75 : STD_LOGIC; 
  signal blk00000003_blk000002a1_sig00000b74 : STD_LOGIC; 
  signal blk00000003_blk000002a1_sig00000b73 : STD_LOGIC; 
  signal blk00000003_blk000002a1_sig00000b72 : STD_LOGIC; 
  signal blk00000003_blk000002a1_sig00000b71 : STD_LOGIC; 
  signal blk00000003_blk000002a1_sig00000b70 : STD_LOGIC; 
  signal blk00000003_blk000002a1_sig00000b6f : STD_LOGIC; 
  signal blk00000003_blk000002a1_sig00000b6e : STD_LOGIC; 
  signal blk00000003_blk000002a1_sig00000b6d : STD_LOGIC; 
  signal blk00000003_blk000002a1_sig00000b6c : STD_LOGIC; 
  signal blk00000003_blk000002a1_sig00000b6b : STD_LOGIC; 
  signal blk00000003_blk000002a1_sig00000b6a : STD_LOGIC; 
  signal blk00000003_blk000002a1_sig00000b69 : STD_LOGIC; 
  signal blk00000003_blk000002a1_sig00000b68 : STD_LOGIC; 
  signal blk00000003_blk000002a1_sig00000b67 : STD_LOGIC; 
  signal blk00000003_blk000002a1_sig00000b66 : STD_LOGIC; 
  signal blk00000003_blk000002a1_sig00000b65 : STD_LOGIC; 
  signal blk00000003_blk000002a1_sig00000b64 : STD_LOGIC; 
  signal blk00000003_blk000002a1_sig00000b63 : STD_LOGIC; 
  signal blk00000003_blk000002a1_sig00000b62 : STD_LOGIC; 
  signal blk00000003_blk000002a1_sig00000b61 : STD_LOGIC; 
  signal blk00000003_blk000002a1_sig00000b60 : STD_LOGIC; 
  signal blk00000003_blk000002a1_sig00000b5f : STD_LOGIC; 
  signal blk00000003_blk000002a1_sig00000b5e : STD_LOGIC; 
  signal blk00000003_blk000002a1_sig00000b5d : STD_LOGIC; 
  signal blk00000003_blk000002a1_sig00000b5c : STD_LOGIC; 
  signal blk00000003_blk000002a1_sig00000b5b : STD_LOGIC; 
  signal blk00000003_blk000002a1_sig00000b5a : STD_LOGIC; 
  signal blk00000003_blk000002a1_sig00000b59 : STD_LOGIC; 
  signal blk00000003_blk000002a1_sig00000b58 : STD_LOGIC; 
  signal blk00000003_blk000002a1_sig00000b57 : STD_LOGIC; 
  signal blk00000003_blk000002a1_sig00000b56 : STD_LOGIC; 
  signal blk00000003_blk000002a1_sig00000b55 : STD_LOGIC; 
  signal blk00000003_blk000002a1_sig00000b54 : STD_LOGIC; 
  signal blk00000003_blk000002a1_sig00000b53 : STD_LOGIC; 
  signal blk00000003_blk000002a1_sig00000b52 : STD_LOGIC; 
  signal blk00000003_blk000002a1_sig00000b51 : STD_LOGIC; 
  signal blk00000003_blk000002a1_sig00000b50 : STD_LOGIC; 
  signal blk00000003_blk000002a1_sig00000b4f : STD_LOGIC; 
  signal blk00000003_blk000002a1_sig00000b4e : STD_LOGIC; 
  signal blk00000003_blk000002a1_sig00000b4d : STD_LOGIC; 
  signal blk00000003_blk000002a1_sig00000b4c : STD_LOGIC; 
  signal blk00000003_blk000002a1_sig00000b4b : STD_LOGIC; 
  signal blk00000003_blk000002a1_sig00000b4a : STD_LOGIC; 
  signal blk00000003_blk000002a1_sig00000b49 : STD_LOGIC; 
  signal blk00000003_blk000002a1_sig00000b48 : STD_LOGIC; 
  signal blk00000003_blk000002a1_sig00000b47 : STD_LOGIC; 
  signal blk00000003_blk000002a1_sig00000b46 : STD_LOGIC; 
  signal blk00000003_blk000002a1_sig00000b45 : STD_LOGIC; 
  signal blk00000003_blk000002a1_sig00000b44 : STD_LOGIC; 
  signal blk00000003_blk000002a1_sig00000b43 : STD_LOGIC; 
  signal blk00000003_blk000002a1_sig00000b42 : STD_LOGIC; 
  signal blk00000003_blk000002a1_sig00000b41 : STD_LOGIC; 
  signal blk00000003_blk000002a1_sig00000b40 : STD_LOGIC; 
  signal blk00000003_blk000002a1_sig00000b3f : STD_LOGIC; 
  signal blk00000003_blk000002a1_sig00000b3e : STD_LOGIC; 
  signal blk00000003_blk000002a1_sig00000b3d : STD_LOGIC; 
  signal blk00000003_blk000002a1_sig00000b3c : STD_LOGIC; 
  signal blk00000003_blk000002a1_sig00000b3b : STD_LOGIC; 
  signal blk00000003_blk000002a1_sig00000b3a : STD_LOGIC; 
  signal blk00000003_blk000002a1_sig00000b39 : STD_LOGIC; 
  signal blk00000003_blk000002a1_sig00000b38 : STD_LOGIC; 
  signal blk00000003_blk000002a1_sig00000b37 : STD_LOGIC; 
  signal blk00000003_blk000002a1_sig00000b36 : STD_LOGIC; 
  signal blk00000003_blk000002a1_sig00000b35 : STD_LOGIC; 
  signal blk00000003_blk000002a1_sig00000b34 : STD_LOGIC; 
  signal blk00000003_blk000002a1_sig00000b33 : STD_LOGIC; 
  signal blk00000003_blk000002a1_sig00000b32 : STD_LOGIC; 
  signal blk00000003_blk000002a1_sig00000b31 : STD_LOGIC; 
  signal blk00000003_blk000002a1_sig00000b30 : STD_LOGIC; 
  signal blk00000003_blk000002a1_sig00000b2f : STD_LOGIC; 
  signal blk00000003_blk000002a1_sig00000b2e : STD_LOGIC; 
  signal blk00000003_blk000002a1_sig00000b2d : STD_LOGIC; 
  signal blk00000003_blk000002a1_sig00000b2c : STD_LOGIC; 
  signal blk00000003_blk000002a1_sig00000b2b : STD_LOGIC; 
  signal blk00000003_blk000002a1_sig00000b2a : STD_LOGIC; 
  signal blk00000003_blk000002a1_sig00000b29 : STD_LOGIC; 
  signal blk00000003_blk000002a1_sig00000b28 : STD_LOGIC; 
  signal blk00000003_blk000002a1_sig00000b27 : STD_LOGIC; 
  signal blk00000003_blk000002a1_sig00000b26 : STD_LOGIC; 
  signal blk00000003_blk000002a1_sig00000b25 : STD_LOGIC; 
  signal blk00000003_blk00000326_blk00000327_sig00000b8a : STD_LOGIC; 
  signal blk00000003_blk00000326_blk00000327_sig00000b89 : STD_LOGIC; 
  signal blk00000003_blk00000326_blk00000327_sig00000b88 : STD_LOGIC; 
  signal blk00000003_blk0000032c_blk0000032d_sig00000c2c : STD_LOGIC; 
  signal blk00000003_blk0000032c_blk0000032d_sig00000c2b : STD_LOGIC; 
  signal blk00000003_blk0000032c_blk0000032d_sig00000c2a : STD_LOGIC; 
  signal blk00000003_blk0000032c_blk0000032d_sig00000c29 : STD_LOGIC; 
  signal blk00000003_blk0000032c_blk0000032d_sig00000c28 : STD_LOGIC; 
  signal blk00000003_blk0000032c_blk0000032d_sig00000c27 : STD_LOGIC; 
  signal blk00000003_blk0000032c_blk0000032d_sig00000c26 : STD_LOGIC; 
  signal blk00000003_blk0000032c_blk0000032d_sig00000c25 : STD_LOGIC; 
  signal blk00000003_blk0000032c_blk0000032d_sig00000c24 : STD_LOGIC; 
  signal blk00000003_blk0000032c_blk0000032d_sig00000c23 : STD_LOGIC; 
  signal blk00000003_blk0000032c_blk0000032d_sig00000c22 : STD_LOGIC; 
  signal blk00000003_blk0000032c_blk0000032d_sig00000c21 : STD_LOGIC; 
  signal blk00000003_blk0000032c_blk0000032d_sig00000c20 : STD_LOGIC; 
  signal blk00000003_blk0000032c_blk0000032d_sig00000c1f : STD_LOGIC; 
  signal blk00000003_blk0000032c_blk0000032d_sig00000c1e : STD_LOGIC; 
  signal blk00000003_blk0000032c_blk0000032d_sig00000c1d : STD_LOGIC; 
  signal blk00000003_blk0000032c_blk0000032d_sig00000c1c : STD_LOGIC; 
  signal blk00000003_blk0000032c_blk0000032d_sig00000c1b : STD_LOGIC; 
  signal blk00000003_blk0000032c_blk0000032d_sig00000c1a : STD_LOGIC; 
  signal blk00000003_blk0000032c_blk0000032d_sig00000c19 : STD_LOGIC; 
  signal blk00000003_blk0000032c_blk0000032d_sig00000c18 : STD_LOGIC; 
  signal blk00000003_blk0000032c_blk0000032d_sig00000c17 : STD_LOGIC; 
  signal blk00000003_blk0000032c_blk0000032d_sig00000c16 : STD_LOGIC; 
  signal blk00000003_blk0000032c_blk0000032d_sig00000c15 : STD_LOGIC; 
  signal blk00000003_blk0000032c_blk0000032d_sig00000c14 : STD_LOGIC; 
  signal blk00000003_blk0000032c_blk0000032d_sig00000c13 : STD_LOGIC; 
  signal blk00000003_blk0000032c_blk0000032d_sig00000c12 : STD_LOGIC; 
  signal blk00000003_blk0000032c_blk0000032d_sig00000c11 : STD_LOGIC; 
  signal blk00000003_blk0000032c_blk0000032d_sig00000c10 : STD_LOGIC; 
  signal blk00000003_blk0000032c_blk0000032d_sig00000c0f : STD_LOGIC; 
  signal blk00000003_blk0000032c_blk0000032d_sig00000c0e : STD_LOGIC; 
  signal blk00000003_blk0000032c_blk0000032d_sig00000c0d : STD_LOGIC; 
  signal blk00000003_blk0000032c_blk0000032d_sig00000c0c : STD_LOGIC; 
  signal blk00000003_blk0000036e_blk0000036f_sig00000cce : STD_LOGIC; 
  signal blk00000003_blk0000036e_blk0000036f_sig00000ccd : STD_LOGIC; 
  signal blk00000003_blk0000036e_blk0000036f_sig00000ccc : STD_LOGIC; 
  signal blk00000003_blk0000036e_blk0000036f_sig00000ccb : STD_LOGIC; 
  signal blk00000003_blk0000036e_blk0000036f_sig00000cca : STD_LOGIC; 
  signal blk00000003_blk0000036e_blk0000036f_sig00000cc9 : STD_LOGIC; 
  signal blk00000003_blk0000036e_blk0000036f_sig00000cc8 : STD_LOGIC; 
  signal blk00000003_blk0000036e_blk0000036f_sig00000cc7 : STD_LOGIC; 
  signal blk00000003_blk0000036e_blk0000036f_sig00000cc6 : STD_LOGIC; 
  signal blk00000003_blk0000036e_blk0000036f_sig00000cc5 : STD_LOGIC; 
  signal blk00000003_blk0000036e_blk0000036f_sig00000cc4 : STD_LOGIC; 
  signal blk00000003_blk0000036e_blk0000036f_sig00000cc3 : STD_LOGIC; 
  signal blk00000003_blk0000036e_blk0000036f_sig00000cc2 : STD_LOGIC; 
  signal blk00000003_blk0000036e_blk0000036f_sig00000cc1 : STD_LOGIC; 
  signal blk00000003_blk0000036e_blk0000036f_sig00000cc0 : STD_LOGIC; 
  signal blk00000003_blk0000036e_blk0000036f_sig00000cbf : STD_LOGIC; 
  signal blk00000003_blk0000036e_blk0000036f_sig00000cbe : STD_LOGIC; 
  signal blk00000003_blk0000036e_blk0000036f_sig00000cbd : STD_LOGIC; 
  signal blk00000003_blk0000036e_blk0000036f_sig00000cbc : STD_LOGIC; 
  signal blk00000003_blk0000036e_blk0000036f_sig00000cbb : STD_LOGIC; 
  signal blk00000003_blk0000036e_blk0000036f_sig00000cba : STD_LOGIC; 
  signal blk00000003_blk0000036e_blk0000036f_sig00000cb9 : STD_LOGIC; 
  signal blk00000003_blk0000036e_blk0000036f_sig00000cb8 : STD_LOGIC; 
  signal blk00000003_blk0000036e_blk0000036f_sig00000cb7 : STD_LOGIC; 
  signal blk00000003_blk0000036e_blk0000036f_sig00000cb6 : STD_LOGIC; 
  signal blk00000003_blk0000036e_blk0000036f_sig00000cb5 : STD_LOGIC; 
  signal blk00000003_blk0000036e_blk0000036f_sig00000cb4 : STD_LOGIC; 
  signal blk00000003_blk0000036e_blk0000036f_sig00000cb3 : STD_LOGIC; 
  signal blk00000003_blk0000036e_blk0000036f_sig00000cb2 : STD_LOGIC; 
  signal blk00000003_blk0000036e_blk0000036f_sig00000cb1 : STD_LOGIC; 
  signal blk00000003_blk0000036e_blk0000036f_sig00000cb0 : STD_LOGIC; 
  signal blk00000003_blk0000036e_blk0000036f_sig00000caf : STD_LOGIC; 
  signal blk00000003_blk0000036e_blk0000036f_sig00000cae : STD_LOGIC; 
  signal blk00000003_blk000003b0_blk000003b1_sig00000cd9 : STD_LOGIC; 
  signal blk00000003_blk000003b0_blk000003b1_sig00000cd8 : STD_LOGIC; 
  signal blk00000003_blk000003b0_blk000003b1_sig00000cd7 : STD_LOGIC; 
  signal blk00000003_blk00000418_sig00000d1b : STD_LOGIC; 
  signal blk00000003_blk00000418_blk00000419_sig00000d7b : STD_LOGIC; 
  signal blk00000003_blk00000418_blk00000419_sig00000d7a : STD_LOGIC; 
  signal blk00000003_blk00000418_blk00000419_sig00000d79 : STD_LOGIC; 
  signal blk00000003_blk00000418_blk00000419_sig00000d78 : STD_LOGIC; 
  signal blk00000003_blk00000418_blk00000419_sig00000d77 : STD_LOGIC; 
  signal blk00000003_blk00000418_blk00000419_sig00000d76 : STD_LOGIC; 
  signal blk00000003_blk00000418_blk00000419_sig00000d75 : STD_LOGIC; 
  signal blk00000003_blk00000418_blk00000419_sig00000d74 : STD_LOGIC; 
  signal blk00000003_blk00000418_blk00000419_sig00000d73 : STD_LOGIC; 
  signal blk00000003_blk00000418_blk00000419_sig00000d72 : STD_LOGIC; 
  signal blk00000003_blk00000418_blk00000419_sig00000d71 : STD_LOGIC; 
  signal blk00000003_blk00000418_blk00000419_sig00000d70 : STD_LOGIC; 
  signal blk00000003_blk00000418_blk00000419_sig00000d6f : STD_LOGIC; 
  signal blk00000003_blk00000418_blk00000419_sig00000d6e : STD_LOGIC; 
  signal blk00000003_blk00000418_blk00000419_sig00000d6d : STD_LOGIC; 
  signal blk00000003_blk00000418_blk00000419_sig00000d6c : STD_LOGIC; 
  signal blk00000003_blk00000418_blk00000419_sig00000d6b : STD_LOGIC; 
  signal blk00000003_blk00000418_blk00000419_sig00000d6a : STD_LOGIC; 
  signal blk00000003_blk00000418_blk00000419_sig00000d69 : STD_LOGIC; 
  signal blk00000003_blk00000418_blk00000419_sig00000d68 : STD_LOGIC; 
  signal blk00000003_blk00000418_blk00000419_sig00000d67 : STD_LOGIC; 
  signal blk00000003_blk00000418_blk00000419_sig00000d66 : STD_LOGIC; 
  signal blk00000003_blk00000418_blk00000419_sig00000d65 : STD_LOGIC; 
  signal blk00000003_blk00000418_blk00000419_sig00000d64 : STD_LOGIC; 
  signal blk00000003_blk00000418_blk00000419_sig00000d63 : STD_LOGIC; 
  signal blk00000003_blk00000418_blk00000419_sig00000d62 : STD_LOGIC; 
  signal blk00000003_blk00000418_blk00000419_sig00000d61 : STD_LOGIC; 
  signal blk00000003_blk00000418_blk00000419_sig00000d60 : STD_LOGIC; 
  signal blk00000003_blk00000418_blk00000419_sig00000d5f : STD_LOGIC; 
  signal blk00000003_blk00000418_blk00000419_sig00000d5e : STD_LOGIC; 
  signal blk00000003_blk00000418_blk00000419_sig00000d5d : STD_LOGIC; 
  signal blk00000003_blk00000418_blk00000419_sig00000d5c : STD_LOGIC; 
  signal blk00000003_blk00000459_sig00000dbd : STD_LOGIC; 
  signal blk00000003_blk00000459_blk0000045a_sig00000e1d : STD_LOGIC; 
  signal blk00000003_blk00000459_blk0000045a_sig00000e1c : STD_LOGIC; 
  signal blk00000003_blk00000459_blk0000045a_sig00000e1b : STD_LOGIC; 
  signal blk00000003_blk00000459_blk0000045a_sig00000e1a : STD_LOGIC; 
  signal blk00000003_blk00000459_blk0000045a_sig00000e19 : STD_LOGIC; 
  signal blk00000003_blk00000459_blk0000045a_sig00000e18 : STD_LOGIC; 
  signal blk00000003_blk00000459_blk0000045a_sig00000e17 : STD_LOGIC; 
  signal blk00000003_blk00000459_blk0000045a_sig00000e16 : STD_LOGIC; 
  signal blk00000003_blk00000459_blk0000045a_sig00000e15 : STD_LOGIC; 
  signal blk00000003_blk00000459_blk0000045a_sig00000e14 : STD_LOGIC; 
  signal blk00000003_blk00000459_blk0000045a_sig00000e13 : STD_LOGIC; 
  signal blk00000003_blk00000459_blk0000045a_sig00000e12 : STD_LOGIC; 
  signal blk00000003_blk00000459_blk0000045a_sig00000e11 : STD_LOGIC; 
  signal blk00000003_blk00000459_blk0000045a_sig00000e10 : STD_LOGIC; 
  signal blk00000003_blk00000459_blk0000045a_sig00000e0f : STD_LOGIC; 
  signal blk00000003_blk00000459_blk0000045a_sig00000e0e : STD_LOGIC; 
  signal blk00000003_blk00000459_blk0000045a_sig00000e0d : STD_LOGIC; 
  signal blk00000003_blk00000459_blk0000045a_sig00000e0c : STD_LOGIC; 
  signal blk00000003_blk00000459_blk0000045a_sig00000e0b : STD_LOGIC; 
  signal blk00000003_blk00000459_blk0000045a_sig00000e0a : STD_LOGIC; 
  signal blk00000003_blk00000459_blk0000045a_sig00000e09 : STD_LOGIC; 
  signal blk00000003_blk00000459_blk0000045a_sig00000e08 : STD_LOGIC; 
  signal blk00000003_blk00000459_blk0000045a_sig00000e07 : STD_LOGIC; 
  signal blk00000003_blk00000459_blk0000045a_sig00000e06 : STD_LOGIC; 
  signal blk00000003_blk00000459_blk0000045a_sig00000e05 : STD_LOGIC; 
  signal blk00000003_blk00000459_blk0000045a_sig00000e04 : STD_LOGIC; 
  signal blk00000003_blk00000459_blk0000045a_sig00000e03 : STD_LOGIC; 
  signal blk00000003_blk00000459_blk0000045a_sig00000e02 : STD_LOGIC; 
  signal blk00000003_blk00000459_blk0000045a_sig00000e01 : STD_LOGIC; 
  signal blk00000003_blk00000459_blk0000045a_sig00000e00 : STD_LOGIC; 
  signal blk00000003_blk00000459_blk0000045a_sig00000dff : STD_LOGIC; 
  signal blk00000003_blk00000459_blk0000045a_sig00000dfe : STD_LOGIC; 
  signal blk00000003_blk0000049a_sig00000e99 : STD_LOGIC; 
  signal blk00000003_blk0000049a_sig00000e98 : STD_LOGIC; 
  signal blk00000003_blk0000049a_sig00000e97 : STD_LOGIC; 
  signal blk00000003_blk0000049a_sig00000e96 : STD_LOGIC; 
  signal blk00000003_blk0000049a_sig00000e95 : STD_LOGIC; 
  signal blk00000003_blk0000049a_sig00000e94 : STD_LOGIC; 
  signal blk00000003_blk0000049a_sig00000e93 : STD_LOGIC; 
  signal blk00000003_blk0000049a_sig00000e92 : STD_LOGIC; 
  signal blk00000003_blk0000049a_sig00000e91 : STD_LOGIC; 
  signal blk00000003_blk0000049a_sig00000e90 : STD_LOGIC; 
  signal blk00000003_blk0000049a_sig00000e8f : STD_LOGIC; 
  signal blk00000003_blk0000049a_sig00000e8e : STD_LOGIC; 
  signal blk00000003_blk0000049a_sig00000e8d : STD_LOGIC; 
  signal blk00000003_blk0000049a_sig00000e8c : STD_LOGIC; 
  signal blk00000003_blk0000049a_sig00000e8b : STD_LOGIC; 
  signal blk00000003_blk0000049a_sig00000e8a : STD_LOGIC; 
  signal blk00000003_blk0000049a_sig00000e89 : STD_LOGIC; 
  signal blk00000003_blk0000049a_sig00000e88 : STD_LOGIC; 
  signal blk00000003_blk0000049a_sig00000e87 : STD_LOGIC; 
  signal blk00000003_blk0000049a_sig00000e86 : STD_LOGIC; 
  signal blk00000003_blk0000049a_sig00000e85 : STD_LOGIC; 
  signal blk00000003_blk0000049a_sig00000e84 : STD_LOGIC; 
  signal blk00000003_blk0000049a_sig00000e83 : STD_LOGIC; 
  signal blk00000003_blk0000049a_sig00000e82 : STD_LOGIC; 
  signal blk00000003_blk0000049a_sig00000e81 : STD_LOGIC; 
  signal blk00000003_blk0000049a_sig00000e80 : STD_LOGIC; 
  signal blk00000003_blk0000049a_sig00000e7f : STD_LOGIC; 
  signal blk00000003_blk0000049a_sig00000e7e : STD_LOGIC; 
  signal blk00000003_blk0000049a_sig00000e7d : STD_LOGIC; 
  signal blk00000003_blk0000049a_sig00000e7c : STD_LOGIC; 
  signal blk00000003_blk0000049a_sig00000e7b : STD_LOGIC; 
  signal blk00000003_blk0000049a_sig00000e7a : STD_LOGIC; 
  signal blk00000003_blk0000049a_sig00000e79 : STD_LOGIC; 
  signal blk00000003_blk0000049a_sig00000e78 : STD_LOGIC; 
  signal blk00000003_blk0000049a_sig00000e77 : STD_LOGIC; 
  signal blk00000003_blk0000049a_sig00000e76 : STD_LOGIC; 
  signal blk00000003_blk0000049a_sig00000e75 : STD_LOGIC; 
  signal blk00000003_blk0000049a_sig00000e74 : STD_LOGIC; 
  signal blk00000003_blk0000049a_sig00000e73 : STD_LOGIC; 
  signal blk00000003_blk0000049a_sig00000e72 : STD_LOGIC; 
  signal blk00000003_blk0000049a_sig00000e71 : STD_LOGIC; 
  signal blk00000003_blk0000049a_sig00000e70 : STD_LOGIC; 
  signal blk00000003_blk0000049a_sig00000e6f : STD_LOGIC; 
  signal blk00000003_blk0000049a_sig00000e6e : STD_LOGIC; 
  signal blk00000003_blk0000049a_sig00000e6d : STD_LOGIC; 
  signal blk00000003_blk0000049a_sig00000e6c : STD_LOGIC; 
  signal blk00000003_blk0000049a_sig00000e6b : STD_LOGIC; 
  signal blk00000003_blk0000049a_sig00000e6a : STD_LOGIC; 
  signal blk00000003_blk0000049a_sig00000e69 : STD_LOGIC; 
  signal blk00000003_blk0000049a_sig00000e68 : STD_LOGIC; 
  signal blk00000003_blk0000049a_sig00000e67 : STD_LOGIC; 
  signal blk00000003_blk0000049a_sig00000e66 : STD_LOGIC; 
  signal blk00000003_blk0000049a_sig00000e65 : STD_LOGIC; 
  signal blk00000003_blk0000049a_sig00000e64 : STD_LOGIC; 
  signal blk00000003_blk0000049a_sig00000e63 : STD_LOGIC; 
  signal blk00000003_blk0000049a_sig00000e62 : STD_LOGIC; 
  signal blk00000003_blk0000049a_sig00000e61 : STD_LOGIC; 
  signal blk00000003_blk0000049a_sig00000e60 : STD_LOGIC; 
  signal blk00000003_blk0000049a_sig00000e5f : STD_LOGIC; 
  signal blk00000003_blk0000049a_sig00000e5e : STD_LOGIC; 
  signal blk00000003_blk0000049a_sig00000e5d : STD_LOGIC; 
  signal blk00000003_blk000004f7_sig00000f15 : STD_LOGIC; 
  signal blk00000003_blk000004f7_sig00000f14 : STD_LOGIC; 
  signal blk00000003_blk000004f7_sig00000f13 : STD_LOGIC; 
  signal blk00000003_blk000004f7_sig00000f12 : STD_LOGIC; 
  signal blk00000003_blk000004f7_sig00000f11 : STD_LOGIC; 
  signal blk00000003_blk000004f7_sig00000f10 : STD_LOGIC; 
  signal blk00000003_blk000004f7_sig00000f0f : STD_LOGIC; 
  signal blk00000003_blk000004f7_sig00000f0e : STD_LOGIC; 
  signal blk00000003_blk000004f7_sig00000f0d : STD_LOGIC; 
  signal blk00000003_blk000004f7_sig00000f0c : STD_LOGIC; 
  signal blk00000003_blk000004f7_sig00000f0b : STD_LOGIC; 
  signal blk00000003_blk000004f7_sig00000f0a : STD_LOGIC; 
  signal blk00000003_blk000004f7_sig00000f09 : STD_LOGIC; 
  signal blk00000003_blk000004f7_sig00000f08 : STD_LOGIC; 
  signal blk00000003_blk000004f7_sig00000f07 : STD_LOGIC; 
  signal blk00000003_blk000004f7_sig00000f06 : STD_LOGIC; 
  signal blk00000003_blk000004f7_sig00000f05 : STD_LOGIC; 
  signal blk00000003_blk000004f7_sig00000f04 : STD_LOGIC; 
  signal blk00000003_blk000004f7_sig00000f03 : STD_LOGIC; 
  signal blk00000003_blk000004f7_sig00000f02 : STD_LOGIC; 
  signal blk00000003_blk000004f7_sig00000f01 : STD_LOGIC; 
  signal blk00000003_blk000004f7_sig00000f00 : STD_LOGIC; 
  signal blk00000003_blk000004f7_sig00000eff : STD_LOGIC; 
  signal blk00000003_blk000004f7_sig00000efe : STD_LOGIC; 
  signal blk00000003_blk000004f7_sig00000efd : STD_LOGIC; 
  signal blk00000003_blk000004f7_sig00000efc : STD_LOGIC; 
  signal blk00000003_blk000004f7_sig00000efb : STD_LOGIC; 
  signal blk00000003_blk000004f7_sig00000efa : STD_LOGIC; 
  signal blk00000003_blk000004f7_sig00000ef9 : STD_LOGIC; 
  signal blk00000003_blk000004f7_sig00000ef8 : STD_LOGIC; 
  signal blk00000003_blk000004f7_sig00000ef7 : STD_LOGIC; 
  signal blk00000003_blk000004f7_sig00000ef6 : STD_LOGIC; 
  signal blk00000003_blk000004f7_sig00000ef5 : STD_LOGIC; 
  signal blk00000003_blk000004f7_sig00000ef4 : STD_LOGIC; 
  signal blk00000003_blk000004f7_sig00000ef3 : STD_LOGIC; 
  signal blk00000003_blk000004f7_sig00000ef2 : STD_LOGIC; 
  signal blk00000003_blk000004f7_sig00000ef1 : STD_LOGIC; 
  signal blk00000003_blk000004f7_sig00000ef0 : STD_LOGIC; 
  signal blk00000003_blk000004f7_sig00000eef : STD_LOGIC; 
  signal blk00000003_blk000004f7_sig00000eee : STD_LOGIC; 
  signal blk00000003_blk000004f7_sig00000eed : STD_LOGIC; 
  signal blk00000003_blk000004f7_sig00000eec : STD_LOGIC; 
  signal blk00000003_blk000004f7_sig00000eeb : STD_LOGIC; 
  signal blk00000003_blk000004f7_sig00000eea : STD_LOGIC; 
  signal blk00000003_blk000004f7_sig00000ee9 : STD_LOGIC; 
  signal blk00000003_blk000004f7_sig00000ee8 : STD_LOGIC; 
  signal blk00000003_blk000004f7_sig00000ee7 : STD_LOGIC; 
  signal blk00000003_blk000004f7_sig00000ee6 : STD_LOGIC; 
  signal blk00000003_blk000004f7_sig00000ee5 : STD_LOGIC; 
  signal blk00000003_blk000004f7_sig00000ee4 : STD_LOGIC; 
  signal blk00000003_blk000004f7_sig00000ee3 : STD_LOGIC; 
  signal blk00000003_blk000004f7_sig00000ee2 : STD_LOGIC; 
  signal blk00000003_blk000004f7_sig00000ee1 : STD_LOGIC; 
  signal blk00000003_blk000004f7_sig00000ee0 : STD_LOGIC; 
  signal blk00000003_blk000004f7_sig00000edf : STD_LOGIC; 
  signal blk00000003_blk000004f7_sig00000ede : STD_LOGIC; 
  signal blk00000003_blk000004f7_sig00000edd : STD_LOGIC; 
  signal blk00000003_blk000004f7_sig00000edc : STD_LOGIC; 
  signal blk00000003_blk000004f7_sig00000edb : STD_LOGIC; 
  signal blk00000003_blk000004f7_sig00000eda : STD_LOGIC; 
  signal blk00000003_blk000004f7_sig00000ed9 : STD_LOGIC; 
  signal blk00000003_blk00000559_blk0000055a_sig00000f21 : STD_LOGIC; 
  signal blk00000003_blk00000559_blk0000055a_sig00000f20 : STD_LOGIC; 
  signal blk00000003_blk00000559_blk0000055a_sig00000f1f : STD_LOGIC; 
  signal blk00000003_blk0000058d_sig00000f51 : STD_LOGIC; 
  signal blk00000003_blk0000058d_sig00000f50 : STD_LOGIC; 
  signal blk00000003_blk0000058d_sig00000f4f : STD_LOGIC; 
  signal blk00000003_blk0000058d_sig00000f4e : STD_LOGIC; 
  signal blk00000003_blk0000058d_sig00000f4d : STD_LOGIC; 
  signal blk00000003_blk0000058d_sig00000f4c : STD_LOGIC; 
  signal blk00000003_blk0000058d_sig00000f4b : STD_LOGIC; 
  signal blk00000003_blk0000058d_sig00000f4a : STD_LOGIC; 
  signal blk00000003_blk0000058d_sig00000f49 : STD_LOGIC; 
  signal blk00000003_blk0000058d_sig00000f48 : STD_LOGIC; 
  signal blk00000003_blk0000058d_sig00000f47 : STD_LOGIC; 
  signal blk00000003_blk0000058d_sig00000f46 : STD_LOGIC; 
  signal blk00000003_blk0000058d_sig00000f45 : STD_LOGIC; 
  signal blk00000003_blk0000058d_sig00000f44 : STD_LOGIC; 
  signal blk00000003_blk0000058d_sig00000f43 : STD_LOGIC; 
  signal blk00000003_blk0000058d_sig00000f42 : STD_LOGIC; 
  signal blk00000003_blk0000058d_sig00000f41 : STD_LOGIC; 
  signal blk00000003_blk0000058d_sig00000f40 : STD_LOGIC; 
  signal blk00000003_blk0000058d_sig00000f3f : STD_LOGIC; 
  signal blk00000003_blk0000058d_sig00000f3e : STD_LOGIC; 
  signal blk00000003_blk0000058d_sig00000f3d : STD_LOGIC; 
  signal blk00000003_blk0000058d_sig00000f3c : STD_LOGIC; 
  signal blk00000003_blk0000058d_sig00000f3b : STD_LOGIC; 
  signal blk00000003_blk0000058d_sig00000f3a : STD_LOGIC; 
  signal blk00000003_blk0000068f_blk00000690_sig00000f93 : STD_LOGIC; 
  signal blk00000003_blk0000068f_blk00000690_sig00000f92 : STD_LOGIC; 
  signal blk00000003_blk0000068f_blk00000690_sig00000f91 : STD_LOGIC; 
  signal blk00000003_blk0000068f_blk00000690_sig00000f90 : STD_LOGIC; 
  signal blk00000003_blk0000068f_blk00000690_sig00000f8f : STD_LOGIC; 
  signal blk00000003_blk0000068f_blk00000690_sig00000f8e : STD_LOGIC; 
  signal blk00000003_blk0000068f_blk00000690_sig00000f8d : STD_LOGIC; 
  signal blk00000003_blk0000068f_blk00000690_sig00000f8c : STD_LOGIC; 
  signal blk00000003_blk0000068f_blk00000690_sig00000f8b : STD_LOGIC; 
  signal blk00000003_blk0000068f_blk00000690_sig00000f8a : STD_LOGIC; 
  signal blk00000003_blk0000068f_blk00000690_sig00000f89 : STD_LOGIC; 
  signal blk00000003_blk0000068f_blk00000690_sig00000f88 : STD_LOGIC; 
  signal blk00000003_blk0000068f_blk00000690_sig00000f87 : STD_LOGIC; 
  signal blk00000003_blk0000068f_blk00000690_sig00000f86 : STD_LOGIC; 
  signal blk00000003_blk000006ab_blk000006ac_sig00000f9e : STD_LOGIC; 
  signal blk00000003_blk000006ab_blk000006ac_sig00000f9d : STD_LOGIC; 
  signal blk00000003_blk000006ab_blk000006ac_sig00000f9c : STD_LOGIC; 
  signal blk00000003_blk000006b1_blk000006b2_sig00000fa9 : STD_LOGIC; 
  signal blk00000003_blk000006b1_blk000006b2_sig00000fa8 : STD_LOGIC; 
  signal blk00000003_blk000006b1_blk000006b2_sig00000fa7 : STD_LOGIC; 
  signal blk00000003_blk000006b7_sig00000fb9 : STD_LOGIC; 
  signal blk00000003_blk000006b7_sig00000fb8 : STD_LOGIC; 
  signal blk00000003_blk000006b7_sig00000fb7 : STD_LOGIC; 
  signal blk00000003_blk000006b7_sig00000fb6 : STD_LOGIC; 
  signal blk00000003_blk000006b7_sig00000fb5 : STD_LOGIC; 
  signal blk00000003_blk000006b7_sig00000fb4 : STD_LOGIC; 
  signal blk00000003_blk000006b7_sig00000fb3 : STD_LOGIC; 
  signal blk00000003_blk000006b7_sig00000fb2 : STD_LOGIC; 
  signal blk00000003_blk000006c4_blk000006c5_sig00000fc5 : STD_LOGIC; 
  signal blk00000003_blk000006c4_blk000006c5_sig00000fc4 : STD_LOGIC; 
  signal blk00000003_blk000006c4_blk000006c5_sig00000fc3 : STD_LOGIC; 
  signal blk00000003_blk000006ca_blk000006cb_sig00000fd1 : STD_LOGIC; 
  signal blk00000003_blk000006ca_blk000006cb_sig00000fd0 : STD_LOGIC; 
  signal blk00000003_blk000006ca_blk000006cb_sig00000fcf : STD_LOGIC; 
  signal blk00000003_blk000006d0_blk000006d1_sig00000fdd : STD_LOGIC; 
  signal blk00000003_blk000006d0_blk000006d1_sig00000fdc : STD_LOGIC; 
  signal blk00000003_blk000006d0_blk000006d1_sig00000fdb : STD_LOGIC; 
  signal blk00000003_blk000006d6_blk000006d7_sig00000fe9 : STD_LOGIC; 
  signal blk00000003_blk000006d6_blk000006d7_sig00000fe8 : STD_LOGIC; 
  signal blk00000003_blk000006d6_blk000006d7_sig00000fe7 : STD_LOGIC; 
  signal blk00000003_blk000006ea_blk000006eb_sig0000102b : STD_LOGIC; 
  signal blk00000003_blk000006ea_blk000006eb_sig0000102a : STD_LOGIC; 
  signal blk00000003_blk000006ea_blk000006eb_sig00001029 : STD_LOGIC; 
  signal blk00000003_blk000006ea_blk000006eb_sig00001028 : STD_LOGIC; 
  signal blk00000003_blk000006ea_blk000006eb_sig00001027 : STD_LOGIC; 
  signal blk00000003_blk000006ea_blk000006eb_sig00001026 : STD_LOGIC; 
  signal blk00000003_blk000006ea_blk000006eb_sig00001025 : STD_LOGIC; 
  signal blk00000003_blk000006ea_blk000006eb_sig00001024 : STD_LOGIC; 
  signal blk00000003_blk000006ea_blk000006eb_sig00001023 : STD_LOGIC; 
  signal blk00000003_blk000006ea_blk000006eb_sig00001022 : STD_LOGIC; 
  signal blk00000003_blk000006ea_blk000006eb_sig00001021 : STD_LOGIC; 
  signal blk00000003_blk000006ea_blk000006eb_sig00001020 : STD_LOGIC; 
  signal blk00000003_blk000006ea_blk000006eb_sig0000101f : STD_LOGIC; 
  signal blk00000003_blk000006ea_blk000006eb_sig0000101e : STD_LOGIC; 
  signal blk00000003_blk00000706_sig0000106a : STD_LOGIC; 
  signal blk00000003_blk00000706_sig00001069 : STD_LOGIC; 
  signal blk00000003_blk00000706_sig00001068 : STD_LOGIC; 
  signal blk00000003_blk00000706_sig00001067 : STD_LOGIC; 
  signal blk00000003_blk00000706_sig00001066 : STD_LOGIC; 
  signal blk00000003_blk00000706_sig00001065 : STD_LOGIC; 
  signal blk00000003_blk00000706_sig00001064 : STD_LOGIC; 
  signal blk00000003_blk00000706_sig00001063 : STD_LOGIC; 
  signal blk00000003_blk00000706_sig00001062 : STD_LOGIC; 
  signal blk00000003_blk00000706_sig00001061 : STD_LOGIC; 
  signal blk00000003_blk00000706_sig00001060 : STD_LOGIC; 
  signal blk00000003_blk00000706_sig0000105f : STD_LOGIC; 
  signal blk00000003_blk00000706_sig0000105e : STD_LOGIC; 
  signal blk00000003_blk00000706_sig0000105d : STD_LOGIC; 
  signal blk00000003_blk00000706_sig0000105c : STD_LOGIC; 
  signal blk00000003_blk00000706_sig0000105b : STD_LOGIC; 
  signal blk00000003_blk00000706_sig0000105a : STD_LOGIC; 
  signal blk00000003_blk00000706_sig00001059 : STD_LOGIC; 
  signal blk00000003_blk00000706_sig00001058 : STD_LOGIC; 
  signal blk00000003_blk00000706_sig00001057 : STD_LOGIC; 
  signal blk00000003_blk00000706_sig00001056 : STD_LOGIC; 
  signal blk00000003_blk00000706_sig00001055 : STD_LOGIC; 
  signal blk00000003_blk00000706_sig00001054 : STD_LOGIC; 
  signal blk00000003_blk00000706_sig00001053 : STD_LOGIC; 
  signal blk00000003_blk00000706_sig00001052 : STD_LOGIC; 
  signal blk00000003_blk00000706_sig00001051 : STD_LOGIC; 
  signal blk00000003_blk00000706_sig00001050 : STD_LOGIC; 
  signal blk00000003_blk00000706_sig0000104f : STD_LOGIC; 
  signal blk00000003_blk00000706_sig0000104e : STD_LOGIC; 
  signal blk00000003_blk00000706_sig0000104d : STD_LOGIC; 
  signal blk00000003_blk00000706_sig0000104c : STD_LOGIC; 
  signal blk00000003_blk00000706_sig0000104b : STD_LOGIC; 
  signal blk00000003_blk00000706_sig0000104a : STD_LOGIC; 
  signal blk00000003_blk00000706_sig00001049 : STD_LOGIC; 
  signal blk00000003_blk00000706_sig00001048 : STD_LOGIC; 
  signal blk00000003_blk00000706_sig00001047 : STD_LOGIC; 
  signal NLW_blk00000001_P_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000002_G_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000987_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000985_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000983_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000981_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000097f_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000097d_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000097b_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000979_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000977_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000975_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000973_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000971_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000096f_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000096d_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000096b_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000969_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000967_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000965_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000963_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000961_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000095f_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000095d_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000095b_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000959_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000957_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000955_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000953_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000951_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000094f_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000094d_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000094b_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000949_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000947_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000945_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000943_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000941_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000093f_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000093d_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000093b_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000939_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000937_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000935_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000933_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000931_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000092f_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000092d_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000092b_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000929_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000927_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000925_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000923_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000921_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000091f_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000091d_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000091b_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000919_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000917_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000915_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000913_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000911_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000090f_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000090d_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000090b_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000909_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000907_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000905_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000903_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000902_ADDRA_3_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000902_ADDRA_2_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000902_ADDRA_1_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000902_ADDRA_0_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000902_ADDRB_3_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000902_ADDRB_2_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000902_ADDRB_1_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000902_ADDRB_0_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000902_DIB_15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000902_DIB_14_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000902_DIB_13_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000902_DIB_12_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000902_DIB_11_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000902_DIB_10_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000902_DIB_9_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000902_DIB_8_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000902_DIB_7_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000902_DIB_6_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000902_DIB_5_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000902_DIB_4_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000902_DIB_3_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000902_DIB_2_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000902_DIB_1_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000902_DIB_0_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000902_DIPB_1_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000902_DIPB_0_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000902_DOPA_1_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000902_DOPA_0_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000902_DOPB_1_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000902_DOPB_0_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000016a_PATTERNBDETECT_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000016a_PATTERNDETECT_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000016a_OVERFLOW_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000016a_UNDERFLOW_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000016a_CARRYCASCOUT_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000016a_MULTSIGNOUT_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000016a_P_47_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000016a_P_46_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000016a_P_45_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000016a_P_44_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000016a_P_43_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000016a_P_42_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000016a_P_41_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000016a_P_40_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000016a_P_39_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000016a_P_38_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000016a_P_37_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000016a_P_36_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000016a_P_35_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000016a_P_34_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000016a_P_33_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000016a_P_32_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000016a_P_31_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000016a_P_30_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000016a_P_29_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000016a_P_28_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000016a_P_27_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000016a_P_26_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000016a_P_25_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000016a_P_24_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000016a_P_23_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000016a_P_22_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000016a_P_21_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000016a_P_20_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000016a_P_19_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000016a_P_18_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000016a_P_17_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000016a_P_16_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000016a_P_15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000016a_P_14_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000016a_P_13_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000016a_P_12_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000016a_P_11_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000016a_P_10_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000016a_P_9_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000016a_P_8_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000016a_P_7_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000016a_P_6_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000016a_P_5_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000016a_P_4_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000016a_P_3_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000016a_P_2_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000016a_P_1_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000016a_P_0_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000016a_BCOUT_17_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000016a_BCOUT_16_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000016a_BCOUT_15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000016a_BCOUT_14_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000016a_BCOUT_13_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000016a_BCOUT_12_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000016a_BCOUT_11_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000016a_BCOUT_10_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000016a_BCOUT_9_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000016a_BCOUT_8_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000016a_BCOUT_7_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000016a_BCOUT_6_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000016a_BCOUT_5_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000016a_BCOUT_4_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000016a_BCOUT_3_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000016a_BCOUT_2_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000016a_BCOUT_1_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000016a_BCOUT_0_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000016a_ACOUT_29_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000016a_ACOUT_28_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000016a_ACOUT_27_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000016a_ACOUT_26_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000016a_ACOUT_25_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000016a_ACOUT_24_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000016a_ACOUT_23_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000016a_ACOUT_22_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000016a_ACOUT_21_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000016a_ACOUT_20_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000016a_ACOUT_19_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000016a_ACOUT_18_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000016a_ACOUT_17_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000016a_ACOUT_16_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000016a_ACOUT_15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000016a_ACOUT_14_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000016a_ACOUT_13_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000016a_ACOUT_12_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000016a_ACOUT_11_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000016a_ACOUT_10_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000016a_ACOUT_9_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000016a_ACOUT_8_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000016a_ACOUT_7_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000016a_ACOUT_6_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000016a_ACOUT_5_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000016a_ACOUT_4_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000016a_ACOUT_3_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000016a_ACOUT_2_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000016a_ACOUT_1_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000016a_ACOUT_0_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000016a_CARRYOUT_3_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000016a_CARRYOUT_2_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000016a_CARRYOUT_1_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000016a_CARRYOUT_0_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000169_PATTERNBDETECT_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000169_PATTERNDETECT_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000169_OVERFLOW_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000169_UNDERFLOW_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000169_CARRYCASCOUT_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000169_MULTSIGNOUT_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000169_P_47_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000169_P_46_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000169_P_45_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000169_P_44_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000169_P_43_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000169_P_42_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000169_P_41_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000169_P_40_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000169_P_39_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000169_P_38_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000169_P_37_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000169_P_36_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000169_P_35_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000169_P_34_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000169_P_33_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000169_P_32_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000169_P_31_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000169_P_30_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000169_P_29_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000169_P_28_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000169_P_27_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000169_P_26_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000169_P_25_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000169_P_24_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000169_P_23_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000169_P_22_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000169_P_21_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000169_P_20_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000169_P_19_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000169_P_18_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000169_P_17_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000169_P_11_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000169_P_10_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000169_P_9_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000169_P_8_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000169_P_7_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000169_P_6_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000169_P_5_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000169_P_4_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000169_P_3_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000169_P_2_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000169_P_1_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000169_P_0_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000169_ACOUT_29_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000169_ACOUT_28_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000169_ACOUT_27_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000169_ACOUT_26_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000169_ACOUT_25_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000169_ACOUT_24_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000169_ACOUT_23_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000169_ACOUT_22_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000169_ACOUT_21_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000169_ACOUT_20_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000169_ACOUT_19_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000169_ACOUT_18_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000169_ACOUT_17_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000169_ACOUT_16_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000169_ACOUT_15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000169_ACOUT_14_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000169_ACOUT_13_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000169_ACOUT_12_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000169_ACOUT_11_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000169_ACOUT_10_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000169_ACOUT_9_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000169_ACOUT_8_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000169_ACOUT_7_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000169_ACOUT_6_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000169_ACOUT_5_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000169_ACOUT_4_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000169_ACOUT_3_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000169_ACOUT_2_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000169_ACOUT_1_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000169_ACOUT_0_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000169_CARRYOUT_3_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000169_CARRYOUT_2_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000169_CARRYOUT_1_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000169_CARRYOUT_0_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000168_PATTERNBDETECT_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000168_PATTERNDETECT_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000168_OVERFLOW_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000168_UNDERFLOW_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000168_CARRYCASCOUT_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000168_MULTSIGNOUT_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000168_P_47_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000168_P_46_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000168_P_45_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000168_P_44_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000168_P_43_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000168_P_42_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000168_P_41_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000168_P_40_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000168_P_39_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000168_P_38_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000168_P_37_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000168_P_36_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000168_P_35_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000168_P_34_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000168_P_33_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000168_P_32_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000168_P_31_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000168_P_30_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000168_P_29_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000168_P_28_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000168_P_27_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000168_P_26_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000168_P_25_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000168_P_24_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000168_P_23_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000168_P_22_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000168_P_21_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000168_P_20_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000168_P_19_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000168_P_18_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000168_P_17_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000168_P_16_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000168_P_15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000168_P_14_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000168_P_13_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000168_P_12_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000168_P_11_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000168_P_10_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000168_P_9_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000168_P_8_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000168_P_7_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000168_P_6_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000168_P_5_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000168_P_4_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000168_P_3_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000168_P_2_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000168_P_1_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000168_P_0_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000168_BCOUT_17_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000168_BCOUT_16_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000168_BCOUT_15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000168_BCOUT_14_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000168_BCOUT_13_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000168_BCOUT_12_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000168_BCOUT_11_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000168_BCOUT_10_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000168_BCOUT_9_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000168_BCOUT_8_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000168_BCOUT_7_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000168_BCOUT_6_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000168_BCOUT_5_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000168_BCOUT_4_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000168_BCOUT_3_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000168_BCOUT_2_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000168_BCOUT_1_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000168_BCOUT_0_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000168_ACOUT_29_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000168_ACOUT_28_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000168_ACOUT_27_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000168_ACOUT_26_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000168_ACOUT_25_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000168_ACOUT_24_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000168_ACOUT_23_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000168_ACOUT_22_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000168_ACOUT_21_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000168_ACOUT_20_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000168_ACOUT_19_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000168_ACOUT_18_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000168_ACOUT_17_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000168_ACOUT_16_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000168_ACOUT_15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000168_ACOUT_14_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000168_ACOUT_13_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000168_ACOUT_12_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000168_ACOUT_11_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000168_ACOUT_10_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000168_ACOUT_9_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000168_ACOUT_8_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000168_ACOUT_7_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000168_ACOUT_6_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000168_ACOUT_5_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000168_ACOUT_4_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000168_ACOUT_3_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000168_ACOUT_2_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000168_ACOUT_1_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000168_ACOUT_0_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000168_CARRYOUT_3_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000168_CARRYOUT_2_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000168_CARRYOUT_1_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000168_CARRYOUT_0_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000167_PATTERNBDETECT_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000167_PATTERNDETECT_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000167_OVERFLOW_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000167_UNDERFLOW_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000167_CARRYCASCOUT_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000167_MULTSIGNOUT_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000167_PCOUT_47_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000167_PCOUT_46_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000167_PCOUT_45_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000167_PCOUT_44_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000167_PCOUT_43_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000167_PCOUT_42_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000167_PCOUT_41_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000167_PCOUT_40_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000167_PCOUT_39_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000167_PCOUT_38_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000167_PCOUT_37_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000167_PCOUT_36_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000167_PCOUT_35_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000167_PCOUT_34_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000167_PCOUT_33_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000167_PCOUT_32_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000167_PCOUT_31_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000167_PCOUT_30_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000167_PCOUT_29_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000167_PCOUT_28_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000167_PCOUT_27_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000167_PCOUT_26_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000167_PCOUT_25_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000167_PCOUT_24_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000167_PCOUT_23_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000167_PCOUT_22_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000167_PCOUT_21_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000167_PCOUT_20_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000167_PCOUT_19_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000167_PCOUT_18_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000167_PCOUT_17_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000167_PCOUT_16_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000167_PCOUT_15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000167_PCOUT_14_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000167_PCOUT_13_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000167_PCOUT_12_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000167_PCOUT_11_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000167_PCOUT_10_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000167_PCOUT_9_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000167_PCOUT_8_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000167_PCOUT_7_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000167_PCOUT_6_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000167_PCOUT_5_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000167_PCOUT_4_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000167_PCOUT_3_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000167_PCOUT_2_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000167_PCOUT_1_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000167_PCOUT_0_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000167_P_47_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000167_P_46_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000167_P_45_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000167_P_44_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000167_P_43_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000167_P_42_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000167_P_41_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000167_P_40_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000167_P_39_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000167_P_38_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000167_P_37_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000167_P_36_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000167_P_35_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000167_P_34_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000167_P_33_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000167_P_32_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000167_P_31_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000167_P_30_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000167_BCOUT_17_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000167_BCOUT_16_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000167_BCOUT_15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000167_BCOUT_14_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000167_BCOUT_13_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000167_BCOUT_12_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000167_BCOUT_11_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000167_BCOUT_10_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000167_BCOUT_9_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000167_BCOUT_8_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000167_BCOUT_7_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000167_BCOUT_6_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000167_BCOUT_5_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000167_BCOUT_4_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000167_BCOUT_3_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000167_BCOUT_2_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000167_BCOUT_1_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000167_BCOUT_0_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000167_ACOUT_29_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000167_ACOUT_28_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000167_ACOUT_27_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000167_ACOUT_26_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000167_ACOUT_25_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000167_ACOUT_24_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000167_ACOUT_23_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000167_ACOUT_22_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000167_ACOUT_21_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000167_ACOUT_20_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000167_ACOUT_19_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000167_ACOUT_18_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000167_ACOUT_17_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000167_ACOUT_16_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000167_ACOUT_15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000167_ACOUT_14_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000167_ACOUT_13_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000167_ACOUT_12_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000167_ACOUT_11_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000167_ACOUT_10_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000167_ACOUT_9_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000167_ACOUT_8_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000167_ACOUT_7_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000167_ACOUT_6_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000167_ACOUT_5_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000167_ACOUT_4_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000167_ACOUT_3_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000167_ACOUT_2_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000167_ACOUT_1_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000167_ACOUT_0_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000167_CARRYOUT_3_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000167_CARRYOUT_2_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000167_CARRYOUT_1_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000167_CARRYOUT_0_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000007_PATTERNBDETECT_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000007_PATTERNDETECT_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000007_OVERFLOW_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000007_UNDERFLOW_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000007_CARRYCASCOUT_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000007_MULTSIGNOUT_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000007_PCOUT_47_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000007_PCOUT_46_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000007_PCOUT_45_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000007_PCOUT_44_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000007_PCOUT_43_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000007_PCOUT_42_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000007_PCOUT_41_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000007_PCOUT_40_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000007_PCOUT_39_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000007_PCOUT_38_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000007_PCOUT_37_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000007_PCOUT_36_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000007_PCOUT_35_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000007_PCOUT_34_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000007_PCOUT_33_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000007_PCOUT_32_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000007_PCOUT_31_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000007_PCOUT_30_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000007_PCOUT_29_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000007_PCOUT_28_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000007_PCOUT_27_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000007_PCOUT_26_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000007_PCOUT_25_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000007_PCOUT_24_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000007_PCOUT_23_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000007_PCOUT_22_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000007_PCOUT_21_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000007_PCOUT_20_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000007_PCOUT_19_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000007_PCOUT_18_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000007_PCOUT_17_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000007_PCOUT_16_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000007_PCOUT_15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000007_PCOUT_14_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000007_PCOUT_13_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000007_PCOUT_12_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000007_PCOUT_11_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000007_PCOUT_10_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000007_PCOUT_9_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000007_PCOUT_8_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000007_PCOUT_7_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000007_PCOUT_6_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000007_PCOUT_5_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000007_PCOUT_4_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000007_PCOUT_3_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000007_PCOUT_2_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000007_PCOUT_1_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000007_PCOUT_0_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000007_P_47_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000007_P_46_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000007_P_45_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000007_P_44_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000007_P_43_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000007_P_42_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000007_P_41_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000007_P_40_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000007_P_39_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000007_P_38_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000007_P_37_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000007_P_36_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000007_P_35_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000007_P_34_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000007_BCOUT_17_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000007_BCOUT_16_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000007_BCOUT_15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000007_BCOUT_14_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000007_BCOUT_13_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000007_BCOUT_12_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000007_BCOUT_11_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000007_BCOUT_10_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000007_BCOUT_9_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000007_BCOUT_8_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000007_BCOUT_7_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000007_BCOUT_6_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000007_BCOUT_5_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000007_BCOUT_4_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000007_BCOUT_3_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000007_BCOUT_2_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000007_BCOUT_1_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000007_BCOUT_0_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000007_ACOUT_29_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000007_ACOUT_28_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000007_ACOUT_27_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000007_ACOUT_26_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000007_ACOUT_25_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000007_ACOUT_24_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000007_ACOUT_23_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000007_ACOUT_22_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000007_ACOUT_21_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000007_ACOUT_20_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000007_ACOUT_19_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000007_ACOUT_18_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000007_ACOUT_17_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000007_ACOUT_16_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000007_ACOUT_15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000007_ACOUT_14_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000007_ACOUT_13_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000007_ACOUT_12_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000007_ACOUT_11_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000007_ACOUT_10_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000007_ACOUT_9_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000007_ACOUT_8_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000007_ACOUT_7_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000007_ACOUT_6_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000007_ACOUT_5_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000007_ACOUT_4_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000007_ACOUT_3_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000007_ACOUT_2_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000007_ACOUT_1_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000007_ACOUT_0_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000007_CARRYOUT_3_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000007_CARRYOUT_2_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000007_CARRYOUT_1_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000007_CARRYOUT_0_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000006_PATTERNBDETECT_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000006_PATTERNDETECT_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000006_OVERFLOW_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000006_UNDERFLOW_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000006_CARRYCASCOUT_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000006_MULTSIGNOUT_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000006_P_47_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000006_P_46_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000006_P_45_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000006_P_44_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000006_P_43_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000006_P_42_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000006_P_41_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000006_P_40_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000006_P_39_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000006_P_38_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000006_P_37_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000006_P_36_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000006_P_35_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000006_P_34_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000006_BCOUT_17_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000006_BCOUT_16_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000006_BCOUT_15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000006_BCOUT_14_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000006_BCOUT_13_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000006_BCOUT_12_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000006_BCOUT_11_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000006_BCOUT_10_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000006_BCOUT_9_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000006_BCOUT_8_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000006_BCOUT_7_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000006_BCOUT_6_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000006_BCOUT_5_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000006_BCOUT_4_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000006_BCOUT_3_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000006_BCOUT_2_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000006_BCOUT_1_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000006_BCOUT_0_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000006_ACOUT_29_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000006_ACOUT_28_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000006_ACOUT_27_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000006_ACOUT_26_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000006_ACOUT_25_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000006_ACOUT_24_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000006_ACOUT_23_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000006_ACOUT_22_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000006_ACOUT_21_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000006_ACOUT_20_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000006_ACOUT_19_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000006_ACOUT_18_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000006_ACOUT_17_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000006_ACOUT_16_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000006_ACOUT_15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000006_ACOUT_14_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000006_ACOUT_13_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000006_ACOUT_12_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000006_ACOUT_11_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000006_ACOUT_10_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000006_ACOUT_9_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000006_ACOUT_8_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000006_ACOUT_7_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000006_ACOUT_6_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000006_ACOUT_5_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000006_ACOUT_4_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000006_ACOUT_3_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000006_ACOUT_2_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000006_ACOUT_1_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000006_ACOUT_0_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000006_CARRYOUT_3_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000006_CARRYOUT_2_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000006_CARRYOUT_1_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000006_CARRYOUT_0_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000001d6_blk000001d7_blk00000216_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000001d6_blk000001d7_blk00000214_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000001d6_blk000001d7_blk00000212_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000001d6_blk000001d7_blk00000210_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000001d6_blk000001d7_blk0000020e_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000001d6_blk000001d7_blk0000020c_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000001d6_blk000001d7_blk0000020a_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000001d6_blk000001d7_blk00000208_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000001d6_blk000001d7_blk00000206_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000001d6_blk000001d7_blk00000204_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000001d6_blk000001d7_blk00000202_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000001d6_blk000001d7_blk00000200_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000001d6_blk000001d7_blk000001fe_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000001d6_blk000001d7_blk000001fc_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000001d6_blk000001d7_blk000001fa_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000001d6_blk000001d7_blk000001f8_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000001d6_blk000001d7_blk000001f6_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000001d6_blk000001d7_blk000001f4_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000001d6_blk000001d7_blk000001f2_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000001d6_blk000001d7_blk000001f0_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000001d6_blk000001d7_blk000001ee_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000001d6_blk000001d7_blk000001ec_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000001d6_blk000001d7_blk000001ea_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000001d6_blk000001d7_blk000001e8_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000001d6_blk000001d7_blk000001e6_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000001d6_blk000001d7_blk000001e4_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000001d6_blk000001d7_blk000001e2_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000001d6_blk000001d7_blk000001e0_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000001d6_blk000001d7_blk000001de_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000001d6_blk000001d7_blk000001dc_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000001d6_blk000001d7_blk000001da_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000218_blk00000219_blk00000258_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000218_blk00000219_blk00000256_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000218_blk00000219_blk00000254_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000218_blk00000219_blk00000252_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000218_blk00000219_blk00000250_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000218_blk00000219_blk0000024e_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000218_blk00000219_blk0000024c_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000218_blk00000219_blk0000024a_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000218_blk00000219_blk00000248_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000218_blk00000219_blk00000246_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000218_blk00000219_blk00000244_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000218_blk00000219_blk00000242_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000218_blk00000219_blk00000240_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000218_blk00000219_blk0000023e_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000218_blk00000219_blk0000023c_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000218_blk00000219_blk0000023a_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000218_blk00000219_blk00000238_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000218_blk00000219_blk00000236_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000218_blk00000219_blk00000234_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000218_blk00000219_blk00000232_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000218_blk00000219_blk00000230_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000218_blk00000219_blk0000022e_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000218_blk00000219_blk0000022c_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000218_blk00000219_blk0000022a_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000218_blk00000219_blk00000228_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000218_blk00000219_blk00000226_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000218_blk00000219_blk00000224_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000218_blk00000219_blk00000222_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000218_blk00000219_blk00000220_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000218_blk00000219_blk0000021e_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000218_blk00000219_blk0000021c_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000029f_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000029e_DOA_15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000029e_DOA_14_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000029e_DOA_13_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000029e_DOA_12_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000029e_DOA_11_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000029e_DOA_10_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000029e_DOA_9_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000029e_DOA_8_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000029e_DOA_7_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000029e_DOA_6_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000029e_DOA_5_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000029e_DOA_4_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000029e_DOA_3_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000029e_DOA_2_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000029e_DOA_1_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000029e_DOA_0_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000029e_DOB_15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000029e_DOB_14_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000029e_DOB_13_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000029e_DOB_12_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000029e_DOB_11_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000029e_DOB_10_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000029e_DOB_9_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000029e_DOB_8_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000029e_DOPA_1_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000029e_DOPA_0_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000029e_DOPB_1_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000029d_DOA_15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000029d_DOA_14_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000029d_DOA_13_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000029d_DOA_12_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000029d_DOA_11_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000029d_DOA_10_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000029d_DOA_9_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000029d_DOA_8_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000029d_DOA_7_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000029d_DOA_6_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000029d_DOA_5_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000029d_DOA_4_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000029d_DOA_3_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000029d_DOA_2_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000029d_DOA_1_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000029d_DOA_0_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000029d_DOB_15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000029d_DOB_14_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000029d_DOB_13_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000029d_DOB_12_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000029d_DOB_11_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000029d_DOB_10_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000029d_DOB_9_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000029d_DOB_8_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000029d_DOPA_1_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000029d_DOPA_0_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000029d_DOPB_1_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000029c_DOA_15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000029c_DOA_14_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000029c_DOA_13_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000029c_DOA_12_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000029c_DOA_11_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000029c_DOA_10_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000029c_DOA_9_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000029c_DOA_8_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000029c_DOA_7_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000029c_DOA_6_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000029c_DOA_5_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000029c_DOA_4_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000029c_DOA_3_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000029c_DOA_2_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000029c_DOA_1_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000029c_DOA_0_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000029c_DOB_15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000029c_DOB_14_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000029c_DOB_13_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000029c_DOB_12_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000029c_DOB_11_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000029c_DOB_10_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000029c_DOB_9_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000029c_DOB_8_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000029c_DOPA_1_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000029c_DOPA_0_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000029c_DOPB_1_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000029b_DOA_15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000029b_DOA_14_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000029b_DOA_13_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000029b_DOA_12_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000029b_DOA_11_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000029b_DOA_10_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000029b_DOA_9_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000029b_DOA_8_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000029b_DOA_7_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000029b_DOA_6_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000029b_DOA_5_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000029b_DOA_4_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000029b_DOA_3_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000029b_DOA_2_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000029b_DOA_1_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000029b_DOA_0_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000029b_DOB_15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000029b_DOB_14_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000029b_DOB_13_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000029b_DOB_12_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000029b_DOB_11_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000029b_DOB_10_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000029b_DOB_9_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000029b_DOB_8_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000029b_DOPA_1_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000029b_DOPA_0_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000029b_DOPB_1_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000029a_DOA_15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000029a_DOA_14_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000029a_DOA_13_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000029a_DOA_12_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000029a_DOA_11_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000029a_DOA_10_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000029a_DOA_9_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000029a_DOA_8_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000029a_DOA_7_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000029a_DOA_6_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000029a_DOA_5_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000029a_DOA_4_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000029a_DOA_3_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000029a_DOA_2_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000029a_DOA_1_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000029a_DOA_0_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000029a_DOB_15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000029a_DOB_14_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000029a_DOB_13_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000029a_DOB_12_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000029a_DOB_11_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000029a_DOB_10_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000029a_DOB_9_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000029a_DOB_8_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000029a_DOPA_1_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000029a_DOPA_0_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000029a_DOPB_1_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk00000299_DOA_15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk00000299_DOA_14_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk00000299_DOA_13_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk00000299_DOA_12_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk00000299_DOA_11_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk00000299_DOA_10_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk00000299_DOA_9_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk00000299_DOA_8_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk00000299_DOA_7_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk00000299_DOA_6_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk00000299_DOA_5_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk00000299_DOA_4_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk00000299_DOA_3_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk00000299_DOA_2_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk00000299_DOA_1_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk00000299_DOA_0_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk00000299_DOB_15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk00000299_DOB_14_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk00000299_DOB_13_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk00000299_DOB_12_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk00000299_DOB_11_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk00000299_DOB_10_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk00000299_DOB_9_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk00000299_DOB_8_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk00000299_DOPA_1_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk00000299_DOPA_0_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk00000299_DOPB_1_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000027b_DOA_15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000027b_DOA_14_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000027b_DOA_13_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000027b_DOA_12_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000027b_DOA_11_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000027b_DOA_10_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000027b_DOA_9_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000027b_DOA_8_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000027b_DOA_7_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000027b_DOA_6_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000027b_DOA_5_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000027b_DOA_4_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000027b_DOA_3_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000027b_DOA_2_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000027b_DOA_1_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000027b_DOA_0_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000027b_DOB_15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000027b_DOB_14_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000027b_DOB_13_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000027b_DOB_12_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000027b_DOB_11_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000027b_DOB_10_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000027b_DOB_9_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000027b_DOB_8_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000027b_DOB_7_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000027b_DOB_6_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000027b_DOB_5_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000027b_DOB_4_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000027b_DOPA_1_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000027b_DOPA_0_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000027b_DOPB_1_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000025a_blk0000027b_DOPB_0_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e6_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e5_DOA_15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e5_DOA_14_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e5_DOA_13_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e5_DOA_12_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e5_DOA_11_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e5_DOA_10_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e5_DOA_9_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e5_DOA_8_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e5_DOA_7_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e5_DOA_6_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e5_DOA_5_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e5_DOA_4_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e5_DOA_3_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e5_DOA_2_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e5_DOA_1_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e5_DOA_0_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e5_DOB_15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e5_DOB_14_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e5_DOB_13_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e5_DOB_12_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e5_DOB_11_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e5_DOB_10_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e5_DOB_9_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e5_DOB_8_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e5_DOPA_1_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e5_DOPA_0_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e5_DOPB_1_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e4_DOA_15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e4_DOA_14_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e4_DOA_13_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e4_DOA_12_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e4_DOA_11_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e4_DOA_10_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e4_DOA_9_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e4_DOA_8_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e4_DOA_7_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e4_DOA_6_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e4_DOA_5_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e4_DOA_4_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e4_DOA_3_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e4_DOA_2_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e4_DOA_1_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e4_DOA_0_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e4_DOB_15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e4_DOB_14_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e4_DOB_13_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e4_DOB_12_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e4_DOB_11_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e4_DOB_10_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e4_DOB_9_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e4_DOB_8_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e4_DOPA_1_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e4_DOPA_0_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e4_DOPB_1_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e3_DOA_15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e3_DOA_14_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e3_DOA_13_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e3_DOA_12_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e3_DOA_11_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e3_DOA_10_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e3_DOA_9_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e3_DOA_8_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e3_DOA_7_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e3_DOA_6_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e3_DOA_5_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e3_DOA_4_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e3_DOA_3_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e3_DOA_2_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e3_DOA_1_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e3_DOA_0_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e3_DOB_15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e3_DOB_14_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e3_DOB_13_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e3_DOB_12_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e3_DOB_11_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e3_DOB_10_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e3_DOB_9_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e3_DOB_8_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e3_DOPA_1_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e3_DOPA_0_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e3_DOPB_1_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e2_DOA_15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e2_DOA_14_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e2_DOA_13_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e2_DOA_12_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e2_DOA_11_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e2_DOA_10_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e2_DOA_9_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e2_DOA_8_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e2_DOA_7_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e2_DOA_6_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e2_DOA_5_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e2_DOA_4_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e2_DOA_3_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e2_DOA_2_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e2_DOA_1_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e2_DOA_0_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e2_DOB_15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e2_DOB_14_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e2_DOB_13_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e2_DOB_12_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e2_DOB_11_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e2_DOB_10_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e2_DOB_9_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e2_DOB_8_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e2_DOPA_1_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e2_DOPA_0_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e2_DOPB_1_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e1_DOA_15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e1_DOA_14_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e1_DOA_13_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e1_DOA_12_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e1_DOA_11_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e1_DOA_10_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e1_DOA_9_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e1_DOA_8_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e1_DOA_7_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e1_DOA_6_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e1_DOA_5_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e1_DOA_4_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e1_DOA_3_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e1_DOA_2_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e1_DOA_1_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e1_DOA_0_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e1_DOB_15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e1_DOB_14_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e1_DOB_13_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e1_DOB_12_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e1_DOB_11_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e1_DOB_10_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e1_DOB_9_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e1_DOB_8_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e1_DOPA_1_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e1_DOPA_0_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e1_DOPB_1_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e0_DOA_15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e0_DOA_14_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e0_DOA_13_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e0_DOA_12_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e0_DOA_11_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e0_DOA_10_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e0_DOA_9_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e0_DOA_8_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e0_DOA_7_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e0_DOA_6_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e0_DOA_5_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e0_DOA_4_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e0_DOA_3_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e0_DOA_2_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e0_DOA_1_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e0_DOA_0_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e0_DOB_15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e0_DOB_14_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e0_DOB_13_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e0_DOB_12_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e0_DOB_11_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e0_DOB_10_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e0_DOB_9_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e0_DOB_8_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e0_DOPA_1_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e0_DOPA_0_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002e0_DOPB_1_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002c2_DOA_15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002c2_DOA_14_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002c2_DOA_13_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002c2_DOA_12_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002c2_DOA_11_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002c2_DOA_10_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002c2_DOA_9_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002c2_DOA_8_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002c2_DOA_7_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002c2_DOA_6_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002c2_DOA_5_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002c2_DOA_4_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002c2_DOA_3_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002c2_DOA_2_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002c2_DOA_1_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002c2_DOA_0_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002c2_DOB_15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002c2_DOB_14_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002c2_DOB_13_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002c2_DOB_12_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002c2_DOB_11_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002c2_DOB_10_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002c2_DOB_9_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002c2_DOB_8_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002c2_DOB_7_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002c2_DOB_6_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002c2_DOB_5_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002c2_DOB_4_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002c2_DOPA_1_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002c2_DOPA_0_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002c2_DOPB_1_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000002a1_blk000002c2_DOPB_0_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000326_blk00000327_blk0000032a_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000032c_blk0000032d_blk0000036c_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000032c_blk0000032d_blk0000036a_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000032c_blk0000032d_blk00000368_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000032c_blk0000032d_blk00000366_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000032c_blk0000032d_blk00000364_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000032c_blk0000032d_blk00000362_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000032c_blk0000032d_blk00000360_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000032c_blk0000032d_blk0000035e_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000032c_blk0000032d_blk0000035c_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000032c_blk0000032d_blk0000035a_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000032c_blk0000032d_blk00000358_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000032c_blk0000032d_blk00000356_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000032c_blk0000032d_blk00000354_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000032c_blk0000032d_blk00000352_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000032c_blk0000032d_blk00000350_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000032c_blk0000032d_blk0000034e_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000032c_blk0000032d_blk0000034c_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000032c_blk0000032d_blk0000034a_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000032c_blk0000032d_blk00000348_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000032c_blk0000032d_blk00000346_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000032c_blk0000032d_blk00000344_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000032c_blk0000032d_blk00000342_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000032c_blk0000032d_blk00000340_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000032c_blk0000032d_blk0000033e_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000032c_blk0000032d_blk0000033c_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000032c_blk0000032d_blk0000033a_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000032c_blk0000032d_blk00000338_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000032c_blk0000032d_blk00000336_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000032c_blk0000032d_blk00000334_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000032c_blk0000032d_blk00000332_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000032c_blk0000032d_blk00000330_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000036e_blk0000036f_blk000003ae_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000036e_blk0000036f_blk000003ac_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000036e_blk0000036f_blk000003aa_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000036e_blk0000036f_blk000003a8_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000036e_blk0000036f_blk000003a6_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000036e_blk0000036f_blk000003a4_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000036e_blk0000036f_blk000003a2_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000036e_blk0000036f_blk000003a0_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000036e_blk0000036f_blk0000039e_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000036e_blk0000036f_blk0000039c_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000036e_blk0000036f_blk0000039a_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000036e_blk0000036f_blk00000398_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000036e_blk0000036f_blk00000396_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000036e_blk0000036f_blk00000394_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000036e_blk0000036f_blk00000392_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000036e_blk0000036f_blk00000390_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000036e_blk0000036f_blk0000038e_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000036e_blk0000036f_blk0000038c_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000036e_blk0000036f_blk0000038a_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000036e_blk0000036f_blk00000388_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000036e_blk0000036f_blk00000386_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000036e_blk0000036f_blk00000384_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000036e_blk0000036f_blk00000382_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000036e_blk0000036f_blk00000380_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000036e_blk0000036f_blk0000037e_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000036e_blk0000036f_blk0000037c_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000036e_blk0000036f_blk0000037a_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000036e_blk0000036f_blk00000378_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000036e_blk0000036f_blk00000376_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000036e_blk0000036f_blk00000374_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000036e_blk0000036f_blk00000372_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000003b0_blk000003b1_blk000003b4_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000418_blk00000419_blk00000457_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000418_blk00000419_blk00000455_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000418_blk00000419_blk00000453_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000418_blk00000419_blk00000451_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000418_blk00000419_blk0000044f_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000418_blk00000419_blk0000044d_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000418_blk00000419_blk0000044b_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000418_blk00000419_blk00000449_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000418_blk00000419_blk00000447_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000418_blk00000419_blk00000445_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000418_blk00000419_blk00000443_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000418_blk00000419_blk00000441_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000418_blk00000419_blk0000043f_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000418_blk00000419_blk0000043d_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000418_blk00000419_blk0000043b_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000418_blk00000419_blk00000439_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000418_blk00000419_blk00000437_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000418_blk00000419_blk00000435_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000418_blk00000419_blk00000433_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000418_blk00000419_blk00000431_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000418_blk00000419_blk0000042f_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000418_blk00000419_blk0000042d_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000418_blk00000419_blk0000042b_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000418_blk00000419_blk00000429_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000418_blk00000419_blk00000427_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000418_blk00000419_blk00000425_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000418_blk00000419_blk00000423_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000418_blk00000419_blk00000421_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000418_blk00000419_blk0000041f_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000418_blk00000419_blk0000041d_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000418_blk00000419_blk0000041b_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000459_blk0000045a_blk00000498_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000459_blk0000045a_blk00000496_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000459_blk0000045a_blk00000494_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000459_blk0000045a_blk00000492_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000459_blk0000045a_blk00000490_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000459_blk0000045a_blk0000048e_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000459_blk0000045a_blk0000048c_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000459_blk0000045a_blk0000048a_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000459_blk0000045a_blk00000488_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000459_blk0000045a_blk00000486_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000459_blk0000045a_blk00000484_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000459_blk0000045a_blk00000482_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000459_blk0000045a_blk00000480_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000459_blk0000045a_blk0000047e_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000459_blk0000045a_blk0000047c_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000459_blk0000045a_blk0000047a_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000459_blk0000045a_blk00000478_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000459_blk0000045a_blk00000476_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000459_blk0000045a_blk00000474_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000459_blk0000045a_blk00000472_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000459_blk0000045a_blk00000470_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000459_blk0000045a_blk0000046e_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000459_blk0000045a_blk0000046c_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000459_blk0000045a_blk0000046a_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000459_blk0000045a_blk00000468_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000459_blk0000045a_blk00000466_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000459_blk0000045a_blk00000464_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000459_blk0000045a_blk00000462_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000459_blk0000045a_blk00000460_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000459_blk0000045a_blk0000045e_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000459_blk0000045a_blk0000045c_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk00000559_blk0000055a_blk0000055d_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000068f_blk00000690_blk000006a9_Q31_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000068f_blk00000690_blk000006a7_Q31_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000068f_blk00000690_blk000006a5_Q31_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000068f_blk00000690_blk000006a3_Q31_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000068f_blk00000690_blk000006a1_Q31_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000068f_blk00000690_blk0000069f_Q31_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000068f_blk00000690_blk0000069d_Q31_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000068f_blk00000690_blk0000069b_Q31_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000068f_blk00000690_blk00000699_Q31_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000068f_blk00000690_blk00000697_Q31_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000068f_blk00000690_blk00000695_Q31_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk0000068f_blk00000690_blk00000693_Q31_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000006ab_blk000006ac_blk000006af_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000006b1_blk000006b2_blk000006b5_Q31_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000006c4_blk000006c5_blk000006c8_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000006ca_blk000006cb_blk000006ce_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000006d0_blk000006d1_blk000006d4_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000006d6_blk000006d7_blk000006da_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000006ea_blk000006eb_blk00000704_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000006ea_blk000006eb_blk00000702_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000006ea_blk000006eb_blk00000700_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000006ea_blk000006eb_blk000006fe_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000006ea_blk000006eb_blk000006fc_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000006ea_blk000006eb_blk000006fa_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000006ea_blk000006eb_blk000006f8_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000006ea_blk000006eb_blk000006f6_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000006ea_blk000006eb_blk000006f4_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000006ea_blk000006eb_blk000006f2_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000006ea_blk000006eb_blk000006f0_Q15_UNCONNECTED : STD_LOGIC; 
  signal NLW_blk00000003_blk000006ea_blk000006eb_blk000006ee_Q15_UNCONNECTED : STD_LOGIC; 
  signal NlwRenamedSig_OI_xn_index : STD_LOGIC_VECTOR ( 11 downto 0 ); 
begin
  rfd <= NlwRenamedSig_OI_rfd;
  xn_index(11) <= NlwRenamedSig_OI_xn_index(11);
  xn_index(10) <= NlwRenamedSig_OI_xn_index(10);
  xn_index(9) <= NlwRenamedSig_OI_xn_index(9);
  xn_index(8) <= NlwRenamedSig_OI_xn_index(8);
  xn_index(7) <= NlwRenamedSig_OI_xn_index(7);
  xn_index(6) <= NlwRenamedSig_OI_xn_index(6);
  xn_index(5) <= NlwRenamedSig_OI_xn_index(5);
  xn_index(4) <= NlwRenamedSig_OI_xn_index(4);
  xn_index(3) <= NlwRenamedSig_OI_xn_index(3);
  xn_index(2) <= NlwRenamedSig_OI_xn_index(2);
  xn_index(1) <= NlwRenamedSig_OI_xn_index(1);
  xn_index(0) <= NlwRenamedSig_OI_xn_index(0);
  blk00000001 : VCC
    port map (
      P => NLW_blk00000001_P_UNCONNECTED
    );
  blk00000002 : GND
    port map (
      G => NLW_blk00000002_G_UNCONNECTED
    );
  blk00000003_blk00000988 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000008d2,
      Q => blk00000003_sig000003da
    );
  blk00000003_blk00000987 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_sig00000082,
      A1 => blk00000003_sig00000082,
      A2 => blk00000003_sig00000082,
      A3 => blk00000003_sig00000082,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig0000048b,
      Q => blk00000003_sig000008d2,
      Q15 => NLW_blk00000003_blk00000987_Q15_UNCONNECTED
    );
  blk00000003_blk00000986 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig000007df,
      D => blk00000003_sig000008d1,
      Q => blk00000003_sig00000820
    );
  blk00000003_blk00000985 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_sig00000088,
      A1 => blk00000003_sig00000082,
      A2 => blk00000003_sig00000082,
      A3 => blk00000003_sig00000082,
      CE => blk00000003_sig000007df,
      CLK => clk,
      D => blk00000003_sig000006b8,
      Q => blk00000003_sig000008d1,
      Q15 => NLW_blk00000003_blk00000985_Q15_UNCONNECTED
    );
  blk00000003_blk00000984 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000008d0,
      Q => blk00000003_sig00000884
    );
  blk00000003_blk00000983 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_sig00000082,
      A1 => blk00000003_sig00000082,
      A2 => blk00000003_sig00000082,
      A3 => blk00000003_sig00000082,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig00000655,
      Q => blk00000003_sig000008d0,
      Q15 => NLW_blk00000003_blk00000983_Q15_UNCONNECTED
    );
  blk00000003_blk00000982 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000008cf,
      Q => blk00000003_sig00000885
    );
  blk00000003_blk00000981 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_sig00000082,
      A1 => blk00000003_sig00000082,
      A2 => blk00000003_sig00000082,
      A3 => blk00000003_sig00000082,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig00000654,
      Q => blk00000003_sig000008cf,
      Q15 => NLW_blk00000003_blk00000981_Q15_UNCONNECTED
    );
  blk00000003_blk00000980 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000008ce,
      Q => blk00000003_sig00000888
    );
  blk00000003_blk0000097f : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_sig00000082,
      A1 => blk00000003_sig00000082,
      A2 => blk00000003_sig00000082,
      A3 => blk00000003_sig00000082,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig00000653,
      Q => blk00000003_sig000008ce,
      Q15 => NLW_blk00000003_blk0000097f_Q15_UNCONNECTED
    );
  blk00000003_blk0000097e : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000008cd,
      Q => blk00000003_sig00000889
    );
  blk00000003_blk0000097d : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_sig00000082,
      A1 => blk00000003_sig00000082,
      A2 => blk00000003_sig00000082,
      A3 => blk00000003_sig00000082,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig00000652,
      Q => blk00000003_sig000008cd,
      Q15 => NLW_blk00000003_blk0000097d_Q15_UNCONNECTED
    );
  blk00000003_blk0000097c : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000008cc,
      Q => blk00000003_sig0000088a
    );
  blk00000003_blk0000097b : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_sig00000082,
      A1 => blk00000003_sig00000082,
      A2 => blk00000003_sig00000082,
      A3 => blk00000003_sig00000082,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig00000651,
      Q => blk00000003_sig000008cc,
      Q15 => NLW_blk00000003_blk0000097b_Q15_UNCONNECTED
    );
  blk00000003_blk0000097a : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000008cb,
      Q => blk00000003_sig0000088b
    );
  blk00000003_blk00000979 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_sig00000082,
      A1 => blk00000003_sig00000082,
      A2 => blk00000003_sig00000082,
      A3 => blk00000003_sig00000082,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig00000650,
      Q => blk00000003_sig000008cb,
      Q15 => NLW_blk00000003_blk00000979_Q15_UNCONNECTED
    );
  blk00000003_blk00000978 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000008ca,
      Q => blk00000003_sig0000088c
    );
  blk00000003_blk00000977 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_sig00000082,
      A1 => blk00000003_sig00000082,
      A2 => blk00000003_sig00000082,
      A3 => blk00000003_sig00000082,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig00000662,
      Q => blk00000003_sig000008ca,
      Q15 => NLW_blk00000003_blk00000977_Q15_UNCONNECTED
    );
  blk00000003_blk00000976 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000008c9,
      Q => blk00000003_sig0000088d
    );
  blk00000003_blk00000975 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_sig00000082,
      A1 => blk00000003_sig00000082,
      A2 => blk00000003_sig00000082,
      A3 => blk00000003_sig00000082,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig00000660,
      Q => blk00000003_sig000008c9,
      Q15 => NLW_blk00000003_blk00000975_Q15_UNCONNECTED
    );
  blk00000003_blk00000974 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000008c8,
      Q => blk00000003_sig0000088e
    );
  blk00000003_blk00000973 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_sig00000082,
      A1 => blk00000003_sig00000082,
      A2 => blk00000003_sig00000082,
      A3 => blk00000003_sig00000082,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig0000065e,
      Q => blk00000003_sig000008c8,
      Q15 => NLW_blk00000003_blk00000973_Q15_UNCONNECTED
    );
  blk00000003_blk00000972 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000008c7,
      Q => blk00000003_sig0000088f
    );
  blk00000003_blk00000971 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_sig00000082,
      A1 => blk00000003_sig00000082,
      A2 => blk00000003_sig00000082,
      A3 => blk00000003_sig00000082,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig0000065c,
      Q => blk00000003_sig000008c7,
      Q15 => NLW_blk00000003_blk00000971_Q15_UNCONNECTED
    );
  blk00000003_blk00000970 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000008c6,
      Q => blk00000003_sig00000886
    );
  blk00000003_blk0000096f : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_sig00000082,
      A1 => blk00000003_sig00000082,
      A2 => blk00000003_sig00000082,
      A3 => blk00000003_sig00000082,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig0000065a,
      Q => blk00000003_sig000008c6,
      Q15 => NLW_blk00000003_blk0000096f_Q15_UNCONNECTED
    );
  blk00000003_blk0000096e : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000008c5,
      Q => blk00000003_sig00000887
    );
  blk00000003_blk0000096d : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_sig00000082,
      A1 => blk00000003_sig00000082,
      A2 => blk00000003_sig00000082,
      A3 => blk00000003_sig00000082,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig00000658,
      Q => blk00000003_sig000008c5,
      Q15 => NLW_blk00000003_blk0000096d_Q15_UNCONNECTED
    );
  blk00000003_blk0000096c : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000008c4,
      Q => blk00000003_sig00000870
    );
  blk00000003_blk0000096b : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_sig00000082,
      A1 => blk00000003_sig00000088,
      A2 => blk00000003_sig00000088,
      A3 => blk00000003_sig00000082,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig00000288,
      Q => blk00000003_sig000008c4,
      Q15 => NLW_blk00000003_blk0000096b_Q15_UNCONNECTED
    );
  blk00000003_blk0000096a : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000008c3,
      Q => blk00000003_sig000004bb
    );
  blk00000003_blk00000969 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_sig00000082,
      A1 => blk00000003_sig00000082,
      A2 => blk00000003_sig00000082,
      A3 => blk00000003_sig00000082,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig00000491,
      Q => blk00000003_sig000008c3,
      Q15 => NLW_blk00000003_blk00000969_Q15_UNCONNECTED
    );
  blk00000003_blk00000968 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000008c2,
      Q => blk00000003_sig000004ba
    );
  blk00000003_blk00000967 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_sig00000082,
      A1 => blk00000003_sig00000082,
      A2 => blk00000003_sig00000082,
      A3 => blk00000003_sig00000082,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig00000490,
      Q => blk00000003_sig000008c2,
      Q15 => NLW_blk00000003_blk00000967_Q15_UNCONNECTED
    );
  blk00000003_blk00000966 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000008c1,
      Q => blk00000003_sig000004b9
    );
  blk00000003_blk00000965 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_sig00000082,
      A1 => blk00000003_sig00000082,
      A2 => blk00000003_sig00000082,
      A3 => blk00000003_sig00000082,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig0000048f,
      Q => blk00000003_sig000008c1,
      Q15 => NLW_blk00000003_blk00000965_Q15_UNCONNECTED
    );
  blk00000003_blk00000964 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000008c0,
      Q => blk00000003_sig000004b8
    );
  blk00000003_blk00000963 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_sig00000082,
      A1 => blk00000003_sig00000082,
      A2 => blk00000003_sig00000082,
      A3 => blk00000003_sig00000082,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig0000048e,
      Q => blk00000003_sig000008c0,
      Q15 => NLW_blk00000003_blk00000963_Q15_UNCONNECTED
    );
  blk00000003_blk00000962 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000008bf,
      Q => blk00000003_sig000004b7
    );
  blk00000003_blk00000961 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_sig00000082,
      A1 => blk00000003_sig00000082,
      A2 => blk00000003_sig00000082,
      A3 => blk00000003_sig00000082,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig0000048d,
      Q => blk00000003_sig000008bf,
      Q15 => NLW_blk00000003_blk00000961_Q15_UNCONNECTED
    );
  blk00000003_blk00000960 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000008be,
      Q => blk00000003_sig000003ea
    );
  blk00000003_blk0000095f : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_sig00000082,
      A1 => blk00000003_sig00000082,
      A2 => blk00000003_sig00000082,
      A3 => blk00000003_sig00000082,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig00000377,
      Q => blk00000003_sig000008be,
      Q15 => NLW_blk00000003_blk0000095f_Q15_UNCONNECTED
    );
  blk00000003_blk0000095e : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000008bd,
      Q => blk00000003_sig000003e9
    );
  blk00000003_blk0000095d : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_sig00000082,
      A1 => blk00000003_sig00000082,
      A2 => blk00000003_sig00000082,
      A3 => blk00000003_sig00000082,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig00000375,
      Q => blk00000003_sig000008bd,
      Q15 => NLW_blk00000003_blk0000095d_Q15_UNCONNECTED
    );
  blk00000003_blk0000095c : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000008bc,
      Q => blk00000003_sig000003e8
    );
  blk00000003_blk0000095b : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_sig00000082,
      A1 => blk00000003_sig00000082,
      A2 => blk00000003_sig00000082,
      A3 => blk00000003_sig00000082,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig00000373,
      Q => blk00000003_sig000008bc,
      Q15 => NLW_blk00000003_blk0000095b_Q15_UNCONNECTED
    );
  blk00000003_blk0000095a : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000008bb,
      Q => blk00000003_sig000003e7
    );
  blk00000003_blk00000959 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_sig00000082,
      A1 => blk00000003_sig00000082,
      A2 => blk00000003_sig00000082,
      A3 => blk00000003_sig00000082,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig00000371,
      Q => blk00000003_sig000008bb,
      Q15 => NLW_blk00000003_blk00000959_Q15_UNCONNECTED
    );
  blk00000003_blk00000958 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000008ba,
      Q => blk00000003_sig000003e6
    );
  blk00000003_blk00000957 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_sig00000082,
      A1 => blk00000003_sig00000082,
      A2 => blk00000003_sig00000082,
      A3 => blk00000003_sig00000082,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig0000036f,
      Q => blk00000003_sig000008ba,
      Q15 => NLW_blk00000003_blk00000957_Q15_UNCONNECTED
    );
  blk00000003_blk00000956 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000008b9,
      Q => blk00000003_sig000003e5
    );
  blk00000003_blk00000955 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_sig00000082,
      A1 => blk00000003_sig00000082,
      A2 => blk00000003_sig00000082,
      A3 => blk00000003_sig00000082,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig0000036d,
      Q => blk00000003_sig000008b9,
      Q15 => NLW_blk00000003_blk00000955_Q15_UNCONNECTED
    );
  blk00000003_blk00000954 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000008b8,
      Q => blk00000003_sig000003e4
    );
  blk00000003_blk00000953 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_sig00000082,
      A1 => blk00000003_sig00000082,
      A2 => blk00000003_sig00000082,
      A3 => blk00000003_sig00000082,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig0000036b,
      Q => blk00000003_sig000008b8,
      Q15 => NLW_blk00000003_blk00000953_Q15_UNCONNECTED
    );
  blk00000003_blk00000952 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000008b7,
      Q => blk00000003_sig000003e3
    );
  blk00000003_blk00000951 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_sig00000082,
      A1 => blk00000003_sig00000082,
      A2 => blk00000003_sig00000082,
      A3 => blk00000003_sig00000082,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig00000369,
      Q => blk00000003_sig000008b7,
      Q15 => NLW_blk00000003_blk00000951_Q15_UNCONNECTED
    );
  blk00000003_blk00000950 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000008b6,
      Q => blk00000003_sig000003e2
    );
  blk00000003_blk0000094f : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_sig00000082,
      A1 => blk00000003_sig00000082,
      A2 => blk00000003_sig00000082,
      A3 => blk00000003_sig00000082,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig00000367,
      Q => blk00000003_sig000008b6,
      Q15 => NLW_blk00000003_blk0000094f_Q15_UNCONNECTED
    );
  blk00000003_blk0000094e : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000008b5,
      Q => blk00000003_sig000003e1
    );
  blk00000003_blk0000094d : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_sig00000082,
      A1 => blk00000003_sig00000082,
      A2 => blk00000003_sig00000082,
      A3 => blk00000003_sig00000082,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig00000365,
      Q => blk00000003_sig000008b5,
      Q15 => NLW_blk00000003_blk0000094d_Q15_UNCONNECTED
    );
  blk00000003_blk0000094c : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000008b4,
      Q => blk00000003_sig000003e0
    );
  blk00000003_blk0000094b : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_sig00000082,
      A1 => blk00000003_sig00000082,
      A2 => blk00000003_sig00000082,
      A3 => blk00000003_sig00000082,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig00000363,
      Q => blk00000003_sig000008b4,
      Q15 => NLW_blk00000003_blk0000094b_Q15_UNCONNECTED
    );
  blk00000003_blk0000094a : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000008b3,
      Q => blk00000003_sig000003de
    );
  blk00000003_blk00000949 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_sig00000082,
      A1 => blk00000003_sig00000082,
      A2 => blk00000003_sig00000082,
      A3 => blk00000003_sig00000082,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig0000035f,
      Q => blk00000003_sig000008b3,
      Q15 => NLW_blk00000003_blk00000949_Q15_UNCONNECTED
    );
  blk00000003_blk00000948 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000008b2,
      Q => blk00000003_sig000003dd
    );
  blk00000003_blk00000947 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_sig00000082,
      A1 => blk00000003_sig00000082,
      A2 => blk00000003_sig00000082,
      A3 => blk00000003_sig00000082,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig0000035d,
      Q => blk00000003_sig000008b2,
      Q15 => NLW_blk00000003_blk00000947_Q15_UNCONNECTED
    );
  blk00000003_blk00000946 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000008b1,
      Q => blk00000003_sig000003df
    );
  blk00000003_blk00000945 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_sig00000082,
      A1 => blk00000003_sig00000082,
      A2 => blk00000003_sig00000082,
      A3 => blk00000003_sig00000082,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig00000361,
      Q => blk00000003_sig000008b1,
      Q15 => NLW_blk00000003_blk00000945_Q15_UNCONNECTED
    );
  blk00000003_blk00000944 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000008b0,
      Q => blk00000003_sig000003dc
    );
  blk00000003_blk00000943 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_sig00000082,
      A1 => blk00000003_sig00000082,
      A2 => blk00000003_sig00000082,
      A3 => blk00000003_sig00000082,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig0000035b,
      Q => blk00000003_sig000008b0,
      Q15 => NLW_blk00000003_blk00000943_Q15_UNCONNECTED
    );
  blk00000003_blk00000942 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000008af,
      Q => blk00000003_sig000003db
    );
  blk00000003_blk00000941 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_sig00000082,
      A1 => blk00000003_sig00000082,
      A2 => blk00000003_sig00000082,
      A3 => blk00000003_sig00000082,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig00000359,
      Q => blk00000003_sig000008af,
      Q15 => NLW_blk00000003_blk00000941_Q15_UNCONNECTED
    );
  blk00000003_blk00000940 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000008ae,
      Q => blk00000003_sig000003a9
    );
  blk00000003_blk0000093f : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_sig00000088,
      A1 => blk00000003_sig00000082,
      A2 => blk00000003_sig00000082,
      A3 => blk00000003_sig00000082,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig000001a4,
      Q => blk00000003_sig000008ae,
      Q15 => NLW_blk00000003_blk0000093f_Q15_UNCONNECTED
    );
  blk00000003_blk0000093e : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000008ad,
      Q => blk00000003_sig000003a8
    );
  blk00000003_blk0000093d : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_sig00000088,
      A1 => blk00000003_sig00000082,
      A2 => blk00000003_sig00000082,
      A3 => blk00000003_sig00000082,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig000001a2,
      Q => blk00000003_sig000008ad,
      Q15 => NLW_blk00000003_blk0000093d_Q15_UNCONNECTED
    );
  blk00000003_blk0000093c : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000008ac,
      Q => blk00000003_sig000003a7
    );
  blk00000003_blk0000093b : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_sig00000088,
      A1 => blk00000003_sig00000082,
      A2 => blk00000003_sig00000082,
      A3 => blk00000003_sig00000082,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig000001a0,
      Q => blk00000003_sig000008ac,
      Q15 => NLW_blk00000003_blk0000093b_Q15_UNCONNECTED
    );
  blk00000003_blk0000093a : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000008ab,
      Q => blk00000003_sig000003a6
    );
  blk00000003_blk00000939 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_sig00000088,
      A1 => blk00000003_sig00000082,
      A2 => blk00000003_sig00000082,
      A3 => blk00000003_sig00000082,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig0000019e,
      Q => blk00000003_sig000008ab,
      Q15 => NLW_blk00000003_blk00000939_Q15_UNCONNECTED
    );
  blk00000003_blk00000938 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000008aa,
      Q => blk00000003_sig000003a5
    );
  blk00000003_blk00000937 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_sig00000088,
      A1 => blk00000003_sig00000082,
      A2 => blk00000003_sig00000082,
      A3 => blk00000003_sig00000082,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig0000019c,
      Q => blk00000003_sig000008aa,
      Q15 => NLW_blk00000003_blk00000937_Q15_UNCONNECTED
    );
  blk00000003_blk00000936 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000008a9,
      Q => blk00000003_sig000003a4
    );
  blk00000003_blk00000935 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_sig00000088,
      A1 => blk00000003_sig00000082,
      A2 => blk00000003_sig00000082,
      A3 => blk00000003_sig00000082,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig0000019a,
      Q => blk00000003_sig000008a9,
      Q15 => NLW_blk00000003_blk00000935_Q15_UNCONNECTED
    );
  blk00000003_blk00000934 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000008a8,
      Q => blk00000003_sig000003a3
    );
  blk00000003_blk00000933 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_sig00000088,
      A1 => blk00000003_sig00000082,
      A2 => blk00000003_sig00000082,
      A3 => blk00000003_sig00000082,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig00000198,
      Q => blk00000003_sig000008a8,
      Q15 => NLW_blk00000003_blk00000933_Q15_UNCONNECTED
    );
  blk00000003_blk00000932 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000008a7,
      Q => blk00000003_sig000003a2
    );
  blk00000003_blk00000931 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_sig00000088,
      A1 => blk00000003_sig00000082,
      A2 => blk00000003_sig00000082,
      A3 => blk00000003_sig00000082,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig00000196,
      Q => blk00000003_sig000008a7,
      Q15 => NLW_blk00000003_blk00000931_Q15_UNCONNECTED
    );
  blk00000003_blk00000930 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000008a6,
      Q => blk00000003_sig000003a1
    );
  blk00000003_blk0000092f : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_sig00000088,
      A1 => blk00000003_sig00000082,
      A2 => blk00000003_sig00000082,
      A3 => blk00000003_sig00000082,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig00000194,
      Q => blk00000003_sig000008a6,
      Q15 => NLW_blk00000003_blk0000092f_Q15_UNCONNECTED
    );
  blk00000003_blk0000092e : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000008a5,
      Q => blk00000003_sig000003a0
    );
  blk00000003_blk0000092d : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_sig00000088,
      A1 => blk00000003_sig00000082,
      A2 => blk00000003_sig00000082,
      A3 => blk00000003_sig00000082,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig00000192,
      Q => blk00000003_sig000008a5,
      Q15 => NLW_blk00000003_blk0000092d_Q15_UNCONNECTED
    );
  blk00000003_blk0000092c : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000008a4,
      Q => blk00000003_sig0000039f
    );
  blk00000003_blk0000092b : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_sig00000088,
      A1 => blk00000003_sig00000082,
      A2 => blk00000003_sig00000082,
      A3 => blk00000003_sig00000082,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig00000190,
      Q => blk00000003_sig000008a4,
      Q15 => NLW_blk00000003_blk0000092b_Q15_UNCONNECTED
    );
  blk00000003_blk0000092a : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000008a3,
      Q => blk00000003_sig0000039d
    );
  blk00000003_blk00000929 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_sig00000088,
      A1 => blk00000003_sig00000082,
      A2 => blk00000003_sig00000082,
      A3 => blk00000003_sig00000082,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig0000018c,
      Q => blk00000003_sig000008a3,
      Q15 => NLW_blk00000003_blk00000929_Q15_UNCONNECTED
    );
  blk00000003_blk00000928 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000008a2,
      Q => blk00000003_sig0000039c
    );
  blk00000003_blk00000927 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_sig00000088,
      A1 => blk00000003_sig00000082,
      A2 => blk00000003_sig00000082,
      A3 => blk00000003_sig00000082,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig0000018a,
      Q => blk00000003_sig000008a2,
      Q15 => NLW_blk00000003_blk00000927_Q15_UNCONNECTED
    );
  blk00000003_blk00000926 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000008a1,
      Q => blk00000003_sig0000039e
    );
  blk00000003_blk00000925 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_sig00000088,
      A1 => blk00000003_sig00000082,
      A2 => blk00000003_sig00000082,
      A3 => blk00000003_sig00000082,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig0000018e,
      Q => blk00000003_sig000008a1,
      Q15 => NLW_blk00000003_blk00000925_Q15_UNCONNECTED
    );
  blk00000003_blk00000924 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000008a0,
      Q => blk00000003_sig00000417
    );
  blk00000003_blk00000923 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_sig00000082,
      A1 => blk00000003_sig00000082,
      A2 => blk00000003_sig00000082,
      A3 => blk00000003_sig00000082,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig000002d5,
      Q => blk00000003_sig000008a0,
      Q15 => NLW_blk00000003_blk00000923_Q15_UNCONNECTED
    );
  blk00000003_blk00000922 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig0000089f,
      Q => blk00000003_sig00000416
    );
  blk00000003_blk00000921 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_sig00000082,
      A1 => blk00000003_sig00000082,
      A2 => blk00000003_sig00000082,
      A3 => blk00000003_sig00000082,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig000002d4,
      Q => blk00000003_sig0000089f,
      Q15 => NLW_blk00000003_blk00000921_Q15_UNCONNECTED
    );
  blk00000003_blk00000920 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig0000089e,
      Q => blk00000003_sig00000415
    );
  blk00000003_blk0000091f : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_sig00000082,
      A1 => blk00000003_sig00000082,
      A2 => blk00000003_sig00000082,
      A3 => blk00000003_sig00000082,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig000002d3,
      Q => blk00000003_sig0000089e,
      Q15 => NLW_blk00000003_blk0000091f_Q15_UNCONNECTED
    );
  blk00000003_blk0000091e : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig0000089d,
      Q => blk00000003_sig00000414
    );
  blk00000003_blk0000091d : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_sig00000082,
      A1 => blk00000003_sig00000082,
      A2 => blk00000003_sig00000082,
      A3 => blk00000003_sig00000082,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig000002d2,
      Q => blk00000003_sig0000089d,
      Q15 => NLW_blk00000003_blk0000091d_Q15_UNCONNECTED
    );
  blk00000003_blk0000091c : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig0000089c,
      Q => blk00000003_sig00000413
    );
  blk00000003_blk0000091b : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_sig00000082,
      A1 => blk00000003_sig00000082,
      A2 => blk00000003_sig00000082,
      A3 => blk00000003_sig00000082,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig000002d1,
      Q => blk00000003_sig0000089c,
      Q15 => NLW_blk00000003_blk0000091b_Q15_UNCONNECTED
    );
  blk00000003_blk0000091a : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig0000089b,
      Q => blk00000003_sig00000412
    );
  blk00000003_blk00000919 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_sig00000082,
      A1 => blk00000003_sig00000082,
      A2 => blk00000003_sig00000082,
      A3 => blk00000003_sig00000082,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig000002d0,
      Q => blk00000003_sig0000089b,
      Q15 => NLW_blk00000003_blk00000919_Q15_UNCONNECTED
    );
  blk00000003_blk00000918 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig0000089a,
      Q => blk00000003_sig00000411
    );
  blk00000003_blk00000917 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_sig00000082,
      A1 => blk00000003_sig00000082,
      A2 => blk00000003_sig00000082,
      A3 => blk00000003_sig00000082,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig000002cf,
      Q => blk00000003_sig0000089a,
      Q15 => NLW_blk00000003_blk00000917_Q15_UNCONNECTED
    );
  blk00000003_blk00000916 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000899,
      Q => blk00000003_sig00000410
    );
  blk00000003_blk00000915 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_sig00000082,
      A1 => blk00000003_sig00000082,
      A2 => blk00000003_sig00000082,
      A3 => blk00000003_sig00000082,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig000002ce,
      Q => blk00000003_sig00000899,
      Q15 => NLW_blk00000003_blk00000915_Q15_UNCONNECTED
    );
  blk00000003_blk00000914 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000898,
      Q => blk00000003_sig0000040f
    );
  blk00000003_blk00000913 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_sig00000082,
      A1 => blk00000003_sig00000082,
      A2 => blk00000003_sig00000082,
      A3 => blk00000003_sig00000082,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig000002cd,
      Q => blk00000003_sig00000898,
      Q15 => NLW_blk00000003_blk00000913_Q15_UNCONNECTED
    );
  blk00000003_blk00000912 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000897,
      Q => blk00000003_sig0000040e
    );
  blk00000003_blk00000911 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_sig00000082,
      A1 => blk00000003_sig00000082,
      A2 => blk00000003_sig00000082,
      A3 => blk00000003_sig00000082,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig000002cc,
      Q => blk00000003_sig00000897,
      Q15 => NLW_blk00000003_blk00000911_Q15_UNCONNECTED
    );
  blk00000003_blk00000910 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000896,
      Q => blk00000003_sig0000040d
    );
  blk00000003_blk0000090f : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_sig00000082,
      A1 => blk00000003_sig00000082,
      A2 => blk00000003_sig00000082,
      A3 => blk00000003_sig00000082,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig000002cb,
      Q => blk00000003_sig00000896,
      Q15 => NLW_blk00000003_blk0000090f_Q15_UNCONNECTED
    );
  blk00000003_blk0000090e : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000895,
      Q => blk00000003_sig0000040c
    );
  blk00000003_blk0000090d : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_sig00000082,
      A1 => blk00000003_sig00000082,
      A2 => blk00000003_sig00000082,
      A3 => blk00000003_sig00000082,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig000002ca,
      Q => blk00000003_sig00000895,
      Q15 => NLW_blk00000003_blk0000090d_Q15_UNCONNECTED
    );
  blk00000003_blk0000090c : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000894,
      Q => blk00000003_sig0000040b
    );
  blk00000003_blk0000090b : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_sig00000082,
      A1 => blk00000003_sig00000082,
      A2 => blk00000003_sig00000082,
      A3 => blk00000003_sig00000082,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig000002c9,
      Q => blk00000003_sig00000894,
      Q15 => NLW_blk00000003_blk0000090b_Q15_UNCONNECTED
    );
  blk00000003_blk0000090a : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000893,
      Q => blk00000003_sig0000040a
    );
  blk00000003_blk00000909 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_sig00000082,
      A1 => blk00000003_sig00000082,
      A2 => blk00000003_sig00000082,
      A3 => blk00000003_sig00000082,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig000002c8,
      Q => blk00000003_sig00000893,
      Q15 => NLW_blk00000003_blk00000909_Q15_UNCONNECTED
    );
  blk00000003_blk00000908 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000892,
      Q => blk00000003_sig0000048c
    );
  blk00000003_blk00000907 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_sig00000082,
      A1 => blk00000003_sig00000082,
      A2 => blk00000003_sig00000082,
      A3 => blk00000003_sig00000082,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig00000379,
      Q => blk00000003_sig00000892,
      Q15 => NLW_blk00000003_blk00000907_Q15_UNCONNECTED
    );
  blk00000003_blk00000906 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000891,
      Q => blk00000003_sig0000048b
    );
  blk00000003_blk00000905 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_sig00000082,
      A1 => blk00000003_sig00000082,
      A2 => blk00000003_sig00000082,
      A3 => blk00000003_sig00000082,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig00000082,
      Q => blk00000003_sig00000891,
      Q15 => NLW_blk00000003_blk00000905_Q15_UNCONNECTED
    );
  blk00000003_blk00000904 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000890,
      Q => blk00000003_sig000003eb
    );
  blk00000003_blk00000903 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_sig00000088,
      A1 => blk00000003_sig00000082,
      A2 => blk00000003_sig00000082,
      A3 => blk00000003_sig00000082,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig00000492,
      Q => blk00000003_sig00000890,
      Q15 => NLW_blk00000003_blk00000903_Q15_UNCONNECTED
    );
  blk00000003_blk00000902 : RAMB18
    generic map(
      INIT_00 => X"02F202C0028D025B022901F701C401920160012E00FB00C90097006500320000",
      INIT_01 => X"061605E305B1057F054D051B04E804B604840452041F03ED03BB038903560324",
      INIT_02 => X"0938090608D408A20870083E080C07D907A707750743071106DE06AC067A0648",
      INIT_03 => X"0C5A0C280BF60BC40B920B600B2D0AFB0AC90A970A650A330A0109CF099D096B",
      INIT_04 => X"0F790F470F150EE40EB20E800E4E0E1C0DEA0DB80D860D540D220CF00CBE0C8C",
      INIT_05 => X"129612651233120111CF119E116C113A110810D610A410731041100F0FDD0FAB",
      INIT_06 => X"15B1157F154D151C14EA14B914871455142413F213C1138F135D132B12FA12C8",
      INIT_07 => X"18C7189618651833180217D1179F176E173C170B16DA16A816771645161415E2",
      INIT_08 => X"1BDA1BA91B781B471B161AE51AB41A831A511A2019EF19BE198D195B192A18F9",
      INIT_09 => X"1EE91EB81E881E571E261DF51DC41D931D621D311D011CD01C9F1C6E1C3D1C0C",
      INIT_0A => X"21F321C3219221622131210120D0209F206F203E200E1FDD1FAC1F7B1F4B1F1A",
      INIT_0B => X"24F824C8249824672437240723D723A723762346231622E522B5228422542224",
      INIT_0C => X"27F727C7279727682738270826D826A826782648261825E825B8258825582528",
      INIT_0D => X"2AF02AC12A912A622A322A0329D329A429742945291528E528B6288628562827",
      INIT_0E => X"2DE22DB32D842D552D262CF72CC82C992C6A2C3B2C0C2BDC2BAD2B7E2B4F2B1F",
      INIT_0F => X"30CD309F3070304230132FE52FB62F872F592F2A2EFB2ECC2E9E2E6F2E402E11",
      INIT_10 => X"33B133833355332732F932CB329D326E3240321231E431B531873159312A30FC",
      INIT_11 => X"368D365F3632360435D735A9357B354E352034F234C434973469343B340D33DF",
      INIT_12 => X"39603933390638D938AC387F3852382537F737CA379D37703742371536E836BA",
      INIT_13 => X"3C2A3BFE3BD23BA53B793B4C3B203AF33AC63A9A3A6D3A403A1339E739BA398D",
      INIT_14 => X"3EEC3EC03E943E683E3C3E103DE43DB83D8C3D603D343D083CDC3CAF3C833C57",
      INIT_15 => X"41A34178414D412140F640CB409F40744048401D3FF13FC63F9A3F6F3F433F17",
      INIT_16 => X"4450442643FB43D143A6437B4351432642FB42D042A5427A424F422441F941CE",
      INIT_17 => X"46F346C9469F4675464B462145F745CD45A34579454F452444FA44D044A5447B",
      INIT_18 => X"498B49624939490F48E648BD4893486A4840481747ED47C4479A47704747471D",
      INIT_19 => X"4C174BEF4BC74B9E4B754B4D4B244AFB4AD34AAA4A814A584A2F4A0649DD49B4",
      INIT_1A => X"4E984E714E494E214DF94DD14DA94D814D594D314D094CE14CB94C914C684C40",
      INIT_1B => X"510D50E650BF50985071504A50234FFB4FD44FAD4F854F5E4F374F0F4EE84EC0",
      INIT_1C => X"5375534F5329530352DC52B6529052695243521C51F551CF51A85181515B5134",
      INIT_1D => X"55D055AB55865560553B551554F054CA54A4547F54595433540D53E753C1539B",
      INIT_1E => X"581E57FA57D557B1578C57675743571E56F956D456AF568A56655640561B55F6",
      INIT_1F => X"5A5F5A3B5A1859F459D059AC598859645940591C58F858D458B0588C58675843",
      INIT_20 => X"5C915C6F5C4C5C295C065BE35BC05B9D5B7A5B575B345B105AED5AC95AA65A82",
      INIT_21 => X"5EB65E945E725E505E2E5E0C5DEA5DC85DA55D835D615D3E5D1C5CF95CD75CB4",
      INIT_22 => X"60CB60AA608960686047602660055FE45FC25FA15F805F5E5F3C5F1B5EF95ED7",
      INIT_23 => X"62D262B26292627262526232621161F161D161B06190616F614E612E610D60EC",
      INIT_24 => X"64CA64AB648B646C644D642E640F63EF63D063B06391637163516332631262F2",
      INIT_25 => X"66B26693667566576639661B65FC65DE65C065A16582656465456526650764E9",
      INIT_26 => X"688A686D68506832681567F867DA67BD67A06782676467476729670B66ED66D0",
      INIT_27 => X"6A526A366A1A69FD69E169C569A9698C697069536937691A68FD68E068C468A7",
      INIT_28 => X"6C096BEE6BD36BB86B9D6B826B666B4B6B306B146AF86ADD6AC16AA56A896A6E",
      INIT_29 => X"6DB06D966D7C6D626D486D2E6D146CF96CDF6CC46CAA6C8F6C756C5A6C3F6C24",
      INIT_2A => X"6F466F2D6F146EFB6EE26EC96EB06E976E7D6E646E4A6E316E176DFE6DE46DCA",
      INIT_2B => X"70CB70B3709B7083706B7053703B7023700B6FF26FDA6FC26FA96F906F786F5F",
      INIT_2C => X"723F7228721171FA71E371CC71B5719E7187717071587141712A711270FA70E3",
      INIT_2D => X"73A0738B7375735F734A7334731E730872F272DC72C572AF72997282726C7255",
      INIT_2E => X"74F074DC74C774B3749E748974757460744B74367421740B73F673E173CB73B6",
      INIT_2F => X"762E761B760875F475E175CD75B975A67592757E756A75567542752D75197505",
      INIT_30 => X"775A774877367723771176FE76EC76D976C776B476A1768E767B766876557642",
      INIT_31 => X"7874786378517840782F781E780C77FB77E977D877C677B477A27790777E776C",
      INIT_32 => X"797A796A795B794A793A792A791A790A78F978E978D878C878B778A678957885",
      INIT_33 => X"7A6E7A607A517A427A337A247A157A0679F779E779D879C979B979AA799A798A",
      INIT_34 => X"7B507B427B347B277B197B0B7AFD7AEF7AE17AD37AC57AB77AA87A9A7A8C7A7D",
      INIT_35 => X"7C1E7C117C057BF97BEC7BDF7BD37BC67BB97BAC7B9F7B927B857B787B6A7B5D",
      INIT_36 => X"7CD97CCE7CC27CB77CAC7CA07C957C897C7E7C727C667C5A7C4E7C427C367C2A",
      INIT_37 => X"7D817D777D6D7D637D587D4E7D447D3A7D2F7D257D1A7D0F7D057CFA7CEF7CE4",
      INIT_38 => X"7E157E0C7E037DFB7DF27DE97DE07DD67DCD7DC47DBA7DB17DA77D9E7D947D8A",
      INIT_39 => X"7E967E8E7E877E7F7E787E707E687E607E587E507E487E3F7E377E2F7E267E1E",
      INIT_3A => X"7F037EFD7EF77EF07EEA7EE37EDD7ED67ECF7EC87EC17EBA7EB37EAC7EA57E9D",
      INIT_3B => X"7F5D7F587F537F4E7F497F437F3E7F387F337F2D7F277F227F1C7F167F107F0A",
      INIT_3C => X"7FA37FA07F9C7F987F947F907F8B7F877F837F7E7F7A7F757F717F6C7F677F62",
      INIT_3D => X"7FD67FD37FD17FCE7FCB7FC87FC57FC27FBF7FBC7FB97FB57FB27FAE7FAB7FA7",
      INIT_3E => X"7FF57FF47FF27FF17FEF7FED7FEC7FEA7FE87FE67FE47FE27FE07FDD7FDB7FD9",
      INIT_3F => X"8000800080007FFF7FFF7FFF7FFE7FFE7FFD7FFC7FFB7FFA7FF97FF87FF77FF6",
      INIT_A => X"00000",
      INIT_B => X"00000",
      WRITE_MODE_A => "WRITE_FIRST",
      WRITE_MODE_B => "WRITE_FIRST",
      DOA_REG => 1,
      DOB_REG => 1,
      READ_WIDTH_A => 18,
      READ_WIDTH_B => 18,
      WRITE_WIDTH_A => 18,
      WRITE_WIDTH_B => 0,
      INIT_FILE => "NONE",
      INITP_00 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INITP_01 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INITP_02 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INITP_03 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INITP_04 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INITP_05 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INITP_06 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INITP_07 => X"0000000000000000000000000000000000000000000000000000000000000000",
      SIM_COLLISION_CHECK => "ALL",
      SRVAL_A => X"00000",
      SRVAL_B => X"00000"
    )
    port map (
      CLKA => clk,
      CLKB => clk,
      ENA => blk00000003_sig000007df,
      ENB => blk00000003_sig000007df,
      REGCEA => blk00000003_sig000007df,
      REGCEB => blk00000003_sig000007df,
      SSRA => blk00000003_sig00000082,
      SSRB => blk00000003_sig00000082,
      ADDRA(13) => blk00000003_sig00000821,
      ADDRA(12) => blk00000003_sig00000822,
      ADDRA(11) => blk00000003_sig00000823,
      ADDRA(10) => blk00000003_sig00000824,
      ADDRA(9) => blk00000003_sig00000825,
      ADDRA(8) => blk00000003_sig00000826,
      ADDRA(7) => blk00000003_sig00000827,
      ADDRA(6) => blk00000003_sig00000828,
      ADDRA(5) => blk00000003_sig00000829,
      ADDRA(4) => blk00000003_sig0000082a,
      ADDRA(3) => NLW_blk00000003_blk00000902_ADDRA_3_UNCONNECTED,
      ADDRA(2) => NLW_blk00000003_blk00000902_ADDRA_2_UNCONNECTED,
      ADDRA(1) => NLW_blk00000003_blk00000902_ADDRA_1_UNCONNECTED,
      ADDRA(0) => NLW_blk00000003_blk00000902_ADDRA_0_UNCONNECTED,
      ADDRB(13) => blk00000003_sig0000082b,
      ADDRB(12) => blk00000003_sig0000082c,
      ADDRB(11) => blk00000003_sig0000082d,
      ADDRB(10) => blk00000003_sig0000082e,
      ADDRB(9) => blk00000003_sig0000082f,
      ADDRB(8) => blk00000003_sig00000830,
      ADDRB(7) => blk00000003_sig00000831,
      ADDRB(6) => blk00000003_sig00000832,
      ADDRB(5) => blk00000003_sig00000833,
      ADDRB(4) => blk00000003_sig0000082a,
      ADDRB(3) => NLW_blk00000003_blk00000902_ADDRB_3_UNCONNECTED,
      ADDRB(2) => NLW_blk00000003_blk00000902_ADDRB_2_UNCONNECTED,
      ADDRB(1) => NLW_blk00000003_blk00000902_ADDRB_1_UNCONNECTED,
      ADDRB(0) => NLW_blk00000003_blk00000902_ADDRB_0_UNCONNECTED,
      DIA(15) => blk00000003_sig00000082,
      DIA(14) => blk00000003_sig00000082,
      DIA(13) => blk00000003_sig00000082,
      DIA(12) => blk00000003_sig00000082,
      DIA(11) => blk00000003_sig00000082,
      DIA(10) => blk00000003_sig00000082,
      DIA(9) => blk00000003_sig00000082,
      DIA(8) => blk00000003_sig00000082,
      DIA(7) => blk00000003_sig00000082,
      DIA(6) => blk00000003_sig00000082,
      DIA(5) => blk00000003_sig00000082,
      DIA(4) => blk00000003_sig00000082,
      DIA(3) => blk00000003_sig00000082,
      DIA(2) => blk00000003_sig00000082,
      DIA(1) => blk00000003_sig00000082,
      DIA(0) => blk00000003_sig00000082,
      DIB(15) => NLW_blk00000003_blk00000902_DIB_15_UNCONNECTED,
      DIB(14) => NLW_blk00000003_blk00000902_DIB_14_UNCONNECTED,
      DIB(13) => NLW_blk00000003_blk00000902_DIB_13_UNCONNECTED,
      DIB(12) => NLW_blk00000003_blk00000902_DIB_12_UNCONNECTED,
      DIB(11) => NLW_blk00000003_blk00000902_DIB_11_UNCONNECTED,
      DIB(10) => NLW_blk00000003_blk00000902_DIB_10_UNCONNECTED,
      DIB(9) => NLW_blk00000003_blk00000902_DIB_9_UNCONNECTED,
      DIB(8) => NLW_blk00000003_blk00000902_DIB_8_UNCONNECTED,
      DIB(7) => NLW_blk00000003_blk00000902_DIB_7_UNCONNECTED,
      DIB(6) => NLW_blk00000003_blk00000902_DIB_6_UNCONNECTED,
      DIB(5) => NLW_blk00000003_blk00000902_DIB_5_UNCONNECTED,
      DIB(4) => NLW_blk00000003_blk00000902_DIB_4_UNCONNECTED,
      DIB(3) => NLW_blk00000003_blk00000902_DIB_3_UNCONNECTED,
      DIB(2) => NLW_blk00000003_blk00000902_DIB_2_UNCONNECTED,
      DIB(1) => NLW_blk00000003_blk00000902_DIB_1_UNCONNECTED,
      DIB(0) => NLW_blk00000003_blk00000902_DIB_0_UNCONNECTED,
      DIPA(1) => blk00000003_sig00000082,
      DIPA(0) => blk00000003_sig00000082,
      DIPB(1) => NLW_blk00000003_blk00000902_DIPB_1_UNCONNECTED,
      DIPB(0) => NLW_blk00000003_blk00000902_DIPB_0_UNCONNECTED,
      DOA(15) => blk00000003_sig00000875,
      DOA(14) => blk00000003_sig00000802,
      DOA(13) => blk00000003_sig00000804,
      DOA(12) => blk00000003_sig00000806,
      DOA(11) => blk00000003_sig00000808,
      DOA(10) => blk00000003_sig0000080a,
      DOA(9) => blk00000003_sig0000080c,
      DOA(8) => blk00000003_sig0000080e,
      DOA(7) => blk00000003_sig00000810,
      DOA(6) => blk00000003_sig00000812,
      DOA(5) => blk00000003_sig00000814,
      DOA(4) => blk00000003_sig00000816,
      DOA(3) => blk00000003_sig00000818,
      DOA(2) => blk00000003_sig0000081a,
      DOA(1) => blk00000003_sig0000081c,
      DOA(0) => blk00000003_sig0000081e,
      DOB(15) => blk00000003_sig00000874,
      DOB(14) => blk00000003_sig000007e2,
      DOB(13) => blk00000003_sig000007e4,
      DOB(12) => blk00000003_sig000007e6,
      DOB(11) => blk00000003_sig000007e8,
      DOB(10) => blk00000003_sig000007ea,
      DOB(9) => blk00000003_sig000007ec,
      DOB(8) => blk00000003_sig000007ee,
      DOB(7) => blk00000003_sig000007f0,
      DOB(6) => blk00000003_sig000007f2,
      DOB(5) => blk00000003_sig000007f4,
      DOB(4) => blk00000003_sig000007f6,
      DOB(3) => blk00000003_sig000007f8,
      DOB(2) => blk00000003_sig000007fa,
      DOB(1) => blk00000003_sig000007fc,
      DOB(0) => blk00000003_sig000007fe,
      DOPA(1) => NLW_blk00000003_blk00000902_DOPA_1_UNCONNECTED,
      DOPA(0) => NLW_blk00000003_blk00000902_DOPA_0_UNCONNECTED,
      DOPB(1) => NLW_blk00000003_blk00000902_DOPB_1_UNCONNECTED,
      DOPB(0) => NLW_blk00000003_blk00000902_DOPB_0_UNCONNECTED,
      WEA(1) => blk00000003_sig00000082,
      WEA(0) => blk00000003_sig00000082,
      WEB(1) => blk00000003_sig00000082,
      WEB(0) => blk00000003_sig00000082
    );
  blk00000003_blk00000901 : INV
    port map (
      I => blk00000003_sig00000836,
      O => blk00000003_sig0000084e
    );
  blk00000003_blk00000900 : INV
    port map (
      I => blk00000003_sig00000837,
      O => blk00000003_sig0000084d
    );
  blk00000003_blk000008ff : INV
    port map (
      I => blk00000003_sig00000838,
      O => blk00000003_sig0000084c
    );
  blk00000003_blk000008fe : INV
    port map (
      I => blk00000003_sig00000839,
      O => blk00000003_sig0000084b
    );
  blk00000003_blk000008fd : INV
    port map (
      I => blk00000003_sig0000083a,
      O => blk00000003_sig0000084a
    );
  blk00000003_blk000008fc : INV
    port map (
      I => blk00000003_sig0000083b,
      O => blk00000003_sig00000849
    );
  blk00000003_blk000008fb : INV
    port map (
      I => blk00000003_sig0000083c,
      O => blk00000003_sig00000848
    );
  blk00000003_blk000008fa : INV
    port map (
      I => blk00000003_sig0000083d,
      O => blk00000003_sig00000847
    );
  blk00000003_blk000008f9 : INV
    port map (
      I => blk00000003_sig0000083e,
      O => blk00000003_sig00000846
    );
  blk00000003_blk000008f8 : INV
    port map (
      I => blk00000003_sig0000083f,
      O => blk00000003_sig00000845
    );
  blk00000003_blk000008f7 : INV
    port map (
      I => blk00000003_sig00000658,
      O => blk00000003_sig000006e0
    );
  blk00000003_blk000008f6 : INV
    port map (
      I => blk00000003_sig00000243,
      O => blk00000003_sig000005de
    );
  blk00000003_blk000008f5 : INV
    port map (
      I => blk00000003_sig00000265,
      O => blk00000003_sig000005d1
    );
  blk00000003_blk000008f4 : LUT1
    generic map(
      INIT => X"2"
    )
    port map (
      I0 => blk00000003_sig00000698,
      O => blk00000003_sig000007de
    );
  blk00000003_blk000008f3 : LUT1
    generic map(
      INIT => X"2"
    )
    port map (
      I0 => blk00000003_sig00000698,
      O => blk00000003_sig000007c0
    );
  blk00000003_blk000008f2 : LUT4
    generic map(
      INIT => X"ABA8"
    )
    port map (
      I0 => blk00000003_sig0000088f,
      I1 => blk00000003_sig0000062e,
      I2 => blk00000003_sig0000062c,
      I3 => blk00000003_sig00000774,
      O => blk00000003_sig00000322
    );
  blk00000003_blk000008f1 : LUT4
    generic map(
      INIT => X"ABA8"
    )
    port map (
      I0 => blk00000003_sig0000088e,
      I1 => blk00000003_sig0000062e,
      I2 => blk00000003_sig0000062c,
      I3 => blk00000003_sig00000775,
      O => blk00000003_sig00000324
    );
  blk00000003_blk000008f0 : LUT4
    generic map(
      INIT => X"ABA8"
    )
    port map (
      I0 => blk00000003_sig0000088d,
      I1 => blk00000003_sig0000062e,
      I2 => blk00000003_sig0000062c,
      I3 => blk00000003_sig00000776,
      O => blk00000003_sig00000326
    );
  blk00000003_blk000008ef : LUT4
    generic map(
      INIT => X"ABA8"
    )
    port map (
      I0 => blk00000003_sig0000088c,
      I1 => blk00000003_sig0000062e,
      I2 => blk00000003_sig0000062c,
      I3 => blk00000003_sig00000777,
      O => blk00000003_sig00000328
    );
  blk00000003_blk000008ee : LUT4
    generic map(
      INIT => X"ABA8"
    )
    port map (
      I0 => blk00000003_sig0000088b,
      I1 => blk00000003_sig0000062e,
      I2 => blk00000003_sig0000062c,
      I3 => blk00000003_sig00000778,
      O => blk00000003_sig0000032a
    );
  blk00000003_blk000008ed : LUT4
    generic map(
      INIT => X"ABA8"
    )
    port map (
      I0 => blk00000003_sig0000088a,
      I1 => blk00000003_sig0000062e,
      I2 => blk00000003_sig0000062c,
      I3 => blk00000003_sig00000779,
      O => blk00000003_sig0000032c
    );
  blk00000003_blk000008ec : LUT4
    generic map(
      INIT => X"ABA8"
    )
    port map (
      I0 => blk00000003_sig00000889,
      I1 => blk00000003_sig0000062e,
      I2 => blk00000003_sig0000062c,
      I3 => blk00000003_sig0000077a,
      O => blk00000003_sig0000032e
    );
  blk00000003_blk000008eb : LUT4
    generic map(
      INIT => X"ABA8"
    )
    port map (
      I0 => blk00000003_sig00000888,
      I1 => blk00000003_sig0000062e,
      I2 => blk00000003_sig0000062c,
      I3 => blk00000003_sig0000077b,
      O => blk00000003_sig00000330
    );
  blk00000003_blk000008ea : LUT4
    generic map(
      INIT => X"ABA8"
    )
    port map (
      I0 => blk00000003_sig00000887,
      I1 => blk00000003_sig0000062e,
      I2 => blk00000003_sig0000062c,
      I3 => blk00000003_sig00000772,
      O => blk00000003_sig0000031e
    );
  blk00000003_blk000008e9 : LUT4
    generic map(
      INIT => X"ABA8"
    )
    port map (
      I0 => blk00000003_sig00000886,
      I1 => blk00000003_sig0000062e,
      I2 => blk00000003_sig0000062c,
      I3 => blk00000003_sig00000773,
      O => blk00000003_sig00000320
    );
  blk00000003_blk000008e8 : LUT4
    generic map(
      INIT => X"ABA8"
    )
    port map (
      I0 => blk00000003_sig00000885,
      I1 => blk00000003_sig0000062e,
      I2 => blk00000003_sig0000062c,
      I3 => blk00000003_sig0000077c,
      O => blk00000003_sig00000332
    );
  blk00000003_blk000008e7 : LUT4
    generic map(
      INIT => X"ABA8"
    )
    port map (
      I0 => blk00000003_sig00000884,
      I1 => blk00000003_sig0000062e,
      I2 => blk00000003_sig0000062c,
      I3 => blk00000003_sig0000077d,
      O => blk00000003_sig00000334
    );
  blk00000003_blk000008e6 : LUT6
    generic map(
      INIT => X"AAAAAAACAAAAAAAA"
    )
    port map (
      I0 => blk00000003_sig000006f5,
      I1 => blk00000003_sig00000653,
      I2 => blk00000003_sig0000062e,
      I3 => blk00000003_sig0000062c,
      I4 => blk00000003_sig00000871,
      I5 => blk00000003_sig00000872,
      O => blk00000003_sig0000030a
    );
  blk00000003_blk000008e5 : LUT6
    generic map(
      INIT => X"AAAAAAACAAAAAAAA"
    )
    port map (
      I0 => blk00000003_sig000006f7,
      I1 => blk00000003_sig00000652,
      I2 => blk00000003_sig0000062e,
      I3 => blk00000003_sig0000062c,
      I4 => blk00000003_sig00000871,
      I5 => blk00000003_sig00000872,
      O => blk00000003_sig0000030c
    );
  blk00000003_blk000008e4 : LUT6
    generic map(
      INIT => X"AAAAAAACAAAAAAAA"
    )
    port map (
      I0 => blk00000003_sig000006f9,
      I1 => blk00000003_sig00000651,
      I2 => blk00000003_sig0000062e,
      I3 => blk00000003_sig0000062c,
      I4 => blk00000003_sig00000871,
      I5 => blk00000003_sig00000872,
      O => blk00000003_sig0000030e
    );
  blk00000003_blk000008e3 : LUT6
    generic map(
      INIT => X"AAAAAAACAAAAAAAA"
    )
    port map (
      I0 => blk00000003_sig000006fb,
      I1 => blk00000003_sig00000650,
      I2 => blk00000003_sig0000062e,
      I3 => blk00000003_sig0000062c,
      I4 => blk00000003_sig00000871,
      I5 => blk00000003_sig00000872,
      O => blk00000003_sig00000310
    );
  blk00000003_blk000008e2 : LUT6
    generic map(
      INIT => X"AAAAAAACAAAAAAAA"
    )
    port map (
      I0 => blk00000003_sig000006fd,
      I1 => blk00000003_sig00000662,
      I2 => blk00000003_sig0000062e,
      I3 => blk00000003_sig0000062c,
      I4 => blk00000003_sig00000871,
      I5 => blk00000003_sig00000872,
      O => blk00000003_sig00000312
    );
  blk00000003_blk000008e1 : LUT6
    generic map(
      INIT => X"AAAAAAACAAAAAAAA"
    )
    port map (
      I0 => blk00000003_sig000006ff,
      I1 => blk00000003_sig00000660,
      I2 => blk00000003_sig0000062e,
      I3 => blk00000003_sig0000062c,
      I4 => blk00000003_sig00000871,
      I5 => blk00000003_sig00000872,
      O => blk00000003_sig00000314
    );
  blk00000003_blk000008e0 : LUT6
    generic map(
      INIT => X"AAAAAAACAAAAAAAA"
    )
    port map (
      I0 => blk00000003_sig00000701,
      I1 => blk00000003_sig0000065e,
      I2 => blk00000003_sig0000062e,
      I3 => blk00000003_sig0000062c,
      I4 => blk00000003_sig00000871,
      I5 => blk00000003_sig00000872,
      O => blk00000003_sig00000316
    );
  blk00000003_blk000008df : LUT6
    generic map(
      INIT => X"AAAAAAACAAAAAAAA"
    )
    port map (
      I0 => blk00000003_sig00000703,
      I1 => blk00000003_sig0000065c,
      I2 => blk00000003_sig0000062e,
      I3 => blk00000003_sig0000062c,
      I4 => blk00000003_sig00000871,
      I5 => blk00000003_sig00000872,
      O => blk00000003_sig00000318
    );
  blk00000003_blk000008de : LUT6
    generic map(
      INIT => X"AAAAAAACAAAAAAAA"
    )
    port map (
      I0 => blk00000003_sig000006f1,
      I1 => blk00000003_sig00000655,
      I2 => blk00000003_sig0000062e,
      I3 => blk00000003_sig0000062c,
      I4 => blk00000003_sig00000871,
      I5 => blk00000003_sig00000872,
      O => blk00000003_sig00000306
    );
  blk00000003_blk000008dd : LUT6
    generic map(
      INIT => X"AAAAAAACAAAAAAAA"
    )
    port map (
      I0 => blk00000003_sig000006f3,
      I1 => blk00000003_sig00000654,
      I2 => blk00000003_sig0000062e,
      I3 => blk00000003_sig0000062c,
      I4 => blk00000003_sig00000871,
      I5 => blk00000003_sig00000872,
      O => blk00000003_sig00000308
    );
  blk00000003_blk000008dc : LUT6
    generic map(
      INIT => X"AAAAAAACAAAAAAAA"
    )
    port map (
      I0 => blk00000003_sig00000705,
      I1 => blk00000003_sig0000065a,
      I2 => blk00000003_sig0000062e,
      I3 => blk00000003_sig0000062c,
      I4 => blk00000003_sig00000871,
      I5 => blk00000003_sig00000872,
      O => blk00000003_sig0000031a
    );
  blk00000003_blk000008db : LUT6
    generic map(
      INIT => X"AAAAAAACAAAAAAAA"
    )
    port map (
      I0 => blk00000003_sig00000707,
      I1 => blk00000003_sig00000658,
      I2 => blk00000003_sig0000062e,
      I3 => blk00000003_sig0000062c,
      I4 => blk00000003_sig00000871,
      I5 => blk00000003_sig00000872,
      O => blk00000003_sig0000031c
    );
  blk00000003_blk000008da : LUT6
    generic map(
      INIT => X"0000000001000000"
    )
    port map (
      I0 => sclr,
      I1 => blk00000003_sig0000062e,
      I2 => blk00000003_sig0000062c,
      I3 => blk00000003_sig00000879,
      I4 => blk00000003_sig00000871,
      I5 => blk00000003_sig00000872,
      O => blk00000003_sig0000087b
    );
  blk00000003_blk000008d9 : LUT4
    generic map(
      INIT => X"2000"
    )
    port map (
      I0 => blk00000003_sig000006e4,
      I1 => blk00000003_sig000006e8,
      I2 => blk00000003_sig000006ea,
      I3 => blk00000003_sig000006e6,
      O => blk00000003_sig000006cb
    );
  blk00000003_blk000008d8 : LUT4
    generic map(
      INIT => X"8000"
    )
    port map (
      I0 => blk00000003_sig00000626,
      I1 => blk00000003_sig00000788,
      I2 => blk00000003_sig00000798,
      I3 => blk00000003_sig00000189,
      O => blk00000003_sig00000519
    );
  blk00000003_blk000008d7 : LUT4
    generic map(
      INIT => X"8000"
    )
    port map (
      I0 => blk00000003_sig00000626,
      I1 => blk00000003_sig00000788,
      I2 => blk00000003_sig00000798,
      I3 => blk00000003_sig0000018b,
      O => blk00000003_sig0000051a
    );
  blk00000003_blk000008d6 : LUT4
    generic map(
      INIT => X"8000"
    )
    port map (
      I0 => blk00000003_sig00000626,
      I1 => blk00000003_sig00000788,
      I2 => blk00000003_sig00000798,
      I3 => blk00000003_sig0000018d,
      O => blk00000003_sig0000051b
    );
  blk00000003_blk000008d5 : LUT4
    generic map(
      INIT => X"8000"
    )
    port map (
      I0 => blk00000003_sig00000626,
      I1 => blk00000003_sig00000788,
      I2 => blk00000003_sig00000798,
      I3 => blk00000003_sig0000018f,
      O => blk00000003_sig0000051c
    );
  blk00000003_blk000008d4 : LUT4
    generic map(
      INIT => X"8000"
    )
    port map (
      I0 => blk00000003_sig00000626,
      I1 => blk00000003_sig00000788,
      I2 => blk00000003_sig00000798,
      I3 => blk00000003_sig00000191,
      O => blk00000003_sig0000051d
    );
  blk00000003_blk000008d3 : LUT4
    generic map(
      INIT => X"8000"
    )
    port map (
      I0 => blk00000003_sig00000626,
      I1 => blk00000003_sig00000788,
      I2 => blk00000003_sig00000798,
      I3 => blk00000003_sig00000193,
      O => blk00000003_sig0000051e
    );
  blk00000003_blk000008d2 : LUT4
    generic map(
      INIT => X"8000"
    )
    port map (
      I0 => blk00000003_sig00000626,
      I1 => blk00000003_sig00000788,
      I2 => blk00000003_sig00000798,
      I3 => blk00000003_sig00000195,
      O => blk00000003_sig0000051f
    );
  blk00000003_blk000008d1 : LUT4
    generic map(
      INIT => X"8000"
    )
    port map (
      I0 => blk00000003_sig00000626,
      I1 => blk00000003_sig00000788,
      I2 => blk00000003_sig00000798,
      I3 => blk00000003_sig00000197,
      O => blk00000003_sig00000520
    );
  blk00000003_blk000008d0 : LUT4
    generic map(
      INIT => X"8000"
    )
    port map (
      I0 => blk00000003_sig00000626,
      I1 => blk00000003_sig00000788,
      I2 => blk00000003_sig00000798,
      I3 => blk00000003_sig00000199,
      O => blk00000003_sig00000521
    );
  blk00000003_blk000008cf : LUT4
    generic map(
      INIT => X"8000"
    )
    port map (
      I0 => blk00000003_sig00000626,
      I1 => blk00000003_sig00000788,
      I2 => blk00000003_sig00000798,
      I3 => blk00000003_sig0000019b,
      O => blk00000003_sig00000522
    );
  blk00000003_blk000008ce : LUT4
    generic map(
      INIT => X"8000"
    )
    port map (
      I0 => blk00000003_sig00000626,
      I1 => blk00000003_sig00000788,
      I2 => blk00000003_sig00000798,
      I3 => blk00000003_sig0000019d,
      O => blk00000003_sig00000523
    );
  blk00000003_blk000008cd : LUT4
    generic map(
      INIT => X"8000"
    )
    port map (
      I0 => blk00000003_sig00000626,
      I1 => blk00000003_sig00000788,
      I2 => blk00000003_sig00000798,
      I3 => blk00000003_sig0000019f,
      O => blk00000003_sig00000524
    );
  blk00000003_blk000008cc : LUT4
    generic map(
      INIT => X"8000"
    )
    port map (
      I0 => blk00000003_sig00000626,
      I1 => blk00000003_sig00000788,
      I2 => blk00000003_sig00000798,
      I3 => blk00000003_sig000001a1,
      O => blk00000003_sig00000525
    );
  blk00000003_blk000008cb : LUT4
    generic map(
      INIT => X"8000"
    )
    port map (
      I0 => blk00000003_sig00000626,
      I1 => blk00000003_sig00000788,
      I2 => blk00000003_sig00000798,
      I3 => blk00000003_sig000001a3,
      O => blk00000003_sig00000526
    );
  blk00000003_blk000008ca : LUT4
    generic map(
      INIT => X"8000"
    )
    port map (
      I0 => blk00000003_sig00000626,
      I1 => blk00000003_sig00000788,
      I2 => blk00000003_sig00000798,
      I3 => blk00000003_sig000001a5,
      O => blk00000003_sig00000527
    );
  blk00000003_blk000008c9 : LUT4
    generic map(
      INIT => X"8000"
    )
    port map (
      I0 => blk00000003_sig00000626,
      I1 => blk00000003_sig00000788,
      I2 => blk00000003_sig00000798,
      I3 => blk00000003_sig000001a7,
      O => blk00000003_sig00000528
    );
  blk00000003_blk000008c8 : LUT4
    generic map(
      INIT => X"8000"
    )
    port map (
      I0 => blk00000003_sig00000626,
      I1 => blk00000003_sig00000788,
      I2 => blk00000003_sig00000798,
      I3 => blk00000003_sig000001a9,
      O => blk00000003_sig00000529
    );
  blk00000003_blk000008c7 : LUT4
    generic map(
      INIT => X"8000"
    )
    port map (
      I0 => blk00000003_sig00000626,
      I1 => blk00000003_sig00000788,
      I2 => blk00000003_sig00000798,
      I3 => blk00000003_sig000001ab,
      O => blk00000003_sig0000052a
    );
  blk00000003_blk000008c6 : LUT4
    generic map(
      INIT => X"8000"
    )
    port map (
      I0 => blk00000003_sig00000626,
      I1 => blk00000003_sig00000788,
      I2 => blk00000003_sig00000798,
      I3 => blk00000003_sig000001ad,
      O => blk00000003_sig0000052b
    );
  blk00000003_blk000008c5 : LUT4
    generic map(
      INIT => X"8000"
    )
    port map (
      I0 => blk00000003_sig00000626,
      I1 => blk00000003_sig00000788,
      I2 => blk00000003_sig00000798,
      I3 => blk00000003_sig000001af,
      O => blk00000003_sig0000052c
    );
  blk00000003_blk000008c4 : LUT4
    generic map(
      INIT => X"8000"
    )
    port map (
      I0 => blk00000003_sig00000626,
      I1 => blk00000003_sig00000788,
      I2 => blk00000003_sig00000798,
      I3 => blk00000003_sig000001b1,
      O => blk00000003_sig0000052d
    );
  blk00000003_blk000008c3 : LUT4
    generic map(
      INIT => X"8000"
    )
    port map (
      I0 => blk00000003_sig00000626,
      I1 => blk00000003_sig00000788,
      I2 => blk00000003_sig00000798,
      I3 => blk00000003_sig000001b3,
      O => blk00000003_sig0000052e
    );
  blk00000003_blk000008c2 : LUT4
    generic map(
      INIT => X"8000"
    )
    port map (
      I0 => blk00000003_sig00000626,
      I1 => blk00000003_sig00000788,
      I2 => blk00000003_sig00000798,
      I3 => blk00000003_sig000001b5,
      O => blk00000003_sig0000052f
    );
  blk00000003_blk000008c1 : LUT4
    generic map(
      INIT => X"8000"
    )
    port map (
      I0 => blk00000003_sig00000626,
      I1 => blk00000003_sig00000788,
      I2 => blk00000003_sig00000798,
      I3 => blk00000003_sig000001b7,
      O => blk00000003_sig00000530
    );
  blk00000003_blk000008c0 : LUT4
    generic map(
      INIT => X"8000"
    )
    port map (
      I0 => blk00000003_sig00000626,
      I1 => blk00000003_sig00000788,
      I2 => blk00000003_sig00000798,
      I3 => blk00000003_sig000001b9,
      O => blk00000003_sig00000531
    );
  blk00000003_blk000008bf : LUT4
    generic map(
      INIT => X"8000"
    )
    port map (
      I0 => blk00000003_sig00000626,
      I1 => blk00000003_sig00000788,
      I2 => blk00000003_sig00000798,
      I3 => blk00000003_sig000001bb,
      O => blk00000003_sig00000532
    );
  blk00000003_blk000008be : LUT4
    generic map(
      INIT => X"8000"
    )
    port map (
      I0 => blk00000003_sig00000626,
      I1 => blk00000003_sig00000788,
      I2 => blk00000003_sig00000798,
      I3 => blk00000003_sig000001bd,
      O => blk00000003_sig00000533
    );
  blk00000003_blk000008bd : LUT4
    generic map(
      INIT => X"8000"
    )
    port map (
      I0 => blk00000003_sig00000626,
      I1 => blk00000003_sig00000788,
      I2 => blk00000003_sig00000798,
      I3 => blk00000003_sig000001bf,
      O => blk00000003_sig00000534
    );
  blk00000003_blk000008bc : LUT4
    generic map(
      INIT => X"8000"
    )
    port map (
      I0 => blk00000003_sig00000626,
      I1 => blk00000003_sig00000788,
      I2 => blk00000003_sig00000798,
      I3 => blk00000003_sig000001c5,
      O => blk00000003_sig00000537
    );
  blk00000003_blk000008bb : LUT4
    generic map(
      INIT => X"8000"
    )
    port map (
      I0 => blk00000003_sig00000626,
      I1 => blk00000003_sig00000788,
      I2 => blk00000003_sig00000798,
      I3 => blk00000003_sig000001c1,
      O => blk00000003_sig00000535
    );
  blk00000003_blk000008ba : LUT4
    generic map(
      INIT => X"8000"
    )
    port map (
      I0 => blk00000003_sig00000626,
      I1 => blk00000003_sig00000788,
      I2 => blk00000003_sig00000798,
      I3 => blk00000003_sig000001c3,
      O => blk00000003_sig00000536
    );
  blk00000003_blk000008b9 : LUT4
    generic map(
      INIT => X"8000"
    )
    port map (
      I0 => blk00000003_sig00000626,
      I1 => blk00000003_sig00000788,
      I2 => blk00000003_sig00000798,
      I3 => blk00000003_sig0000028a,
      O => blk00000003_sig000004fa
    );
  blk00000003_blk000008b8 : LUT4
    generic map(
      INIT => X"8000"
    )
    port map (
      I0 => blk00000003_sig00000626,
      I1 => blk00000003_sig00000788,
      I2 => blk00000003_sig00000798,
      I3 => blk00000003_sig0000028c,
      O => blk00000003_sig000004fb
    );
  blk00000003_blk000008b7 : LUT4
    generic map(
      INIT => X"8000"
    )
    port map (
      I0 => blk00000003_sig00000626,
      I1 => blk00000003_sig00000788,
      I2 => blk00000003_sig00000798,
      I3 => blk00000003_sig0000028e,
      O => blk00000003_sig000004fc
    );
  blk00000003_blk000008b6 : LUT4
    generic map(
      INIT => X"8000"
    )
    port map (
      I0 => blk00000003_sig00000626,
      I1 => blk00000003_sig00000788,
      I2 => blk00000003_sig00000798,
      I3 => blk00000003_sig00000290,
      O => blk00000003_sig000004fd
    );
  blk00000003_blk000008b5 : LUT4
    generic map(
      INIT => X"8000"
    )
    port map (
      I0 => blk00000003_sig00000626,
      I1 => blk00000003_sig00000788,
      I2 => blk00000003_sig00000798,
      I3 => blk00000003_sig00000292,
      O => blk00000003_sig000004fe
    );
  blk00000003_blk000008b4 : LUT4
    generic map(
      INIT => X"8000"
    )
    port map (
      I0 => blk00000003_sig00000626,
      I1 => blk00000003_sig00000788,
      I2 => blk00000003_sig00000798,
      I3 => blk00000003_sig00000294,
      O => blk00000003_sig000004ff
    );
  blk00000003_blk000008b3 : LUT4
    generic map(
      INIT => X"8000"
    )
    port map (
      I0 => blk00000003_sig00000626,
      I1 => blk00000003_sig00000788,
      I2 => blk00000003_sig00000798,
      I3 => blk00000003_sig00000296,
      O => blk00000003_sig00000500
    );
  blk00000003_blk000008b2 : LUT4
    generic map(
      INIT => X"8000"
    )
    port map (
      I0 => blk00000003_sig00000626,
      I1 => blk00000003_sig00000788,
      I2 => blk00000003_sig00000798,
      I3 => blk00000003_sig00000298,
      O => blk00000003_sig00000501
    );
  blk00000003_blk000008b1 : LUT4
    generic map(
      INIT => X"8000"
    )
    port map (
      I0 => blk00000003_sig00000626,
      I1 => blk00000003_sig00000788,
      I2 => blk00000003_sig00000798,
      I3 => blk00000003_sig0000029a,
      O => blk00000003_sig00000502
    );
  blk00000003_blk000008b0 : LUT4
    generic map(
      INIT => X"8000"
    )
    port map (
      I0 => blk00000003_sig00000626,
      I1 => blk00000003_sig00000788,
      I2 => blk00000003_sig00000798,
      I3 => blk00000003_sig0000029c,
      O => blk00000003_sig00000503
    );
  blk00000003_blk000008af : LUT4
    generic map(
      INIT => X"8000"
    )
    port map (
      I0 => blk00000003_sig00000626,
      I1 => blk00000003_sig00000788,
      I2 => blk00000003_sig00000798,
      I3 => blk00000003_sig0000029e,
      O => blk00000003_sig00000504
    );
  blk00000003_blk000008ae : LUT4
    generic map(
      INIT => X"8000"
    )
    port map (
      I0 => blk00000003_sig00000626,
      I1 => blk00000003_sig00000788,
      I2 => blk00000003_sig00000798,
      I3 => blk00000003_sig000002a0,
      O => blk00000003_sig00000505
    );
  blk00000003_blk000008ad : LUT4
    generic map(
      INIT => X"8000"
    )
    port map (
      I0 => blk00000003_sig00000626,
      I1 => blk00000003_sig00000788,
      I2 => blk00000003_sig00000798,
      I3 => blk00000003_sig000002a2,
      O => blk00000003_sig00000506
    );
  blk00000003_blk000008ac : LUT4
    generic map(
      INIT => X"8000"
    )
    port map (
      I0 => blk00000003_sig00000626,
      I1 => blk00000003_sig00000788,
      I2 => blk00000003_sig00000798,
      I3 => blk00000003_sig000002a4,
      O => blk00000003_sig00000507
    );
  blk00000003_blk000008ab : LUT4
    generic map(
      INIT => X"8000"
    )
    port map (
      I0 => blk00000003_sig00000626,
      I1 => blk00000003_sig00000788,
      I2 => blk00000003_sig00000798,
      I3 => blk00000003_sig000002a6,
      O => blk00000003_sig00000508
    );
  blk00000003_blk000008aa : LUT4
    generic map(
      INIT => X"8000"
    )
    port map (
      I0 => blk00000003_sig00000626,
      I1 => blk00000003_sig00000788,
      I2 => blk00000003_sig00000798,
      I3 => blk00000003_sig000002a8,
      O => blk00000003_sig00000509
    );
  blk00000003_blk000008a9 : LUT4
    generic map(
      INIT => X"8000"
    )
    port map (
      I0 => blk00000003_sig00000626,
      I1 => blk00000003_sig00000788,
      I2 => blk00000003_sig00000798,
      I3 => blk00000003_sig000002aa,
      O => blk00000003_sig0000050a
    );
  blk00000003_blk000008a8 : LUT4
    generic map(
      INIT => X"8000"
    )
    port map (
      I0 => blk00000003_sig00000626,
      I1 => blk00000003_sig00000788,
      I2 => blk00000003_sig00000798,
      I3 => blk00000003_sig000002ac,
      O => blk00000003_sig0000050b
    );
  blk00000003_blk000008a7 : LUT4
    generic map(
      INIT => X"8000"
    )
    port map (
      I0 => blk00000003_sig00000626,
      I1 => blk00000003_sig00000788,
      I2 => blk00000003_sig00000798,
      I3 => blk00000003_sig000002ae,
      O => blk00000003_sig0000050c
    );
  blk00000003_blk000008a6 : LUT4
    generic map(
      INIT => X"8000"
    )
    port map (
      I0 => blk00000003_sig00000626,
      I1 => blk00000003_sig00000788,
      I2 => blk00000003_sig00000798,
      I3 => blk00000003_sig000002b0,
      O => blk00000003_sig0000050d
    );
  blk00000003_blk000008a5 : LUT4
    generic map(
      INIT => X"8000"
    )
    port map (
      I0 => blk00000003_sig00000626,
      I1 => blk00000003_sig00000788,
      I2 => blk00000003_sig00000798,
      I3 => blk00000003_sig000002b2,
      O => blk00000003_sig0000050e
    );
  blk00000003_blk000008a4 : LUT4
    generic map(
      INIT => X"8000"
    )
    port map (
      I0 => blk00000003_sig00000626,
      I1 => blk00000003_sig00000788,
      I2 => blk00000003_sig00000798,
      I3 => blk00000003_sig000002b4,
      O => blk00000003_sig0000050f
    );
  blk00000003_blk000008a3 : LUT4
    generic map(
      INIT => X"8000"
    )
    port map (
      I0 => blk00000003_sig00000626,
      I1 => blk00000003_sig00000788,
      I2 => blk00000003_sig00000798,
      I3 => blk00000003_sig000002b6,
      O => blk00000003_sig00000510
    );
  blk00000003_blk000008a2 : LUT4
    generic map(
      INIT => X"8000"
    )
    port map (
      I0 => blk00000003_sig00000626,
      I1 => blk00000003_sig00000788,
      I2 => blk00000003_sig00000798,
      I3 => blk00000003_sig000002b8,
      O => blk00000003_sig00000511
    );
  blk00000003_blk000008a1 : LUT4
    generic map(
      INIT => X"8000"
    )
    port map (
      I0 => blk00000003_sig00000626,
      I1 => blk00000003_sig00000788,
      I2 => blk00000003_sig00000798,
      I3 => blk00000003_sig000002ba,
      O => blk00000003_sig00000512
    );
  blk00000003_blk000008a0 : LUT4
    generic map(
      INIT => X"8000"
    )
    port map (
      I0 => blk00000003_sig00000626,
      I1 => blk00000003_sig00000788,
      I2 => blk00000003_sig00000798,
      I3 => blk00000003_sig000002bc,
      O => blk00000003_sig00000513
    );
  blk00000003_blk0000089f : LUT4
    generic map(
      INIT => X"8000"
    )
    port map (
      I0 => blk00000003_sig00000626,
      I1 => blk00000003_sig00000788,
      I2 => blk00000003_sig00000798,
      I3 => blk00000003_sig000002be,
      O => blk00000003_sig00000514
    );
  blk00000003_blk0000089e : LUT4
    generic map(
      INIT => X"8000"
    )
    port map (
      I0 => blk00000003_sig00000626,
      I1 => blk00000003_sig00000788,
      I2 => blk00000003_sig00000798,
      I3 => blk00000003_sig000002c0,
      O => blk00000003_sig00000515
    );
  blk00000003_blk0000089d : LUT4
    generic map(
      INIT => X"8000"
    )
    port map (
      I0 => blk00000003_sig00000626,
      I1 => blk00000003_sig00000788,
      I2 => blk00000003_sig00000798,
      I3 => blk00000003_sig000002c6,
      O => blk00000003_sig00000518
    );
  blk00000003_blk0000089c : LUT4
    generic map(
      INIT => X"8000"
    )
    port map (
      I0 => blk00000003_sig00000626,
      I1 => blk00000003_sig00000788,
      I2 => blk00000003_sig00000798,
      I3 => blk00000003_sig000002c2,
      O => blk00000003_sig00000516
    );
  blk00000003_blk0000089b : LUT4
    generic map(
      INIT => X"8000"
    )
    port map (
      I0 => blk00000003_sig00000626,
      I1 => blk00000003_sig00000788,
      I2 => blk00000003_sig00000798,
      I3 => blk00000003_sig000002c4,
      O => blk00000003_sig00000517
    );
  blk00000003_blk0000089a : LUT4
    generic map(
      INIT => X"EA2A"
    )
    port map (
      I0 => blk00000003_sig00000878,
      I1 => ce,
      I2 => fwd_inv_we,
      I3 => fwd_inv,
      O => blk00000003_sig00000877
    );
  blk00000003_blk00000899 : LUT4
    generic map(
      INIT => X"EA2A"
    )
    port map (
      I0 => blk00000003_sig0000086f,
      I1 => ce,
      I2 => blk00000003_sig00000624,
      I3 => blk00000003_sig00000878,
      O => blk00000003_sig00000876
    );
  blk00000003_blk00000898 : LUT4
    generic map(
      INIT => X"FFFE"
    )
    port map (
      I0 => blk00000003_sig0000062c,
      I1 => blk00000003_sig00000628,
      I2 => blk00000003_sig00000623,
      I3 => blk00000003_sig00000655,
      O => blk00000003_sig00000669
    );
  blk00000003_blk00000897 : LUT5
    generic map(
      INIT => X"04540444"
    )
    port map (
      I0 => sclr,
      I1 => blk00000003_sig00000694,
      I2 => ce,
      I3 => blk00000003_sig000006bd,
      I4 => blk00000003_sig0000062c,
      O => blk00000003_sig0000087e
    );
  blk00000003_blk00000896 : LUT6
    generic map(
      INIT => X"5555511144444000"
    )
    port map (
      I0 => blk00000003_sig000006bd,
      I1 => ce,
      I2 => blk00000003_sig0000064e,
      I3 => blk00000003_sig00000694,
      I4 => blk00000003_sig0000062c,
      I5 => blk00000003_sig0000069a,
      O => blk00000003_sig0000087a
    );
  blk00000003_blk00000895 : LUT4
    generic map(
      INIT => X"A820"
    )
    port map (
      I0 => blk00000003_sig00000881,
      I1 => ce,
      I2 => blk00000003_sig00000873,
      I3 => blk00000003_sig00000784,
      O => blk00000003_sig0000087f
    );
  blk00000003_blk00000894 : LUT5
    generic map(
      INIT => X"54101010"
    )
    port map (
      I0 => sclr,
      I1 => ce,
      I2 => blk00000003_sig00000881,
      I3 => blk00000003_sig00000788,
      I4 => blk00000003_sig00000626,
      O => blk00000003_sig00000880
    );
  blk00000003_blk00000893 : LUT5
    generic map(
      INIT => X"15051000"
    )
    port map (
      I0 => sclr,
      I1 => blk00000003_sig00000711,
      I2 => ce,
      I3 => blk00000003_sig00000708,
      I4 => blk00000003_sig0000070b,
      O => blk00000003_sig0000087d
    );
  blk00000003_blk00000892 : LUT5
    generic map(
      INIT => X"04540444"
    )
    port map (
      I0 => sclr,
      I1 => blk00000003_sig00000787,
      I2 => ce,
      I3 => blk00000003_sig0000064e,
      I4 => blk00000003_sig00000628,
      O => blk00000003_sig00000882
    );
  blk00000003_blk00000891 : LUT6
    generic map(
      INIT => X"0454044404440444"
    )
    port map (
      I0 => sclr,
      I1 => blk00000003_sig0000070c,
      I2 => ce,
      I3 => blk00000003_sig000006ee,
      I4 => blk00000003_sig0000064a,
      I5 => blk00000003_sig0000062e,
      O => blk00000003_sig0000087c
    );
  blk00000003_blk00000890 : LUT6
    generic map(
      INIT => X"5404544444044444"
    )
    port map (
      I0 => sclr,
      I1 => NlwRenamedSig_OI_rfd,
      I2 => ce,
      I3 => blk00000003_sig00000631,
      I4 => blk00000003_sig0000064c,
      I5 => start,
      O => blk00000003_sig00000883
    );
  blk00000003_blk0000088f : LUT4
    generic map(
      INIT => X"FFFE"
    )
    port map (
      I0 => blk00000003_sig00000623,
      I1 => blk00000003_sig00000628,
      I2 => blk00000003_sig00000654,
      I3 => blk00000003_sig0000062c,
      O => blk00000003_sig0000066a
    );
  blk00000003_blk0000088e : LUT4
    generic map(
      INIT => X"FFFE"
    )
    port map (
      I0 => blk00000003_sig00000623,
      I1 => blk00000003_sig00000628,
      I2 => blk00000003_sig00000653,
      I3 => blk00000003_sig0000062c,
      O => blk00000003_sig0000066b
    );
  blk00000003_blk0000088d : LUT4
    generic map(
      INIT => X"FFFE"
    )
    port map (
      I0 => blk00000003_sig00000623,
      I1 => blk00000003_sig00000628,
      I2 => blk00000003_sig00000652,
      I3 => blk00000003_sig0000062c,
      O => blk00000003_sig0000066c
    );
  blk00000003_blk0000088c : LUT4
    generic map(
      INIT => X"FFFE"
    )
    port map (
      I0 => blk00000003_sig00000623,
      I1 => blk00000003_sig00000628,
      I2 => blk00000003_sig00000651,
      I3 => blk00000003_sig0000062c,
      O => blk00000003_sig0000066d
    );
  blk00000003_blk0000088b : LUT4
    generic map(
      INIT => X"FFFE"
    )
    port map (
      I0 => blk00000003_sig00000623,
      I1 => blk00000003_sig00000628,
      I2 => blk00000003_sig00000650,
      I3 => blk00000003_sig0000062c,
      O => blk00000003_sig0000066e
    );
  blk00000003_blk0000088a : LUT4
    generic map(
      INIT => X"FFFE"
    )
    port map (
      I0 => blk00000003_sig00000623,
      I1 => blk00000003_sig00000628,
      I2 => blk00000003_sig00000662,
      I3 => blk00000003_sig0000062c,
      O => blk00000003_sig0000066f
    );
  blk00000003_blk00000889 : LUT4
    generic map(
      INIT => X"FFFE"
    )
    port map (
      I0 => blk00000003_sig00000623,
      I1 => blk00000003_sig00000628,
      I2 => blk00000003_sig00000660,
      I3 => blk00000003_sig0000062c,
      O => blk00000003_sig00000670
    );
  blk00000003_blk00000888 : LUT4
    generic map(
      INIT => X"FFFE"
    )
    port map (
      I0 => blk00000003_sig00000623,
      I1 => blk00000003_sig00000628,
      I2 => blk00000003_sig0000065e,
      I3 => blk00000003_sig0000062c,
      O => blk00000003_sig00000671
    );
  blk00000003_blk00000887 : LUT4
    generic map(
      INIT => X"FFFE"
    )
    port map (
      I0 => blk00000003_sig00000623,
      I1 => blk00000003_sig00000628,
      I2 => blk00000003_sig0000065c,
      I3 => blk00000003_sig0000062c,
      O => blk00000003_sig00000672
    );
  blk00000003_blk00000886 : LUT4
    generic map(
      INIT => X"FFFE"
    )
    port map (
      I0 => blk00000003_sig00000623,
      I1 => blk00000003_sig00000628,
      I2 => blk00000003_sig0000065a,
      I3 => blk00000003_sig0000062c,
      O => blk00000003_sig00000673
    );
  blk00000003_blk00000885 : LUT4
    generic map(
      INIT => X"FFFE"
    )
    port map (
      I0 => blk00000003_sig00000658,
      I1 => blk00000003_sig00000623,
      I2 => blk00000003_sig00000628,
      I3 => blk00000003_sig0000062c,
      O => blk00000003_sig00000674
    );
  blk00000003_blk00000884 : FD
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      D => blk00000003_sig00000883,
      Q => NlwRenamedSig_OI_rfd
    );
  blk00000003_blk00000883 : FD
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      D => blk00000003_sig00000882,
      Q => blk00000003_sig00000787
    );
  blk00000003_blk00000882 : FD
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      D => blk00000003_sig00000880,
      Q => blk00000003_sig00000881
    );
  blk00000003_blk00000881 : FD
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      D => blk00000003_sig0000087f,
      Q => blk00000003_sig00000873
    );
  blk00000003_blk00000880 : FD
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      D => blk00000003_sig0000087e,
      Q => blk00000003_sig00000694
    );
  blk00000003_blk0000087f : FD
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      D => blk00000003_sig0000087d,
      Q => blk00000003_sig0000070b
    );
  blk00000003_blk0000087e : FD
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      D => blk00000003_sig0000087c,
      Q => blk00000003_sig0000070c
    );
  blk00000003_blk0000087d : FD
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      D => blk00000003_sig0000087b,
      Q => blk00000003_sig00000696
    );
  blk00000003_blk0000087c : FD
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      D => blk00000003_sig0000087a,
      Q => blk00000003_sig0000069a
    );
  blk00000003_blk0000087b : LUT3
    generic map(
      INIT => X"D8"
    )
    port map (
      I0 => ce,
      I1 => blk00000003_sig0000077e,
      I2 => blk00000003_sig00000696,
      O => blk00000003_sig00000879
    );
  blk00000003_blk0000087a : FDS
    generic map(
      INIT => '1'
    )
    port map (
      C => clk,
      D => blk00000003_sig00000877,
      S => sclr,
      Q => blk00000003_sig00000878
    );
  blk00000003_blk00000879 : FDS
    generic map(
      INIT => '1'
    )
    port map (
      C => clk,
      D => blk00000003_sig00000876,
      S => sclr,
      Q => blk00000003_sig0000086f
    );
  blk00000003_blk00000878 : LUT3
    generic map(
      INIT => X"F8"
    )
    port map (
      I0 => blk00000003_sig00000835,
      I1 => blk00000003_sig00000820,
      I2 => blk00000003_sig00000875,
      O => blk00000003_sig00000800
    );
  blk00000003_blk00000877 : LUT3
    generic map(
      INIT => X"F2"
    )
    port map (
      I0 => blk00000003_sig00000835,
      I1 => blk00000003_sig00000820,
      I2 => blk00000003_sig00000874,
      O => blk00000003_sig000007e0
    );
  blk00000003_blk00000876 : LUT2
    generic map(
      INIT => X"6"
    )
    port map (
      I0 => blk00000003_sig000006b8,
      I1 => blk00000003_sig000006b5,
      O => blk00000003_sig000007a6
    );
  blk00000003_blk00000875 : LUT2
    generic map(
      INIT => X"9"
    )
    port map (
      I0 => blk00000003_sig000006b8,
      I1 => blk00000003_sig000006b5,
      O => blk00000003_sig000007c3
    );
  blk00000003_blk00000874 : LUT2
    generic map(
      INIT => X"6"
    )
    port map (
      I0 => blk00000003_sig000006b8,
      I1 => blk00000003_sig000006b2,
      O => blk00000003_sig000007a9
    );
  blk00000003_blk00000873 : LUT2
    generic map(
      INIT => X"9"
    )
    port map (
      I0 => blk00000003_sig000006b8,
      I1 => blk00000003_sig000006b2,
      O => blk00000003_sig000007c6
    );
  blk00000003_blk00000872 : LUT2
    generic map(
      INIT => X"6"
    )
    port map (
      I0 => blk00000003_sig000006b8,
      I1 => blk00000003_sig000006af,
      O => blk00000003_sig000007ac
    );
  blk00000003_blk00000871 : LUT2
    generic map(
      INIT => X"9"
    )
    port map (
      I0 => blk00000003_sig000006b8,
      I1 => blk00000003_sig000006af,
      O => blk00000003_sig000007c9
    );
  blk00000003_blk00000870 : LUT2
    generic map(
      INIT => X"6"
    )
    port map (
      I0 => blk00000003_sig000006b8,
      I1 => blk00000003_sig000006ac,
      O => blk00000003_sig000007af
    );
  blk00000003_blk0000086f : LUT2
    generic map(
      INIT => X"9"
    )
    port map (
      I0 => blk00000003_sig000006b8,
      I1 => blk00000003_sig000006ac,
      O => blk00000003_sig000007cc
    );
  blk00000003_blk0000086e : LUT2
    generic map(
      INIT => X"6"
    )
    port map (
      I0 => blk00000003_sig000006b8,
      I1 => blk00000003_sig000006a9,
      O => blk00000003_sig000007b2
    );
  blk00000003_blk0000086d : LUT2
    generic map(
      INIT => X"9"
    )
    port map (
      I0 => blk00000003_sig000006b8,
      I1 => blk00000003_sig000006a9,
      O => blk00000003_sig000007cf
    );
  blk00000003_blk0000086c : LUT2
    generic map(
      INIT => X"6"
    )
    port map (
      I0 => blk00000003_sig000006b8,
      I1 => blk00000003_sig000006a6,
      O => blk00000003_sig000007b5
    );
  blk00000003_blk0000086b : LUT2
    generic map(
      INIT => X"9"
    )
    port map (
      I0 => blk00000003_sig000006b8,
      I1 => blk00000003_sig000006a6,
      O => blk00000003_sig000007d2
    );
  blk00000003_blk0000086a : LUT2
    generic map(
      INIT => X"6"
    )
    port map (
      I0 => blk00000003_sig000006b8,
      I1 => blk00000003_sig000006a3,
      O => blk00000003_sig000007b8
    );
  blk00000003_blk00000869 : LUT2
    generic map(
      INIT => X"9"
    )
    port map (
      I0 => blk00000003_sig000006b8,
      I1 => blk00000003_sig000006a3,
      O => blk00000003_sig000007d5
    );
  blk00000003_blk00000868 : LUT2
    generic map(
      INIT => X"6"
    )
    port map (
      I0 => blk00000003_sig000006b8,
      I1 => blk00000003_sig000006a0,
      O => blk00000003_sig000007bb
    );
  blk00000003_blk00000867 : LUT2
    generic map(
      INIT => X"9"
    )
    port map (
      I0 => blk00000003_sig000006b8,
      I1 => blk00000003_sig000006a0,
      O => blk00000003_sig000007d8
    );
  blk00000003_blk00000866 : LUT2
    generic map(
      INIT => X"6"
    )
    port map (
      I0 => blk00000003_sig000006b8,
      I1 => blk00000003_sig0000069d,
      O => blk00000003_sig000007be
    );
  blk00000003_blk00000865 : LUT2
    generic map(
      INIT => X"9"
    )
    port map (
      I0 => blk00000003_sig000006b8,
      I1 => blk00000003_sig0000069d,
      O => blk00000003_sig000007db
    );
  blk00000003_blk00000864 : LUT2
    generic map(
      INIT => X"9"
    )
    port map (
      I0 => blk00000003_sig00000698,
      I1 => blk00000003_sig000006b8,
      O => blk00000003_sig000007dd
    );
  blk00000003_blk00000863 : LUT2
    generic map(
      INIT => X"8"
    )
    port map (
      I0 => NlwRenamedSig_OI_rfd,
      I1 => blk00000003_sig0000064c,
      O => blk00000003_sig00000785
    );
  blk00000003_blk00000862 : LUT2
    generic map(
      INIT => X"E"
    )
    port map (
      I0 => blk00000003_sig0000062c,
      I1 => blk00000003_sig00000798,
      O => blk00000003_sig00000797
    );
  blk00000003_blk00000861 : LUT4
    generic map(
      INIT => X"FFEF"
    )
    port map (
      I0 => NlwRenamedSig_OI_xn_index(8),
      I1 => blk00000003_sig0000064c,
      I2 => NlwRenamedSig_OI_rfd,
      I3 => blk00000003_sig00000631,
      O => blk00000003_sig0000079c
    );
  blk00000003_blk00000860 : LUT4
    generic map(
      INIT => X"FFEF"
    )
    port map (
      I0 => NlwRenamedSig_OI_xn_index(9),
      I1 => blk00000003_sig0000064c,
      I2 => NlwRenamedSig_OI_rfd,
      I3 => blk00000003_sig00000631,
      O => blk00000003_sig0000079b
    );
  blk00000003_blk0000085f : LUT4
    generic map(
      INIT => X"FFEF"
    )
    port map (
      I0 => NlwRenamedSig_OI_xn_index(7),
      I1 => blk00000003_sig0000064c,
      I2 => NlwRenamedSig_OI_rfd,
      I3 => blk00000003_sig00000631,
      O => blk00000003_sig0000079d
    );
  blk00000003_blk0000085e : LUT4
    generic map(
      INIT => X"FFEF"
    )
    port map (
      I0 => NlwRenamedSig_OI_xn_index(5),
      I1 => blk00000003_sig0000064c,
      I2 => NlwRenamedSig_OI_rfd,
      I3 => blk00000003_sig00000631,
      O => blk00000003_sig0000079f
    );
  blk00000003_blk0000085d : LUT4
    generic map(
      INIT => X"FFEF"
    )
    port map (
      I0 => NlwRenamedSig_OI_xn_index(6),
      I1 => blk00000003_sig0000064c,
      I2 => NlwRenamedSig_OI_rfd,
      I3 => blk00000003_sig00000631,
      O => blk00000003_sig0000079e
    );
  blk00000003_blk0000085c : LUT4
    generic map(
      INIT => X"FFEF"
    )
    port map (
      I0 => NlwRenamedSig_OI_xn_index(4),
      I1 => blk00000003_sig0000064c,
      I2 => NlwRenamedSig_OI_rfd,
      I3 => blk00000003_sig00000631,
      O => blk00000003_sig000007a0
    );
  blk00000003_blk0000085b : LUT4
    generic map(
      INIT => X"FFEF"
    )
    port map (
      I0 => NlwRenamedSig_OI_xn_index(2),
      I1 => blk00000003_sig0000064c,
      I2 => NlwRenamedSig_OI_rfd,
      I3 => blk00000003_sig00000631,
      O => blk00000003_sig000007a2
    );
  blk00000003_blk0000085a : LUT4
    generic map(
      INIT => X"FFEF"
    )
    port map (
      I0 => NlwRenamedSig_OI_xn_index(3),
      I1 => blk00000003_sig0000064c,
      I2 => NlwRenamedSig_OI_rfd,
      I3 => blk00000003_sig00000631,
      O => blk00000003_sig000007a1
    );
  blk00000003_blk00000859 : LUT4
    generic map(
      INIT => X"FFFD"
    )
    port map (
      I0 => NlwRenamedSig_OI_rfd,
      I1 => NlwRenamedSig_OI_xn_index(11),
      I2 => blk00000003_sig00000631,
      I3 => blk00000003_sig0000064c,
      O => blk00000003_sig00000799
    );
  blk00000003_blk00000858 : LUT4
    generic map(
      INIT => X"FFEF"
    )
    port map (
      I0 => NlwRenamedSig_OI_xn_index(1),
      I1 => blk00000003_sig0000064c,
      I2 => NlwRenamedSig_OI_rfd,
      I3 => blk00000003_sig00000631,
      O => blk00000003_sig000007a3
    );
  blk00000003_blk00000857 : LUT4
    generic map(
      INIT => X"FFEF"
    )
    port map (
      I0 => NlwRenamedSig_OI_xn_index(10),
      I1 => blk00000003_sig0000064c,
      I2 => NlwRenamedSig_OI_rfd,
      I3 => blk00000003_sig00000631,
      O => blk00000003_sig0000079a
    );
  blk00000003_blk00000856 : LUT4
    generic map(
      INIT => X"FFEF"
    )
    port map (
      I0 => NlwRenamedSig_OI_xn_index(0),
      I1 => blk00000003_sig0000064c,
      I2 => NlwRenamedSig_OI_rfd,
      I3 => blk00000003_sig00000631,
      O => blk00000003_sig000007a4
    );
  blk00000003_blk00000855 : LUT3
    generic map(
      INIT => X"80"
    )
    port map (
      I0 => blk00000003_sig00000626,
      I1 => blk00000003_sig00000788,
      I2 => blk00000003_sig00000798,
      O => blk00000003_sig00000796
    );
  blk00000003_blk00000854 : LUT5
    generic map(
      INIT => X"AEEEEEEE"
    )
    port map (
      I0 => sclr,
      I1 => ce,
      I2 => blk00000003_sig00000798,
      I3 => blk00000003_sig00000788,
      I4 => blk00000003_sig00000626,
      O => blk00000003_sig0000078a
    );
  blk00000003_blk00000853 : LUT2
    generic map(
      INIT => X"8"
    )
    port map (
      I0 => blk00000003_sig000006e6,
      I1 => blk00000003_sig000006e4,
      O => blk00000003_sig00000677
    );
  blk00000003_blk00000852 : LUT2
    generic map(
      INIT => X"4"
    )
    port map (
      I0 => blk00000003_sig0000077f,
      I1 => blk00000003_sig00000711,
      O => blk00000003_sig00000710
    );
  blk00000003_blk00000851 : LUT4
    generic map(
      INIT => X"0001"
    )
    port map (
      I0 => blk00000003_sig000006ea,
      I1 => blk00000003_sig000006e8,
      I2 => blk00000003_sig000006e6,
      I3 => blk00000003_sig000006e4,
      O => blk00000003_sig0000070d
    );
  blk00000003_blk00000850 : LUT2
    generic map(
      INIT => X"4"
    )
    port map (
      I0 => blk00000003_sig000006e8,
      I1 => blk00000003_sig000006ea,
      O => blk00000003_sig00000679
    );
  blk00000003_blk0000084f : LUT3
    generic map(
      INIT => X"40"
    )
    port map (
      I0 => blk00000003_sig000006e8,
      I1 => blk00000003_sig000006ea,
      I2 => blk00000003_sig000006e6,
      O => blk00000003_sig000006cd
    );
  blk00000003_blk0000084e : LUT4
    generic map(
      INIT => X"2220"
    )
    port map (
      I0 => blk00000003_sig000006ea,
      I1 => blk00000003_sig000006e8,
      I2 => blk00000003_sig000006e4,
      I3 => blk00000003_sig000006e6,
      O => blk00000003_sig000006cf
    );
  blk00000003_blk0000084d : LUT3
    generic map(
      INIT => X"A2"
    )
    port map (
      I0 => ce,
      I1 => blk00000003_sig000006c9,
      I2 => blk00000003_sig000006ca,
      O => blk00000003_sig00000693
    );
  blk00000003_blk0000084c : LUT3
    generic map(
      INIT => X"A2"
    )
    port map (
      I0 => ce,
      I1 => blk00000003_sig000006be,
      I2 => blk00000003_sig000006cc,
      O => blk00000003_sig00000692
    );
  blk00000003_blk0000084b : LUT3
    generic map(
      INIT => X"A2"
    )
    port map (
      I0 => ce,
      I1 => blk00000003_sig000006bf,
      I2 => blk00000003_sig000006ce,
      O => blk00000003_sig00000690
    );
  blk00000003_blk0000084a : LUT3
    generic map(
      INIT => X"A2"
    )
    port map (
      I0 => ce,
      I1 => blk00000003_sig000006c0,
      I2 => blk00000003_sig000006d0,
      O => blk00000003_sig0000068e
    );
  blk00000003_blk00000849 : LUT3
    generic map(
      INIT => X"A2"
    )
    port map (
      I0 => ce,
      I1 => blk00000003_sig000006c1,
      I2 => blk00000003_sig000006d1,
      O => blk00000003_sig0000068c
    );
  blk00000003_blk00000848 : LUT3
    generic map(
      INIT => X"A2"
    )
    port map (
      I0 => ce,
      I1 => blk00000003_sig000006c2,
      I2 => blk00000003_sig000006d3,
      O => blk00000003_sig0000068a
    );
  blk00000003_blk00000847 : LUT3
    generic map(
      INIT => X"A2"
    )
    port map (
      I0 => ce,
      I1 => blk00000003_sig000006c3,
      I2 => blk00000003_sig000006d5,
      O => blk00000003_sig00000688
    );
  blk00000003_blk00000846 : LUT3
    generic map(
      INIT => X"A2"
    )
    port map (
      I0 => ce,
      I1 => blk00000003_sig000006c4,
      I2 => blk00000003_sig000006d7,
      O => blk00000003_sig00000686
    );
  blk00000003_blk00000845 : LUT3
    generic map(
      INIT => X"A2"
    )
    port map (
      I0 => ce,
      I1 => blk00000003_sig000006c5,
      I2 => blk00000003_sig000006d9,
      O => blk00000003_sig00000684
    );
  blk00000003_blk00000844 : LUT3
    generic map(
      INIT => X"A2"
    )
    port map (
      I0 => ce,
      I1 => blk00000003_sig000006c6,
      I2 => blk00000003_sig000006db,
      O => blk00000003_sig00000682
    );
  blk00000003_blk00000843 : LUT3
    generic map(
      INIT => X"A2"
    )
    port map (
      I0 => ce,
      I1 => blk00000003_sig000006c7,
      I2 => blk00000003_sig000006dd,
      O => blk00000003_sig00000680
    );
  blk00000003_blk00000842 : LUT3
    generic map(
      INIT => X"A2"
    )
    port map (
      I0 => ce,
      I1 => blk00000003_sig000006c8,
      I2 => blk00000003_sig000006df,
      O => blk00000003_sig0000067e
    );
  blk00000003_blk00000841 : LUT4
    generic map(
      INIT => X"FFA8"
    )
    port map (
      I0 => ce,
      I1 => blk00000003_sig0000064e,
      I2 => blk00000003_sig0000062c,
      I3 => sclr,
      O => blk00000003_sig000006e2
    );
  blk00000003_blk00000840 : LUT3
    generic map(
      INIT => X"5E"
    )
    port map (
      I0 => blk00000003_sig000006e8,
      I1 => blk00000003_sig000006e6,
      I2 => blk00000003_sig000006ea,
      O => blk00000003_sig000006dc
    );
  blk00000003_blk0000083f : LUT2
    generic map(
      INIT => X"6"
    )
    port map (
      I0 => blk00000003_sig000006e8,
      I1 => blk00000003_sig000006ea,
      O => blk00000003_sig000006d8
    );
  blk00000003_blk0000083e : LUT4
    generic map(
      INIT => X"6664"
    )
    port map (
      I0 => blk00000003_sig000006e8,
      I1 => blk00000003_sig000006ea,
      I2 => blk00000003_sig000006e4,
      I3 => blk00000003_sig000006e6,
      O => blk00000003_sig000006d6
    );
  blk00000003_blk0000083d : LUT4
    generic map(
      INIT => X"55FE"
    )
    port map (
      I0 => blk00000003_sig000006e8,
      I1 => blk00000003_sig000006e6,
      I2 => blk00000003_sig000006e4,
      I3 => blk00000003_sig000006ea,
      O => blk00000003_sig000006de
    );
  blk00000003_blk0000083c : LUT4
    generic map(
      INIT => X"7666"
    )
    port map (
      I0 => blk00000003_sig000006e8,
      I1 => blk00000003_sig000006ea,
      I2 => blk00000003_sig000006e4,
      I3 => blk00000003_sig000006e6,
      O => blk00000003_sig000006da
    );
  blk00000003_blk0000083b : LUT4
    generic map(
      INIT => X"6222"
    )
    port map (
      I0 => blk00000003_sig000006ea,
      I1 => blk00000003_sig000006e8,
      I2 => blk00000003_sig000006e4,
      I3 => blk00000003_sig000006e6,
      O => blk00000003_sig000006d2
    );
  blk00000003_blk0000083a : LUT3
    generic map(
      INIT => X"62"
    )
    port map (
      I0 => blk00000003_sig000006ea,
      I1 => blk00000003_sig000006e8,
      I2 => blk00000003_sig000006e6,
      O => blk00000003_sig000006d4
    );
  blk00000003_blk00000839 : LUT3
    generic map(
      INIT => X"FE"
    )
    port map (
      I0 => blk00000003_sig0000062c,
      I1 => sclr,
      I2 => blk00000003_sig000006ea,
      O => blk00000003_sig00000780
    );
  blk00000003_blk00000838 : LUT3
    generic map(
      INIT => X"FE"
    )
    port map (
      I0 => sclr,
      I1 => blk00000003_sig000006e8,
      I2 => blk00000003_sig0000062c,
      O => blk00000003_sig00000781
    );
  blk00000003_blk00000837 : LUT3
    generic map(
      INIT => X"FE"
    )
    port map (
      I0 => sclr,
      I1 => blk00000003_sig0000062c,
      I2 => blk00000003_sig000006e6,
      O => blk00000003_sig00000782
    );
  blk00000003_blk00000836 : LUT3
    generic map(
      INIT => X"FE"
    )
    port map (
      I0 => sclr,
      I1 => blk00000003_sig0000062c,
      I2 => blk00000003_sig000006e4,
      O => blk00000003_sig00000783
    );
  blk00000003_blk00000835 : LUT4
    generic map(
      INIT => X"2202"
    )
    port map (
      I0 => ce,
      I1 => blk00000003_sig00000631,
      I2 => blk00000003_sig0000062a,
      I3 => blk00000003_sig00000694,
      O => blk00000003_sig00000656
    );
  blk00000003_blk00000834 : LUT6
    generic map(
      INIT => X"2000000000000000"
    )
    port map (
      I0 => blk00000003_sig00000658,
      I1 => blk00000003_sig0000065a,
      I2 => blk00000003_sig0000065c,
      I3 => blk00000003_sig00000662,
      I4 => blk00000003_sig0000065e,
      I5 => blk00000003_sig00000660,
      O => blk00000003_sig0000063a
    );
  blk00000003_blk00000833 : LUT6
    generic map(
      INIT => X"4000000000000000"
    )
    port map (
      I0 => blk00000003_sig00000658,
      I1 => blk00000003_sig00000660,
      I2 => blk00000003_sig0000065e,
      I3 => blk00000003_sig00000662,
      I4 => blk00000003_sig0000065a,
      I5 => blk00000003_sig0000065c,
      O => blk00000003_sig0000063c
    );
  blk00000003_blk00000832 : LUT6
    generic map(
      INIT => X"0000000040000000"
    )
    port map (
      I0 => blk00000003_sig00000658,
      I1 => blk00000003_sig00000660,
      I2 => blk00000003_sig0000065e,
      I3 => blk00000003_sig00000662,
      I4 => blk00000003_sig0000065a,
      I5 => blk00000003_sig0000065c,
      O => blk00000003_sig00000638
    );
  blk00000003_blk00000831 : LUT2
    generic map(
      INIT => X"8"
    )
    port map (
      I0 => blk00000003_sig00000631,
      I1 => start,
      O => blk00000003_sig0000062f
    );
  blk00000003_blk00000830 : LUT3
    generic map(
      INIT => X"40"
    )
    port map (
      I0 => blk00000003_sig0000061f,
      I1 => blk00000003_sig0000062a,
      I2 => unload,
      O => blk00000003_sig00000627
    );
  blk00000003_blk0000082f : LUT2
    generic map(
      INIT => X"8"
    )
    port map (
      I0 => blk00000003_sig0000062e,
      I1 => blk00000003_sig00000786,
      O => blk00000003_sig0000062b
    );
  blk00000003_blk0000082e : LUT3
    generic map(
      INIT => X"F2"
    )
    port map (
      I0 => blk00000003_sig0000062e,
      I1 => blk00000003_sig00000786,
      I2 => blk00000003_sig00000623,
      O => blk00000003_sig0000062d
    );
  blk00000003_blk0000082d : LUT3
    generic map(
      INIT => X"F2"
    )
    port map (
      I0 => blk00000003_sig00000626,
      I1 => blk00000003_sig00000873,
      I2 => blk00000003_sig00000628,
      O => blk00000003_sig00000625
    );
  blk00000003_blk0000082c : LUT4
    generic map(
      INIT => X"88F8"
    )
    port map (
      I0 => blk00000003_sig00000873,
      I1 => blk00000003_sig00000626,
      I2 => blk00000003_sig00000631,
      I3 => start,
      O => blk00000003_sig00000630
    );
  blk00000003_blk0000082b : LUT5
    generic map(
      INIT => X"00010000"
    )
    port map (
      I0 => blk00000003_sig0000062a,
      I1 => blk00000003_sig00000628,
      I2 => blk00000003_sig0000062e,
      I3 => blk00000003_sig0000062c,
      I4 => blk00000003_sig00000626,
      O => blk00000003_sig00000872
    );
  blk00000003_blk0000082a : LUT4
    generic map(
      INIT => X"000E"
    )
    port map (
      I0 => blk00000003_sig0000062a,
      I1 => blk00000003_sig00000628,
      I2 => blk00000003_sig0000062e,
      I3 => blk00000003_sig0000062c,
      O => blk00000003_sig00000871
    );
  blk00000003_blk00000829 : LUT4
    generic map(
      INIT => X"FF8A"
    )
    port map (
      I0 => blk00000003_sig0000062a,
      I1 => blk00000003_sig0000061f,
      I2 => unload,
      I3 => blk00000003_sig0000062c,
      O => blk00000003_sig00000629
    );
  blk00000003_blk00000828 : LUT2
    generic map(
      INIT => X"8"
    )
    port map (
      I0 => ce,
      I1 => blk00000003_sig00000622,
      O => blk00000003_sig000007df
    );
  blk00000003_blk00000827 : LUT2
    generic map(
      INIT => X"E"
    )
    port map (
      I0 => blk00000003_sig00000285,
      I1 => blk00000003_sig00000286,
      O => blk00000003_sig000005bd
    );
  blk00000003_blk00000826 : LUT4
    generic map(
      INIT => X"2220"
    )
    port map (
      I0 => blk00000003_sig000005c1,
      I1 => blk00000003_sig000005c0,
      I2 => blk00000003_sig000005c4,
      I3 => blk00000003_sig000005be,
      O => blk00000003_sig000005c2
    );
  blk00000003_blk00000825 : LUT2
    generic map(
      INIT => X"E"
    )
    port map (
      I0 => blk00000003_sig00000263,
      I1 => blk00000003_sig00000264,
      O => blk00000003_sig00000577
    );
  blk00000003_blk00000824 : LUT4
    generic map(
      INIT => X"2220"
    )
    port map (
      I0 => blk00000003_sig0000057b,
      I1 => blk00000003_sig0000057a,
      I2 => blk00000003_sig0000057e,
      I3 => blk00000003_sig00000578,
      O => blk00000003_sig0000057c
    );
  blk00000003_blk00000823 : LUT2
    generic map(
      INIT => X"8"
    )
    port map (
      I0 => ce,
      I1 => blk00000003_sig00000870,
      O => blk00000003_sig00000493
    );
  blk00000003_blk00000822 : LUT3
    generic map(
      INIT => X"D8"
    )
    port map (
      I0 => blk00000003_sig00000288,
      I1 => blk00000003_sig00000855,
      I2 => blk00000003_sig00000865,
      O => blk00000003_sig00000344
    );
  blk00000003_blk00000821 : LUT3
    generic map(
      INIT => X"D8"
    )
    port map (
      I0 => blk00000003_sig00000288,
      I1 => blk00000003_sig00000856,
      I2 => blk00000003_sig00000866,
      O => blk00000003_sig00000346
    );
  blk00000003_blk00000820 : LUT3
    generic map(
      INIT => X"D8"
    )
    port map (
      I0 => blk00000003_sig00000288,
      I1 => blk00000003_sig00000857,
      I2 => blk00000003_sig00000867,
      O => blk00000003_sig00000348
    );
  blk00000003_blk0000081f : LUT3
    generic map(
      INIT => X"D8"
    )
    port map (
      I0 => blk00000003_sig00000288,
      I1 => blk00000003_sig00000858,
      I2 => blk00000003_sig00000868,
      O => blk00000003_sig0000034a
    );
  blk00000003_blk0000081e : LUT3
    generic map(
      INIT => X"D8"
    )
    port map (
      I0 => blk00000003_sig00000288,
      I1 => blk00000003_sig00000859,
      I2 => blk00000003_sig00000869,
      O => blk00000003_sig0000034c
    );
  blk00000003_blk0000081d : LUT3
    generic map(
      INIT => X"D8"
    )
    port map (
      I0 => blk00000003_sig00000288,
      I1 => blk00000003_sig0000085a,
      I2 => blk00000003_sig0000086a,
      O => blk00000003_sig0000034e
    );
  blk00000003_blk0000081c : LUT3
    generic map(
      INIT => X"D8"
    )
    port map (
      I0 => blk00000003_sig00000288,
      I1 => blk00000003_sig0000085b,
      I2 => blk00000003_sig0000086b,
      O => blk00000003_sig00000350
    );
  blk00000003_blk0000081b : LUT3
    generic map(
      INIT => X"D8"
    )
    port map (
      I0 => blk00000003_sig00000288,
      I1 => blk00000003_sig0000085c,
      I2 => blk00000003_sig0000086c,
      O => blk00000003_sig00000352
    );
  blk00000003_blk0000081a : LUT3
    generic map(
      INIT => X"D8"
    )
    port map (
      I0 => blk00000003_sig00000288,
      I1 => blk00000003_sig0000084f,
      I2 => blk00000003_sig0000085f,
      O => blk00000003_sig00000338
    );
  blk00000003_blk00000819 : LUT3
    generic map(
      INIT => X"D8"
    )
    port map (
      I0 => blk00000003_sig00000288,
      I1 => blk00000003_sig00000850,
      I2 => blk00000003_sig00000860,
      O => blk00000003_sig0000033a
    );
  blk00000003_blk00000818 : LUT3
    generic map(
      INIT => X"D8"
    )
    port map (
      I0 => blk00000003_sig00000288,
      I1 => blk00000003_sig00000851,
      I2 => blk00000003_sig00000861,
      O => blk00000003_sig0000033c
    );
  blk00000003_blk00000817 : LUT3
    generic map(
      INIT => X"D8"
    )
    port map (
      I0 => blk00000003_sig00000288,
      I1 => blk00000003_sig00000852,
      I2 => blk00000003_sig00000862,
      O => blk00000003_sig0000033e
    );
  blk00000003_blk00000816 : LUT3
    generic map(
      INIT => X"D8"
    )
    port map (
      I0 => blk00000003_sig00000288,
      I1 => blk00000003_sig00000853,
      I2 => blk00000003_sig00000863,
      O => blk00000003_sig00000340
    );
  blk00000003_blk00000815 : LUT3
    generic map(
      INIT => X"D8"
    )
    port map (
      I0 => blk00000003_sig00000288,
      I1 => blk00000003_sig00000854,
      I2 => blk00000003_sig00000864,
      O => blk00000003_sig00000342
    );
  blk00000003_blk00000814 : LUT3
    generic map(
      INIT => X"D8"
    )
    port map (
      I0 => blk00000003_sig00000288,
      I1 => blk00000003_sig0000085d,
      I2 => blk00000003_sig0000086d,
      O => blk00000003_sig00000354
    );
  blk00000003_blk00000813 : LUT3
    generic map(
      INIT => X"D8"
    )
    port map (
      I0 => blk00000003_sig00000288,
      I1 => blk00000003_sig0000085e,
      I2 => blk00000003_sig0000086e,
      O => blk00000003_sig00000356
    );
  blk00000003_blk00000812 : LUT3
    generic map(
      INIT => X"D8"
    )
    port map (
      I0 => blk00000003_sig00000288,
      I1 => blk00000003_sig00000865,
      I2 => blk00000003_sig00000855,
      O => blk00000003_sig00000364
    );
  blk00000003_blk00000811 : LUT3
    generic map(
      INIT => X"D8"
    )
    port map (
      I0 => blk00000003_sig00000288,
      I1 => blk00000003_sig00000866,
      I2 => blk00000003_sig00000856,
      O => blk00000003_sig00000366
    );
  blk00000003_blk00000810 : LUT3
    generic map(
      INIT => X"D8"
    )
    port map (
      I0 => blk00000003_sig00000288,
      I1 => blk00000003_sig00000867,
      I2 => blk00000003_sig00000857,
      O => blk00000003_sig00000368
    );
  blk00000003_blk0000080f : LUT3
    generic map(
      INIT => X"D8"
    )
    port map (
      I0 => blk00000003_sig00000288,
      I1 => blk00000003_sig00000868,
      I2 => blk00000003_sig00000858,
      O => blk00000003_sig0000036a
    );
  blk00000003_blk0000080e : LUT3
    generic map(
      INIT => X"D8"
    )
    port map (
      I0 => blk00000003_sig00000288,
      I1 => blk00000003_sig00000869,
      I2 => blk00000003_sig00000859,
      O => blk00000003_sig0000036c
    );
  blk00000003_blk0000080d : LUT3
    generic map(
      INIT => X"D8"
    )
    port map (
      I0 => blk00000003_sig00000288,
      I1 => blk00000003_sig0000086a,
      I2 => blk00000003_sig0000085a,
      O => blk00000003_sig0000036e
    );
  blk00000003_blk0000080c : LUT3
    generic map(
      INIT => X"D8"
    )
    port map (
      I0 => blk00000003_sig00000288,
      I1 => blk00000003_sig0000086b,
      I2 => blk00000003_sig0000085b,
      O => blk00000003_sig00000370
    );
  blk00000003_blk0000080b : LUT3
    generic map(
      INIT => X"D8"
    )
    port map (
      I0 => blk00000003_sig00000288,
      I1 => blk00000003_sig0000086c,
      I2 => blk00000003_sig0000085c,
      O => blk00000003_sig00000372
    );
  blk00000003_blk0000080a : LUT3
    generic map(
      INIT => X"D8"
    )
    port map (
      I0 => blk00000003_sig00000288,
      I1 => blk00000003_sig0000085f,
      I2 => blk00000003_sig0000084f,
      O => blk00000003_sig00000358
    );
  blk00000003_blk00000809 : LUT3
    generic map(
      INIT => X"D8"
    )
    port map (
      I0 => blk00000003_sig00000288,
      I1 => blk00000003_sig00000860,
      I2 => blk00000003_sig00000850,
      O => blk00000003_sig0000035a
    );
  blk00000003_blk00000808 : LUT3
    generic map(
      INIT => X"D8"
    )
    port map (
      I0 => blk00000003_sig00000288,
      I1 => blk00000003_sig00000861,
      I2 => blk00000003_sig00000851,
      O => blk00000003_sig0000035c
    );
  blk00000003_blk00000807 : LUT3
    generic map(
      INIT => X"D8"
    )
    port map (
      I0 => blk00000003_sig00000288,
      I1 => blk00000003_sig00000862,
      I2 => blk00000003_sig00000852,
      O => blk00000003_sig0000035e
    );
  blk00000003_blk00000806 : LUT3
    generic map(
      INIT => X"D8"
    )
    port map (
      I0 => blk00000003_sig00000288,
      I1 => blk00000003_sig00000863,
      I2 => blk00000003_sig00000853,
      O => blk00000003_sig00000360
    );
  blk00000003_blk00000805 : LUT3
    generic map(
      INIT => X"D8"
    )
    port map (
      I0 => blk00000003_sig00000288,
      I1 => blk00000003_sig00000864,
      I2 => blk00000003_sig00000854,
      O => blk00000003_sig00000362
    );
  blk00000003_blk00000804 : LUT3
    generic map(
      INIT => X"D8"
    )
    port map (
      I0 => blk00000003_sig00000288,
      I1 => blk00000003_sig0000086d,
      I2 => blk00000003_sig0000085d,
      O => blk00000003_sig00000374
    );
  blk00000003_blk00000803 : LUT3
    generic map(
      INIT => X"D8"
    )
    port map (
      I0 => blk00000003_sig00000288,
      I1 => blk00000003_sig0000086e,
      I2 => blk00000003_sig0000085e,
      O => blk00000003_sig00000376
    );
  blk00000003_blk00000802 : LUT3
    generic map(
      INIT => X"D8"
    )
    port map (
      I0 => blk00000003_sig00000288,
      I1 => blk00000003_sig0000061e,
      I2 => blk00000003_sig0000086f,
      O => blk00000003_sig00000336
    );
  blk00000003_blk00000801 : LUT3
    generic map(
      INIT => X"4E"
    )
    port map (
      I0 => blk00000003_sig00000288,
      I1 => blk00000003_sig0000061e,
      I2 => blk00000003_sig0000086f,
      O => blk00000003_sig00000378
    );
  blk00000003_blk00000800 : LUT2
    generic map(
      INIT => X"8"
    )
    port map (
      I0 => ce,
      I1 => blk00000003_sig00000287,
      O => blk00000003_sig00000188
    );
  blk00000003_blk000007ff : LUT2
    generic map(
      INIT => X"4"
    )
    port map (
      I0 => blk00000003_sig00000287,
      I1 => ce,
      O => blk00000003_sig00000289
    );
  blk00000003_blk000007fe : LUT3
    generic map(
      INIT => X"D8"
    )
    port map (
      I0 => blk00000003_sig00000183,
      I1 => blk00000003_sig000004f0,
      I2 => blk00000003_sig0000054c,
      O => blk00000003_sig0000022f
    );
  blk00000003_blk000007fd : LUT3
    generic map(
      INIT => X"D8"
    )
    port map (
      I0 => blk00000003_sig00000183,
      I1 => blk00000003_sig000004f1,
      I2 => blk00000003_sig0000054a,
      O => blk00000003_sig00000231
    );
  blk00000003_blk000007fc : LUT3
    generic map(
      INIT => X"D8"
    )
    port map (
      I0 => blk00000003_sig00000183,
      I1 => blk00000003_sig000004f2,
      I2 => blk00000003_sig00000548,
      O => blk00000003_sig00000233
    );
  blk00000003_blk000007fb : LUT3
    generic map(
      INIT => X"D8"
    )
    port map (
      I0 => blk00000003_sig00000183,
      I1 => blk00000003_sig000004f3,
      I2 => blk00000003_sig00000546,
      O => blk00000003_sig00000235
    );
  blk00000003_blk000007fa : LUT3
    generic map(
      INIT => X"D8"
    )
    port map (
      I0 => blk00000003_sig00000183,
      I1 => blk00000003_sig000004f4,
      I2 => blk00000003_sig00000544,
      O => blk00000003_sig00000237
    );
  blk00000003_blk000007f9 : LUT3
    generic map(
      INIT => X"D8"
    )
    port map (
      I0 => blk00000003_sig00000183,
      I1 => blk00000003_sig000004f5,
      I2 => blk00000003_sig00000542,
      O => blk00000003_sig00000239
    );
  blk00000003_blk000007f8 : LUT3
    generic map(
      INIT => X"D8"
    )
    port map (
      I0 => blk00000003_sig00000183,
      I1 => blk00000003_sig000004db,
      I2 => blk00000003_sig00000576,
      O => blk00000003_sig00000205
    );
  blk00000003_blk000007f7 : LUT3
    generic map(
      INIT => X"D8"
    )
    port map (
      I0 => blk00000003_sig00000183,
      I1 => blk00000003_sig000004f6,
      I2 => blk00000003_sig00000540,
      O => blk00000003_sig0000023b
    );
  blk00000003_blk000007f6 : LUT3
    generic map(
      INIT => X"D8"
    )
    port map (
      I0 => blk00000003_sig00000183,
      I1 => blk00000003_sig000004dc,
      I2 => blk00000003_sig00000574,
      O => blk00000003_sig00000207
    );
  blk00000003_blk000007f5 : LUT3
    generic map(
      INIT => X"D8"
    )
    port map (
      I0 => blk00000003_sig00000183,
      I1 => blk00000003_sig000004dd,
      I2 => blk00000003_sig00000572,
      O => blk00000003_sig00000209
    );
  blk00000003_blk000007f4 : LUT3
    generic map(
      INIT => X"D8"
    )
    port map (
      I0 => blk00000003_sig00000183,
      I1 => blk00000003_sig000004de,
      I2 => blk00000003_sig00000570,
      O => blk00000003_sig0000020b
    );
  blk00000003_blk000007f3 : LUT3
    generic map(
      INIT => X"D8"
    )
    port map (
      I0 => blk00000003_sig00000183,
      I1 => blk00000003_sig000004df,
      I2 => blk00000003_sig0000056e,
      O => blk00000003_sig0000020d
    );
  blk00000003_blk000007f2 : LUT3
    generic map(
      INIT => X"D8"
    )
    port map (
      I0 => blk00000003_sig00000183,
      I1 => blk00000003_sig000004e0,
      I2 => blk00000003_sig0000056c,
      O => blk00000003_sig0000020f
    );
  blk00000003_blk000007f1 : LUT3
    generic map(
      INIT => X"D8"
    )
    port map (
      I0 => blk00000003_sig00000183,
      I1 => blk00000003_sig000004e1,
      I2 => blk00000003_sig0000056a,
      O => blk00000003_sig00000211
    );
  blk00000003_blk000007f0 : LUT3
    generic map(
      INIT => X"D8"
    )
    port map (
      I0 => blk00000003_sig00000183,
      I1 => blk00000003_sig000004e2,
      I2 => blk00000003_sig00000568,
      O => blk00000003_sig00000213
    );
  blk00000003_blk000007ef : LUT3
    generic map(
      INIT => X"D8"
    )
    port map (
      I0 => blk00000003_sig00000183,
      I1 => blk00000003_sig000004e3,
      I2 => blk00000003_sig00000566,
      O => blk00000003_sig00000215
    );
  blk00000003_blk000007ee : LUT3
    generic map(
      INIT => X"D8"
    )
    port map (
      I0 => blk00000003_sig00000183,
      I1 => blk00000003_sig000004e4,
      I2 => blk00000003_sig00000564,
      O => blk00000003_sig00000217
    );
  blk00000003_blk000007ed : LUT3
    generic map(
      INIT => X"D8"
    )
    port map (
      I0 => blk00000003_sig00000183,
      I1 => blk00000003_sig000004e5,
      I2 => blk00000003_sig00000562,
      O => blk00000003_sig00000219
    );
  blk00000003_blk000007ec : LUT3
    generic map(
      INIT => X"D8"
    )
    port map (
      I0 => blk00000003_sig00000183,
      I1 => blk00000003_sig000004f7,
      I2 => blk00000003_sig0000053e,
      O => blk00000003_sig0000023d
    );
  blk00000003_blk000007eb : LUT3
    generic map(
      INIT => X"D8"
    )
    port map (
      I0 => blk00000003_sig00000183,
      I1 => blk00000003_sig000004e6,
      I2 => blk00000003_sig00000560,
      O => blk00000003_sig0000021b
    );
  blk00000003_blk000007ea : LUT3
    generic map(
      INIT => X"D8"
    )
    port map (
      I0 => blk00000003_sig00000183,
      I1 => blk00000003_sig000004e7,
      I2 => blk00000003_sig0000055e,
      O => blk00000003_sig0000021d
    );
  blk00000003_blk000007e9 : LUT3
    generic map(
      INIT => X"D8"
    )
    port map (
      I0 => blk00000003_sig00000183,
      I1 => blk00000003_sig000004e8,
      I2 => blk00000003_sig0000055c,
      O => blk00000003_sig0000021f
    );
  blk00000003_blk000007e8 : LUT3
    generic map(
      INIT => X"D8"
    )
    port map (
      I0 => blk00000003_sig00000183,
      I1 => blk00000003_sig000004e9,
      I2 => blk00000003_sig0000055a,
      O => blk00000003_sig00000221
    );
  blk00000003_blk000007e7 : LUT3
    generic map(
      INIT => X"D8"
    )
    port map (
      I0 => blk00000003_sig00000183,
      I1 => blk00000003_sig000004ea,
      I2 => blk00000003_sig00000558,
      O => blk00000003_sig00000223
    );
  blk00000003_blk000007e6 : LUT3
    generic map(
      INIT => X"D8"
    )
    port map (
      I0 => blk00000003_sig00000183,
      I1 => blk00000003_sig000004eb,
      I2 => blk00000003_sig00000556,
      O => blk00000003_sig00000225
    );
  blk00000003_blk000007e5 : LUT3
    generic map(
      INIT => X"D8"
    )
    port map (
      I0 => blk00000003_sig00000183,
      I1 => blk00000003_sig000004ec,
      I2 => blk00000003_sig00000554,
      O => blk00000003_sig00000227
    );
  blk00000003_blk000007e4 : LUT3
    generic map(
      INIT => X"D8"
    )
    port map (
      I0 => blk00000003_sig00000183,
      I1 => blk00000003_sig000004ed,
      I2 => blk00000003_sig00000552,
      O => blk00000003_sig00000229
    );
  blk00000003_blk000007e3 : LUT3
    generic map(
      INIT => X"D8"
    )
    port map (
      I0 => blk00000003_sig00000183,
      I1 => blk00000003_sig000004ee,
      I2 => blk00000003_sig00000550,
      O => blk00000003_sig0000022b
    );
  blk00000003_blk000007e2 : LUT3
    generic map(
      INIT => X"D8"
    )
    port map (
      I0 => blk00000003_sig00000183,
      I1 => blk00000003_sig000004ef,
      I2 => blk00000003_sig0000054e,
      O => blk00000003_sig0000022d
    );
  blk00000003_blk000007e1 : LUT3
    generic map(
      INIT => X"D8"
    )
    port map (
      I0 => blk00000003_sig00000183,
      I1 => blk00000003_sig000004f8,
      I2 => blk00000003_sig0000053c,
      O => blk00000003_sig0000023f
    );
  blk00000003_blk000007e0 : LUT3
    generic map(
      INIT => X"D8"
    )
    port map (
      I0 => blk00000003_sig00000183,
      I1 => blk00000003_sig000004f9,
      I2 => blk00000003_sig0000053a,
      O => blk00000003_sig00000241
    );
  blk00000003_blk000007df : LUT3
    generic map(
      INIT => X"D8"
    )
    port map (
      I0 => blk00000003_sig00000183,
      I1 => blk00000003_sig000004d1,
      I2 => blk00000003_sig00000592,
      O => blk00000003_sig000001f1
    );
  blk00000003_blk000007de : LUT3
    generic map(
      INIT => X"D8"
    )
    port map (
      I0 => blk00000003_sig00000183,
      I1 => blk00000003_sig000004d2,
      I2 => blk00000003_sig00000590,
      O => blk00000003_sig000001f3
    );
  blk00000003_blk000007dd : LUT3
    generic map(
      INIT => X"D8"
    )
    port map (
      I0 => blk00000003_sig00000183,
      I1 => blk00000003_sig000004d3,
      I2 => blk00000003_sig0000058e,
      O => blk00000003_sig000001f5
    );
  blk00000003_blk000007dc : LUT3
    generic map(
      INIT => X"D8"
    )
    port map (
      I0 => blk00000003_sig00000183,
      I1 => blk00000003_sig000004d4,
      I2 => blk00000003_sig0000058c,
      O => blk00000003_sig000001f7
    );
  blk00000003_blk000007db : LUT3
    generic map(
      INIT => X"D8"
    )
    port map (
      I0 => blk00000003_sig00000183,
      I1 => blk00000003_sig000004d5,
      I2 => blk00000003_sig0000058a,
      O => blk00000003_sig000001f9
    );
  blk00000003_blk000007da : LUT3
    generic map(
      INIT => X"D8"
    )
    port map (
      I0 => blk00000003_sig00000183,
      I1 => blk00000003_sig000004d6,
      I2 => blk00000003_sig00000588,
      O => blk00000003_sig000001fb
    );
  blk00000003_blk000007d9 : LUT3
    generic map(
      INIT => X"D8"
    )
    port map (
      I0 => blk00000003_sig00000183,
      I1 => blk00000003_sig000004bc,
      I2 => blk00000003_sig000005bc,
      O => blk00000003_sig000001c7
    );
  blk00000003_blk000007d8 : LUT3
    generic map(
      INIT => X"D8"
    )
    port map (
      I0 => blk00000003_sig00000183,
      I1 => blk00000003_sig000004d7,
      I2 => blk00000003_sig00000586,
      O => blk00000003_sig000001fd
    );
  blk00000003_blk000007d7 : LUT3
    generic map(
      INIT => X"D8"
    )
    port map (
      I0 => blk00000003_sig00000183,
      I1 => blk00000003_sig000004bd,
      I2 => blk00000003_sig000005ba,
      O => blk00000003_sig000001c9
    );
  blk00000003_blk000007d6 : LUT3
    generic map(
      INIT => X"D8"
    )
    port map (
      I0 => blk00000003_sig00000183,
      I1 => blk00000003_sig000004be,
      I2 => blk00000003_sig000005b8,
      O => blk00000003_sig000001cb
    );
  blk00000003_blk000007d5 : LUT3
    generic map(
      INIT => X"D8"
    )
    port map (
      I0 => blk00000003_sig00000183,
      I1 => blk00000003_sig000004bf,
      I2 => blk00000003_sig000005b6,
      O => blk00000003_sig000001cd
    );
  blk00000003_blk000007d4 : LUT3
    generic map(
      INIT => X"D8"
    )
    port map (
      I0 => blk00000003_sig00000183,
      I1 => blk00000003_sig000004c0,
      I2 => blk00000003_sig000005b4,
      O => blk00000003_sig000001cf
    );
  blk00000003_blk000007d3 : LUT3
    generic map(
      INIT => X"D8"
    )
    port map (
      I0 => blk00000003_sig00000183,
      I1 => blk00000003_sig000004c1,
      I2 => blk00000003_sig000005b2,
      O => blk00000003_sig000001d1
    );
  blk00000003_blk000007d2 : LUT3
    generic map(
      INIT => X"D8"
    )
    port map (
      I0 => blk00000003_sig00000183,
      I1 => blk00000003_sig000004c2,
      I2 => blk00000003_sig000005b0,
      O => blk00000003_sig000001d3
    );
  blk00000003_blk000007d1 : LUT3
    generic map(
      INIT => X"D8"
    )
    port map (
      I0 => blk00000003_sig00000183,
      I1 => blk00000003_sig000004c3,
      I2 => blk00000003_sig000005ae,
      O => blk00000003_sig000001d5
    );
  blk00000003_blk000007d0 : LUT3
    generic map(
      INIT => X"D8"
    )
    port map (
      I0 => blk00000003_sig00000183,
      I1 => blk00000003_sig000004c4,
      I2 => blk00000003_sig000005ac,
      O => blk00000003_sig000001d7
    );
  blk00000003_blk000007cf : LUT3
    generic map(
      INIT => X"D8"
    )
    port map (
      I0 => blk00000003_sig00000183,
      I1 => blk00000003_sig000004c5,
      I2 => blk00000003_sig000005aa,
      O => blk00000003_sig000001d9
    );
  blk00000003_blk000007ce : LUT3
    generic map(
      INIT => X"D8"
    )
    port map (
      I0 => blk00000003_sig00000183,
      I1 => blk00000003_sig000004c6,
      I2 => blk00000003_sig000005a8,
      O => blk00000003_sig000001db
    );
  blk00000003_blk000007cd : LUT3
    generic map(
      INIT => X"D8"
    )
    port map (
      I0 => blk00000003_sig00000183,
      I1 => blk00000003_sig000004d8,
      I2 => blk00000003_sig00000584,
      O => blk00000003_sig000001ff
    );
  blk00000003_blk000007cc : LUT3
    generic map(
      INIT => X"D8"
    )
    port map (
      I0 => blk00000003_sig00000183,
      I1 => blk00000003_sig000004c7,
      I2 => blk00000003_sig000005a6,
      O => blk00000003_sig000001dd
    );
  blk00000003_blk000007cb : LUT3
    generic map(
      INIT => X"D8"
    )
    port map (
      I0 => blk00000003_sig00000183,
      I1 => blk00000003_sig000004c8,
      I2 => blk00000003_sig000005a4,
      O => blk00000003_sig000001df
    );
  blk00000003_blk000007ca : LUT3
    generic map(
      INIT => X"D8"
    )
    port map (
      I0 => blk00000003_sig00000183,
      I1 => blk00000003_sig000004c9,
      I2 => blk00000003_sig000005a2,
      O => blk00000003_sig000001e1
    );
  blk00000003_blk000007c9 : LUT3
    generic map(
      INIT => X"D8"
    )
    port map (
      I0 => blk00000003_sig00000183,
      I1 => blk00000003_sig000004ca,
      I2 => blk00000003_sig000005a0,
      O => blk00000003_sig000001e3
    );
  blk00000003_blk000007c8 : LUT3
    generic map(
      INIT => X"D8"
    )
    port map (
      I0 => blk00000003_sig00000183,
      I1 => blk00000003_sig000004cb,
      I2 => blk00000003_sig0000059e,
      O => blk00000003_sig000001e5
    );
  blk00000003_blk000007c7 : LUT3
    generic map(
      INIT => X"D8"
    )
    port map (
      I0 => blk00000003_sig00000183,
      I1 => blk00000003_sig000004cc,
      I2 => blk00000003_sig0000059c,
      O => blk00000003_sig000001e7
    );
  blk00000003_blk000007c6 : LUT3
    generic map(
      INIT => X"D8"
    )
    port map (
      I0 => blk00000003_sig00000183,
      I1 => blk00000003_sig000004cd,
      I2 => blk00000003_sig0000059a,
      O => blk00000003_sig000001e9
    );
  blk00000003_blk000007c5 : LUT3
    generic map(
      INIT => X"D8"
    )
    port map (
      I0 => blk00000003_sig00000183,
      I1 => blk00000003_sig000004ce,
      I2 => blk00000003_sig00000598,
      O => blk00000003_sig000001eb
    );
  blk00000003_blk000007c4 : LUT3
    generic map(
      INIT => X"D8"
    )
    port map (
      I0 => blk00000003_sig00000183,
      I1 => blk00000003_sig000004cf,
      I2 => blk00000003_sig00000596,
      O => blk00000003_sig000001ed
    );
  blk00000003_blk000007c3 : LUT3
    generic map(
      INIT => X"D8"
    )
    port map (
      I0 => blk00000003_sig00000183,
      I1 => blk00000003_sig000004d0,
      I2 => blk00000003_sig00000594,
      O => blk00000003_sig000001ef
    );
  blk00000003_blk000007c2 : LUT3
    generic map(
      INIT => X"D8"
    )
    port map (
      I0 => blk00000003_sig00000183,
      I1 => blk00000003_sig000004d9,
      I2 => blk00000003_sig00000582,
      O => blk00000003_sig00000201
    );
  blk00000003_blk000007c1 : LUT3
    generic map(
      INIT => X"D8"
    )
    port map (
      I0 => blk00000003_sig00000183,
      I1 => blk00000003_sig000004da,
      I2 => blk00000003_sig00000580,
      O => blk00000003_sig00000203
    );
  blk00000003_blk000007c0 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000007ff,
      Q => blk00000003_sig0000086e
    );
  blk00000003_blk000007bf : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000007fd,
      Q => blk00000003_sig0000086d
    );
  blk00000003_blk000007be : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000007fb,
      Q => blk00000003_sig0000086c
    );
  blk00000003_blk000007bd : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000007f9,
      Q => blk00000003_sig0000086b
    );
  blk00000003_blk000007bc : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000007f7,
      Q => blk00000003_sig0000086a
    );
  blk00000003_blk000007bb : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000007f5,
      Q => blk00000003_sig00000869
    );
  blk00000003_blk000007ba : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000007f3,
      Q => blk00000003_sig00000868
    );
  blk00000003_blk000007b9 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000007f1,
      Q => blk00000003_sig00000867
    );
  blk00000003_blk000007b8 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000007ef,
      Q => blk00000003_sig00000866
    );
  blk00000003_blk000007b7 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000007ed,
      Q => blk00000003_sig00000865
    );
  blk00000003_blk000007b6 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000007eb,
      Q => blk00000003_sig00000864
    );
  blk00000003_blk000007b5 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000007e9,
      Q => blk00000003_sig00000863
    );
  blk00000003_blk000007b4 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000007e7,
      Q => blk00000003_sig00000862
    );
  blk00000003_blk000007b3 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000007e5,
      Q => blk00000003_sig00000861
    );
  blk00000003_blk000007b2 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000007e3,
      Q => blk00000003_sig00000860
    );
  blk00000003_blk000007b1 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000007e1,
      Q => blk00000003_sig0000085f
    );
  blk00000003_blk000007b0 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig0000081f,
      Q => blk00000003_sig0000085e
    );
  blk00000003_blk000007af : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig0000081d,
      Q => blk00000003_sig0000085d
    );
  blk00000003_blk000007ae : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig0000081b,
      Q => blk00000003_sig0000085c
    );
  blk00000003_blk000007ad : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000819,
      Q => blk00000003_sig0000085b
    );
  blk00000003_blk000007ac : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000817,
      Q => blk00000003_sig0000085a
    );
  blk00000003_blk000007ab : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000815,
      Q => blk00000003_sig00000859
    );
  blk00000003_blk000007aa : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000813,
      Q => blk00000003_sig00000858
    );
  blk00000003_blk000007a9 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000811,
      Q => blk00000003_sig00000857
    );
  blk00000003_blk000007a8 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig0000080f,
      Q => blk00000003_sig00000856
    );
  blk00000003_blk000007a7 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig0000080d,
      Q => blk00000003_sig00000855
    );
  blk00000003_blk000007a6 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig0000080b,
      Q => blk00000003_sig00000854
    );
  blk00000003_blk000007a5 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000809,
      Q => blk00000003_sig00000853
    );
  blk00000003_blk000007a4 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000807,
      Q => blk00000003_sig00000852
    );
  blk00000003_blk000007a3 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000805,
      Q => blk00000003_sig00000851
    );
  blk00000003_blk000007a2 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000803,
      Q => blk00000003_sig00000850
    );
  blk00000003_blk000007a1 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000801,
      Q => blk00000003_sig0000084f
    );
  blk00000003_blk000007a0 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig000007df,
      D => blk00000003_sig00000841,
      Q => blk00000003_sig00000834
    );
  blk00000003_blk0000079f : LUT6
    generic map(
      INIT => X"8000000000000000"
    )
    port map (
      I0 => blk00000003_sig0000084b,
      I1 => blk00000003_sig0000084c,
      I2 => blk00000003_sig0000084d,
      I3 => blk00000003_sig0000084e,
      I4 => blk00000003_sig00000088,
      I5 => blk00000003_sig00000088,
      O => blk00000003_sig00000844
    );
  blk00000003_blk0000079e : LUT6
    generic map(
      INIT => X"8000000000000000"
    )
    port map (
      I0 => blk00000003_sig00000845,
      I1 => blk00000003_sig00000846,
      I2 => blk00000003_sig00000847,
      I3 => blk00000003_sig00000848,
      I4 => blk00000003_sig00000849,
      I5 => blk00000003_sig0000084a,
      O => blk00000003_sig00000842
    );
  blk00000003_blk0000079d : MUXCY
    port map (
      CI => blk00000003_sig00000843,
      DI => blk00000003_sig00000082,
      S => blk00000003_sig00000844,
      O => blk00000003_sig00000840
    );
  blk00000003_blk0000079c : MUXCY
    port map (
      CI => blk00000003_sig00000088,
      DI => blk00000003_sig00000082,
      S => blk00000003_sig00000842,
      O => blk00000003_sig00000843
    );
  blk00000003_blk0000079b : XORCY
    port map (
      CI => blk00000003_sig00000840,
      LI => blk00000003_sig00000082,
      O => blk00000003_sig00000841
    );
  blk00000003_blk0000079a : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig000007df,
      D => blk00000003_sig00000698,
      Q => blk00000003_sig0000083f
    );
  blk00000003_blk00000799 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig000007df,
      D => blk00000003_sig0000069d,
      Q => blk00000003_sig0000083e
    );
  blk00000003_blk00000798 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig000007df,
      D => blk00000003_sig000006a0,
      Q => blk00000003_sig0000083d
    );
  blk00000003_blk00000797 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig000007df,
      D => blk00000003_sig000006a3,
      Q => blk00000003_sig0000083c
    );
  blk00000003_blk00000796 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig000007df,
      D => blk00000003_sig000006a6,
      Q => blk00000003_sig0000083b
    );
  blk00000003_blk00000795 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig000007df,
      D => blk00000003_sig000006a9,
      Q => blk00000003_sig0000083a
    );
  blk00000003_blk00000794 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig000007df,
      D => blk00000003_sig000006ac,
      Q => blk00000003_sig00000839
    );
  blk00000003_blk00000793 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig000007df,
      D => blk00000003_sig000006af,
      Q => blk00000003_sig00000838
    );
  blk00000003_blk00000792 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig000007df,
      D => blk00000003_sig000006b2,
      Q => blk00000003_sig00000837
    );
  blk00000003_blk00000791 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig000007df,
      D => blk00000003_sig000006b5,
      Q => blk00000003_sig00000836
    );
  blk00000003_blk00000790 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig000007df,
      D => blk00000003_sig00000834,
      Q => blk00000003_sig00000835
    );
  blk00000003_blk0000078f : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig000007df,
      D => blk00000003_sig000007dc,
      Q => blk00000003_sig00000833
    );
  blk00000003_blk0000078e : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig000007df,
      D => blk00000003_sig000007d9,
      Q => blk00000003_sig00000832
    );
  blk00000003_blk0000078d : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig000007df,
      D => blk00000003_sig000007d6,
      Q => blk00000003_sig00000831
    );
  blk00000003_blk0000078c : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig000007df,
      D => blk00000003_sig000007d3,
      Q => blk00000003_sig00000830
    );
  blk00000003_blk0000078b : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig000007df,
      D => blk00000003_sig000007d0,
      Q => blk00000003_sig0000082f
    );
  blk00000003_blk0000078a : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig000007df,
      D => blk00000003_sig000007cd,
      Q => blk00000003_sig0000082e
    );
  blk00000003_blk00000789 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig000007df,
      D => blk00000003_sig000007ca,
      Q => blk00000003_sig0000082d
    );
  blk00000003_blk00000788 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig000007df,
      D => blk00000003_sig000007c7,
      Q => blk00000003_sig0000082c
    );
  blk00000003_blk00000787 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig000007df,
      D => blk00000003_sig000007c4,
      Q => blk00000003_sig0000082b
    );
  blk00000003_blk00000786 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig000007df,
      D => blk00000003_sig000007c1,
      Q => blk00000003_sig0000082a
    );
  blk00000003_blk00000785 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig000007df,
      D => blk00000003_sig000007bf,
      Q => blk00000003_sig00000829
    );
  blk00000003_blk00000784 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig000007df,
      D => blk00000003_sig000007bc,
      Q => blk00000003_sig00000828
    );
  blk00000003_blk00000783 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig000007df,
      D => blk00000003_sig000007b9,
      Q => blk00000003_sig00000827
    );
  blk00000003_blk00000782 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig000007df,
      D => blk00000003_sig000007b6,
      Q => blk00000003_sig00000826
    );
  blk00000003_blk00000781 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig000007df,
      D => blk00000003_sig000007b3,
      Q => blk00000003_sig00000825
    );
  blk00000003_blk00000780 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig000007df,
      D => blk00000003_sig000007b0,
      Q => blk00000003_sig00000824
    );
  blk00000003_blk0000077f : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig000007df,
      D => blk00000003_sig000007ad,
      Q => blk00000003_sig00000823
    );
  blk00000003_blk0000077e : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig000007df,
      D => blk00000003_sig000007aa,
      Q => blk00000003_sig00000822
    );
  blk00000003_blk0000077d : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig000007df,
      D => blk00000003_sig000007a7,
      Q => blk00000003_sig00000821
    );
  blk00000003_blk0000077c : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig000007df,
      D => blk00000003_sig00000820,
      Q => blk00000003_sig0000061d
    );
  blk00000003_blk0000077b : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig000007df,
      D => blk00000003_sig0000081e,
      Q => blk00000003_sig0000081f
    );
  blk00000003_blk0000077a : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig000007df,
      D => blk00000003_sig0000081c,
      Q => blk00000003_sig0000081d
    );
  blk00000003_blk00000779 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig000007df,
      D => blk00000003_sig0000081a,
      Q => blk00000003_sig0000081b
    );
  blk00000003_blk00000778 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig000007df,
      D => blk00000003_sig00000818,
      Q => blk00000003_sig00000819
    );
  blk00000003_blk00000777 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig000007df,
      D => blk00000003_sig00000816,
      Q => blk00000003_sig00000817
    );
  blk00000003_blk00000776 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig000007df,
      D => blk00000003_sig00000814,
      Q => blk00000003_sig00000815
    );
  blk00000003_blk00000775 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig000007df,
      D => blk00000003_sig00000812,
      Q => blk00000003_sig00000813
    );
  blk00000003_blk00000774 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig000007df,
      D => blk00000003_sig00000810,
      Q => blk00000003_sig00000811
    );
  blk00000003_blk00000773 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig000007df,
      D => blk00000003_sig0000080e,
      Q => blk00000003_sig0000080f
    );
  blk00000003_blk00000772 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig000007df,
      D => blk00000003_sig0000080c,
      Q => blk00000003_sig0000080d
    );
  blk00000003_blk00000771 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig000007df,
      D => blk00000003_sig0000080a,
      Q => blk00000003_sig0000080b
    );
  blk00000003_blk00000770 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig000007df,
      D => blk00000003_sig00000808,
      Q => blk00000003_sig00000809
    );
  blk00000003_blk0000076f : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig000007df,
      D => blk00000003_sig00000806,
      Q => blk00000003_sig00000807
    );
  blk00000003_blk0000076e : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig000007df,
      D => blk00000003_sig00000804,
      Q => blk00000003_sig00000805
    );
  blk00000003_blk0000076d : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig000007df,
      D => blk00000003_sig00000802,
      Q => blk00000003_sig00000803
    );
  blk00000003_blk0000076c : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig000007df,
      D => blk00000003_sig00000800,
      Q => blk00000003_sig00000801
    );
  blk00000003_blk0000076b : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig000007df,
      D => blk00000003_sig000007fe,
      Q => blk00000003_sig000007ff
    );
  blk00000003_blk0000076a : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig000007df,
      D => blk00000003_sig000007fc,
      Q => blk00000003_sig000007fd
    );
  blk00000003_blk00000769 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig000007df,
      D => blk00000003_sig000007fa,
      Q => blk00000003_sig000007fb
    );
  blk00000003_blk00000768 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig000007df,
      D => blk00000003_sig000007f8,
      Q => blk00000003_sig000007f9
    );
  blk00000003_blk00000767 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig000007df,
      D => blk00000003_sig000007f6,
      Q => blk00000003_sig000007f7
    );
  blk00000003_blk00000766 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig000007df,
      D => blk00000003_sig000007f4,
      Q => blk00000003_sig000007f5
    );
  blk00000003_blk00000765 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig000007df,
      D => blk00000003_sig000007f2,
      Q => blk00000003_sig000007f3
    );
  blk00000003_blk00000764 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig000007df,
      D => blk00000003_sig000007f0,
      Q => blk00000003_sig000007f1
    );
  blk00000003_blk00000763 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig000007df,
      D => blk00000003_sig000007ee,
      Q => blk00000003_sig000007ef
    );
  blk00000003_blk00000762 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig000007df,
      D => blk00000003_sig000007ec,
      Q => blk00000003_sig000007ed
    );
  blk00000003_blk00000761 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig000007df,
      D => blk00000003_sig000007ea,
      Q => blk00000003_sig000007eb
    );
  blk00000003_blk00000760 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig000007df,
      D => blk00000003_sig000007e8,
      Q => blk00000003_sig000007e9
    );
  blk00000003_blk0000075f : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig000007df,
      D => blk00000003_sig000007e6,
      Q => blk00000003_sig000007e7
    );
  blk00000003_blk0000075e : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig000007df,
      D => blk00000003_sig000007e4,
      Q => blk00000003_sig000007e5
    );
  blk00000003_blk0000075d : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig000007df,
      D => blk00000003_sig000007e2,
      Q => blk00000003_sig000007e3
    );
  blk00000003_blk0000075c : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig000007df,
      D => blk00000003_sig000007e0,
      Q => blk00000003_sig000007e1
    );
  blk00000003_blk0000075b : MUXCY
    port map (
      CI => blk00000003_sig00000082,
      DI => blk00000003_sig000007dd,
      S => blk00000003_sig000007de,
      O => blk00000003_sig000007da
    );
  blk00000003_blk0000075a : MUXCY
    port map (
      CI => blk00000003_sig000007da,
      DI => blk00000003_sig00000082,
      S => blk00000003_sig000007db,
      O => blk00000003_sig000007d7
    );
  blk00000003_blk00000759 : XORCY
    port map (
      CI => blk00000003_sig000007da,
      LI => blk00000003_sig000007db,
      O => blk00000003_sig000007dc
    );
  blk00000003_blk00000758 : MUXCY
    port map (
      CI => blk00000003_sig000007d7,
      DI => blk00000003_sig00000082,
      S => blk00000003_sig000007d8,
      O => blk00000003_sig000007d4
    );
  blk00000003_blk00000757 : XORCY
    port map (
      CI => blk00000003_sig000007d7,
      LI => blk00000003_sig000007d8,
      O => blk00000003_sig000007d9
    );
  blk00000003_blk00000756 : MUXCY
    port map (
      CI => blk00000003_sig000007d4,
      DI => blk00000003_sig00000082,
      S => blk00000003_sig000007d5,
      O => blk00000003_sig000007d1
    );
  blk00000003_blk00000755 : XORCY
    port map (
      CI => blk00000003_sig000007d4,
      LI => blk00000003_sig000007d5,
      O => blk00000003_sig000007d6
    );
  blk00000003_blk00000754 : MUXCY
    port map (
      CI => blk00000003_sig000007d1,
      DI => blk00000003_sig00000082,
      S => blk00000003_sig000007d2,
      O => blk00000003_sig000007ce
    );
  blk00000003_blk00000753 : XORCY
    port map (
      CI => blk00000003_sig000007d1,
      LI => blk00000003_sig000007d2,
      O => blk00000003_sig000007d3
    );
  blk00000003_blk00000752 : MUXCY
    port map (
      CI => blk00000003_sig000007ce,
      DI => blk00000003_sig00000082,
      S => blk00000003_sig000007cf,
      O => blk00000003_sig000007cb
    );
  blk00000003_blk00000751 : XORCY
    port map (
      CI => blk00000003_sig000007ce,
      LI => blk00000003_sig000007cf,
      O => blk00000003_sig000007d0
    );
  blk00000003_blk00000750 : MUXCY
    port map (
      CI => blk00000003_sig000007cb,
      DI => blk00000003_sig00000082,
      S => blk00000003_sig000007cc,
      O => blk00000003_sig000007c8
    );
  blk00000003_blk0000074f : XORCY
    port map (
      CI => blk00000003_sig000007cb,
      LI => blk00000003_sig000007cc,
      O => blk00000003_sig000007cd
    );
  blk00000003_blk0000074e : MUXCY
    port map (
      CI => blk00000003_sig000007c8,
      DI => blk00000003_sig00000082,
      S => blk00000003_sig000007c9,
      O => blk00000003_sig000007c5
    );
  blk00000003_blk0000074d : XORCY
    port map (
      CI => blk00000003_sig000007c8,
      LI => blk00000003_sig000007c9,
      O => blk00000003_sig000007ca
    );
  blk00000003_blk0000074c : MUXCY
    port map (
      CI => blk00000003_sig000007c5,
      DI => blk00000003_sig00000082,
      S => blk00000003_sig000007c6,
      O => blk00000003_sig000007c2
    );
  blk00000003_blk0000074b : XORCY
    port map (
      CI => blk00000003_sig000007c5,
      LI => blk00000003_sig000007c6,
      O => blk00000003_sig000007c7
    );
  blk00000003_blk0000074a : XORCY
    port map (
      CI => blk00000003_sig000007c2,
      LI => blk00000003_sig000007c3,
      O => blk00000003_sig000007c4
    );
  blk00000003_blk00000749 : MUXCY
    port map (
      CI => blk00000003_sig00000082,
      DI => blk00000003_sig000006b8,
      S => blk00000003_sig000007c0,
      O => blk00000003_sig000007bd
    );
  blk00000003_blk00000748 : XORCY
    port map (
      CI => blk00000003_sig00000082,
      LI => blk00000003_sig000007c0,
      O => blk00000003_sig000007c1
    );
  blk00000003_blk00000747 : MUXCY
    port map (
      CI => blk00000003_sig000007bd,
      DI => blk00000003_sig00000082,
      S => blk00000003_sig000007be,
      O => blk00000003_sig000007ba
    );
  blk00000003_blk00000746 : XORCY
    port map (
      CI => blk00000003_sig000007bd,
      LI => blk00000003_sig000007be,
      O => blk00000003_sig000007bf
    );
  blk00000003_blk00000745 : MUXCY
    port map (
      CI => blk00000003_sig000007ba,
      DI => blk00000003_sig00000082,
      S => blk00000003_sig000007bb,
      O => blk00000003_sig000007b7
    );
  blk00000003_blk00000744 : XORCY
    port map (
      CI => blk00000003_sig000007ba,
      LI => blk00000003_sig000007bb,
      O => blk00000003_sig000007bc
    );
  blk00000003_blk00000743 : MUXCY
    port map (
      CI => blk00000003_sig000007b7,
      DI => blk00000003_sig00000082,
      S => blk00000003_sig000007b8,
      O => blk00000003_sig000007b4
    );
  blk00000003_blk00000742 : XORCY
    port map (
      CI => blk00000003_sig000007b7,
      LI => blk00000003_sig000007b8,
      O => blk00000003_sig000007b9
    );
  blk00000003_blk00000741 : MUXCY
    port map (
      CI => blk00000003_sig000007b4,
      DI => blk00000003_sig00000082,
      S => blk00000003_sig000007b5,
      O => blk00000003_sig000007b1
    );
  blk00000003_blk00000740 : XORCY
    port map (
      CI => blk00000003_sig000007b4,
      LI => blk00000003_sig000007b5,
      O => blk00000003_sig000007b6
    );
  blk00000003_blk0000073f : MUXCY
    port map (
      CI => blk00000003_sig000007b1,
      DI => blk00000003_sig00000082,
      S => blk00000003_sig000007b2,
      O => blk00000003_sig000007ae
    );
  blk00000003_blk0000073e : XORCY
    port map (
      CI => blk00000003_sig000007b1,
      LI => blk00000003_sig000007b2,
      O => blk00000003_sig000007b3
    );
  blk00000003_blk0000073d : MUXCY
    port map (
      CI => blk00000003_sig000007ae,
      DI => blk00000003_sig00000082,
      S => blk00000003_sig000007af,
      O => blk00000003_sig000007ab
    );
  blk00000003_blk0000073c : XORCY
    port map (
      CI => blk00000003_sig000007ae,
      LI => blk00000003_sig000007af,
      O => blk00000003_sig000007b0
    );
  blk00000003_blk0000073b : MUXCY
    port map (
      CI => blk00000003_sig000007ab,
      DI => blk00000003_sig00000082,
      S => blk00000003_sig000007ac,
      O => blk00000003_sig000007a8
    );
  blk00000003_blk0000073a : XORCY
    port map (
      CI => blk00000003_sig000007ab,
      LI => blk00000003_sig000007ac,
      O => blk00000003_sig000007ad
    );
  blk00000003_blk00000739 : MUXCY
    port map (
      CI => blk00000003_sig000007a8,
      DI => blk00000003_sig00000082,
      S => blk00000003_sig000007a9,
      O => blk00000003_sig000007a5
    );
  blk00000003_blk00000738 : XORCY
    port map (
      CI => blk00000003_sig000007a8,
      LI => blk00000003_sig000007a9,
      O => blk00000003_sig000007aa
    );
  blk00000003_blk00000737 : XORCY
    port map (
      CI => blk00000003_sig000007a5,
      LI => blk00000003_sig000007a6,
      O => blk00000003_sig000007a7
    );
  blk00000003_blk000006e9 : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000797,
      R => sclr,
      Q => blk00000003_sig00000798
    );
  blk00000003_blk000006e8 : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000796,
      R => sclr,
      Q => dv
    );
  blk00000003_blk000006e7 : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000795,
      R => blk00000003_sig0000078a,
      Q => xk_index(0)
    );
  blk00000003_blk000006e6 : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000794,
      R => blk00000003_sig0000078a,
      Q => xk_index(1)
    );
  blk00000003_blk000006e5 : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000793,
      R => blk00000003_sig0000078a,
      Q => xk_index(2)
    );
  blk00000003_blk000006e4 : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000792,
      R => blk00000003_sig0000078a,
      Q => xk_index(3)
    );
  blk00000003_blk000006e3 : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000791,
      R => blk00000003_sig0000078a,
      Q => xk_index(4)
    );
  blk00000003_blk000006e2 : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000790,
      R => blk00000003_sig0000078a,
      Q => xk_index(5)
    );
  blk00000003_blk000006e1 : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig0000078f,
      R => blk00000003_sig0000078a,
      Q => xk_index(6)
    );
  blk00000003_blk000006e0 : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig0000078e,
      R => blk00000003_sig0000078a,
      Q => xk_index(7)
    );
  blk00000003_blk000006df : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig0000078d,
      R => blk00000003_sig0000078a,
      Q => xk_index(8)
    );
  blk00000003_blk000006de : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig0000078c,
      R => blk00000003_sig0000078a,
      Q => xk_index(9)
    );
  blk00000003_blk000006dd : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig0000078b,
      R => blk00000003_sig0000078a,
      Q => xk_index(10)
    );
  blk00000003_blk000006dc : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000789,
      R => blk00000003_sig0000078a,
      Q => xk_index(11)
    );
  blk00000003_blk0000068e : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000735,
      R => blk00000003_sig00000082,
      Q => blk00000003_sig00000771
    );
  blk00000003_blk0000068d : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000771,
      R => blk00000003_sig00000082,
      Q => blk00000003_sig000006f0
    );
  blk00000003_blk0000068c : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000732,
      R => blk00000003_sig00000082,
      Q => blk00000003_sig00000770
    );
  blk00000003_blk0000068b : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000770,
      R => blk00000003_sig00000082,
      Q => blk00000003_sig000006f2
    );
  blk00000003_blk0000068a : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig0000072f,
      R => blk00000003_sig00000082,
      Q => blk00000003_sig0000076f
    );
  blk00000003_blk00000689 : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig0000076f,
      R => blk00000003_sig00000082,
      Q => blk00000003_sig000006f4
    );
  blk00000003_blk00000688 : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig0000072c,
      R => blk00000003_sig00000082,
      Q => blk00000003_sig0000076e
    );
  blk00000003_blk00000687 : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig0000076e,
      R => blk00000003_sig00000082,
      Q => blk00000003_sig000006f6
    );
  blk00000003_blk00000686 : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000729,
      R => blk00000003_sig00000082,
      Q => blk00000003_sig0000076d
    );
  blk00000003_blk00000685 : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig0000076d,
      R => blk00000003_sig00000082,
      Q => blk00000003_sig000006f8
    );
  blk00000003_blk00000684 : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000726,
      R => blk00000003_sig00000082,
      Q => blk00000003_sig0000076c
    );
  blk00000003_blk00000683 : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig0000076c,
      R => blk00000003_sig00000082,
      Q => blk00000003_sig000006fa
    );
  blk00000003_blk00000682 : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000723,
      R => blk00000003_sig00000082,
      Q => blk00000003_sig0000076b
    );
  blk00000003_blk00000681 : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig0000076b,
      R => blk00000003_sig00000082,
      Q => blk00000003_sig000006fc
    );
  blk00000003_blk00000680 : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000720,
      R => blk00000003_sig00000082,
      Q => blk00000003_sig0000076a
    );
  blk00000003_blk0000067f : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig0000076a,
      R => blk00000003_sig00000082,
      Q => blk00000003_sig000006fe
    );
  blk00000003_blk0000067e : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig0000071d,
      R => blk00000003_sig00000082,
      Q => blk00000003_sig00000769
    );
  blk00000003_blk0000067d : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000769,
      R => blk00000003_sig00000082,
      Q => blk00000003_sig00000700
    );
  blk00000003_blk0000067c : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig0000071a,
      R => blk00000003_sig00000082,
      Q => blk00000003_sig00000768
    );
  blk00000003_blk0000067b : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000768,
      R => blk00000003_sig00000082,
      Q => blk00000003_sig00000702
    );
  blk00000003_blk0000067a : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000717,
      R => blk00000003_sig00000082,
      Q => blk00000003_sig00000767
    );
  blk00000003_blk00000679 : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000767,
      R => blk00000003_sig00000082,
      Q => blk00000003_sig00000704
    );
  blk00000003_blk00000678 : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000714,
      R => blk00000003_sig00000082,
      Q => blk00000003_sig00000766
    );
  blk00000003_blk00000677 : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000766,
      R => blk00000003_sig00000082,
      Q => blk00000003_sig00000706
    );
  blk00000003_blk00000676 : LUT6
    generic map(
      INIT => X"FF00F0F0CCCCAAAA"
    )
    port map (
      I0 => blk00000003_sig00000655,
      I1 => blk00000003_sig00000654,
      I2 => blk00000003_sig00000653,
      I3 => blk00000003_sig00000652,
      I4 => blk00000003_sig000006e4,
      I5 => blk00000003_sig000006e6,
      O => blk00000003_sig00000764
    );
  blk00000003_blk00000675 : LUT6
    generic map(
      INIT => X"FF00F0F0CCCCAAAA"
    )
    port map (
      I0 => blk00000003_sig00000654,
      I1 => blk00000003_sig00000653,
      I2 => blk00000003_sig00000652,
      I3 => blk00000003_sig00000651,
      I4 => blk00000003_sig000006e4,
      I5 => blk00000003_sig000006e6,
      O => blk00000003_sig00000760
    );
  blk00000003_blk00000674 : LUT6
    generic map(
      INIT => X"FF00F0F0CCCCAAAA"
    )
    port map (
      I0 => blk00000003_sig00000653,
      I1 => blk00000003_sig00000652,
      I2 => blk00000003_sig00000651,
      I3 => blk00000003_sig00000650,
      I4 => blk00000003_sig000006e4,
      I5 => blk00000003_sig000006e6,
      O => blk00000003_sig0000075c
    );
  blk00000003_blk00000673 : LUT6
    generic map(
      INIT => X"FF00F0F0CCCCAAAA"
    )
    port map (
      I0 => blk00000003_sig00000652,
      I1 => blk00000003_sig00000651,
      I2 => blk00000003_sig00000650,
      I3 => blk00000003_sig00000662,
      I4 => blk00000003_sig000006e4,
      I5 => blk00000003_sig000006e6,
      O => blk00000003_sig00000758
    );
  blk00000003_blk00000672 : LUT6
    generic map(
      INIT => X"FF00F0F0CCCCAAAA"
    )
    port map (
      I0 => blk00000003_sig00000651,
      I1 => blk00000003_sig00000650,
      I2 => blk00000003_sig00000662,
      I3 => blk00000003_sig00000660,
      I4 => blk00000003_sig000006e4,
      I5 => blk00000003_sig000006e6,
      O => blk00000003_sig00000754
    );
  blk00000003_blk00000671 : LUT6
    generic map(
      INIT => X"FF00F0F0CCCCAAAA"
    )
    port map (
      I0 => blk00000003_sig00000650,
      I1 => blk00000003_sig00000662,
      I2 => blk00000003_sig00000660,
      I3 => blk00000003_sig0000065e,
      I4 => blk00000003_sig000006e4,
      I5 => blk00000003_sig000006e6,
      O => blk00000003_sig00000750
    );
  blk00000003_blk00000670 : LUT6
    generic map(
      INIT => X"FF00F0F0CCCCAAAA"
    )
    port map (
      I0 => blk00000003_sig00000662,
      I1 => blk00000003_sig00000660,
      I2 => blk00000003_sig0000065e,
      I3 => blk00000003_sig0000065c,
      I4 => blk00000003_sig000006e4,
      I5 => blk00000003_sig000006e6,
      O => blk00000003_sig0000074c
    );
  blk00000003_blk0000066f : LUT6
    generic map(
      INIT => X"FF00F0F0CCCCAAAA"
    )
    port map (
      I0 => blk00000003_sig00000660,
      I1 => blk00000003_sig0000065e,
      I2 => blk00000003_sig0000065c,
      I3 => blk00000003_sig0000065a,
      I4 => blk00000003_sig000006e4,
      I5 => blk00000003_sig000006e6,
      O => blk00000003_sig00000748
    );
  blk00000003_blk0000066e : LUT6
    generic map(
      INIT => X"FF00F0F0CCCCAAAA"
    )
    port map (
      I0 => blk00000003_sig0000065e,
      I1 => blk00000003_sig0000065c,
      I2 => blk00000003_sig0000065a,
      I3 => blk00000003_sig000006e0,
      I4 => blk00000003_sig000006e4,
      I5 => blk00000003_sig000006e6,
      O => blk00000003_sig00000744
    );
  blk00000003_blk0000066d : LUT6
    generic map(
      INIT => X"FF00F0F0CCCCAAAA"
    )
    port map (
      I0 => blk00000003_sig0000065c,
      I1 => blk00000003_sig0000065a,
      I2 => blk00000003_sig000006e0,
      I3 => blk00000003_sig00000655,
      I4 => blk00000003_sig000006e4,
      I5 => blk00000003_sig000006e6,
      O => blk00000003_sig00000740
    );
  blk00000003_blk0000066c : LUT6
    generic map(
      INIT => X"FF00F0F0CCCCAAAA"
    )
    port map (
      I0 => blk00000003_sig0000065a,
      I1 => blk00000003_sig000006e0,
      I2 => blk00000003_sig00000655,
      I3 => blk00000003_sig00000654,
      I4 => blk00000003_sig000006e4,
      I5 => blk00000003_sig000006e6,
      O => blk00000003_sig0000073c
    );
  blk00000003_blk0000066b : LUT6
    generic map(
      INIT => X"FF00F0F0CCCCAAAA"
    )
    port map (
      I0 => blk00000003_sig000006e0,
      I1 => blk00000003_sig00000655,
      I2 => blk00000003_sig00000654,
      I3 => blk00000003_sig00000653,
      I4 => blk00000003_sig000006e4,
      I5 => blk00000003_sig000006e6,
      O => blk00000003_sig00000738
    );
  blk00000003_blk0000066a : LUT6
    generic map(
      INIT => X"FF00F0F0CCCCAAAA"
    )
    port map (
      I0 => blk00000003_sig00000651,
      I1 => blk00000003_sig00000650,
      I2 => blk00000003_sig00000662,
      I3 => blk00000003_sig00000660,
      I4 => blk00000003_sig000006e4,
      I5 => blk00000003_sig000006e6,
      O => blk00000003_sig00000765
    );
  blk00000003_blk00000669 : LUT6
    generic map(
      INIT => X"FF00F0F0CCCCAAAA"
    )
    port map (
      I0 => blk00000003_sig00000650,
      I1 => blk00000003_sig00000662,
      I2 => blk00000003_sig00000660,
      I3 => blk00000003_sig0000065e,
      I4 => blk00000003_sig000006e4,
      I5 => blk00000003_sig000006e6,
      O => blk00000003_sig00000761
    );
  blk00000003_blk00000668 : LUT6
    generic map(
      INIT => X"FF00F0F0CCCCAAAA"
    )
    port map (
      I0 => blk00000003_sig00000662,
      I1 => blk00000003_sig00000660,
      I2 => blk00000003_sig0000065e,
      I3 => blk00000003_sig0000065c,
      I4 => blk00000003_sig000006e4,
      I5 => blk00000003_sig000006e6,
      O => blk00000003_sig0000075d
    );
  blk00000003_blk00000667 : LUT6
    generic map(
      INIT => X"FF00F0F0CCCCAAAA"
    )
    port map (
      I0 => blk00000003_sig00000660,
      I1 => blk00000003_sig0000065e,
      I2 => blk00000003_sig0000065c,
      I3 => blk00000003_sig0000065a,
      I4 => blk00000003_sig000006e4,
      I5 => blk00000003_sig000006e6,
      O => blk00000003_sig00000759
    );
  blk00000003_blk00000666 : LUT6
    generic map(
      INIT => X"FF00F0F0CCCCAAAA"
    )
    port map (
      I0 => blk00000003_sig0000065e,
      I1 => blk00000003_sig0000065c,
      I2 => blk00000003_sig0000065a,
      I3 => blk00000003_sig000006e0,
      I4 => blk00000003_sig000006e4,
      I5 => blk00000003_sig000006e6,
      O => blk00000003_sig00000755
    );
  blk00000003_blk00000665 : LUT6
    generic map(
      INIT => X"FF00F0F0CCCCAAAA"
    )
    port map (
      I0 => blk00000003_sig0000065c,
      I1 => blk00000003_sig0000065a,
      I2 => blk00000003_sig000006e0,
      I3 => blk00000003_sig00000655,
      I4 => blk00000003_sig000006e4,
      I5 => blk00000003_sig000006e6,
      O => blk00000003_sig00000751
    );
  blk00000003_blk00000664 : LUT6
    generic map(
      INIT => X"FF00F0F0CCCCAAAA"
    )
    port map (
      I0 => blk00000003_sig0000065a,
      I1 => blk00000003_sig000006e0,
      I2 => blk00000003_sig00000655,
      I3 => blk00000003_sig00000654,
      I4 => blk00000003_sig000006e4,
      I5 => blk00000003_sig000006e6,
      O => blk00000003_sig0000074d
    );
  blk00000003_blk00000663 : LUT6
    generic map(
      INIT => X"FF00F0F0CCCCAAAA"
    )
    port map (
      I0 => blk00000003_sig000006e0,
      I1 => blk00000003_sig00000655,
      I2 => blk00000003_sig00000654,
      I3 => blk00000003_sig00000653,
      I4 => blk00000003_sig000006e4,
      I5 => blk00000003_sig000006e6,
      O => blk00000003_sig00000749
    );
  blk00000003_blk00000662 : LUT6
    generic map(
      INIT => X"FF00F0F0CCCCAAAA"
    )
    port map (
      I0 => blk00000003_sig00000655,
      I1 => blk00000003_sig00000654,
      I2 => blk00000003_sig00000653,
      I3 => blk00000003_sig00000652,
      I4 => blk00000003_sig000006e4,
      I5 => blk00000003_sig000006e6,
      O => blk00000003_sig00000745
    );
  blk00000003_blk00000661 : LUT6
    generic map(
      INIT => X"FF00F0F0CCCCAAAA"
    )
    port map (
      I0 => blk00000003_sig00000654,
      I1 => blk00000003_sig00000653,
      I2 => blk00000003_sig00000652,
      I3 => blk00000003_sig00000651,
      I4 => blk00000003_sig000006e4,
      I5 => blk00000003_sig000006e6,
      O => blk00000003_sig00000741
    );
  blk00000003_blk00000660 : LUT6
    generic map(
      INIT => X"FF00F0F0CCCCAAAA"
    )
    port map (
      I0 => blk00000003_sig00000653,
      I1 => blk00000003_sig00000652,
      I2 => blk00000003_sig00000651,
      I3 => blk00000003_sig00000650,
      I4 => blk00000003_sig000006e4,
      I5 => blk00000003_sig000006e6,
      O => blk00000003_sig0000073d
    );
  blk00000003_blk0000065f : LUT6
    generic map(
      INIT => X"FF00F0F0CCCCAAAA"
    )
    port map (
      I0 => blk00000003_sig00000652,
      I1 => blk00000003_sig00000651,
      I2 => blk00000003_sig00000650,
      I3 => blk00000003_sig00000662,
      I4 => blk00000003_sig000006e4,
      I5 => blk00000003_sig000006e6,
      O => blk00000003_sig00000739
    );
  blk00000003_blk0000065e : LUT6
    generic map(
      INIT => X"FF00F0F0CCCCAAAA"
    )
    port map (
      I0 => blk00000003_sig0000065e,
      I1 => blk00000003_sig0000065c,
      I2 => blk00000003_sig0000065a,
      I3 => blk00000003_sig000006e0,
      I4 => blk00000003_sig000006e4,
      I5 => blk00000003_sig000006e6,
      O => blk00000003_sig00000762
    );
  blk00000003_blk0000065d : LUT6
    generic map(
      INIT => X"FF00F0F0CCCCAAAA"
    )
    port map (
      I0 => blk00000003_sig0000065c,
      I1 => blk00000003_sig0000065a,
      I2 => blk00000003_sig000006e0,
      I3 => blk00000003_sig00000655,
      I4 => blk00000003_sig000006e4,
      I5 => blk00000003_sig000006e6,
      O => blk00000003_sig0000075e
    );
  blk00000003_blk0000065c : LUT6
    generic map(
      INIT => X"FF00F0F0CCCCAAAA"
    )
    port map (
      I0 => blk00000003_sig0000065a,
      I1 => blk00000003_sig000006e0,
      I2 => blk00000003_sig00000655,
      I3 => blk00000003_sig00000654,
      I4 => blk00000003_sig000006e4,
      I5 => blk00000003_sig000006e6,
      O => blk00000003_sig0000075a
    );
  blk00000003_blk0000065b : LUT6
    generic map(
      INIT => X"FF00F0F0CCCCAAAA"
    )
    port map (
      I0 => blk00000003_sig000006e0,
      I1 => blk00000003_sig00000655,
      I2 => blk00000003_sig00000654,
      I3 => blk00000003_sig00000653,
      I4 => blk00000003_sig000006e4,
      I5 => blk00000003_sig000006e6,
      O => blk00000003_sig00000756
    );
  blk00000003_blk0000065a : LUT6
    generic map(
      INIT => X"FF00F0F0CCCCAAAA"
    )
    port map (
      I0 => blk00000003_sig00000655,
      I1 => blk00000003_sig00000654,
      I2 => blk00000003_sig00000653,
      I3 => blk00000003_sig00000652,
      I4 => blk00000003_sig000006e4,
      I5 => blk00000003_sig000006e6,
      O => blk00000003_sig00000752
    );
  blk00000003_blk00000659 : LUT6
    generic map(
      INIT => X"FF00F0F0CCCCAAAA"
    )
    port map (
      I0 => blk00000003_sig00000654,
      I1 => blk00000003_sig00000653,
      I2 => blk00000003_sig00000652,
      I3 => blk00000003_sig00000651,
      I4 => blk00000003_sig000006e4,
      I5 => blk00000003_sig000006e6,
      O => blk00000003_sig0000074e
    );
  blk00000003_blk00000658 : LUT6
    generic map(
      INIT => X"FF00F0F0CCCCAAAA"
    )
    port map (
      I0 => blk00000003_sig00000653,
      I1 => blk00000003_sig00000652,
      I2 => blk00000003_sig00000651,
      I3 => blk00000003_sig00000650,
      I4 => blk00000003_sig000006e4,
      I5 => blk00000003_sig000006e6,
      O => blk00000003_sig0000074a
    );
  blk00000003_blk00000657 : LUT6
    generic map(
      INIT => X"FF00F0F0CCCCAAAA"
    )
    port map (
      I0 => blk00000003_sig00000652,
      I1 => blk00000003_sig00000651,
      I2 => blk00000003_sig00000650,
      I3 => blk00000003_sig00000662,
      I4 => blk00000003_sig000006e4,
      I5 => blk00000003_sig000006e6,
      O => blk00000003_sig00000746
    );
  blk00000003_blk00000656 : LUT6
    generic map(
      INIT => X"FF00F0F0CCCCAAAA"
    )
    port map (
      I0 => blk00000003_sig00000651,
      I1 => blk00000003_sig00000650,
      I2 => blk00000003_sig00000662,
      I3 => blk00000003_sig00000660,
      I4 => blk00000003_sig000006e4,
      I5 => blk00000003_sig000006e6,
      O => blk00000003_sig00000742
    );
  blk00000003_blk00000655 : LUT6
    generic map(
      INIT => X"FF00F0F0CCCCAAAA"
    )
    port map (
      I0 => blk00000003_sig00000650,
      I1 => blk00000003_sig00000662,
      I2 => blk00000003_sig00000660,
      I3 => blk00000003_sig0000065e,
      I4 => blk00000003_sig000006e4,
      I5 => blk00000003_sig000006e6,
      O => blk00000003_sig0000073e
    );
  blk00000003_blk00000654 : LUT6
    generic map(
      INIT => X"FF00F0F0CCCCAAAA"
    )
    port map (
      I0 => blk00000003_sig00000662,
      I1 => blk00000003_sig00000660,
      I2 => blk00000003_sig0000065e,
      I3 => blk00000003_sig0000065c,
      I4 => blk00000003_sig000006e4,
      I5 => blk00000003_sig000006e6,
      O => blk00000003_sig0000073a
    );
  blk00000003_blk00000653 : LUT6
    generic map(
      INIT => X"FF00F0F0CCCCAAAA"
    )
    port map (
      I0 => blk00000003_sig00000660,
      I1 => blk00000003_sig0000065e,
      I2 => blk00000003_sig0000065c,
      I3 => blk00000003_sig0000065a,
      I4 => blk00000003_sig000006e4,
      I5 => blk00000003_sig000006e6,
      O => blk00000003_sig00000736
    );
  blk00000003_blk00000652 : LUT6
    generic map(
      INIT => X"FF00F0F0CCCCAAAA"
    )
    port map (
      I0 => blk00000003_sig00000082,
      I1 => blk00000003_sig00000082,
      I2 => blk00000003_sig00000082,
      I3 => blk00000003_sig00000082,
      I4 => blk00000003_sig000006e4,
      I5 => blk00000003_sig000006e6,
      O => blk00000003_sig00000763
    );
  blk00000003_blk00000651 : LUT6
    generic map(
      INIT => X"FF00F0F0CCCCAAAA"
    )
    port map (
      I0 => blk00000003_sig00000082,
      I1 => blk00000003_sig00000082,
      I2 => blk00000003_sig00000082,
      I3 => blk00000003_sig00000082,
      I4 => blk00000003_sig000006e4,
      I5 => blk00000003_sig000006e6,
      O => blk00000003_sig0000075f
    );
  blk00000003_blk00000650 : LUT6
    generic map(
      INIT => X"FF00F0F0CCCCAAAA"
    )
    port map (
      I0 => blk00000003_sig00000082,
      I1 => blk00000003_sig00000082,
      I2 => blk00000003_sig00000082,
      I3 => blk00000003_sig00000082,
      I4 => blk00000003_sig000006e4,
      I5 => blk00000003_sig000006e6,
      O => blk00000003_sig0000075b
    );
  blk00000003_blk0000064f : LUT6
    generic map(
      INIT => X"FF00F0F0CCCCAAAA"
    )
    port map (
      I0 => blk00000003_sig00000082,
      I1 => blk00000003_sig00000082,
      I2 => blk00000003_sig00000082,
      I3 => blk00000003_sig00000082,
      I4 => blk00000003_sig000006e4,
      I5 => blk00000003_sig000006e6,
      O => blk00000003_sig00000757
    );
  blk00000003_blk0000064e : LUT6
    generic map(
      INIT => X"FF00F0F0CCCCAAAA"
    )
    port map (
      I0 => blk00000003_sig00000082,
      I1 => blk00000003_sig00000082,
      I2 => blk00000003_sig00000082,
      I3 => blk00000003_sig00000082,
      I4 => blk00000003_sig000006e4,
      I5 => blk00000003_sig000006e6,
      O => blk00000003_sig00000753
    );
  blk00000003_blk0000064d : LUT6
    generic map(
      INIT => X"FF00F0F0CCCCAAAA"
    )
    port map (
      I0 => blk00000003_sig00000082,
      I1 => blk00000003_sig00000082,
      I2 => blk00000003_sig00000082,
      I3 => blk00000003_sig00000082,
      I4 => blk00000003_sig000006e4,
      I5 => blk00000003_sig000006e6,
      O => blk00000003_sig0000074f
    );
  blk00000003_blk0000064c : LUT6
    generic map(
      INIT => X"FF00F0F0CCCCAAAA"
    )
    port map (
      I0 => blk00000003_sig00000082,
      I1 => blk00000003_sig00000082,
      I2 => blk00000003_sig00000082,
      I3 => blk00000003_sig00000082,
      I4 => blk00000003_sig000006e4,
      I5 => blk00000003_sig000006e6,
      O => blk00000003_sig0000074b
    );
  blk00000003_blk0000064b : LUT6
    generic map(
      INIT => X"FF00F0F0CCCCAAAA"
    )
    port map (
      I0 => blk00000003_sig00000082,
      I1 => blk00000003_sig00000082,
      I2 => blk00000003_sig00000082,
      I3 => blk00000003_sig00000082,
      I4 => blk00000003_sig000006e4,
      I5 => blk00000003_sig000006e6,
      O => blk00000003_sig00000747
    );
  blk00000003_blk0000064a : LUT6
    generic map(
      INIT => X"FF00F0F0CCCCAAAA"
    )
    port map (
      I0 => blk00000003_sig00000082,
      I1 => blk00000003_sig00000082,
      I2 => blk00000003_sig00000082,
      I3 => blk00000003_sig00000082,
      I4 => blk00000003_sig000006e4,
      I5 => blk00000003_sig000006e6,
      O => blk00000003_sig00000743
    );
  blk00000003_blk00000649 : LUT6
    generic map(
      INIT => X"FF00F0F0CCCCAAAA"
    )
    port map (
      I0 => blk00000003_sig00000082,
      I1 => blk00000003_sig00000082,
      I2 => blk00000003_sig00000082,
      I3 => blk00000003_sig00000082,
      I4 => blk00000003_sig000006e4,
      I5 => blk00000003_sig000006e6,
      O => blk00000003_sig0000073f
    );
  blk00000003_blk00000648 : LUT6
    generic map(
      INIT => X"FF00F0F0CCCCAAAA"
    )
    port map (
      I0 => blk00000003_sig00000082,
      I1 => blk00000003_sig00000082,
      I2 => blk00000003_sig00000082,
      I3 => blk00000003_sig00000082,
      I4 => blk00000003_sig000006e4,
      I5 => blk00000003_sig000006e6,
      O => blk00000003_sig0000073b
    );
  blk00000003_blk00000647 : LUT6
    generic map(
      INIT => X"FF00F0F0CCCCAAAA"
    )
    port map (
      I0 => blk00000003_sig00000082,
      I1 => blk00000003_sig00000082,
      I2 => blk00000003_sig00000082,
      I3 => blk00000003_sig00000082,
      I4 => blk00000003_sig000006e4,
      I5 => blk00000003_sig000006e6,
      O => blk00000003_sig00000737
    );
  blk00000003_blk00000646 : MUXF7
    port map (
      I0 => blk00000003_sig00000764,
      I1 => blk00000003_sig00000765,
      S => blk00000003_sig000006e8,
      O => blk00000003_sig00000733
    );
  blk00000003_blk00000645 : MUXF7
    port map (
      I0 => blk00000003_sig00000762,
      I1 => blk00000003_sig00000763,
      S => blk00000003_sig000006e8,
      O => blk00000003_sig00000734
    );
  blk00000003_blk00000644 : MUXF7
    port map (
      I0 => blk00000003_sig00000760,
      I1 => blk00000003_sig00000761,
      S => blk00000003_sig000006e8,
      O => blk00000003_sig00000730
    );
  blk00000003_blk00000643 : MUXF7
    port map (
      I0 => blk00000003_sig0000075e,
      I1 => blk00000003_sig0000075f,
      S => blk00000003_sig000006e8,
      O => blk00000003_sig00000731
    );
  blk00000003_blk00000642 : MUXF7
    port map (
      I0 => blk00000003_sig0000075c,
      I1 => blk00000003_sig0000075d,
      S => blk00000003_sig000006e8,
      O => blk00000003_sig0000072d
    );
  blk00000003_blk00000641 : MUXF7
    port map (
      I0 => blk00000003_sig0000075a,
      I1 => blk00000003_sig0000075b,
      S => blk00000003_sig000006e8,
      O => blk00000003_sig0000072e
    );
  blk00000003_blk00000640 : MUXF7
    port map (
      I0 => blk00000003_sig00000758,
      I1 => blk00000003_sig00000759,
      S => blk00000003_sig000006e8,
      O => blk00000003_sig0000072a
    );
  blk00000003_blk0000063f : MUXF7
    port map (
      I0 => blk00000003_sig00000756,
      I1 => blk00000003_sig00000757,
      S => blk00000003_sig000006e8,
      O => blk00000003_sig0000072b
    );
  blk00000003_blk0000063e : MUXF7
    port map (
      I0 => blk00000003_sig00000754,
      I1 => blk00000003_sig00000755,
      S => blk00000003_sig000006e8,
      O => blk00000003_sig00000727
    );
  blk00000003_blk0000063d : MUXF7
    port map (
      I0 => blk00000003_sig00000752,
      I1 => blk00000003_sig00000753,
      S => blk00000003_sig000006e8,
      O => blk00000003_sig00000728
    );
  blk00000003_blk0000063c : MUXF7
    port map (
      I0 => blk00000003_sig00000750,
      I1 => blk00000003_sig00000751,
      S => blk00000003_sig000006e8,
      O => blk00000003_sig00000724
    );
  blk00000003_blk0000063b : MUXF7
    port map (
      I0 => blk00000003_sig0000074e,
      I1 => blk00000003_sig0000074f,
      S => blk00000003_sig000006e8,
      O => blk00000003_sig00000725
    );
  blk00000003_blk0000063a : MUXF7
    port map (
      I0 => blk00000003_sig0000074c,
      I1 => blk00000003_sig0000074d,
      S => blk00000003_sig000006e8,
      O => blk00000003_sig00000721
    );
  blk00000003_blk00000639 : MUXF7
    port map (
      I0 => blk00000003_sig0000074a,
      I1 => blk00000003_sig0000074b,
      S => blk00000003_sig000006e8,
      O => blk00000003_sig00000722
    );
  blk00000003_blk00000638 : MUXF7
    port map (
      I0 => blk00000003_sig00000748,
      I1 => blk00000003_sig00000749,
      S => blk00000003_sig000006e8,
      O => blk00000003_sig0000071e
    );
  blk00000003_blk00000637 : MUXF7
    port map (
      I0 => blk00000003_sig00000746,
      I1 => blk00000003_sig00000747,
      S => blk00000003_sig000006e8,
      O => blk00000003_sig0000071f
    );
  blk00000003_blk00000636 : MUXF7
    port map (
      I0 => blk00000003_sig00000744,
      I1 => blk00000003_sig00000745,
      S => blk00000003_sig000006e8,
      O => blk00000003_sig0000071b
    );
  blk00000003_blk00000635 : MUXF7
    port map (
      I0 => blk00000003_sig00000742,
      I1 => blk00000003_sig00000743,
      S => blk00000003_sig000006e8,
      O => blk00000003_sig0000071c
    );
  blk00000003_blk00000634 : MUXF7
    port map (
      I0 => blk00000003_sig00000740,
      I1 => blk00000003_sig00000741,
      S => blk00000003_sig000006e8,
      O => blk00000003_sig00000718
    );
  blk00000003_blk00000633 : MUXF7
    port map (
      I0 => blk00000003_sig0000073e,
      I1 => blk00000003_sig0000073f,
      S => blk00000003_sig000006e8,
      O => blk00000003_sig00000719
    );
  blk00000003_blk00000632 : MUXF7
    port map (
      I0 => blk00000003_sig0000073c,
      I1 => blk00000003_sig0000073d,
      S => blk00000003_sig000006e8,
      O => blk00000003_sig00000715
    );
  blk00000003_blk00000631 : MUXF7
    port map (
      I0 => blk00000003_sig0000073a,
      I1 => blk00000003_sig0000073b,
      S => blk00000003_sig000006e8,
      O => blk00000003_sig00000716
    );
  blk00000003_blk00000630 : MUXF7
    port map (
      I0 => blk00000003_sig00000738,
      I1 => blk00000003_sig00000739,
      S => blk00000003_sig000006e8,
      O => blk00000003_sig00000712
    );
  blk00000003_blk0000062f : MUXF7
    port map (
      I0 => blk00000003_sig00000736,
      I1 => blk00000003_sig00000737,
      S => blk00000003_sig000006e8,
      O => blk00000003_sig00000713
    );
  blk00000003_blk0000062e : MUXF8
    port map (
      I0 => blk00000003_sig00000733,
      I1 => blk00000003_sig00000734,
      S => blk00000003_sig000006ea,
      O => blk00000003_sig00000735
    );
  blk00000003_blk0000062d : MUXF8
    port map (
      I0 => blk00000003_sig00000730,
      I1 => blk00000003_sig00000731,
      S => blk00000003_sig000006ea,
      O => blk00000003_sig00000732
    );
  blk00000003_blk0000062c : MUXF8
    port map (
      I0 => blk00000003_sig0000072d,
      I1 => blk00000003_sig0000072e,
      S => blk00000003_sig000006ea,
      O => blk00000003_sig0000072f
    );
  blk00000003_blk0000062b : MUXF8
    port map (
      I0 => blk00000003_sig0000072a,
      I1 => blk00000003_sig0000072b,
      S => blk00000003_sig000006ea,
      O => blk00000003_sig0000072c
    );
  blk00000003_blk0000062a : MUXF8
    port map (
      I0 => blk00000003_sig00000727,
      I1 => blk00000003_sig00000728,
      S => blk00000003_sig000006ea,
      O => blk00000003_sig00000729
    );
  blk00000003_blk00000629 : MUXF8
    port map (
      I0 => blk00000003_sig00000724,
      I1 => blk00000003_sig00000725,
      S => blk00000003_sig000006ea,
      O => blk00000003_sig00000726
    );
  blk00000003_blk00000628 : MUXF8
    port map (
      I0 => blk00000003_sig00000721,
      I1 => blk00000003_sig00000722,
      S => blk00000003_sig000006ea,
      O => blk00000003_sig00000723
    );
  blk00000003_blk00000627 : MUXF8
    port map (
      I0 => blk00000003_sig0000071e,
      I1 => blk00000003_sig0000071f,
      S => blk00000003_sig000006ea,
      O => blk00000003_sig00000720
    );
  blk00000003_blk00000626 : MUXF8
    port map (
      I0 => blk00000003_sig0000071b,
      I1 => blk00000003_sig0000071c,
      S => blk00000003_sig000006ea,
      O => blk00000003_sig0000071d
    );
  blk00000003_blk00000625 : MUXF8
    port map (
      I0 => blk00000003_sig00000718,
      I1 => blk00000003_sig00000719,
      S => blk00000003_sig000006ea,
      O => blk00000003_sig0000071a
    );
  blk00000003_blk00000624 : MUXF8
    port map (
      I0 => blk00000003_sig00000715,
      I1 => blk00000003_sig00000716,
      S => blk00000003_sig000006ea,
      O => blk00000003_sig00000717
    );
  blk00000003_blk00000623 : MUXF8
    port map (
      I0 => blk00000003_sig00000712,
      I1 => blk00000003_sig00000713,
      S => blk00000003_sig000006ea,
      O => blk00000003_sig00000714
    );
  blk00000003_blk00000622 : FDS
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      D => blk00000003_sig00000710,
      S => sclr,
      Q => blk00000003_sig00000711
    );
  blk00000003_blk00000621 : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000694,
      R => sclr,
      Q => blk00000003_sig0000070f
    );
  blk00000003_blk00000620 : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig0000070d,
      R => sclr,
      Q => blk00000003_sig0000070e
    );
  blk00000003_blk0000061f : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig0000070c,
      R => sclr,
      Q => blk00000003_sig00000622
    );
  blk00000003_blk0000061e : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig0000070b,
      R => sclr,
      Q => blk00000003_sig0000070a
    );
  blk00000003_blk0000061d : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000006e1,
      R => sclr,
      Q => blk00000003_sig00000709
    );
  blk00000003_blk0000061c : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig0000070a,
      R => sclr,
      Q => blk00000003_sig00000182
    );
  blk00000003_blk0000061b : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000709,
      R => sclr,
      Q => blk00000003_sig00000538
    );
  blk00000003_blk0000061a : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000696,
      R => sclr,
      Q => blk00000003_sig00000695
    );
  blk00000003_blk00000619 : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000695,
      R => sclr,
      Q => blk00000003_sig00000708
    );
  blk00000003_blk00000618 : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000706,
      R => sclr,
      Q => blk00000003_sig00000707
    );
  blk00000003_blk00000617 : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000704,
      R => sclr,
      Q => blk00000003_sig00000705
    );
  blk00000003_blk00000616 : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000702,
      R => sclr,
      Q => blk00000003_sig00000703
    );
  blk00000003_blk00000615 : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000700,
      R => sclr,
      Q => blk00000003_sig00000701
    );
  blk00000003_blk00000614 : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000006fe,
      R => sclr,
      Q => blk00000003_sig000006ff
    );
  blk00000003_blk00000613 : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000006fc,
      R => sclr,
      Q => blk00000003_sig000006fd
    );
  blk00000003_blk00000612 : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000006fa,
      R => sclr,
      Q => blk00000003_sig000006fb
    );
  blk00000003_blk00000611 : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000006f8,
      R => sclr,
      Q => blk00000003_sig000006f9
    );
  blk00000003_blk00000610 : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000006f6,
      R => sclr,
      Q => blk00000003_sig000006f7
    );
  blk00000003_blk0000060f : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000006f4,
      R => sclr,
      Q => blk00000003_sig000006f5
    );
  blk00000003_blk0000060e : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000006f2,
      R => sclr,
      Q => blk00000003_sig000006f3
    );
  blk00000003_blk0000060d : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000006f0,
      R => sclr,
      Q => blk00000003_sig000006f1
    );
  blk00000003_blk0000060c : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000697,
      R => sclr,
      Q => blk00000003_sig000006ee
    );
  blk00000003_blk0000060b : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000006ee,
      R => sclr,
      Q => blk00000003_sig000006ed
    );
  blk00000003_blk0000060a : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig0000069a,
      R => sclr,
      Q => blk00000003_sig000006ef
    );
  blk00000003_blk00000609 : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000006ee,
      R => sclr,
      Q => blk00000003_sig000006ec
    );
  blk00000003_blk00000608 : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000006ed,
      R => sclr,
      Q => blk00000003_sig000006eb
    );
  blk00000003_blk00000607 : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000006ec,
      R => sclr,
      Q => blk00000003_sig00000621
    );
  blk00000003_blk00000606 : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000006eb,
      R => sclr,
      Q => blk00000003_sig00000620
    );
  blk00000003_blk00000605 : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig0000069c,
      R => sclr,
      Q => blk00000003_sig00000698
    );
  blk00000003_blk00000604 : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig0000069f,
      R => sclr,
      Q => blk00000003_sig0000069d
    );
  blk00000003_blk00000603 : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000006a2,
      R => sclr,
      Q => blk00000003_sig000006a0
    );
  blk00000003_blk00000602 : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000006a5,
      R => sclr,
      Q => blk00000003_sig000006a3
    );
  blk00000003_blk00000601 : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000006a8,
      R => sclr,
      Q => blk00000003_sig000006a6
    );
  blk00000003_blk00000600 : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000006ab,
      R => sclr,
      Q => blk00000003_sig000006a9
    );
  blk00000003_blk000005ff : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000006ae,
      R => sclr,
      Q => blk00000003_sig000006ac
    );
  blk00000003_blk000005fe : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000006b1,
      R => sclr,
      Q => blk00000003_sig000006af
    );
  blk00000003_blk000005fd : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000006b4,
      R => sclr,
      Q => blk00000003_sig000006b2
    );
  blk00000003_blk000005fc : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000006b7,
      R => sclr,
      Q => blk00000003_sig000006b5
    );
  blk00000003_blk000005fb : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000006ba,
      R => sclr,
      Q => blk00000003_sig000006b8
    );
  blk00000003_blk000005fa : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig000006e2,
      D => blk00000003_sig000006e9,
      Q => blk00000003_sig000006ea
    );
  blk00000003_blk000005f9 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig000006e2,
      D => blk00000003_sig000006e7,
      Q => blk00000003_sig000006e8
    );
  blk00000003_blk000005f8 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig000006e2,
      D => blk00000003_sig000006e5,
      Q => blk00000003_sig000006e6
    );
  blk00000003_blk000005f7 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig000006e2,
      D => blk00000003_sig000006e3,
      Q => blk00000003_sig000006e4
    );
  blk00000003_blk000005f6 : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000006e0,
      R => sclr,
      Q => blk00000003_sig000006e1
    );
  blk00000003_blk000005f5 : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000006de,
      R => sclr,
      Q => blk00000003_sig000006df
    );
  blk00000003_blk000005f4 : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000006dc,
      R => sclr,
      Q => blk00000003_sig000006dd
    );
  blk00000003_blk000005f3 : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000006da,
      R => sclr,
      Q => blk00000003_sig000006db
    );
  blk00000003_blk000005f2 : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000006d8,
      R => sclr,
      Q => blk00000003_sig000006d9
    );
  blk00000003_blk000005f1 : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000006d6,
      R => sclr,
      Q => blk00000003_sig000006d7
    );
  blk00000003_blk000005f0 : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000006d4,
      R => sclr,
      Q => blk00000003_sig000006d5
    );
  blk00000003_blk000005ef : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000006d2,
      R => sclr,
      Q => blk00000003_sig000006d3
    );
  blk00000003_blk000005ee : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000679,
      R => sclr,
      Q => blk00000003_sig000006d1
    );
  blk00000003_blk000005ed : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000006cf,
      R => sclr,
      Q => blk00000003_sig000006d0
    );
  blk00000003_blk000005ec : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000006cd,
      R => sclr,
      Q => blk00000003_sig000006ce
    );
  blk00000003_blk000005eb : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000006cb,
      R => sclr,
      Q => blk00000003_sig000006cc
    );
  blk00000003_blk000005ea : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000082,
      R => sclr,
      Q => blk00000003_sig000006ca
    );
  blk00000003_blk000005e9 : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000655,
      R => sclr,
      Q => blk00000003_sig000006c8
    );
  blk00000003_blk000005e8 : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000654,
      R => sclr,
      Q => blk00000003_sig000006c7
    );
  blk00000003_blk000005e7 : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000653,
      R => sclr,
      Q => blk00000003_sig000006c6
    );
  blk00000003_blk000005e6 : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000652,
      R => sclr,
      Q => blk00000003_sig000006c5
    );
  blk00000003_blk000005e5 : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000651,
      R => sclr,
      Q => blk00000003_sig000006c4
    );
  blk00000003_blk000005e4 : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000650,
      R => sclr,
      Q => blk00000003_sig000006c3
    );
  blk00000003_blk000005e3 : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000662,
      R => sclr,
      Q => blk00000003_sig000006c2
    );
  blk00000003_blk000005e2 : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000660,
      R => sclr,
      Q => blk00000003_sig000006c1
    );
  blk00000003_blk000005e1 : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig0000065e,
      R => sclr,
      Q => blk00000003_sig000006c0
    );
  blk00000003_blk000005e0 : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig0000065c,
      R => sclr,
      Q => blk00000003_sig000006bf
    );
  blk00000003_blk000005df : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig0000065a,
      R => sclr,
      Q => blk00000003_sig000006be
    );
  blk00000003_blk000005de : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000658,
      R => sclr,
      Q => blk00000003_sig000006c9
    );
  blk00000003_blk000005dd : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000676,
      Q => blk00000003_sig00000699
    );
  blk00000003_blk000005dc : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000006c8,
      R => sclr,
      Q => blk00000003_sig000006b9
    );
  blk00000003_blk000005db : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000006c7,
      R => sclr,
      Q => blk00000003_sig000006b6
    );
  blk00000003_blk000005da : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000006c6,
      R => sclr,
      Q => blk00000003_sig000006b3
    );
  blk00000003_blk000005d9 : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000006c5,
      R => sclr,
      Q => blk00000003_sig000006b0
    );
  blk00000003_blk000005d8 : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000006c4,
      R => sclr,
      Q => blk00000003_sig000006ad
    );
  blk00000003_blk000005d7 : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000006c3,
      R => sclr,
      Q => blk00000003_sig000006aa
    );
  blk00000003_blk000005d6 : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000006c2,
      R => sclr,
      Q => blk00000003_sig000006a7
    );
  blk00000003_blk000005d5 : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000006c1,
      R => sclr,
      Q => blk00000003_sig000006a4
    );
  blk00000003_blk000005d4 : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000006c0,
      R => sclr,
      Q => blk00000003_sig000006a1
    );
  blk00000003_blk000005d3 : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000006bf,
      R => sclr,
      Q => blk00000003_sig0000069e
    );
  blk00000003_blk000005d2 : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000006be,
      R => sclr,
      Q => blk00000003_sig0000069b
    );
  blk00000003_blk000005d1 : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig0000067a,
      R => sclr,
      Q => blk00000003_sig000006bb
    );
  blk00000003_blk000005d0 : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000006bc,
      R => sclr,
      Q => blk00000003_sig000006bd
    );
  blk00000003_blk000005cf : LUT1
    generic map(
      INIT => X"1"
    )
    port map (
      I0 => sclr,
      O => blk00000003_sig0000067c
    );
  blk00000003_blk000005ce : LUT2
    generic map(
      INIT => X"8"
    )
    port map (
      I0 => blk00000003_sig0000064c,
      I1 => blk00000003_sig000006bb,
      O => blk00000003_sig000006bc
    );
  blk00000003_blk000005cd : LUT4
    generic map(
      INIT => X"2E22"
    )
    port map (
      I0 => blk00000003_sig000006b8,
      I1 => blk00000003_sig00000699,
      I2 => blk00000003_sig0000069a,
      I3 => blk00000003_sig000006b9,
      O => blk00000003_sig000006ba
    );
  blk00000003_blk000005cc : LUT4
    generic map(
      INIT => X"2E22"
    )
    port map (
      I0 => blk00000003_sig000006b5,
      I1 => blk00000003_sig00000699,
      I2 => blk00000003_sig0000069a,
      I3 => blk00000003_sig000006b6,
      O => blk00000003_sig000006b7
    );
  blk00000003_blk000005cb : LUT4
    generic map(
      INIT => X"2E22"
    )
    port map (
      I0 => blk00000003_sig000006b2,
      I1 => blk00000003_sig00000699,
      I2 => blk00000003_sig0000069a,
      I3 => blk00000003_sig000006b3,
      O => blk00000003_sig000006b4
    );
  blk00000003_blk000005ca : LUT4
    generic map(
      INIT => X"2E22"
    )
    port map (
      I0 => blk00000003_sig000006af,
      I1 => blk00000003_sig00000699,
      I2 => blk00000003_sig0000069a,
      I3 => blk00000003_sig000006b0,
      O => blk00000003_sig000006b1
    );
  blk00000003_blk000005c9 : LUT4
    generic map(
      INIT => X"2E22"
    )
    port map (
      I0 => blk00000003_sig000006ac,
      I1 => blk00000003_sig00000699,
      I2 => blk00000003_sig0000069a,
      I3 => blk00000003_sig000006ad,
      O => blk00000003_sig000006ae
    );
  blk00000003_blk000005c8 : LUT4
    generic map(
      INIT => X"2E22"
    )
    port map (
      I0 => blk00000003_sig000006a9,
      I1 => blk00000003_sig00000699,
      I2 => blk00000003_sig0000069a,
      I3 => blk00000003_sig000006aa,
      O => blk00000003_sig000006ab
    );
  blk00000003_blk000005c7 : LUT4
    generic map(
      INIT => X"2E22"
    )
    port map (
      I0 => blk00000003_sig000006a6,
      I1 => blk00000003_sig00000699,
      I2 => blk00000003_sig0000069a,
      I3 => blk00000003_sig000006a7,
      O => blk00000003_sig000006a8
    );
  blk00000003_blk000005c6 : LUT4
    generic map(
      INIT => X"2E22"
    )
    port map (
      I0 => blk00000003_sig000006a3,
      I1 => blk00000003_sig00000699,
      I2 => blk00000003_sig0000069a,
      I3 => blk00000003_sig000006a4,
      O => blk00000003_sig000006a5
    );
  blk00000003_blk000005c5 : LUT4
    generic map(
      INIT => X"2E22"
    )
    port map (
      I0 => blk00000003_sig000006a0,
      I1 => blk00000003_sig00000699,
      I2 => blk00000003_sig0000069a,
      I3 => blk00000003_sig000006a1,
      O => blk00000003_sig000006a2
    );
  blk00000003_blk000005c4 : LUT4
    generic map(
      INIT => X"2E22"
    )
    port map (
      I0 => blk00000003_sig0000069d,
      I1 => blk00000003_sig00000699,
      I2 => blk00000003_sig0000069a,
      I3 => blk00000003_sig0000069e,
      O => blk00000003_sig0000069f
    );
  blk00000003_blk000005c3 : LUT4
    generic map(
      INIT => X"2E22"
    )
    port map (
      I0 => blk00000003_sig00000698,
      I1 => blk00000003_sig00000699,
      I2 => blk00000003_sig0000069a,
      I3 => blk00000003_sig0000069b,
      O => blk00000003_sig0000069c
    );
  blk00000003_blk000005c2 : LUT3
    generic map(
      INIT => X"04"
    )
    port map (
      I0 => blk00000003_sig00000694,
      I1 => blk00000003_sig00000695,
      I2 => blk00000003_sig00000696,
      O => blk00000003_sig00000697
    );
  blk00000003_blk000005c1 : MUXCY
    port map (
      CI => blk00000003_sig00000088,
      DI => blk00000003_sig00000082,
      S => blk00000003_sig00000693,
      O => blk00000003_sig00000691
    );
  blk00000003_blk000005c0 : MUXCY
    port map (
      CI => blk00000003_sig00000691,
      DI => blk00000003_sig00000082,
      S => blk00000003_sig00000692,
      O => blk00000003_sig0000068f
    );
  blk00000003_blk000005bf : MUXCY
    port map (
      CI => blk00000003_sig0000068f,
      DI => blk00000003_sig00000082,
      S => blk00000003_sig00000690,
      O => blk00000003_sig0000068d
    );
  blk00000003_blk000005be : MUXCY
    port map (
      CI => blk00000003_sig0000068d,
      DI => blk00000003_sig00000082,
      S => blk00000003_sig0000068e,
      O => blk00000003_sig0000068b
    );
  blk00000003_blk000005bd : MUXCY
    port map (
      CI => blk00000003_sig0000068b,
      DI => blk00000003_sig00000082,
      S => blk00000003_sig0000068c,
      O => blk00000003_sig00000689
    );
  blk00000003_blk000005bc : MUXCY
    port map (
      CI => blk00000003_sig00000689,
      DI => blk00000003_sig00000082,
      S => blk00000003_sig0000068a,
      O => blk00000003_sig00000687
    );
  blk00000003_blk000005bb : MUXCY
    port map (
      CI => blk00000003_sig00000687,
      DI => blk00000003_sig00000082,
      S => blk00000003_sig00000688,
      O => blk00000003_sig00000685
    );
  blk00000003_blk000005ba : MUXCY
    port map (
      CI => blk00000003_sig00000685,
      DI => blk00000003_sig00000082,
      S => blk00000003_sig00000686,
      O => blk00000003_sig00000683
    );
  blk00000003_blk000005b9 : MUXCY
    port map (
      CI => blk00000003_sig00000683,
      DI => blk00000003_sig00000082,
      S => blk00000003_sig00000684,
      O => blk00000003_sig00000681
    );
  blk00000003_blk000005b8 : MUXCY
    port map (
      CI => blk00000003_sig00000681,
      DI => blk00000003_sig00000082,
      S => blk00000003_sig00000682,
      O => blk00000003_sig0000067f
    );
  blk00000003_blk000005b7 : MUXCY
    port map (
      CI => blk00000003_sig0000067f,
      DI => blk00000003_sig00000082,
      S => blk00000003_sig00000680,
      O => blk00000003_sig0000067d
    );
  blk00000003_blk000005b6 : MUXCY
    port map (
      CI => blk00000003_sig0000067d,
      DI => blk00000003_sig00000082,
      S => blk00000003_sig0000067e,
      O => blk00000003_sig0000067b
    );
  blk00000003_blk000005b5 : MUXCY
    port map (
      CI => blk00000003_sig0000067b,
      DI => blk00000003_sig00000082,
      S => blk00000003_sig0000067c,
      O => blk00000003_sig00000675
    );
  blk00000003_blk000005b4 : MUXCY
    port map (
      CI => blk00000003_sig00000678,
      DI => blk00000003_sig00000082,
      S => blk00000003_sig00000679,
      O => blk00000003_sig0000067a
    );
  blk00000003_blk000005b3 : MUXCY
    port map (
      CI => blk00000003_sig00000088,
      DI => blk00000003_sig00000082,
      S => blk00000003_sig00000677,
      O => blk00000003_sig00000678
    );
  blk00000003_blk000005b2 : XORCY
    port map (
      CI => blk00000003_sig00000675,
      LI => blk00000003_sig00000082,
      O => blk00000003_sig00000676
    );
  blk00000003_blk0000058c : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000656,
      D => blk00000003_sig00000668,
      R => blk00000003_sig00000631,
      Q => blk00000003_sig00000655
    );
  blk00000003_blk0000058b : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000656,
      D => blk00000003_sig00000667,
      R => blk00000003_sig00000631,
      Q => blk00000003_sig00000654
    );
  blk00000003_blk0000058a : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000656,
      D => blk00000003_sig00000666,
      R => blk00000003_sig00000631,
      Q => blk00000003_sig00000653
    );
  blk00000003_blk00000589 : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000656,
      D => blk00000003_sig00000665,
      R => blk00000003_sig00000631,
      Q => blk00000003_sig00000652
    );
  blk00000003_blk00000588 : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000656,
      D => blk00000003_sig00000664,
      R => blk00000003_sig00000631,
      Q => blk00000003_sig00000651
    );
  blk00000003_blk00000587 : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000656,
      D => blk00000003_sig00000663,
      R => blk00000003_sig00000631,
      Q => blk00000003_sig00000650
    );
  blk00000003_blk00000586 : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000656,
      D => blk00000003_sig00000661,
      R => blk00000003_sig00000631,
      Q => blk00000003_sig00000662
    );
  blk00000003_blk00000585 : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000656,
      D => blk00000003_sig0000065f,
      R => blk00000003_sig00000631,
      Q => blk00000003_sig00000660
    );
  blk00000003_blk00000584 : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000656,
      D => blk00000003_sig0000065d,
      R => blk00000003_sig00000631,
      Q => blk00000003_sig0000065e
    );
  blk00000003_blk00000583 : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000656,
      D => blk00000003_sig0000065b,
      R => blk00000003_sig00000631,
      Q => blk00000003_sig0000065c
    );
  blk00000003_blk00000582 : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000656,
      D => blk00000003_sig00000659,
      R => blk00000003_sig00000631,
      Q => blk00000003_sig0000065a
    );
  blk00000003_blk00000581 : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000656,
      D => blk00000003_sig00000657,
      R => blk00000003_sig00000631,
      Q => blk00000003_sig00000658
    );
  blk00000003_blk00000580 : FD
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      D => blk00000003_sig00000637,
      Q => blk00000003_sig0000064e
    );
  blk00000003_blk0000057f : FD
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      D => blk00000003_sig00000635,
      Q => blk00000003_sig0000064c
    );
  blk00000003_blk0000057e : FD
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      D => blk00000003_sig00000633,
      Q => blk00000003_sig0000064a
    );
  blk00000003_blk0000057d : LUT3
    generic map(
      INIT => X"8A"
    )
    port map (
      I0 => ce,
      I1 => blk00000003_sig00000088,
      I2 => blk00000003_sig0000064e,
      O => blk00000003_sig0000064f
    );
  blk00000003_blk0000057c : LUT3
    generic map(
      INIT => X"8A"
    )
    port map (
      I0 => ce,
      I1 => blk00000003_sig00000088,
      I2 => blk00000003_sig0000064e,
      O => blk00000003_sig0000064d
    );
  blk00000003_blk0000057b : LUT3
    generic map(
      INIT => X"8A"
    )
    port map (
      I0 => ce,
      I1 => blk00000003_sig00000088,
      I2 => blk00000003_sig0000064e,
      O => blk00000003_sig0000064b
    );
  blk00000003_blk0000057a : LUT4
    generic map(
      INIT => X"0001"
    )
    port map (
      I0 => blk00000003_sig00000623,
      I1 => blk00000003_sig0000062c,
      I2 => blk00000003_sig00000628,
      I3 => blk00000003_sig00000631,
      O => blk00000003_sig00000649
    );
  blk00000003_blk00000579 : LUT4
    generic map(
      INIT => X"0001"
    )
    port map (
      I0 => blk00000003_sig00000623,
      I1 => blk00000003_sig0000062c,
      I2 => blk00000003_sig00000628,
      I3 => blk00000003_sig00000631,
      O => blk00000003_sig00000647
    );
  blk00000003_blk00000578 : LUT4
    generic map(
      INIT => X"0001"
    )
    port map (
      I0 => blk00000003_sig00000623,
      I1 => blk00000003_sig0000062c,
      I2 => blk00000003_sig00000628,
      I3 => blk00000003_sig00000631,
      O => blk00000003_sig00000645
    );
  blk00000003_blk00000577 : LUT6
    generic map(
      INIT => X"8000000000000000"
    )
    port map (
      I0 => blk00000003_sig00000650,
      I1 => blk00000003_sig00000651,
      I2 => blk00000003_sig00000652,
      I3 => blk00000003_sig00000653,
      I4 => blk00000003_sig00000654,
      I5 => blk00000003_sig00000655,
      O => blk00000003_sig00000642
    );
  blk00000003_blk00000576 : LUT6
    generic map(
      INIT => X"8000000000000000"
    )
    port map (
      I0 => blk00000003_sig00000650,
      I1 => blk00000003_sig00000651,
      I2 => blk00000003_sig00000652,
      I3 => blk00000003_sig00000653,
      I4 => blk00000003_sig00000654,
      I5 => blk00000003_sig00000655,
      O => blk00000003_sig00000640
    );
  blk00000003_blk00000575 : LUT6
    generic map(
      INIT => X"8000000000000000"
    )
    port map (
      I0 => blk00000003_sig00000650,
      I1 => blk00000003_sig00000651,
      I2 => blk00000003_sig00000652,
      I3 => blk00000003_sig00000653,
      I4 => blk00000003_sig00000654,
      I5 => blk00000003_sig00000655,
      O => blk00000003_sig0000063e
    );
  blk00000003_blk00000574 : MUXCY
    port map (
      CI => blk00000003_sig00000643,
      DI => blk00000003_sig0000064e,
      S => blk00000003_sig0000064f,
      O => blk00000003_sig00000648
    );
  blk00000003_blk00000573 : MUXCY
    port map (
      CI => blk00000003_sig00000641,
      DI => blk00000003_sig0000064c,
      S => blk00000003_sig0000064d,
      O => blk00000003_sig00000646
    );
  blk00000003_blk00000572 : MUXCY
    port map (
      CI => blk00000003_sig0000063f,
      DI => blk00000003_sig0000064a,
      S => blk00000003_sig0000064b,
      O => blk00000003_sig00000644
    );
  blk00000003_blk00000571 : MUXCY
    port map (
      CI => blk00000003_sig00000648,
      DI => blk00000003_sig00000082,
      S => blk00000003_sig00000649,
      O => blk00000003_sig00000636
    );
  blk00000003_blk00000570 : MUXCY
    port map (
      CI => blk00000003_sig00000646,
      DI => blk00000003_sig00000082,
      S => blk00000003_sig00000647,
      O => blk00000003_sig00000634
    );
  blk00000003_blk0000056f : MUXCY
    port map (
      CI => blk00000003_sig00000644,
      DI => blk00000003_sig00000082,
      S => blk00000003_sig00000645,
      O => blk00000003_sig00000632
    );
  blk00000003_blk0000056e : MUXCY
    port map (
      CI => blk00000003_sig0000063d,
      DI => blk00000003_sig00000082,
      S => blk00000003_sig00000642,
      O => blk00000003_sig00000643
    );
  blk00000003_blk0000056d : MUXCY
    port map (
      CI => blk00000003_sig0000063b,
      DI => blk00000003_sig00000082,
      S => blk00000003_sig00000640,
      O => blk00000003_sig00000641
    );
  blk00000003_blk0000056c : MUXCY
    port map (
      CI => blk00000003_sig00000639,
      DI => blk00000003_sig00000082,
      S => blk00000003_sig0000063e,
      O => blk00000003_sig0000063f
    );
  blk00000003_blk0000056b : MUXCY
    port map (
      CI => blk00000003_sig00000088,
      DI => blk00000003_sig00000082,
      S => blk00000003_sig0000063c,
      O => blk00000003_sig0000063d
    );
  blk00000003_blk0000056a : MUXCY
    port map (
      CI => blk00000003_sig00000088,
      DI => blk00000003_sig00000082,
      S => blk00000003_sig0000063a,
      O => blk00000003_sig0000063b
    );
  blk00000003_blk00000569 : MUXCY
    port map (
      CI => blk00000003_sig00000088,
      DI => blk00000003_sig00000082,
      S => blk00000003_sig00000638,
      O => blk00000003_sig00000639
    );
  blk00000003_blk00000568 : XORCY
    port map (
      CI => blk00000003_sig00000636,
      LI => blk00000003_sig00000082,
      O => blk00000003_sig00000637
    );
  blk00000003_blk00000567 : XORCY
    port map (
      CI => blk00000003_sig00000634,
      LI => blk00000003_sig00000082,
      O => blk00000003_sig00000635
    );
  blk00000003_blk00000566 : XORCY
    port map (
      CI => blk00000003_sig00000632,
      LI => blk00000003_sig00000082,
      O => blk00000003_sig00000633
    );
  blk00000003_blk00000565 : FDSE
    generic map(
      INIT => '1'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000630,
      S => sclr,
      Q => blk00000003_sig00000631
    );
  blk00000003_blk00000564 : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig0000062f,
      R => sclr,
      Q => blk00000003_sig00000623
    );
  blk00000003_blk00000563 : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig0000062d,
      R => sclr,
      Q => blk00000003_sig0000062e
    );
  blk00000003_blk00000562 : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig0000062b,
      R => sclr,
      Q => blk00000003_sig0000062c
    );
  blk00000003_blk00000561 : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000629,
      R => sclr,
      Q => blk00000003_sig0000062a
    );
  blk00000003_blk00000560 : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000627,
      R => sclr,
      Q => blk00000003_sig00000628
    );
  blk00000003_blk0000055f : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000625,
      R => sclr,
      Q => blk00000003_sig00000626
    );
  blk00000003_blk00000558 : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000622,
      R => sclr,
      Q => blk00000003_sig0000061f
    );
  blk00000003_blk00000557 : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000621,
      R => sclr,
      Q => edone
    );
  blk00000003_blk00000556 : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000620,
      R => sclr,
      Q => done
    );
  blk00000003_blk00000555 : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig0000061f,
      R => sclr,
      Q => busy
    );
  blk00000003_blk00000554 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig0000061d,
      Q => blk00000003_sig0000061e
    );
  blk00000003_blk00000417 : LUT6
    generic map(
      INIT => X"8000000000000000"
    )
    port map (
      I0 => blk00000003_sig00000249,
      I1 => blk00000003_sig00000248,
      I2 => blk00000003_sig00000247,
      I3 => blk00000003_sig00000246,
      I4 => blk00000003_sig00000245,
      I5 => blk00000003_sig00000244,
      O => blk00000003_sig000005dd
    );
  blk00000003_blk00000416 : LUT6
    generic map(
      INIT => X"8000000000000000"
    )
    port map (
      I0 => blk00000003_sig0000024f,
      I1 => blk00000003_sig0000024e,
      I2 => blk00000003_sig0000024d,
      I3 => blk00000003_sig0000024c,
      I4 => blk00000003_sig0000024b,
      I5 => blk00000003_sig0000024a,
      O => blk00000003_sig000005db
    );
  blk00000003_blk00000415 : LUT6
    generic map(
      INIT => X"8000000000000000"
    )
    port map (
      I0 => blk00000003_sig00000255,
      I1 => blk00000003_sig00000254,
      I2 => blk00000003_sig00000253,
      I3 => blk00000003_sig00000252,
      I4 => blk00000003_sig00000251,
      I5 => blk00000003_sig00000250,
      O => blk00000003_sig000005d9
    );
  blk00000003_blk00000414 : LUT6
    generic map(
      INIT => X"8000000000000000"
    )
    port map (
      I0 => blk00000003_sig0000025b,
      I1 => blk00000003_sig0000025a,
      I2 => blk00000003_sig00000259,
      I3 => blk00000003_sig00000258,
      I4 => blk00000003_sig00000257,
      I5 => blk00000003_sig00000256,
      O => blk00000003_sig000005d7
    );
  blk00000003_blk00000413 : LUT6
    generic map(
      INIT => X"8000000000000000"
    )
    port map (
      I0 => blk00000003_sig00000261,
      I1 => blk00000003_sig00000260,
      I2 => blk00000003_sig0000025f,
      I3 => blk00000003_sig0000025e,
      I4 => blk00000003_sig0000025d,
      I5 => blk00000003_sig0000025c,
      O => blk00000003_sig000005d5
    );
  blk00000003_blk00000412 : LUT6
    generic map(
      INIT => X"8000000000000000"
    )
    port map (
      I0 => blk00000003_sig000005de,
      I1 => blk00000003_sig00000088,
      I2 => blk00000003_sig00000088,
      I3 => blk00000003_sig00000088,
      I4 => blk00000003_sig00000088,
      I5 => blk00000003_sig00000088,
      O => blk00000003_sig000005d4
    );
  blk00000003_blk00000411 : MUXCY
    port map (
      CI => blk00000003_sig000005dc,
      DI => blk00000003_sig00000082,
      S => blk00000003_sig000005dd,
      O => blk00000003_sig000005d3
    );
  blk00000003_blk00000410 : MUXCY
    port map (
      CI => blk00000003_sig000005da,
      DI => blk00000003_sig00000082,
      S => blk00000003_sig000005db,
      O => blk00000003_sig000005dc
    );
  blk00000003_blk0000040f : MUXCY
    port map (
      CI => blk00000003_sig000005d8,
      DI => blk00000003_sig00000082,
      S => blk00000003_sig000005d9,
      O => blk00000003_sig000005da
    );
  blk00000003_blk0000040e : MUXCY
    port map (
      CI => blk00000003_sig000005d6,
      DI => blk00000003_sig00000082,
      S => blk00000003_sig000005d7,
      O => blk00000003_sig000005d8
    );
  blk00000003_blk0000040d : MUXCY
    port map (
      CI => blk00000003_sig00000088,
      DI => blk00000003_sig00000082,
      S => blk00000003_sig000005d5,
      O => blk00000003_sig000005d6
    );
  blk00000003_blk0000040c : MUXCY
    port map (
      CI => blk00000003_sig000005d3,
      DI => blk00000003_sig00000082,
      S => blk00000003_sig000005d4,
      O => blk00000003_sig000005d2
    );
  blk00000003_blk0000040b : XORCY
    port map (
      CI => blk00000003_sig000005d2,
      LI => blk00000003_sig00000082,
      O => blk00000003_sig00000579
    );
  blk00000003_blk0000040a : LUT6
    generic map(
      INIT => X"8000000000000000"
    )
    port map (
      I0 => blk00000003_sig0000026b,
      I1 => blk00000003_sig0000026a,
      I2 => blk00000003_sig00000269,
      I3 => blk00000003_sig00000268,
      I4 => blk00000003_sig00000267,
      I5 => blk00000003_sig00000266,
      O => blk00000003_sig000005d0
    );
  blk00000003_blk00000409 : LUT6
    generic map(
      INIT => X"8000000000000000"
    )
    port map (
      I0 => blk00000003_sig00000271,
      I1 => blk00000003_sig00000270,
      I2 => blk00000003_sig0000026f,
      I3 => blk00000003_sig0000026e,
      I4 => blk00000003_sig0000026d,
      I5 => blk00000003_sig0000026c,
      O => blk00000003_sig000005ce
    );
  blk00000003_blk00000408 : LUT6
    generic map(
      INIT => X"8000000000000000"
    )
    port map (
      I0 => blk00000003_sig00000277,
      I1 => blk00000003_sig00000276,
      I2 => blk00000003_sig00000275,
      I3 => blk00000003_sig00000274,
      I4 => blk00000003_sig00000273,
      I5 => blk00000003_sig00000272,
      O => blk00000003_sig000005cc
    );
  blk00000003_blk00000407 : LUT6
    generic map(
      INIT => X"8000000000000000"
    )
    port map (
      I0 => blk00000003_sig0000027d,
      I1 => blk00000003_sig0000027c,
      I2 => blk00000003_sig0000027b,
      I3 => blk00000003_sig0000027a,
      I4 => blk00000003_sig00000279,
      I5 => blk00000003_sig00000278,
      O => blk00000003_sig000005ca
    );
  blk00000003_blk00000406 : LUT6
    generic map(
      INIT => X"8000000000000000"
    )
    port map (
      I0 => blk00000003_sig00000283,
      I1 => blk00000003_sig00000282,
      I2 => blk00000003_sig00000281,
      I3 => blk00000003_sig00000280,
      I4 => blk00000003_sig0000027f,
      I5 => blk00000003_sig0000027e,
      O => blk00000003_sig000005c8
    );
  blk00000003_blk00000405 : LUT6
    generic map(
      INIT => X"8000000000000000"
    )
    port map (
      I0 => blk00000003_sig000005d1,
      I1 => blk00000003_sig00000088,
      I2 => blk00000003_sig00000088,
      I3 => blk00000003_sig00000088,
      I4 => blk00000003_sig00000088,
      I5 => blk00000003_sig00000088,
      O => blk00000003_sig000005c7
    );
  blk00000003_blk00000404 : MUXCY
    port map (
      CI => blk00000003_sig000005cf,
      DI => blk00000003_sig00000082,
      S => blk00000003_sig000005d0,
      O => blk00000003_sig000005c6
    );
  blk00000003_blk00000403 : MUXCY
    port map (
      CI => blk00000003_sig000005cd,
      DI => blk00000003_sig00000082,
      S => blk00000003_sig000005ce,
      O => blk00000003_sig000005cf
    );
  blk00000003_blk00000402 : MUXCY
    port map (
      CI => blk00000003_sig000005cb,
      DI => blk00000003_sig00000082,
      S => blk00000003_sig000005cc,
      O => blk00000003_sig000005cd
    );
  blk00000003_blk00000401 : MUXCY
    port map (
      CI => blk00000003_sig000005c9,
      DI => blk00000003_sig00000082,
      S => blk00000003_sig000005ca,
      O => blk00000003_sig000005cb
    );
  blk00000003_blk00000400 : MUXCY
    port map (
      CI => blk00000003_sig00000088,
      DI => blk00000003_sig00000082,
      S => blk00000003_sig000005c8,
      O => blk00000003_sig000005c9
    );
  blk00000003_blk000003ff : MUXCY
    port map (
      CI => blk00000003_sig000005c6,
      DI => blk00000003_sig00000082,
      S => blk00000003_sig000005c7,
      O => blk00000003_sig000005c5
    );
  blk00000003_blk000003fe : XORCY
    port map (
      CI => blk00000003_sig000005c5,
      LI => blk00000003_sig00000082,
      O => blk00000003_sig000005bf
    );
  blk00000003_blk000003fd : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000283,
      Q => blk00000003_sig000005c4
    );
  blk00000003_blk000003fc : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000005c2,
      Q => blk00000003_sig000005c3
    );
  blk00000003_blk000003fb : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000284,
      Q => blk00000003_sig000005c1
    );
  blk00000003_blk000003fa : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000005bf,
      Q => blk00000003_sig000005c0
    );
  blk00000003_blk000003f9 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000005bd,
      Q => blk00000003_sig000005be
    );
  blk00000003_blk000003f8 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000005bb,
      Q => blk00000003_sig000005bc
    );
  blk00000003_blk000003f7 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000005b9,
      Q => blk00000003_sig000005ba
    );
  blk00000003_blk000003f6 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000005b7,
      Q => blk00000003_sig000005b8
    );
  blk00000003_blk000003f5 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000005b5,
      Q => blk00000003_sig000005b6
    );
  blk00000003_blk000003f4 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000005b3,
      Q => blk00000003_sig000005b4
    );
  blk00000003_blk000003f3 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000005b1,
      Q => blk00000003_sig000005b2
    );
  blk00000003_blk000003f2 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000005af,
      Q => blk00000003_sig000005b0
    );
  blk00000003_blk000003f1 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000005ad,
      Q => blk00000003_sig000005ae
    );
  blk00000003_blk000003f0 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000005ab,
      Q => blk00000003_sig000005ac
    );
  blk00000003_blk000003ef : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000005a9,
      Q => blk00000003_sig000005aa
    );
  blk00000003_blk000003ee : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000005a7,
      Q => blk00000003_sig000005a8
    );
  blk00000003_blk000003ed : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000005a5,
      Q => blk00000003_sig000005a6
    );
  blk00000003_blk000003ec : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000005a3,
      Q => blk00000003_sig000005a4
    );
  blk00000003_blk000003eb : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000005a1,
      Q => blk00000003_sig000005a2
    );
  blk00000003_blk000003ea : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig0000059f,
      Q => blk00000003_sig000005a0
    );
  blk00000003_blk000003e9 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig0000059d,
      Q => blk00000003_sig0000059e
    );
  blk00000003_blk000003e8 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig0000059b,
      Q => blk00000003_sig0000059c
    );
  blk00000003_blk000003e7 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000599,
      Q => blk00000003_sig0000059a
    );
  blk00000003_blk000003e6 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000597,
      Q => blk00000003_sig00000598
    );
  blk00000003_blk000003e5 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000595,
      Q => blk00000003_sig00000596
    );
  blk00000003_blk000003e4 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000593,
      Q => blk00000003_sig00000594
    );
  blk00000003_blk000003e3 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000591,
      Q => blk00000003_sig00000592
    );
  blk00000003_blk000003e2 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig0000058f,
      Q => blk00000003_sig00000590
    );
  blk00000003_blk000003e1 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig0000058d,
      Q => blk00000003_sig0000058e
    );
  blk00000003_blk000003e0 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig0000058b,
      Q => blk00000003_sig0000058c
    );
  blk00000003_blk000003df : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000589,
      Q => blk00000003_sig0000058a
    );
  blk00000003_blk000003de : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000587,
      Q => blk00000003_sig00000588
    );
  blk00000003_blk000003dd : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000585,
      Q => blk00000003_sig00000586
    );
  blk00000003_blk000003dc : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000583,
      Q => blk00000003_sig00000584
    );
  blk00000003_blk000003db : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000581,
      Q => blk00000003_sig00000582
    );
  blk00000003_blk000003da : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig0000057f,
      Q => blk00000003_sig00000580
    );
  blk00000003_blk000003d9 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000261,
      Q => blk00000003_sig0000057e
    );
  blk00000003_blk000003d8 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig0000057c,
      Q => blk00000003_sig0000057d
    );
  blk00000003_blk000003d7 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000262,
      Q => blk00000003_sig0000057b
    );
  blk00000003_blk000003d6 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000579,
      Q => blk00000003_sig0000057a
    );
  blk00000003_blk000003d5 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000577,
      Q => blk00000003_sig00000578
    );
  blk00000003_blk000003d4 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000575,
      Q => blk00000003_sig00000576
    );
  blk00000003_blk000003d3 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000573,
      Q => blk00000003_sig00000574
    );
  blk00000003_blk000003d2 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000571,
      Q => blk00000003_sig00000572
    );
  blk00000003_blk000003d1 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig0000056f,
      Q => blk00000003_sig00000570
    );
  blk00000003_blk000003d0 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig0000056d,
      Q => blk00000003_sig0000056e
    );
  blk00000003_blk000003cf : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig0000056b,
      Q => blk00000003_sig0000056c
    );
  blk00000003_blk000003ce : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000569,
      Q => blk00000003_sig0000056a
    );
  blk00000003_blk000003cd : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000567,
      Q => blk00000003_sig00000568
    );
  blk00000003_blk000003cc : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000565,
      Q => blk00000003_sig00000566
    );
  blk00000003_blk000003cb : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000563,
      Q => blk00000003_sig00000564
    );
  blk00000003_blk000003ca : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000561,
      Q => blk00000003_sig00000562
    );
  blk00000003_blk000003c9 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig0000055f,
      Q => blk00000003_sig00000560
    );
  blk00000003_blk000003c8 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig0000055d,
      Q => blk00000003_sig0000055e
    );
  blk00000003_blk000003c7 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig0000055b,
      Q => blk00000003_sig0000055c
    );
  blk00000003_blk000003c6 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000559,
      Q => blk00000003_sig0000055a
    );
  blk00000003_blk000003c5 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000557,
      Q => blk00000003_sig00000558
    );
  blk00000003_blk000003c4 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000555,
      Q => blk00000003_sig00000556
    );
  blk00000003_blk000003c3 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000553,
      Q => blk00000003_sig00000554
    );
  blk00000003_blk000003c2 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000551,
      Q => blk00000003_sig00000552
    );
  blk00000003_blk000003c1 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig0000054f,
      Q => blk00000003_sig00000550
    );
  blk00000003_blk000003c0 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig0000054d,
      Q => blk00000003_sig0000054e
    );
  blk00000003_blk000003bf : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig0000054b,
      Q => blk00000003_sig0000054c
    );
  blk00000003_blk000003be : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000549,
      Q => blk00000003_sig0000054a
    );
  blk00000003_blk000003bd : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000547,
      Q => blk00000003_sig00000548
    );
  blk00000003_blk000003bc : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000545,
      Q => blk00000003_sig00000546
    );
  blk00000003_blk000003bb : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000543,
      Q => blk00000003_sig00000544
    );
  blk00000003_blk000003ba : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000541,
      Q => blk00000003_sig00000542
    );
  blk00000003_blk000003b9 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig0000053f,
      Q => blk00000003_sig00000540
    );
  blk00000003_blk000003b8 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig0000053d,
      Q => blk00000003_sig0000053e
    );
  blk00000003_blk000003b7 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig0000053b,
      Q => blk00000003_sig0000053c
    );
  blk00000003_blk000003b6 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000539,
      Q => blk00000003_sig0000053a
    );
  blk00000003_blk00000325 : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000537,
      R => sclr,
      Q => xk_re(0)
    );
  blk00000003_blk00000324 : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000536,
      R => sclr,
      Q => xk_re(1)
    );
  blk00000003_blk00000323 : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000535,
      R => sclr,
      Q => xk_re(2)
    );
  blk00000003_blk00000322 : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000534,
      R => sclr,
      Q => xk_re(3)
    );
  blk00000003_blk00000321 : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000533,
      R => sclr,
      Q => xk_re(4)
    );
  blk00000003_blk00000320 : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000532,
      R => sclr,
      Q => xk_re(5)
    );
  blk00000003_blk0000031f : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000531,
      R => sclr,
      Q => xk_re(6)
    );
  blk00000003_blk0000031e : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000530,
      R => sclr,
      Q => xk_re(7)
    );
  blk00000003_blk0000031d : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig0000052f,
      R => sclr,
      Q => xk_re(8)
    );
  blk00000003_blk0000031c : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig0000052e,
      R => sclr,
      Q => xk_re(9)
    );
  blk00000003_blk0000031b : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig0000052d,
      R => sclr,
      Q => xk_re(10)
    );
  blk00000003_blk0000031a : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig0000052c,
      R => sclr,
      Q => xk_re(11)
    );
  blk00000003_blk00000319 : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig0000052b,
      R => sclr,
      Q => xk_re(12)
    );
  blk00000003_blk00000318 : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig0000052a,
      R => sclr,
      Q => xk_re(13)
    );
  blk00000003_blk00000317 : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000529,
      R => sclr,
      Q => xk_re(14)
    );
  blk00000003_blk00000316 : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000528,
      R => sclr,
      Q => xk_re(15)
    );
  blk00000003_blk00000315 : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000527,
      R => sclr,
      Q => xk_re(16)
    );
  blk00000003_blk00000314 : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000526,
      R => sclr,
      Q => xk_re(17)
    );
  blk00000003_blk00000313 : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000525,
      R => sclr,
      Q => xk_re(18)
    );
  blk00000003_blk00000312 : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000524,
      R => sclr,
      Q => xk_re(19)
    );
  blk00000003_blk00000311 : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000523,
      R => sclr,
      Q => xk_re(20)
    );
  blk00000003_blk00000310 : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000522,
      R => sclr,
      Q => xk_re(21)
    );
  blk00000003_blk0000030f : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000521,
      R => sclr,
      Q => xk_re(22)
    );
  blk00000003_blk0000030e : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000520,
      R => sclr,
      Q => xk_re(23)
    );
  blk00000003_blk0000030d : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig0000051f,
      R => sclr,
      Q => xk_re(24)
    );
  blk00000003_blk0000030c : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig0000051e,
      R => sclr,
      Q => xk_re(25)
    );
  blk00000003_blk0000030b : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig0000051d,
      R => sclr,
      Q => xk_re(26)
    );
  blk00000003_blk0000030a : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig0000051c,
      R => sclr,
      Q => xk_re(27)
    );
  blk00000003_blk00000309 : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig0000051b,
      R => sclr,
      Q => xk_re(28)
    );
  blk00000003_blk00000308 : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig0000051a,
      R => sclr,
      Q => xk_re(29)
    );
  blk00000003_blk00000307 : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000519,
      R => sclr,
      Q => xk_re(30)
    );
  blk00000003_blk00000306 : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000518,
      R => sclr,
      Q => xk_im(0)
    );
  blk00000003_blk00000305 : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000517,
      R => sclr,
      Q => xk_im(1)
    );
  blk00000003_blk00000304 : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000516,
      R => sclr,
      Q => xk_im(2)
    );
  blk00000003_blk00000303 : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000515,
      R => sclr,
      Q => xk_im(3)
    );
  blk00000003_blk00000302 : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000514,
      R => sclr,
      Q => xk_im(4)
    );
  blk00000003_blk00000301 : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000513,
      R => sclr,
      Q => xk_im(5)
    );
  blk00000003_blk00000300 : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000512,
      R => sclr,
      Q => xk_im(6)
    );
  blk00000003_blk000002ff : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000511,
      R => sclr,
      Q => xk_im(7)
    );
  blk00000003_blk000002fe : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000510,
      R => sclr,
      Q => xk_im(8)
    );
  blk00000003_blk000002fd : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig0000050f,
      R => sclr,
      Q => xk_im(9)
    );
  blk00000003_blk000002fc : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig0000050e,
      R => sclr,
      Q => xk_im(10)
    );
  blk00000003_blk000002fb : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig0000050d,
      R => sclr,
      Q => xk_im(11)
    );
  blk00000003_blk000002fa : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig0000050c,
      R => sclr,
      Q => xk_im(12)
    );
  blk00000003_blk000002f9 : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig0000050b,
      R => sclr,
      Q => xk_im(13)
    );
  blk00000003_blk000002f8 : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig0000050a,
      R => sclr,
      Q => xk_im(14)
    );
  blk00000003_blk000002f7 : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000509,
      R => sclr,
      Q => xk_im(15)
    );
  blk00000003_blk000002f6 : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000508,
      R => sclr,
      Q => xk_im(16)
    );
  blk00000003_blk000002f5 : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000507,
      R => sclr,
      Q => xk_im(17)
    );
  blk00000003_blk000002f4 : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000506,
      R => sclr,
      Q => xk_im(18)
    );
  blk00000003_blk000002f3 : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000505,
      R => sclr,
      Q => xk_im(19)
    );
  blk00000003_blk000002f2 : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000504,
      R => sclr,
      Q => xk_im(20)
    );
  blk00000003_blk000002f1 : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000503,
      R => sclr,
      Q => xk_im(21)
    );
  blk00000003_blk000002f0 : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000502,
      R => sclr,
      Q => xk_im(22)
    );
  blk00000003_blk000002ef : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000501,
      R => sclr,
      Q => xk_im(23)
    );
  blk00000003_blk000002ee : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000500,
      R => sclr,
      Q => xk_im(24)
    );
  blk00000003_blk000002ed : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000004ff,
      R => sclr,
      Q => xk_im(25)
    );
  blk00000003_blk000002ec : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000004fe,
      R => sclr,
      Q => xk_im(26)
    );
  blk00000003_blk000002eb : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000004fd,
      R => sclr,
      Q => xk_im(27)
    );
  blk00000003_blk000002ea : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000004fc,
      R => sclr,
      Q => xk_im(28)
    );
  blk00000003_blk000002e9 : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000004fb,
      R => sclr,
      Q => xk_im(29)
    );
  blk00000003_blk000002e8 : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000004fa,
      R => sclr,
      Q => xk_im(30)
    );
  blk00000003_blk000001d5 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000493,
      D => blk00000003_sig000004bb,
      Q => blk00000003_sig00000140
    );
  blk00000003_blk000001d4 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000493,
      D => blk00000003_sig000004ba,
      Q => blk00000003_sig0000013f
    );
  blk00000003_blk000001d3 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000493,
      D => blk00000003_sig000004b9,
      Q => blk00000003_sig0000013e
    );
  blk00000003_blk000001d2 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000493,
      D => blk00000003_sig000004b8,
      Q => blk00000003_sig0000013d
    );
  blk00000003_blk000001d1 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000493,
      D => blk00000003_sig000004b7,
      Q => blk00000003_sig0000013c
    );
  blk00000003_blk000001d0 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000493,
      D => blk00000003_sig00000409,
      Q => blk00000003_sig0000013b
    );
  blk00000003_blk000001cf : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000493,
      D => blk00000003_sig00000408,
      Q => blk00000003_sig0000013a
    );
  blk00000003_blk000001ce : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000493,
      D => blk00000003_sig00000407,
      Q => blk00000003_sig00000139
    );
  blk00000003_blk000001cd : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000493,
      D => blk00000003_sig00000406,
      Q => blk00000003_sig00000138
    );
  blk00000003_blk000001cc : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000493,
      D => blk00000003_sig00000405,
      Q => blk00000003_sig00000137
    );
  blk00000003_blk000001cb : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000493,
      D => blk00000003_sig00000404,
      Q => blk00000003_sig00000136
    );
  blk00000003_blk000001ca : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000493,
      D => blk00000003_sig00000403,
      Q => blk00000003_sig00000135
    );
  blk00000003_blk000001c9 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000493,
      D => blk00000003_sig00000402,
      Q => blk00000003_sig00000134
    );
  blk00000003_blk000001c8 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000493,
      D => blk00000003_sig00000401,
      Q => blk00000003_sig00000133
    );
  blk00000003_blk000001c7 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000493,
      D => blk00000003_sig00000400,
      Q => blk00000003_sig00000132
    );
  blk00000003_blk000001c6 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000493,
      D => blk00000003_sig000003ff,
      Q => blk00000003_sig00000131
    );
  blk00000003_blk000001c5 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000493,
      D => blk00000003_sig000003fe,
      Q => blk00000003_sig00000130
    );
  blk00000003_blk000001c4 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000493,
      D => blk00000003_sig000003fd,
      Q => blk00000003_sig0000012f
    );
  blk00000003_blk000001c3 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000493,
      D => blk00000003_sig000003fc,
      Q => blk00000003_sig0000012e
    );
  blk00000003_blk000001c2 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000493,
      D => blk00000003_sig000003fb,
      Q => blk00000003_sig0000012d
    );
  blk00000003_blk000001c1 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000493,
      D => blk00000003_sig000003fa,
      Q => blk00000003_sig0000012c
    );
  blk00000003_blk000001c0 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000493,
      D => blk00000003_sig000003f9,
      Q => blk00000003_sig0000012b
    );
  blk00000003_blk000001bf : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000493,
      D => blk00000003_sig000003f8,
      Q => blk00000003_sig0000012a
    );
  blk00000003_blk000001be : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000493,
      D => blk00000003_sig000003f7,
      Q => blk00000003_sig00000129
    );
  blk00000003_blk000001bd : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000493,
      D => blk00000003_sig000003f6,
      Q => blk00000003_sig00000128
    );
  blk00000003_blk000001bc : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000493,
      D => blk00000003_sig000003f5,
      Q => blk00000003_sig00000127
    );
  blk00000003_blk000001bb : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000493,
      D => blk00000003_sig000003f4,
      Q => blk00000003_sig00000126
    );
  blk00000003_blk000001ba : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000493,
      D => blk00000003_sig000003f3,
      Q => blk00000003_sig00000125
    );
  blk00000003_blk000001b9 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000493,
      D => blk00000003_sig000003f2,
      Q => blk00000003_sig00000124
    );
  blk00000003_blk000001b8 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000493,
      D => blk00000003_sig000003f1,
      Q => blk00000003_sig00000123
    );
  blk00000003_blk000001b7 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000493,
      D => blk00000003_sig000003f0,
      Q => blk00000003_sig00000122
    );
  blk00000003_blk000001b6 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000493,
      D => blk00000003_sig000003ef,
      Q => blk00000003_sig00000121
    );
  blk00000003_blk000001b5 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000493,
      D => blk00000003_sig000003ee,
      Q => blk00000003_sig00000120
    );
  blk00000003_blk000001b4 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000493,
      D => blk00000003_sig000003ed,
      Q => blk00000003_sig0000011f
    );
  blk00000003_blk000001b3 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000493,
      D => blk00000003_sig000003ec,
      Q => blk00000003_sig0000011e
    );
  blk00000003_blk000001b2 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000004bb,
      Q => blk00000003_sig000004b6
    );
  blk00000003_blk000001b1 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000004ba,
      Q => blk00000003_sig000004b5
    );
  blk00000003_blk000001b0 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000004b9,
      Q => blk00000003_sig000004b4
    );
  blk00000003_blk000001af : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000004b8,
      Q => blk00000003_sig000004b3
    );
  blk00000003_blk000001ae : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000004b7,
      Q => blk00000003_sig000004b2
    );
  blk00000003_blk000001ad : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000409,
      Q => blk00000003_sig000004b1
    );
  blk00000003_blk000001ac : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000408,
      Q => blk00000003_sig000004b0
    );
  blk00000003_blk000001ab : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000407,
      Q => blk00000003_sig000004af
    );
  blk00000003_blk000001aa : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000406,
      Q => blk00000003_sig000004ae
    );
  blk00000003_blk000001a9 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000405,
      Q => blk00000003_sig000004ad
    );
  blk00000003_blk000001a8 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000404,
      Q => blk00000003_sig000004ac
    );
  blk00000003_blk000001a7 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000403,
      Q => blk00000003_sig000004ab
    );
  blk00000003_blk000001a6 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000402,
      Q => blk00000003_sig000004aa
    );
  blk00000003_blk000001a5 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000401,
      Q => blk00000003_sig000004a9
    );
  blk00000003_blk000001a4 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000400,
      Q => blk00000003_sig000004a8
    );
  blk00000003_blk000001a3 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000003ff,
      Q => blk00000003_sig000004a7
    );
  blk00000003_blk000001a2 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000003fe,
      Q => blk00000003_sig000004a6
    );
  blk00000003_blk000001a1 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000003fd,
      Q => blk00000003_sig000004a5
    );
  blk00000003_blk000001a0 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000003fc,
      Q => blk00000003_sig000004a4
    );
  blk00000003_blk0000019f : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000003fb,
      Q => blk00000003_sig000004a3
    );
  blk00000003_blk0000019e : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000003fa,
      Q => blk00000003_sig000004a2
    );
  blk00000003_blk0000019d : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000003f9,
      Q => blk00000003_sig000004a1
    );
  blk00000003_blk0000019c : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000003f8,
      Q => blk00000003_sig000004a0
    );
  blk00000003_blk0000019b : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000003f7,
      Q => blk00000003_sig0000049f
    );
  blk00000003_blk0000019a : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000003f6,
      Q => blk00000003_sig0000049e
    );
  blk00000003_blk00000199 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000003f5,
      Q => blk00000003_sig0000049d
    );
  blk00000003_blk00000198 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000003f4,
      Q => blk00000003_sig0000049c
    );
  blk00000003_blk00000197 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000003f3,
      Q => blk00000003_sig0000049b
    );
  blk00000003_blk00000196 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000003f2,
      Q => blk00000003_sig0000049a
    );
  blk00000003_blk00000195 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000003f1,
      Q => blk00000003_sig00000499
    );
  blk00000003_blk00000194 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000003f0,
      Q => blk00000003_sig00000498
    );
  blk00000003_blk00000193 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000003ef,
      Q => blk00000003_sig00000497
    );
  blk00000003_blk00000192 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000003ee,
      Q => blk00000003_sig00000496
    );
  blk00000003_blk00000191 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000003ed,
      Q => blk00000003_sig00000495
    );
  blk00000003_blk00000190 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000003ec,
      Q => blk00000003_sig00000494
    );
  blk00000003_blk0000018f : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000493,
      D => blk00000003_sig000004b6,
      Q => blk00000003_sig000000ab
    );
  blk00000003_blk0000018e : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000493,
      D => blk00000003_sig000004b5,
      Q => blk00000003_sig000000aa
    );
  blk00000003_blk0000018d : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000493,
      D => blk00000003_sig000004b4,
      Q => blk00000003_sig000000a9
    );
  blk00000003_blk0000018c : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000493,
      D => blk00000003_sig000004b3,
      Q => blk00000003_sig000000a8
    );
  blk00000003_blk0000018b : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000493,
      D => blk00000003_sig000004b2,
      Q => blk00000003_sig000000a7
    );
  blk00000003_blk0000018a : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000493,
      D => blk00000003_sig000004b1,
      Q => blk00000003_sig000000a6
    );
  blk00000003_blk00000189 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000493,
      D => blk00000003_sig000004b0,
      Q => blk00000003_sig000000a5
    );
  blk00000003_blk00000188 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000493,
      D => blk00000003_sig000004af,
      Q => blk00000003_sig000000a4
    );
  blk00000003_blk00000187 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000493,
      D => blk00000003_sig000004ae,
      Q => blk00000003_sig000000a3
    );
  blk00000003_blk00000186 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000493,
      D => blk00000003_sig000004ad,
      Q => blk00000003_sig000000a2
    );
  blk00000003_blk00000185 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000493,
      D => blk00000003_sig000004ac,
      Q => blk00000003_sig000000a1
    );
  blk00000003_blk00000184 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000493,
      D => blk00000003_sig000004ab,
      Q => blk00000003_sig000000a0
    );
  blk00000003_blk00000183 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000493,
      D => blk00000003_sig000004aa,
      Q => blk00000003_sig0000009f
    );
  blk00000003_blk00000182 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000493,
      D => blk00000003_sig000004a9,
      Q => blk00000003_sig0000009e
    );
  blk00000003_blk00000181 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000493,
      D => blk00000003_sig000004a8,
      Q => blk00000003_sig0000009d
    );
  blk00000003_blk00000180 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000493,
      D => blk00000003_sig000004a7,
      Q => blk00000003_sig0000009c
    );
  blk00000003_blk0000017f : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000493,
      D => blk00000003_sig000004a6,
      Q => blk00000003_sig0000009b
    );
  blk00000003_blk0000017e : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000493,
      D => blk00000003_sig000004a5,
      Q => blk00000003_sig0000009a
    );
  blk00000003_blk0000017d : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000493,
      D => blk00000003_sig000004a4,
      Q => blk00000003_sig00000099
    );
  blk00000003_blk0000017c : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000493,
      D => blk00000003_sig000004a3,
      Q => blk00000003_sig00000098
    );
  blk00000003_blk0000017b : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000493,
      D => blk00000003_sig000004a2,
      Q => blk00000003_sig00000097
    );
  blk00000003_blk0000017a : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000493,
      D => blk00000003_sig000004a1,
      Q => blk00000003_sig00000096
    );
  blk00000003_blk00000179 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000493,
      D => blk00000003_sig000004a0,
      Q => blk00000003_sig00000095
    );
  blk00000003_blk00000178 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000493,
      D => blk00000003_sig0000049f,
      Q => blk00000003_sig00000094
    );
  blk00000003_blk00000177 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000493,
      D => blk00000003_sig0000049e,
      Q => blk00000003_sig00000093
    );
  blk00000003_blk00000176 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000493,
      D => blk00000003_sig0000049d,
      Q => blk00000003_sig00000092
    );
  blk00000003_blk00000175 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000493,
      D => blk00000003_sig0000049c,
      Q => blk00000003_sig00000091
    );
  blk00000003_blk00000174 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000493,
      D => blk00000003_sig0000049b,
      Q => blk00000003_sig00000090
    );
  blk00000003_blk00000173 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000493,
      D => blk00000003_sig0000049a,
      Q => blk00000003_sig0000008f
    );
  blk00000003_blk00000172 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000493,
      D => blk00000003_sig00000499,
      Q => blk00000003_sig0000008e
    );
  blk00000003_blk00000171 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000493,
      D => blk00000003_sig00000498,
      Q => blk00000003_sig0000008d
    );
  blk00000003_blk00000170 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000493,
      D => blk00000003_sig00000497,
      Q => blk00000003_sig0000008c
    );
  blk00000003_blk0000016f : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000493,
      D => blk00000003_sig00000496,
      Q => blk00000003_sig0000008b
    );
  blk00000003_blk0000016e : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000493,
      D => blk00000003_sig00000495,
      Q => blk00000003_sig0000008a
    );
  blk00000003_blk0000016d : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000493,
      D => blk00000003_sig00000494,
      Q => blk00000003_sig00000089
    );
  blk00000003_blk0000016c : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig0000048c,
      Q => blk00000003_sig0000045a
    );
  blk00000003_blk0000016b : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000337,
      Q => blk00000003_sig00000492
    );
  blk00000003_blk0000016a : DSP48E
    generic map(
      ACASCREG => 1,
      ALUMODEREG => 1,
      AREG => 1,
      AUTORESET_PATTERN_DETECT => FALSE,
      AUTORESET_PATTERN_DETECT_OPTINV => "MATCH",
      A_INPUT => "DIRECT",
      BCASCREG => 1,
      BREG => 1,
      B_INPUT => "DIRECT",
      CARRYINREG => 1,
      CARRYINSELREG => 0,
      CREG => 0,
      MASK => X"000000000000",
      MREG => 1,
      MULTCARRYINREG => 0,
      OPMODEREG => 0,
      PATTERN => X"000000000000",
      PREG => 1,
      SEL_MASK => "MASK",
      SEL_PATTERN => "PATTERN",
      SEL_ROUNDING_MASK => "SEL_MASK",
      SIM_MODE => "SAFE",
      USE_MULT => "MULT_S",
      USE_PATTERN_DETECT => "NO_PATDET",
      USE_SIMD => "ONE48"
    )
    port map (
      CARRYIN => blk00000003_sig00000082,
      CEA1 => blk00000003_sig00000082,
      CEA2 => ce,
      CEB1 => blk00000003_sig00000082,
      CEB2 => ce,
      CEC => blk00000003_sig00000082,
      CECTRL => blk00000003_sig00000082,
      CEP => ce,
      CEM => ce,
      CECARRYIN => blk00000003_sig00000082,
      CEMULTCARRYIN => blk00000003_sig00000082,
      CLK => clk,
      RSTA => blk00000003_sig00000082,
      RSTB => blk00000003_sig00000082,
      RSTC => blk00000003_sig00000082,
      RSTCTRL => blk00000003_sig00000082,
      RSTP => blk00000003_sig00000082,
      RSTM => blk00000003_sig00000082,
      RSTALLCARRYIN => blk00000003_sig00000082,
      CEALUMODE => ce,
      RSTALUMODE => blk00000003_sig00000082,
      PATTERNBDETECT => NLW_blk00000003_blk0000016a_PATTERNBDETECT_UNCONNECTED,
      PATTERNDETECT => NLW_blk00000003_blk0000016a_PATTERNDETECT_UNCONNECTED,
      OVERFLOW => NLW_blk00000003_blk0000016a_OVERFLOW_UNCONNECTED,
      UNDERFLOW => NLW_blk00000003_blk0000016a_UNDERFLOW_UNCONNECTED,
      CARRYCASCIN => blk00000003_sig00000082,
      CARRYCASCOUT => NLW_blk00000003_blk0000016a_CARRYCASCOUT_UNCONNECTED,
      MULTSIGNIN => blk00000003_sig00000082,
      MULTSIGNOUT => NLW_blk00000003_blk0000016a_MULTSIGNOUT_UNCONNECTED,
      A(29) => blk00000003_sig00000082,
      A(28) => blk00000003_sig00000082,
      A(27) => blk00000003_sig00000082,
      A(26) => blk00000003_sig00000082,
      A(25) => blk00000003_sig00000082,
      A(24) => blk00000003_sig00000082,
      A(23) => blk00000003_sig00000082,
      A(22) => blk00000003_sig00000082,
      A(21) => blk00000003_sig00000082,
      A(20) => blk00000003_sig00000082,
      A(19) => blk00000003_sig00000082,
      A(18) => blk00000003_sig00000082,
      A(17) => blk00000003_sig00000082,
      A(16) => blk00000003_sig0000038b,
      A(15) => blk00000003_sig0000038c,
      A(14) => blk00000003_sig0000038d,
      A(13) => blk00000003_sig0000038e,
      A(12) => blk00000003_sig0000038f,
      A(11) => blk00000003_sig00000390,
      A(10) => blk00000003_sig00000391,
      A(9) => blk00000003_sig00000392,
      A(8) => blk00000003_sig00000393,
      A(7) => blk00000003_sig00000394,
      A(6) => blk00000003_sig00000395,
      A(5) => blk00000003_sig00000396,
      A(4) => blk00000003_sig00000397,
      A(3) => blk00000003_sig00000398,
      A(2) => blk00000003_sig00000399,
      A(1) => blk00000003_sig0000039a,
      A(0) => blk00000003_sig0000039b,
      PCIN(47) => blk00000003_sig00000082,
      PCIN(46) => blk00000003_sig00000082,
      PCIN(45) => blk00000003_sig00000082,
      PCIN(44) => blk00000003_sig00000082,
      PCIN(43) => blk00000003_sig00000082,
      PCIN(42) => blk00000003_sig00000082,
      PCIN(41) => blk00000003_sig00000082,
      PCIN(40) => blk00000003_sig00000082,
      PCIN(39) => blk00000003_sig00000082,
      PCIN(38) => blk00000003_sig00000082,
      PCIN(37) => blk00000003_sig00000082,
      PCIN(36) => blk00000003_sig00000082,
      PCIN(35) => blk00000003_sig00000082,
      PCIN(34) => blk00000003_sig00000082,
      PCIN(33) => blk00000003_sig00000082,
      PCIN(32) => blk00000003_sig00000082,
      PCIN(31) => blk00000003_sig00000082,
      PCIN(30) => blk00000003_sig00000082,
      PCIN(29) => blk00000003_sig00000082,
      PCIN(28) => blk00000003_sig00000082,
      PCIN(27) => blk00000003_sig00000082,
      PCIN(26) => blk00000003_sig00000082,
      PCIN(25) => blk00000003_sig00000082,
      PCIN(24) => blk00000003_sig00000082,
      PCIN(23) => blk00000003_sig00000082,
      PCIN(22) => blk00000003_sig00000082,
      PCIN(21) => blk00000003_sig00000082,
      PCIN(20) => blk00000003_sig00000082,
      PCIN(19) => blk00000003_sig00000082,
      PCIN(18) => blk00000003_sig00000082,
      PCIN(17) => blk00000003_sig00000082,
      PCIN(16) => blk00000003_sig00000082,
      PCIN(15) => blk00000003_sig00000082,
      PCIN(14) => blk00000003_sig00000082,
      PCIN(13) => blk00000003_sig00000082,
      PCIN(12) => blk00000003_sig00000082,
      PCIN(11) => blk00000003_sig00000082,
      PCIN(10) => blk00000003_sig00000082,
      PCIN(9) => blk00000003_sig00000082,
      PCIN(8) => blk00000003_sig00000082,
      PCIN(7) => blk00000003_sig00000082,
      PCIN(6) => blk00000003_sig00000082,
      PCIN(5) => blk00000003_sig00000082,
      PCIN(4) => blk00000003_sig00000082,
      PCIN(3) => blk00000003_sig00000082,
      PCIN(2) => blk00000003_sig00000082,
      PCIN(1) => blk00000003_sig00000082,
      PCIN(0) => blk00000003_sig00000082,
      B(17) => blk00000003_sig0000048b,
      B(16) => blk00000003_sig0000048b,
      B(15) => blk00000003_sig00000359,
      B(14) => blk00000003_sig0000035b,
      B(13) => blk00000003_sig0000035d,
      B(12) => blk00000003_sig0000035f,
      B(11) => blk00000003_sig00000361,
      B(10) => blk00000003_sig00000363,
      B(9) => blk00000003_sig00000365,
      B(8) => blk00000003_sig00000367,
      B(7) => blk00000003_sig00000369,
      B(6) => blk00000003_sig0000036b,
      B(5) => blk00000003_sig0000036d,
      B(4) => blk00000003_sig0000036f,
      B(3) => blk00000003_sig00000371,
      B(2) => blk00000003_sig00000373,
      B(1) => blk00000003_sig00000375,
      B(0) => blk00000003_sig00000377,
      C(47) => blk00000003_sig00000082,
      C(46) => blk00000003_sig00000082,
      C(45) => blk00000003_sig00000082,
      C(44) => blk00000003_sig00000082,
      C(43) => blk00000003_sig00000082,
      C(42) => blk00000003_sig00000082,
      C(41) => blk00000003_sig00000082,
      C(40) => blk00000003_sig00000082,
      C(39) => blk00000003_sig00000082,
      C(38) => blk00000003_sig00000082,
      C(37) => blk00000003_sig00000082,
      C(36) => blk00000003_sig00000082,
      C(35) => blk00000003_sig00000082,
      C(34) => blk00000003_sig00000082,
      C(33) => blk00000003_sig00000082,
      C(32) => blk00000003_sig00000082,
      C(31) => blk00000003_sig00000082,
      C(30) => blk00000003_sig00000082,
      C(29) => blk00000003_sig00000082,
      C(28) => blk00000003_sig00000082,
      C(27) => blk00000003_sig00000082,
      C(26) => blk00000003_sig00000082,
      C(25) => blk00000003_sig00000082,
      C(24) => blk00000003_sig00000082,
      C(23) => blk00000003_sig00000082,
      C(22) => blk00000003_sig00000082,
      C(21) => blk00000003_sig00000082,
      C(20) => blk00000003_sig00000082,
      C(19) => blk00000003_sig00000082,
      C(18) => blk00000003_sig00000082,
      C(17) => blk00000003_sig00000082,
      C(16) => blk00000003_sig00000082,
      C(15) => blk00000003_sig00000082,
      C(14) => blk00000003_sig00000082,
      C(13) => blk00000003_sig00000082,
      C(12) => blk00000003_sig00000082,
      C(11) => blk00000003_sig00000082,
      C(10) => blk00000003_sig00000088,
      C(9) => blk00000003_sig00000088,
      C(8) => blk00000003_sig00000088,
      C(7) => blk00000003_sig00000088,
      C(6) => blk00000003_sig00000088,
      C(5) => blk00000003_sig00000088,
      C(4) => blk00000003_sig00000088,
      C(3) => blk00000003_sig00000088,
      C(2) => blk00000003_sig00000088,
      C(1) => blk00000003_sig00000088,
      C(0) => blk00000003_sig00000088,
      CARRYINSEL(2) => blk00000003_sig00000082,
      CARRYINSEL(1) => blk00000003_sig00000082,
      CARRYINSEL(0) => blk00000003_sig00000082,
      OPMODE(6) => blk00000003_sig00000082,
      OPMODE(5) => blk00000003_sig00000088,
      OPMODE(4) => blk00000003_sig00000088,
      OPMODE(3) => blk00000003_sig00000082,
      OPMODE(2) => blk00000003_sig00000088,
      OPMODE(1) => blk00000003_sig00000082,
      OPMODE(0) => blk00000003_sig00000088,
      BCIN(17) => blk00000003_sig00000082,
      BCIN(16) => blk00000003_sig00000082,
      BCIN(15) => blk00000003_sig00000082,
      BCIN(14) => blk00000003_sig00000082,
      BCIN(13) => blk00000003_sig00000082,
      BCIN(12) => blk00000003_sig00000082,
      BCIN(11) => blk00000003_sig00000082,
      BCIN(10) => blk00000003_sig00000082,
      BCIN(9) => blk00000003_sig00000082,
      BCIN(8) => blk00000003_sig00000082,
      BCIN(7) => blk00000003_sig00000082,
      BCIN(6) => blk00000003_sig00000082,
      BCIN(5) => blk00000003_sig00000082,
      BCIN(4) => blk00000003_sig00000082,
      BCIN(3) => blk00000003_sig00000082,
      BCIN(2) => blk00000003_sig00000082,
      BCIN(1) => blk00000003_sig00000082,
      BCIN(0) => blk00000003_sig00000082,
      ALUMODE(3) => blk00000003_sig00000082,
      ALUMODE(2) => blk00000003_sig00000082,
      ALUMODE(1) => blk00000003_sig00000492,
      ALUMODE(0) => blk00000003_sig00000492,
      PCOUT(47) => blk00000003_sig0000045b,
      PCOUT(46) => blk00000003_sig0000045c,
      PCOUT(45) => blk00000003_sig0000045d,
      PCOUT(44) => blk00000003_sig0000045e,
      PCOUT(43) => blk00000003_sig0000045f,
      PCOUT(42) => blk00000003_sig00000460,
      PCOUT(41) => blk00000003_sig00000461,
      PCOUT(40) => blk00000003_sig00000462,
      PCOUT(39) => blk00000003_sig00000463,
      PCOUT(38) => blk00000003_sig00000464,
      PCOUT(37) => blk00000003_sig00000465,
      PCOUT(36) => blk00000003_sig00000466,
      PCOUT(35) => blk00000003_sig00000467,
      PCOUT(34) => blk00000003_sig00000468,
      PCOUT(33) => blk00000003_sig00000469,
      PCOUT(32) => blk00000003_sig0000046a,
      PCOUT(31) => blk00000003_sig0000046b,
      PCOUT(30) => blk00000003_sig0000046c,
      PCOUT(29) => blk00000003_sig0000046d,
      PCOUT(28) => blk00000003_sig0000046e,
      PCOUT(27) => blk00000003_sig0000046f,
      PCOUT(26) => blk00000003_sig00000470,
      PCOUT(25) => blk00000003_sig00000471,
      PCOUT(24) => blk00000003_sig00000472,
      PCOUT(23) => blk00000003_sig00000473,
      PCOUT(22) => blk00000003_sig00000474,
      PCOUT(21) => blk00000003_sig00000475,
      PCOUT(20) => blk00000003_sig00000476,
      PCOUT(19) => blk00000003_sig00000477,
      PCOUT(18) => blk00000003_sig00000478,
      PCOUT(17) => blk00000003_sig00000479,
      PCOUT(16) => blk00000003_sig0000047a,
      PCOUT(15) => blk00000003_sig0000047b,
      PCOUT(14) => blk00000003_sig0000047c,
      PCOUT(13) => blk00000003_sig0000047d,
      PCOUT(12) => blk00000003_sig0000047e,
      PCOUT(11) => blk00000003_sig0000047f,
      PCOUT(10) => blk00000003_sig00000480,
      PCOUT(9) => blk00000003_sig00000481,
      PCOUT(8) => blk00000003_sig00000482,
      PCOUT(7) => blk00000003_sig00000483,
      PCOUT(6) => blk00000003_sig00000484,
      PCOUT(5) => blk00000003_sig00000485,
      PCOUT(4) => blk00000003_sig00000486,
      PCOUT(3) => blk00000003_sig00000487,
      PCOUT(2) => blk00000003_sig00000488,
      PCOUT(1) => blk00000003_sig00000489,
      PCOUT(0) => blk00000003_sig0000048a,
      P(47) => NLW_blk00000003_blk0000016a_P_47_UNCONNECTED,
      P(46) => NLW_blk00000003_blk0000016a_P_46_UNCONNECTED,
      P(45) => NLW_blk00000003_blk0000016a_P_45_UNCONNECTED,
      P(44) => NLW_blk00000003_blk0000016a_P_44_UNCONNECTED,
      P(43) => NLW_blk00000003_blk0000016a_P_43_UNCONNECTED,
      P(42) => NLW_blk00000003_blk0000016a_P_42_UNCONNECTED,
      P(41) => NLW_blk00000003_blk0000016a_P_41_UNCONNECTED,
      P(40) => NLW_blk00000003_blk0000016a_P_40_UNCONNECTED,
      P(39) => NLW_blk00000003_blk0000016a_P_39_UNCONNECTED,
      P(38) => NLW_blk00000003_blk0000016a_P_38_UNCONNECTED,
      P(37) => NLW_blk00000003_blk0000016a_P_37_UNCONNECTED,
      P(36) => NLW_blk00000003_blk0000016a_P_36_UNCONNECTED,
      P(35) => NLW_blk00000003_blk0000016a_P_35_UNCONNECTED,
      P(34) => NLW_blk00000003_blk0000016a_P_34_UNCONNECTED,
      P(33) => NLW_blk00000003_blk0000016a_P_33_UNCONNECTED,
      P(32) => NLW_blk00000003_blk0000016a_P_32_UNCONNECTED,
      P(31) => NLW_blk00000003_blk0000016a_P_31_UNCONNECTED,
      P(30) => NLW_blk00000003_blk0000016a_P_30_UNCONNECTED,
      P(29) => NLW_blk00000003_blk0000016a_P_29_UNCONNECTED,
      P(28) => NLW_blk00000003_blk0000016a_P_28_UNCONNECTED,
      P(27) => NLW_blk00000003_blk0000016a_P_27_UNCONNECTED,
      P(26) => NLW_blk00000003_blk0000016a_P_26_UNCONNECTED,
      P(25) => NLW_blk00000003_blk0000016a_P_25_UNCONNECTED,
      P(24) => NLW_blk00000003_blk0000016a_P_24_UNCONNECTED,
      P(23) => NLW_blk00000003_blk0000016a_P_23_UNCONNECTED,
      P(22) => NLW_blk00000003_blk0000016a_P_22_UNCONNECTED,
      P(21) => NLW_blk00000003_blk0000016a_P_21_UNCONNECTED,
      P(20) => NLW_blk00000003_blk0000016a_P_20_UNCONNECTED,
      P(19) => NLW_blk00000003_blk0000016a_P_19_UNCONNECTED,
      P(18) => NLW_blk00000003_blk0000016a_P_18_UNCONNECTED,
      P(17) => NLW_blk00000003_blk0000016a_P_17_UNCONNECTED,
      P(16) => NLW_blk00000003_blk0000016a_P_16_UNCONNECTED,
      P(15) => NLW_blk00000003_blk0000016a_P_15_UNCONNECTED,
      P(14) => NLW_blk00000003_blk0000016a_P_14_UNCONNECTED,
      P(13) => NLW_blk00000003_blk0000016a_P_13_UNCONNECTED,
      P(12) => NLW_blk00000003_blk0000016a_P_12_UNCONNECTED,
      P(11) => NLW_blk00000003_blk0000016a_P_11_UNCONNECTED,
      P(10) => NLW_blk00000003_blk0000016a_P_10_UNCONNECTED,
      P(9) => NLW_blk00000003_blk0000016a_P_9_UNCONNECTED,
      P(8) => NLW_blk00000003_blk0000016a_P_8_UNCONNECTED,
      P(7) => NLW_blk00000003_blk0000016a_P_7_UNCONNECTED,
      P(6) => NLW_blk00000003_blk0000016a_P_6_UNCONNECTED,
      P(5) => NLW_blk00000003_blk0000016a_P_5_UNCONNECTED,
      P(4) => NLW_blk00000003_blk0000016a_P_4_UNCONNECTED,
      P(3) => NLW_blk00000003_blk0000016a_P_3_UNCONNECTED,
      P(2) => NLW_blk00000003_blk0000016a_P_2_UNCONNECTED,
      P(1) => NLW_blk00000003_blk0000016a_P_1_UNCONNECTED,
      P(0) => NLW_blk00000003_blk0000016a_P_0_UNCONNECTED,
      BCOUT(17) => NLW_blk00000003_blk0000016a_BCOUT_17_UNCONNECTED,
      BCOUT(16) => NLW_blk00000003_blk0000016a_BCOUT_16_UNCONNECTED,
      BCOUT(15) => NLW_blk00000003_blk0000016a_BCOUT_15_UNCONNECTED,
      BCOUT(14) => NLW_blk00000003_blk0000016a_BCOUT_14_UNCONNECTED,
      BCOUT(13) => NLW_blk00000003_blk0000016a_BCOUT_13_UNCONNECTED,
      BCOUT(12) => NLW_blk00000003_blk0000016a_BCOUT_12_UNCONNECTED,
      BCOUT(11) => NLW_blk00000003_blk0000016a_BCOUT_11_UNCONNECTED,
      BCOUT(10) => NLW_blk00000003_blk0000016a_BCOUT_10_UNCONNECTED,
      BCOUT(9) => NLW_blk00000003_blk0000016a_BCOUT_9_UNCONNECTED,
      BCOUT(8) => NLW_blk00000003_blk0000016a_BCOUT_8_UNCONNECTED,
      BCOUT(7) => NLW_blk00000003_blk0000016a_BCOUT_7_UNCONNECTED,
      BCOUT(6) => NLW_blk00000003_blk0000016a_BCOUT_6_UNCONNECTED,
      BCOUT(5) => NLW_blk00000003_blk0000016a_BCOUT_5_UNCONNECTED,
      BCOUT(4) => NLW_blk00000003_blk0000016a_BCOUT_4_UNCONNECTED,
      BCOUT(3) => NLW_blk00000003_blk0000016a_BCOUT_3_UNCONNECTED,
      BCOUT(2) => NLW_blk00000003_blk0000016a_BCOUT_2_UNCONNECTED,
      BCOUT(1) => NLW_blk00000003_blk0000016a_BCOUT_1_UNCONNECTED,
      BCOUT(0) => NLW_blk00000003_blk0000016a_BCOUT_0_UNCONNECTED,
      ACIN(29) => blk00000003_sig00000082,
      ACIN(28) => blk00000003_sig00000082,
      ACIN(27) => blk00000003_sig00000082,
      ACIN(26) => blk00000003_sig00000082,
      ACIN(25) => blk00000003_sig00000082,
      ACIN(24) => blk00000003_sig00000082,
      ACIN(23) => blk00000003_sig00000082,
      ACIN(22) => blk00000003_sig00000082,
      ACIN(21) => blk00000003_sig00000082,
      ACIN(20) => blk00000003_sig00000082,
      ACIN(19) => blk00000003_sig00000082,
      ACIN(18) => blk00000003_sig00000082,
      ACIN(17) => blk00000003_sig00000082,
      ACIN(16) => blk00000003_sig00000082,
      ACIN(15) => blk00000003_sig00000082,
      ACIN(14) => blk00000003_sig00000082,
      ACIN(13) => blk00000003_sig00000082,
      ACIN(12) => blk00000003_sig00000082,
      ACIN(11) => blk00000003_sig00000082,
      ACIN(10) => blk00000003_sig00000082,
      ACIN(9) => blk00000003_sig00000082,
      ACIN(8) => blk00000003_sig00000082,
      ACIN(7) => blk00000003_sig00000082,
      ACIN(6) => blk00000003_sig00000082,
      ACIN(5) => blk00000003_sig00000082,
      ACIN(4) => blk00000003_sig00000082,
      ACIN(3) => blk00000003_sig00000082,
      ACIN(2) => blk00000003_sig00000082,
      ACIN(1) => blk00000003_sig00000082,
      ACIN(0) => blk00000003_sig00000082,
      ACOUT(29) => NLW_blk00000003_blk0000016a_ACOUT_29_UNCONNECTED,
      ACOUT(28) => NLW_blk00000003_blk0000016a_ACOUT_28_UNCONNECTED,
      ACOUT(27) => NLW_blk00000003_blk0000016a_ACOUT_27_UNCONNECTED,
      ACOUT(26) => NLW_blk00000003_blk0000016a_ACOUT_26_UNCONNECTED,
      ACOUT(25) => NLW_blk00000003_blk0000016a_ACOUT_25_UNCONNECTED,
      ACOUT(24) => NLW_blk00000003_blk0000016a_ACOUT_24_UNCONNECTED,
      ACOUT(23) => NLW_blk00000003_blk0000016a_ACOUT_23_UNCONNECTED,
      ACOUT(22) => NLW_blk00000003_blk0000016a_ACOUT_22_UNCONNECTED,
      ACOUT(21) => NLW_blk00000003_blk0000016a_ACOUT_21_UNCONNECTED,
      ACOUT(20) => NLW_blk00000003_blk0000016a_ACOUT_20_UNCONNECTED,
      ACOUT(19) => NLW_blk00000003_blk0000016a_ACOUT_19_UNCONNECTED,
      ACOUT(18) => NLW_blk00000003_blk0000016a_ACOUT_18_UNCONNECTED,
      ACOUT(17) => NLW_blk00000003_blk0000016a_ACOUT_17_UNCONNECTED,
      ACOUT(16) => NLW_blk00000003_blk0000016a_ACOUT_16_UNCONNECTED,
      ACOUT(15) => NLW_blk00000003_blk0000016a_ACOUT_15_UNCONNECTED,
      ACOUT(14) => NLW_blk00000003_blk0000016a_ACOUT_14_UNCONNECTED,
      ACOUT(13) => NLW_blk00000003_blk0000016a_ACOUT_13_UNCONNECTED,
      ACOUT(12) => NLW_blk00000003_blk0000016a_ACOUT_12_UNCONNECTED,
      ACOUT(11) => NLW_blk00000003_blk0000016a_ACOUT_11_UNCONNECTED,
      ACOUT(10) => NLW_blk00000003_blk0000016a_ACOUT_10_UNCONNECTED,
      ACOUT(9) => NLW_blk00000003_blk0000016a_ACOUT_9_UNCONNECTED,
      ACOUT(8) => NLW_blk00000003_blk0000016a_ACOUT_8_UNCONNECTED,
      ACOUT(7) => NLW_blk00000003_blk0000016a_ACOUT_7_UNCONNECTED,
      ACOUT(6) => NLW_blk00000003_blk0000016a_ACOUT_6_UNCONNECTED,
      ACOUT(5) => NLW_blk00000003_blk0000016a_ACOUT_5_UNCONNECTED,
      ACOUT(4) => NLW_blk00000003_blk0000016a_ACOUT_4_UNCONNECTED,
      ACOUT(3) => NLW_blk00000003_blk0000016a_ACOUT_3_UNCONNECTED,
      ACOUT(2) => NLW_blk00000003_blk0000016a_ACOUT_2_UNCONNECTED,
      ACOUT(1) => NLW_blk00000003_blk0000016a_ACOUT_1_UNCONNECTED,
      ACOUT(0) => NLW_blk00000003_blk0000016a_ACOUT_0_UNCONNECTED,
      CARRYOUT(3) => NLW_blk00000003_blk0000016a_CARRYOUT_3_UNCONNECTED,
      CARRYOUT(2) => NLW_blk00000003_blk0000016a_CARRYOUT_2_UNCONNECTED,
      CARRYOUT(1) => NLW_blk00000003_blk0000016a_CARRYOUT_1_UNCONNECTED,
      CARRYOUT(0) => NLW_blk00000003_blk0000016a_CARRYOUT_0_UNCONNECTED
    );
  blk00000003_blk00000169 : DSP48E
    generic map(
      ACASCREG => 2,
      ALUMODEREG => 1,
      AREG => 2,
      AUTORESET_PATTERN_DETECT => FALSE,
      AUTORESET_PATTERN_DETECT_OPTINV => "MATCH",
      A_INPUT => "DIRECT",
      BCASCREG => 2,
      BREG => 2,
      B_INPUT => "DIRECT",
      CARRYINREG => 0,
      CARRYINSELREG => 0,
      CREG => 0,
      MASK => X"000000000000",
      MREG => 1,
      MULTCARRYINREG => 0,
      OPMODEREG => 0,
      PATTERN => X"000000000000",
      PREG => 1,
      SEL_MASK => "MASK",
      SEL_PATTERN => "PATTERN",
      SEL_ROUNDING_MASK => "SEL_MASK",
      SIM_MODE => "SAFE",
      USE_MULT => "MULT_S",
      USE_PATTERN_DETECT => "NO_PATDET",
      USE_SIMD => "ONE48"
    )
    port map (
      CARRYIN => blk00000003_sig00000082,
      CEA1 => ce,
      CEA2 => ce,
      CEB1 => ce,
      CEB2 => ce,
      CEC => blk00000003_sig00000082,
      CECTRL => blk00000003_sig00000082,
      CEP => ce,
      CEM => ce,
      CECARRYIN => blk00000003_sig00000082,
      CEMULTCARRYIN => blk00000003_sig00000082,
      CLK => clk,
      RSTA => blk00000003_sig00000082,
      RSTB => blk00000003_sig00000082,
      RSTC => blk00000003_sig00000082,
      RSTCTRL => blk00000003_sig00000082,
      RSTP => blk00000003_sig00000082,
      RSTM => blk00000003_sig00000082,
      RSTALLCARRYIN => blk00000003_sig00000082,
      CEALUMODE => ce,
      RSTALUMODE => blk00000003_sig00000082,
      PATTERNBDETECT => NLW_blk00000003_blk00000169_PATTERNBDETECT_UNCONNECTED,
      PATTERNDETECT => NLW_blk00000003_blk00000169_PATTERNDETECT_UNCONNECTED,
      OVERFLOW => NLW_blk00000003_blk00000169_OVERFLOW_UNCONNECTED,
      UNDERFLOW => NLW_blk00000003_blk00000169_UNDERFLOW_UNCONNECTED,
      CARRYCASCIN => blk00000003_sig00000082,
      CARRYCASCOUT => NLW_blk00000003_blk00000169_CARRYCASCOUT_UNCONNECTED,
      MULTSIGNIN => blk00000003_sig00000082,
      MULTSIGNOUT => NLW_blk00000003_blk00000169_MULTSIGNOUT_UNCONNECTED,
      A(29) => blk00000003_sig00000082,
      A(28) => blk00000003_sig00000082,
      A(27) => blk00000003_sig00000082,
      A(26) => blk00000003_sig00000082,
      A(25) => blk00000003_sig00000082,
      A(24) => blk00000003_sig00000082,
      A(23) => blk00000003_sig00000082,
      A(22) => blk00000003_sig00000082,
      A(21) => blk00000003_sig00000082,
      A(20) => blk00000003_sig00000082,
      A(19) => blk00000003_sig00000082,
      A(18) => blk00000003_sig00000082,
      A(17) => blk00000003_sig00000082,
      A(16) => blk00000003_sig0000037a,
      A(15) => blk00000003_sig0000037b,
      A(14) => blk00000003_sig0000037c,
      A(13) => blk00000003_sig0000037d,
      A(12) => blk00000003_sig0000037e,
      A(11) => blk00000003_sig0000037f,
      A(10) => blk00000003_sig00000380,
      A(9) => blk00000003_sig00000381,
      A(8) => blk00000003_sig00000382,
      A(7) => blk00000003_sig00000383,
      A(6) => blk00000003_sig00000384,
      A(5) => blk00000003_sig00000385,
      A(4) => blk00000003_sig00000386,
      A(3) => blk00000003_sig00000387,
      A(2) => blk00000003_sig00000388,
      A(1) => blk00000003_sig00000389,
      A(0) => blk00000003_sig0000038a,
      PCIN(47) => blk00000003_sig0000045b,
      PCIN(46) => blk00000003_sig0000045c,
      PCIN(45) => blk00000003_sig0000045d,
      PCIN(44) => blk00000003_sig0000045e,
      PCIN(43) => blk00000003_sig0000045f,
      PCIN(42) => blk00000003_sig00000460,
      PCIN(41) => blk00000003_sig00000461,
      PCIN(40) => blk00000003_sig00000462,
      PCIN(39) => blk00000003_sig00000463,
      PCIN(38) => blk00000003_sig00000464,
      PCIN(37) => blk00000003_sig00000465,
      PCIN(36) => blk00000003_sig00000466,
      PCIN(35) => blk00000003_sig00000467,
      PCIN(34) => blk00000003_sig00000468,
      PCIN(33) => blk00000003_sig00000469,
      PCIN(32) => blk00000003_sig0000046a,
      PCIN(31) => blk00000003_sig0000046b,
      PCIN(30) => blk00000003_sig0000046c,
      PCIN(29) => blk00000003_sig0000046d,
      PCIN(28) => blk00000003_sig0000046e,
      PCIN(27) => blk00000003_sig0000046f,
      PCIN(26) => blk00000003_sig00000470,
      PCIN(25) => blk00000003_sig00000471,
      PCIN(24) => blk00000003_sig00000472,
      PCIN(23) => blk00000003_sig00000473,
      PCIN(22) => blk00000003_sig00000474,
      PCIN(21) => blk00000003_sig00000475,
      PCIN(20) => blk00000003_sig00000476,
      PCIN(19) => blk00000003_sig00000477,
      PCIN(18) => blk00000003_sig00000478,
      PCIN(17) => blk00000003_sig00000479,
      PCIN(16) => blk00000003_sig0000047a,
      PCIN(15) => blk00000003_sig0000047b,
      PCIN(14) => blk00000003_sig0000047c,
      PCIN(13) => blk00000003_sig0000047d,
      PCIN(12) => blk00000003_sig0000047e,
      PCIN(11) => blk00000003_sig0000047f,
      PCIN(10) => blk00000003_sig00000480,
      PCIN(9) => blk00000003_sig00000481,
      PCIN(8) => blk00000003_sig00000482,
      PCIN(7) => blk00000003_sig00000483,
      PCIN(6) => blk00000003_sig00000484,
      PCIN(5) => blk00000003_sig00000485,
      PCIN(4) => blk00000003_sig00000486,
      PCIN(3) => blk00000003_sig00000487,
      PCIN(2) => blk00000003_sig00000488,
      PCIN(1) => blk00000003_sig00000489,
      PCIN(0) => blk00000003_sig0000048a,
      B(17) => blk00000003_sig0000048b,
      B(16) => blk00000003_sig0000048b,
      B(15) => blk00000003_sig00000339,
      B(14) => blk00000003_sig0000033b,
      B(13) => blk00000003_sig0000033d,
      B(12) => blk00000003_sig0000033f,
      B(11) => blk00000003_sig00000341,
      B(10) => blk00000003_sig00000343,
      B(9) => blk00000003_sig00000345,
      B(8) => blk00000003_sig00000347,
      B(7) => blk00000003_sig00000349,
      B(6) => blk00000003_sig0000034b,
      B(5) => blk00000003_sig0000034d,
      B(4) => blk00000003_sig0000034f,
      B(3) => blk00000003_sig00000351,
      B(2) => blk00000003_sig00000353,
      B(1) => blk00000003_sig00000355,
      B(0) => blk00000003_sig00000357,
      C(47) => blk00000003_sig00000082,
      C(46) => blk00000003_sig00000082,
      C(45) => blk00000003_sig00000082,
      C(44) => blk00000003_sig00000082,
      C(43) => blk00000003_sig00000082,
      C(42) => blk00000003_sig00000082,
      C(41) => blk00000003_sig00000082,
      C(40) => blk00000003_sig00000082,
      C(39) => blk00000003_sig00000082,
      C(38) => blk00000003_sig00000082,
      C(37) => blk00000003_sig00000082,
      C(36) => blk00000003_sig00000082,
      C(35) => blk00000003_sig00000082,
      C(34) => blk00000003_sig00000082,
      C(33) => blk00000003_sig00000082,
      C(32) => blk00000003_sig00000082,
      C(31) => blk00000003_sig00000082,
      C(30) => blk00000003_sig00000082,
      C(29) => blk00000003_sig00000082,
      C(28) => blk00000003_sig00000082,
      C(27) => blk00000003_sig00000082,
      C(26) => blk00000003_sig00000082,
      C(25) => blk00000003_sig00000082,
      C(24) => blk00000003_sig00000082,
      C(23) => blk00000003_sig00000082,
      C(22) => blk00000003_sig00000082,
      C(21) => blk00000003_sig00000082,
      C(20) => blk00000003_sig00000082,
      C(19) => blk00000003_sig00000082,
      C(18) => blk00000003_sig00000082,
      C(17) => blk00000003_sig00000082,
      C(16) => blk00000003_sig00000082,
      C(15) => blk00000003_sig00000082,
      C(14) => blk00000003_sig00000082,
      C(13) => blk00000003_sig00000082,
      C(12) => blk00000003_sig00000082,
      C(11) => blk00000003_sig00000082,
      C(10) => blk00000003_sig00000088,
      C(9) => blk00000003_sig00000088,
      C(8) => blk00000003_sig00000088,
      C(7) => blk00000003_sig00000088,
      C(6) => blk00000003_sig00000088,
      C(5) => blk00000003_sig00000088,
      C(4) => blk00000003_sig00000088,
      C(3) => blk00000003_sig00000088,
      C(2) => blk00000003_sig00000088,
      C(1) => blk00000003_sig00000088,
      C(0) => blk00000003_sig00000088,
      CARRYINSEL(2) => blk00000003_sig00000082,
      CARRYINSEL(1) => blk00000003_sig00000082,
      CARRYINSEL(0) => blk00000003_sig00000082,
      OPMODE(6) => blk00000003_sig00000082,
      OPMODE(5) => blk00000003_sig00000082,
      OPMODE(4) => blk00000003_sig00000088,
      OPMODE(3) => blk00000003_sig00000082,
      OPMODE(2) => blk00000003_sig00000088,
      OPMODE(1) => blk00000003_sig00000082,
      OPMODE(0) => blk00000003_sig00000088,
      BCIN(17) => blk00000003_sig00000082,
      BCIN(16) => blk00000003_sig00000082,
      BCIN(15) => blk00000003_sig00000082,
      BCIN(14) => blk00000003_sig00000082,
      BCIN(13) => blk00000003_sig00000082,
      BCIN(12) => blk00000003_sig00000082,
      BCIN(11) => blk00000003_sig00000082,
      BCIN(10) => blk00000003_sig00000082,
      BCIN(9) => blk00000003_sig00000082,
      BCIN(8) => blk00000003_sig00000082,
      BCIN(7) => blk00000003_sig00000082,
      BCIN(6) => blk00000003_sig00000082,
      BCIN(5) => blk00000003_sig00000082,
      BCIN(4) => blk00000003_sig00000082,
      BCIN(3) => blk00000003_sig00000082,
      BCIN(2) => blk00000003_sig00000082,
      BCIN(1) => blk00000003_sig00000082,
      BCIN(0) => blk00000003_sig00000082,
      ALUMODE(3) => blk00000003_sig00000082,
      ALUMODE(2) => blk00000003_sig00000082,
      ALUMODE(1) => blk00000003_sig0000048c,
      ALUMODE(0) => blk00000003_sig0000048c,
      PCOUT(47) => blk00000003_sig00000418,
      PCOUT(46) => blk00000003_sig00000419,
      PCOUT(45) => blk00000003_sig0000041a,
      PCOUT(44) => blk00000003_sig0000041b,
      PCOUT(43) => blk00000003_sig0000041c,
      PCOUT(42) => blk00000003_sig0000041d,
      PCOUT(41) => blk00000003_sig0000041e,
      PCOUT(40) => blk00000003_sig0000041f,
      PCOUT(39) => blk00000003_sig00000420,
      PCOUT(38) => blk00000003_sig00000421,
      PCOUT(37) => blk00000003_sig00000422,
      PCOUT(36) => blk00000003_sig00000423,
      PCOUT(35) => blk00000003_sig00000424,
      PCOUT(34) => blk00000003_sig00000425,
      PCOUT(33) => blk00000003_sig00000426,
      PCOUT(32) => blk00000003_sig00000427,
      PCOUT(31) => blk00000003_sig00000428,
      PCOUT(30) => blk00000003_sig00000429,
      PCOUT(29) => blk00000003_sig0000042a,
      PCOUT(28) => blk00000003_sig0000042b,
      PCOUT(27) => blk00000003_sig0000042c,
      PCOUT(26) => blk00000003_sig0000042d,
      PCOUT(25) => blk00000003_sig0000042e,
      PCOUT(24) => blk00000003_sig0000042f,
      PCOUT(23) => blk00000003_sig00000430,
      PCOUT(22) => blk00000003_sig00000431,
      PCOUT(21) => blk00000003_sig00000432,
      PCOUT(20) => blk00000003_sig00000433,
      PCOUT(19) => blk00000003_sig00000434,
      PCOUT(18) => blk00000003_sig00000435,
      PCOUT(17) => blk00000003_sig00000436,
      PCOUT(16) => blk00000003_sig00000437,
      PCOUT(15) => blk00000003_sig00000438,
      PCOUT(14) => blk00000003_sig00000439,
      PCOUT(13) => blk00000003_sig0000043a,
      PCOUT(12) => blk00000003_sig0000043b,
      PCOUT(11) => blk00000003_sig0000043c,
      PCOUT(10) => blk00000003_sig0000043d,
      PCOUT(9) => blk00000003_sig0000043e,
      PCOUT(8) => blk00000003_sig0000043f,
      PCOUT(7) => blk00000003_sig00000440,
      PCOUT(6) => blk00000003_sig00000441,
      PCOUT(5) => blk00000003_sig00000442,
      PCOUT(4) => blk00000003_sig00000443,
      PCOUT(3) => blk00000003_sig00000444,
      PCOUT(2) => blk00000003_sig00000445,
      PCOUT(1) => blk00000003_sig00000446,
      PCOUT(0) => blk00000003_sig00000447,
      P(47) => NLW_blk00000003_blk00000169_P_47_UNCONNECTED,
      P(46) => NLW_blk00000003_blk00000169_P_46_UNCONNECTED,
      P(45) => NLW_blk00000003_blk00000169_P_45_UNCONNECTED,
      P(44) => NLW_blk00000003_blk00000169_P_44_UNCONNECTED,
      P(43) => NLW_blk00000003_blk00000169_P_43_UNCONNECTED,
      P(42) => NLW_blk00000003_blk00000169_P_42_UNCONNECTED,
      P(41) => NLW_blk00000003_blk00000169_P_41_UNCONNECTED,
      P(40) => NLW_blk00000003_blk00000169_P_40_UNCONNECTED,
      P(39) => NLW_blk00000003_blk00000169_P_39_UNCONNECTED,
      P(38) => NLW_blk00000003_blk00000169_P_38_UNCONNECTED,
      P(37) => NLW_blk00000003_blk00000169_P_37_UNCONNECTED,
      P(36) => NLW_blk00000003_blk00000169_P_36_UNCONNECTED,
      P(35) => NLW_blk00000003_blk00000169_P_35_UNCONNECTED,
      P(34) => NLW_blk00000003_blk00000169_P_34_UNCONNECTED,
      P(33) => NLW_blk00000003_blk00000169_P_33_UNCONNECTED,
      P(32) => NLW_blk00000003_blk00000169_P_32_UNCONNECTED,
      P(31) => NLW_blk00000003_blk00000169_P_31_UNCONNECTED,
      P(30) => NLW_blk00000003_blk00000169_P_30_UNCONNECTED,
      P(29) => NLW_blk00000003_blk00000169_P_29_UNCONNECTED,
      P(28) => NLW_blk00000003_blk00000169_P_28_UNCONNECTED,
      P(27) => NLW_blk00000003_blk00000169_P_27_UNCONNECTED,
      P(26) => NLW_blk00000003_blk00000169_P_26_UNCONNECTED,
      P(25) => NLW_blk00000003_blk00000169_P_25_UNCONNECTED,
      P(24) => NLW_blk00000003_blk00000169_P_24_UNCONNECTED,
      P(23) => NLW_blk00000003_blk00000169_P_23_UNCONNECTED,
      P(22) => NLW_blk00000003_blk00000169_P_22_UNCONNECTED,
      P(21) => NLW_blk00000003_blk00000169_P_21_UNCONNECTED,
      P(20) => NLW_blk00000003_blk00000169_P_20_UNCONNECTED,
      P(19) => NLW_blk00000003_blk00000169_P_19_UNCONNECTED,
      P(18) => NLW_blk00000003_blk00000169_P_18_UNCONNECTED,
      P(17) => NLW_blk00000003_blk00000169_P_17_UNCONNECTED,
      P(16) => blk00000003_sig0000048d,
      P(15) => blk00000003_sig0000048e,
      P(14) => blk00000003_sig0000048f,
      P(13) => blk00000003_sig00000490,
      P(12) => blk00000003_sig00000491,
      P(11) => NLW_blk00000003_blk00000169_P_11_UNCONNECTED,
      P(10) => NLW_blk00000003_blk00000169_P_10_UNCONNECTED,
      P(9) => NLW_blk00000003_blk00000169_P_9_UNCONNECTED,
      P(8) => NLW_blk00000003_blk00000169_P_8_UNCONNECTED,
      P(7) => NLW_blk00000003_blk00000169_P_7_UNCONNECTED,
      P(6) => NLW_blk00000003_blk00000169_P_6_UNCONNECTED,
      P(5) => NLW_blk00000003_blk00000169_P_5_UNCONNECTED,
      P(4) => NLW_blk00000003_blk00000169_P_4_UNCONNECTED,
      P(3) => NLW_blk00000003_blk00000169_P_3_UNCONNECTED,
      P(2) => NLW_blk00000003_blk00000169_P_2_UNCONNECTED,
      P(1) => NLW_blk00000003_blk00000169_P_1_UNCONNECTED,
      P(0) => NLW_blk00000003_blk00000169_P_0_UNCONNECTED,
      BCOUT(17) => blk00000003_sig00000448,
      BCOUT(16) => blk00000003_sig00000449,
      BCOUT(15) => blk00000003_sig0000044a,
      BCOUT(14) => blk00000003_sig0000044b,
      BCOUT(13) => blk00000003_sig0000044c,
      BCOUT(12) => blk00000003_sig0000044d,
      BCOUT(11) => blk00000003_sig0000044e,
      BCOUT(10) => blk00000003_sig0000044f,
      BCOUT(9) => blk00000003_sig00000450,
      BCOUT(8) => blk00000003_sig00000451,
      BCOUT(7) => blk00000003_sig00000452,
      BCOUT(6) => blk00000003_sig00000453,
      BCOUT(5) => blk00000003_sig00000454,
      BCOUT(4) => blk00000003_sig00000455,
      BCOUT(3) => blk00000003_sig00000456,
      BCOUT(2) => blk00000003_sig00000457,
      BCOUT(1) => blk00000003_sig00000458,
      BCOUT(0) => blk00000003_sig00000459,
      ACIN(29) => blk00000003_sig00000082,
      ACIN(28) => blk00000003_sig00000082,
      ACIN(27) => blk00000003_sig00000082,
      ACIN(26) => blk00000003_sig00000082,
      ACIN(25) => blk00000003_sig00000082,
      ACIN(24) => blk00000003_sig00000082,
      ACIN(23) => blk00000003_sig00000082,
      ACIN(22) => blk00000003_sig00000082,
      ACIN(21) => blk00000003_sig00000082,
      ACIN(20) => blk00000003_sig00000082,
      ACIN(19) => blk00000003_sig00000082,
      ACIN(18) => blk00000003_sig00000082,
      ACIN(17) => blk00000003_sig00000082,
      ACIN(16) => blk00000003_sig00000082,
      ACIN(15) => blk00000003_sig00000082,
      ACIN(14) => blk00000003_sig00000082,
      ACIN(13) => blk00000003_sig00000082,
      ACIN(12) => blk00000003_sig00000082,
      ACIN(11) => blk00000003_sig00000082,
      ACIN(10) => blk00000003_sig00000082,
      ACIN(9) => blk00000003_sig00000082,
      ACIN(8) => blk00000003_sig00000082,
      ACIN(7) => blk00000003_sig00000082,
      ACIN(6) => blk00000003_sig00000082,
      ACIN(5) => blk00000003_sig00000082,
      ACIN(4) => blk00000003_sig00000082,
      ACIN(3) => blk00000003_sig00000082,
      ACIN(2) => blk00000003_sig00000082,
      ACIN(1) => blk00000003_sig00000082,
      ACIN(0) => blk00000003_sig00000082,
      ACOUT(29) => NLW_blk00000003_blk00000169_ACOUT_29_UNCONNECTED,
      ACOUT(28) => NLW_blk00000003_blk00000169_ACOUT_28_UNCONNECTED,
      ACOUT(27) => NLW_blk00000003_blk00000169_ACOUT_27_UNCONNECTED,
      ACOUT(26) => NLW_blk00000003_blk00000169_ACOUT_26_UNCONNECTED,
      ACOUT(25) => NLW_blk00000003_blk00000169_ACOUT_25_UNCONNECTED,
      ACOUT(24) => NLW_blk00000003_blk00000169_ACOUT_24_UNCONNECTED,
      ACOUT(23) => NLW_blk00000003_blk00000169_ACOUT_23_UNCONNECTED,
      ACOUT(22) => NLW_blk00000003_blk00000169_ACOUT_22_UNCONNECTED,
      ACOUT(21) => NLW_blk00000003_blk00000169_ACOUT_21_UNCONNECTED,
      ACOUT(20) => NLW_blk00000003_blk00000169_ACOUT_20_UNCONNECTED,
      ACOUT(19) => NLW_blk00000003_blk00000169_ACOUT_19_UNCONNECTED,
      ACOUT(18) => NLW_blk00000003_blk00000169_ACOUT_18_UNCONNECTED,
      ACOUT(17) => NLW_blk00000003_blk00000169_ACOUT_17_UNCONNECTED,
      ACOUT(16) => NLW_blk00000003_blk00000169_ACOUT_16_UNCONNECTED,
      ACOUT(15) => NLW_blk00000003_blk00000169_ACOUT_15_UNCONNECTED,
      ACOUT(14) => NLW_blk00000003_blk00000169_ACOUT_14_UNCONNECTED,
      ACOUT(13) => NLW_blk00000003_blk00000169_ACOUT_13_UNCONNECTED,
      ACOUT(12) => NLW_blk00000003_blk00000169_ACOUT_12_UNCONNECTED,
      ACOUT(11) => NLW_blk00000003_blk00000169_ACOUT_11_UNCONNECTED,
      ACOUT(10) => NLW_blk00000003_blk00000169_ACOUT_10_UNCONNECTED,
      ACOUT(9) => NLW_blk00000003_blk00000169_ACOUT_9_UNCONNECTED,
      ACOUT(8) => NLW_blk00000003_blk00000169_ACOUT_8_UNCONNECTED,
      ACOUT(7) => NLW_blk00000003_blk00000169_ACOUT_7_UNCONNECTED,
      ACOUT(6) => NLW_blk00000003_blk00000169_ACOUT_6_UNCONNECTED,
      ACOUT(5) => NLW_blk00000003_blk00000169_ACOUT_5_UNCONNECTED,
      ACOUT(4) => NLW_blk00000003_blk00000169_ACOUT_4_UNCONNECTED,
      ACOUT(3) => NLW_blk00000003_blk00000169_ACOUT_3_UNCONNECTED,
      ACOUT(2) => NLW_blk00000003_blk00000169_ACOUT_2_UNCONNECTED,
      ACOUT(1) => NLW_blk00000003_blk00000169_ACOUT_1_UNCONNECTED,
      ACOUT(0) => NLW_blk00000003_blk00000169_ACOUT_0_UNCONNECTED,
      CARRYOUT(3) => NLW_blk00000003_blk00000169_CARRYOUT_3_UNCONNECTED,
      CARRYOUT(2) => NLW_blk00000003_blk00000169_CARRYOUT_2_UNCONNECTED,
      CARRYOUT(1) => NLW_blk00000003_blk00000169_CARRYOUT_1_UNCONNECTED,
      CARRYOUT(0) => NLW_blk00000003_blk00000169_CARRYOUT_0_UNCONNECTED
    );
  blk00000003_blk00000168 : DSP48E
    generic map(
      ACASCREG => 2,
      ALUMODEREG => 1,
      AREG => 2,
      AUTORESET_PATTERN_DETECT => FALSE,
      AUTORESET_PATTERN_DETECT_OPTINV => "MATCH",
      A_INPUT => "DIRECT",
      BCASCREG => 1,
      BREG => 1,
      B_INPUT => "CASCADE",
      CARRYINREG => 1,
      CARRYINSELREG => 0,
      CREG => 0,
      MASK => X"000000000000",
      MREG => 1,
      MULTCARRYINREG => 0,
      OPMODEREG => 0,
      PATTERN => X"000000000000",
      PREG => 1,
      SEL_MASK => "MASK",
      SEL_PATTERN => "PATTERN",
      SEL_ROUNDING_MASK => "SEL_MASK",
      SIM_MODE => "SAFE",
      USE_MULT => "MULT_S",
      USE_PATTERN_DETECT => "NO_PATDET",
      USE_SIMD => "ONE48"
    )
    port map (
      CARRYIN => blk00000003_sig00000082,
      CEA1 => ce,
      CEA2 => ce,
      CEB1 => blk00000003_sig00000082,
      CEB2 => ce,
      CEC => blk00000003_sig00000082,
      CECTRL => blk00000003_sig00000082,
      CEP => ce,
      CEM => ce,
      CECARRYIN => blk00000003_sig00000082,
      CEMULTCARRYIN => blk00000003_sig00000082,
      CLK => clk,
      RSTA => blk00000003_sig00000082,
      RSTB => blk00000003_sig00000082,
      RSTC => blk00000003_sig00000082,
      RSTCTRL => blk00000003_sig00000082,
      RSTP => blk00000003_sig00000082,
      RSTM => blk00000003_sig00000082,
      RSTALLCARRYIN => blk00000003_sig00000082,
      CEALUMODE => ce,
      RSTALUMODE => blk00000003_sig00000082,
      PATTERNBDETECT => NLW_blk00000003_blk00000168_PATTERNBDETECT_UNCONNECTED,
      PATTERNDETECT => NLW_blk00000003_blk00000168_PATTERNDETECT_UNCONNECTED,
      OVERFLOW => NLW_blk00000003_blk00000168_OVERFLOW_UNCONNECTED,
      UNDERFLOW => NLW_blk00000003_blk00000168_UNDERFLOW_UNCONNECTED,
      CARRYCASCIN => blk00000003_sig00000082,
      CARRYCASCOUT => NLW_blk00000003_blk00000168_CARRYCASCOUT_UNCONNECTED,
      MULTSIGNIN => blk00000003_sig00000082,
      MULTSIGNOUT => NLW_blk00000003_blk00000168_MULTSIGNOUT_UNCONNECTED,
      A(29) => blk00000003_sig00000082,
      A(28) => blk00000003_sig00000082,
      A(27) => blk00000003_sig00000082,
      A(26) => blk00000003_sig00000082,
      A(25) => blk00000003_sig00000082,
      A(24) => blk00000003_sig0000040a,
      A(23) => blk00000003_sig0000040a,
      A(22) => blk00000003_sig0000040a,
      A(21) => blk00000003_sig0000040a,
      A(20) => blk00000003_sig0000040a,
      A(19) => blk00000003_sig0000040a,
      A(18) => blk00000003_sig0000040a,
      A(17) => blk00000003_sig0000040a,
      A(16) => blk00000003_sig0000040a,
      A(15) => blk00000003_sig0000040a,
      A(14) => blk00000003_sig0000040a,
      A(13) => blk00000003_sig0000040a,
      A(12) => blk00000003_sig0000040b,
      A(11) => blk00000003_sig0000040c,
      A(10) => blk00000003_sig0000040d,
      A(9) => blk00000003_sig0000040e,
      A(8) => blk00000003_sig0000040f,
      A(7) => blk00000003_sig00000410,
      A(6) => blk00000003_sig00000411,
      A(5) => blk00000003_sig00000412,
      A(4) => blk00000003_sig00000413,
      A(3) => blk00000003_sig00000414,
      A(2) => blk00000003_sig00000415,
      A(1) => blk00000003_sig00000416,
      A(0) => blk00000003_sig00000417,
      PCIN(47) => blk00000003_sig00000418,
      PCIN(46) => blk00000003_sig00000419,
      PCIN(45) => blk00000003_sig0000041a,
      PCIN(44) => blk00000003_sig0000041b,
      PCIN(43) => blk00000003_sig0000041c,
      PCIN(42) => blk00000003_sig0000041d,
      PCIN(41) => blk00000003_sig0000041e,
      PCIN(40) => blk00000003_sig0000041f,
      PCIN(39) => blk00000003_sig00000420,
      PCIN(38) => blk00000003_sig00000421,
      PCIN(37) => blk00000003_sig00000422,
      PCIN(36) => blk00000003_sig00000423,
      PCIN(35) => blk00000003_sig00000424,
      PCIN(34) => blk00000003_sig00000425,
      PCIN(33) => blk00000003_sig00000426,
      PCIN(32) => blk00000003_sig00000427,
      PCIN(31) => blk00000003_sig00000428,
      PCIN(30) => blk00000003_sig00000429,
      PCIN(29) => blk00000003_sig0000042a,
      PCIN(28) => blk00000003_sig0000042b,
      PCIN(27) => blk00000003_sig0000042c,
      PCIN(26) => blk00000003_sig0000042d,
      PCIN(25) => blk00000003_sig0000042e,
      PCIN(24) => blk00000003_sig0000042f,
      PCIN(23) => blk00000003_sig00000430,
      PCIN(22) => blk00000003_sig00000431,
      PCIN(21) => blk00000003_sig00000432,
      PCIN(20) => blk00000003_sig00000433,
      PCIN(19) => blk00000003_sig00000434,
      PCIN(18) => blk00000003_sig00000435,
      PCIN(17) => blk00000003_sig00000436,
      PCIN(16) => blk00000003_sig00000437,
      PCIN(15) => blk00000003_sig00000438,
      PCIN(14) => blk00000003_sig00000439,
      PCIN(13) => blk00000003_sig0000043a,
      PCIN(12) => blk00000003_sig0000043b,
      PCIN(11) => blk00000003_sig0000043c,
      PCIN(10) => blk00000003_sig0000043d,
      PCIN(9) => blk00000003_sig0000043e,
      PCIN(8) => blk00000003_sig0000043f,
      PCIN(7) => blk00000003_sig00000440,
      PCIN(6) => blk00000003_sig00000441,
      PCIN(5) => blk00000003_sig00000442,
      PCIN(4) => blk00000003_sig00000443,
      PCIN(3) => blk00000003_sig00000444,
      PCIN(2) => blk00000003_sig00000445,
      PCIN(1) => blk00000003_sig00000446,
      PCIN(0) => blk00000003_sig00000447,
      B(17) => blk00000003_sig00000088,
      B(16) => blk00000003_sig00000088,
      B(15) => blk00000003_sig00000088,
      B(14) => blk00000003_sig00000088,
      B(13) => blk00000003_sig00000088,
      B(12) => blk00000003_sig00000088,
      B(11) => blk00000003_sig00000088,
      B(10) => blk00000003_sig00000088,
      B(9) => blk00000003_sig00000088,
      B(8) => blk00000003_sig00000088,
      B(7) => blk00000003_sig00000088,
      B(6) => blk00000003_sig00000088,
      B(5) => blk00000003_sig00000088,
      B(4) => blk00000003_sig00000088,
      B(3) => blk00000003_sig00000088,
      B(2) => blk00000003_sig00000088,
      B(1) => blk00000003_sig00000088,
      B(0) => blk00000003_sig00000088,
      C(47) => blk00000003_sig00000088,
      C(46) => blk00000003_sig00000088,
      C(45) => blk00000003_sig00000088,
      C(44) => blk00000003_sig00000088,
      C(43) => blk00000003_sig00000088,
      C(42) => blk00000003_sig00000088,
      C(41) => blk00000003_sig00000088,
      C(40) => blk00000003_sig00000088,
      C(39) => blk00000003_sig00000088,
      C(38) => blk00000003_sig00000088,
      C(37) => blk00000003_sig00000088,
      C(36) => blk00000003_sig00000088,
      C(35) => blk00000003_sig00000088,
      C(34) => blk00000003_sig00000088,
      C(33) => blk00000003_sig00000088,
      C(32) => blk00000003_sig00000088,
      C(31) => blk00000003_sig00000088,
      C(30) => blk00000003_sig00000088,
      C(29) => blk00000003_sig00000088,
      C(28) => blk00000003_sig00000088,
      C(27) => blk00000003_sig00000088,
      C(26) => blk00000003_sig00000088,
      C(25) => blk00000003_sig00000088,
      C(24) => blk00000003_sig00000088,
      C(23) => blk00000003_sig00000088,
      C(22) => blk00000003_sig00000088,
      C(21) => blk00000003_sig00000088,
      C(20) => blk00000003_sig00000088,
      C(19) => blk00000003_sig00000088,
      C(18) => blk00000003_sig00000088,
      C(17) => blk00000003_sig00000088,
      C(16) => blk00000003_sig00000088,
      C(15) => blk00000003_sig00000088,
      C(14) => blk00000003_sig00000088,
      C(13) => blk00000003_sig00000088,
      C(12) => blk00000003_sig00000088,
      C(11) => blk00000003_sig00000088,
      C(10) => blk00000003_sig00000088,
      C(9) => blk00000003_sig00000088,
      C(8) => blk00000003_sig00000088,
      C(7) => blk00000003_sig00000088,
      C(6) => blk00000003_sig00000088,
      C(5) => blk00000003_sig00000088,
      C(4) => blk00000003_sig00000088,
      C(3) => blk00000003_sig00000088,
      C(2) => blk00000003_sig00000088,
      C(1) => blk00000003_sig00000088,
      C(0) => blk00000003_sig00000088,
      CARRYINSEL(2) => blk00000003_sig00000082,
      CARRYINSEL(1) => blk00000003_sig00000082,
      CARRYINSEL(0) => blk00000003_sig00000082,
      OPMODE(6) => blk00000003_sig00000088,
      OPMODE(5) => blk00000003_sig00000082,
      OPMODE(4) => blk00000003_sig00000088,
      OPMODE(3) => blk00000003_sig00000082,
      OPMODE(2) => blk00000003_sig00000088,
      OPMODE(1) => blk00000003_sig00000082,
      OPMODE(0) => blk00000003_sig00000088,
      BCIN(17) => blk00000003_sig00000448,
      BCIN(16) => blk00000003_sig00000449,
      BCIN(15) => blk00000003_sig0000044a,
      BCIN(14) => blk00000003_sig0000044b,
      BCIN(13) => blk00000003_sig0000044c,
      BCIN(12) => blk00000003_sig0000044d,
      BCIN(11) => blk00000003_sig0000044e,
      BCIN(10) => blk00000003_sig0000044f,
      BCIN(9) => blk00000003_sig00000450,
      BCIN(8) => blk00000003_sig00000451,
      BCIN(7) => blk00000003_sig00000452,
      BCIN(6) => blk00000003_sig00000453,
      BCIN(5) => blk00000003_sig00000454,
      BCIN(4) => blk00000003_sig00000455,
      BCIN(3) => blk00000003_sig00000456,
      BCIN(2) => blk00000003_sig00000457,
      BCIN(1) => blk00000003_sig00000458,
      BCIN(0) => blk00000003_sig00000459,
      ALUMODE(3) => blk00000003_sig00000082,
      ALUMODE(2) => blk00000003_sig00000082,
      ALUMODE(1) => blk00000003_sig0000045a,
      ALUMODE(0) => blk00000003_sig0000045a,
      PCOUT(47) => blk00000003_sig000003aa,
      PCOUT(46) => blk00000003_sig000003ab,
      PCOUT(45) => blk00000003_sig000003ac,
      PCOUT(44) => blk00000003_sig000003ad,
      PCOUT(43) => blk00000003_sig000003ae,
      PCOUT(42) => blk00000003_sig000003af,
      PCOUT(41) => blk00000003_sig000003b0,
      PCOUT(40) => blk00000003_sig000003b1,
      PCOUT(39) => blk00000003_sig000003b2,
      PCOUT(38) => blk00000003_sig000003b3,
      PCOUT(37) => blk00000003_sig000003b4,
      PCOUT(36) => blk00000003_sig000003b5,
      PCOUT(35) => blk00000003_sig000003b6,
      PCOUT(34) => blk00000003_sig000003b7,
      PCOUT(33) => blk00000003_sig000003b8,
      PCOUT(32) => blk00000003_sig000003b9,
      PCOUT(31) => blk00000003_sig000003ba,
      PCOUT(30) => blk00000003_sig000003bb,
      PCOUT(29) => blk00000003_sig000003bc,
      PCOUT(28) => blk00000003_sig000003bd,
      PCOUT(27) => blk00000003_sig000003be,
      PCOUT(26) => blk00000003_sig000003bf,
      PCOUT(25) => blk00000003_sig000003c0,
      PCOUT(24) => blk00000003_sig000003c1,
      PCOUT(23) => blk00000003_sig000003c2,
      PCOUT(22) => blk00000003_sig000003c3,
      PCOUT(21) => blk00000003_sig000003c4,
      PCOUT(20) => blk00000003_sig000003c5,
      PCOUT(19) => blk00000003_sig000003c6,
      PCOUT(18) => blk00000003_sig000003c7,
      PCOUT(17) => blk00000003_sig000003c8,
      PCOUT(16) => blk00000003_sig000003c9,
      PCOUT(15) => blk00000003_sig000003ca,
      PCOUT(14) => blk00000003_sig000003cb,
      PCOUT(13) => blk00000003_sig000003cc,
      PCOUT(12) => blk00000003_sig000003cd,
      PCOUT(11) => blk00000003_sig000003ce,
      PCOUT(10) => blk00000003_sig000003cf,
      PCOUT(9) => blk00000003_sig000003d0,
      PCOUT(8) => blk00000003_sig000003d1,
      PCOUT(7) => blk00000003_sig000003d2,
      PCOUT(6) => blk00000003_sig000003d3,
      PCOUT(5) => blk00000003_sig000003d4,
      PCOUT(4) => blk00000003_sig000003d5,
      PCOUT(3) => blk00000003_sig000003d6,
      PCOUT(2) => blk00000003_sig000003d7,
      PCOUT(1) => blk00000003_sig000003d8,
      PCOUT(0) => blk00000003_sig000003d9,
      P(47) => NLW_blk00000003_blk00000168_P_47_UNCONNECTED,
      P(46) => NLW_blk00000003_blk00000168_P_46_UNCONNECTED,
      P(45) => NLW_blk00000003_blk00000168_P_45_UNCONNECTED,
      P(44) => NLW_blk00000003_blk00000168_P_44_UNCONNECTED,
      P(43) => NLW_blk00000003_blk00000168_P_43_UNCONNECTED,
      P(42) => NLW_blk00000003_blk00000168_P_42_UNCONNECTED,
      P(41) => NLW_blk00000003_blk00000168_P_41_UNCONNECTED,
      P(40) => NLW_blk00000003_blk00000168_P_40_UNCONNECTED,
      P(39) => NLW_blk00000003_blk00000168_P_39_UNCONNECTED,
      P(38) => NLW_blk00000003_blk00000168_P_38_UNCONNECTED,
      P(37) => NLW_blk00000003_blk00000168_P_37_UNCONNECTED,
      P(36) => NLW_blk00000003_blk00000168_P_36_UNCONNECTED,
      P(35) => NLW_blk00000003_blk00000168_P_35_UNCONNECTED,
      P(34) => NLW_blk00000003_blk00000168_P_34_UNCONNECTED,
      P(33) => NLW_blk00000003_blk00000168_P_33_UNCONNECTED,
      P(32) => NLW_blk00000003_blk00000168_P_32_UNCONNECTED,
      P(31) => NLW_blk00000003_blk00000168_P_31_UNCONNECTED,
      P(30) => NLW_blk00000003_blk00000168_P_30_UNCONNECTED,
      P(29) => NLW_blk00000003_blk00000168_P_29_UNCONNECTED,
      P(28) => NLW_blk00000003_blk00000168_P_28_UNCONNECTED,
      P(27) => NLW_blk00000003_blk00000168_P_27_UNCONNECTED,
      P(26) => NLW_blk00000003_blk00000168_P_26_UNCONNECTED,
      P(25) => NLW_blk00000003_blk00000168_P_25_UNCONNECTED,
      P(24) => NLW_blk00000003_blk00000168_P_24_UNCONNECTED,
      P(23) => NLW_blk00000003_blk00000168_P_23_UNCONNECTED,
      P(22) => NLW_blk00000003_blk00000168_P_22_UNCONNECTED,
      P(21) => NLW_blk00000003_blk00000168_P_21_UNCONNECTED,
      P(20) => NLW_blk00000003_blk00000168_P_20_UNCONNECTED,
      P(19) => NLW_blk00000003_blk00000168_P_19_UNCONNECTED,
      P(18) => NLW_blk00000003_blk00000168_P_18_UNCONNECTED,
      P(17) => NLW_blk00000003_blk00000168_P_17_UNCONNECTED,
      P(16) => NLW_blk00000003_blk00000168_P_16_UNCONNECTED,
      P(15) => NLW_blk00000003_blk00000168_P_15_UNCONNECTED,
      P(14) => NLW_blk00000003_blk00000168_P_14_UNCONNECTED,
      P(13) => NLW_blk00000003_blk00000168_P_13_UNCONNECTED,
      P(12) => NLW_blk00000003_blk00000168_P_12_UNCONNECTED,
      P(11) => NLW_blk00000003_blk00000168_P_11_UNCONNECTED,
      P(10) => NLW_blk00000003_blk00000168_P_10_UNCONNECTED,
      P(9) => NLW_blk00000003_blk00000168_P_9_UNCONNECTED,
      P(8) => NLW_blk00000003_blk00000168_P_8_UNCONNECTED,
      P(7) => NLW_blk00000003_blk00000168_P_7_UNCONNECTED,
      P(6) => NLW_blk00000003_blk00000168_P_6_UNCONNECTED,
      P(5) => NLW_blk00000003_blk00000168_P_5_UNCONNECTED,
      P(4) => NLW_blk00000003_blk00000168_P_4_UNCONNECTED,
      P(3) => NLW_blk00000003_blk00000168_P_3_UNCONNECTED,
      P(2) => NLW_blk00000003_blk00000168_P_2_UNCONNECTED,
      P(1) => NLW_blk00000003_blk00000168_P_1_UNCONNECTED,
      P(0) => NLW_blk00000003_blk00000168_P_0_UNCONNECTED,
      BCOUT(17) => NLW_blk00000003_blk00000168_BCOUT_17_UNCONNECTED,
      BCOUT(16) => NLW_blk00000003_blk00000168_BCOUT_16_UNCONNECTED,
      BCOUT(15) => NLW_blk00000003_blk00000168_BCOUT_15_UNCONNECTED,
      BCOUT(14) => NLW_blk00000003_blk00000168_BCOUT_14_UNCONNECTED,
      BCOUT(13) => NLW_blk00000003_blk00000168_BCOUT_13_UNCONNECTED,
      BCOUT(12) => NLW_blk00000003_blk00000168_BCOUT_12_UNCONNECTED,
      BCOUT(11) => NLW_blk00000003_blk00000168_BCOUT_11_UNCONNECTED,
      BCOUT(10) => NLW_blk00000003_blk00000168_BCOUT_10_UNCONNECTED,
      BCOUT(9) => NLW_blk00000003_blk00000168_BCOUT_9_UNCONNECTED,
      BCOUT(8) => NLW_blk00000003_blk00000168_BCOUT_8_UNCONNECTED,
      BCOUT(7) => NLW_blk00000003_blk00000168_BCOUT_7_UNCONNECTED,
      BCOUT(6) => NLW_blk00000003_blk00000168_BCOUT_6_UNCONNECTED,
      BCOUT(5) => NLW_blk00000003_blk00000168_BCOUT_5_UNCONNECTED,
      BCOUT(4) => NLW_blk00000003_blk00000168_BCOUT_4_UNCONNECTED,
      BCOUT(3) => NLW_blk00000003_blk00000168_BCOUT_3_UNCONNECTED,
      BCOUT(2) => NLW_blk00000003_blk00000168_BCOUT_2_UNCONNECTED,
      BCOUT(1) => NLW_blk00000003_blk00000168_BCOUT_1_UNCONNECTED,
      BCOUT(0) => NLW_blk00000003_blk00000168_BCOUT_0_UNCONNECTED,
      ACIN(29) => blk00000003_sig00000082,
      ACIN(28) => blk00000003_sig00000082,
      ACIN(27) => blk00000003_sig00000082,
      ACIN(26) => blk00000003_sig00000082,
      ACIN(25) => blk00000003_sig00000082,
      ACIN(24) => blk00000003_sig00000082,
      ACIN(23) => blk00000003_sig00000082,
      ACIN(22) => blk00000003_sig00000082,
      ACIN(21) => blk00000003_sig00000082,
      ACIN(20) => blk00000003_sig00000082,
      ACIN(19) => blk00000003_sig00000082,
      ACIN(18) => blk00000003_sig00000082,
      ACIN(17) => blk00000003_sig00000082,
      ACIN(16) => blk00000003_sig00000082,
      ACIN(15) => blk00000003_sig00000082,
      ACIN(14) => blk00000003_sig00000082,
      ACIN(13) => blk00000003_sig00000082,
      ACIN(12) => blk00000003_sig00000082,
      ACIN(11) => blk00000003_sig00000082,
      ACIN(10) => blk00000003_sig00000082,
      ACIN(9) => blk00000003_sig00000082,
      ACIN(8) => blk00000003_sig00000082,
      ACIN(7) => blk00000003_sig00000082,
      ACIN(6) => blk00000003_sig00000082,
      ACIN(5) => blk00000003_sig00000082,
      ACIN(4) => blk00000003_sig00000082,
      ACIN(3) => blk00000003_sig00000082,
      ACIN(2) => blk00000003_sig00000082,
      ACIN(1) => blk00000003_sig00000082,
      ACIN(0) => blk00000003_sig00000082,
      ACOUT(29) => NLW_blk00000003_blk00000168_ACOUT_29_UNCONNECTED,
      ACOUT(28) => NLW_blk00000003_blk00000168_ACOUT_28_UNCONNECTED,
      ACOUT(27) => NLW_blk00000003_blk00000168_ACOUT_27_UNCONNECTED,
      ACOUT(26) => NLW_blk00000003_blk00000168_ACOUT_26_UNCONNECTED,
      ACOUT(25) => NLW_blk00000003_blk00000168_ACOUT_25_UNCONNECTED,
      ACOUT(24) => NLW_blk00000003_blk00000168_ACOUT_24_UNCONNECTED,
      ACOUT(23) => NLW_blk00000003_blk00000168_ACOUT_23_UNCONNECTED,
      ACOUT(22) => NLW_blk00000003_blk00000168_ACOUT_22_UNCONNECTED,
      ACOUT(21) => NLW_blk00000003_blk00000168_ACOUT_21_UNCONNECTED,
      ACOUT(20) => NLW_blk00000003_blk00000168_ACOUT_20_UNCONNECTED,
      ACOUT(19) => NLW_blk00000003_blk00000168_ACOUT_19_UNCONNECTED,
      ACOUT(18) => NLW_blk00000003_blk00000168_ACOUT_18_UNCONNECTED,
      ACOUT(17) => NLW_blk00000003_blk00000168_ACOUT_17_UNCONNECTED,
      ACOUT(16) => NLW_blk00000003_blk00000168_ACOUT_16_UNCONNECTED,
      ACOUT(15) => NLW_blk00000003_blk00000168_ACOUT_15_UNCONNECTED,
      ACOUT(14) => NLW_blk00000003_blk00000168_ACOUT_14_UNCONNECTED,
      ACOUT(13) => NLW_blk00000003_blk00000168_ACOUT_13_UNCONNECTED,
      ACOUT(12) => NLW_blk00000003_blk00000168_ACOUT_12_UNCONNECTED,
      ACOUT(11) => NLW_blk00000003_blk00000168_ACOUT_11_UNCONNECTED,
      ACOUT(10) => NLW_blk00000003_blk00000168_ACOUT_10_UNCONNECTED,
      ACOUT(9) => NLW_blk00000003_blk00000168_ACOUT_9_UNCONNECTED,
      ACOUT(8) => NLW_blk00000003_blk00000168_ACOUT_8_UNCONNECTED,
      ACOUT(7) => NLW_blk00000003_blk00000168_ACOUT_7_UNCONNECTED,
      ACOUT(6) => NLW_blk00000003_blk00000168_ACOUT_6_UNCONNECTED,
      ACOUT(5) => NLW_blk00000003_blk00000168_ACOUT_5_UNCONNECTED,
      ACOUT(4) => NLW_blk00000003_blk00000168_ACOUT_4_UNCONNECTED,
      ACOUT(3) => NLW_blk00000003_blk00000168_ACOUT_3_UNCONNECTED,
      ACOUT(2) => NLW_blk00000003_blk00000168_ACOUT_2_UNCONNECTED,
      ACOUT(1) => NLW_blk00000003_blk00000168_ACOUT_1_UNCONNECTED,
      ACOUT(0) => NLW_blk00000003_blk00000168_ACOUT_0_UNCONNECTED,
      CARRYOUT(3) => NLW_blk00000003_blk00000168_CARRYOUT_3_UNCONNECTED,
      CARRYOUT(2) => NLW_blk00000003_blk00000168_CARRYOUT_2_UNCONNECTED,
      CARRYOUT(1) => NLW_blk00000003_blk00000168_CARRYOUT_1_UNCONNECTED,
      CARRYOUT(0) => NLW_blk00000003_blk00000168_CARRYOUT_0_UNCONNECTED
    );
  blk00000003_blk00000167 : DSP48E
    generic map(
      ACASCREG => 2,
      ALUMODEREG => 1,
      AREG => 2,
      AUTORESET_PATTERN_DETECT => FALSE,
      AUTORESET_PATTERN_DETECT_OPTINV => "MATCH",
      A_INPUT => "DIRECT",
      BCASCREG => 2,
      BREG => 2,
      B_INPUT => "DIRECT",
      CARRYINREG => 0,
      CARRYINSELREG => 0,
      CREG => 0,
      MASK => X"000000000000",
      MREG => 1,
      MULTCARRYINREG => 0,
      OPMODEREG => 0,
      PATTERN => X"000000000000",
      PREG => 1,
      SEL_MASK => "MASK",
      SEL_PATTERN => "PATTERN",
      SEL_ROUNDING_MASK => "SEL_MASK",
      SIM_MODE => "SAFE",
      USE_MULT => "MULT_S",
      USE_PATTERN_DETECT => "NO_PATDET",
      USE_SIMD => "ONE48"
    )
    port map (
      CARRYIN => blk00000003_sig00000082,
      CEA1 => ce,
      CEA2 => ce,
      CEB1 => ce,
      CEB2 => ce,
      CEC => blk00000003_sig00000082,
      CECTRL => blk00000003_sig00000082,
      CEP => ce,
      CEM => ce,
      CECARRYIN => blk00000003_sig00000082,
      CEMULTCARRYIN => blk00000003_sig00000082,
      CLK => clk,
      RSTA => blk00000003_sig00000082,
      RSTB => blk00000003_sig00000082,
      RSTC => blk00000003_sig00000082,
      RSTCTRL => blk00000003_sig00000082,
      RSTP => blk00000003_sig00000082,
      RSTM => blk00000003_sig00000082,
      RSTALLCARRYIN => blk00000003_sig00000082,
      CEALUMODE => ce,
      RSTALUMODE => blk00000003_sig00000082,
      PATTERNBDETECT => NLW_blk00000003_blk00000167_PATTERNBDETECT_UNCONNECTED,
      PATTERNDETECT => NLW_blk00000003_blk00000167_PATTERNDETECT_UNCONNECTED,
      OVERFLOW => NLW_blk00000003_blk00000167_OVERFLOW_UNCONNECTED,
      UNDERFLOW => NLW_blk00000003_blk00000167_UNDERFLOW_UNCONNECTED,
      CARRYCASCIN => blk00000003_sig00000082,
      CARRYCASCOUT => NLW_blk00000003_blk00000167_CARRYCASCOUT_UNCONNECTED,
      MULTSIGNIN => blk00000003_sig00000082,
      MULTSIGNOUT => NLW_blk00000003_blk00000167_MULTSIGNOUT_UNCONNECTED,
      A(29) => blk00000003_sig00000082,
      A(28) => blk00000003_sig00000082,
      A(27) => blk00000003_sig00000082,
      A(26) => blk00000003_sig00000082,
      A(25) => blk00000003_sig00000082,
      A(24) => blk00000003_sig0000039c,
      A(23) => blk00000003_sig0000039c,
      A(22) => blk00000003_sig0000039c,
      A(21) => blk00000003_sig0000039c,
      A(20) => blk00000003_sig0000039c,
      A(19) => blk00000003_sig0000039c,
      A(18) => blk00000003_sig0000039c,
      A(17) => blk00000003_sig0000039c,
      A(16) => blk00000003_sig0000039c,
      A(15) => blk00000003_sig0000039c,
      A(14) => blk00000003_sig0000039c,
      A(13) => blk00000003_sig0000039c,
      A(12) => blk00000003_sig0000039d,
      A(11) => blk00000003_sig0000039e,
      A(10) => blk00000003_sig0000039f,
      A(9) => blk00000003_sig000003a0,
      A(8) => blk00000003_sig000003a1,
      A(7) => blk00000003_sig000003a2,
      A(6) => blk00000003_sig000003a3,
      A(5) => blk00000003_sig000003a4,
      A(4) => blk00000003_sig000003a5,
      A(3) => blk00000003_sig000003a6,
      A(2) => blk00000003_sig000003a7,
      A(1) => blk00000003_sig000003a8,
      A(0) => blk00000003_sig000003a9,
      PCIN(47) => blk00000003_sig000003aa,
      PCIN(46) => blk00000003_sig000003ab,
      PCIN(45) => blk00000003_sig000003ac,
      PCIN(44) => blk00000003_sig000003ad,
      PCIN(43) => blk00000003_sig000003ae,
      PCIN(42) => blk00000003_sig000003af,
      PCIN(41) => blk00000003_sig000003b0,
      PCIN(40) => blk00000003_sig000003b1,
      PCIN(39) => blk00000003_sig000003b2,
      PCIN(38) => blk00000003_sig000003b3,
      PCIN(37) => blk00000003_sig000003b4,
      PCIN(36) => blk00000003_sig000003b5,
      PCIN(35) => blk00000003_sig000003b6,
      PCIN(34) => blk00000003_sig000003b7,
      PCIN(33) => blk00000003_sig000003b8,
      PCIN(32) => blk00000003_sig000003b9,
      PCIN(31) => blk00000003_sig000003ba,
      PCIN(30) => blk00000003_sig000003bb,
      PCIN(29) => blk00000003_sig000003bc,
      PCIN(28) => blk00000003_sig000003bd,
      PCIN(27) => blk00000003_sig000003be,
      PCIN(26) => blk00000003_sig000003bf,
      PCIN(25) => blk00000003_sig000003c0,
      PCIN(24) => blk00000003_sig000003c1,
      PCIN(23) => blk00000003_sig000003c2,
      PCIN(22) => blk00000003_sig000003c3,
      PCIN(21) => blk00000003_sig000003c4,
      PCIN(20) => blk00000003_sig000003c5,
      PCIN(19) => blk00000003_sig000003c6,
      PCIN(18) => blk00000003_sig000003c7,
      PCIN(17) => blk00000003_sig000003c8,
      PCIN(16) => blk00000003_sig000003c9,
      PCIN(15) => blk00000003_sig000003ca,
      PCIN(14) => blk00000003_sig000003cb,
      PCIN(13) => blk00000003_sig000003cc,
      PCIN(12) => blk00000003_sig000003cd,
      PCIN(11) => blk00000003_sig000003ce,
      PCIN(10) => blk00000003_sig000003cf,
      PCIN(9) => blk00000003_sig000003d0,
      PCIN(8) => blk00000003_sig000003d1,
      PCIN(7) => blk00000003_sig000003d2,
      PCIN(6) => blk00000003_sig000003d3,
      PCIN(5) => blk00000003_sig000003d4,
      PCIN(4) => blk00000003_sig000003d5,
      PCIN(3) => blk00000003_sig000003d6,
      PCIN(2) => blk00000003_sig000003d7,
      PCIN(1) => blk00000003_sig000003d8,
      PCIN(0) => blk00000003_sig000003d9,
      B(17) => blk00000003_sig000003da,
      B(16) => blk00000003_sig000003da,
      B(15) => blk00000003_sig000003db,
      B(14) => blk00000003_sig000003dc,
      B(13) => blk00000003_sig000003dd,
      B(12) => blk00000003_sig000003de,
      B(11) => blk00000003_sig000003df,
      B(10) => blk00000003_sig000003e0,
      B(9) => blk00000003_sig000003e1,
      B(8) => blk00000003_sig000003e2,
      B(7) => blk00000003_sig000003e3,
      B(6) => blk00000003_sig000003e4,
      B(5) => blk00000003_sig000003e5,
      B(4) => blk00000003_sig000003e6,
      B(3) => blk00000003_sig000003e7,
      B(2) => blk00000003_sig000003e8,
      B(1) => blk00000003_sig000003e9,
      B(0) => blk00000003_sig000003ea,
      C(47) => blk00000003_sig00000088,
      C(46) => blk00000003_sig00000088,
      C(45) => blk00000003_sig00000088,
      C(44) => blk00000003_sig00000088,
      C(43) => blk00000003_sig00000088,
      C(42) => blk00000003_sig00000088,
      C(41) => blk00000003_sig00000088,
      C(40) => blk00000003_sig00000088,
      C(39) => blk00000003_sig00000088,
      C(38) => blk00000003_sig00000088,
      C(37) => blk00000003_sig00000088,
      C(36) => blk00000003_sig00000088,
      C(35) => blk00000003_sig00000088,
      C(34) => blk00000003_sig00000088,
      C(33) => blk00000003_sig00000088,
      C(32) => blk00000003_sig00000088,
      C(31) => blk00000003_sig00000088,
      C(30) => blk00000003_sig00000088,
      C(29) => blk00000003_sig00000088,
      C(28) => blk00000003_sig00000088,
      C(27) => blk00000003_sig00000088,
      C(26) => blk00000003_sig00000088,
      C(25) => blk00000003_sig00000088,
      C(24) => blk00000003_sig00000088,
      C(23) => blk00000003_sig00000088,
      C(22) => blk00000003_sig00000088,
      C(21) => blk00000003_sig00000088,
      C(20) => blk00000003_sig00000088,
      C(19) => blk00000003_sig00000088,
      C(18) => blk00000003_sig00000088,
      C(17) => blk00000003_sig00000088,
      C(16) => blk00000003_sig00000088,
      C(15) => blk00000003_sig00000088,
      C(14) => blk00000003_sig00000088,
      C(13) => blk00000003_sig00000088,
      C(12) => blk00000003_sig00000088,
      C(11) => blk00000003_sig00000088,
      C(10) => blk00000003_sig00000088,
      C(9) => blk00000003_sig00000088,
      C(8) => blk00000003_sig00000088,
      C(7) => blk00000003_sig00000088,
      C(6) => blk00000003_sig00000088,
      C(5) => blk00000003_sig00000088,
      C(4) => blk00000003_sig00000088,
      C(3) => blk00000003_sig00000088,
      C(2) => blk00000003_sig00000088,
      C(1) => blk00000003_sig00000088,
      C(0) => blk00000003_sig00000088,
      CARRYINSEL(2) => blk00000003_sig00000082,
      CARRYINSEL(1) => blk00000003_sig00000082,
      CARRYINSEL(0) => blk00000003_sig00000082,
      OPMODE(6) => blk00000003_sig00000082,
      OPMODE(5) => blk00000003_sig00000082,
      OPMODE(4) => blk00000003_sig00000088,
      OPMODE(3) => blk00000003_sig00000082,
      OPMODE(2) => blk00000003_sig00000088,
      OPMODE(1) => blk00000003_sig00000082,
      OPMODE(0) => blk00000003_sig00000088,
      BCIN(17) => blk00000003_sig00000082,
      BCIN(16) => blk00000003_sig00000082,
      BCIN(15) => blk00000003_sig00000082,
      BCIN(14) => blk00000003_sig00000082,
      BCIN(13) => blk00000003_sig00000082,
      BCIN(12) => blk00000003_sig00000082,
      BCIN(11) => blk00000003_sig00000082,
      BCIN(10) => blk00000003_sig00000082,
      BCIN(9) => blk00000003_sig00000082,
      BCIN(8) => blk00000003_sig00000082,
      BCIN(7) => blk00000003_sig00000082,
      BCIN(6) => blk00000003_sig00000082,
      BCIN(5) => blk00000003_sig00000082,
      BCIN(4) => blk00000003_sig00000082,
      BCIN(3) => blk00000003_sig00000082,
      BCIN(2) => blk00000003_sig00000082,
      BCIN(1) => blk00000003_sig00000082,
      BCIN(0) => blk00000003_sig00000082,
      ALUMODE(3) => blk00000003_sig00000082,
      ALUMODE(2) => blk00000003_sig00000082,
      ALUMODE(1) => blk00000003_sig000003eb,
      ALUMODE(0) => blk00000003_sig000003eb,
      PCOUT(47) => NLW_blk00000003_blk00000167_PCOUT_47_UNCONNECTED,
      PCOUT(46) => NLW_blk00000003_blk00000167_PCOUT_46_UNCONNECTED,
      PCOUT(45) => NLW_blk00000003_blk00000167_PCOUT_45_UNCONNECTED,
      PCOUT(44) => NLW_blk00000003_blk00000167_PCOUT_44_UNCONNECTED,
      PCOUT(43) => NLW_blk00000003_blk00000167_PCOUT_43_UNCONNECTED,
      PCOUT(42) => NLW_blk00000003_blk00000167_PCOUT_42_UNCONNECTED,
      PCOUT(41) => NLW_blk00000003_blk00000167_PCOUT_41_UNCONNECTED,
      PCOUT(40) => NLW_blk00000003_blk00000167_PCOUT_40_UNCONNECTED,
      PCOUT(39) => NLW_blk00000003_blk00000167_PCOUT_39_UNCONNECTED,
      PCOUT(38) => NLW_blk00000003_blk00000167_PCOUT_38_UNCONNECTED,
      PCOUT(37) => NLW_blk00000003_blk00000167_PCOUT_37_UNCONNECTED,
      PCOUT(36) => NLW_blk00000003_blk00000167_PCOUT_36_UNCONNECTED,
      PCOUT(35) => NLW_blk00000003_blk00000167_PCOUT_35_UNCONNECTED,
      PCOUT(34) => NLW_blk00000003_blk00000167_PCOUT_34_UNCONNECTED,
      PCOUT(33) => NLW_blk00000003_blk00000167_PCOUT_33_UNCONNECTED,
      PCOUT(32) => NLW_blk00000003_blk00000167_PCOUT_32_UNCONNECTED,
      PCOUT(31) => NLW_blk00000003_blk00000167_PCOUT_31_UNCONNECTED,
      PCOUT(30) => NLW_blk00000003_blk00000167_PCOUT_30_UNCONNECTED,
      PCOUT(29) => NLW_blk00000003_blk00000167_PCOUT_29_UNCONNECTED,
      PCOUT(28) => NLW_blk00000003_blk00000167_PCOUT_28_UNCONNECTED,
      PCOUT(27) => NLW_blk00000003_blk00000167_PCOUT_27_UNCONNECTED,
      PCOUT(26) => NLW_blk00000003_blk00000167_PCOUT_26_UNCONNECTED,
      PCOUT(25) => NLW_blk00000003_blk00000167_PCOUT_25_UNCONNECTED,
      PCOUT(24) => NLW_blk00000003_blk00000167_PCOUT_24_UNCONNECTED,
      PCOUT(23) => NLW_blk00000003_blk00000167_PCOUT_23_UNCONNECTED,
      PCOUT(22) => NLW_blk00000003_blk00000167_PCOUT_22_UNCONNECTED,
      PCOUT(21) => NLW_blk00000003_blk00000167_PCOUT_21_UNCONNECTED,
      PCOUT(20) => NLW_blk00000003_blk00000167_PCOUT_20_UNCONNECTED,
      PCOUT(19) => NLW_blk00000003_blk00000167_PCOUT_19_UNCONNECTED,
      PCOUT(18) => NLW_blk00000003_blk00000167_PCOUT_18_UNCONNECTED,
      PCOUT(17) => NLW_blk00000003_blk00000167_PCOUT_17_UNCONNECTED,
      PCOUT(16) => NLW_blk00000003_blk00000167_PCOUT_16_UNCONNECTED,
      PCOUT(15) => NLW_blk00000003_blk00000167_PCOUT_15_UNCONNECTED,
      PCOUT(14) => NLW_blk00000003_blk00000167_PCOUT_14_UNCONNECTED,
      PCOUT(13) => NLW_blk00000003_blk00000167_PCOUT_13_UNCONNECTED,
      PCOUT(12) => NLW_blk00000003_blk00000167_PCOUT_12_UNCONNECTED,
      PCOUT(11) => NLW_blk00000003_blk00000167_PCOUT_11_UNCONNECTED,
      PCOUT(10) => NLW_blk00000003_blk00000167_PCOUT_10_UNCONNECTED,
      PCOUT(9) => NLW_blk00000003_blk00000167_PCOUT_9_UNCONNECTED,
      PCOUT(8) => NLW_blk00000003_blk00000167_PCOUT_8_UNCONNECTED,
      PCOUT(7) => NLW_blk00000003_blk00000167_PCOUT_7_UNCONNECTED,
      PCOUT(6) => NLW_blk00000003_blk00000167_PCOUT_6_UNCONNECTED,
      PCOUT(5) => NLW_blk00000003_blk00000167_PCOUT_5_UNCONNECTED,
      PCOUT(4) => NLW_blk00000003_blk00000167_PCOUT_4_UNCONNECTED,
      PCOUT(3) => NLW_blk00000003_blk00000167_PCOUT_3_UNCONNECTED,
      PCOUT(2) => NLW_blk00000003_blk00000167_PCOUT_2_UNCONNECTED,
      PCOUT(1) => NLW_blk00000003_blk00000167_PCOUT_1_UNCONNECTED,
      PCOUT(0) => NLW_blk00000003_blk00000167_PCOUT_0_UNCONNECTED,
      P(47) => NLW_blk00000003_blk00000167_P_47_UNCONNECTED,
      P(46) => NLW_blk00000003_blk00000167_P_46_UNCONNECTED,
      P(45) => NLW_blk00000003_blk00000167_P_45_UNCONNECTED,
      P(44) => NLW_blk00000003_blk00000167_P_44_UNCONNECTED,
      P(43) => NLW_blk00000003_blk00000167_P_43_UNCONNECTED,
      P(42) => NLW_blk00000003_blk00000167_P_42_UNCONNECTED,
      P(41) => NLW_blk00000003_blk00000167_P_41_UNCONNECTED,
      P(40) => NLW_blk00000003_blk00000167_P_40_UNCONNECTED,
      P(39) => NLW_blk00000003_blk00000167_P_39_UNCONNECTED,
      P(38) => NLW_blk00000003_blk00000167_P_38_UNCONNECTED,
      P(37) => NLW_blk00000003_blk00000167_P_37_UNCONNECTED,
      P(36) => NLW_blk00000003_blk00000167_P_36_UNCONNECTED,
      P(35) => NLW_blk00000003_blk00000167_P_35_UNCONNECTED,
      P(34) => NLW_blk00000003_blk00000167_P_34_UNCONNECTED,
      P(33) => NLW_blk00000003_blk00000167_P_33_UNCONNECTED,
      P(32) => NLW_blk00000003_blk00000167_P_32_UNCONNECTED,
      P(31) => NLW_blk00000003_blk00000167_P_31_UNCONNECTED,
      P(30) => NLW_blk00000003_blk00000167_P_30_UNCONNECTED,
      P(29) => blk00000003_sig000003ec,
      P(28) => blk00000003_sig000003ed,
      P(27) => blk00000003_sig000003ee,
      P(26) => blk00000003_sig000003ef,
      P(25) => blk00000003_sig000003f0,
      P(24) => blk00000003_sig000003f1,
      P(23) => blk00000003_sig000003f2,
      P(22) => blk00000003_sig000003f3,
      P(21) => blk00000003_sig000003f4,
      P(20) => blk00000003_sig000003f5,
      P(19) => blk00000003_sig000003f6,
      P(18) => blk00000003_sig000003f7,
      P(17) => blk00000003_sig000003f8,
      P(16) => blk00000003_sig000003f9,
      P(15) => blk00000003_sig000003fa,
      P(14) => blk00000003_sig000003fb,
      P(13) => blk00000003_sig000003fc,
      P(12) => blk00000003_sig000003fd,
      P(11) => blk00000003_sig000003fe,
      P(10) => blk00000003_sig000003ff,
      P(9) => blk00000003_sig00000400,
      P(8) => blk00000003_sig00000401,
      P(7) => blk00000003_sig00000402,
      P(6) => blk00000003_sig00000403,
      P(5) => blk00000003_sig00000404,
      P(4) => blk00000003_sig00000405,
      P(3) => blk00000003_sig00000406,
      P(2) => blk00000003_sig00000407,
      P(1) => blk00000003_sig00000408,
      P(0) => blk00000003_sig00000409,
      BCOUT(17) => NLW_blk00000003_blk00000167_BCOUT_17_UNCONNECTED,
      BCOUT(16) => NLW_blk00000003_blk00000167_BCOUT_16_UNCONNECTED,
      BCOUT(15) => NLW_blk00000003_blk00000167_BCOUT_15_UNCONNECTED,
      BCOUT(14) => NLW_blk00000003_blk00000167_BCOUT_14_UNCONNECTED,
      BCOUT(13) => NLW_blk00000003_blk00000167_BCOUT_13_UNCONNECTED,
      BCOUT(12) => NLW_blk00000003_blk00000167_BCOUT_12_UNCONNECTED,
      BCOUT(11) => NLW_blk00000003_blk00000167_BCOUT_11_UNCONNECTED,
      BCOUT(10) => NLW_blk00000003_blk00000167_BCOUT_10_UNCONNECTED,
      BCOUT(9) => NLW_blk00000003_blk00000167_BCOUT_9_UNCONNECTED,
      BCOUT(8) => NLW_blk00000003_blk00000167_BCOUT_8_UNCONNECTED,
      BCOUT(7) => NLW_blk00000003_blk00000167_BCOUT_7_UNCONNECTED,
      BCOUT(6) => NLW_blk00000003_blk00000167_BCOUT_6_UNCONNECTED,
      BCOUT(5) => NLW_blk00000003_blk00000167_BCOUT_5_UNCONNECTED,
      BCOUT(4) => NLW_blk00000003_blk00000167_BCOUT_4_UNCONNECTED,
      BCOUT(3) => NLW_blk00000003_blk00000167_BCOUT_3_UNCONNECTED,
      BCOUT(2) => NLW_blk00000003_blk00000167_BCOUT_2_UNCONNECTED,
      BCOUT(1) => NLW_blk00000003_blk00000167_BCOUT_1_UNCONNECTED,
      BCOUT(0) => NLW_blk00000003_blk00000167_BCOUT_0_UNCONNECTED,
      ACIN(29) => blk00000003_sig00000082,
      ACIN(28) => blk00000003_sig00000082,
      ACIN(27) => blk00000003_sig00000082,
      ACIN(26) => blk00000003_sig00000082,
      ACIN(25) => blk00000003_sig00000082,
      ACIN(24) => blk00000003_sig00000082,
      ACIN(23) => blk00000003_sig00000082,
      ACIN(22) => blk00000003_sig00000082,
      ACIN(21) => blk00000003_sig00000082,
      ACIN(20) => blk00000003_sig00000082,
      ACIN(19) => blk00000003_sig00000082,
      ACIN(18) => blk00000003_sig00000082,
      ACIN(17) => blk00000003_sig00000082,
      ACIN(16) => blk00000003_sig00000082,
      ACIN(15) => blk00000003_sig00000082,
      ACIN(14) => blk00000003_sig00000082,
      ACIN(13) => blk00000003_sig00000082,
      ACIN(12) => blk00000003_sig00000082,
      ACIN(11) => blk00000003_sig00000082,
      ACIN(10) => blk00000003_sig00000082,
      ACIN(9) => blk00000003_sig00000082,
      ACIN(8) => blk00000003_sig00000082,
      ACIN(7) => blk00000003_sig00000082,
      ACIN(6) => blk00000003_sig00000082,
      ACIN(5) => blk00000003_sig00000082,
      ACIN(4) => blk00000003_sig00000082,
      ACIN(3) => blk00000003_sig00000082,
      ACIN(2) => blk00000003_sig00000082,
      ACIN(1) => blk00000003_sig00000082,
      ACIN(0) => blk00000003_sig00000082,
      ACOUT(29) => NLW_blk00000003_blk00000167_ACOUT_29_UNCONNECTED,
      ACOUT(28) => NLW_blk00000003_blk00000167_ACOUT_28_UNCONNECTED,
      ACOUT(27) => NLW_blk00000003_blk00000167_ACOUT_27_UNCONNECTED,
      ACOUT(26) => NLW_blk00000003_blk00000167_ACOUT_26_UNCONNECTED,
      ACOUT(25) => NLW_blk00000003_blk00000167_ACOUT_25_UNCONNECTED,
      ACOUT(24) => NLW_blk00000003_blk00000167_ACOUT_24_UNCONNECTED,
      ACOUT(23) => NLW_blk00000003_blk00000167_ACOUT_23_UNCONNECTED,
      ACOUT(22) => NLW_blk00000003_blk00000167_ACOUT_22_UNCONNECTED,
      ACOUT(21) => NLW_blk00000003_blk00000167_ACOUT_21_UNCONNECTED,
      ACOUT(20) => NLW_blk00000003_blk00000167_ACOUT_20_UNCONNECTED,
      ACOUT(19) => NLW_blk00000003_blk00000167_ACOUT_19_UNCONNECTED,
      ACOUT(18) => NLW_blk00000003_blk00000167_ACOUT_18_UNCONNECTED,
      ACOUT(17) => NLW_blk00000003_blk00000167_ACOUT_17_UNCONNECTED,
      ACOUT(16) => NLW_blk00000003_blk00000167_ACOUT_16_UNCONNECTED,
      ACOUT(15) => NLW_blk00000003_blk00000167_ACOUT_15_UNCONNECTED,
      ACOUT(14) => NLW_blk00000003_blk00000167_ACOUT_14_UNCONNECTED,
      ACOUT(13) => NLW_blk00000003_blk00000167_ACOUT_13_UNCONNECTED,
      ACOUT(12) => NLW_blk00000003_blk00000167_ACOUT_12_UNCONNECTED,
      ACOUT(11) => NLW_blk00000003_blk00000167_ACOUT_11_UNCONNECTED,
      ACOUT(10) => NLW_blk00000003_blk00000167_ACOUT_10_UNCONNECTED,
      ACOUT(9) => NLW_blk00000003_blk00000167_ACOUT_9_UNCONNECTED,
      ACOUT(8) => NLW_blk00000003_blk00000167_ACOUT_8_UNCONNECTED,
      ACOUT(7) => NLW_blk00000003_blk00000167_ACOUT_7_UNCONNECTED,
      ACOUT(6) => NLW_blk00000003_blk00000167_ACOUT_6_UNCONNECTED,
      ACOUT(5) => NLW_blk00000003_blk00000167_ACOUT_5_UNCONNECTED,
      ACOUT(4) => NLW_blk00000003_blk00000167_ACOUT_4_UNCONNECTED,
      ACOUT(3) => NLW_blk00000003_blk00000167_ACOUT_3_UNCONNECTED,
      ACOUT(2) => NLW_blk00000003_blk00000167_ACOUT_2_UNCONNECTED,
      ACOUT(1) => NLW_blk00000003_blk00000167_ACOUT_1_UNCONNECTED,
      ACOUT(0) => NLW_blk00000003_blk00000167_ACOUT_0_UNCONNECTED,
      CARRYOUT(3) => NLW_blk00000003_blk00000167_CARRYOUT_3_UNCONNECTED,
      CARRYOUT(2) => NLW_blk00000003_blk00000167_CARRYOUT_2_UNCONNECTED,
      CARRYOUT(1) => NLW_blk00000003_blk00000167_CARRYOUT_1_UNCONNECTED,
      CARRYOUT(0) => NLW_blk00000003_blk00000167_CARRYOUT_0_UNCONNECTED
    );
  blk00000003_blk00000166 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000001c6,
      Q => blk00000003_sig0000039b
    );
  blk00000003_blk00000165 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000001c4,
      Q => blk00000003_sig0000039a
    );
  blk00000003_blk00000164 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000001c2,
      Q => blk00000003_sig00000399
    );
  blk00000003_blk00000163 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000001c0,
      Q => blk00000003_sig00000398
    );
  blk00000003_blk00000162 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000001be,
      Q => blk00000003_sig00000397
    );
  blk00000003_blk00000161 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000001bc,
      Q => blk00000003_sig00000396
    );
  blk00000003_blk00000160 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000001ba,
      Q => blk00000003_sig00000395
    );
  blk00000003_blk0000015f : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000001b8,
      Q => blk00000003_sig00000394
    );
  blk00000003_blk0000015e : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000001b6,
      Q => blk00000003_sig00000393
    );
  blk00000003_blk0000015d : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000001b4,
      Q => blk00000003_sig00000392
    );
  blk00000003_blk0000015c : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000001b2,
      Q => blk00000003_sig00000391
    );
  blk00000003_blk0000015b : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000001b0,
      Q => blk00000003_sig00000390
    );
  blk00000003_blk0000015a : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000001ae,
      Q => blk00000003_sig0000038f
    );
  blk00000003_blk00000159 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000001ac,
      Q => blk00000003_sig0000038e
    );
  blk00000003_blk00000158 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000001aa,
      Q => blk00000003_sig0000038d
    );
  blk00000003_blk00000157 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000001a8,
      Q => blk00000003_sig0000038c
    );
  blk00000003_blk00000156 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000001a6,
      Q => blk00000003_sig0000038b
    );
  blk00000003_blk00000155 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000002e6,
      Q => blk00000003_sig0000038a
    );
  blk00000003_blk00000154 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000002e5,
      Q => blk00000003_sig00000389
    );
  blk00000003_blk00000153 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000002e4,
      Q => blk00000003_sig00000388
    );
  blk00000003_blk00000152 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000002e3,
      Q => blk00000003_sig00000387
    );
  blk00000003_blk00000151 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000002e2,
      Q => blk00000003_sig00000386
    );
  blk00000003_blk00000150 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000002e1,
      Q => blk00000003_sig00000385
    );
  blk00000003_blk0000014f : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000002e0,
      Q => blk00000003_sig00000384
    );
  blk00000003_blk0000014e : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000002df,
      Q => blk00000003_sig00000383
    );
  blk00000003_blk0000014d : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000002de,
      Q => blk00000003_sig00000382
    );
  blk00000003_blk0000014c : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000002dd,
      Q => blk00000003_sig00000381
    );
  blk00000003_blk0000014b : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000002dc,
      Q => blk00000003_sig00000380
    );
  blk00000003_blk0000014a : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000002db,
      Q => blk00000003_sig0000037f
    );
  blk00000003_blk00000149 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000002da,
      Q => blk00000003_sig0000037e
    );
  blk00000003_blk00000148 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000002d9,
      Q => blk00000003_sig0000037d
    );
  blk00000003_blk00000147 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000002d8,
      Q => blk00000003_sig0000037c
    );
  blk00000003_blk00000146 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000002d7,
      Q => blk00000003_sig0000037b
    );
  blk00000003_blk00000145 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000002d6,
      Q => blk00000003_sig0000037a
    );
  blk00000003_blk00000144 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000378,
      Q => blk00000003_sig00000379
    );
  blk00000003_blk00000143 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000376,
      Q => blk00000003_sig00000377
    );
  blk00000003_blk00000142 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000374,
      Q => blk00000003_sig00000375
    );
  blk00000003_blk00000141 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000372,
      Q => blk00000003_sig00000373
    );
  blk00000003_blk00000140 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000370,
      Q => blk00000003_sig00000371
    );
  blk00000003_blk0000013f : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig0000036e,
      Q => blk00000003_sig0000036f
    );
  blk00000003_blk0000013e : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig0000036c,
      Q => blk00000003_sig0000036d
    );
  blk00000003_blk0000013d : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig0000036a,
      Q => blk00000003_sig0000036b
    );
  blk00000003_blk0000013c : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000368,
      Q => blk00000003_sig00000369
    );
  blk00000003_blk0000013b : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000366,
      Q => blk00000003_sig00000367
    );
  blk00000003_blk0000013a : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000364,
      Q => blk00000003_sig00000365
    );
  blk00000003_blk00000139 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000362,
      Q => blk00000003_sig00000363
    );
  blk00000003_blk00000138 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000360,
      Q => blk00000003_sig00000361
    );
  blk00000003_blk00000137 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig0000035e,
      Q => blk00000003_sig0000035f
    );
  blk00000003_blk00000136 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig0000035c,
      Q => blk00000003_sig0000035d
    );
  blk00000003_blk00000135 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig0000035a,
      Q => blk00000003_sig0000035b
    );
  blk00000003_blk00000134 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000358,
      Q => blk00000003_sig00000359
    );
  blk00000003_blk00000133 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000356,
      Q => blk00000003_sig00000357
    );
  blk00000003_blk00000132 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000354,
      Q => blk00000003_sig00000355
    );
  blk00000003_blk00000131 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000352,
      Q => blk00000003_sig00000353
    );
  blk00000003_blk00000130 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000350,
      Q => blk00000003_sig00000351
    );
  blk00000003_blk0000012f : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig0000034e,
      Q => blk00000003_sig0000034f
    );
  blk00000003_blk0000012e : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig0000034c,
      Q => blk00000003_sig0000034d
    );
  blk00000003_blk0000012d : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig0000034a,
      Q => blk00000003_sig0000034b
    );
  blk00000003_blk0000012c : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000348,
      Q => blk00000003_sig00000349
    );
  blk00000003_blk0000012b : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000346,
      Q => blk00000003_sig00000347
    );
  blk00000003_blk0000012a : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000344,
      Q => blk00000003_sig00000345
    );
  blk00000003_blk00000129 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000342,
      Q => blk00000003_sig00000343
    );
  blk00000003_blk00000128 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000340,
      Q => blk00000003_sig00000341
    );
  blk00000003_blk00000127 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig0000033e,
      Q => blk00000003_sig0000033f
    );
  blk00000003_blk00000126 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig0000033c,
      Q => blk00000003_sig0000033d
    );
  blk00000003_blk00000125 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig0000033a,
      Q => blk00000003_sig0000033b
    );
  blk00000003_blk00000124 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000338,
      Q => blk00000003_sig00000339
    );
  blk00000003_blk00000123 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000336,
      Q => blk00000003_sig00000337
    );
  blk00000003_blk00000122 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000334,
      Q => blk00000003_sig00000335
    );
  blk00000003_blk00000121 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000332,
      Q => blk00000003_sig00000333
    );
  blk00000003_blk00000120 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000330,
      Q => blk00000003_sig00000331
    );
  blk00000003_blk0000011f : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig0000032e,
      Q => blk00000003_sig0000032f
    );
  blk00000003_blk0000011e : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig0000032c,
      Q => blk00000003_sig0000032d
    );
  blk00000003_blk0000011d : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig0000032a,
      Q => blk00000003_sig0000032b
    );
  blk00000003_blk0000011c : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000328,
      Q => blk00000003_sig00000329
    );
  blk00000003_blk0000011b : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000326,
      Q => blk00000003_sig00000327
    );
  blk00000003_blk0000011a : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000324,
      Q => blk00000003_sig00000325
    );
  blk00000003_blk00000119 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000322,
      Q => blk00000003_sig00000323
    );
  blk00000003_blk00000118 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000320,
      Q => blk00000003_sig00000321
    );
  blk00000003_blk00000117 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig0000031e,
      Q => blk00000003_sig0000031f
    );
  blk00000003_blk00000116 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig0000031c,
      Q => blk00000003_sig0000031d
    );
  blk00000003_blk00000115 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig0000031a,
      Q => blk00000003_sig0000031b
    );
  blk00000003_blk00000114 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000318,
      Q => blk00000003_sig00000319
    );
  blk00000003_blk00000113 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000316,
      Q => blk00000003_sig00000317
    );
  blk00000003_blk00000112 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000314,
      Q => blk00000003_sig00000315
    );
  blk00000003_blk00000111 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000312,
      Q => blk00000003_sig00000313
    );
  blk00000003_blk00000110 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000310,
      Q => blk00000003_sig00000311
    );
  blk00000003_blk0000010f : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig0000030e,
      Q => blk00000003_sig0000030f
    );
  blk00000003_blk0000010e : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig0000030c,
      Q => blk00000003_sig0000030d
    );
  blk00000003_blk0000010d : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig0000030a,
      Q => blk00000003_sig0000030b
    );
  blk00000003_blk0000010c : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000308,
      Q => blk00000003_sig00000309
    );
  blk00000003_blk0000010b : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000306,
      Q => blk00000003_sig00000307
    );
  blk00000003_blk0000010a : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000289,
      D => blk00000003_sig000001c5,
      Q => blk00000003_sig00000305
    );
  blk00000003_blk00000109 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000289,
      D => blk00000003_sig000001c3,
      Q => blk00000003_sig00000304
    );
  blk00000003_blk00000108 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000289,
      D => blk00000003_sig000001c1,
      Q => blk00000003_sig00000303
    );
  blk00000003_blk00000107 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000289,
      D => blk00000003_sig000001bf,
      Q => blk00000003_sig00000302
    );
  blk00000003_blk00000106 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000289,
      D => blk00000003_sig000001bd,
      Q => blk00000003_sig00000301
    );
  blk00000003_blk00000105 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000289,
      D => blk00000003_sig000001bb,
      Q => blk00000003_sig00000300
    );
  blk00000003_blk00000104 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000289,
      D => blk00000003_sig000001b9,
      Q => blk00000003_sig000002ff
    );
  blk00000003_blk00000103 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000289,
      D => blk00000003_sig000001b7,
      Q => blk00000003_sig000002fe
    );
  blk00000003_blk00000102 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000289,
      D => blk00000003_sig000001b5,
      Q => blk00000003_sig000002fd
    );
  blk00000003_blk00000101 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000289,
      D => blk00000003_sig000001b3,
      Q => blk00000003_sig000002fc
    );
  blk00000003_blk00000100 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000289,
      D => blk00000003_sig000001b1,
      Q => blk00000003_sig000002fb
    );
  blk00000003_blk000000ff : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000289,
      D => blk00000003_sig000001af,
      Q => blk00000003_sig000002fa
    );
  blk00000003_blk000000fe : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000289,
      D => blk00000003_sig000001ad,
      Q => blk00000003_sig000002f9
    );
  blk00000003_blk000000fd : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000289,
      D => blk00000003_sig000001ab,
      Q => blk00000003_sig000002f8
    );
  blk00000003_blk000000fc : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000289,
      D => blk00000003_sig000001a9,
      Q => blk00000003_sig000002f7
    );
  blk00000003_blk000000fb : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000289,
      D => blk00000003_sig000001a7,
      Q => blk00000003_sig000002f6
    );
  blk00000003_blk000000fa : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000289,
      D => blk00000003_sig000001a5,
      Q => blk00000003_sig000002f5
    );
  blk00000003_blk000000f9 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000289,
      D => blk00000003_sig000001a3,
      Q => blk00000003_sig000002f4
    );
  blk00000003_blk000000f8 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000289,
      D => blk00000003_sig000001a1,
      Q => blk00000003_sig000002f3
    );
  blk00000003_blk000000f7 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000289,
      D => blk00000003_sig0000019f,
      Q => blk00000003_sig000002f2
    );
  blk00000003_blk000000f6 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000289,
      D => blk00000003_sig0000019d,
      Q => blk00000003_sig000002f1
    );
  blk00000003_blk000000f5 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000289,
      D => blk00000003_sig0000019b,
      Q => blk00000003_sig000002f0
    );
  blk00000003_blk000000f4 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000289,
      D => blk00000003_sig00000199,
      Q => blk00000003_sig000002ef
    );
  blk00000003_blk000000f3 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000289,
      D => blk00000003_sig00000197,
      Q => blk00000003_sig000002ee
    );
  blk00000003_blk000000f2 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000289,
      D => blk00000003_sig00000195,
      Q => blk00000003_sig000002ed
    );
  blk00000003_blk000000f1 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000289,
      D => blk00000003_sig00000193,
      Q => blk00000003_sig000002ec
    );
  blk00000003_blk000000f0 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000289,
      D => blk00000003_sig00000191,
      Q => blk00000003_sig000002eb
    );
  blk00000003_blk000000ef : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000289,
      D => blk00000003_sig0000018f,
      Q => blk00000003_sig000002ea
    );
  blk00000003_blk000000ee : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000289,
      D => blk00000003_sig0000018d,
      Q => blk00000003_sig000002e9
    );
  blk00000003_blk000000ed : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000289,
      D => blk00000003_sig0000018b,
      Q => blk00000003_sig000002e8
    );
  blk00000003_blk000000ec : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000289,
      D => blk00000003_sig00000189,
      Q => blk00000003_sig000002e7
    );
  blk00000003_blk000000eb : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000188,
      D => blk00000003_sig000002c6,
      Q => blk00000003_sig000002e6
    );
  blk00000003_blk000000ea : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000188,
      D => blk00000003_sig000002c4,
      Q => blk00000003_sig000002e5
    );
  blk00000003_blk000000e9 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000188,
      D => blk00000003_sig000002c2,
      Q => blk00000003_sig000002e4
    );
  blk00000003_blk000000e8 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000188,
      D => blk00000003_sig000002c0,
      Q => blk00000003_sig000002e3
    );
  blk00000003_blk000000e7 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000188,
      D => blk00000003_sig000002be,
      Q => blk00000003_sig000002e2
    );
  blk00000003_blk000000e6 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000188,
      D => blk00000003_sig000002bc,
      Q => blk00000003_sig000002e1
    );
  blk00000003_blk000000e5 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000188,
      D => blk00000003_sig000002ba,
      Q => blk00000003_sig000002e0
    );
  blk00000003_blk000000e4 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000188,
      D => blk00000003_sig000002b8,
      Q => blk00000003_sig000002df
    );
  blk00000003_blk000000e3 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000188,
      D => blk00000003_sig000002b6,
      Q => blk00000003_sig000002de
    );
  blk00000003_blk000000e2 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000188,
      D => blk00000003_sig000002b4,
      Q => blk00000003_sig000002dd
    );
  blk00000003_blk000000e1 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000188,
      D => blk00000003_sig000002b2,
      Q => blk00000003_sig000002dc
    );
  blk00000003_blk000000e0 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000188,
      D => blk00000003_sig000002b0,
      Q => blk00000003_sig000002db
    );
  blk00000003_blk000000df : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000188,
      D => blk00000003_sig000002ae,
      Q => blk00000003_sig000002da
    );
  blk00000003_blk000000de : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000188,
      D => blk00000003_sig000002ac,
      Q => blk00000003_sig000002d9
    );
  blk00000003_blk000000dd : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000188,
      D => blk00000003_sig000002aa,
      Q => blk00000003_sig000002d8
    );
  blk00000003_blk000000dc : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000188,
      D => blk00000003_sig000002a8,
      Q => blk00000003_sig000002d7
    );
  blk00000003_blk000000db : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000188,
      D => blk00000003_sig000002a6,
      Q => blk00000003_sig000002d6
    );
  blk00000003_blk000000da : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000188,
      D => blk00000003_sig000002a4,
      Q => blk00000003_sig000002d5
    );
  blk00000003_blk000000d9 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000188,
      D => blk00000003_sig000002a2,
      Q => blk00000003_sig000002d4
    );
  blk00000003_blk000000d8 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000188,
      D => blk00000003_sig000002a0,
      Q => blk00000003_sig000002d3
    );
  blk00000003_blk000000d7 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000188,
      D => blk00000003_sig0000029e,
      Q => blk00000003_sig000002d2
    );
  blk00000003_blk000000d6 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000188,
      D => blk00000003_sig0000029c,
      Q => blk00000003_sig000002d1
    );
  blk00000003_blk000000d5 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000188,
      D => blk00000003_sig0000029a,
      Q => blk00000003_sig000002d0
    );
  blk00000003_blk000000d4 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000188,
      D => blk00000003_sig00000298,
      Q => blk00000003_sig000002cf
    );
  blk00000003_blk000000d3 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000188,
      D => blk00000003_sig00000296,
      Q => blk00000003_sig000002ce
    );
  blk00000003_blk000000d2 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000188,
      D => blk00000003_sig00000294,
      Q => blk00000003_sig000002cd
    );
  blk00000003_blk000000d1 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000188,
      D => blk00000003_sig00000292,
      Q => blk00000003_sig000002cc
    );
  blk00000003_blk000000d0 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000188,
      D => blk00000003_sig00000290,
      Q => blk00000003_sig000002cb
    );
  blk00000003_blk000000cf : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000188,
      D => blk00000003_sig0000028e,
      Q => blk00000003_sig000002ca
    );
  blk00000003_blk000000ce : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000188,
      D => blk00000003_sig0000028c,
      Q => blk00000003_sig000002c9
    );
  blk00000003_blk000000cd : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000188,
      D => blk00000003_sig0000028a,
      Q => blk00000003_sig000002c8
    );
  blk00000003_blk000000cc : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000289,
      D => blk00000003_sig000002c6,
      Q => blk00000003_sig000002c7
    );
  blk00000003_blk000000cb : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000289,
      D => blk00000003_sig000002c4,
      Q => blk00000003_sig000002c5
    );
  blk00000003_blk000000ca : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000289,
      D => blk00000003_sig000002c2,
      Q => blk00000003_sig000002c3
    );
  blk00000003_blk000000c9 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000289,
      D => blk00000003_sig000002c0,
      Q => blk00000003_sig000002c1
    );
  blk00000003_blk000000c8 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000289,
      D => blk00000003_sig000002be,
      Q => blk00000003_sig000002bf
    );
  blk00000003_blk000000c7 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000289,
      D => blk00000003_sig000002bc,
      Q => blk00000003_sig000002bd
    );
  blk00000003_blk000000c6 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000289,
      D => blk00000003_sig000002ba,
      Q => blk00000003_sig000002bb
    );
  blk00000003_blk000000c5 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000289,
      D => blk00000003_sig000002b8,
      Q => blk00000003_sig000002b9
    );
  blk00000003_blk000000c4 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000289,
      D => blk00000003_sig000002b6,
      Q => blk00000003_sig000002b7
    );
  blk00000003_blk000000c3 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000289,
      D => blk00000003_sig000002b4,
      Q => blk00000003_sig000002b5
    );
  blk00000003_blk000000c2 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000289,
      D => blk00000003_sig000002b2,
      Q => blk00000003_sig000002b3
    );
  blk00000003_blk000000c1 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000289,
      D => blk00000003_sig000002b0,
      Q => blk00000003_sig000002b1
    );
  blk00000003_blk000000c0 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000289,
      D => blk00000003_sig000002ae,
      Q => blk00000003_sig000002af
    );
  blk00000003_blk000000bf : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000289,
      D => blk00000003_sig000002ac,
      Q => blk00000003_sig000002ad
    );
  blk00000003_blk000000be : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000289,
      D => blk00000003_sig000002aa,
      Q => blk00000003_sig000002ab
    );
  blk00000003_blk000000bd : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000289,
      D => blk00000003_sig000002a8,
      Q => blk00000003_sig000002a9
    );
  blk00000003_blk000000bc : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000289,
      D => blk00000003_sig000002a6,
      Q => blk00000003_sig000002a7
    );
  blk00000003_blk000000bb : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000289,
      D => blk00000003_sig000002a4,
      Q => blk00000003_sig000002a5
    );
  blk00000003_blk000000ba : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000289,
      D => blk00000003_sig000002a2,
      Q => blk00000003_sig000002a3
    );
  blk00000003_blk000000b9 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000289,
      D => blk00000003_sig000002a0,
      Q => blk00000003_sig000002a1
    );
  blk00000003_blk000000b8 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000289,
      D => blk00000003_sig0000029e,
      Q => blk00000003_sig0000029f
    );
  blk00000003_blk000000b7 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000289,
      D => blk00000003_sig0000029c,
      Q => blk00000003_sig0000029d
    );
  blk00000003_blk000000b6 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000289,
      D => blk00000003_sig0000029a,
      Q => blk00000003_sig0000029b
    );
  blk00000003_blk000000b5 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000289,
      D => blk00000003_sig00000298,
      Q => blk00000003_sig00000299
    );
  blk00000003_blk000000b4 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000289,
      D => blk00000003_sig00000296,
      Q => blk00000003_sig00000297
    );
  blk00000003_blk000000b3 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000289,
      D => blk00000003_sig00000294,
      Q => blk00000003_sig00000295
    );
  blk00000003_blk000000b2 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000289,
      D => blk00000003_sig00000292,
      Q => blk00000003_sig00000293
    );
  blk00000003_blk000000b1 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000289,
      D => blk00000003_sig00000290,
      Q => blk00000003_sig00000291
    );
  blk00000003_blk000000b0 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000289,
      D => blk00000003_sig0000028e,
      Q => blk00000003_sig0000028f
    );
  blk00000003_blk000000af : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000289,
      D => blk00000003_sig0000028c,
      Q => blk00000003_sig0000028d
    );
  blk00000003_blk000000ae : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000289,
      D => blk00000003_sig0000028a,
      Q => blk00000003_sig0000028b
    );
  blk00000003_blk000000ad : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000287,
      Q => blk00000003_sig00000288
    );
  blk00000003_blk000000ac : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig0000011d,
      Q => blk00000003_sig00000286
    );
  blk00000003_blk000000ab : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig0000011c,
      Q => blk00000003_sig00000285
    );
  blk00000003_blk000000aa : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig0000011b,
      Q => blk00000003_sig00000284
    );
  blk00000003_blk000000a9 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig0000011a,
      Q => blk00000003_sig00000283
    );
  blk00000003_blk000000a8 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000119,
      Q => blk00000003_sig00000282
    );
  blk00000003_blk000000a7 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000118,
      Q => blk00000003_sig00000281
    );
  blk00000003_blk000000a6 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000117,
      Q => blk00000003_sig00000280
    );
  blk00000003_blk000000a5 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000116,
      Q => blk00000003_sig0000027f
    );
  blk00000003_blk000000a4 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000115,
      Q => blk00000003_sig0000027e
    );
  blk00000003_blk000000a3 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000114,
      Q => blk00000003_sig0000027d
    );
  blk00000003_blk000000a2 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000113,
      Q => blk00000003_sig0000027c
    );
  blk00000003_blk000000a1 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000112,
      Q => blk00000003_sig0000027b
    );
  blk00000003_blk000000a0 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000111,
      Q => blk00000003_sig0000027a
    );
  blk00000003_blk0000009f : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000110,
      Q => blk00000003_sig00000279
    );
  blk00000003_blk0000009e : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig0000010f,
      Q => blk00000003_sig00000278
    );
  blk00000003_blk0000009d : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig0000010e,
      Q => blk00000003_sig00000277
    );
  blk00000003_blk0000009c : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig0000010d,
      Q => blk00000003_sig00000276
    );
  blk00000003_blk0000009b : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig0000010c,
      Q => blk00000003_sig00000275
    );
  blk00000003_blk0000009a : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig0000010b,
      Q => blk00000003_sig00000274
    );
  blk00000003_blk00000099 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig0000010a,
      Q => blk00000003_sig00000273
    );
  blk00000003_blk00000098 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000109,
      Q => blk00000003_sig00000272
    );
  blk00000003_blk00000097 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000108,
      Q => blk00000003_sig00000271
    );
  blk00000003_blk00000096 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000107,
      Q => blk00000003_sig00000270
    );
  blk00000003_blk00000095 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000106,
      Q => blk00000003_sig0000026f
    );
  blk00000003_blk00000094 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000105,
      Q => blk00000003_sig0000026e
    );
  blk00000003_blk00000093 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000104,
      Q => blk00000003_sig0000026d
    );
  blk00000003_blk00000092 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000103,
      Q => blk00000003_sig0000026c
    );
  blk00000003_blk00000091 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000102,
      Q => blk00000003_sig0000026b
    );
  blk00000003_blk00000090 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000101,
      Q => blk00000003_sig0000026a
    );
  blk00000003_blk0000008f : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000100,
      Q => blk00000003_sig00000269
    );
  blk00000003_blk0000008e : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000000ff,
      Q => blk00000003_sig00000268
    );
  blk00000003_blk0000008d : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000000fe,
      Q => blk00000003_sig00000267
    );
  blk00000003_blk0000008c : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000000fd,
      Q => blk00000003_sig00000266
    );
  blk00000003_blk0000008b : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000000fc,
      Q => blk00000003_sig00000265
    );
  blk00000003_blk0000008a : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000181,
      Q => blk00000003_sig00000264
    );
  blk00000003_blk00000089 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000180,
      Q => blk00000003_sig00000263
    );
  blk00000003_blk00000088 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig0000017f,
      Q => blk00000003_sig00000262
    );
  blk00000003_blk00000087 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig0000017e,
      Q => blk00000003_sig00000261
    );
  blk00000003_blk00000086 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig0000017d,
      Q => blk00000003_sig00000260
    );
  blk00000003_blk00000085 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig0000017c,
      Q => blk00000003_sig0000025f
    );
  blk00000003_blk00000084 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig0000017b,
      Q => blk00000003_sig0000025e
    );
  blk00000003_blk00000083 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig0000017a,
      Q => blk00000003_sig0000025d
    );
  blk00000003_blk00000082 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000179,
      Q => blk00000003_sig0000025c
    );
  blk00000003_blk00000081 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000178,
      Q => blk00000003_sig0000025b
    );
  blk00000003_blk00000080 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000177,
      Q => blk00000003_sig0000025a
    );
  blk00000003_blk0000007f : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000176,
      Q => blk00000003_sig00000259
    );
  blk00000003_blk0000007e : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000175,
      Q => blk00000003_sig00000258
    );
  blk00000003_blk0000007d : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000174,
      Q => blk00000003_sig00000257
    );
  blk00000003_blk0000007c : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000173,
      Q => blk00000003_sig00000256
    );
  blk00000003_blk0000007b : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000172,
      Q => blk00000003_sig00000255
    );
  blk00000003_blk0000007a : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000171,
      Q => blk00000003_sig00000254
    );
  blk00000003_blk00000079 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000170,
      Q => blk00000003_sig00000253
    );
  blk00000003_blk00000078 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig0000016f,
      Q => blk00000003_sig00000252
    );
  blk00000003_blk00000077 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig0000016e,
      Q => blk00000003_sig00000251
    );
  blk00000003_blk00000076 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig0000016d,
      Q => blk00000003_sig00000250
    );
  blk00000003_blk00000075 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig0000016c,
      Q => blk00000003_sig0000024f
    );
  blk00000003_blk00000074 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig0000016b,
      Q => blk00000003_sig0000024e
    );
  blk00000003_blk00000073 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig0000016a,
      Q => blk00000003_sig0000024d
    );
  blk00000003_blk00000072 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000169,
      Q => blk00000003_sig0000024c
    );
  blk00000003_blk00000071 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000168,
      Q => blk00000003_sig0000024b
    );
  blk00000003_blk00000070 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000167,
      Q => blk00000003_sig0000024a
    );
  blk00000003_blk0000006f : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000166,
      Q => blk00000003_sig00000249
    );
  blk00000003_blk0000006e : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000165,
      Q => blk00000003_sig00000248
    );
  blk00000003_blk0000006d : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000164,
      Q => blk00000003_sig00000247
    );
  blk00000003_blk0000006c : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000163,
      Q => blk00000003_sig00000246
    );
  blk00000003_blk0000006b : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000162,
      Q => blk00000003_sig00000245
    );
  blk00000003_blk0000006a : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000161,
      Q => blk00000003_sig00000244
    );
  blk00000003_blk00000069 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000160,
      Q => blk00000003_sig00000243
    );
  blk00000003_blk00000068 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000241,
      Q => blk00000003_sig00000242
    );
  blk00000003_blk00000067 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig0000023f,
      Q => blk00000003_sig00000240
    );
  blk00000003_blk00000066 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig0000023d,
      Q => blk00000003_sig0000023e
    );
  blk00000003_blk00000065 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig0000023b,
      Q => blk00000003_sig0000023c
    );
  blk00000003_blk00000064 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000239,
      Q => blk00000003_sig0000023a
    );
  blk00000003_blk00000063 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000237,
      Q => blk00000003_sig00000238
    );
  blk00000003_blk00000062 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000235,
      Q => blk00000003_sig00000236
    );
  blk00000003_blk00000061 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000233,
      Q => blk00000003_sig00000234
    );
  blk00000003_blk00000060 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000231,
      Q => blk00000003_sig00000232
    );
  blk00000003_blk0000005f : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig0000022f,
      Q => blk00000003_sig00000230
    );
  blk00000003_blk0000005e : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig0000022d,
      Q => blk00000003_sig0000022e
    );
  blk00000003_blk0000005d : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig0000022b,
      Q => blk00000003_sig0000022c
    );
  blk00000003_blk0000005c : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000229,
      Q => blk00000003_sig0000022a
    );
  blk00000003_blk0000005b : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000227,
      Q => blk00000003_sig00000228
    );
  blk00000003_blk0000005a : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000225,
      Q => blk00000003_sig00000226
    );
  blk00000003_blk00000059 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000223,
      Q => blk00000003_sig00000224
    );
  blk00000003_blk00000058 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000221,
      Q => blk00000003_sig00000222
    );
  blk00000003_blk00000057 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig0000021f,
      Q => blk00000003_sig00000220
    );
  blk00000003_blk00000056 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig0000021d,
      Q => blk00000003_sig0000021e
    );
  blk00000003_blk00000055 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig0000021b,
      Q => blk00000003_sig0000021c
    );
  blk00000003_blk00000054 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000219,
      Q => blk00000003_sig0000021a
    );
  blk00000003_blk00000053 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000217,
      Q => blk00000003_sig00000218
    );
  blk00000003_blk00000052 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000215,
      Q => blk00000003_sig00000216
    );
  blk00000003_blk00000051 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000213,
      Q => blk00000003_sig00000214
    );
  blk00000003_blk00000050 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000211,
      Q => blk00000003_sig00000212
    );
  blk00000003_blk0000004f : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig0000020f,
      Q => blk00000003_sig00000210
    );
  blk00000003_blk0000004e : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig0000020d,
      Q => blk00000003_sig0000020e
    );
  blk00000003_blk0000004d : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig0000020b,
      Q => blk00000003_sig0000020c
    );
  blk00000003_blk0000004c : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000209,
      Q => blk00000003_sig0000020a
    );
  blk00000003_blk0000004b : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000207,
      Q => blk00000003_sig00000208
    );
  blk00000003_blk0000004a : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000205,
      Q => blk00000003_sig00000206
    );
  blk00000003_blk00000049 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000203,
      Q => blk00000003_sig00000204
    );
  blk00000003_blk00000048 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000201,
      Q => blk00000003_sig00000202
    );
  blk00000003_blk00000047 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000001ff,
      Q => blk00000003_sig00000200
    );
  blk00000003_blk00000046 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000001fd,
      Q => blk00000003_sig000001fe
    );
  blk00000003_blk00000045 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000001fb,
      Q => blk00000003_sig000001fc
    );
  blk00000003_blk00000044 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000001f9,
      Q => blk00000003_sig000001fa
    );
  blk00000003_blk00000043 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000001f7,
      Q => blk00000003_sig000001f8
    );
  blk00000003_blk00000042 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000001f5,
      Q => blk00000003_sig000001f6
    );
  blk00000003_blk00000041 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000001f3,
      Q => blk00000003_sig000001f4
    );
  blk00000003_blk00000040 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000001f1,
      Q => blk00000003_sig000001f2
    );
  blk00000003_blk0000003f : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000001ef,
      Q => blk00000003_sig000001f0
    );
  blk00000003_blk0000003e : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000001ed,
      Q => blk00000003_sig000001ee
    );
  blk00000003_blk0000003d : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000001eb,
      Q => blk00000003_sig000001ec
    );
  blk00000003_blk0000003c : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000001e9,
      Q => blk00000003_sig000001ea
    );
  blk00000003_blk0000003b : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000001e7,
      Q => blk00000003_sig000001e8
    );
  blk00000003_blk0000003a : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000001e5,
      Q => blk00000003_sig000001e6
    );
  blk00000003_blk00000039 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000001e3,
      Q => blk00000003_sig000001e4
    );
  blk00000003_blk00000038 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000001e1,
      Q => blk00000003_sig000001e2
    );
  blk00000003_blk00000037 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000001df,
      Q => blk00000003_sig000001e0
    );
  blk00000003_blk00000036 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000001dd,
      Q => blk00000003_sig000001de
    );
  blk00000003_blk00000035 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000001db,
      Q => blk00000003_sig000001dc
    );
  blk00000003_blk00000034 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000001d9,
      Q => blk00000003_sig000001da
    );
  blk00000003_blk00000033 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000001d7,
      Q => blk00000003_sig000001d8
    );
  blk00000003_blk00000032 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000001d5,
      Q => blk00000003_sig000001d6
    );
  blk00000003_blk00000031 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000001d3,
      Q => blk00000003_sig000001d4
    );
  blk00000003_blk00000030 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000001d1,
      Q => blk00000003_sig000001d2
    );
  blk00000003_blk0000002f : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000001cf,
      Q => blk00000003_sig000001d0
    );
  blk00000003_blk0000002e : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000001cd,
      Q => blk00000003_sig000001ce
    );
  blk00000003_blk0000002d : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000001cb,
      Q => blk00000003_sig000001cc
    );
  blk00000003_blk0000002c : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000001c9,
      Q => blk00000003_sig000001ca
    );
  blk00000003_blk0000002b : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig000001c7,
      Q => blk00000003_sig000001c8
    );
  blk00000003_blk0000002a : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000188,
      D => blk00000003_sig000001c5,
      Q => blk00000003_sig000001c6
    );
  blk00000003_blk00000029 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000188,
      D => blk00000003_sig000001c3,
      Q => blk00000003_sig000001c4
    );
  blk00000003_blk00000028 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000188,
      D => blk00000003_sig000001c1,
      Q => blk00000003_sig000001c2
    );
  blk00000003_blk00000027 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000188,
      D => blk00000003_sig000001bf,
      Q => blk00000003_sig000001c0
    );
  blk00000003_blk00000026 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000188,
      D => blk00000003_sig000001bd,
      Q => blk00000003_sig000001be
    );
  blk00000003_blk00000025 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000188,
      D => blk00000003_sig000001bb,
      Q => blk00000003_sig000001bc
    );
  blk00000003_blk00000024 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000188,
      D => blk00000003_sig000001b9,
      Q => blk00000003_sig000001ba
    );
  blk00000003_blk00000023 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000188,
      D => blk00000003_sig000001b7,
      Q => blk00000003_sig000001b8
    );
  blk00000003_blk00000022 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000188,
      D => blk00000003_sig000001b5,
      Q => blk00000003_sig000001b6
    );
  blk00000003_blk00000021 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000188,
      D => blk00000003_sig000001b3,
      Q => blk00000003_sig000001b4
    );
  blk00000003_blk00000020 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000188,
      D => blk00000003_sig000001b1,
      Q => blk00000003_sig000001b2
    );
  blk00000003_blk0000001f : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000188,
      D => blk00000003_sig000001af,
      Q => blk00000003_sig000001b0
    );
  blk00000003_blk0000001e : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000188,
      D => blk00000003_sig000001ad,
      Q => blk00000003_sig000001ae
    );
  blk00000003_blk0000001d : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000188,
      D => blk00000003_sig000001ab,
      Q => blk00000003_sig000001ac
    );
  blk00000003_blk0000001c : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000188,
      D => blk00000003_sig000001a9,
      Q => blk00000003_sig000001aa
    );
  blk00000003_blk0000001b : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000188,
      D => blk00000003_sig000001a7,
      Q => blk00000003_sig000001a8
    );
  blk00000003_blk0000001a : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000188,
      D => blk00000003_sig000001a5,
      Q => blk00000003_sig000001a6
    );
  blk00000003_blk00000019 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000188,
      D => blk00000003_sig000001a3,
      Q => blk00000003_sig000001a4
    );
  blk00000003_blk00000018 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000188,
      D => blk00000003_sig000001a1,
      Q => blk00000003_sig000001a2
    );
  blk00000003_blk00000017 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000188,
      D => blk00000003_sig0000019f,
      Q => blk00000003_sig000001a0
    );
  blk00000003_blk00000016 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000188,
      D => blk00000003_sig0000019d,
      Q => blk00000003_sig0000019e
    );
  blk00000003_blk00000015 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000188,
      D => blk00000003_sig0000019b,
      Q => blk00000003_sig0000019c
    );
  blk00000003_blk00000014 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000188,
      D => blk00000003_sig00000199,
      Q => blk00000003_sig0000019a
    );
  blk00000003_blk00000013 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000188,
      D => blk00000003_sig00000197,
      Q => blk00000003_sig00000198
    );
  blk00000003_blk00000012 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000188,
      D => blk00000003_sig00000195,
      Q => blk00000003_sig00000196
    );
  blk00000003_blk00000011 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000188,
      D => blk00000003_sig00000193,
      Q => blk00000003_sig00000194
    );
  blk00000003_blk00000010 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000188,
      D => blk00000003_sig00000191,
      Q => blk00000003_sig00000192
    );
  blk00000003_blk0000000f : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000188,
      D => blk00000003_sig0000018f,
      Q => blk00000003_sig00000190
    );
  blk00000003_blk0000000e : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000188,
      D => blk00000003_sig0000018d,
      Q => blk00000003_sig0000018e
    );
  blk00000003_blk0000000d : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000188,
      D => blk00000003_sig0000018b,
      Q => blk00000003_sig0000018c
    );
  blk00000003_blk0000000c : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => blk00000003_sig00000188,
      D => blk00000003_sig00000189,
      Q => blk00000003_sig0000018a
    );
  blk00000003_blk0000000b : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000185,
      R => sclr,
      Q => blk00000003_sig00000187
    );
  blk00000003_blk0000000a : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_sig00000184,
      R => sclr,
      Q => blk00000003_sig00000186
    );
  blk00000003_blk00000009 : LUT3
    generic map(
      INIT => X"E0"
    )
    port map (
      I0 => blk00000003_sig00000182,
      I1 => blk00000003_sig00000183,
      I2 => ce,
      O => blk00000003_sig00000185
    );
  blk00000003_blk00000008 : LUT3
    generic map(
      INIT => X"E0"
    )
    port map (
      I0 => blk00000003_sig00000182,
      I1 => blk00000003_sig00000183,
      I2 => ce,
      O => blk00000003_sig00000184
    );
  blk00000003_blk00000007 : DSP48E
    generic map(
      ACASCREG => 1,
      ALUMODEREG => 1,
      AREG => 1,
      AUTORESET_PATTERN_DETECT => FALSE,
      AUTORESET_PATTERN_DETECT_OPTINV => "MATCH",
      A_INPUT => "DIRECT",
      BCASCREG => 1,
      BREG => 1,
      B_INPUT => "DIRECT",
      CARRYINREG => 0,
      CARRYINSELREG => 0,
      CREG => 1,
      MASK => X"3FFFFFFFFFFF",
      MREG => 0,
      MULTCARRYINREG => 0,
      OPMODEREG => 0,
      PATTERN => X"000000000000",
      PREG => 1,
      SEL_MASK => "MASK",
      SEL_PATTERN => "PATTERN",
      SEL_ROUNDING_MASK => "SEL_MASK",
      SIM_MODE => "SAFE",
      USE_MULT => "NONE",
      USE_PATTERN_DETECT => "NO_PATDET",
      USE_SIMD => "ONE48"
    )
    port map (
      CARRYIN => blk00000003_sig00000082,
      CEA1 => blk00000003_sig00000082,
      CEA2 => ce,
      CEB1 => blk00000003_sig00000082,
      CEB2 => ce,
      CEC => ce,
      CECTRL => blk00000003_sig00000082,
      CEP => ce,
      CEM => blk00000003_sig00000082,
      CECARRYIN => blk00000003_sig00000082,
      CEMULTCARRYIN => blk00000003_sig00000082,
      CLK => clk,
      RSTA => blk00000003_sig00000082,
      RSTB => blk00000003_sig00000082,
      RSTC => blk00000003_sig00000082,
      RSTCTRL => blk00000003_sig00000082,
      RSTP => blk00000003_sig00000082,
      RSTM => blk00000003_sig00000082,
      RSTALLCARRYIN => blk00000003_sig00000082,
      CEALUMODE => ce,
      RSTALUMODE => blk00000003_sig00000082,
      PATTERNBDETECT => NLW_blk00000003_blk00000007_PATTERNBDETECT_UNCONNECTED,
      PATTERNDETECT => NLW_blk00000003_blk00000007_PATTERNDETECT_UNCONNECTED,
      OVERFLOW => NLW_blk00000003_blk00000007_OVERFLOW_UNCONNECTED,
      UNDERFLOW => NLW_blk00000003_blk00000007_UNDERFLOW_UNCONNECTED,
      CARRYCASCIN => blk00000003_sig00000082,
      CARRYCASCOUT => NLW_blk00000003_blk00000007_CARRYCASCOUT_UNCONNECTED,
      MULTSIGNIN => blk00000003_sig00000082,
      MULTSIGNOUT => NLW_blk00000003_blk00000007_MULTSIGNOUT_UNCONNECTED,
      A(29) => blk00000003_sig00000082,
      A(28) => blk00000003_sig00000082,
      A(27) => blk00000003_sig00000082,
      A(26) => blk00000003_sig00000082,
      A(25) => blk00000003_sig00000082,
      A(24) => blk00000003_sig00000082,
      A(23) => blk00000003_sig00000082,
      A(22) => blk00000003_sig00000082,
      A(21) => blk00000003_sig00000082,
      A(20) => blk00000003_sig00000082,
      A(19) => blk00000003_sig00000082,
      A(18) => blk00000003_sig00000082,
      A(17) => blk00000003_sig0000011e,
      A(16) => blk00000003_sig0000011e,
      A(15) => blk00000003_sig0000011f,
      A(14) => blk00000003_sig00000120,
      A(13) => blk00000003_sig00000121,
      A(12) => blk00000003_sig00000122,
      A(11) => blk00000003_sig00000123,
      A(10) => blk00000003_sig00000124,
      A(9) => blk00000003_sig00000125,
      A(8) => blk00000003_sig00000126,
      A(7) => blk00000003_sig00000127,
      A(6) => blk00000003_sig00000128,
      A(5) => blk00000003_sig00000129,
      A(4) => blk00000003_sig0000012a,
      A(3) => blk00000003_sig0000012b,
      A(2) => blk00000003_sig0000012c,
      A(1) => blk00000003_sig0000012d,
      A(0) => blk00000003_sig0000012e,
      PCIN(47) => blk00000003_sig000000cc,
      PCIN(46) => blk00000003_sig000000cd,
      PCIN(45) => blk00000003_sig000000ce,
      PCIN(44) => blk00000003_sig000000cf,
      PCIN(43) => blk00000003_sig000000d0,
      PCIN(42) => blk00000003_sig000000d1,
      PCIN(41) => blk00000003_sig000000d2,
      PCIN(40) => blk00000003_sig000000d3,
      PCIN(39) => blk00000003_sig000000d4,
      PCIN(38) => blk00000003_sig000000d5,
      PCIN(37) => blk00000003_sig000000d6,
      PCIN(36) => blk00000003_sig000000d7,
      PCIN(35) => blk00000003_sig000000d8,
      PCIN(34) => blk00000003_sig000000d9,
      PCIN(33) => blk00000003_sig000000da,
      PCIN(32) => blk00000003_sig000000db,
      PCIN(31) => blk00000003_sig000000dc,
      PCIN(30) => blk00000003_sig000000dd,
      PCIN(29) => blk00000003_sig000000de,
      PCIN(28) => blk00000003_sig000000df,
      PCIN(27) => blk00000003_sig000000e0,
      PCIN(26) => blk00000003_sig000000e1,
      PCIN(25) => blk00000003_sig000000e2,
      PCIN(24) => blk00000003_sig000000e3,
      PCIN(23) => blk00000003_sig000000e4,
      PCIN(22) => blk00000003_sig000000e5,
      PCIN(21) => blk00000003_sig000000e6,
      PCIN(20) => blk00000003_sig000000e7,
      PCIN(19) => blk00000003_sig000000e8,
      PCIN(18) => blk00000003_sig000000e9,
      PCIN(17) => blk00000003_sig000000ea,
      PCIN(16) => blk00000003_sig000000eb,
      PCIN(15) => blk00000003_sig000000ec,
      PCIN(14) => blk00000003_sig000000ed,
      PCIN(13) => blk00000003_sig000000ee,
      PCIN(12) => blk00000003_sig000000ef,
      PCIN(11) => blk00000003_sig000000f0,
      PCIN(10) => blk00000003_sig000000f1,
      PCIN(9) => blk00000003_sig000000f2,
      PCIN(8) => blk00000003_sig000000f3,
      PCIN(7) => blk00000003_sig000000f4,
      PCIN(6) => blk00000003_sig000000f5,
      PCIN(5) => blk00000003_sig000000f6,
      PCIN(4) => blk00000003_sig000000f7,
      PCIN(3) => blk00000003_sig000000f8,
      PCIN(2) => blk00000003_sig000000f9,
      PCIN(1) => blk00000003_sig000000fa,
      PCIN(0) => blk00000003_sig000000fb,
      B(17) => blk00000003_sig0000012f,
      B(16) => blk00000003_sig00000130,
      B(15) => blk00000003_sig00000131,
      B(14) => blk00000003_sig00000132,
      B(13) => blk00000003_sig00000133,
      B(12) => blk00000003_sig00000134,
      B(11) => blk00000003_sig00000135,
      B(10) => blk00000003_sig00000136,
      B(9) => blk00000003_sig00000137,
      B(8) => blk00000003_sig00000138,
      B(7) => blk00000003_sig00000139,
      B(6) => blk00000003_sig0000013a,
      B(5) => blk00000003_sig0000013b,
      B(4) => blk00000003_sig0000013c,
      B(3) => blk00000003_sig0000013d,
      B(2) => blk00000003_sig0000013e,
      B(1) => blk00000003_sig0000013f,
      B(0) => blk00000003_sig00000140,
      C(47) => blk00000003_sig00000082,
      C(46) => blk00000003_sig00000082,
      C(45) => blk00000003_sig00000082,
      C(44) => blk00000003_sig00000082,
      C(43) => blk00000003_sig00000082,
      C(42) => blk00000003_sig00000082,
      C(41) => blk00000003_sig00000082,
      C(40) => blk00000003_sig00000082,
      C(39) => blk00000003_sig00000082,
      C(38) => blk00000003_sig00000082,
      C(37) => blk00000003_sig00000082,
      C(36) => blk00000003_sig00000082,
      C(35) => blk00000003_sig00000141,
      C(34) => blk00000003_sig00000141,
      C(33) => blk00000003_sig00000141,
      C(32) => blk00000003_sig00000142,
      C(31) => blk00000003_sig00000143,
      C(30) => blk00000003_sig00000144,
      C(29) => blk00000003_sig00000145,
      C(28) => blk00000003_sig00000146,
      C(27) => blk00000003_sig00000147,
      C(26) => blk00000003_sig00000148,
      C(25) => blk00000003_sig00000149,
      C(24) => blk00000003_sig0000014a,
      C(23) => blk00000003_sig0000014b,
      C(22) => blk00000003_sig0000014c,
      C(21) => blk00000003_sig0000014d,
      C(20) => blk00000003_sig0000014e,
      C(19) => blk00000003_sig0000014f,
      C(18) => blk00000003_sig00000150,
      C(17) => blk00000003_sig00000151,
      C(16) => blk00000003_sig00000152,
      C(15) => blk00000003_sig00000153,
      C(14) => blk00000003_sig00000154,
      C(13) => blk00000003_sig00000155,
      C(12) => blk00000003_sig00000156,
      C(11) => blk00000003_sig00000157,
      C(10) => blk00000003_sig00000158,
      C(9) => blk00000003_sig00000159,
      C(8) => blk00000003_sig0000015a,
      C(7) => blk00000003_sig0000015b,
      C(6) => blk00000003_sig0000015c,
      C(5) => blk00000003_sig0000015d,
      C(4) => blk00000003_sig0000015e,
      C(3) => blk00000003_sig0000015f,
      C(2) => blk00000003_sig00000082,
      C(1) => blk00000003_sig00000082,
      C(0) => blk00000003_sig00000082,
      CARRYINSEL(2) => blk00000003_sig00000082,
      CARRYINSEL(1) => blk00000003_sig00000082,
      CARRYINSEL(0) => blk00000003_sig00000082,
      OPMODE(6) => blk00000003_sig00000082,
      OPMODE(5) => blk00000003_sig00000088,
      OPMODE(4) => blk00000003_sig00000088,
      OPMODE(3) => blk00000003_sig00000082,
      OPMODE(2) => blk00000003_sig00000082,
      OPMODE(1) => blk00000003_sig00000088,
      OPMODE(0) => blk00000003_sig00000088,
      BCIN(17) => blk00000003_sig00000082,
      BCIN(16) => blk00000003_sig00000082,
      BCIN(15) => blk00000003_sig00000082,
      BCIN(14) => blk00000003_sig00000082,
      BCIN(13) => blk00000003_sig00000082,
      BCIN(12) => blk00000003_sig00000082,
      BCIN(11) => blk00000003_sig00000082,
      BCIN(10) => blk00000003_sig00000082,
      BCIN(9) => blk00000003_sig00000082,
      BCIN(8) => blk00000003_sig00000082,
      BCIN(7) => blk00000003_sig00000082,
      BCIN(6) => blk00000003_sig00000082,
      BCIN(5) => blk00000003_sig00000082,
      BCIN(4) => blk00000003_sig00000082,
      BCIN(3) => blk00000003_sig00000082,
      BCIN(2) => blk00000003_sig00000082,
      BCIN(1) => blk00000003_sig00000082,
      BCIN(0) => blk00000003_sig00000082,
      ALUMODE(3) => blk00000003_sig00000082,
      ALUMODE(2) => blk00000003_sig00000082,
      ALUMODE(1) => blk00000003_sig000000cb,
      ALUMODE(0) => blk00000003_sig000000cb,
      PCOUT(47) => NLW_blk00000003_blk00000007_PCOUT_47_UNCONNECTED,
      PCOUT(46) => NLW_blk00000003_blk00000007_PCOUT_46_UNCONNECTED,
      PCOUT(45) => NLW_blk00000003_blk00000007_PCOUT_45_UNCONNECTED,
      PCOUT(44) => NLW_blk00000003_blk00000007_PCOUT_44_UNCONNECTED,
      PCOUT(43) => NLW_blk00000003_blk00000007_PCOUT_43_UNCONNECTED,
      PCOUT(42) => NLW_blk00000003_blk00000007_PCOUT_42_UNCONNECTED,
      PCOUT(41) => NLW_blk00000003_blk00000007_PCOUT_41_UNCONNECTED,
      PCOUT(40) => NLW_blk00000003_blk00000007_PCOUT_40_UNCONNECTED,
      PCOUT(39) => NLW_blk00000003_blk00000007_PCOUT_39_UNCONNECTED,
      PCOUT(38) => NLW_blk00000003_blk00000007_PCOUT_38_UNCONNECTED,
      PCOUT(37) => NLW_blk00000003_blk00000007_PCOUT_37_UNCONNECTED,
      PCOUT(36) => NLW_blk00000003_blk00000007_PCOUT_36_UNCONNECTED,
      PCOUT(35) => NLW_blk00000003_blk00000007_PCOUT_35_UNCONNECTED,
      PCOUT(34) => NLW_blk00000003_blk00000007_PCOUT_34_UNCONNECTED,
      PCOUT(33) => NLW_blk00000003_blk00000007_PCOUT_33_UNCONNECTED,
      PCOUT(32) => NLW_blk00000003_blk00000007_PCOUT_32_UNCONNECTED,
      PCOUT(31) => NLW_blk00000003_blk00000007_PCOUT_31_UNCONNECTED,
      PCOUT(30) => NLW_blk00000003_blk00000007_PCOUT_30_UNCONNECTED,
      PCOUT(29) => NLW_blk00000003_blk00000007_PCOUT_29_UNCONNECTED,
      PCOUT(28) => NLW_blk00000003_blk00000007_PCOUT_28_UNCONNECTED,
      PCOUT(27) => NLW_blk00000003_blk00000007_PCOUT_27_UNCONNECTED,
      PCOUT(26) => NLW_blk00000003_blk00000007_PCOUT_26_UNCONNECTED,
      PCOUT(25) => NLW_blk00000003_blk00000007_PCOUT_25_UNCONNECTED,
      PCOUT(24) => NLW_blk00000003_blk00000007_PCOUT_24_UNCONNECTED,
      PCOUT(23) => NLW_blk00000003_blk00000007_PCOUT_23_UNCONNECTED,
      PCOUT(22) => NLW_blk00000003_blk00000007_PCOUT_22_UNCONNECTED,
      PCOUT(21) => NLW_blk00000003_blk00000007_PCOUT_21_UNCONNECTED,
      PCOUT(20) => NLW_blk00000003_blk00000007_PCOUT_20_UNCONNECTED,
      PCOUT(19) => NLW_blk00000003_blk00000007_PCOUT_19_UNCONNECTED,
      PCOUT(18) => NLW_blk00000003_blk00000007_PCOUT_18_UNCONNECTED,
      PCOUT(17) => NLW_blk00000003_blk00000007_PCOUT_17_UNCONNECTED,
      PCOUT(16) => NLW_blk00000003_blk00000007_PCOUT_16_UNCONNECTED,
      PCOUT(15) => NLW_blk00000003_blk00000007_PCOUT_15_UNCONNECTED,
      PCOUT(14) => NLW_blk00000003_blk00000007_PCOUT_14_UNCONNECTED,
      PCOUT(13) => NLW_blk00000003_blk00000007_PCOUT_13_UNCONNECTED,
      PCOUT(12) => NLW_blk00000003_blk00000007_PCOUT_12_UNCONNECTED,
      PCOUT(11) => NLW_blk00000003_blk00000007_PCOUT_11_UNCONNECTED,
      PCOUT(10) => NLW_blk00000003_blk00000007_PCOUT_10_UNCONNECTED,
      PCOUT(9) => NLW_blk00000003_blk00000007_PCOUT_9_UNCONNECTED,
      PCOUT(8) => NLW_blk00000003_blk00000007_PCOUT_8_UNCONNECTED,
      PCOUT(7) => NLW_blk00000003_blk00000007_PCOUT_7_UNCONNECTED,
      PCOUT(6) => NLW_blk00000003_blk00000007_PCOUT_6_UNCONNECTED,
      PCOUT(5) => NLW_blk00000003_blk00000007_PCOUT_5_UNCONNECTED,
      PCOUT(4) => NLW_blk00000003_blk00000007_PCOUT_4_UNCONNECTED,
      PCOUT(3) => NLW_blk00000003_blk00000007_PCOUT_3_UNCONNECTED,
      PCOUT(2) => NLW_blk00000003_blk00000007_PCOUT_2_UNCONNECTED,
      PCOUT(1) => NLW_blk00000003_blk00000007_PCOUT_1_UNCONNECTED,
      PCOUT(0) => NLW_blk00000003_blk00000007_PCOUT_0_UNCONNECTED,
      P(47) => NLW_blk00000003_blk00000007_P_47_UNCONNECTED,
      P(46) => NLW_blk00000003_blk00000007_P_46_UNCONNECTED,
      P(45) => NLW_blk00000003_blk00000007_P_45_UNCONNECTED,
      P(44) => NLW_blk00000003_blk00000007_P_44_UNCONNECTED,
      P(43) => NLW_blk00000003_blk00000007_P_43_UNCONNECTED,
      P(42) => NLW_blk00000003_blk00000007_P_42_UNCONNECTED,
      P(41) => NLW_blk00000003_blk00000007_P_41_UNCONNECTED,
      P(40) => NLW_blk00000003_blk00000007_P_40_UNCONNECTED,
      P(39) => NLW_blk00000003_blk00000007_P_39_UNCONNECTED,
      P(38) => NLW_blk00000003_blk00000007_P_38_UNCONNECTED,
      P(37) => NLW_blk00000003_blk00000007_P_37_UNCONNECTED,
      P(36) => NLW_blk00000003_blk00000007_P_36_UNCONNECTED,
      P(35) => NLW_blk00000003_blk00000007_P_35_UNCONNECTED,
      P(34) => NLW_blk00000003_blk00000007_P_34_UNCONNECTED,
      P(33) => blk00000003_sig00000160,
      P(32) => blk00000003_sig00000161,
      P(31) => blk00000003_sig00000162,
      P(30) => blk00000003_sig00000163,
      P(29) => blk00000003_sig00000164,
      P(28) => blk00000003_sig00000165,
      P(27) => blk00000003_sig00000166,
      P(26) => blk00000003_sig00000167,
      P(25) => blk00000003_sig00000168,
      P(24) => blk00000003_sig00000169,
      P(23) => blk00000003_sig0000016a,
      P(22) => blk00000003_sig0000016b,
      P(21) => blk00000003_sig0000016c,
      P(20) => blk00000003_sig0000016d,
      P(19) => blk00000003_sig0000016e,
      P(18) => blk00000003_sig0000016f,
      P(17) => blk00000003_sig00000170,
      P(16) => blk00000003_sig00000171,
      P(15) => blk00000003_sig00000172,
      P(14) => blk00000003_sig00000173,
      P(13) => blk00000003_sig00000174,
      P(12) => blk00000003_sig00000175,
      P(11) => blk00000003_sig00000176,
      P(10) => blk00000003_sig00000177,
      P(9) => blk00000003_sig00000178,
      P(8) => blk00000003_sig00000179,
      P(7) => blk00000003_sig0000017a,
      P(6) => blk00000003_sig0000017b,
      P(5) => blk00000003_sig0000017c,
      P(4) => blk00000003_sig0000017d,
      P(3) => blk00000003_sig0000017e,
      P(2) => blk00000003_sig0000017f,
      P(1) => blk00000003_sig00000180,
      P(0) => blk00000003_sig00000181,
      BCOUT(17) => NLW_blk00000003_blk00000007_BCOUT_17_UNCONNECTED,
      BCOUT(16) => NLW_blk00000003_blk00000007_BCOUT_16_UNCONNECTED,
      BCOUT(15) => NLW_blk00000003_blk00000007_BCOUT_15_UNCONNECTED,
      BCOUT(14) => NLW_blk00000003_blk00000007_BCOUT_14_UNCONNECTED,
      BCOUT(13) => NLW_blk00000003_blk00000007_BCOUT_13_UNCONNECTED,
      BCOUT(12) => NLW_blk00000003_blk00000007_BCOUT_12_UNCONNECTED,
      BCOUT(11) => NLW_blk00000003_blk00000007_BCOUT_11_UNCONNECTED,
      BCOUT(10) => NLW_blk00000003_blk00000007_BCOUT_10_UNCONNECTED,
      BCOUT(9) => NLW_blk00000003_blk00000007_BCOUT_9_UNCONNECTED,
      BCOUT(8) => NLW_blk00000003_blk00000007_BCOUT_8_UNCONNECTED,
      BCOUT(7) => NLW_blk00000003_blk00000007_BCOUT_7_UNCONNECTED,
      BCOUT(6) => NLW_blk00000003_blk00000007_BCOUT_6_UNCONNECTED,
      BCOUT(5) => NLW_blk00000003_blk00000007_BCOUT_5_UNCONNECTED,
      BCOUT(4) => NLW_blk00000003_blk00000007_BCOUT_4_UNCONNECTED,
      BCOUT(3) => NLW_blk00000003_blk00000007_BCOUT_3_UNCONNECTED,
      BCOUT(2) => NLW_blk00000003_blk00000007_BCOUT_2_UNCONNECTED,
      BCOUT(1) => NLW_blk00000003_blk00000007_BCOUT_1_UNCONNECTED,
      BCOUT(0) => NLW_blk00000003_blk00000007_BCOUT_0_UNCONNECTED,
      ACIN(29) => blk00000003_sig00000082,
      ACIN(28) => blk00000003_sig00000082,
      ACIN(27) => blk00000003_sig00000082,
      ACIN(26) => blk00000003_sig00000082,
      ACIN(25) => blk00000003_sig00000082,
      ACIN(24) => blk00000003_sig00000082,
      ACIN(23) => blk00000003_sig00000082,
      ACIN(22) => blk00000003_sig00000082,
      ACIN(21) => blk00000003_sig00000082,
      ACIN(20) => blk00000003_sig00000082,
      ACIN(19) => blk00000003_sig00000082,
      ACIN(18) => blk00000003_sig00000082,
      ACIN(17) => blk00000003_sig00000082,
      ACIN(16) => blk00000003_sig00000082,
      ACIN(15) => blk00000003_sig00000082,
      ACIN(14) => blk00000003_sig00000082,
      ACIN(13) => blk00000003_sig00000082,
      ACIN(12) => blk00000003_sig00000082,
      ACIN(11) => blk00000003_sig00000082,
      ACIN(10) => blk00000003_sig00000082,
      ACIN(9) => blk00000003_sig00000082,
      ACIN(8) => blk00000003_sig00000082,
      ACIN(7) => blk00000003_sig00000082,
      ACIN(6) => blk00000003_sig00000082,
      ACIN(5) => blk00000003_sig00000082,
      ACIN(4) => blk00000003_sig00000082,
      ACIN(3) => blk00000003_sig00000082,
      ACIN(2) => blk00000003_sig00000082,
      ACIN(1) => blk00000003_sig00000082,
      ACIN(0) => blk00000003_sig00000082,
      ACOUT(29) => NLW_blk00000003_blk00000007_ACOUT_29_UNCONNECTED,
      ACOUT(28) => NLW_blk00000003_blk00000007_ACOUT_28_UNCONNECTED,
      ACOUT(27) => NLW_blk00000003_blk00000007_ACOUT_27_UNCONNECTED,
      ACOUT(26) => NLW_blk00000003_blk00000007_ACOUT_26_UNCONNECTED,
      ACOUT(25) => NLW_blk00000003_blk00000007_ACOUT_25_UNCONNECTED,
      ACOUT(24) => NLW_blk00000003_blk00000007_ACOUT_24_UNCONNECTED,
      ACOUT(23) => NLW_blk00000003_blk00000007_ACOUT_23_UNCONNECTED,
      ACOUT(22) => NLW_blk00000003_blk00000007_ACOUT_22_UNCONNECTED,
      ACOUT(21) => NLW_blk00000003_blk00000007_ACOUT_21_UNCONNECTED,
      ACOUT(20) => NLW_blk00000003_blk00000007_ACOUT_20_UNCONNECTED,
      ACOUT(19) => NLW_blk00000003_blk00000007_ACOUT_19_UNCONNECTED,
      ACOUT(18) => NLW_blk00000003_blk00000007_ACOUT_18_UNCONNECTED,
      ACOUT(17) => NLW_blk00000003_blk00000007_ACOUT_17_UNCONNECTED,
      ACOUT(16) => NLW_blk00000003_blk00000007_ACOUT_16_UNCONNECTED,
      ACOUT(15) => NLW_blk00000003_blk00000007_ACOUT_15_UNCONNECTED,
      ACOUT(14) => NLW_blk00000003_blk00000007_ACOUT_14_UNCONNECTED,
      ACOUT(13) => NLW_blk00000003_blk00000007_ACOUT_13_UNCONNECTED,
      ACOUT(12) => NLW_blk00000003_blk00000007_ACOUT_12_UNCONNECTED,
      ACOUT(11) => NLW_blk00000003_blk00000007_ACOUT_11_UNCONNECTED,
      ACOUT(10) => NLW_blk00000003_blk00000007_ACOUT_10_UNCONNECTED,
      ACOUT(9) => NLW_blk00000003_blk00000007_ACOUT_9_UNCONNECTED,
      ACOUT(8) => NLW_blk00000003_blk00000007_ACOUT_8_UNCONNECTED,
      ACOUT(7) => NLW_blk00000003_blk00000007_ACOUT_7_UNCONNECTED,
      ACOUT(6) => NLW_blk00000003_blk00000007_ACOUT_6_UNCONNECTED,
      ACOUT(5) => NLW_blk00000003_blk00000007_ACOUT_5_UNCONNECTED,
      ACOUT(4) => NLW_blk00000003_blk00000007_ACOUT_4_UNCONNECTED,
      ACOUT(3) => NLW_blk00000003_blk00000007_ACOUT_3_UNCONNECTED,
      ACOUT(2) => NLW_blk00000003_blk00000007_ACOUT_2_UNCONNECTED,
      ACOUT(1) => NLW_blk00000003_blk00000007_ACOUT_1_UNCONNECTED,
      ACOUT(0) => NLW_blk00000003_blk00000007_ACOUT_0_UNCONNECTED,
      CARRYOUT(3) => NLW_blk00000003_blk00000007_CARRYOUT_3_UNCONNECTED,
      CARRYOUT(2) => NLW_blk00000003_blk00000007_CARRYOUT_2_UNCONNECTED,
      CARRYOUT(1) => NLW_blk00000003_blk00000007_CARRYOUT_1_UNCONNECTED,
      CARRYOUT(0) => NLW_blk00000003_blk00000007_CARRYOUT_0_UNCONNECTED
    );
  blk00000003_blk00000006 : DSP48E
    generic map(
      ACASCREG => 1,
      ALUMODEREG => 1,
      AREG => 1,
      AUTORESET_PATTERN_DETECT => FALSE,
      AUTORESET_PATTERN_DETECT_OPTINV => "MATCH",
      A_INPUT => "DIRECT",
      BCASCREG => 1,
      BREG => 1,
      B_INPUT => "DIRECT",
      CARRYINREG => 0,
      CARRYINSELREG => 0,
      CREG => 1,
      MASK => X"3FFFFFFFFFFF",
      MREG => 0,
      MULTCARRYINREG => 0,
      OPMODEREG => 0,
      PATTERN => X"000000000000",
      PREG => 1,
      SEL_MASK => "MASK",
      SEL_PATTERN => "PATTERN",
      SEL_ROUNDING_MASK => "SEL_MASK",
      SIM_MODE => "SAFE",
      USE_MULT => "NONE",
      USE_PATTERN_DETECT => "NO_PATDET",
      USE_SIMD => "ONE48"
    )
    port map (
      CARRYIN => blk00000003_sig00000082,
      CEA1 => blk00000003_sig00000082,
      CEA2 => ce,
      CEB1 => blk00000003_sig00000082,
      CEB2 => ce,
      CEC => ce,
      CECTRL => blk00000003_sig00000082,
      CEP => ce,
      CEM => blk00000003_sig00000082,
      CECARRYIN => blk00000003_sig00000082,
      CEMULTCARRYIN => blk00000003_sig00000082,
      CLK => clk,
      RSTA => blk00000003_sig00000082,
      RSTB => blk00000003_sig00000082,
      RSTC => blk00000003_sig00000082,
      RSTCTRL => blk00000003_sig00000082,
      RSTP => blk00000003_sig00000082,
      RSTM => blk00000003_sig00000082,
      RSTALLCARRYIN => blk00000003_sig00000082,
      CEALUMODE => ce,
      RSTALUMODE => blk00000003_sig00000082,
      PATTERNBDETECT => NLW_blk00000003_blk00000006_PATTERNBDETECT_UNCONNECTED,
      PATTERNDETECT => NLW_blk00000003_blk00000006_PATTERNDETECT_UNCONNECTED,
      OVERFLOW => NLW_blk00000003_blk00000006_OVERFLOW_UNCONNECTED,
      UNDERFLOW => NLW_blk00000003_blk00000006_UNDERFLOW_UNCONNECTED,
      CARRYCASCIN => blk00000003_sig00000082,
      CARRYCASCOUT => NLW_blk00000003_blk00000006_CARRYCASCOUT_UNCONNECTED,
      MULTSIGNIN => blk00000003_sig00000082,
      MULTSIGNOUT => NLW_blk00000003_blk00000006_MULTSIGNOUT_UNCONNECTED,
      A(29) => blk00000003_sig00000082,
      A(28) => blk00000003_sig00000082,
      A(27) => blk00000003_sig00000082,
      A(26) => blk00000003_sig00000082,
      A(25) => blk00000003_sig00000082,
      A(24) => blk00000003_sig00000082,
      A(23) => blk00000003_sig00000082,
      A(22) => blk00000003_sig00000082,
      A(21) => blk00000003_sig00000082,
      A(20) => blk00000003_sig00000082,
      A(19) => blk00000003_sig00000082,
      A(18) => blk00000003_sig00000082,
      A(17) => blk00000003_sig00000089,
      A(16) => blk00000003_sig00000089,
      A(15) => blk00000003_sig0000008a,
      A(14) => blk00000003_sig0000008b,
      A(13) => blk00000003_sig0000008c,
      A(12) => blk00000003_sig0000008d,
      A(11) => blk00000003_sig0000008e,
      A(10) => blk00000003_sig0000008f,
      A(9) => blk00000003_sig00000090,
      A(8) => blk00000003_sig00000091,
      A(7) => blk00000003_sig00000092,
      A(6) => blk00000003_sig00000093,
      A(5) => blk00000003_sig00000094,
      A(4) => blk00000003_sig00000095,
      A(3) => blk00000003_sig00000096,
      A(2) => blk00000003_sig00000097,
      A(1) => blk00000003_sig00000098,
      A(0) => blk00000003_sig00000099,
      PCIN(47) => blk00000003_sig00000082,
      PCIN(46) => blk00000003_sig00000082,
      PCIN(45) => blk00000003_sig00000082,
      PCIN(44) => blk00000003_sig00000082,
      PCIN(43) => blk00000003_sig00000082,
      PCIN(42) => blk00000003_sig00000082,
      PCIN(41) => blk00000003_sig00000082,
      PCIN(40) => blk00000003_sig00000082,
      PCIN(39) => blk00000003_sig00000082,
      PCIN(38) => blk00000003_sig00000082,
      PCIN(37) => blk00000003_sig00000082,
      PCIN(36) => blk00000003_sig00000082,
      PCIN(35) => blk00000003_sig00000082,
      PCIN(34) => blk00000003_sig00000082,
      PCIN(33) => blk00000003_sig00000082,
      PCIN(32) => blk00000003_sig00000082,
      PCIN(31) => blk00000003_sig00000082,
      PCIN(30) => blk00000003_sig00000082,
      PCIN(29) => blk00000003_sig00000082,
      PCIN(28) => blk00000003_sig00000082,
      PCIN(27) => blk00000003_sig00000082,
      PCIN(26) => blk00000003_sig00000082,
      PCIN(25) => blk00000003_sig00000082,
      PCIN(24) => blk00000003_sig00000082,
      PCIN(23) => blk00000003_sig00000082,
      PCIN(22) => blk00000003_sig00000082,
      PCIN(21) => blk00000003_sig00000082,
      PCIN(20) => blk00000003_sig00000082,
      PCIN(19) => blk00000003_sig00000082,
      PCIN(18) => blk00000003_sig00000082,
      PCIN(17) => blk00000003_sig00000082,
      PCIN(16) => blk00000003_sig00000082,
      PCIN(15) => blk00000003_sig00000082,
      PCIN(14) => blk00000003_sig00000082,
      PCIN(13) => blk00000003_sig00000082,
      PCIN(12) => blk00000003_sig00000082,
      PCIN(11) => blk00000003_sig00000082,
      PCIN(10) => blk00000003_sig00000082,
      PCIN(9) => blk00000003_sig00000082,
      PCIN(8) => blk00000003_sig00000082,
      PCIN(7) => blk00000003_sig00000082,
      PCIN(6) => blk00000003_sig00000082,
      PCIN(5) => blk00000003_sig00000082,
      PCIN(4) => blk00000003_sig00000082,
      PCIN(3) => blk00000003_sig00000082,
      PCIN(2) => blk00000003_sig00000082,
      PCIN(1) => blk00000003_sig00000082,
      PCIN(0) => blk00000003_sig00000082,
      B(17) => blk00000003_sig0000009a,
      B(16) => blk00000003_sig0000009b,
      B(15) => blk00000003_sig0000009c,
      B(14) => blk00000003_sig0000009d,
      B(13) => blk00000003_sig0000009e,
      B(12) => blk00000003_sig0000009f,
      B(11) => blk00000003_sig000000a0,
      B(10) => blk00000003_sig000000a1,
      B(9) => blk00000003_sig000000a2,
      B(8) => blk00000003_sig000000a3,
      B(7) => blk00000003_sig000000a4,
      B(6) => blk00000003_sig000000a5,
      B(5) => blk00000003_sig000000a6,
      B(4) => blk00000003_sig000000a7,
      B(3) => blk00000003_sig000000a8,
      B(2) => blk00000003_sig000000a9,
      B(1) => blk00000003_sig000000aa,
      B(0) => blk00000003_sig000000ab,
      C(47) => blk00000003_sig00000082,
      C(46) => blk00000003_sig00000082,
      C(45) => blk00000003_sig00000082,
      C(44) => blk00000003_sig00000082,
      C(43) => blk00000003_sig00000082,
      C(42) => blk00000003_sig00000082,
      C(41) => blk00000003_sig00000082,
      C(40) => blk00000003_sig00000082,
      C(39) => blk00000003_sig00000082,
      C(38) => blk00000003_sig00000082,
      C(37) => blk00000003_sig00000082,
      C(36) => blk00000003_sig00000082,
      C(35) => blk00000003_sig000000ac,
      C(34) => blk00000003_sig000000ac,
      C(33) => blk00000003_sig000000ac,
      C(32) => blk00000003_sig000000ad,
      C(31) => blk00000003_sig000000ae,
      C(30) => blk00000003_sig000000af,
      C(29) => blk00000003_sig000000b0,
      C(28) => blk00000003_sig000000b1,
      C(27) => blk00000003_sig000000b2,
      C(26) => blk00000003_sig000000b3,
      C(25) => blk00000003_sig000000b4,
      C(24) => blk00000003_sig000000b5,
      C(23) => blk00000003_sig000000b6,
      C(22) => blk00000003_sig000000b7,
      C(21) => blk00000003_sig000000b8,
      C(20) => blk00000003_sig000000b9,
      C(19) => blk00000003_sig000000ba,
      C(18) => blk00000003_sig000000bb,
      C(17) => blk00000003_sig000000bc,
      C(16) => blk00000003_sig000000bd,
      C(15) => blk00000003_sig000000be,
      C(14) => blk00000003_sig000000bf,
      C(13) => blk00000003_sig000000c0,
      C(12) => blk00000003_sig000000c1,
      C(11) => blk00000003_sig000000c2,
      C(10) => blk00000003_sig000000c3,
      C(9) => blk00000003_sig000000c4,
      C(8) => blk00000003_sig000000c5,
      C(7) => blk00000003_sig000000c6,
      C(6) => blk00000003_sig000000c7,
      C(5) => blk00000003_sig000000c8,
      C(4) => blk00000003_sig000000c9,
      C(3) => blk00000003_sig000000ca,
      C(2) => blk00000003_sig00000082,
      C(1) => blk00000003_sig00000082,
      C(0) => blk00000003_sig00000082,
      CARRYINSEL(2) => blk00000003_sig00000082,
      CARRYINSEL(1) => blk00000003_sig00000082,
      CARRYINSEL(0) => blk00000003_sig00000082,
      OPMODE(6) => blk00000003_sig00000082,
      OPMODE(5) => blk00000003_sig00000088,
      OPMODE(4) => blk00000003_sig00000088,
      OPMODE(3) => blk00000003_sig00000082,
      OPMODE(2) => blk00000003_sig00000082,
      OPMODE(1) => blk00000003_sig00000088,
      OPMODE(0) => blk00000003_sig00000088,
      BCIN(17) => blk00000003_sig00000082,
      BCIN(16) => blk00000003_sig00000082,
      BCIN(15) => blk00000003_sig00000082,
      BCIN(14) => blk00000003_sig00000082,
      BCIN(13) => blk00000003_sig00000082,
      BCIN(12) => blk00000003_sig00000082,
      BCIN(11) => blk00000003_sig00000082,
      BCIN(10) => blk00000003_sig00000082,
      BCIN(9) => blk00000003_sig00000082,
      BCIN(8) => blk00000003_sig00000082,
      BCIN(7) => blk00000003_sig00000082,
      BCIN(6) => blk00000003_sig00000082,
      BCIN(5) => blk00000003_sig00000082,
      BCIN(4) => blk00000003_sig00000082,
      BCIN(3) => blk00000003_sig00000082,
      BCIN(2) => blk00000003_sig00000082,
      BCIN(1) => blk00000003_sig00000082,
      BCIN(0) => blk00000003_sig00000082,
      ALUMODE(3) => blk00000003_sig00000082,
      ALUMODE(2) => blk00000003_sig00000082,
      ALUMODE(1) => blk00000003_sig000000cb,
      ALUMODE(0) => blk00000003_sig000000cb,
      PCOUT(47) => blk00000003_sig000000cc,
      PCOUT(46) => blk00000003_sig000000cd,
      PCOUT(45) => blk00000003_sig000000ce,
      PCOUT(44) => blk00000003_sig000000cf,
      PCOUT(43) => blk00000003_sig000000d0,
      PCOUT(42) => blk00000003_sig000000d1,
      PCOUT(41) => blk00000003_sig000000d2,
      PCOUT(40) => blk00000003_sig000000d3,
      PCOUT(39) => blk00000003_sig000000d4,
      PCOUT(38) => blk00000003_sig000000d5,
      PCOUT(37) => blk00000003_sig000000d6,
      PCOUT(36) => blk00000003_sig000000d7,
      PCOUT(35) => blk00000003_sig000000d8,
      PCOUT(34) => blk00000003_sig000000d9,
      PCOUT(33) => blk00000003_sig000000da,
      PCOUT(32) => blk00000003_sig000000db,
      PCOUT(31) => blk00000003_sig000000dc,
      PCOUT(30) => blk00000003_sig000000dd,
      PCOUT(29) => blk00000003_sig000000de,
      PCOUT(28) => blk00000003_sig000000df,
      PCOUT(27) => blk00000003_sig000000e0,
      PCOUT(26) => blk00000003_sig000000e1,
      PCOUT(25) => blk00000003_sig000000e2,
      PCOUT(24) => blk00000003_sig000000e3,
      PCOUT(23) => blk00000003_sig000000e4,
      PCOUT(22) => blk00000003_sig000000e5,
      PCOUT(21) => blk00000003_sig000000e6,
      PCOUT(20) => blk00000003_sig000000e7,
      PCOUT(19) => blk00000003_sig000000e8,
      PCOUT(18) => blk00000003_sig000000e9,
      PCOUT(17) => blk00000003_sig000000ea,
      PCOUT(16) => blk00000003_sig000000eb,
      PCOUT(15) => blk00000003_sig000000ec,
      PCOUT(14) => blk00000003_sig000000ed,
      PCOUT(13) => blk00000003_sig000000ee,
      PCOUT(12) => blk00000003_sig000000ef,
      PCOUT(11) => blk00000003_sig000000f0,
      PCOUT(10) => blk00000003_sig000000f1,
      PCOUT(9) => blk00000003_sig000000f2,
      PCOUT(8) => blk00000003_sig000000f3,
      PCOUT(7) => blk00000003_sig000000f4,
      PCOUT(6) => blk00000003_sig000000f5,
      PCOUT(5) => blk00000003_sig000000f6,
      PCOUT(4) => blk00000003_sig000000f7,
      PCOUT(3) => blk00000003_sig000000f8,
      PCOUT(2) => blk00000003_sig000000f9,
      PCOUT(1) => blk00000003_sig000000fa,
      PCOUT(0) => blk00000003_sig000000fb,
      P(47) => NLW_blk00000003_blk00000006_P_47_UNCONNECTED,
      P(46) => NLW_blk00000003_blk00000006_P_46_UNCONNECTED,
      P(45) => NLW_blk00000003_blk00000006_P_45_UNCONNECTED,
      P(44) => NLW_blk00000003_blk00000006_P_44_UNCONNECTED,
      P(43) => NLW_blk00000003_blk00000006_P_43_UNCONNECTED,
      P(42) => NLW_blk00000003_blk00000006_P_42_UNCONNECTED,
      P(41) => NLW_blk00000003_blk00000006_P_41_UNCONNECTED,
      P(40) => NLW_blk00000003_blk00000006_P_40_UNCONNECTED,
      P(39) => NLW_blk00000003_blk00000006_P_39_UNCONNECTED,
      P(38) => NLW_blk00000003_blk00000006_P_38_UNCONNECTED,
      P(37) => NLW_blk00000003_blk00000006_P_37_UNCONNECTED,
      P(36) => NLW_blk00000003_blk00000006_P_36_UNCONNECTED,
      P(35) => NLW_blk00000003_blk00000006_P_35_UNCONNECTED,
      P(34) => NLW_blk00000003_blk00000006_P_34_UNCONNECTED,
      P(33) => blk00000003_sig000000fc,
      P(32) => blk00000003_sig000000fd,
      P(31) => blk00000003_sig000000fe,
      P(30) => blk00000003_sig000000ff,
      P(29) => blk00000003_sig00000100,
      P(28) => blk00000003_sig00000101,
      P(27) => blk00000003_sig00000102,
      P(26) => blk00000003_sig00000103,
      P(25) => blk00000003_sig00000104,
      P(24) => blk00000003_sig00000105,
      P(23) => blk00000003_sig00000106,
      P(22) => blk00000003_sig00000107,
      P(21) => blk00000003_sig00000108,
      P(20) => blk00000003_sig00000109,
      P(19) => blk00000003_sig0000010a,
      P(18) => blk00000003_sig0000010b,
      P(17) => blk00000003_sig0000010c,
      P(16) => blk00000003_sig0000010d,
      P(15) => blk00000003_sig0000010e,
      P(14) => blk00000003_sig0000010f,
      P(13) => blk00000003_sig00000110,
      P(12) => blk00000003_sig00000111,
      P(11) => blk00000003_sig00000112,
      P(10) => blk00000003_sig00000113,
      P(9) => blk00000003_sig00000114,
      P(8) => blk00000003_sig00000115,
      P(7) => blk00000003_sig00000116,
      P(6) => blk00000003_sig00000117,
      P(5) => blk00000003_sig00000118,
      P(4) => blk00000003_sig00000119,
      P(3) => blk00000003_sig0000011a,
      P(2) => blk00000003_sig0000011b,
      P(1) => blk00000003_sig0000011c,
      P(0) => blk00000003_sig0000011d,
      BCOUT(17) => NLW_blk00000003_blk00000006_BCOUT_17_UNCONNECTED,
      BCOUT(16) => NLW_blk00000003_blk00000006_BCOUT_16_UNCONNECTED,
      BCOUT(15) => NLW_blk00000003_blk00000006_BCOUT_15_UNCONNECTED,
      BCOUT(14) => NLW_blk00000003_blk00000006_BCOUT_14_UNCONNECTED,
      BCOUT(13) => NLW_blk00000003_blk00000006_BCOUT_13_UNCONNECTED,
      BCOUT(12) => NLW_blk00000003_blk00000006_BCOUT_12_UNCONNECTED,
      BCOUT(11) => NLW_blk00000003_blk00000006_BCOUT_11_UNCONNECTED,
      BCOUT(10) => NLW_blk00000003_blk00000006_BCOUT_10_UNCONNECTED,
      BCOUT(9) => NLW_blk00000003_blk00000006_BCOUT_9_UNCONNECTED,
      BCOUT(8) => NLW_blk00000003_blk00000006_BCOUT_8_UNCONNECTED,
      BCOUT(7) => NLW_blk00000003_blk00000006_BCOUT_7_UNCONNECTED,
      BCOUT(6) => NLW_blk00000003_blk00000006_BCOUT_6_UNCONNECTED,
      BCOUT(5) => NLW_blk00000003_blk00000006_BCOUT_5_UNCONNECTED,
      BCOUT(4) => NLW_blk00000003_blk00000006_BCOUT_4_UNCONNECTED,
      BCOUT(3) => NLW_blk00000003_blk00000006_BCOUT_3_UNCONNECTED,
      BCOUT(2) => NLW_blk00000003_blk00000006_BCOUT_2_UNCONNECTED,
      BCOUT(1) => NLW_blk00000003_blk00000006_BCOUT_1_UNCONNECTED,
      BCOUT(0) => NLW_blk00000003_blk00000006_BCOUT_0_UNCONNECTED,
      ACIN(29) => blk00000003_sig00000082,
      ACIN(28) => blk00000003_sig00000082,
      ACIN(27) => blk00000003_sig00000082,
      ACIN(26) => blk00000003_sig00000082,
      ACIN(25) => blk00000003_sig00000082,
      ACIN(24) => blk00000003_sig00000082,
      ACIN(23) => blk00000003_sig00000082,
      ACIN(22) => blk00000003_sig00000082,
      ACIN(21) => blk00000003_sig00000082,
      ACIN(20) => blk00000003_sig00000082,
      ACIN(19) => blk00000003_sig00000082,
      ACIN(18) => blk00000003_sig00000082,
      ACIN(17) => blk00000003_sig00000082,
      ACIN(16) => blk00000003_sig00000082,
      ACIN(15) => blk00000003_sig00000082,
      ACIN(14) => blk00000003_sig00000082,
      ACIN(13) => blk00000003_sig00000082,
      ACIN(12) => blk00000003_sig00000082,
      ACIN(11) => blk00000003_sig00000082,
      ACIN(10) => blk00000003_sig00000082,
      ACIN(9) => blk00000003_sig00000082,
      ACIN(8) => blk00000003_sig00000082,
      ACIN(7) => blk00000003_sig00000082,
      ACIN(6) => blk00000003_sig00000082,
      ACIN(5) => blk00000003_sig00000082,
      ACIN(4) => blk00000003_sig00000082,
      ACIN(3) => blk00000003_sig00000082,
      ACIN(2) => blk00000003_sig00000082,
      ACIN(1) => blk00000003_sig00000082,
      ACIN(0) => blk00000003_sig00000082,
      ACOUT(29) => NLW_blk00000003_blk00000006_ACOUT_29_UNCONNECTED,
      ACOUT(28) => NLW_blk00000003_blk00000006_ACOUT_28_UNCONNECTED,
      ACOUT(27) => NLW_blk00000003_blk00000006_ACOUT_27_UNCONNECTED,
      ACOUT(26) => NLW_blk00000003_blk00000006_ACOUT_26_UNCONNECTED,
      ACOUT(25) => NLW_blk00000003_blk00000006_ACOUT_25_UNCONNECTED,
      ACOUT(24) => NLW_blk00000003_blk00000006_ACOUT_24_UNCONNECTED,
      ACOUT(23) => NLW_blk00000003_blk00000006_ACOUT_23_UNCONNECTED,
      ACOUT(22) => NLW_blk00000003_blk00000006_ACOUT_22_UNCONNECTED,
      ACOUT(21) => NLW_blk00000003_blk00000006_ACOUT_21_UNCONNECTED,
      ACOUT(20) => NLW_blk00000003_blk00000006_ACOUT_20_UNCONNECTED,
      ACOUT(19) => NLW_blk00000003_blk00000006_ACOUT_19_UNCONNECTED,
      ACOUT(18) => NLW_blk00000003_blk00000006_ACOUT_18_UNCONNECTED,
      ACOUT(17) => NLW_blk00000003_blk00000006_ACOUT_17_UNCONNECTED,
      ACOUT(16) => NLW_blk00000003_blk00000006_ACOUT_16_UNCONNECTED,
      ACOUT(15) => NLW_blk00000003_blk00000006_ACOUT_15_UNCONNECTED,
      ACOUT(14) => NLW_blk00000003_blk00000006_ACOUT_14_UNCONNECTED,
      ACOUT(13) => NLW_blk00000003_blk00000006_ACOUT_13_UNCONNECTED,
      ACOUT(12) => NLW_blk00000003_blk00000006_ACOUT_12_UNCONNECTED,
      ACOUT(11) => NLW_blk00000003_blk00000006_ACOUT_11_UNCONNECTED,
      ACOUT(10) => NLW_blk00000003_blk00000006_ACOUT_10_UNCONNECTED,
      ACOUT(9) => NLW_blk00000003_blk00000006_ACOUT_9_UNCONNECTED,
      ACOUT(8) => NLW_blk00000003_blk00000006_ACOUT_8_UNCONNECTED,
      ACOUT(7) => NLW_blk00000003_blk00000006_ACOUT_7_UNCONNECTED,
      ACOUT(6) => NLW_blk00000003_blk00000006_ACOUT_6_UNCONNECTED,
      ACOUT(5) => NLW_blk00000003_blk00000006_ACOUT_5_UNCONNECTED,
      ACOUT(4) => NLW_blk00000003_blk00000006_ACOUT_4_UNCONNECTED,
      ACOUT(3) => NLW_blk00000003_blk00000006_ACOUT_3_UNCONNECTED,
      ACOUT(2) => NLW_blk00000003_blk00000006_ACOUT_2_UNCONNECTED,
      ACOUT(1) => NLW_blk00000003_blk00000006_ACOUT_1_UNCONNECTED,
      ACOUT(0) => NLW_blk00000003_blk00000006_ACOUT_0_UNCONNECTED,
      CARRYOUT(3) => NLW_blk00000003_blk00000006_CARRYOUT_3_UNCONNECTED,
      CARRYOUT(2) => NLW_blk00000003_blk00000006_CARRYOUT_2_UNCONNECTED,
      CARRYOUT(1) => NLW_blk00000003_blk00000006_CARRYOUT_1_UNCONNECTED,
      CARRYOUT(0) => NLW_blk00000003_blk00000006_CARRYOUT_0_UNCONNECTED
    );
  blk00000003_blk00000005 : VCC
    port map (
      P => blk00000003_sig00000088
    );
  blk00000003_blk00000004 : GND
    port map (
      G => blk00000003_sig00000082
    );
  blk00000003_blk000001d6_blk000001d7_blk00000217 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk000001d6_blk000001d7_sig00000974,
      Q => blk00000003_sig000004bd
    );
  blk00000003_blk000001d6_blk000001d7_blk00000216 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk000001d6_blk000001d7_sig00000955,
      A1 => blk00000003_blk000001d6_blk000001d7_sig00000954,
      A2 => blk00000003_blk000001d6_blk000001d7_sig00000954,
      A3 => blk00000003_blk000001d6_blk000001d7_sig00000954,
      CE => ce,
      CLK => clk,
      D => xn_re(17),
      Q => blk00000003_blk000001d6_blk000001d7_sig00000974,
      Q15 => NLW_blk00000003_blk000001d6_blk000001d7_blk00000216_Q15_UNCONNECTED
    );
  blk00000003_blk000001d6_blk000001d7_blk00000215 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk000001d6_blk000001d7_sig00000973,
      Q => blk00000003_sig000004be
    );
  blk00000003_blk000001d6_blk000001d7_blk00000214 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk000001d6_blk000001d7_sig00000955,
      A1 => blk00000003_blk000001d6_blk000001d7_sig00000954,
      A2 => blk00000003_blk000001d6_blk000001d7_sig00000954,
      A3 => blk00000003_blk000001d6_blk000001d7_sig00000954,
      CE => ce,
      CLK => clk,
      D => xn_re(17),
      Q => blk00000003_blk000001d6_blk000001d7_sig00000973,
      Q15 => NLW_blk00000003_blk000001d6_blk000001d7_blk00000214_Q15_UNCONNECTED
    );
  blk00000003_blk000001d6_blk000001d7_blk00000213 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk000001d6_blk000001d7_sig00000972,
      Q => blk00000003_sig000004bc
    );
  blk00000003_blk000001d6_blk000001d7_blk00000212 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk000001d6_blk000001d7_sig00000955,
      A1 => blk00000003_blk000001d6_blk000001d7_sig00000954,
      A2 => blk00000003_blk000001d6_blk000001d7_sig00000954,
      A3 => blk00000003_blk000001d6_blk000001d7_sig00000954,
      CE => ce,
      CLK => clk,
      D => xn_re(17),
      Q => blk00000003_blk000001d6_blk000001d7_sig00000972,
      Q15 => NLW_blk00000003_blk000001d6_blk000001d7_blk00000212_Q15_UNCONNECTED
    );
  blk00000003_blk000001d6_blk000001d7_blk00000211 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk000001d6_blk000001d7_sig00000971,
      Q => blk00000003_sig000004bf
    );
  blk00000003_blk000001d6_blk000001d7_blk00000210 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk000001d6_blk000001d7_sig00000955,
      A1 => blk00000003_blk000001d6_blk000001d7_sig00000954,
      A2 => blk00000003_blk000001d6_blk000001d7_sig00000954,
      A3 => blk00000003_blk000001d6_blk000001d7_sig00000954,
      CE => ce,
      CLK => clk,
      D => xn_re(17),
      Q => blk00000003_blk000001d6_blk000001d7_sig00000971,
      Q15 => NLW_blk00000003_blk000001d6_blk000001d7_blk00000210_Q15_UNCONNECTED
    );
  blk00000003_blk000001d6_blk000001d7_blk0000020f : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk000001d6_blk000001d7_sig00000970,
      Q => blk00000003_sig000004c0
    );
  blk00000003_blk000001d6_blk000001d7_blk0000020e : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk000001d6_blk000001d7_sig00000955,
      A1 => blk00000003_blk000001d6_blk000001d7_sig00000954,
      A2 => blk00000003_blk000001d6_blk000001d7_sig00000954,
      A3 => blk00000003_blk000001d6_blk000001d7_sig00000954,
      CE => ce,
      CLK => clk,
      D => xn_re(17),
      Q => blk00000003_blk000001d6_blk000001d7_sig00000970,
      Q15 => NLW_blk00000003_blk000001d6_blk000001d7_blk0000020e_Q15_UNCONNECTED
    );
  blk00000003_blk000001d6_blk000001d7_blk0000020d : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk000001d6_blk000001d7_sig0000096f,
      Q => blk00000003_sig000004c1
    );
  blk00000003_blk000001d6_blk000001d7_blk0000020c : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk000001d6_blk000001d7_sig00000955,
      A1 => blk00000003_blk000001d6_blk000001d7_sig00000954,
      A2 => blk00000003_blk000001d6_blk000001d7_sig00000954,
      A3 => blk00000003_blk000001d6_blk000001d7_sig00000954,
      CE => ce,
      CLK => clk,
      D => xn_re(17),
      Q => blk00000003_blk000001d6_blk000001d7_sig0000096f,
      Q15 => NLW_blk00000003_blk000001d6_blk000001d7_blk0000020c_Q15_UNCONNECTED
    );
  blk00000003_blk000001d6_blk000001d7_blk0000020b : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk000001d6_blk000001d7_sig0000096e,
      Q => blk00000003_sig000004c2
    );
  blk00000003_blk000001d6_blk000001d7_blk0000020a : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk000001d6_blk000001d7_sig00000955,
      A1 => blk00000003_blk000001d6_blk000001d7_sig00000954,
      A2 => blk00000003_blk000001d6_blk000001d7_sig00000954,
      A3 => blk00000003_blk000001d6_blk000001d7_sig00000954,
      CE => ce,
      CLK => clk,
      D => xn_re(17),
      Q => blk00000003_blk000001d6_blk000001d7_sig0000096e,
      Q15 => NLW_blk00000003_blk000001d6_blk000001d7_blk0000020a_Q15_UNCONNECTED
    );
  blk00000003_blk000001d6_blk000001d7_blk00000209 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk000001d6_blk000001d7_sig0000096d,
      Q => blk00000003_sig000004c3
    );
  blk00000003_blk000001d6_blk000001d7_blk00000208 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk000001d6_blk000001d7_sig00000955,
      A1 => blk00000003_blk000001d6_blk000001d7_sig00000954,
      A2 => blk00000003_blk000001d6_blk000001d7_sig00000954,
      A3 => blk00000003_blk000001d6_blk000001d7_sig00000954,
      CE => ce,
      CLK => clk,
      D => xn_re(17),
      Q => blk00000003_blk000001d6_blk000001d7_sig0000096d,
      Q15 => NLW_blk00000003_blk000001d6_blk000001d7_blk00000208_Q15_UNCONNECTED
    );
  blk00000003_blk000001d6_blk000001d7_blk00000207 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk000001d6_blk000001d7_sig0000096c,
      Q => blk00000003_sig000004c4
    );
  blk00000003_blk000001d6_blk000001d7_blk00000206 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk000001d6_blk000001d7_sig00000955,
      A1 => blk00000003_blk000001d6_blk000001d7_sig00000954,
      A2 => blk00000003_blk000001d6_blk000001d7_sig00000954,
      A3 => blk00000003_blk000001d6_blk000001d7_sig00000954,
      CE => ce,
      CLK => clk,
      D => xn_re(17),
      Q => blk00000003_blk000001d6_blk000001d7_sig0000096c,
      Q15 => NLW_blk00000003_blk000001d6_blk000001d7_blk00000206_Q15_UNCONNECTED
    );
  blk00000003_blk000001d6_blk000001d7_blk00000205 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk000001d6_blk000001d7_sig0000096b,
      Q => blk00000003_sig000004c5
    );
  blk00000003_blk000001d6_blk000001d7_blk00000204 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk000001d6_blk000001d7_sig00000955,
      A1 => blk00000003_blk000001d6_blk000001d7_sig00000954,
      A2 => blk00000003_blk000001d6_blk000001d7_sig00000954,
      A3 => blk00000003_blk000001d6_blk000001d7_sig00000954,
      CE => ce,
      CLK => clk,
      D => xn_re(17),
      Q => blk00000003_blk000001d6_blk000001d7_sig0000096b,
      Q15 => NLW_blk00000003_blk000001d6_blk000001d7_blk00000204_Q15_UNCONNECTED
    );
  blk00000003_blk000001d6_blk000001d7_blk00000203 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk000001d6_blk000001d7_sig0000096a,
      Q => blk00000003_sig000004c6
    );
  blk00000003_blk000001d6_blk000001d7_blk00000202 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk000001d6_blk000001d7_sig00000955,
      A1 => blk00000003_blk000001d6_blk000001d7_sig00000954,
      A2 => blk00000003_blk000001d6_blk000001d7_sig00000954,
      A3 => blk00000003_blk000001d6_blk000001d7_sig00000954,
      CE => ce,
      CLK => clk,
      D => xn_re(17),
      Q => blk00000003_blk000001d6_blk000001d7_sig0000096a,
      Q15 => NLW_blk00000003_blk000001d6_blk000001d7_blk00000202_Q15_UNCONNECTED
    );
  blk00000003_blk000001d6_blk000001d7_blk00000201 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk000001d6_blk000001d7_sig00000969,
      Q => blk00000003_sig000004c7
    );
  blk00000003_blk000001d6_blk000001d7_blk00000200 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk000001d6_blk000001d7_sig00000955,
      A1 => blk00000003_blk000001d6_blk000001d7_sig00000954,
      A2 => blk00000003_blk000001d6_blk000001d7_sig00000954,
      A3 => blk00000003_blk000001d6_blk000001d7_sig00000954,
      CE => ce,
      CLK => clk,
      D => xn_re(17),
      Q => blk00000003_blk000001d6_blk000001d7_sig00000969,
      Q15 => NLW_blk00000003_blk000001d6_blk000001d7_blk00000200_Q15_UNCONNECTED
    );
  blk00000003_blk000001d6_blk000001d7_blk000001ff : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk000001d6_blk000001d7_sig00000968,
      Q => blk00000003_sig000004c8
    );
  blk00000003_blk000001d6_blk000001d7_blk000001fe : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk000001d6_blk000001d7_sig00000955,
      A1 => blk00000003_blk000001d6_blk000001d7_sig00000954,
      A2 => blk00000003_blk000001d6_blk000001d7_sig00000954,
      A3 => blk00000003_blk000001d6_blk000001d7_sig00000954,
      CE => ce,
      CLK => clk,
      D => xn_re(17),
      Q => blk00000003_blk000001d6_blk000001d7_sig00000968,
      Q15 => NLW_blk00000003_blk000001d6_blk000001d7_blk000001fe_Q15_UNCONNECTED
    );
  blk00000003_blk000001d6_blk000001d7_blk000001fd : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk000001d6_blk000001d7_sig00000967,
      Q => blk00000003_sig000004c9
    );
  blk00000003_blk000001d6_blk000001d7_blk000001fc : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk000001d6_blk000001d7_sig00000955,
      A1 => blk00000003_blk000001d6_blk000001d7_sig00000954,
      A2 => blk00000003_blk000001d6_blk000001d7_sig00000954,
      A3 => blk00000003_blk000001d6_blk000001d7_sig00000954,
      CE => ce,
      CLK => clk,
      D => xn_re(17),
      Q => blk00000003_blk000001d6_blk000001d7_sig00000967,
      Q15 => NLW_blk00000003_blk000001d6_blk000001d7_blk000001fc_Q15_UNCONNECTED
    );
  blk00000003_blk000001d6_blk000001d7_blk000001fb : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk000001d6_blk000001d7_sig00000966,
      Q => blk00000003_sig000004ca
    );
  blk00000003_blk000001d6_blk000001d7_blk000001fa : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk000001d6_blk000001d7_sig00000955,
      A1 => blk00000003_blk000001d6_blk000001d7_sig00000954,
      A2 => blk00000003_blk000001d6_blk000001d7_sig00000954,
      A3 => blk00000003_blk000001d6_blk000001d7_sig00000954,
      CE => ce,
      CLK => clk,
      D => xn_re(16),
      Q => blk00000003_blk000001d6_blk000001d7_sig00000966,
      Q15 => NLW_blk00000003_blk000001d6_blk000001d7_blk000001fa_Q15_UNCONNECTED
    );
  blk00000003_blk000001d6_blk000001d7_blk000001f9 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk000001d6_blk000001d7_sig00000965,
      Q => blk00000003_sig000004cb
    );
  blk00000003_blk000001d6_blk000001d7_blk000001f8 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk000001d6_blk000001d7_sig00000955,
      A1 => blk00000003_blk000001d6_blk000001d7_sig00000954,
      A2 => blk00000003_blk000001d6_blk000001d7_sig00000954,
      A3 => blk00000003_blk000001d6_blk000001d7_sig00000954,
      CE => ce,
      CLK => clk,
      D => xn_re(15),
      Q => blk00000003_blk000001d6_blk000001d7_sig00000965,
      Q15 => NLW_blk00000003_blk000001d6_blk000001d7_blk000001f8_Q15_UNCONNECTED
    );
  blk00000003_blk000001d6_blk000001d7_blk000001f7 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk000001d6_blk000001d7_sig00000964,
      Q => blk00000003_sig000004cc
    );
  blk00000003_blk000001d6_blk000001d7_blk000001f6 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk000001d6_blk000001d7_sig00000955,
      A1 => blk00000003_blk000001d6_blk000001d7_sig00000954,
      A2 => blk00000003_blk000001d6_blk000001d7_sig00000954,
      A3 => blk00000003_blk000001d6_blk000001d7_sig00000954,
      CE => ce,
      CLK => clk,
      D => xn_re(14),
      Q => blk00000003_blk000001d6_blk000001d7_sig00000964,
      Q15 => NLW_blk00000003_blk000001d6_blk000001d7_blk000001f6_Q15_UNCONNECTED
    );
  blk00000003_blk000001d6_blk000001d7_blk000001f5 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk000001d6_blk000001d7_sig00000963,
      Q => blk00000003_sig000004cd
    );
  blk00000003_blk000001d6_blk000001d7_blk000001f4 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk000001d6_blk000001d7_sig00000955,
      A1 => blk00000003_blk000001d6_blk000001d7_sig00000954,
      A2 => blk00000003_blk000001d6_blk000001d7_sig00000954,
      A3 => blk00000003_blk000001d6_blk000001d7_sig00000954,
      CE => ce,
      CLK => clk,
      D => xn_re(13),
      Q => blk00000003_blk000001d6_blk000001d7_sig00000963,
      Q15 => NLW_blk00000003_blk000001d6_blk000001d7_blk000001f4_Q15_UNCONNECTED
    );
  blk00000003_blk000001d6_blk000001d7_blk000001f3 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk000001d6_blk000001d7_sig00000962,
      Q => blk00000003_sig000004ce
    );
  blk00000003_blk000001d6_blk000001d7_blk000001f2 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk000001d6_blk000001d7_sig00000955,
      A1 => blk00000003_blk000001d6_blk000001d7_sig00000954,
      A2 => blk00000003_blk000001d6_blk000001d7_sig00000954,
      A3 => blk00000003_blk000001d6_blk000001d7_sig00000954,
      CE => ce,
      CLK => clk,
      D => xn_re(12),
      Q => blk00000003_blk000001d6_blk000001d7_sig00000962,
      Q15 => NLW_blk00000003_blk000001d6_blk000001d7_blk000001f2_Q15_UNCONNECTED
    );
  blk00000003_blk000001d6_blk000001d7_blk000001f1 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk000001d6_blk000001d7_sig00000961,
      Q => blk00000003_sig000004cf
    );
  blk00000003_blk000001d6_blk000001d7_blk000001f0 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk000001d6_blk000001d7_sig00000955,
      A1 => blk00000003_blk000001d6_blk000001d7_sig00000954,
      A2 => blk00000003_blk000001d6_blk000001d7_sig00000954,
      A3 => blk00000003_blk000001d6_blk000001d7_sig00000954,
      CE => ce,
      CLK => clk,
      D => xn_re(11),
      Q => blk00000003_blk000001d6_blk000001d7_sig00000961,
      Q15 => NLW_blk00000003_blk000001d6_blk000001d7_blk000001f0_Q15_UNCONNECTED
    );
  blk00000003_blk000001d6_blk000001d7_blk000001ef : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk000001d6_blk000001d7_sig00000960,
      Q => blk00000003_sig000004d0
    );
  blk00000003_blk000001d6_blk000001d7_blk000001ee : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk000001d6_blk000001d7_sig00000955,
      A1 => blk00000003_blk000001d6_blk000001d7_sig00000954,
      A2 => blk00000003_blk000001d6_blk000001d7_sig00000954,
      A3 => blk00000003_blk000001d6_blk000001d7_sig00000954,
      CE => ce,
      CLK => clk,
      D => xn_re(10),
      Q => blk00000003_blk000001d6_blk000001d7_sig00000960,
      Q15 => NLW_blk00000003_blk000001d6_blk000001d7_blk000001ee_Q15_UNCONNECTED
    );
  blk00000003_blk000001d6_blk000001d7_blk000001ed : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk000001d6_blk000001d7_sig0000095f,
      Q => blk00000003_sig000004d1
    );
  blk00000003_blk000001d6_blk000001d7_blk000001ec : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk000001d6_blk000001d7_sig00000955,
      A1 => blk00000003_blk000001d6_blk000001d7_sig00000954,
      A2 => blk00000003_blk000001d6_blk000001d7_sig00000954,
      A3 => blk00000003_blk000001d6_blk000001d7_sig00000954,
      CE => ce,
      CLK => clk,
      D => xn_re(9),
      Q => blk00000003_blk000001d6_blk000001d7_sig0000095f,
      Q15 => NLW_blk00000003_blk000001d6_blk000001d7_blk000001ec_Q15_UNCONNECTED
    );
  blk00000003_blk000001d6_blk000001d7_blk000001eb : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk000001d6_blk000001d7_sig0000095e,
      Q => blk00000003_sig000004d2
    );
  blk00000003_blk000001d6_blk000001d7_blk000001ea : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk000001d6_blk000001d7_sig00000955,
      A1 => blk00000003_blk000001d6_blk000001d7_sig00000954,
      A2 => blk00000003_blk000001d6_blk000001d7_sig00000954,
      A3 => blk00000003_blk000001d6_blk000001d7_sig00000954,
      CE => ce,
      CLK => clk,
      D => xn_re(8),
      Q => blk00000003_blk000001d6_blk000001d7_sig0000095e,
      Q15 => NLW_blk00000003_blk000001d6_blk000001d7_blk000001ea_Q15_UNCONNECTED
    );
  blk00000003_blk000001d6_blk000001d7_blk000001e9 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk000001d6_blk000001d7_sig0000095d,
      Q => blk00000003_sig000004d3
    );
  blk00000003_blk000001d6_blk000001d7_blk000001e8 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk000001d6_blk000001d7_sig00000955,
      A1 => blk00000003_blk000001d6_blk000001d7_sig00000954,
      A2 => blk00000003_blk000001d6_blk000001d7_sig00000954,
      A3 => blk00000003_blk000001d6_blk000001d7_sig00000954,
      CE => ce,
      CLK => clk,
      D => xn_re(7),
      Q => blk00000003_blk000001d6_blk000001d7_sig0000095d,
      Q15 => NLW_blk00000003_blk000001d6_blk000001d7_blk000001e8_Q15_UNCONNECTED
    );
  blk00000003_blk000001d6_blk000001d7_blk000001e7 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk000001d6_blk000001d7_sig0000095c,
      Q => blk00000003_sig000004d4
    );
  blk00000003_blk000001d6_blk000001d7_blk000001e6 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk000001d6_blk000001d7_sig00000955,
      A1 => blk00000003_blk000001d6_blk000001d7_sig00000954,
      A2 => blk00000003_blk000001d6_blk000001d7_sig00000954,
      A3 => blk00000003_blk000001d6_blk000001d7_sig00000954,
      CE => ce,
      CLK => clk,
      D => xn_re(6),
      Q => blk00000003_blk000001d6_blk000001d7_sig0000095c,
      Q15 => NLW_blk00000003_blk000001d6_blk000001d7_blk000001e6_Q15_UNCONNECTED
    );
  blk00000003_blk000001d6_blk000001d7_blk000001e5 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk000001d6_blk000001d7_sig0000095b,
      Q => blk00000003_sig000004d5
    );
  blk00000003_blk000001d6_blk000001d7_blk000001e4 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk000001d6_blk000001d7_sig00000955,
      A1 => blk00000003_blk000001d6_blk000001d7_sig00000954,
      A2 => blk00000003_blk000001d6_blk000001d7_sig00000954,
      A3 => blk00000003_blk000001d6_blk000001d7_sig00000954,
      CE => ce,
      CLK => clk,
      D => xn_re(5),
      Q => blk00000003_blk000001d6_blk000001d7_sig0000095b,
      Q15 => NLW_blk00000003_blk000001d6_blk000001d7_blk000001e4_Q15_UNCONNECTED
    );
  blk00000003_blk000001d6_blk000001d7_blk000001e3 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk000001d6_blk000001d7_sig0000095a,
      Q => blk00000003_sig000004d6
    );
  blk00000003_blk000001d6_blk000001d7_blk000001e2 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk000001d6_blk000001d7_sig00000955,
      A1 => blk00000003_blk000001d6_blk000001d7_sig00000954,
      A2 => blk00000003_blk000001d6_blk000001d7_sig00000954,
      A3 => blk00000003_blk000001d6_blk000001d7_sig00000954,
      CE => ce,
      CLK => clk,
      D => xn_re(4),
      Q => blk00000003_blk000001d6_blk000001d7_sig0000095a,
      Q15 => NLW_blk00000003_blk000001d6_blk000001d7_blk000001e2_Q15_UNCONNECTED
    );
  blk00000003_blk000001d6_blk000001d7_blk000001e1 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk000001d6_blk000001d7_sig00000959,
      Q => blk00000003_sig000004d7
    );
  blk00000003_blk000001d6_blk000001d7_blk000001e0 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk000001d6_blk000001d7_sig00000955,
      A1 => blk00000003_blk000001d6_blk000001d7_sig00000954,
      A2 => blk00000003_blk000001d6_blk000001d7_sig00000954,
      A3 => blk00000003_blk000001d6_blk000001d7_sig00000954,
      CE => ce,
      CLK => clk,
      D => xn_re(3),
      Q => blk00000003_blk000001d6_blk000001d7_sig00000959,
      Q15 => NLW_blk00000003_blk000001d6_blk000001d7_blk000001e0_Q15_UNCONNECTED
    );
  blk00000003_blk000001d6_blk000001d7_blk000001df : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk000001d6_blk000001d7_sig00000958,
      Q => blk00000003_sig000004d8
    );
  blk00000003_blk000001d6_blk000001d7_blk000001de : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk000001d6_blk000001d7_sig00000955,
      A1 => blk00000003_blk000001d6_blk000001d7_sig00000954,
      A2 => blk00000003_blk000001d6_blk000001d7_sig00000954,
      A3 => blk00000003_blk000001d6_blk000001d7_sig00000954,
      CE => ce,
      CLK => clk,
      D => xn_re(2),
      Q => blk00000003_blk000001d6_blk000001d7_sig00000958,
      Q15 => NLW_blk00000003_blk000001d6_blk000001d7_blk000001de_Q15_UNCONNECTED
    );
  blk00000003_blk000001d6_blk000001d7_blk000001dd : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk000001d6_blk000001d7_sig00000957,
      Q => blk00000003_sig000004d9
    );
  blk00000003_blk000001d6_blk000001d7_blk000001dc : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk000001d6_blk000001d7_sig00000955,
      A1 => blk00000003_blk000001d6_blk000001d7_sig00000954,
      A2 => blk00000003_blk000001d6_blk000001d7_sig00000954,
      A3 => blk00000003_blk000001d6_blk000001d7_sig00000954,
      CE => ce,
      CLK => clk,
      D => xn_re(1),
      Q => blk00000003_blk000001d6_blk000001d7_sig00000957,
      Q15 => NLW_blk00000003_blk000001d6_blk000001d7_blk000001dc_Q15_UNCONNECTED
    );
  blk00000003_blk000001d6_blk000001d7_blk000001db : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk000001d6_blk000001d7_sig00000956,
      Q => blk00000003_sig000004da
    );
  blk00000003_blk000001d6_blk000001d7_blk000001da : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk000001d6_blk000001d7_sig00000955,
      A1 => blk00000003_blk000001d6_blk000001d7_sig00000954,
      A2 => blk00000003_blk000001d6_blk000001d7_sig00000954,
      A3 => blk00000003_blk000001d6_blk000001d7_sig00000954,
      CE => ce,
      CLK => clk,
      D => xn_re(0),
      Q => blk00000003_blk000001d6_blk000001d7_sig00000956,
      Q15 => NLW_blk00000003_blk000001d6_blk000001d7_blk000001da_Q15_UNCONNECTED
    );
  blk00000003_blk000001d6_blk000001d7_blk000001d9 : VCC
    port map (
      P => blk00000003_blk000001d6_blk000001d7_sig00000955
    );
  blk00000003_blk000001d6_blk000001d7_blk000001d8 : GND
    port map (
      G => blk00000003_blk000001d6_blk000001d7_sig00000954
    );
  blk00000003_blk00000218_blk00000219_blk00000259 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk00000218_blk00000219_sig00000a16,
      Q => blk00000003_sig000004dc
    );
  blk00000003_blk00000218_blk00000219_blk00000258 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk00000218_blk00000219_sig000009f7,
      A1 => blk00000003_blk00000218_blk00000219_sig000009f6,
      A2 => blk00000003_blk00000218_blk00000219_sig000009f6,
      A3 => blk00000003_blk00000218_blk00000219_sig000009f6,
      CE => ce,
      CLK => clk,
      D => xn_im(17),
      Q => blk00000003_blk00000218_blk00000219_sig00000a16,
      Q15 => NLW_blk00000003_blk00000218_blk00000219_blk00000258_Q15_UNCONNECTED
    );
  blk00000003_blk00000218_blk00000219_blk00000257 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk00000218_blk00000219_sig00000a15,
      Q => blk00000003_sig000004dd
    );
  blk00000003_blk00000218_blk00000219_blk00000256 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk00000218_blk00000219_sig000009f7,
      A1 => blk00000003_blk00000218_blk00000219_sig000009f6,
      A2 => blk00000003_blk00000218_blk00000219_sig000009f6,
      A3 => blk00000003_blk00000218_blk00000219_sig000009f6,
      CE => ce,
      CLK => clk,
      D => xn_im(17),
      Q => blk00000003_blk00000218_blk00000219_sig00000a15,
      Q15 => NLW_blk00000003_blk00000218_blk00000219_blk00000256_Q15_UNCONNECTED
    );
  blk00000003_blk00000218_blk00000219_blk00000255 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk00000218_blk00000219_sig00000a14,
      Q => blk00000003_sig000004db
    );
  blk00000003_blk00000218_blk00000219_blk00000254 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk00000218_blk00000219_sig000009f7,
      A1 => blk00000003_blk00000218_blk00000219_sig000009f6,
      A2 => blk00000003_blk00000218_blk00000219_sig000009f6,
      A3 => blk00000003_blk00000218_blk00000219_sig000009f6,
      CE => ce,
      CLK => clk,
      D => xn_im(17),
      Q => blk00000003_blk00000218_blk00000219_sig00000a14,
      Q15 => NLW_blk00000003_blk00000218_blk00000219_blk00000254_Q15_UNCONNECTED
    );
  blk00000003_blk00000218_blk00000219_blk00000253 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk00000218_blk00000219_sig00000a13,
      Q => blk00000003_sig000004de
    );
  blk00000003_blk00000218_blk00000219_blk00000252 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk00000218_blk00000219_sig000009f7,
      A1 => blk00000003_blk00000218_blk00000219_sig000009f6,
      A2 => blk00000003_blk00000218_blk00000219_sig000009f6,
      A3 => blk00000003_blk00000218_blk00000219_sig000009f6,
      CE => ce,
      CLK => clk,
      D => xn_im(17),
      Q => blk00000003_blk00000218_blk00000219_sig00000a13,
      Q15 => NLW_blk00000003_blk00000218_blk00000219_blk00000252_Q15_UNCONNECTED
    );
  blk00000003_blk00000218_blk00000219_blk00000251 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk00000218_blk00000219_sig00000a12,
      Q => blk00000003_sig000004df
    );
  blk00000003_blk00000218_blk00000219_blk00000250 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk00000218_blk00000219_sig000009f7,
      A1 => blk00000003_blk00000218_blk00000219_sig000009f6,
      A2 => blk00000003_blk00000218_blk00000219_sig000009f6,
      A3 => blk00000003_blk00000218_blk00000219_sig000009f6,
      CE => ce,
      CLK => clk,
      D => xn_im(17),
      Q => blk00000003_blk00000218_blk00000219_sig00000a12,
      Q15 => NLW_blk00000003_blk00000218_blk00000219_blk00000250_Q15_UNCONNECTED
    );
  blk00000003_blk00000218_blk00000219_blk0000024f : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk00000218_blk00000219_sig00000a11,
      Q => blk00000003_sig000004e0
    );
  blk00000003_blk00000218_blk00000219_blk0000024e : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk00000218_blk00000219_sig000009f7,
      A1 => blk00000003_blk00000218_blk00000219_sig000009f6,
      A2 => blk00000003_blk00000218_blk00000219_sig000009f6,
      A3 => blk00000003_blk00000218_blk00000219_sig000009f6,
      CE => ce,
      CLK => clk,
      D => xn_im(17),
      Q => blk00000003_blk00000218_blk00000219_sig00000a11,
      Q15 => NLW_blk00000003_blk00000218_blk00000219_blk0000024e_Q15_UNCONNECTED
    );
  blk00000003_blk00000218_blk00000219_blk0000024d : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk00000218_blk00000219_sig00000a10,
      Q => blk00000003_sig000004e1
    );
  blk00000003_blk00000218_blk00000219_blk0000024c : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk00000218_blk00000219_sig000009f7,
      A1 => blk00000003_blk00000218_blk00000219_sig000009f6,
      A2 => blk00000003_blk00000218_blk00000219_sig000009f6,
      A3 => blk00000003_blk00000218_blk00000219_sig000009f6,
      CE => ce,
      CLK => clk,
      D => xn_im(17),
      Q => blk00000003_blk00000218_blk00000219_sig00000a10,
      Q15 => NLW_blk00000003_blk00000218_blk00000219_blk0000024c_Q15_UNCONNECTED
    );
  blk00000003_blk00000218_blk00000219_blk0000024b : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk00000218_blk00000219_sig00000a0f,
      Q => blk00000003_sig000004e2
    );
  blk00000003_blk00000218_blk00000219_blk0000024a : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk00000218_blk00000219_sig000009f7,
      A1 => blk00000003_blk00000218_blk00000219_sig000009f6,
      A2 => blk00000003_blk00000218_blk00000219_sig000009f6,
      A3 => blk00000003_blk00000218_blk00000219_sig000009f6,
      CE => ce,
      CLK => clk,
      D => xn_im(17),
      Q => blk00000003_blk00000218_blk00000219_sig00000a0f,
      Q15 => NLW_blk00000003_blk00000218_blk00000219_blk0000024a_Q15_UNCONNECTED
    );
  blk00000003_blk00000218_blk00000219_blk00000249 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk00000218_blk00000219_sig00000a0e,
      Q => blk00000003_sig000004e3
    );
  blk00000003_blk00000218_blk00000219_blk00000248 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk00000218_blk00000219_sig000009f7,
      A1 => blk00000003_blk00000218_blk00000219_sig000009f6,
      A2 => blk00000003_blk00000218_blk00000219_sig000009f6,
      A3 => blk00000003_blk00000218_blk00000219_sig000009f6,
      CE => ce,
      CLK => clk,
      D => xn_im(17),
      Q => blk00000003_blk00000218_blk00000219_sig00000a0e,
      Q15 => NLW_blk00000003_blk00000218_blk00000219_blk00000248_Q15_UNCONNECTED
    );
  blk00000003_blk00000218_blk00000219_blk00000247 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk00000218_blk00000219_sig00000a0d,
      Q => blk00000003_sig000004e4
    );
  blk00000003_blk00000218_blk00000219_blk00000246 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk00000218_blk00000219_sig000009f7,
      A1 => blk00000003_blk00000218_blk00000219_sig000009f6,
      A2 => blk00000003_blk00000218_blk00000219_sig000009f6,
      A3 => blk00000003_blk00000218_blk00000219_sig000009f6,
      CE => ce,
      CLK => clk,
      D => xn_im(17),
      Q => blk00000003_blk00000218_blk00000219_sig00000a0d,
      Q15 => NLW_blk00000003_blk00000218_blk00000219_blk00000246_Q15_UNCONNECTED
    );
  blk00000003_blk00000218_blk00000219_blk00000245 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk00000218_blk00000219_sig00000a0c,
      Q => blk00000003_sig000004e5
    );
  blk00000003_blk00000218_blk00000219_blk00000244 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk00000218_blk00000219_sig000009f7,
      A1 => blk00000003_blk00000218_blk00000219_sig000009f6,
      A2 => blk00000003_blk00000218_blk00000219_sig000009f6,
      A3 => blk00000003_blk00000218_blk00000219_sig000009f6,
      CE => ce,
      CLK => clk,
      D => xn_im(17),
      Q => blk00000003_blk00000218_blk00000219_sig00000a0c,
      Q15 => NLW_blk00000003_blk00000218_blk00000219_blk00000244_Q15_UNCONNECTED
    );
  blk00000003_blk00000218_blk00000219_blk00000243 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk00000218_blk00000219_sig00000a0b,
      Q => blk00000003_sig000004e6
    );
  blk00000003_blk00000218_blk00000219_blk00000242 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk00000218_blk00000219_sig000009f7,
      A1 => blk00000003_blk00000218_blk00000219_sig000009f6,
      A2 => blk00000003_blk00000218_blk00000219_sig000009f6,
      A3 => blk00000003_blk00000218_blk00000219_sig000009f6,
      CE => ce,
      CLK => clk,
      D => xn_im(17),
      Q => blk00000003_blk00000218_blk00000219_sig00000a0b,
      Q15 => NLW_blk00000003_blk00000218_blk00000219_blk00000242_Q15_UNCONNECTED
    );
  blk00000003_blk00000218_blk00000219_blk00000241 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk00000218_blk00000219_sig00000a0a,
      Q => blk00000003_sig000004e7
    );
  blk00000003_blk00000218_blk00000219_blk00000240 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk00000218_blk00000219_sig000009f7,
      A1 => blk00000003_blk00000218_blk00000219_sig000009f6,
      A2 => blk00000003_blk00000218_blk00000219_sig000009f6,
      A3 => blk00000003_blk00000218_blk00000219_sig000009f6,
      CE => ce,
      CLK => clk,
      D => xn_im(17),
      Q => blk00000003_blk00000218_blk00000219_sig00000a0a,
      Q15 => NLW_blk00000003_blk00000218_blk00000219_blk00000240_Q15_UNCONNECTED
    );
  blk00000003_blk00000218_blk00000219_blk0000023f : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk00000218_blk00000219_sig00000a09,
      Q => blk00000003_sig000004e8
    );
  blk00000003_blk00000218_blk00000219_blk0000023e : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk00000218_blk00000219_sig000009f7,
      A1 => blk00000003_blk00000218_blk00000219_sig000009f6,
      A2 => blk00000003_blk00000218_blk00000219_sig000009f6,
      A3 => blk00000003_blk00000218_blk00000219_sig000009f6,
      CE => ce,
      CLK => clk,
      D => xn_im(17),
      Q => blk00000003_blk00000218_blk00000219_sig00000a09,
      Q15 => NLW_blk00000003_blk00000218_blk00000219_blk0000023e_Q15_UNCONNECTED
    );
  blk00000003_blk00000218_blk00000219_blk0000023d : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk00000218_blk00000219_sig00000a08,
      Q => blk00000003_sig000004e9
    );
  blk00000003_blk00000218_blk00000219_blk0000023c : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk00000218_blk00000219_sig000009f7,
      A1 => blk00000003_blk00000218_blk00000219_sig000009f6,
      A2 => blk00000003_blk00000218_blk00000219_sig000009f6,
      A3 => blk00000003_blk00000218_blk00000219_sig000009f6,
      CE => ce,
      CLK => clk,
      D => xn_im(16),
      Q => blk00000003_blk00000218_blk00000219_sig00000a08,
      Q15 => NLW_blk00000003_blk00000218_blk00000219_blk0000023c_Q15_UNCONNECTED
    );
  blk00000003_blk00000218_blk00000219_blk0000023b : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk00000218_blk00000219_sig00000a07,
      Q => blk00000003_sig000004ea
    );
  blk00000003_blk00000218_blk00000219_blk0000023a : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk00000218_blk00000219_sig000009f7,
      A1 => blk00000003_blk00000218_blk00000219_sig000009f6,
      A2 => blk00000003_blk00000218_blk00000219_sig000009f6,
      A3 => blk00000003_blk00000218_blk00000219_sig000009f6,
      CE => ce,
      CLK => clk,
      D => xn_im(15),
      Q => blk00000003_blk00000218_blk00000219_sig00000a07,
      Q15 => NLW_blk00000003_blk00000218_blk00000219_blk0000023a_Q15_UNCONNECTED
    );
  blk00000003_blk00000218_blk00000219_blk00000239 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk00000218_blk00000219_sig00000a06,
      Q => blk00000003_sig000004eb
    );
  blk00000003_blk00000218_blk00000219_blk00000238 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk00000218_blk00000219_sig000009f7,
      A1 => blk00000003_blk00000218_blk00000219_sig000009f6,
      A2 => blk00000003_blk00000218_blk00000219_sig000009f6,
      A3 => blk00000003_blk00000218_blk00000219_sig000009f6,
      CE => ce,
      CLK => clk,
      D => xn_im(14),
      Q => blk00000003_blk00000218_blk00000219_sig00000a06,
      Q15 => NLW_blk00000003_blk00000218_blk00000219_blk00000238_Q15_UNCONNECTED
    );
  blk00000003_blk00000218_blk00000219_blk00000237 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk00000218_blk00000219_sig00000a05,
      Q => blk00000003_sig000004ec
    );
  blk00000003_blk00000218_blk00000219_blk00000236 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk00000218_blk00000219_sig000009f7,
      A1 => blk00000003_blk00000218_blk00000219_sig000009f6,
      A2 => blk00000003_blk00000218_blk00000219_sig000009f6,
      A3 => blk00000003_blk00000218_blk00000219_sig000009f6,
      CE => ce,
      CLK => clk,
      D => xn_im(13),
      Q => blk00000003_blk00000218_blk00000219_sig00000a05,
      Q15 => NLW_blk00000003_blk00000218_blk00000219_blk00000236_Q15_UNCONNECTED
    );
  blk00000003_blk00000218_blk00000219_blk00000235 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk00000218_blk00000219_sig00000a04,
      Q => blk00000003_sig000004ed
    );
  blk00000003_blk00000218_blk00000219_blk00000234 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk00000218_blk00000219_sig000009f7,
      A1 => blk00000003_blk00000218_blk00000219_sig000009f6,
      A2 => blk00000003_blk00000218_blk00000219_sig000009f6,
      A3 => blk00000003_blk00000218_blk00000219_sig000009f6,
      CE => ce,
      CLK => clk,
      D => xn_im(12),
      Q => blk00000003_blk00000218_blk00000219_sig00000a04,
      Q15 => NLW_blk00000003_blk00000218_blk00000219_blk00000234_Q15_UNCONNECTED
    );
  blk00000003_blk00000218_blk00000219_blk00000233 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk00000218_blk00000219_sig00000a03,
      Q => blk00000003_sig000004ee
    );
  blk00000003_blk00000218_blk00000219_blk00000232 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk00000218_blk00000219_sig000009f7,
      A1 => blk00000003_blk00000218_blk00000219_sig000009f6,
      A2 => blk00000003_blk00000218_blk00000219_sig000009f6,
      A3 => blk00000003_blk00000218_blk00000219_sig000009f6,
      CE => ce,
      CLK => clk,
      D => xn_im(11),
      Q => blk00000003_blk00000218_blk00000219_sig00000a03,
      Q15 => NLW_blk00000003_blk00000218_blk00000219_blk00000232_Q15_UNCONNECTED
    );
  blk00000003_blk00000218_blk00000219_blk00000231 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk00000218_blk00000219_sig00000a02,
      Q => blk00000003_sig000004ef
    );
  blk00000003_blk00000218_blk00000219_blk00000230 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk00000218_blk00000219_sig000009f7,
      A1 => blk00000003_blk00000218_blk00000219_sig000009f6,
      A2 => blk00000003_blk00000218_blk00000219_sig000009f6,
      A3 => blk00000003_blk00000218_blk00000219_sig000009f6,
      CE => ce,
      CLK => clk,
      D => xn_im(10),
      Q => blk00000003_blk00000218_blk00000219_sig00000a02,
      Q15 => NLW_blk00000003_blk00000218_blk00000219_blk00000230_Q15_UNCONNECTED
    );
  blk00000003_blk00000218_blk00000219_blk0000022f : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk00000218_blk00000219_sig00000a01,
      Q => blk00000003_sig000004f0
    );
  blk00000003_blk00000218_blk00000219_blk0000022e : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk00000218_blk00000219_sig000009f7,
      A1 => blk00000003_blk00000218_blk00000219_sig000009f6,
      A2 => blk00000003_blk00000218_blk00000219_sig000009f6,
      A3 => blk00000003_blk00000218_blk00000219_sig000009f6,
      CE => ce,
      CLK => clk,
      D => xn_im(9),
      Q => blk00000003_blk00000218_blk00000219_sig00000a01,
      Q15 => NLW_blk00000003_blk00000218_blk00000219_blk0000022e_Q15_UNCONNECTED
    );
  blk00000003_blk00000218_blk00000219_blk0000022d : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk00000218_blk00000219_sig00000a00,
      Q => blk00000003_sig000004f1
    );
  blk00000003_blk00000218_blk00000219_blk0000022c : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk00000218_blk00000219_sig000009f7,
      A1 => blk00000003_blk00000218_blk00000219_sig000009f6,
      A2 => blk00000003_blk00000218_blk00000219_sig000009f6,
      A3 => blk00000003_blk00000218_blk00000219_sig000009f6,
      CE => ce,
      CLK => clk,
      D => xn_im(8),
      Q => blk00000003_blk00000218_blk00000219_sig00000a00,
      Q15 => NLW_blk00000003_blk00000218_blk00000219_blk0000022c_Q15_UNCONNECTED
    );
  blk00000003_blk00000218_blk00000219_blk0000022b : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk00000218_blk00000219_sig000009ff,
      Q => blk00000003_sig000004f2
    );
  blk00000003_blk00000218_blk00000219_blk0000022a : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk00000218_blk00000219_sig000009f7,
      A1 => blk00000003_blk00000218_blk00000219_sig000009f6,
      A2 => blk00000003_blk00000218_blk00000219_sig000009f6,
      A3 => blk00000003_blk00000218_blk00000219_sig000009f6,
      CE => ce,
      CLK => clk,
      D => xn_im(7),
      Q => blk00000003_blk00000218_blk00000219_sig000009ff,
      Q15 => NLW_blk00000003_blk00000218_blk00000219_blk0000022a_Q15_UNCONNECTED
    );
  blk00000003_blk00000218_blk00000219_blk00000229 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk00000218_blk00000219_sig000009fe,
      Q => blk00000003_sig000004f3
    );
  blk00000003_blk00000218_blk00000219_blk00000228 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk00000218_blk00000219_sig000009f7,
      A1 => blk00000003_blk00000218_blk00000219_sig000009f6,
      A2 => blk00000003_blk00000218_blk00000219_sig000009f6,
      A3 => blk00000003_blk00000218_blk00000219_sig000009f6,
      CE => ce,
      CLK => clk,
      D => xn_im(6),
      Q => blk00000003_blk00000218_blk00000219_sig000009fe,
      Q15 => NLW_blk00000003_blk00000218_blk00000219_blk00000228_Q15_UNCONNECTED
    );
  blk00000003_blk00000218_blk00000219_blk00000227 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk00000218_blk00000219_sig000009fd,
      Q => blk00000003_sig000004f4
    );
  blk00000003_blk00000218_blk00000219_blk00000226 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk00000218_blk00000219_sig000009f7,
      A1 => blk00000003_blk00000218_blk00000219_sig000009f6,
      A2 => blk00000003_blk00000218_blk00000219_sig000009f6,
      A3 => blk00000003_blk00000218_blk00000219_sig000009f6,
      CE => ce,
      CLK => clk,
      D => xn_im(5),
      Q => blk00000003_blk00000218_blk00000219_sig000009fd,
      Q15 => NLW_blk00000003_blk00000218_blk00000219_blk00000226_Q15_UNCONNECTED
    );
  blk00000003_blk00000218_blk00000219_blk00000225 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk00000218_blk00000219_sig000009fc,
      Q => blk00000003_sig000004f5
    );
  blk00000003_blk00000218_blk00000219_blk00000224 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk00000218_blk00000219_sig000009f7,
      A1 => blk00000003_blk00000218_blk00000219_sig000009f6,
      A2 => blk00000003_blk00000218_blk00000219_sig000009f6,
      A3 => blk00000003_blk00000218_blk00000219_sig000009f6,
      CE => ce,
      CLK => clk,
      D => xn_im(4),
      Q => blk00000003_blk00000218_blk00000219_sig000009fc,
      Q15 => NLW_blk00000003_blk00000218_blk00000219_blk00000224_Q15_UNCONNECTED
    );
  blk00000003_blk00000218_blk00000219_blk00000223 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk00000218_blk00000219_sig000009fb,
      Q => blk00000003_sig000004f6
    );
  blk00000003_blk00000218_blk00000219_blk00000222 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk00000218_blk00000219_sig000009f7,
      A1 => blk00000003_blk00000218_blk00000219_sig000009f6,
      A2 => blk00000003_blk00000218_blk00000219_sig000009f6,
      A3 => blk00000003_blk00000218_blk00000219_sig000009f6,
      CE => ce,
      CLK => clk,
      D => xn_im(3),
      Q => blk00000003_blk00000218_blk00000219_sig000009fb,
      Q15 => NLW_blk00000003_blk00000218_blk00000219_blk00000222_Q15_UNCONNECTED
    );
  blk00000003_blk00000218_blk00000219_blk00000221 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk00000218_blk00000219_sig000009fa,
      Q => blk00000003_sig000004f7
    );
  blk00000003_blk00000218_blk00000219_blk00000220 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk00000218_blk00000219_sig000009f7,
      A1 => blk00000003_blk00000218_blk00000219_sig000009f6,
      A2 => blk00000003_blk00000218_blk00000219_sig000009f6,
      A3 => blk00000003_blk00000218_blk00000219_sig000009f6,
      CE => ce,
      CLK => clk,
      D => xn_im(2),
      Q => blk00000003_blk00000218_blk00000219_sig000009fa,
      Q15 => NLW_blk00000003_blk00000218_blk00000219_blk00000220_Q15_UNCONNECTED
    );
  blk00000003_blk00000218_blk00000219_blk0000021f : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk00000218_blk00000219_sig000009f9,
      Q => blk00000003_sig000004f8
    );
  blk00000003_blk00000218_blk00000219_blk0000021e : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk00000218_blk00000219_sig000009f7,
      A1 => blk00000003_blk00000218_blk00000219_sig000009f6,
      A2 => blk00000003_blk00000218_blk00000219_sig000009f6,
      A3 => blk00000003_blk00000218_blk00000219_sig000009f6,
      CE => ce,
      CLK => clk,
      D => xn_im(1),
      Q => blk00000003_blk00000218_blk00000219_sig000009f9,
      Q15 => NLW_blk00000003_blk00000218_blk00000219_blk0000021e_Q15_UNCONNECTED
    );
  blk00000003_blk00000218_blk00000219_blk0000021d : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk00000218_blk00000219_sig000009f8,
      Q => blk00000003_sig000004f9
    );
  blk00000003_blk00000218_blk00000219_blk0000021c : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk00000218_blk00000219_sig000009f7,
      A1 => blk00000003_blk00000218_blk00000219_sig000009f6,
      A2 => blk00000003_blk00000218_blk00000219_sig000009f6,
      A3 => blk00000003_blk00000218_blk00000219_sig000009f6,
      CE => ce,
      CLK => clk,
      D => xn_im(0),
      Q => blk00000003_blk00000218_blk00000219_sig000009f8,
      Q15 => NLW_blk00000003_blk00000218_blk00000219_blk0000021c_Q15_UNCONNECTED
    );
  blk00000003_blk00000218_blk00000219_blk0000021b : VCC
    port map (
      P => blk00000003_blk00000218_blk00000219_sig000009f7
    );
  blk00000003_blk00000218_blk00000219_blk0000021a : GND
    port map (
      G => blk00000003_blk00000218_blk00000219_sig000009f6
    );
  blk00000003_blk0000025a_blk000002a0 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk0000025a_sig00000aca,
      Q => blk00000003_blk0000025a_sig00000a93
    );
  blk00000003_blk0000025a_blk0000029f : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk0000025a_sig00000a71,
      A1 => blk00000003_blk0000025a_sig00000a71,
      A2 => blk00000003_blk0000025a_sig00000a71,
      A3 => blk00000003_blk0000025a_sig00000a71,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig00000307,
      Q => blk00000003_blk0000025a_sig00000aca,
      Q15 => NLW_blk00000003_blk0000025a_blk0000029f_Q15_UNCONNECTED
    );
  blk00000003_blk0000025a_blk0000029e : RAMB18
    generic map(
      DOA_REG => 0,
      DOB_REG => 1,
      INITP_00 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INITP_01 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INITP_02 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INITP_03 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INITP_04 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INITP_05 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INITP_06 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INITP_07 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_00 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_01 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_02 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_03 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_04 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_05 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_06 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_07 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_08 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_09 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_0A => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_0B => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_0C => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_0D => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_0E => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_0F => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_10 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_11 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_12 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_13 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_14 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_15 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_16 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_17 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_18 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_19 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_1A => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_1B => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_1C => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_1D => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_1E => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_1F => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_20 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_21 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_22 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_23 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_24 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_25 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_26 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_27 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_28 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_29 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_2A => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_2B => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_2C => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_2D => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_2E => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_2F => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_30 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_31 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_32 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_33 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_34 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_35 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_36 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_37 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_38 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_39 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_3A => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_3B => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_3C => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_3D => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_3E => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_3F => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_A => X"00000",
      INIT_B => X"00000",
      INIT_FILE => "NONE",
      READ_WIDTH_A => 0,
      READ_WIDTH_B => 9,
      SIM_COLLISION_CHECK => "GENERATE_X_ONLY",
      SIM_MODE => "SAFE",
      SRVAL_A => X"00000",
      SRVAL_B => X"00000",
      WRITE_MODE_A => "READ_FIRST",
      WRITE_MODE_B => "READ_FIRST",
      WRITE_WIDTH_A => 9,
      WRITE_WIDTH_B => 0
    )
    port map (
      CLKA => clk,
      CLKB => clk,
      ENA => ce,
      ENB => ce,
      REGCEA => blk00000003_blk0000025a_sig00000a71,
      REGCEB => ce,
      SSRA => blk00000003_blk0000025a_sig00000a71,
      SSRB => blk00000003_blk0000025a_sig00000a71,
      ADDRA(13) => blk00000003_sig00000321,
      ADDRA(12) => blk00000003_sig00000323,
      ADDRA(11) => blk00000003_sig00000325,
      ADDRA(10) => blk00000003_sig00000327,
      ADDRA(9) => blk00000003_sig00000329,
      ADDRA(8) => blk00000003_sig0000032b,
      ADDRA(7) => blk00000003_sig0000032d,
      ADDRA(6) => blk00000003_sig0000032f,
      ADDRA(5) => blk00000003_sig00000331,
      ADDRA(4) => blk00000003_sig00000333,
      ADDRA(3) => blk00000003_sig00000335,
      ADDRA(2) => blk00000003_blk0000025a_sig00000a71,
      ADDRA(1) => blk00000003_blk0000025a_sig00000a71,
      ADDRA(0) => blk00000003_blk0000025a_sig00000a71,
      ADDRB(13) => blk00000003_sig00000309,
      ADDRB(12) => blk00000003_sig0000030b,
      ADDRB(11) => blk00000003_sig0000030d,
      ADDRB(10) => blk00000003_sig0000030f,
      ADDRB(9) => blk00000003_sig00000311,
      ADDRB(8) => blk00000003_sig00000313,
      ADDRB(7) => blk00000003_sig00000315,
      ADDRB(6) => blk00000003_sig00000317,
      ADDRB(5) => blk00000003_sig00000319,
      ADDRB(4) => blk00000003_sig0000031b,
      ADDRB(3) => blk00000003_sig0000031d,
      ADDRB(2) => blk00000003_blk0000025a_sig00000a71,
      ADDRB(1) => blk00000003_blk0000025a_sig00000a71,
      ADDRB(0) => blk00000003_blk0000025a_sig00000a71,
      DIA(15) => blk00000003_blk0000025a_sig00000a71,
      DIA(14) => blk00000003_blk0000025a_sig00000a71,
      DIA(13) => blk00000003_blk0000025a_sig00000a71,
      DIA(12) => blk00000003_blk0000025a_sig00000a71,
      DIA(11) => blk00000003_blk0000025a_sig00000a71,
      DIA(10) => blk00000003_blk0000025a_sig00000a71,
      DIA(9) => blk00000003_blk0000025a_sig00000a71,
      DIA(8) => blk00000003_blk0000025a_sig00000a71,
      DIA(7) => blk00000003_sig000001d0,
      DIA(6) => blk00000003_sig000001d2,
      DIA(5) => blk00000003_sig000001d4,
      DIA(4) => blk00000003_sig000001d6,
      DIA(3) => blk00000003_sig000001da,
      DIA(2) => blk00000003_sig000001dc,
      DIA(1) => blk00000003_sig000001de,
      DIA(0) => blk00000003_sig000001e0,
      DIB(15) => blk00000003_blk0000025a_sig00000a71,
      DIB(14) => blk00000003_blk0000025a_sig00000a71,
      DIB(13) => blk00000003_blk0000025a_sig00000a71,
      DIB(12) => blk00000003_blk0000025a_sig00000a71,
      DIB(11) => blk00000003_blk0000025a_sig00000a71,
      DIB(10) => blk00000003_blk0000025a_sig00000a71,
      DIB(9) => blk00000003_blk0000025a_sig00000a71,
      DIB(8) => blk00000003_blk0000025a_sig00000a71,
      DIB(7) => blk00000003_blk0000025a_sig00000a71,
      DIB(6) => blk00000003_blk0000025a_sig00000a71,
      DIB(5) => blk00000003_blk0000025a_sig00000a71,
      DIB(4) => blk00000003_blk0000025a_sig00000a71,
      DIB(3) => blk00000003_blk0000025a_sig00000a71,
      DIB(2) => blk00000003_blk0000025a_sig00000a71,
      DIB(1) => blk00000003_blk0000025a_sig00000a71,
      DIB(0) => blk00000003_blk0000025a_sig00000a71,
      DIPA(1) => blk00000003_blk0000025a_sig00000a71,
      DIPA(0) => blk00000003_sig000001d8,
      DIPB(1) => blk00000003_blk0000025a_sig00000a71,
      DIPB(0) => blk00000003_blk0000025a_sig00000a71,
      DOA(15) => NLW_blk00000003_blk0000025a_blk0000029e_DOA_15_UNCONNECTED,
      DOA(14) => NLW_blk00000003_blk0000025a_blk0000029e_DOA_14_UNCONNECTED,
      DOA(13) => NLW_blk00000003_blk0000025a_blk0000029e_DOA_13_UNCONNECTED,
      DOA(12) => NLW_blk00000003_blk0000025a_blk0000029e_DOA_12_UNCONNECTED,
      DOA(11) => NLW_blk00000003_blk0000025a_blk0000029e_DOA_11_UNCONNECTED,
      DOA(10) => NLW_blk00000003_blk0000025a_blk0000029e_DOA_10_UNCONNECTED,
      DOA(9) => NLW_blk00000003_blk0000025a_blk0000029e_DOA_9_UNCONNECTED,
      DOA(8) => NLW_blk00000003_blk0000025a_blk0000029e_DOA_8_UNCONNECTED,
      DOA(7) => NLW_blk00000003_blk0000025a_blk0000029e_DOA_7_UNCONNECTED,
      DOA(6) => NLW_blk00000003_blk0000025a_blk0000029e_DOA_6_UNCONNECTED,
      DOA(5) => NLW_blk00000003_blk0000025a_blk0000029e_DOA_5_UNCONNECTED,
      DOA(4) => NLW_blk00000003_blk0000025a_blk0000029e_DOA_4_UNCONNECTED,
      DOA(3) => NLW_blk00000003_blk0000025a_blk0000029e_DOA_3_UNCONNECTED,
      DOA(2) => NLW_blk00000003_blk0000025a_blk0000029e_DOA_2_UNCONNECTED,
      DOA(1) => NLW_blk00000003_blk0000025a_blk0000029e_DOA_1_UNCONNECTED,
      DOA(0) => NLW_blk00000003_blk0000025a_blk0000029e_DOA_0_UNCONNECTED,
      DOB(15) => NLW_blk00000003_blk0000025a_blk0000029e_DOB_15_UNCONNECTED,
      DOB(14) => NLW_blk00000003_blk0000025a_blk0000029e_DOB_14_UNCONNECTED,
      DOB(13) => NLW_blk00000003_blk0000025a_blk0000029e_DOB_13_UNCONNECTED,
      DOB(12) => NLW_blk00000003_blk0000025a_blk0000029e_DOB_12_UNCONNECTED,
      DOB(11) => NLW_blk00000003_blk0000025a_blk0000029e_DOB_11_UNCONNECTED,
      DOB(10) => NLW_blk00000003_blk0000025a_blk0000029e_DOB_10_UNCONNECTED,
      DOB(9) => NLW_blk00000003_blk0000025a_blk0000029e_DOB_9_UNCONNECTED,
      DOB(8) => NLW_blk00000003_blk0000025a_blk0000029e_DOB_8_UNCONNECTED,
      DOB(7) => blk00000003_blk0000025a_sig00000aba,
      DOB(6) => blk00000003_blk0000025a_sig00000abc,
      DOB(5) => blk00000003_blk0000025a_sig00000abe,
      DOB(4) => blk00000003_blk0000025a_sig00000ac0,
      DOB(3) => blk00000003_blk0000025a_sig00000ac2,
      DOB(2) => blk00000003_blk0000025a_sig00000ac4,
      DOB(1) => blk00000003_blk0000025a_sig00000ac6,
      DOB(0) => blk00000003_blk0000025a_sig00000ac8,
      DOPA(1) => NLW_blk00000003_blk0000025a_blk0000029e_DOPA_1_UNCONNECTED,
      DOPA(0) => NLW_blk00000003_blk0000025a_blk0000029e_DOPA_0_UNCONNECTED,
      DOPB(1) => NLW_blk00000003_blk0000025a_blk0000029e_DOPB_1_UNCONNECTED,
      DOPB(0) => blk00000003_blk0000025a_sig00000ab6,
      WEA(1) => blk00000003_blk0000025a_sig00000a91,
      WEA(0) => blk00000003_blk0000025a_sig00000a91,
      WEB(1) => blk00000003_blk0000025a_sig00000a71,
      WEB(0) => blk00000003_blk0000025a_sig00000a71
    );
  blk00000003_blk0000025a_blk0000029d : RAMB18
    generic map(
      DOA_REG => 0,
      DOB_REG => 1,
      INITP_00 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INITP_01 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INITP_02 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INITP_03 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INITP_04 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INITP_05 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INITP_06 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INITP_07 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_00 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_01 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_02 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_03 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_04 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_05 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_06 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_07 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_08 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_09 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_0A => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_0B => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_0C => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_0D => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_0E => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_0F => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_10 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_11 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_12 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_13 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_14 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_15 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_16 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_17 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_18 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_19 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_1A => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_1B => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_1C => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_1D => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_1E => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_1F => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_20 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_21 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_22 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_23 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_24 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_25 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_26 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_27 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_28 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_29 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_2A => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_2B => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_2C => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_2D => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_2E => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_2F => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_30 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_31 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_32 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_33 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_34 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_35 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_36 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_37 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_38 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_39 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_3A => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_3B => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_3C => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_3D => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_3E => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_3F => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_A => X"00000",
      INIT_B => X"00000",
      INIT_FILE => "NONE",
      READ_WIDTH_A => 0,
      READ_WIDTH_B => 9,
      SIM_COLLISION_CHECK => "GENERATE_X_ONLY",
      SIM_MODE => "SAFE",
      SRVAL_A => X"00000",
      SRVAL_B => X"00000",
      WRITE_MODE_A => "READ_FIRST",
      WRITE_MODE_B => "READ_FIRST",
      WRITE_WIDTH_A => 9,
      WRITE_WIDTH_B => 0
    )
    port map (
      CLKA => clk,
      CLKB => clk,
      ENA => ce,
      ENB => ce,
      REGCEA => blk00000003_blk0000025a_sig00000a71,
      REGCEB => ce,
      SSRA => blk00000003_blk0000025a_sig00000a71,
      SSRB => blk00000003_blk0000025a_sig00000a71,
      ADDRA(13) => blk00000003_sig00000321,
      ADDRA(12) => blk00000003_sig00000323,
      ADDRA(11) => blk00000003_sig00000325,
      ADDRA(10) => blk00000003_sig00000327,
      ADDRA(9) => blk00000003_sig00000329,
      ADDRA(8) => blk00000003_sig0000032b,
      ADDRA(7) => blk00000003_sig0000032d,
      ADDRA(6) => blk00000003_sig0000032f,
      ADDRA(5) => blk00000003_sig00000331,
      ADDRA(4) => blk00000003_sig00000333,
      ADDRA(3) => blk00000003_sig00000335,
      ADDRA(2) => blk00000003_blk0000025a_sig00000a71,
      ADDRA(1) => blk00000003_blk0000025a_sig00000a71,
      ADDRA(0) => blk00000003_blk0000025a_sig00000a71,
      ADDRB(13) => blk00000003_sig00000309,
      ADDRB(12) => blk00000003_sig0000030b,
      ADDRB(11) => blk00000003_sig0000030d,
      ADDRB(10) => blk00000003_sig0000030f,
      ADDRB(9) => blk00000003_sig00000311,
      ADDRB(8) => blk00000003_sig00000313,
      ADDRB(7) => blk00000003_sig00000315,
      ADDRB(6) => blk00000003_sig00000317,
      ADDRB(5) => blk00000003_sig00000319,
      ADDRB(4) => blk00000003_sig0000031b,
      ADDRB(3) => blk00000003_sig0000031d,
      ADDRB(2) => blk00000003_blk0000025a_sig00000a71,
      ADDRB(1) => blk00000003_blk0000025a_sig00000a71,
      ADDRB(0) => blk00000003_blk0000025a_sig00000a71,
      DIA(15) => blk00000003_blk0000025a_sig00000a71,
      DIA(14) => blk00000003_blk0000025a_sig00000a71,
      DIA(13) => blk00000003_blk0000025a_sig00000a71,
      DIA(12) => blk00000003_blk0000025a_sig00000a71,
      DIA(11) => blk00000003_blk0000025a_sig00000a71,
      DIA(10) => blk00000003_blk0000025a_sig00000a71,
      DIA(9) => blk00000003_blk0000025a_sig00000a71,
      DIA(8) => blk00000003_blk0000025a_sig00000a71,
      DIA(7) => blk00000003_sig000001d0,
      DIA(6) => blk00000003_sig000001d2,
      DIA(5) => blk00000003_sig000001d4,
      DIA(4) => blk00000003_sig000001d6,
      DIA(3) => blk00000003_sig000001da,
      DIA(2) => blk00000003_sig000001dc,
      DIA(1) => blk00000003_sig000001de,
      DIA(0) => blk00000003_sig000001e0,
      DIB(15) => blk00000003_blk0000025a_sig00000a71,
      DIB(14) => blk00000003_blk0000025a_sig00000a71,
      DIB(13) => blk00000003_blk0000025a_sig00000a71,
      DIB(12) => blk00000003_blk0000025a_sig00000a71,
      DIB(11) => blk00000003_blk0000025a_sig00000a71,
      DIB(10) => blk00000003_blk0000025a_sig00000a71,
      DIB(9) => blk00000003_blk0000025a_sig00000a71,
      DIB(8) => blk00000003_blk0000025a_sig00000a71,
      DIB(7) => blk00000003_blk0000025a_sig00000a71,
      DIB(6) => blk00000003_blk0000025a_sig00000a71,
      DIB(5) => blk00000003_blk0000025a_sig00000a71,
      DIB(4) => blk00000003_blk0000025a_sig00000a71,
      DIB(3) => blk00000003_blk0000025a_sig00000a71,
      DIB(2) => blk00000003_blk0000025a_sig00000a71,
      DIB(1) => blk00000003_blk0000025a_sig00000a71,
      DIB(0) => blk00000003_blk0000025a_sig00000a71,
      DIPA(1) => blk00000003_blk0000025a_sig00000a71,
      DIPA(0) => blk00000003_sig000001d8,
      DIPB(1) => blk00000003_blk0000025a_sig00000a71,
      DIPB(0) => blk00000003_blk0000025a_sig00000a71,
      DOA(15) => NLW_blk00000003_blk0000025a_blk0000029d_DOA_15_UNCONNECTED,
      DOA(14) => NLW_blk00000003_blk0000025a_blk0000029d_DOA_14_UNCONNECTED,
      DOA(13) => NLW_blk00000003_blk0000025a_blk0000029d_DOA_13_UNCONNECTED,
      DOA(12) => NLW_blk00000003_blk0000025a_blk0000029d_DOA_12_UNCONNECTED,
      DOA(11) => NLW_blk00000003_blk0000025a_blk0000029d_DOA_11_UNCONNECTED,
      DOA(10) => NLW_blk00000003_blk0000025a_blk0000029d_DOA_10_UNCONNECTED,
      DOA(9) => NLW_blk00000003_blk0000025a_blk0000029d_DOA_9_UNCONNECTED,
      DOA(8) => NLW_blk00000003_blk0000025a_blk0000029d_DOA_8_UNCONNECTED,
      DOA(7) => NLW_blk00000003_blk0000025a_blk0000029d_DOA_7_UNCONNECTED,
      DOA(6) => NLW_blk00000003_blk0000025a_blk0000029d_DOA_6_UNCONNECTED,
      DOA(5) => NLW_blk00000003_blk0000025a_blk0000029d_DOA_5_UNCONNECTED,
      DOA(4) => NLW_blk00000003_blk0000025a_blk0000029d_DOA_4_UNCONNECTED,
      DOA(3) => NLW_blk00000003_blk0000025a_blk0000029d_DOA_3_UNCONNECTED,
      DOA(2) => NLW_blk00000003_blk0000025a_blk0000029d_DOA_2_UNCONNECTED,
      DOA(1) => NLW_blk00000003_blk0000025a_blk0000029d_DOA_1_UNCONNECTED,
      DOA(0) => NLW_blk00000003_blk0000025a_blk0000029d_DOA_0_UNCONNECTED,
      DOB(15) => NLW_blk00000003_blk0000025a_blk0000029d_DOB_15_UNCONNECTED,
      DOB(14) => NLW_blk00000003_blk0000025a_blk0000029d_DOB_14_UNCONNECTED,
      DOB(13) => NLW_blk00000003_blk0000025a_blk0000029d_DOB_13_UNCONNECTED,
      DOB(12) => NLW_blk00000003_blk0000025a_blk0000029d_DOB_12_UNCONNECTED,
      DOB(11) => NLW_blk00000003_blk0000025a_blk0000029d_DOB_11_UNCONNECTED,
      DOB(10) => NLW_blk00000003_blk0000025a_blk0000029d_DOB_10_UNCONNECTED,
      DOB(9) => NLW_blk00000003_blk0000025a_blk0000029d_DOB_9_UNCONNECTED,
      DOB(8) => NLW_blk00000003_blk0000025a_blk0000029d_DOB_8_UNCONNECTED,
      DOB(7) => blk00000003_blk0000025a_sig00000abb,
      DOB(6) => blk00000003_blk0000025a_sig00000abd,
      DOB(5) => blk00000003_blk0000025a_sig00000abf,
      DOB(4) => blk00000003_blk0000025a_sig00000ac1,
      DOB(3) => blk00000003_blk0000025a_sig00000ac3,
      DOB(2) => blk00000003_blk0000025a_sig00000ac5,
      DOB(1) => blk00000003_blk0000025a_sig00000ac7,
      DOB(0) => blk00000003_blk0000025a_sig00000ac9,
      DOPA(1) => NLW_blk00000003_blk0000025a_blk0000029d_DOPA_1_UNCONNECTED,
      DOPA(0) => NLW_blk00000003_blk0000025a_blk0000029d_DOPA_0_UNCONNECTED,
      DOPB(1) => NLW_blk00000003_blk0000025a_blk0000029d_DOPB_1_UNCONNECTED,
      DOPB(0) => blk00000003_blk0000025a_sig00000ab7,
      WEA(1) => blk00000003_blk0000025a_sig00000a92,
      WEA(0) => blk00000003_blk0000025a_sig00000a92,
      WEB(1) => blk00000003_blk0000025a_sig00000a71,
      WEB(0) => blk00000003_blk0000025a_sig00000a71
    );
  blk00000003_blk0000025a_blk0000029c : RAMB18
    generic map(
      DOA_REG => 0,
      DOB_REG => 1,
      INITP_00 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INITP_01 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INITP_02 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INITP_03 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INITP_04 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INITP_05 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INITP_06 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INITP_07 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_00 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_01 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_02 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_03 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_04 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_05 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_06 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_07 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_08 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_09 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_0A => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_0B => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_0C => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_0D => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_0E => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_0F => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_10 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_11 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_12 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_13 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_14 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_15 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_16 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_17 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_18 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_19 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_1A => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_1B => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_1C => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_1D => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_1E => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_1F => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_20 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_21 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_22 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_23 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_24 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_25 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_26 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_27 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_28 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_29 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_2A => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_2B => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_2C => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_2D => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_2E => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_2F => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_30 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_31 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_32 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_33 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_34 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_35 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_36 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_37 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_38 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_39 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_3A => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_3B => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_3C => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_3D => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_3E => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_3F => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_A => X"00000",
      INIT_B => X"00000",
      INIT_FILE => "NONE",
      READ_WIDTH_A => 0,
      READ_WIDTH_B => 9,
      SIM_COLLISION_CHECK => "GENERATE_X_ONLY",
      SIM_MODE => "SAFE",
      SRVAL_A => X"00000",
      SRVAL_B => X"00000",
      WRITE_MODE_A => "READ_FIRST",
      WRITE_MODE_B => "READ_FIRST",
      WRITE_WIDTH_A => 9,
      WRITE_WIDTH_B => 0
    )
    port map (
      CLKA => clk,
      CLKB => clk,
      ENA => ce,
      ENB => ce,
      REGCEA => blk00000003_blk0000025a_sig00000a71,
      REGCEB => ce,
      SSRA => blk00000003_blk0000025a_sig00000a71,
      SSRB => blk00000003_blk0000025a_sig00000a71,
      ADDRA(13) => blk00000003_sig00000321,
      ADDRA(12) => blk00000003_sig00000323,
      ADDRA(11) => blk00000003_sig00000325,
      ADDRA(10) => blk00000003_sig00000327,
      ADDRA(9) => blk00000003_sig00000329,
      ADDRA(8) => blk00000003_sig0000032b,
      ADDRA(7) => blk00000003_sig0000032d,
      ADDRA(6) => blk00000003_sig0000032f,
      ADDRA(5) => blk00000003_sig00000331,
      ADDRA(4) => blk00000003_sig00000333,
      ADDRA(3) => blk00000003_sig00000335,
      ADDRA(2) => blk00000003_blk0000025a_sig00000a71,
      ADDRA(1) => blk00000003_blk0000025a_sig00000a71,
      ADDRA(0) => blk00000003_blk0000025a_sig00000a71,
      ADDRB(13) => blk00000003_sig00000309,
      ADDRB(12) => blk00000003_sig0000030b,
      ADDRB(11) => blk00000003_sig0000030d,
      ADDRB(10) => blk00000003_sig0000030f,
      ADDRB(9) => blk00000003_sig00000311,
      ADDRB(8) => blk00000003_sig00000313,
      ADDRB(7) => blk00000003_sig00000315,
      ADDRB(6) => blk00000003_sig00000317,
      ADDRB(5) => blk00000003_sig00000319,
      ADDRB(4) => blk00000003_sig0000031b,
      ADDRB(3) => blk00000003_sig0000031d,
      ADDRB(2) => blk00000003_blk0000025a_sig00000a71,
      ADDRB(1) => blk00000003_blk0000025a_sig00000a71,
      ADDRB(0) => blk00000003_blk0000025a_sig00000a71,
      DIA(15) => blk00000003_blk0000025a_sig00000a71,
      DIA(14) => blk00000003_blk0000025a_sig00000a71,
      DIA(13) => blk00000003_blk0000025a_sig00000a71,
      DIA(12) => blk00000003_blk0000025a_sig00000a71,
      DIA(11) => blk00000003_blk0000025a_sig00000a71,
      DIA(10) => blk00000003_blk0000025a_sig00000a71,
      DIA(9) => blk00000003_blk0000025a_sig00000a71,
      DIA(8) => blk00000003_blk0000025a_sig00000a71,
      DIA(7) => blk00000003_sig000001e2,
      DIA(6) => blk00000003_sig000001e4,
      DIA(5) => blk00000003_sig000001e6,
      DIA(4) => blk00000003_sig000001e8,
      DIA(3) => blk00000003_sig000001ec,
      DIA(2) => blk00000003_sig000001ee,
      DIA(1) => blk00000003_sig000001f0,
      DIA(0) => blk00000003_sig000001f2,
      DIB(15) => blk00000003_blk0000025a_sig00000a71,
      DIB(14) => blk00000003_blk0000025a_sig00000a71,
      DIB(13) => blk00000003_blk0000025a_sig00000a71,
      DIB(12) => blk00000003_blk0000025a_sig00000a71,
      DIB(11) => blk00000003_blk0000025a_sig00000a71,
      DIB(10) => blk00000003_blk0000025a_sig00000a71,
      DIB(9) => blk00000003_blk0000025a_sig00000a71,
      DIB(8) => blk00000003_blk0000025a_sig00000a71,
      DIB(7) => blk00000003_blk0000025a_sig00000a71,
      DIB(6) => blk00000003_blk0000025a_sig00000a71,
      DIB(5) => blk00000003_blk0000025a_sig00000a71,
      DIB(4) => blk00000003_blk0000025a_sig00000a71,
      DIB(3) => blk00000003_blk0000025a_sig00000a71,
      DIB(2) => blk00000003_blk0000025a_sig00000a71,
      DIB(1) => blk00000003_blk0000025a_sig00000a71,
      DIB(0) => blk00000003_blk0000025a_sig00000a71,
      DIPA(1) => blk00000003_blk0000025a_sig00000a71,
      DIPA(0) => blk00000003_sig000001ea,
      DIPB(1) => blk00000003_blk0000025a_sig00000a71,
      DIPB(0) => blk00000003_blk0000025a_sig00000a71,
      DOA(15) => NLW_blk00000003_blk0000025a_blk0000029c_DOA_15_UNCONNECTED,
      DOA(14) => NLW_blk00000003_blk0000025a_blk0000029c_DOA_14_UNCONNECTED,
      DOA(13) => NLW_blk00000003_blk0000025a_blk0000029c_DOA_13_UNCONNECTED,
      DOA(12) => NLW_blk00000003_blk0000025a_blk0000029c_DOA_12_UNCONNECTED,
      DOA(11) => NLW_blk00000003_blk0000025a_blk0000029c_DOA_11_UNCONNECTED,
      DOA(10) => NLW_blk00000003_blk0000025a_blk0000029c_DOA_10_UNCONNECTED,
      DOA(9) => NLW_blk00000003_blk0000025a_blk0000029c_DOA_9_UNCONNECTED,
      DOA(8) => NLW_blk00000003_blk0000025a_blk0000029c_DOA_8_UNCONNECTED,
      DOA(7) => NLW_blk00000003_blk0000025a_blk0000029c_DOA_7_UNCONNECTED,
      DOA(6) => NLW_blk00000003_blk0000025a_blk0000029c_DOA_6_UNCONNECTED,
      DOA(5) => NLW_blk00000003_blk0000025a_blk0000029c_DOA_5_UNCONNECTED,
      DOA(4) => NLW_blk00000003_blk0000025a_blk0000029c_DOA_4_UNCONNECTED,
      DOA(3) => NLW_blk00000003_blk0000025a_blk0000029c_DOA_3_UNCONNECTED,
      DOA(2) => NLW_blk00000003_blk0000025a_blk0000029c_DOA_2_UNCONNECTED,
      DOA(1) => NLW_blk00000003_blk0000025a_blk0000029c_DOA_1_UNCONNECTED,
      DOA(0) => NLW_blk00000003_blk0000025a_blk0000029c_DOA_0_UNCONNECTED,
      DOB(15) => NLW_blk00000003_blk0000025a_blk0000029c_DOB_15_UNCONNECTED,
      DOB(14) => NLW_blk00000003_blk0000025a_blk0000029c_DOB_14_UNCONNECTED,
      DOB(13) => NLW_blk00000003_blk0000025a_blk0000029c_DOB_13_UNCONNECTED,
      DOB(12) => NLW_blk00000003_blk0000025a_blk0000029c_DOB_12_UNCONNECTED,
      DOB(11) => NLW_blk00000003_blk0000025a_blk0000029c_DOB_11_UNCONNECTED,
      DOB(10) => NLW_blk00000003_blk0000025a_blk0000029c_DOB_10_UNCONNECTED,
      DOB(9) => NLW_blk00000003_blk0000025a_blk0000029c_DOB_9_UNCONNECTED,
      DOB(8) => NLW_blk00000003_blk0000025a_blk0000029c_DOB_8_UNCONNECTED,
      DOB(7) => blk00000003_blk0000025a_sig00000aa6,
      DOB(6) => blk00000003_blk0000025a_sig00000aa8,
      DOB(5) => blk00000003_blk0000025a_sig00000aaa,
      DOB(4) => blk00000003_blk0000025a_sig00000aac,
      DOB(3) => blk00000003_blk0000025a_sig00000aae,
      DOB(2) => blk00000003_blk0000025a_sig00000ab0,
      DOB(1) => blk00000003_blk0000025a_sig00000ab2,
      DOB(0) => blk00000003_blk0000025a_sig00000ab4,
      DOPA(1) => NLW_blk00000003_blk0000025a_blk0000029c_DOPA_1_UNCONNECTED,
      DOPA(0) => NLW_blk00000003_blk0000025a_blk0000029c_DOPA_0_UNCONNECTED,
      DOPB(1) => NLW_blk00000003_blk0000025a_blk0000029c_DOPB_1_UNCONNECTED,
      DOPB(0) => blk00000003_blk0000025a_sig00000ab8,
      WEA(1) => blk00000003_blk0000025a_sig00000a91,
      WEA(0) => blk00000003_blk0000025a_sig00000a91,
      WEB(1) => blk00000003_blk0000025a_sig00000a71,
      WEB(0) => blk00000003_blk0000025a_sig00000a71
    );
  blk00000003_blk0000025a_blk0000029b : RAMB18
    generic map(
      DOA_REG => 0,
      DOB_REG => 1,
      INITP_00 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INITP_01 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INITP_02 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INITP_03 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INITP_04 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INITP_05 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INITP_06 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INITP_07 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_00 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_01 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_02 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_03 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_04 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_05 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_06 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_07 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_08 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_09 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_0A => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_0B => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_0C => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_0D => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_0E => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_0F => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_10 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_11 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_12 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_13 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_14 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_15 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_16 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_17 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_18 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_19 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_1A => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_1B => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_1C => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_1D => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_1E => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_1F => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_20 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_21 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_22 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_23 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_24 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_25 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_26 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_27 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_28 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_29 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_2A => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_2B => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_2C => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_2D => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_2E => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_2F => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_30 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_31 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_32 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_33 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_34 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_35 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_36 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_37 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_38 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_39 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_3A => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_3B => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_3C => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_3D => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_3E => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_3F => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_A => X"00000",
      INIT_B => X"00000",
      INIT_FILE => "NONE",
      READ_WIDTH_A => 0,
      READ_WIDTH_B => 9,
      SIM_COLLISION_CHECK => "GENERATE_X_ONLY",
      SIM_MODE => "SAFE",
      SRVAL_A => X"00000",
      SRVAL_B => X"00000",
      WRITE_MODE_A => "READ_FIRST",
      WRITE_MODE_B => "READ_FIRST",
      WRITE_WIDTH_A => 9,
      WRITE_WIDTH_B => 0
    )
    port map (
      CLKA => clk,
      CLKB => clk,
      ENA => ce,
      ENB => ce,
      REGCEA => blk00000003_blk0000025a_sig00000a71,
      REGCEB => ce,
      SSRA => blk00000003_blk0000025a_sig00000a71,
      SSRB => blk00000003_blk0000025a_sig00000a71,
      ADDRA(13) => blk00000003_sig00000321,
      ADDRA(12) => blk00000003_sig00000323,
      ADDRA(11) => blk00000003_sig00000325,
      ADDRA(10) => blk00000003_sig00000327,
      ADDRA(9) => blk00000003_sig00000329,
      ADDRA(8) => blk00000003_sig0000032b,
      ADDRA(7) => blk00000003_sig0000032d,
      ADDRA(6) => blk00000003_sig0000032f,
      ADDRA(5) => blk00000003_sig00000331,
      ADDRA(4) => blk00000003_sig00000333,
      ADDRA(3) => blk00000003_sig00000335,
      ADDRA(2) => blk00000003_blk0000025a_sig00000a71,
      ADDRA(1) => blk00000003_blk0000025a_sig00000a71,
      ADDRA(0) => blk00000003_blk0000025a_sig00000a71,
      ADDRB(13) => blk00000003_sig00000309,
      ADDRB(12) => blk00000003_sig0000030b,
      ADDRB(11) => blk00000003_sig0000030d,
      ADDRB(10) => blk00000003_sig0000030f,
      ADDRB(9) => blk00000003_sig00000311,
      ADDRB(8) => blk00000003_sig00000313,
      ADDRB(7) => blk00000003_sig00000315,
      ADDRB(6) => blk00000003_sig00000317,
      ADDRB(5) => blk00000003_sig00000319,
      ADDRB(4) => blk00000003_sig0000031b,
      ADDRB(3) => blk00000003_sig0000031d,
      ADDRB(2) => blk00000003_blk0000025a_sig00000a71,
      ADDRB(1) => blk00000003_blk0000025a_sig00000a71,
      ADDRB(0) => blk00000003_blk0000025a_sig00000a71,
      DIA(15) => blk00000003_blk0000025a_sig00000a71,
      DIA(14) => blk00000003_blk0000025a_sig00000a71,
      DIA(13) => blk00000003_blk0000025a_sig00000a71,
      DIA(12) => blk00000003_blk0000025a_sig00000a71,
      DIA(11) => blk00000003_blk0000025a_sig00000a71,
      DIA(10) => blk00000003_blk0000025a_sig00000a71,
      DIA(9) => blk00000003_blk0000025a_sig00000a71,
      DIA(8) => blk00000003_blk0000025a_sig00000a71,
      DIA(7) => blk00000003_sig000001e2,
      DIA(6) => blk00000003_sig000001e4,
      DIA(5) => blk00000003_sig000001e6,
      DIA(4) => blk00000003_sig000001e8,
      DIA(3) => blk00000003_sig000001ec,
      DIA(2) => blk00000003_sig000001ee,
      DIA(1) => blk00000003_sig000001f0,
      DIA(0) => blk00000003_sig000001f2,
      DIB(15) => blk00000003_blk0000025a_sig00000a71,
      DIB(14) => blk00000003_blk0000025a_sig00000a71,
      DIB(13) => blk00000003_blk0000025a_sig00000a71,
      DIB(12) => blk00000003_blk0000025a_sig00000a71,
      DIB(11) => blk00000003_blk0000025a_sig00000a71,
      DIB(10) => blk00000003_blk0000025a_sig00000a71,
      DIB(9) => blk00000003_blk0000025a_sig00000a71,
      DIB(8) => blk00000003_blk0000025a_sig00000a71,
      DIB(7) => blk00000003_blk0000025a_sig00000a71,
      DIB(6) => blk00000003_blk0000025a_sig00000a71,
      DIB(5) => blk00000003_blk0000025a_sig00000a71,
      DIB(4) => blk00000003_blk0000025a_sig00000a71,
      DIB(3) => blk00000003_blk0000025a_sig00000a71,
      DIB(2) => blk00000003_blk0000025a_sig00000a71,
      DIB(1) => blk00000003_blk0000025a_sig00000a71,
      DIB(0) => blk00000003_blk0000025a_sig00000a71,
      DIPA(1) => blk00000003_blk0000025a_sig00000a71,
      DIPA(0) => blk00000003_sig000001ea,
      DIPB(1) => blk00000003_blk0000025a_sig00000a71,
      DIPB(0) => blk00000003_blk0000025a_sig00000a71,
      DOA(15) => NLW_blk00000003_blk0000025a_blk0000029b_DOA_15_UNCONNECTED,
      DOA(14) => NLW_blk00000003_blk0000025a_blk0000029b_DOA_14_UNCONNECTED,
      DOA(13) => NLW_blk00000003_blk0000025a_blk0000029b_DOA_13_UNCONNECTED,
      DOA(12) => NLW_blk00000003_blk0000025a_blk0000029b_DOA_12_UNCONNECTED,
      DOA(11) => NLW_blk00000003_blk0000025a_blk0000029b_DOA_11_UNCONNECTED,
      DOA(10) => NLW_blk00000003_blk0000025a_blk0000029b_DOA_10_UNCONNECTED,
      DOA(9) => NLW_blk00000003_blk0000025a_blk0000029b_DOA_9_UNCONNECTED,
      DOA(8) => NLW_blk00000003_blk0000025a_blk0000029b_DOA_8_UNCONNECTED,
      DOA(7) => NLW_blk00000003_blk0000025a_blk0000029b_DOA_7_UNCONNECTED,
      DOA(6) => NLW_blk00000003_blk0000025a_blk0000029b_DOA_6_UNCONNECTED,
      DOA(5) => NLW_blk00000003_blk0000025a_blk0000029b_DOA_5_UNCONNECTED,
      DOA(4) => NLW_blk00000003_blk0000025a_blk0000029b_DOA_4_UNCONNECTED,
      DOA(3) => NLW_blk00000003_blk0000025a_blk0000029b_DOA_3_UNCONNECTED,
      DOA(2) => NLW_blk00000003_blk0000025a_blk0000029b_DOA_2_UNCONNECTED,
      DOA(1) => NLW_blk00000003_blk0000025a_blk0000029b_DOA_1_UNCONNECTED,
      DOA(0) => NLW_blk00000003_blk0000025a_blk0000029b_DOA_0_UNCONNECTED,
      DOB(15) => NLW_blk00000003_blk0000025a_blk0000029b_DOB_15_UNCONNECTED,
      DOB(14) => NLW_blk00000003_blk0000025a_blk0000029b_DOB_14_UNCONNECTED,
      DOB(13) => NLW_blk00000003_blk0000025a_blk0000029b_DOB_13_UNCONNECTED,
      DOB(12) => NLW_blk00000003_blk0000025a_blk0000029b_DOB_12_UNCONNECTED,
      DOB(11) => NLW_blk00000003_blk0000025a_blk0000029b_DOB_11_UNCONNECTED,
      DOB(10) => NLW_blk00000003_blk0000025a_blk0000029b_DOB_10_UNCONNECTED,
      DOB(9) => NLW_blk00000003_blk0000025a_blk0000029b_DOB_9_UNCONNECTED,
      DOB(8) => NLW_blk00000003_blk0000025a_blk0000029b_DOB_8_UNCONNECTED,
      DOB(7) => blk00000003_blk0000025a_sig00000aa7,
      DOB(6) => blk00000003_blk0000025a_sig00000aa9,
      DOB(5) => blk00000003_blk0000025a_sig00000aab,
      DOB(4) => blk00000003_blk0000025a_sig00000aad,
      DOB(3) => blk00000003_blk0000025a_sig00000aaf,
      DOB(2) => blk00000003_blk0000025a_sig00000ab1,
      DOB(1) => blk00000003_blk0000025a_sig00000ab3,
      DOB(0) => blk00000003_blk0000025a_sig00000ab5,
      DOPA(1) => NLW_blk00000003_blk0000025a_blk0000029b_DOPA_1_UNCONNECTED,
      DOPA(0) => NLW_blk00000003_blk0000025a_blk0000029b_DOPA_0_UNCONNECTED,
      DOPB(1) => NLW_blk00000003_blk0000025a_blk0000029b_DOPB_1_UNCONNECTED,
      DOPB(0) => blk00000003_blk0000025a_sig00000ab9,
      WEA(1) => blk00000003_blk0000025a_sig00000a92,
      WEA(0) => blk00000003_blk0000025a_sig00000a92,
      WEB(1) => blk00000003_blk0000025a_sig00000a71,
      WEB(0) => blk00000003_blk0000025a_sig00000a71
    );
  blk00000003_blk0000025a_blk0000029a : RAMB18
    generic map(
      DOA_REG => 0,
      DOB_REG => 1,
      INITP_00 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INITP_01 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INITP_02 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INITP_03 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INITP_04 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INITP_05 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INITP_06 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INITP_07 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_00 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_01 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_02 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_03 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_04 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_05 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_06 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_07 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_08 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_09 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_0A => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_0B => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_0C => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_0D => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_0E => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_0F => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_10 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_11 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_12 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_13 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_14 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_15 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_16 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_17 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_18 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_19 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_1A => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_1B => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_1C => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_1D => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_1E => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_1F => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_20 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_21 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_22 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_23 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_24 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_25 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_26 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_27 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_28 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_29 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_2A => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_2B => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_2C => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_2D => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_2E => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_2F => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_30 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_31 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_32 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_33 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_34 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_35 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_36 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_37 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_38 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_39 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_3A => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_3B => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_3C => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_3D => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_3E => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_3F => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_A => X"00000",
      INIT_B => X"00000",
      INIT_FILE => "NONE",
      READ_WIDTH_A => 0,
      READ_WIDTH_B => 9,
      SIM_COLLISION_CHECK => "GENERATE_X_ONLY",
      SIM_MODE => "SAFE",
      SRVAL_A => X"00000",
      SRVAL_B => X"00000",
      WRITE_MODE_A => "READ_FIRST",
      WRITE_MODE_B => "READ_FIRST",
      WRITE_WIDTH_A => 9,
      WRITE_WIDTH_B => 0
    )
    port map (
      CLKA => clk,
      CLKB => clk,
      ENA => ce,
      ENB => ce,
      REGCEA => blk00000003_blk0000025a_sig00000a71,
      REGCEB => ce,
      SSRA => blk00000003_blk0000025a_sig00000a71,
      SSRB => blk00000003_blk0000025a_sig00000a71,
      ADDRA(13) => blk00000003_sig00000321,
      ADDRA(12) => blk00000003_sig00000323,
      ADDRA(11) => blk00000003_sig00000325,
      ADDRA(10) => blk00000003_sig00000327,
      ADDRA(9) => blk00000003_sig00000329,
      ADDRA(8) => blk00000003_sig0000032b,
      ADDRA(7) => blk00000003_sig0000032d,
      ADDRA(6) => blk00000003_sig0000032f,
      ADDRA(5) => blk00000003_sig00000331,
      ADDRA(4) => blk00000003_sig00000333,
      ADDRA(3) => blk00000003_sig00000335,
      ADDRA(2) => blk00000003_blk0000025a_sig00000a71,
      ADDRA(1) => blk00000003_blk0000025a_sig00000a71,
      ADDRA(0) => blk00000003_blk0000025a_sig00000a71,
      ADDRB(13) => blk00000003_sig00000309,
      ADDRB(12) => blk00000003_sig0000030b,
      ADDRB(11) => blk00000003_sig0000030d,
      ADDRB(10) => blk00000003_sig0000030f,
      ADDRB(9) => blk00000003_sig00000311,
      ADDRB(8) => blk00000003_sig00000313,
      ADDRB(7) => blk00000003_sig00000315,
      ADDRB(6) => blk00000003_sig00000317,
      ADDRB(5) => blk00000003_sig00000319,
      ADDRB(4) => blk00000003_sig0000031b,
      ADDRB(3) => blk00000003_sig0000031d,
      ADDRB(2) => blk00000003_blk0000025a_sig00000a71,
      ADDRB(1) => blk00000003_blk0000025a_sig00000a71,
      ADDRB(0) => blk00000003_blk0000025a_sig00000a71,
      DIA(15) => blk00000003_blk0000025a_sig00000a71,
      DIA(14) => blk00000003_blk0000025a_sig00000a71,
      DIA(13) => blk00000003_blk0000025a_sig00000a71,
      DIA(12) => blk00000003_blk0000025a_sig00000a71,
      DIA(11) => blk00000003_blk0000025a_sig00000a71,
      DIA(10) => blk00000003_blk0000025a_sig00000a71,
      DIA(9) => blk00000003_blk0000025a_sig00000a71,
      DIA(8) => blk00000003_blk0000025a_sig00000a71,
      DIA(7) => blk00000003_sig000001f4,
      DIA(6) => blk00000003_sig000001f6,
      DIA(5) => blk00000003_sig000001f8,
      DIA(4) => blk00000003_sig000001fa,
      DIA(3) => blk00000003_sig000001fe,
      DIA(2) => blk00000003_sig00000200,
      DIA(1) => blk00000003_sig00000202,
      DIA(0) => blk00000003_sig00000204,
      DIB(15) => blk00000003_blk0000025a_sig00000a71,
      DIB(14) => blk00000003_blk0000025a_sig00000a71,
      DIB(13) => blk00000003_blk0000025a_sig00000a71,
      DIB(12) => blk00000003_blk0000025a_sig00000a71,
      DIB(11) => blk00000003_blk0000025a_sig00000a71,
      DIB(10) => blk00000003_blk0000025a_sig00000a71,
      DIB(9) => blk00000003_blk0000025a_sig00000a71,
      DIB(8) => blk00000003_blk0000025a_sig00000a71,
      DIB(7) => blk00000003_blk0000025a_sig00000a71,
      DIB(6) => blk00000003_blk0000025a_sig00000a71,
      DIB(5) => blk00000003_blk0000025a_sig00000a71,
      DIB(4) => blk00000003_blk0000025a_sig00000a71,
      DIB(3) => blk00000003_blk0000025a_sig00000a71,
      DIB(2) => blk00000003_blk0000025a_sig00000a71,
      DIB(1) => blk00000003_blk0000025a_sig00000a71,
      DIB(0) => blk00000003_blk0000025a_sig00000a71,
      DIPA(1) => blk00000003_blk0000025a_sig00000a71,
      DIPA(0) => blk00000003_sig000001fc,
      DIPB(1) => blk00000003_blk0000025a_sig00000a71,
      DIPB(0) => blk00000003_blk0000025a_sig00000a71,
      DOA(15) => NLW_blk00000003_blk0000025a_blk0000029a_DOA_15_UNCONNECTED,
      DOA(14) => NLW_blk00000003_blk0000025a_blk0000029a_DOA_14_UNCONNECTED,
      DOA(13) => NLW_blk00000003_blk0000025a_blk0000029a_DOA_13_UNCONNECTED,
      DOA(12) => NLW_blk00000003_blk0000025a_blk0000029a_DOA_12_UNCONNECTED,
      DOA(11) => NLW_blk00000003_blk0000025a_blk0000029a_DOA_11_UNCONNECTED,
      DOA(10) => NLW_blk00000003_blk0000025a_blk0000029a_DOA_10_UNCONNECTED,
      DOA(9) => NLW_blk00000003_blk0000025a_blk0000029a_DOA_9_UNCONNECTED,
      DOA(8) => NLW_blk00000003_blk0000025a_blk0000029a_DOA_8_UNCONNECTED,
      DOA(7) => NLW_blk00000003_blk0000025a_blk0000029a_DOA_7_UNCONNECTED,
      DOA(6) => NLW_blk00000003_blk0000025a_blk0000029a_DOA_6_UNCONNECTED,
      DOA(5) => NLW_blk00000003_blk0000025a_blk0000029a_DOA_5_UNCONNECTED,
      DOA(4) => NLW_blk00000003_blk0000025a_blk0000029a_DOA_4_UNCONNECTED,
      DOA(3) => NLW_blk00000003_blk0000025a_blk0000029a_DOA_3_UNCONNECTED,
      DOA(2) => NLW_blk00000003_blk0000025a_blk0000029a_DOA_2_UNCONNECTED,
      DOA(1) => NLW_blk00000003_blk0000025a_blk0000029a_DOA_1_UNCONNECTED,
      DOA(0) => NLW_blk00000003_blk0000025a_blk0000029a_DOA_0_UNCONNECTED,
      DOB(15) => NLW_blk00000003_blk0000025a_blk0000029a_DOB_15_UNCONNECTED,
      DOB(14) => NLW_blk00000003_blk0000025a_blk0000029a_DOB_14_UNCONNECTED,
      DOB(13) => NLW_blk00000003_blk0000025a_blk0000029a_DOB_13_UNCONNECTED,
      DOB(12) => NLW_blk00000003_blk0000025a_blk0000029a_DOB_12_UNCONNECTED,
      DOB(11) => NLW_blk00000003_blk0000025a_blk0000029a_DOB_11_UNCONNECTED,
      DOB(10) => NLW_blk00000003_blk0000025a_blk0000029a_DOB_10_UNCONNECTED,
      DOB(9) => NLW_blk00000003_blk0000025a_blk0000029a_DOB_9_UNCONNECTED,
      DOB(8) => NLW_blk00000003_blk0000025a_blk0000029a_DOB_8_UNCONNECTED,
      DOB(7) => blk00000003_blk0000025a_sig00000a94,
      DOB(6) => blk00000003_blk0000025a_sig00000a96,
      DOB(5) => blk00000003_blk0000025a_sig00000a98,
      DOB(4) => blk00000003_blk0000025a_sig00000a9a,
      DOB(3) => blk00000003_blk0000025a_sig00000a9c,
      DOB(2) => blk00000003_blk0000025a_sig00000a9e,
      DOB(1) => blk00000003_blk0000025a_sig00000aa0,
      DOB(0) => blk00000003_blk0000025a_sig00000aa2,
      DOPA(1) => NLW_blk00000003_blk0000025a_blk0000029a_DOPA_1_UNCONNECTED,
      DOPA(0) => NLW_blk00000003_blk0000025a_blk0000029a_DOPA_0_UNCONNECTED,
      DOPB(1) => NLW_blk00000003_blk0000025a_blk0000029a_DOPB_1_UNCONNECTED,
      DOPB(0) => blk00000003_blk0000025a_sig00000aa4,
      WEA(1) => blk00000003_blk0000025a_sig00000a91,
      WEA(0) => blk00000003_blk0000025a_sig00000a91,
      WEB(1) => blk00000003_blk0000025a_sig00000a71,
      WEB(0) => blk00000003_blk0000025a_sig00000a71
    );
  blk00000003_blk0000025a_blk00000299 : RAMB18
    generic map(
      DOA_REG => 0,
      DOB_REG => 1,
      INITP_00 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INITP_01 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INITP_02 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INITP_03 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INITP_04 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INITP_05 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INITP_06 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INITP_07 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_00 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_01 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_02 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_03 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_04 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_05 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_06 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_07 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_08 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_09 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_0A => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_0B => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_0C => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_0D => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_0E => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_0F => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_10 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_11 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_12 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_13 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_14 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_15 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_16 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_17 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_18 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_19 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_1A => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_1B => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_1C => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_1D => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_1E => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_1F => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_20 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_21 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_22 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_23 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_24 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_25 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_26 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_27 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_28 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_29 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_2A => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_2B => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_2C => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_2D => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_2E => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_2F => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_30 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_31 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_32 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_33 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_34 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_35 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_36 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_37 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_38 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_39 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_3A => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_3B => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_3C => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_3D => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_3E => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_3F => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_A => X"00000",
      INIT_B => X"00000",
      INIT_FILE => "NONE",
      READ_WIDTH_A => 0,
      READ_WIDTH_B => 9,
      SIM_COLLISION_CHECK => "GENERATE_X_ONLY",
      SIM_MODE => "SAFE",
      SRVAL_A => X"00000",
      SRVAL_B => X"00000",
      WRITE_MODE_A => "READ_FIRST",
      WRITE_MODE_B => "READ_FIRST",
      WRITE_WIDTH_A => 9,
      WRITE_WIDTH_B => 0
    )
    port map (
      CLKA => clk,
      CLKB => clk,
      ENA => ce,
      ENB => ce,
      REGCEA => blk00000003_blk0000025a_sig00000a71,
      REGCEB => ce,
      SSRA => blk00000003_blk0000025a_sig00000a71,
      SSRB => blk00000003_blk0000025a_sig00000a71,
      ADDRA(13) => blk00000003_sig00000321,
      ADDRA(12) => blk00000003_sig00000323,
      ADDRA(11) => blk00000003_sig00000325,
      ADDRA(10) => blk00000003_sig00000327,
      ADDRA(9) => blk00000003_sig00000329,
      ADDRA(8) => blk00000003_sig0000032b,
      ADDRA(7) => blk00000003_sig0000032d,
      ADDRA(6) => blk00000003_sig0000032f,
      ADDRA(5) => blk00000003_sig00000331,
      ADDRA(4) => blk00000003_sig00000333,
      ADDRA(3) => blk00000003_sig00000335,
      ADDRA(2) => blk00000003_blk0000025a_sig00000a71,
      ADDRA(1) => blk00000003_blk0000025a_sig00000a71,
      ADDRA(0) => blk00000003_blk0000025a_sig00000a71,
      ADDRB(13) => blk00000003_sig00000309,
      ADDRB(12) => blk00000003_sig0000030b,
      ADDRB(11) => blk00000003_sig0000030d,
      ADDRB(10) => blk00000003_sig0000030f,
      ADDRB(9) => blk00000003_sig00000311,
      ADDRB(8) => blk00000003_sig00000313,
      ADDRB(7) => blk00000003_sig00000315,
      ADDRB(6) => blk00000003_sig00000317,
      ADDRB(5) => blk00000003_sig00000319,
      ADDRB(4) => blk00000003_sig0000031b,
      ADDRB(3) => blk00000003_sig0000031d,
      ADDRB(2) => blk00000003_blk0000025a_sig00000a71,
      ADDRB(1) => blk00000003_blk0000025a_sig00000a71,
      ADDRB(0) => blk00000003_blk0000025a_sig00000a71,
      DIA(15) => blk00000003_blk0000025a_sig00000a71,
      DIA(14) => blk00000003_blk0000025a_sig00000a71,
      DIA(13) => blk00000003_blk0000025a_sig00000a71,
      DIA(12) => blk00000003_blk0000025a_sig00000a71,
      DIA(11) => blk00000003_blk0000025a_sig00000a71,
      DIA(10) => blk00000003_blk0000025a_sig00000a71,
      DIA(9) => blk00000003_blk0000025a_sig00000a71,
      DIA(8) => blk00000003_blk0000025a_sig00000a71,
      DIA(7) => blk00000003_sig000001f4,
      DIA(6) => blk00000003_sig000001f6,
      DIA(5) => blk00000003_sig000001f8,
      DIA(4) => blk00000003_sig000001fa,
      DIA(3) => blk00000003_sig000001fe,
      DIA(2) => blk00000003_sig00000200,
      DIA(1) => blk00000003_sig00000202,
      DIA(0) => blk00000003_sig00000204,
      DIB(15) => blk00000003_blk0000025a_sig00000a71,
      DIB(14) => blk00000003_blk0000025a_sig00000a71,
      DIB(13) => blk00000003_blk0000025a_sig00000a71,
      DIB(12) => blk00000003_blk0000025a_sig00000a71,
      DIB(11) => blk00000003_blk0000025a_sig00000a71,
      DIB(10) => blk00000003_blk0000025a_sig00000a71,
      DIB(9) => blk00000003_blk0000025a_sig00000a71,
      DIB(8) => blk00000003_blk0000025a_sig00000a71,
      DIB(7) => blk00000003_blk0000025a_sig00000a71,
      DIB(6) => blk00000003_blk0000025a_sig00000a71,
      DIB(5) => blk00000003_blk0000025a_sig00000a71,
      DIB(4) => blk00000003_blk0000025a_sig00000a71,
      DIB(3) => blk00000003_blk0000025a_sig00000a71,
      DIB(2) => blk00000003_blk0000025a_sig00000a71,
      DIB(1) => blk00000003_blk0000025a_sig00000a71,
      DIB(0) => blk00000003_blk0000025a_sig00000a71,
      DIPA(1) => blk00000003_blk0000025a_sig00000a71,
      DIPA(0) => blk00000003_sig000001fc,
      DIPB(1) => blk00000003_blk0000025a_sig00000a71,
      DIPB(0) => blk00000003_blk0000025a_sig00000a71,
      DOA(15) => NLW_blk00000003_blk0000025a_blk00000299_DOA_15_UNCONNECTED,
      DOA(14) => NLW_blk00000003_blk0000025a_blk00000299_DOA_14_UNCONNECTED,
      DOA(13) => NLW_blk00000003_blk0000025a_blk00000299_DOA_13_UNCONNECTED,
      DOA(12) => NLW_blk00000003_blk0000025a_blk00000299_DOA_12_UNCONNECTED,
      DOA(11) => NLW_blk00000003_blk0000025a_blk00000299_DOA_11_UNCONNECTED,
      DOA(10) => NLW_blk00000003_blk0000025a_blk00000299_DOA_10_UNCONNECTED,
      DOA(9) => NLW_blk00000003_blk0000025a_blk00000299_DOA_9_UNCONNECTED,
      DOA(8) => NLW_blk00000003_blk0000025a_blk00000299_DOA_8_UNCONNECTED,
      DOA(7) => NLW_blk00000003_blk0000025a_blk00000299_DOA_7_UNCONNECTED,
      DOA(6) => NLW_blk00000003_blk0000025a_blk00000299_DOA_6_UNCONNECTED,
      DOA(5) => NLW_blk00000003_blk0000025a_blk00000299_DOA_5_UNCONNECTED,
      DOA(4) => NLW_blk00000003_blk0000025a_blk00000299_DOA_4_UNCONNECTED,
      DOA(3) => NLW_blk00000003_blk0000025a_blk00000299_DOA_3_UNCONNECTED,
      DOA(2) => NLW_blk00000003_blk0000025a_blk00000299_DOA_2_UNCONNECTED,
      DOA(1) => NLW_blk00000003_blk0000025a_blk00000299_DOA_1_UNCONNECTED,
      DOA(0) => NLW_blk00000003_blk0000025a_blk00000299_DOA_0_UNCONNECTED,
      DOB(15) => NLW_blk00000003_blk0000025a_blk00000299_DOB_15_UNCONNECTED,
      DOB(14) => NLW_blk00000003_blk0000025a_blk00000299_DOB_14_UNCONNECTED,
      DOB(13) => NLW_blk00000003_blk0000025a_blk00000299_DOB_13_UNCONNECTED,
      DOB(12) => NLW_blk00000003_blk0000025a_blk00000299_DOB_12_UNCONNECTED,
      DOB(11) => NLW_blk00000003_blk0000025a_blk00000299_DOB_11_UNCONNECTED,
      DOB(10) => NLW_blk00000003_blk0000025a_blk00000299_DOB_10_UNCONNECTED,
      DOB(9) => NLW_blk00000003_blk0000025a_blk00000299_DOB_9_UNCONNECTED,
      DOB(8) => NLW_blk00000003_blk0000025a_blk00000299_DOB_8_UNCONNECTED,
      DOB(7) => blk00000003_blk0000025a_sig00000a95,
      DOB(6) => blk00000003_blk0000025a_sig00000a97,
      DOB(5) => blk00000003_blk0000025a_sig00000a99,
      DOB(4) => blk00000003_blk0000025a_sig00000a9b,
      DOB(3) => blk00000003_blk0000025a_sig00000a9d,
      DOB(2) => blk00000003_blk0000025a_sig00000a9f,
      DOB(1) => blk00000003_blk0000025a_sig00000aa1,
      DOB(0) => blk00000003_blk0000025a_sig00000aa3,
      DOPA(1) => NLW_blk00000003_blk0000025a_blk00000299_DOPA_1_UNCONNECTED,
      DOPA(0) => NLW_blk00000003_blk0000025a_blk00000299_DOPA_0_UNCONNECTED,
      DOPB(1) => NLW_blk00000003_blk0000025a_blk00000299_DOPB_1_UNCONNECTED,
      DOPB(0) => blk00000003_blk0000025a_sig00000aa5,
      WEA(1) => blk00000003_blk0000025a_sig00000a92,
      WEA(0) => blk00000003_blk0000025a_sig00000a92,
      WEB(1) => blk00000003_blk0000025a_sig00000a71,
      WEB(0) => blk00000003_blk0000025a_sig00000a71
    );
  blk00000003_blk0000025a_blk00000298 : LUT3
    generic map(
      INIT => X"D8"
    )
    port map (
      I0 => blk00000003_blk0000025a_sig00000a93,
      I1 => blk00000003_blk0000025a_sig00000ac8,
      I2 => blk00000003_blk0000025a_sig00000ac9,
      O => blk00000003_blk0000025a_sig00000a84
    );
  blk00000003_blk0000025a_blk00000297 : LUT3
    generic map(
      INIT => X"D8"
    )
    port map (
      I0 => blk00000003_blk0000025a_sig00000a93,
      I1 => blk00000003_blk0000025a_sig00000ac6,
      I2 => blk00000003_blk0000025a_sig00000ac7,
      O => blk00000003_blk0000025a_sig00000a85
    );
  blk00000003_blk0000025a_blk00000296 : LUT3
    generic map(
      INIT => X"D8"
    )
    port map (
      I0 => blk00000003_blk0000025a_sig00000a93,
      I1 => blk00000003_blk0000025a_sig00000ac4,
      I2 => blk00000003_blk0000025a_sig00000ac5,
      O => blk00000003_blk0000025a_sig00000a86
    );
  blk00000003_blk0000025a_blk00000295 : LUT3
    generic map(
      INIT => X"D8"
    )
    port map (
      I0 => blk00000003_blk0000025a_sig00000a93,
      I1 => blk00000003_blk0000025a_sig00000ac2,
      I2 => blk00000003_blk0000025a_sig00000ac3,
      O => blk00000003_blk0000025a_sig00000a87
    );
  blk00000003_blk0000025a_blk00000294 : LUT3
    generic map(
      INIT => X"D8"
    )
    port map (
      I0 => blk00000003_blk0000025a_sig00000a93,
      I1 => blk00000003_blk0000025a_sig00000ac0,
      I2 => blk00000003_blk0000025a_sig00000ac1,
      O => blk00000003_blk0000025a_sig00000a89
    );
  blk00000003_blk0000025a_blk00000293 : LUT3
    generic map(
      INIT => X"D8"
    )
    port map (
      I0 => blk00000003_blk0000025a_sig00000a93,
      I1 => blk00000003_blk0000025a_sig00000abe,
      I2 => blk00000003_blk0000025a_sig00000abf,
      O => blk00000003_blk0000025a_sig00000a8a
    );
  blk00000003_blk0000025a_blk00000292 : LUT3
    generic map(
      INIT => X"D8"
    )
    port map (
      I0 => blk00000003_blk0000025a_sig00000a93,
      I1 => blk00000003_blk0000025a_sig00000abc,
      I2 => blk00000003_blk0000025a_sig00000abd,
      O => blk00000003_blk0000025a_sig00000a8b
    );
  blk00000003_blk0000025a_blk00000291 : LUT3
    generic map(
      INIT => X"D8"
    )
    port map (
      I0 => blk00000003_blk0000025a_sig00000a93,
      I1 => blk00000003_blk0000025a_sig00000aba,
      I2 => blk00000003_blk0000025a_sig00000abb,
      O => blk00000003_blk0000025a_sig00000a8c
    );
  blk00000003_blk0000025a_blk00000290 : LUT3
    generic map(
      INIT => X"D8"
    )
    port map (
      I0 => blk00000003_blk0000025a_sig00000a93,
      I1 => blk00000003_blk0000025a_sig00000ab8,
      I2 => blk00000003_blk0000025a_sig00000ab9,
      O => blk00000003_blk0000025a_sig00000a7f
    );
  blk00000003_blk0000025a_blk0000028f : LUT3
    generic map(
      INIT => X"D8"
    )
    port map (
      I0 => blk00000003_blk0000025a_sig00000a93,
      I1 => blk00000003_blk0000025a_sig00000ab6,
      I2 => blk00000003_blk0000025a_sig00000ab7,
      O => blk00000003_blk0000025a_sig00000a88
    );
  blk00000003_blk0000025a_blk0000028e : LUT3
    generic map(
      INIT => X"D8"
    )
    port map (
      I0 => blk00000003_blk0000025a_sig00000a93,
      I1 => blk00000003_blk0000025a_sig00000ab4,
      I2 => blk00000003_blk0000025a_sig00000ab5,
      O => blk00000003_blk0000025a_sig00000a7b
    );
  blk00000003_blk0000025a_blk0000028d : LUT3
    generic map(
      INIT => X"D8"
    )
    port map (
      I0 => blk00000003_blk0000025a_sig00000a93,
      I1 => blk00000003_blk0000025a_sig00000ab2,
      I2 => blk00000003_blk0000025a_sig00000ab3,
      O => blk00000003_blk0000025a_sig00000a7c
    );
  blk00000003_blk0000025a_blk0000028c : LUT3
    generic map(
      INIT => X"D8"
    )
    port map (
      I0 => blk00000003_blk0000025a_sig00000a93,
      I1 => blk00000003_blk0000025a_sig00000ab0,
      I2 => blk00000003_blk0000025a_sig00000ab1,
      O => blk00000003_blk0000025a_sig00000a7d
    );
  blk00000003_blk0000025a_blk0000028b : LUT3
    generic map(
      INIT => X"D8"
    )
    port map (
      I0 => blk00000003_blk0000025a_sig00000a93,
      I1 => blk00000003_blk0000025a_sig00000aae,
      I2 => blk00000003_blk0000025a_sig00000aaf,
      O => blk00000003_blk0000025a_sig00000a7e
    );
  blk00000003_blk0000025a_blk0000028a : LUT3
    generic map(
      INIT => X"D8"
    )
    port map (
      I0 => blk00000003_blk0000025a_sig00000a93,
      I1 => blk00000003_blk0000025a_sig00000aac,
      I2 => blk00000003_blk0000025a_sig00000aad,
      O => blk00000003_blk0000025a_sig00000a80
    );
  blk00000003_blk0000025a_blk00000289 : LUT3
    generic map(
      INIT => X"D8"
    )
    port map (
      I0 => blk00000003_blk0000025a_sig00000a93,
      I1 => blk00000003_blk0000025a_sig00000aaa,
      I2 => blk00000003_blk0000025a_sig00000aab,
      O => blk00000003_blk0000025a_sig00000a81
    );
  blk00000003_blk0000025a_blk00000288 : LUT3
    generic map(
      INIT => X"D8"
    )
    port map (
      I0 => blk00000003_blk0000025a_sig00000a93,
      I1 => blk00000003_blk0000025a_sig00000aa8,
      I2 => blk00000003_blk0000025a_sig00000aa9,
      O => blk00000003_blk0000025a_sig00000a82
    );
  blk00000003_blk0000025a_blk00000287 : LUT3
    generic map(
      INIT => X"D8"
    )
    port map (
      I0 => blk00000003_blk0000025a_sig00000a93,
      I1 => blk00000003_blk0000025a_sig00000aa6,
      I2 => blk00000003_blk0000025a_sig00000aa7,
      O => blk00000003_blk0000025a_sig00000a83
    );
  blk00000003_blk0000025a_blk00000286 : LUT3
    generic map(
      INIT => X"D8"
    )
    port map (
      I0 => blk00000003_blk0000025a_sig00000a93,
      I1 => blk00000003_blk0000025a_sig00000aa4,
      I2 => blk00000003_blk0000025a_sig00000aa5,
      O => blk00000003_blk0000025a_sig00000a76
    );
  blk00000003_blk0000025a_blk00000285 : LUT3
    generic map(
      INIT => X"D8"
    )
    port map (
      I0 => blk00000003_blk0000025a_sig00000a93,
      I1 => blk00000003_blk0000025a_sig00000aa2,
      I2 => blk00000003_blk0000025a_sig00000aa3,
      O => blk00000003_blk0000025a_sig00000a72
    );
  blk00000003_blk0000025a_blk00000284 : LUT3
    generic map(
      INIT => X"D8"
    )
    port map (
      I0 => blk00000003_blk0000025a_sig00000a93,
      I1 => blk00000003_blk0000025a_sig00000aa0,
      I2 => blk00000003_blk0000025a_sig00000aa1,
      O => blk00000003_blk0000025a_sig00000a73
    );
  blk00000003_blk0000025a_blk00000283 : LUT3
    generic map(
      INIT => X"D8"
    )
    port map (
      I0 => blk00000003_blk0000025a_sig00000a93,
      I1 => blk00000003_blk0000025a_sig00000a9e,
      I2 => blk00000003_blk0000025a_sig00000a9f,
      O => blk00000003_blk0000025a_sig00000a74
    );
  blk00000003_blk0000025a_blk00000282 : LUT3
    generic map(
      INIT => X"D8"
    )
    port map (
      I0 => blk00000003_blk0000025a_sig00000a93,
      I1 => blk00000003_blk0000025a_sig00000a9c,
      I2 => blk00000003_blk0000025a_sig00000a9d,
      O => blk00000003_blk0000025a_sig00000a75
    );
  blk00000003_blk0000025a_blk00000281 : LUT3
    generic map(
      INIT => X"D8"
    )
    port map (
      I0 => blk00000003_blk0000025a_sig00000a93,
      I1 => blk00000003_blk0000025a_sig00000a9a,
      I2 => blk00000003_blk0000025a_sig00000a9b,
      O => blk00000003_blk0000025a_sig00000a77
    );
  blk00000003_blk0000025a_blk00000280 : LUT3
    generic map(
      INIT => X"D8"
    )
    port map (
      I0 => blk00000003_blk0000025a_sig00000a93,
      I1 => blk00000003_blk0000025a_sig00000a98,
      I2 => blk00000003_blk0000025a_sig00000a99,
      O => blk00000003_blk0000025a_sig00000a78
    );
  blk00000003_blk0000025a_blk0000027f : LUT3
    generic map(
      INIT => X"D8"
    )
    port map (
      I0 => blk00000003_blk0000025a_sig00000a93,
      I1 => blk00000003_blk0000025a_sig00000a96,
      I2 => blk00000003_blk0000025a_sig00000a97,
      O => blk00000003_blk0000025a_sig00000a79
    );
  blk00000003_blk0000025a_blk0000027e : LUT3
    generic map(
      INIT => X"D8"
    )
    port map (
      I0 => blk00000003_blk0000025a_sig00000a93,
      I1 => blk00000003_blk0000025a_sig00000a94,
      I2 => blk00000003_blk0000025a_sig00000a95,
      O => blk00000003_blk0000025a_sig00000a7a
    );
  blk00000003_blk0000025a_blk0000027d : LUT2
    generic map(
      INIT => X"4"
    )
    port map (
      I0 => blk00000003_sig0000031f,
      I1 => blk00000003_sig00000186,
      O => blk00000003_blk0000025a_sig00000a92
    );
  blk00000003_blk0000025a_blk0000027c : LUT2
    generic map(
      INIT => X"8"
    )
    port map (
      I0 => blk00000003_sig0000031f,
      I1 => blk00000003_sig00000186,
      O => blk00000003_blk0000025a_sig00000a91
    );
  blk00000003_blk0000025a_blk0000027b : RAMB18
    generic map(
      DOA_REG => 0,
      DOB_REG => 1,
      INITP_00 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INITP_01 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INITP_02 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INITP_03 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INITP_04 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INITP_05 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INITP_06 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INITP_07 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_00 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_01 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_02 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_03 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_04 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_05 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_06 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_07 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_08 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_09 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_0A => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_0B => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_0C => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_0D => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_0E => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_0F => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_10 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_11 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_12 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_13 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_14 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_15 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_16 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_17 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_18 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_19 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_1A => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_1B => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_1C => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_1D => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_1E => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_1F => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_20 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_21 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_22 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_23 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_24 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_25 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_26 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_27 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_28 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_29 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_2A => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_2B => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_2C => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_2D => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_2E => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_2F => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_30 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_31 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_32 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_33 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_34 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_35 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_36 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_37 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_38 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_39 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_3A => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_3B => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_3C => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_3D => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_3E => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_3F => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_A => X"00000",
      INIT_B => X"00000",
      INIT_FILE => "NONE",
      READ_WIDTH_A => 0,
      READ_WIDTH_B => 4,
      SIM_COLLISION_CHECK => "GENERATE_X_ONLY",
      SIM_MODE => "SAFE",
      SRVAL_A => X"00000",
      SRVAL_B => X"00000",
      WRITE_MODE_A => "READ_FIRST",
      WRITE_MODE_B => "READ_FIRST",
      WRITE_WIDTH_A => 4,
      WRITE_WIDTH_B => 0
    )
    port map (
      CLKA => clk,
      CLKB => clk,
      ENA => ce,
      ENB => ce,
      REGCEA => blk00000003_blk0000025a_sig00000a71,
      REGCEB => ce,
      SSRA => blk00000003_blk0000025a_sig00000a71,
      SSRB => blk00000003_blk0000025a_sig00000a71,
      ADDRA(13) => blk00000003_sig0000031f,
      ADDRA(12) => blk00000003_sig00000321,
      ADDRA(11) => blk00000003_sig00000323,
      ADDRA(10) => blk00000003_sig00000325,
      ADDRA(9) => blk00000003_sig00000327,
      ADDRA(8) => blk00000003_sig00000329,
      ADDRA(7) => blk00000003_sig0000032b,
      ADDRA(6) => blk00000003_sig0000032d,
      ADDRA(5) => blk00000003_sig0000032f,
      ADDRA(4) => blk00000003_sig00000331,
      ADDRA(3) => blk00000003_sig00000333,
      ADDRA(2) => blk00000003_sig00000335,
      ADDRA(1) => blk00000003_blk0000025a_sig00000a71,
      ADDRA(0) => blk00000003_blk0000025a_sig00000a71,
      ADDRB(13) => blk00000003_sig00000307,
      ADDRB(12) => blk00000003_sig00000309,
      ADDRB(11) => blk00000003_sig0000030b,
      ADDRB(10) => blk00000003_sig0000030d,
      ADDRB(9) => blk00000003_sig0000030f,
      ADDRB(8) => blk00000003_sig00000311,
      ADDRB(7) => blk00000003_sig00000313,
      ADDRB(6) => blk00000003_sig00000315,
      ADDRB(5) => blk00000003_sig00000317,
      ADDRB(4) => blk00000003_sig00000319,
      ADDRB(3) => blk00000003_sig0000031b,
      ADDRB(2) => blk00000003_sig0000031d,
      ADDRB(1) => blk00000003_blk0000025a_sig00000a71,
      ADDRB(0) => blk00000003_blk0000025a_sig00000a71,
      DIA(15) => blk00000003_blk0000025a_sig00000a71,
      DIA(14) => blk00000003_blk0000025a_sig00000a71,
      DIA(13) => blk00000003_blk0000025a_sig00000a71,
      DIA(12) => blk00000003_blk0000025a_sig00000a71,
      DIA(11) => blk00000003_blk0000025a_sig00000a71,
      DIA(10) => blk00000003_blk0000025a_sig00000a71,
      DIA(9) => blk00000003_blk0000025a_sig00000a71,
      DIA(8) => blk00000003_blk0000025a_sig00000a71,
      DIA(7) => blk00000003_blk0000025a_sig00000a71,
      DIA(6) => blk00000003_blk0000025a_sig00000a71,
      DIA(5) => blk00000003_blk0000025a_sig00000a71,
      DIA(4) => blk00000003_blk0000025a_sig00000a71,
      DIA(3) => blk00000003_sig000001c8,
      DIA(2) => blk00000003_sig000001ca,
      DIA(1) => blk00000003_sig000001cc,
      DIA(0) => blk00000003_sig000001ce,
      DIB(15) => blk00000003_blk0000025a_sig00000a71,
      DIB(14) => blk00000003_blk0000025a_sig00000a71,
      DIB(13) => blk00000003_blk0000025a_sig00000a71,
      DIB(12) => blk00000003_blk0000025a_sig00000a71,
      DIB(11) => blk00000003_blk0000025a_sig00000a71,
      DIB(10) => blk00000003_blk0000025a_sig00000a71,
      DIB(9) => blk00000003_blk0000025a_sig00000a71,
      DIB(8) => blk00000003_blk0000025a_sig00000a71,
      DIB(7) => blk00000003_blk0000025a_sig00000a71,
      DIB(6) => blk00000003_blk0000025a_sig00000a71,
      DIB(5) => blk00000003_blk0000025a_sig00000a71,
      DIB(4) => blk00000003_blk0000025a_sig00000a71,
      DIB(3) => blk00000003_blk0000025a_sig00000a71,
      DIB(2) => blk00000003_blk0000025a_sig00000a71,
      DIB(1) => blk00000003_blk0000025a_sig00000a71,
      DIB(0) => blk00000003_blk0000025a_sig00000a71,
      DIPA(1) => blk00000003_blk0000025a_sig00000a71,
      DIPA(0) => blk00000003_blk0000025a_sig00000a71,
      DIPB(1) => blk00000003_blk0000025a_sig00000a71,
      DIPB(0) => blk00000003_blk0000025a_sig00000a71,
      DOA(15) => NLW_blk00000003_blk0000025a_blk0000027b_DOA_15_UNCONNECTED,
      DOA(14) => NLW_blk00000003_blk0000025a_blk0000027b_DOA_14_UNCONNECTED,
      DOA(13) => NLW_blk00000003_blk0000025a_blk0000027b_DOA_13_UNCONNECTED,
      DOA(12) => NLW_blk00000003_blk0000025a_blk0000027b_DOA_12_UNCONNECTED,
      DOA(11) => NLW_blk00000003_blk0000025a_blk0000027b_DOA_11_UNCONNECTED,
      DOA(10) => NLW_blk00000003_blk0000025a_blk0000027b_DOA_10_UNCONNECTED,
      DOA(9) => NLW_blk00000003_blk0000025a_blk0000027b_DOA_9_UNCONNECTED,
      DOA(8) => NLW_blk00000003_blk0000025a_blk0000027b_DOA_8_UNCONNECTED,
      DOA(7) => NLW_blk00000003_blk0000025a_blk0000027b_DOA_7_UNCONNECTED,
      DOA(6) => NLW_blk00000003_blk0000025a_blk0000027b_DOA_6_UNCONNECTED,
      DOA(5) => NLW_blk00000003_blk0000025a_blk0000027b_DOA_5_UNCONNECTED,
      DOA(4) => NLW_blk00000003_blk0000025a_blk0000027b_DOA_4_UNCONNECTED,
      DOA(3) => NLW_blk00000003_blk0000025a_blk0000027b_DOA_3_UNCONNECTED,
      DOA(2) => NLW_blk00000003_blk0000025a_blk0000027b_DOA_2_UNCONNECTED,
      DOA(1) => NLW_blk00000003_blk0000025a_blk0000027b_DOA_1_UNCONNECTED,
      DOA(0) => NLW_blk00000003_blk0000025a_blk0000027b_DOA_0_UNCONNECTED,
      DOB(15) => NLW_blk00000003_blk0000025a_blk0000027b_DOB_15_UNCONNECTED,
      DOB(14) => NLW_blk00000003_blk0000025a_blk0000027b_DOB_14_UNCONNECTED,
      DOB(13) => NLW_blk00000003_blk0000025a_blk0000027b_DOB_13_UNCONNECTED,
      DOB(12) => NLW_blk00000003_blk0000025a_blk0000027b_DOB_12_UNCONNECTED,
      DOB(11) => NLW_blk00000003_blk0000025a_blk0000027b_DOB_11_UNCONNECTED,
      DOB(10) => NLW_blk00000003_blk0000025a_blk0000027b_DOB_10_UNCONNECTED,
      DOB(9) => NLW_blk00000003_blk0000025a_blk0000027b_DOB_9_UNCONNECTED,
      DOB(8) => NLW_blk00000003_blk0000025a_blk0000027b_DOB_8_UNCONNECTED,
      DOB(7) => NLW_blk00000003_blk0000025a_blk0000027b_DOB_7_UNCONNECTED,
      DOB(6) => NLW_blk00000003_blk0000025a_blk0000027b_DOB_6_UNCONNECTED,
      DOB(5) => NLW_blk00000003_blk0000025a_blk0000027b_DOB_5_UNCONNECTED,
      DOB(4) => NLW_blk00000003_blk0000025a_blk0000027b_DOB_4_UNCONNECTED,
      DOB(3) => blk00000003_blk0000025a_sig00000a90,
      DOB(2) => blk00000003_blk0000025a_sig00000a8f,
      DOB(1) => blk00000003_blk0000025a_sig00000a8e,
      DOB(0) => blk00000003_blk0000025a_sig00000a8d,
      DOPA(1) => NLW_blk00000003_blk0000025a_blk0000027b_DOPA_1_UNCONNECTED,
      DOPA(0) => NLW_blk00000003_blk0000025a_blk0000027b_DOPA_0_UNCONNECTED,
      DOPB(1) => NLW_blk00000003_blk0000025a_blk0000027b_DOPB_1_UNCONNECTED,
      DOPB(0) => NLW_blk00000003_blk0000025a_blk0000027b_DOPB_0_UNCONNECTED,
      WEA(1) => blk00000003_sig00000186,
      WEA(0) => blk00000003_sig00000186,
      WEB(1) => blk00000003_blk0000025a_sig00000a71,
      WEB(0) => blk00000003_blk0000025a_sig00000a71
    );
  blk00000003_blk0000025a_blk0000027a : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk0000025a_sig00000a90,
      Q => blk00000003_sig00000189
    );
  blk00000003_blk0000025a_blk00000279 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk0000025a_sig00000a8f,
      Q => blk00000003_sig0000018b
    );
  blk00000003_blk0000025a_blk00000278 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk0000025a_sig00000a8e,
      Q => blk00000003_sig0000018d
    );
  blk00000003_blk0000025a_blk00000277 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk0000025a_sig00000a8d,
      Q => blk00000003_sig0000018f
    );
  blk00000003_blk0000025a_blk00000276 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk0000025a_sig00000a8c,
      Q => blk00000003_sig00000191
    );
  blk00000003_blk0000025a_blk00000275 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk0000025a_sig00000a8b,
      Q => blk00000003_sig00000193
    );
  blk00000003_blk0000025a_blk00000274 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk0000025a_sig00000a8a,
      Q => blk00000003_sig00000195
    );
  blk00000003_blk0000025a_blk00000273 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk0000025a_sig00000a89,
      Q => blk00000003_sig00000197
    );
  blk00000003_blk0000025a_blk00000272 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk0000025a_sig00000a88,
      Q => blk00000003_sig00000199
    );
  blk00000003_blk0000025a_blk00000271 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk0000025a_sig00000a87,
      Q => blk00000003_sig0000019b
    );
  blk00000003_blk0000025a_blk00000270 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk0000025a_sig00000a86,
      Q => blk00000003_sig0000019d
    );
  blk00000003_blk0000025a_blk0000026f : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk0000025a_sig00000a85,
      Q => blk00000003_sig0000019f
    );
  blk00000003_blk0000025a_blk0000026e : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk0000025a_sig00000a84,
      Q => blk00000003_sig000001a1
    );
  blk00000003_blk0000025a_blk0000026d : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk0000025a_sig00000a83,
      Q => blk00000003_sig000001a3
    );
  blk00000003_blk0000025a_blk0000026c : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk0000025a_sig00000a82,
      Q => blk00000003_sig000001a5
    );
  blk00000003_blk0000025a_blk0000026b : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk0000025a_sig00000a81,
      Q => blk00000003_sig000001a7
    );
  blk00000003_blk0000025a_blk0000026a : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk0000025a_sig00000a80,
      Q => blk00000003_sig000001a9
    );
  blk00000003_blk0000025a_blk00000269 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk0000025a_sig00000a7f,
      Q => blk00000003_sig000001ab
    );
  blk00000003_blk0000025a_blk00000268 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk0000025a_sig00000a7e,
      Q => blk00000003_sig000001ad
    );
  blk00000003_blk0000025a_blk00000267 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk0000025a_sig00000a7d,
      Q => blk00000003_sig000001af
    );
  blk00000003_blk0000025a_blk00000266 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk0000025a_sig00000a7c,
      Q => blk00000003_sig000001b1
    );
  blk00000003_blk0000025a_blk00000265 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk0000025a_sig00000a7b,
      Q => blk00000003_sig000001b3
    );
  blk00000003_blk0000025a_blk00000264 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk0000025a_sig00000a7a,
      Q => blk00000003_sig000001b5
    );
  blk00000003_blk0000025a_blk00000263 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk0000025a_sig00000a79,
      Q => blk00000003_sig000001b7
    );
  blk00000003_blk0000025a_blk00000262 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk0000025a_sig00000a78,
      Q => blk00000003_sig000001b9
    );
  blk00000003_blk0000025a_blk00000261 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk0000025a_sig00000a77,
      Q => blk00000003_sig000001bb
    );
  blk00000003_blk0000025a_blk00000260 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk0000025a_sig00000a76,
      Q => blk00000003_sig000001bd
    );
  blk00000003_blk0000025a_blk0000025f : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk0000025a_sig00000a75,
      Q => blk00000003_sig000001bf
    );
  blk00000003_blk0000025a_blk0000025e : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk0000025a_sig00000a74,
      Q => blk00000003_sig000001c1
    );
  blk00000003_blk0000025a_blk0000025d : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk0000025a_sig00000a73,
      Q => blk00000003_sig000001c3
    );
  blk00000003_blk0000025a_blk0000025c : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk0000025a_sig00000a72,
      Q => blk00000003_sig000001c5
    );
  blk00000003_blk0000025a_blk0000025b : GND
    port map (
      G => blk00000003_blk0000025a_sig00000a71
    );
  blk00000003_blk000002a1_blk000002e7 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk000002a1_sig00000b7e,
      Q => blk00000003_blk000002a1_sig00000b47
    );
  blk00000003_blk000002a1_blk000002e6 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk000002a1_sig00000b25,
      A1 => blk00000003_blk000002a1_sig00000b25,
      A2 => blk00000003_blk000002a1_sig00000b25,
      A3 => blk00000003_blk000002a1_sig00000b25,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig00000307,
      Q => blk00000003_blk000002a1_sig00000b7e,
      Q15 => NLW_blk00000003_blk000002a1_blk000002e6_Q15_UNCONNECTED
    );
  blk00000003_blk000002a1_blk000002e5 : RAMB18
    generic map(
      DOA_REG => 0,
      DOB_REG => 1,
      INITP_00 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INITP_01 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INITP_02 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INITP_03 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INITP_04 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INITP_05 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INITP_06 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INITP_07 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_00 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_01 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_02 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_03 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_04 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_05 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_06 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_07 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_08 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_09 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_0A => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_0B => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_0C => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_0D => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_0E => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_0F => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_10 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_11 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_12 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_13 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_14 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_15 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_16 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_17 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_18 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_19 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_1A => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_1B => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_1C => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_1D => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_1E => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_1F => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_20 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_21 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_22 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_23 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_24 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_25 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_26 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_27 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_28 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_29 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_2A => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_2B => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_2C => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_2D => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_2E => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_2F => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_30 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_31 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_32 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_33 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_34 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_35 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_36 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_37 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_38 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_39 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_3A => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_3B => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_3C => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_3D => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_3E => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_3F => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_A => X"00000",
      INIT_B => X"00000",
      INIT_FILE => "NONE",
      READ_WIDTH_A => 0,
      READ_WIDTH_B => 9,
      SIM_COLLISION_CHECK => "GENERATE_X_ONLY",
      SIM_MODE => "SAFE",
      SRVAL_A => X"00000",
      SRVAL_B => X"00000",
      WRITE_MODE_A => "READ_FIRST",
      WRITE_MODE_B => "READ_FIRST",
      WRITE_WIDTH_A => 9,
      WRITE_WIDTH_B => 0
    )
    port map (
      CLKA => clk,
      CLKB => clk,
      ENA => ce,
      ENB => ce,
      REGCEA => blk00000003_blk000002a1_sig00000b25,
      REGCEB => ce,
      SSRA => blk00000003_blk000002a1_sig00000b25,
      SSRB => blk00000003_blk000002a1_sig00000b25,
      ADDRA(13) => blk00000003_sig00000321,
      ADDRA(12) => blk00000003_sig00000323,
      ADDRA(11) => blk00000003_sig00000325,
      ADDRA(10) => blk00000003_sig00000327,
      ADDRA(9) => blk00000003_sig00000329,
      ADDRA(8) => blk00000003_sig0000032b,
      ADDRA(7) => blk00000003_sig0000032d,
      ADDRA(6) => blk00000003_sig0000032f,
      ADDRA(5) => blk00000003_sig00000331,
      ADDRA(4) => blk00000003_sig00000333,
      ADDRA(3) => blk00000003_sig00000335,
      ADDRA(2) => blk00000003_blk000002a1_sig00000b25,
      ADDRA(1) => blk00000003_blk000002a1_sig00000b25,
      ADDRA(0) => blk00000003_blk000002a1_sig00000b25,
      ADDRB(13) => blk00000003_sig00000309,
      ADDRB(12) => blk00000003_sig0000030b,
      ADDRB(11) => blk00000003_sig0000030d,
      ADDRB(10) => blk00000003_sig0000030f,
      ADDRB(9) => blk00000003_sig00000311,
      ADDRB(8) => blk00000003_sig00000313,
      ADDRB(7) => blk00000003_sig00000315,
      ADDRB(6) => blk00000003_sig00000317,
      ADDRB(5) => blk00000003_sig00000319,
      ADDRB(4) => blk00000003_sig0000031b,
      ADDRB(3) => blk00000003_sig0000031d,
      ADDRB(2) => blk00000003_blk000002a1_sig00000b25,
      ADDRB(1) => blk00000003_blk000002a1_sig00000b25,
      ADDRB(0) => blk00000003_blk000002a1_sig00000b25,
      DIA(15) => blk00000003_blk000002a1_sig00000b25,
      DIA(14) => blk00000003_blk000002a1_sig00000b25,
      DIA(13) => blk00000003_blk000002a1_sig00000b25,
      DIA(12) => blk00000003_blk000002a1_sig00000b25,
      DIA(11) => blk00000003_blk000002a1_sig00000b25,
      DIA(10) => blk00000003_blk000002a1_sig00000b25,
      DIA(9) => blk00000003_blk000002a1_sig00000b25,
      DIA(8) => blk00000003_blk000002a1_sig00000b25,
      DIA(7) => blk00000003_sig0000020e,
      DIA(6) => blk00000003_sig00000210,
      DIA(5) => blk00000003_sig00000212,
      DIA(4) => blk00000003_sig00000214,
      DIA(3) => blk00000003_sig00000218,
      DIA(2) => blk00000003_sig0000021a,
      DIA(1) => blk00000003_sig0000021c,
      DIA(0) => blk00000003_sig0000021e,
      DIB(15) => blk00000003_blk000002a1_sig00000b25,
      DIB(14) => blk00000003_blk000002a1_sig00000b25,
      DIB(13) => blk00000003_blk000002a1_sig00000b25,
      DIB(12) => blk00000003_blk000002a1_sig00000b25,
      DIB(11) => blk00000003_blk000002a1_sig00000b25,
      DIB(10) => blk00000003_blk000002a1_sig00000b25,
      DIB(9) => blk00000003_blk000002a1_sig00000b25,
      DIB(8) => blk00000003_blk000002a1_sig00000b25,
      DIB(7) => blk00000003_blk000002a1_sig00000b25,
      DIB(6) => blk00000003_blk000002a1_sig00000b25,
      DIB(5) => blk00000003_blk000002a1_sig00000b25,
      DIB(4) => blk00000003_blk000002a1_sig00000b25,
      DIB(3) => blk00000003_blk000002a1_sig00000b25,
      DIB(2) => blk00000003_blk000002a1_sig00000b25,
      DIB(1) => blk00000003_blk000002a1_sig00000b25,
      DIB(0) => blk00000003_blk000002a1_sig00000b25,
      DIPA(1) => blk00000003_blk000002a1_sig00000b25,
      DIPA(0) => blk00000003_sig00000216,
      DIPB(1) => blk00000003_blk000002a1_sig00000b25,
      DIPB(0) => blk00000003_blk000002a1_sig00000b25,
      DOA(15) => NLW_blk00000003_blk000002a1_blk000002e5_DOA_15_UNCONNECTED,
      DOA(14) => NLW_blk00000003_blk000002a1_blk000002e5_DOA_14_UNCONNECTED,
      DOA(13) => NLW_blk00000003_blk000002a1_blk000002e5_DOA_13_UNCONNECTED,
      DOA(12) => NLW_blk00000003_blk000002a1_blk000002e5_DOA_12_UNCONNECTED,
      DOA(11) => NLW_blk00000003_blk000002a1_blk000002e5_DOA_11_UNCONNECTED,
      DOA(10) => NLW_blk00000003_blk000002a1_blk000002e5_DOA_10_UNCONNECTED,
      DOA(9) => NLW_blk00000003_blk000002a1_blk000002e5_DOA_9_UNCONNECTED,
      DOA(8) => NLW_blk00000003_blk000002a1_blk000002e5_DOA_8_UNCONNECTED,
      DOA(7) => NLW_blk00000003_blk000002a1_blk000002e5_DOA_7_UNCONNECTED,
      DOA(6) => NLW_blk00000003_blk000002a1_blk000002e5_DOA_6_UNCONNECTED,
      DOA(5) => NLW_blk00000003_blk000002a1_blk000002e5_DOA_5_UNCONNECTED,
      DOA(4) => NLW_blk00000003_blk000002a1_blk000002e5_DOA_4_UNCONNECTED,
      DOA(3) => NLW_blk00000003_blk000002a1_blk000002e5_DOA_3_UNCONNECTED,
      DOA(2) => NLW_blk00000003_blk000002a1_blk000002e5_DOA_2_UNCONNECTED,
      DOA(1) => NLW_blk00000003_blk000002a1_blk000002e5_DOA_1_UNCONNECTED,
      DOA(0) => NLW_blk00000003_blk000002a1_blk000002e5_DOA_0_UNCONNECTED,
      DOB(15) => NLW_blk00000003_blk000002a1_blk000002e5_DOB_15_UNCONNECTED,
      DOB(14) => NLW_blk00000003_blk000002a1_blk000002e5_DOB_14_UNCONNECTED,
      DOB(13) => NLW_blk00000003_blk000002a1_blk000002e5_DOB_13_UNCONNECTED,
      DOB(12) => NLW_blk00000003_blk000002a1_blk000002e5_DOB_12_UNCONNECTED,
      DOB(11) => NLW_blk00000003_blk000002a1_blk000002e5_DOB_11_UNCONNECTED,
      DOB(10) => NLW_blk00000003_blk000002a1_blk000002e5_DOB_10_UNCONNECTED,
      DOB(9) => NLW_blk00000003_blk000002a1_blk000002e5_DOB_9_UNCONNECTED,
      DOB(8) => NLW_blk00000003_blk000002a1_blk000002e5_DOB_8_UNCONNECTED,
      DOB(7) => blk00000003_blk000002a1_sig00000b6e,
      DOB(6) => blk00000003_blk000002a1_sig00000b70,
      DOB(5) => blk00000003_blk000002a1_sig00000b72,
      DOB(4) => blk00000003_blk000002a1_sig00000b74,
      DOB(3) => blk00000003_blk000002a1_sig00000b76,
      DOB(2) => blk00000003_blk000002a1_sig00000b78,
      DOB(1) => blk00000003_blk000002a1_sig00000b7a,
      DOB(0) => blk00000003_blk000002a1_sig00000b7c,
      DOPA(1) => NLW_blk00000003_blk000002a1_blk000002e5_DOPA_1_UNCONNECTED,
      DOPA(0) => NLW_blk00000003_blk000002a1_blk000002e5_DOPA_0_UNCONNECTED,
      DOPB(1) => NLW_blk00000003_blk000002a1_blk000002e5_DOPB_1_UNCONNECTED,
      DOPB(0) => blk00000003_blk000002a1_sig00000b6a,
      WEA(1) => blk00000003_blk000002a1_sig00000b45,
      WEA(0) => blk00000003_blk000002a1_sig00000b45,
      WEB(1) => blk00000003_blk000002a1_sig00000b25,
      WEB(0) => blk00000003_blk000002a1_sig00000b25
    );
  blk00000003_blk000002a1_blk000002e4 : RAMB18
    generic map(
      DOA_REG => 0,
      DOB_REG => 1,
      INITP_00 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INITP_01 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INITP_02 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INITP_03 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INITP_04 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INITP_05 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INITP_06 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INITP_07 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_00 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_01 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_02 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_03 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_04 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_05 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_06 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_07 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_08 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_09 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_0A => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_0B => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_0C => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_0D => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_0E => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_0F => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_10 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_11 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_12 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_13 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_14 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_15 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_16 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_17 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_18 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_19 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_1A => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_1B => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_1C => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_1D => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_1E => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_1F => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_20 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_21 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_22 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_23 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_24 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_25 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_26 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_27 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_28 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_29 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_2A => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_2B => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_2C => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_2D => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_2E => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_2F => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_30 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_31 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_32 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_33 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_34 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_35 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_36 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_37 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_38 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_39 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_3A => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_3B => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_3C => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_3D => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_3E => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_3F => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_A => X"00000",
      INIT_B => X"00000",
      INIT_FILE => "NONE",
      READ_WIDTH_A => 0,
      READ_WIDTH_B => 9,
      SIM_COLLISION_CHECK => "GENERATE_X_ONLY",
      SIM_MODE => "SAFE",
      SRVAL_A => X"00000",
      SRVAL_B => X"00000",
      WRITE_MODE_A => "READ_FIRST",
      WRITE_MODE_B => "READ_FIRST",
      WRITE_WIDTH_A => 9,
      WRITE_WIDTH_B => 0
    )
    port map (
      CLKA => clk,
      CLKB => clk,
      ENA => ce,
      ENB => ce,
      REGCEA => blk00000003_blk000002a1_sig00000b25,
      REGCEB => ce,
      SSRA => blk00000003_blk000002a1_sig00000b25,
      SSRB => blk00000003_blk000002a1_sig00000b25,
      ADDRA(13) => blk00000003_sig00000321,
      ADDRA(12) => blk00000003_sig00000323,
      ADDRA(11) => blk00000003_sig00000325,
      ADDRA(10) => blk00000003_sig00000327,
      ADDRA(9) => blk00000003_sig00000329,
      ADDRA(8) => blk00000003_sig0000032b,
      ADDRA(7) => blk00000003_sig0000032d,
      ADDRA(6) => blk00000003_sig0000032f,
      ADDRA(5) => blk00000003_sig00000331,
      ADDRA(4) => blk00000003_sig00000333,
      ADDRA(3) => blk00000003_sig00000335,
      ADDRA(2) => blk00000003_blk000002a1_sig00000b25,
      ADDRA(1) => blk00000003_blk000002a1_sig00000b25,
      ADDRA(0) => blk00000003_blk000002a1_sig00000b25,
      ADDRB(13) => blk00000003_sig00000309,
      ADDRB(12) => blk00000003_sig0000030b,
      ADDRB(11) => blk00000003_sig0000030d,
      ADDRB(10) => blk00000003_sig0000030f,
      ADDRB(9) => blk00000003_sig00000311,
      ADDRB(8) => blk00000003_sig00000313,
      ADDRB(7) => blk00000003_sig00000315,
      ADDRB(6) => blk00000003_sig00000317,
      ADDRB(5) => blk00000003_sig00000319,
      ADDRB(4) => blk00000003_sig0000031b,
      ADDRB(3) => blk00000003_sig0000031d,
      ADDRB(2) => blk00000003_blk000002a1_sig00000b25,
      ADDRB(1) => blk00000003_blk000002a1_sig00000b25,
      ADDRB(0) => blk00000003_blk000002a1_sig00000b25,
      DIA(15) => blk00000003_blk000002a1_sig00000b25,
      DIA(14) => blk00000003_blk000002a1_sig00000b25,
      DIA(13) => blk00000003_blk000002a1_sig00000b25,
      DIA(12) => blk00000003_blk000002a1_sig00000b25,
      DIA(11) => blk00000003_blk000002a1_sig00000b25,
      DIA(10) => blk00000003_blk000002a1_sig00000b25,
      DIA(9) => blk00000003_blk000002a1_sig00000b25,
      DIA(8) => blk00000003_blk000002a1_sig00000b25,
      DIA(7) => blk00000003_sig0000020e,
      DIA(6) => blk00000003_sig00000210,
      DIA(5) => blk00000003_sig00000212,
      DIA(4) => blk00000003_sig00000214,
      DIA(3) => blk00000003_sig00000218,
      DIA(2) => blk00000003_sig0000021a,
      DIA(1) => blk00000003_sig0000021c,
      DIA(0) => blk00000003_sig0000021e,
      DIB(15) => blk00000003_blk000002a1_sig00000b25,
      DIB(14) => blk00000003_blk000002a1_sig00000b25,
      DIB(13) => blk00000003_blk000002a1_sig00000b25,
      DIB(12) => blk00000003_blk000002a1_sig00000b25,
      DIB(11) => blk00000003_blk000002a1_sig00000b25,
      DIB(10) => blk00000003_blk000002a1_sig00000b25,
      DIB(9) => blk00000003_blk000002a1_sig00000b25,
      DIB(8) => blk00000003_blk000002a1_sig00000b25,
      DIB(7) => blk00000003_blk000002a1_sig00000b25,
      DIB(6) => blk00000003_blk000002a1_sig00000b25,
      DIB(5) => blk00000003_blk000002a1_sig00000b25,
      DIB(4) => blk00000003_blk000002a1_sig00000b25,
      DIB(3) => blk00000003_blk000002a1_sig00000b25,
      DIB(2) => blk00000003_blk000002a1_sig00000b25,
      DIB(1) => blk00000003_blk000002a1_sig00000b25,
      DIB(0) => blk00000003_blk000002a1_sig00000b25,
      DIPA(1) => blk00000003_blk000002a1_sig00000b25,
      DIPA(0) => blk00000003_sig00000216,
      DIPB(1) => blk00000003_blk000002a1_sig00000b25,
      DIPB(0) => blk00000003_blk000002a1_sig00000b25,
      DOA(15) => NLW_blk00000003_blk000002a1_blk000002e4_DOA_15_UNCONNECTED,
      DOA(14) => NLW_blk00000003_blk000002a1_blk000002e4_DOA_14_UNCONNECTED,
      DOA(13) => NLW_blk00000003_blk000002a1_blk000002e4_DOA_13_UNCONNECTED,
      DOA(12) => NLW_blk00000003_blk000002a1_blk000002e4_DOA_12_UNCONNECTED,
      DOA(11) => NLW_blk00000003_blk000002a1_blk000002e4_DOA_11_UNCONNECTED,
      DOA(10) => NLW_blk00000003_blk000002a1_blk000002e4_DOA_10_UNCONNECTED,
      DOA(9) => NLW_blk00000003_blk000002a1_blk000002e4_DOA_9_UNCONNECTED,
      DOA(8) => NLW_blk00000003_blk000002a1_blk000002e4_DOA_8_UNCONNECTED,
      DOA(7) => NLW_blk00000003_blk000002a1_blk000002e4_DOA_7_UNCONNECTED,
      DOA(6) => NLW_blk00000003_blk000002a1_blk000002e4_DOA_6_UNCONNECTED,
      DOA(5) => NLW_blk00000003_blk000002a1_blk000002e4_DOA_5_UNCONNECTED,
      DOA(4) => NLW_blk00000003_blk000002a1_blk000002e4_DOA_4_UNCONNECTED,
      DOA(3) => NLW_blk00000003_blk000002a1_blk000002e4_DOA_3_UNCONNECTED,
      DOA(2) => NLW_blk00000003_blk000002a1_blk000002e4_DOA_2_UNCONNECTED,
      DOA(1) => NLW_blk00000003_blk000002a1_blk000002e4_DOA_1_UNCONNECTED,
      DOA(0) => NLW_blk00000003_blk000002a1_blk000002e4_DOA_0_UNCONNECTED,
      DOB(15) => NLW_blk00000003_blk000002a1_blk000002e4_DOB_15_UNCONNECTED,
      DOB(14) => NLW_blk00000003_blk000002a1_blk000002e4_DOB_14_UNCONNECTED,
      DOB(13) => NLW_blk00000003_blk000002a1_blk000002e4_DOB_13_UNCONNECTED,
      DOB(12) => NLW_blk00000003_blk000002a1_blk000002e4_DOB_12_UNCONNECTED,
      DOB(11) => NLW_blk00000003_blk000002a1_blk000002e4_DOB_11_UNCONNECTED,
      DOB(10) => NLW_blk00000003_blk000002a1_blk000002e4_DOB_10_UNCONNECTED,
      DOB(9) => NLW_blk00000003_blk000002a1_blk000002e4_DOB_9_UNCONNECTED,
      DOB(8) => NLW_blk00000003_blk000002a1_blk000002e4_DOB_8_UNCONNECTED,
      DOB(7) => blk00000003_blk000002a1_sig00000b6f,
      DOB(6) => blk00000003_blk000002a1_sig00000b71,
      DOB(5) => blk00000003_blk000002a1_sig00000b73,
      DOB(4) => blk00000003_blk000002a1_sig00000b75,
      DOB(3) => blk00000003_blk000002a1_sig00000b77,
      DOB(2) => blk00000003_blk000002a1_sig00000b79,
      DOB(1) => blk00000003_blk000002a1_sig00000b7b,
      DOB(0) => blk00000003_blk000002a1_sig00000b7d,
      DOPA(1) => NLW_blk00000003_blk000002a1_blk000002e4_DOPA_1_UNCONNECTED,
      DOPA(0) => NLW_blk00000003_blk000002a1_blk000002e4_DOPA_0_UNCONNECTED,
      DOPB(1) => NLW_blk00000003_blk000002a1_blk000002e4_DOPB_1_UNCONNECTED,
      DOPB(0) => blk00000003_blk000002a1_sig00000b6b,
      WEA(1) => blk00000003_blk000002a1_sig00000b46,
      WEA(0) => blk00000003_blk000002a1_sig00000b46,
      WEB(1) => blk00000003_blk000002a1_sig00000b25,
      WEB(0) => blk00000003_blk000002a1_sig00000b25
    );
  blk00000003_blk000002a1_blk000002e3 : RAMB18
    generic map(
      DOA_REG => 0,
      DOB_REG => 1,
      INITP_00 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INITP_01 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INITP_02 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INITP_03 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INITP_04 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INITP_05 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INITP_06 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INITP_07 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_00 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_01 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_02 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_03 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_04 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_05 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_06 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_07 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_08 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_09 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_0A => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_0B => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_0C => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_0D => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_0E => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_0F => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_10 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_11 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_12 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_13 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_14 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_15 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_16 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_17 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_18 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_19 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_1A => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_1B => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_1C => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_1D => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_1E => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_1F => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_20 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_21 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_22 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_23 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_24 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_25 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_26 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_27 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_28 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_29 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_2A => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_2B => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_2C => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_2D => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_2E => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_2F => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_30 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_31 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_32 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_33 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_34 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_35 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_36 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_37 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_38 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_39 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_3A => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_3B => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_3C => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_3D => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_3E => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_3F => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_A => X"00000",
      INIT_B => X"00000",
      INIT_FILE => "NONE",
      READ_WIDTH_A => 0,
      READ_WIDTH_B => 9,
      SIM_COLLISION_CHECK => "GENERATE_X_ONLY",
      SIM_MODE => "SAFE",
      SRVAL_A => X"00000",
      SRVAL_B => X"00000",
      WRITE_MODE_A => "READ_FIRST",
      WRITE_MODE_B => "READ_FIRST",
      WRITE_WIDTH_A => 9,
      WRITE_WIDTH_B => 0
    )
    port map (
      CLKA => clk,
      CLKB => clk,
      ENA => ce,
      ENB => ce,
      REGCEA => blk00000003_blk000002a1_sig00000b25,
      REGCEB => ce,
      SSRA => blk00000003_blk000002a1_sig00000b25,
      SSRB => blk00000003_blk000002a1_sig00000b25,
      ADDRA(13) => blk00000003_sig00000321,
      ADDRA(12) => blk00000003_sig00000323,
      ADDRA(11) => blk00000003_sig00000325,
      ADDRA(10) => blk00000003_sig00000327,
      ADDRA(9) => blk00000003_sig00000329,
      ADDRA(8) => blk00000003_sig0000032b,
      ADDRA(7) => blk00000003_sig0000032d,
      ADDRA(6) => blk00000003_sig0000032f,
      ADDRA(5) => blk00000003_sig00000331,
      ADDRA(4) => blk00000003_sig00000333,
      ADDRA(3) => blk00000003_sig00000335,
      ADDRA(2) => blk00000003_blk000002a1_sig00000b25,
      ADDRA(1) => blk00000003_blk000002a1_sig00000b25,
      ADDRA(0) => blk00000003_blk000002a1_sig00000b25,
      ADDRB(13) => blk00000003_sig00000309,
      ADDRB(12) => blk00000003_sig0000030b,
      ADDRB(11) => blk00000003_sig0000030d,
      ADDRB(10) => blk00000003_sig0000030f,
      ADDRB(9) => blk00000003_sig00000311,
      ADDRB(8) => blk00000003_sig00000313,
      ADDRB(7) => blk00000003_sig00000315,
      ADDRB(6) => blk00000003_sig00000317,
      ADDRB(5) => blk00000003_sig00000319,
      ADDRB(4) => blk00000003_sig0000031b,
      ADDRB(3) => blk00000003_sig0000031d,
      ADDRB(2) => blk00000003_blk000002a1_sig00000b25,
      ADDRB(1) => blk00000003_blk000002a1_sig00000b25,
      ADDRB(0) => blk00000003_blk000002a1_sig00000b25,
      DIA(15) => blk00000003_blk000002a1_sig00000b25,
      DIA(14) => blk00000003_blk000002a1_sig00000b25,
      DIA(13) => blk00000003_blk000002a1_sig00000b25,
      DIA(12) => blk00000003_blk000002a1_sig00000b25,
      DIA(11) => blk00000003_blk000002a1_sig00000b25,
      DIA(10) => blk00000003_blk000002a1_sig00000b25,
      DIA(9) => blk00000003_blk000002a1_sig00000b25,
      DIA(8) => blk00000003_blk000002a1_sig00000b25,
      DIA(7) => blk00000003_sig00000220,
      DIA(6) => blk00000003_sig00000222,
      DIA(5) => blk00000003_sig00000224,
      DIA(4) => blk00000003_sig00000226,
      DIA(3) => blk00000003_sig0000022a,
      DIA(2) => blk00000003_sig0000022c,
      DIA(1) => blk00000003_sig0000022e,
      DIA(0) => blk00000003_sig00000230,
      DIB(15) => blk00000003_blk000002a1_sig00000b25,
      DIB(14) => blk00000003_blk000002a1_sig00000b25,
      DIB(13) => blk00000003_blk000002a1_sig00000b25,
      DIB(12) => blk00000003_blk000002a1_sig00000b25,
      DIB(11) => blk00000003_blk000002a1_sig00000b25,
      DIB(10) => blk00000003_blk000002a1_sig00000b25,
      DIB(9) => blk00000003_blk000002a1_sig00000b25,
      DIB(8) => blk00000003_blk000002a1_sig00000b25,
      DIB(7) => blk00000003_blk000002a1_sig00000b25,
      DIB(6) => blk00000003_blk000002a1_sig00000b25,
      DIB(5) => blk00000003_blk000002a1_sig00000b25,
      DIB(4) => blk00000003_blk000002a1_sig00000b25,
      DIB(3) => blk00000003_blk000002a1_sig00000b25,
      DIB(2) => blk00000003_blk000002a1_sig00000b25,
      DIB(1) => blk00000003_blk000002a1_sig00000b25,
      DIB(0) => blk00000003_blk000002a1_sig00000b25,
      DIPA(1) => blk00000003_blk000002a1_sig00000b25,
      DIPA(0) => blk00000003_sig00000228,
      DIPB(1) => blk00000003_blk000002a1_sig00000b25,
      DIPB(0) => blk00000003_blk000002a1_sig00000b25,
      DOA(15) => NLW_blk00000003_blk000002a1_blk000002e3_DOA_15_UNCONNECTED,
      DOA(14) => NLW_blk00000003_blk000002a1_blk000002e3_DOA_14_UNCONNECTED,
      DOA(13) => NLW_blk00000003_blk000002a1_blk000002e3_DOA_13_UNCONNECTED,
      DOA(12) => NLW_blk00000003_blk000002a1_blk000002e3_DOA_12_UNCONNECTED,
      DOA(11) => NLW_blk00000003_blk000002a1_blk000002e3_DOA_11_UNCONNECTED,
      DOA(10) => NLW_blk00000003_blk000002a1_blk000002e3_DOA_10_UNCONNECTED,
      DOA(9) => NLW_blk00000003_blk000002a1_blk000002e3_DOA_9_UNCONNECTED,
      DOA(8) => NLW_blk00000003_blk000002a1_blk000002e3_DOA_8_UNCONNECTED,
      DOA(7) => NLW_blk00000003_blk000002a1_blk000002e3_DOA_7_UNCONNECTED,
      DOA(6) => NLW_blk00000003_blk000002a1_blk000002e3_DOA_6_UNCONNECTED,
      DOA(5) => NLW_blk00000003_blk000002a1_blk000002e3_DOA_5_UNCONNECTED,
      DOA(4) => NLW_blk00000003_blk000002a1_blk000002e3_DOA_4_UNCONNECTED,
      DOA(3) => NLW_blk00000003_blk000002a1_blk000002e3_DOA_3_UNCONNECTED,
      DOA(2) => NLW_blk00000003_blk000002a1_blk000002e3_DOA_2_UNCONNECTED,
      DOA(1) => NLW_blk00000003_blk000002a1_blk000002e3_DOA_1_UNCONNECTED,
      DOA(0) => NLW_blk00000003_blk000002a1_blk000002e3_DOA_0_UNCONNECTED,
      DOB(15) => NLW_blk00000003_blk000002a1_blk000002e3_DOB_15_UNCONNECTED,
      DOB(14) => NLW_blk00000003_blk000002a1_blk000002e3_DOB_14_UNCONNECTED,
      DOB(13) => NLW_blk00000003_blk000002a1_blk000002e3_DOB_13_UNCONNECTED,
      DOB(12) => NLW_blk00000003_blk000002a1_blk000002e3_DOB_12_UNCONNECTED,
      DOB(11) => NLW_blk00000003_blk000002a1_blk000002e3_DOB_11_UNCONNECTED,
      DOB(10) => NLW_blk00000003_blk000002a1_blk000002e3_DOB_10_UNCONNECTED,
      DOB(9) => NLW_blk00000003_blk000002a1_blk000002e3_DOB_9_UNCONNECTED,
      DOB(8) => NLW_blk00000003_blk000002a1_blk000002e3_DOB_8_UNCONNECTED,
      DOB(7) => blk00000003_blk000002a1_sig00000b5a,
      DOB(6) => blk00000003_blk000002a1_sig00000b5c,
      DOB(5) => blk00000003_blk000002a1_sig00000b5e,
      DOB(4) => blk00000003_blk000002a1_sig00000b60,
      DOB(3) => blk00000003_blk000002a1_sig00000b62,
      DOB(2) => blk00000003_blk000002a1_sig00000b64,
      DOB(1) => blk00000003_blk000002a1_sig00000b66,
      DOB(0) => blk00000003_blk000002a1_sig00000b68,
      DOPA(1) => NLW_blk00000003_blk000002a1_blk000002e3_DOPA_1_UNCONNECTED,
      DOPA(0) => NLW_blk00000003_blk000002a1_blk000002e3_DOPA_0_UNCONNECTED,
      DOPB(1) => NLW_blk00000003_blk000002a1_blk000002e3_DOPB_1_UNCONNECTED,
      DOPB(0) => blk00000003_blk000002a1_sig00000b6c,
      WEA(1) => blk00000003_blk000002a1_sig00000b45,
      WEA(0) => blk00000003_blk000002a1_sig00000b45,
      WEB(1) => blk00000003_blk000002a1_sig00000b25,
      WEB(0) => blk00000003_blk000002a1_sig00000b25
    );
  blk00000003_blk000002a1_blk000002e2 : RAMB18
    generic map(
      DOA_REG => 0,
      DOB_REG => 1,
      INITP_00 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INITP_01 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INITP_02 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INITP_03 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INITP_04 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INITP_05 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INITP_06 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INITP_07 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_00 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_01 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_02 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_03 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_04 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_05 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_06 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_07 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_08 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_09 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_0A => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_0B => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_0C => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_0D => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_0E => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_0F => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_10 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_11 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_12 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_13 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_14 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_15 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_16 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_17 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_18 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_19 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_1A => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_1B => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_1C => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_1D => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_1E => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_1F => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_20 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_21 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_22 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_23 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_24 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_25 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_26 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_27 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_28 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_29 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_2A => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_2B => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_2C => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_2D => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_2E => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_2F => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_30 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_31 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_32 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_33 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_34 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_35 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_36 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_37 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_38 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_39 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_3A => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_3B => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_3C => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_3D => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_3E => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_3F => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_A => X"00000",
      INIT_B => X"00000",
      INIT_FILE => "NONE",
      READ_WIDTH_A => 0,
      READ_WIDTH_B => 9,
      SIM_COLLISION_CHECK => "GENERATE_X_ONLY",
      SIM_MODE => "SAFE",
      SRVAL_A => X"00000",
      SRVAL_B => X"00000",
      WRITE_MODE_A => "READ_FIRST",
      WRITE_MODE_B => "READ_FIRST",
      WRITE_WIDTH_A => 9,
      WRITE_WIDTH_B => 0
    )
    port map (
      CLKA => clk,
      CLKB => clk,
      ENA => ce,
      ENB => ce,
      REGCEA => blk00000003_blk000002a1_sig00000b25,
      REGCEB => ce,
      SSRA => blk00000003_blk000002a1_sig00000b25,
      SSRB => blk00000003_blk000002a1_sig00000b25,
      ADDRA(13) => blk00000003_sig00000321,
      ADDRA(12) => blk00000003_sig00000323,
      ADDRA(11) => blk00000003_sig00000325,
      ADDRA(10) => blk00000003_sig00000327,
      ADDRA(9) => blk00000003_sig00000329,
      ADDRA(8) => blk00000003_sig0000032b,
      ADDRA(7) => blk00000003_sig0000032d,
      ADDRA(6) => blk00000003_sig0000032f,
      ADDRA(5) => blk00000003_sig00000331,
      ADDRA(4) => blk00000003_sig00000333,
      ADDRA(3) => blk00000003_sig00000335,
      ADDRA(2) => blk00000003_blk000002a1_sig00000b25,
      ADDRA(1) => blk00000003_blk000002a1_sig00000b25,
      ADDRA(0) => blk00000003_blk000002a1_sig00000b25,
      ADDRB(13) => blk00000003_sig00000309,
      ADDRB(12) => blk00000003_sig0000030b,
      ADDRB(11) => blk00000003_sig0000030d,
      ADDRB(10) => blk00000003_sig0000030f,
      ADDRB(9) => blk00000003_sig00000311,
      ADDRB(8) => blk00000003_sig00000313,
      ADDRB(7) => blk00000003_sig00000315,
      ADDRB(6) => blk00000003_sig00000317,
      ADDRB(5) => blk00000003_sig00000319,
      ADDRB(4) => blk00000003_sig0000031b,
      ADDRB(3) => blk00000003_sig0000031d,
      ADDRB(2) => blk00000003_blk000002a1_sig00000b25,
      ADDRB(1) => blk00000003_blk000002a1_sig00000b25,
      ADDRB(0) => blk00000003_blk000002a1_sig00000b25,
      DIA(15) => blk00000003_blk000002a1_sig00000b25,
      DIA(14) => blk00000003_blk000002a1_sig00000b25,
      DIA(13) => blk00000003_blk000002a1_sig00000b25,
      DIA(12) => blk00000003_blk000002a1_sig00000b25,
      DIA(11) => blk00000003_blk000002a1_sig00000b25,
      DIA(10) => blk00000003_blk000002a1_sig00000b25,
      DIA(9) => blk00000003_blk000002a1_sig00000b25,
      DIA(8) => blk00000003_blk000002a1_sig00000b25,
      DIA(7) => blk00000003_sig00000220,
      DIA(6) => blk00000003_sig00000222,
      DIA(5) => blk00000003_sig00000224,
      DIA(4) => blk00000003_sig00000226,
      DIA(3) => blk00000003_sig0000022a,
      DIA(2) => blk00000003_sig0000022c,
      DIA(1) => blk00000003_sig0000022e,
      DIA(0) => blk00000003_sig00000230,
      DIB(15) => blk00000003_blk000002a1_sig00000b25,
      DIB(14) => blk00000003_blk000002a1_sig00000b25,
      DIB(13) => blk00000003_blk000002a1_sig00000b25,
      DIB(12) => blk00000003_blk000002a1_sig00000b25,
      DIB(11) => blk00000003_blk000002a1_sig00000b25,
      DIB(10) => blk00000003_blk000002a1_sig00000b25,
      DIB(9) => blk00000003_blk000002a1_sig00000b25,
      DIB(8) => blk00000003_blk000002a1_sig00000b25,
      DIB(7) => blk00000003_blk000002a1_sig00000b25,
      DIB(6) => blk00000003_blk000002a1_sig00000b25,
      DIB(5) => blk00000003_blk000002a1_sig00000b25,
      DIB(4) => blk00000003_blk000002a1_sig00000b25,
      DIB(3) => blk00000003_blk000002a1_sig00000b25,
      DIB(2) => blk00000003_blk000002a1_sig00000b25,
      DIB(1) => blk00000003_blk000002a1_sig00000b25,
      DIB(0) => blk00000003_blk000002a1_sig00000b25,
      DIPA(1) => blk00000003_blk000002a1_sig00000b25,
      DIPA(0) => blk00000003_sig00000228,
      DIPB(1) => blk00000003_blk000002a1_sig00000b25,
      DIPB(0) => blk00000003_blk000002a1_sig00000b25,
      DOA(15) => NLW_blk00000003_blk000002a1_blk000002e2_DOA_15_UNCONNECTED,
      DOA(14) => NLW_blk00000003_blk000002a1_blk000002e2_DOA_14_UNCONNECTED,
      DOA(13) => NLW_blk00000003_blk000002a1_blk000002e2_DOA_13_UNCONNECTED,
      DOA(12) => NLW_blk00000003_blk000002a1_blk000002e2_DOA_12_UNCONNECTED,
      DOA(11) => NLW_blk00000003_blk000002a1_blk000002e2_DOA_11_UNCONNECTED,
      DOA(10) => NLW_blk00000003_blk000002a1_blk000002e2_DOA_10_UNCONNECTED,
      DOA(9) => NLW_blk00000003_blk000002a1_blk000002e2_DOA_9_UNCONNECTED,
      DOA(8) => NLW_blk00000003_blk000002a1_blk000002e2_DOA_8_UNCONNECTED,
      DOA(7) => NLW_blk00000003_blk000002a1_blk000002e2_DOA_7_UNCONNECTED,
      DOA(6) => NLW_blk00000003_blk000002a1_blk000002e2_DOA_6_UNCONNECTED,
      DOA(5) => NLW_blk00000003_blk000002a1_blk000002e2_DOA_5_UNCONNECTED,
      DOA(4) => NLW_blk00000003_blk000002a1_blk000002e2_DOA_4_UNCONNECTED,
      DOA(3) => NLW_blk00000003_blk000002a1_blk000002e2_DOA_3_UNCONNECTED,
      DOA(2) => NLW_blk00000003_blk000002a1_blk000002e2_DOA_2_UNCONNECTED,
      DOA(1) => NLW_blk00000003_blk000002a1_blk000002e2_DOA_1_UNCONNECTED,
      DOA(0) => NLW_blk00000003_blk000002a1_blk000002e2_DOA_0_UNCONNECTED,
      DOB(15) => NLW_blk00000003_blk000002a1_blk000002e2_DOB_15_UNCONNECTED,
      DOB(14) => NLW_blk00000003_blk000002a1_blk000002e2_DOB_14_UNCONNECTED,
      DOB(13) => NLW_blk00000003_blk000002a1_blk000002e2_DOB_13_UNCONNECTED,
      DOB(12) => NLW_blk00000003_blk000002a1_blk000002e2_DOB_12_UNCONNECTED,
      DOB(11) => NLW_blk00000003_blk000002a1_blk000002e2_DOB_11_UNCONNECTED,
      DOB(10) => NLW_blk00000003_blk000002a1_blk000002e2_DOB_10_UNCONNECTED,
      DOB(9) => NLW_blk00000003_blk000002a1_blk000002e2_DOB_9_UNCONNECTED,
      DOB(8) => NLW_blk00000003_blk000002a1_blk000002e2_DOB_8_UNCONNECTED,
      DOB(7) => blk00000003_blk000002a1_sig00000b5b,
      DOB(6) => blk00000003_blk000002a1_sig00000b5d,
      DOB(5) => blk00000003_blk000002a1_sig00000b5f,
      DOB(4) => blk00000003_blk000002a1_sig00000b61,
      DOB(3) => blk00000003_blk000002a1_sig00000b63,
      DOB(2) => blk00000003_blk000002a1_sig00000b65,
      DOB(1) => blk00000003_blk000002a1_sig00000b67,
      DOB(0) => blk00000003_blk000002a1_sig00000b69,
      DOPA(1) => NLW_blk00000003_blk000002a1_blk000002e2_DOPA_1_UNCONNECTED,
      DOPA(0) => NLW_blk00000003_blk000002a1_blk000002e2_DOPA_0_UNCONNECTED,
      DOPB(1) => NLW_blk00000003_blk000002a1_blk000002e2_DOPB_1_UNCONNECTED,
      DOPB(0) => blk00000003_blk000002a1_sig00000b6d,
      WEA(1) => blk00000003_blk000002a1_sig00000b46,
      WEA(0) => blk00000003_blk000002a1_sig00000b46,
      WEB(1) => blk00000003_blk000002a1_sig00000b25,
      WEB(0) => blk00000003_blk000002a1_sig00000b25
    );
  blk00000003_blk000002a1_blk000002e1 : RAMB18
    generic map(
      DOA_REG => 0,
      DOB_REG => 1,
      INITP_00 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INITP_01 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INITP_02 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INITP_03 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INITP_04 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INITP_05 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INITP_06 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INITP_07 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_00 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_01 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_02 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_03 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_04 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_05 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_06 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_07 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_08 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_09 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_0A => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_0B => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_0C => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_0D => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_0E => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_0F => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_10 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_11 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_12 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_13 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_14 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_15 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_16 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_17 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_18 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_19 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_1A => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_1B => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_1C => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_1D => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_1E => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_1F => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_20 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_21 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_22 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_23 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_24 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_25 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_26 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_27 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_28 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_29 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_2A => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_2B => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_2C => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_2D => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_2E => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_2F => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_30 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_31 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_32 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_33 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_34 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_35 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_36 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_37 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_38 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_39 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_3A => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_3B => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_3C => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_3D => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_3E => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_3F => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_A => X"00000",
      INIT_B => X"00000",
      INIT_FILE => "NONE",
      READ_WIDTH_A => 0,
      READ_WIDTH_B => 9,
      SIM_COLLISION_CHECK => "GENERATE_X_ONLY",
      SIM_MODE => "SAFE",
      SRVAL_A => X"00000",
      SRVAL_B => X"00000",
      WRITE_MODE_A => "READ_FIRST",
      WRITE_MODE_B => "READ_FIRST",
      WRITE_WIDTH_A => 9,
      WRITE_WIDTH_B => 0
    )
    port map (
      CLKA => clk,
      CLKB => clk,
      ENA => ce,
      ENB => ce,
      REGCEA => blk00000003_blk000002a1_sig00000b25,
      REGCEB => ce,
      SSRA => blk00000003_blk000002a1_sig00000b25,
      SSRB => blk00000003_blk000002a1_sig00000b25,
      ADDRA(13) => blk00000003_sig00000321,
      ADDRA(12) => blk00000003_sig00000323,
      ADDRA(11) => blk00000003_sig00000325,
      ADDRA(10) => blk00000003_sig00000327,
      ADDRA(9) => blk00000003_sig00000329,
      ADDRA(8) => blk00000003_sig0000032b,
      ADDRA(7) => blk00000003_sig0000032d,
      ADDRA(6) => blk00000003_sig0000032f,
      ADDRA(5) => blk00000003_sig00000331,
      ADDRA(4) => blk00000003_sig00000333,
      ADDRA(3) => blk00000003_sig00000335,
      ADDRA(2) => blk00000003_blk000002a1_sig00000b25,
      ADDRA(1) => blk00000003_blk000002a1_sig00000b25,
      ADDRA(0) => blk00000003_blk000002a1_sig00000b25,
      ADDRB(13) => blk00000003_sig00000309,
      ADDRB(12) => blk00000003_sig0000030b,
      ADDRB(11) => blk00000003_sig0000030d,
      ADDRB(10) => blk00000003_sig0000030f,
      ADDRB(9) => blk00000003_sig00000311,
      ADDRB(8) => blk00000003_sig00000313,
      ADDRB(7) => blk00000003_sig00000315,
      ADDRB(6) => blk00000003_sig00000317,
      ADDRB(5) => blk00000003_sig00000319,
      ADDRB(4) => blk00000003_sig0000031b,
      ADDRB(3) => blk00000003_sig0000031d,
      ADDRB(2) => blk00000003_blk000002a1_sig00000b25,
      ADDRB(1) => blk00000003_blk000002a1_sig00000b25,
      ADDRB(0) => blk00000003_blk000002a1_sig00000b25,
      DIA(15) => blk00000003_blk000002a1_sig00000b25,
      DIA(14) => blk00000003_blk000002a1_sig00000b25,
      DIA(13) => blk00000003_blk000002a1_sig00000b25,
      DIA(12) => blk00000003_blk000002a1_sig00000b25,
      DIA(11) => blk00000003_blk000002a1_sig00000b25,
      DIA(10) => blk00000003_blk000002a1_sig00000b25,
      DIA(9) => blk00000003_blk000002a1_sig00000b25,
      DIA(8) => blk00000003_blk000002a1_sig00000b25,
      DIA(7) => blk00000003_sig00000232,
      DIA(6) => blk00000003_sig00000234,
      DIA(5) => blk00000003_sig00000236,
      DIA(4) => blk00000003_sig00000238,
      DIA(3) => blk00000003_sig0000023c,
      DIA(2) => blk00000003_sig0000023e,
      DIA(1) => blk00000003_sig00000240,
      DIA(0) => blk00000003_sig00000242,
      DIB(15) => blk00000003_blk000002a1_sig00000b25,
      DIB(14) => blk00000003_blk000002a1_sig00000b25,
      DIB(13) => blk00000003_blk000002a1_sig00000b25,
      DIB(12) => blk00000003_blk000002a1_sig00000b25,
      DIB(11) => blk00000003_blk000002a1_sig00000b25,
      DIB(10) => blk00000003_blk000002a1_sig00000b25,
      DIB(9) => blk00000003_blk000002a1_sig00000b25,
      DIB(8) => blk00000003_blk000002a1_sig00000b25,
      DIB(7) => blk00000003_blk000002a1_sig00000b25,
      DIB(6) => blk00000003_blk000002a1_sig00000b25,
      DIB(5) => blk00000003_blk000002a1_sig00000b25,
      DIB(4) => blk00000003_blk000002a1_sig00000b25,
      DIB(3) => blk00000003_blk000002a1_sig00000b25,
      DIB(2) => blk00000003_blk000002a1_sig00000b25,
      DIB(1) => blk00000003_blk000002a1_sig00000b25,
      DIB(0) => blk00000003_blk000002a1_sig00000b25,
      DIPA(1) => blk00000003_blk000002a1_sig00000b25,
      DIPA(0) => blk00000003_sig0000023a,
      DIPB(1) => blk00000003_blk000002a1_sig00000b25,
      DIPB(0) => blk00000003_blk000002a1_sig00000b25,
      DOA(15) => NLW_blk00000003_blk000002a1_blk000002e1_DOA_15_UNCONNECTED,
      DOA(14) => NLW_blk00000003_blk000002a1_blk000002e1_DOA_14_UNCONNECTED,
      DOA(13) => NLW_blk00000003_blk000002a1_blk000002e1_DOA_13_UNCONNECTED,
      DOA(12) => NLW_blk00000003_blk000002a1_blk000002e1_DOA_12_UNCONNECTED,
      DOA(11) => NLW_blk00000003_blk000002a1_blk000002e1_DOA_11_UNCONNECTED,
      DOA(10) => NLW_blk00000003_blk000002a1_blk000002e1_DOA_10_UNCONNECTED,
      DOA(9) => NLW_blk00000003_blk000002a1_blk000002e1_DOA_9_UNCONNECTED,
      DOA(8) => NLW_blk00000003_blk000002a1_blk000002e1_DOA_8_UNCONNECTED,
      DOA(7) => NLW_blk00000003_blk000002a1_blk000002e1_DOA_7_UNCONNECTED,
      DOA(6) => NLW_blk00000003_blk000002a1_blk000002e1_DOA_6_UNCONNECTED,
      DOA(5) => NLW_blk00000003_blk000002a1_blk000002e1_DOA_5_UNCONNECTED,
      DOA(4) => NLW_blk00000003_blk000002a1_blk000002e1_DOA_4_UNCONNECTED,
      DOA(3) => NLW_blk00000003_blk000002a1_blk000002e1_DOA_3_UNCONNECTED,
      DOA(2) => NLW_blk00000003_blk000002a1_blk000002e1_DOA_2_UNCONNECTED,
      DOA(1) => NLW_blk00000003_blk000002a1_blk000002e1_DOA_1_UNCONNECTED,
      DOA(0) => NLW_blk00000003_blk000002a1_blk000002e1_DOA_0_UNCONNECTED,
      DOB(15) => NLW_blk00000003_blk000002a1_blk000002e1_DOB_15_UNCONNECTED,
      DOB(14) => NLW_blk00000003_blk000002a1_blk000002e1_DOB_14_UNCONNECTED,
      DOB(13) => NLW_blk00000003_blk000002a1_blk000002e1_DOB_13_UNCONNECTED,
      DOB(12) => NLW_blk00000003_blk000002a1_blk000002e1_DOB_12_UNCONNECTED,
      DOB(11) => NLW_blk00000003_blk000002a1_blk000002e1_DOB_11_UNCONNECTED,
      DOB(10) => NLW_blk00000003_blk000002a1_blk000002e1_DOB_10_UNCONNECTED,
      DOB(9) => NLW_blk00000003_blk000002a1_blk000002e1_DOB_9_UNCONNECTED,
      DOB(8) => NLW_blk00000003_blk000002a1_blk000002e1_DOB_8_UNCONNECTED,
      DOB(7) => blk00000003_blk000002a1_sig00000b48,
      DOB(6) => blk00000003_blk000002a1_sig00000b4a,
      DOB(5) => blk00000003_blk000002a1_sig00000b4c,
      DOB(4) => blk00000003_blk000002a1_sig00000b4e,
      DOB(3) => blk00000003_blk000002a1_sig00000b50,
      DOB(2) => blk00000003_blk000002a1_sig00000b52,
      DOB(1) => blk00000003_blk000002a1_sig00000b54,
      DOB(0) => blk00000003_blk000002a1_sig00000b56,
      DOPA(1) => NLW_blk00000003_blk000002a1_blk000002e1_DOPA_1_UNCONNECTED,
      DOPA(0) => NLW_blk00000003_blk000002a1_blk000002e1_DOPA_0_UNCONNECTED,
      DOPB(1) => NLW_blk00000003_blk000002a1_blk000002e1_DOPB_1_UNCONNECTED,
      DOPB(0) => blk00000003_blk000002a1_sig00000b58,
      WEA(1) => blk00000003_blk000002a1_sig00000b45,
      WEA(0) => blk00000003_blk000002a1_sig00000b45,
      WEB(1) => blk00000003_blk000002a1_sig00000b25,
      WEB(0) => blk00000003_blk000002a1_sig00000b25
    );
  blk00000003_blk000002a1_blk000002e0 : RAMB18
    generic map(
      DOA_REG => 0,
      DOB_REG => 1,
      INITP_00 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INITP_01 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INITP_02 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INITP_03 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INITP_04 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INITP_05 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INITP_06 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INITP_07 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_00 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_01 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_02 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_03 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_04 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_05 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_06 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_07 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_08 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_09 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_0A => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_0B => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_0C => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_0D => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_0E => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_0F => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_10 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_11 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_12 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_13 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_14 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_15 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_16 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_17 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_18 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_19 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_1A => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_1B => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_1C => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_1D => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_1E => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_1F => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_20 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_21 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_22 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_23 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_24 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_25 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_26 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_27 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_28 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_29 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_2A => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_2B => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_2C => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_2D => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_2E => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_2F => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_30 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_31 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_32 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_33 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_34 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_35 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_36 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_37 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_38 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_39 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_3A => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_3B => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_3C => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_3D => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_3E => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_3F => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_A => X"00000",
      INIT_B => X"00000",
      INIT_FILE => "NONE",
      READ_WIDTH_A => 0,
      READ_WIDTH_B => 9,
      SIM_COLLISION_CHECK => "GENERATE_X_ONLY",
      SIM_MODE => "SAFE",
      SRVAL_A => X"00000",
      SRVAL_B => X"00000",
      WRITE_MODE_A => "READ_FIRST",
      WRITE_MODE_B => "READ_FIRST",
      WRITE_WIDTH_A => 9,
      WRITE_WIDTH_B => 0
    )
    port map (
      CLKA => clk,
      CLKB => clk,
      ENA => ce,
      ENB => ce,
      REGCEA => blk00000003_blk000002a1_sig00000b25,
      REGCEB => ce,
      SSRA => blk00000003_blk000002a1_sig00000b25,
      SSRB => blk00000003_blk000002a1_sig00000b25,
      ADDRA(13) => blk00000003_sig00000321,
      ADDRA(12) => blk00000003_sig00000323,
      ADDRA(11) => blk00000003_sig00000325,
      ADDRA(10) => blk00000003_sig00000327,
      ADDRA(9) => blk00000003_sig00000329,
      ADDRA(8) => blk00000003_sig0000032b,
      ADDRA(7) => blk00000003_sig0000032d,
      ADDRA(6) => blk00000003_sig0000032f,
      ADDRA(5) => blk00000003_sig00000331,
      ADDRA(4) => blk00000003_sig00000333,
      ADDRA(3) => blk00000003_sig00000335,
      ADDRA(2) => blk00000003_blk000002a1_sig00000b25,
      ADDRA(1) => blk00000003_blk000002a1_sig00000b25,
      ADDRA(0) => blk00000003_blk000002a1_sig00000b25,
      ADDRB(13) => blk00000003_sig00000309,
      ADDRB(12) => blk00000003_sig0000030b,
      ADDRB(11) => blk00000003_sig0000030d,
      ADDRB(10) => blk00000003_sig0000030f,
      ADDRB(9) => blk00000003_sig00000311,
      ADDRB(8) => blk00000003_sig00000313,
      ADDRB(7) => blk00000003_sig00000315,
      ADDRB(6) => blk00000003_sig00000317,
      ADDRB(5) => blk00000003_sig00000319,
      ADDRB(4) => blk00000003_sig0000031b,
      ADDRB(3) => blk00000003_sig0000031d,
      ADDRB(2) => blk00000003_blk000002a1_sig00000b25,
      ADDRB(1) => blk00000003_blk000002a1_sig00000b25,
      ADDRB(0) => blk00000003_blk000002a1_sig00000b25,
      DIA(15) => blk00000003_blk000002a1_sig00000b25,
      DIA(14) => blk00000003_blk000002a1_sig00000b25,
      DIA(13) => blk00000003_blk000002a1_sig00000b25,
      DIA(12) => blk00000003_blk000002a1_sig00000b25,
      DIA(11) => blk00000003_blk000002a1_sig00000b25,
      DIA(10) => blk00000003_blk000002a1_sig00000b25,
      DIA(9) => blk00000003_blk000002a1_sig00000b25,
      DIA(8) => blk00000003_blk000002a1_sig00000b25,
      DIA(7) => blk00000003_sig00000232,
      DIA(6) => blk00000003_sig00000234,
      DIA(5) => blk00000003_sig00000236,
      DIA(4) => blk00000003_sig00000238,
      DIA(3) => blk00000003_sig0000023c,
      DIA(2) => blk00000003_sig0000023e,
      DIA(1) => blk00000003_sig00000240,
      DIA(0) => blk00000003_sig00000242,
      DIB(15) => blk00000003_blk000002a1_sig00000b25,
      DIB(14) => blk00000003_blk000002a1_sig00000b25,
      DIB(13) => blk00000003_blk000002a1_sig00000b25,
      DIB(12) => blk00000003_blk000002a1_sig00000b25,
      DIB(11) => blk00000003_blk000002a1_sig00000b25,
      DIB(10) => blk00000003_blk000002a1_sig00000b25,
      DIB(9) => blk00000003_blk000002a1_sig00000b25,
      DIB(8) => blk00000003_blk000002a1_sig00000b25,
      DIB(7) => blk00000003_blk000002a1_sig00000b25,
      DIB(6) => blk00000003_blk000002a1_sig00000b25,
      DIB(5) => blk00000003_blk000002a1_sig00000b25,
      DIB(4) => blk00000003_blk000002a1_sig00000b25,
      DIB(3) => blk00000003_blk000002a1_sig00000b25,
      DIB(2) => blk00000003_blk000002a1_sig00000b25,
      DIB(1) => blk00000003_blk000002a1_sig00000b25,
      DIB(0) => blk00000003_blk000002a1_sig00000b25,
      DIPA(1) => blk00000003_blk000002a1_sig00000b25,
      DIPA(0) => blk00000003_sig0000023a,
      DIPB(1) => blk00000003_blk000002a1_sig00000b25,
      DIPB(0) => blk00000003_blk000002a1_sig00000b25,
      DOA(15) => NLW_blk00000003_blk000002a1_blk000002e0_DOA_15_UNCONNECTED,
      DOA(14) => NLW_blk00000003_blk000002a1_blk000002e0_DOA_14_UNCONNECTED,
      DOA(13) => NLW_blk00000003_blk000002a1_blk000002e0_DOA_13_UNCONNECTED,
      DOA(12) => NLW_blk00000003_blk000002a1_blk000002e0_DOA_12_UNCONNECTED,
      DOA(11) => NLW_blk00000003_blk000002a1_blk000002e0_DOA_11_UNCONNECTED,
      DOA(10) => NLW_blk00000003_blk000002a1_blk000002e0_DOA_10_UNCONNECTED,
      DOA(9) => NLW_blk00000003_blk000002a1_blk000002e0_DOA_9_UNCONNECTED,
      DOA(8) => NLW_blk00000003_blk000002a1_blk000002e0_DOA_8_UNCONNECTED,
      DOA(7) => NLW_blk00000003_blk000002a1_blk000002e0_DOA_7_UNCONNECTED,
      DOA(6) => NLW_blk00000003_blk000002a1_blk000002e0_DOA_6_UNCONNECTED,
      DOA(5) => NLW_blk00000003_blk000002a1_blk000002e0_DOA_5_UNCONNECTED,
      DOA(4) => NLW_blk00000003_blk000002a1_blk000002e0_DOA_4_UNCONNECTED,
      DOA(3) => NLW_blk00000003_blk000002a1_blk000002e0_DOA_3_UNCONNECTED,
      DOA(2) => NLW_blk00000003_blk000002a1_blk000002e0_DOA_2_UNCONNECTED,
      DOA(1) => NLW_blk00000003_blk000002a1_blk000002e0_DOA_1_UNCONNECTED,
      DOA(0) => NLW_blk00000003_blk000002a1_blk000002e0_DOA_0_UNCONNECTED,
      DOB(15) => NLW_blk00000003_blk000002a1_blk000002e0_DOB_15_UNCONNECTED,
      DOB(14) => NLW_blk00000003_blk000002a1_blk000002e0_DOB_14_UNCONNECTED,
      DOB(13) => NLW_blk00000003_blk000002a1_blk000002e0_DOB_13_UNCONNECTED,
      DOB(12) => NLW_blk00000003_blk000002a1_blk000002e0_DOB_12_UNCONNECTED,
      DOB(11) => NLW_blk00000003_blk000002a1_blk000002e0_DOB_11_UNCONNECTED,
      DOB(10) => NLW_blk00000003_blk000002a1_blk000002e0_DOB_10_UNCONNECTED,
      DOB(9) => NLW_blk00000003_blk000002a1_blk000002e0_DOB_9_UNCONNECTED,
      DOB(8) => NLW_blk00000003_blk000002a1_blk000002e0_DOB_8_UNCONNECTED,
      DOB(7) => blk00000003_blk000002a1_sig00000b49,
      DOB(6) => blk00000003_blk000002a1_sig00000b4b,
      DOB(5) => blk00000003_blk000002a1_sig00000b4d,
      DOB(4) => blk00000003_blk000002a1_sig00000b4f,
      DOB(3) => blk00000003_blk000002a1_sig00000b51,
      DOB(2) => blk00000003_blk000002a1_sig00000b53,
      DOB(1) => blk00000003_blk000002a1_sig00000b55,
      DOB(0) => blk00000003_blk000002a1_sig00000b57,
      DOPA(1) => NLW_blk00000003_blk000002a1_blk000002e0_DOPA_1_UNCONNECTED,
      DOPA(0) => NLW_blk00000003_blk000002a1_blk000002e0_DOPA_0_UNCONNECTED,
      DOPB(1) => NLW_blk00000003_blk000002a1_blk000002e0_DOPB_1_UNCONNECTED,
      DOPB(0) => blk00000003_blk000002a1_sig00000b59,
      WEA(1) => blk00000003_blk000002a1_sig00000b46,
      WEA(0) => blk00000003_blk000002a1_sig00000b46,
      WEB(1) => blk00000003_blk000002a1_sig00000b25,
      WEB(0) => blk00000003_blk000002a1_sig00000b25
    );
  blk00000003_blk000002a1_blk000002df : LUT3
    generic map(
      INIT => X"D8"
    )
    port map (
      I0 => blk00000003_blk000002a1_sig00000b47,
      I1 => blk00000003_blk000002a1_sig00000b7c,
      I2 => blk00000003_blk000002a1_sig00000b7d,
      O => blk00000003_blk000002a1_sig00000b38
    );
  blk00000003_blk000002a1_blk000002de : LUT3
    generic map(
      INIT => X"D8"
    )
    port map (
      I0 => blk00000003_blk000002a1_sig00000b47,
      I1 => blk00000003_blk000002a1_sig00000b7a,
      I2 => blk00000003_blk000002a1_sig00000b7b,
      O => blk00000003_blk000002a1_sig00000b39
    );
  blk00000003_blk000002a1_blk000002dd : LUT3
    generic map(
      INIT => X"D8"
    )
    port map (
      I0 => blk00000003_blk000002a1_sig00000b47,
      I1 => blk00000003_blk000002a1_sig00000b78,
      I2 => blk00000003_blk000002a1_sig00000b79,
      O => blk00000003_blk000002a1_sig00000b3a
    );
  blk00000003_blk000002a1_blk000002dc : LUT3
    generic map(
      INIT => X"D8"
    )
    port map (
      I0 => blk00000003_blk000002a1_sig00000b47,
      I1 => blk00000003_blk000002a1_sig00000b76,
      I2 => blk00000003_blk000002a1_sig00000b77,
      O => blk00000003_blk000002a1_sig00000b3b
    );
  blk00000003_blk000002a1_blk000002db : LUT3
    generic map(
      INIT => X"D8"
    )
    port map (
      I0 => blk00000003_blk000002a1_sig00000b47,
      I1 => blk00000003_blk000002a1_sig00000b74,
      I2 => blk00000003_blk000002a1_sig00000b75,
      O => blk00000003_blk000002a1_sig00000b3d
    );
  blk00000003_blk000002a1_blk000002da : LUT3
    generic map(
      INIT => X"D8"
    )
    port map (
      I0 => blk00000003_blk000002a1_sig00000b47,
      I1 => blk00000003_blk000002a1_sig00000b72,
      I2 => blk00000003_blk000002a1_sig00000b73,
      O => blk00000003_blk000002a1_sig00000b3e
    );
  blk00000003_blk000002a1_blk000002d9 : LUT3
    generic map(
      INIT => X"D8"
    )
    port map (
      I0 => blk00000003_blk000002a1_sig00000b47,
      I1 => blk00000003_blk000002a1_sig00000b70,
      I2 => blk00000003_blk000002a1_sig00000b71,
      O => blk00000003_blk000002a1_sig00000b3f
    );
  blk00000003_blk000002a1_blk000002d8 : LUT3
    generic map(
      INIT => X"D8"
    )
    port map (
      I0 => blk00000003_blk000002a1_sig00000b47,
      I1 => blk00000003_blk000002a1_sig00000b6e,
      I2 => blk00000003_blk000002a1_sig00000b6f,
      O => blk00000003_blk000002a1_sig00000b40
    );
  blk00000003_blk000002a1_blk000002d7 : LUT3
    generic map(
      INIT => X"D8"
    )
    port map (
      I0 => blk00000003_blk000002a1_sig00000b47,
      I1 => blk00000003_blk000002a1_sig00000b6c,
      I2 => blk00000003_blk000002a1_sig00000b6d,
      O => blk00000003_blk000002a1_sig00000b33
    );
  blk00000003_blk000002a1_blk000002d6 : LUT3
    generic map(
      INIT => X"D8"
    )
    port map (
      I0 => blk00000003_blk000002a1_sig00000b47,
      I1 => blk00000003_blk000002a1_sig00000b6a,
      I2 => blk00000003_blk000002a1_sig00000b6b,
      O => blk00000003_blk000002a1_sig00000b3c
    );
  blk00000003_blk000002a1_blk000002d5 : LUT3
    generic map(
      INIT => X"D8"
    )
    port map (
      I0 => blk00000003_blk000002a1_sig00000b47,
      I1 => blk00000003_blk000002a1_sig00000b68,
      I2 => blk00000003_blk000002a1_sig00000b69,
      O => blk00000003_blk000002a1_sig00000b2f
    );
  blk00000003_blk000002a1_blk000002d4 : LUT3
    generic map(
      INIT => X"D8"
    )
    port map (
      I0 => blk00000003_blk000002a1_sig00000b47,
      I1 => blk00000003_blk000002a1_sig00000b66,
      I2 => blk00000003_blk000002a1_sig00000b67,
      O => blk00000003_blk000002a1_sig00000b30
    );
  blk00000003_blk000002a1_blk000002d3 : LUT3
    generic map(
      INIT => X"D8"
    )
    port map (
      I0 => blk00000003_blk000002a1_sig00000b47,
      I1 => blk00000003_blk000002a1_sig00000b64,
      I2 => blk00000003_blk000002a1_sig00000b65,
      O => blk00000003_blk000002a1_sig00000b31
    );
  blk00000003_blk000002a1_blk000002d2 : LUT3
    generic map(
      INIT => X"D8"
    )
    port map (
      I0 => blk00000003_blk000002a1_sig00000b47,
      I1 => blk00000003_blk000002a1_sig00000b62,
      I2 => blk00000003_blk000002a1_sig00000b63,
      O => blk00000003_blk000002a1_sig00000b32
    );
  blk00000003_blk000002a1_blk000002d1 : LUT3
    generic map(
      INIT => X"D8"
    )
    port map (
      I0 => blk00000003_blk000002a1_sig00000b47,
      I1 => blk00000003_blk000002a1_sig00000b60,
      I2 => blk00000003_blk000002a1_sig00000b61,
      O => blk00000003_blk000002a1_sig00000b34
    );
  blk00000003_blk000002a1_blk000002d0 : LUT3
    generic map(
      INIT => X"D8"
    )
    port map (
      I0 => blk00000003_blk000002a1_sig00000b47,
      I1 => blk00000003_blk000002a1_sig00000b5e,
      I2 => blk00000003_blk000002a1_sig00000b5f,
      O => blk00000003_blk000002a1_sig00000b35
    );
  blk00000003_blk000002a1_blk000002cf : LUT3
    generic map(
      INIT => X"D8"
    )
    port map (
      I0 => blk00000003_blk000002a1_sig00000b47,
      I1 => blk00000003_blk000002a1_sig00000b5c,
      I2 => blk00000003_blk000002a1_sig00000b5d,
      O => blk00000003_blk000002a1_sig00000b36
    );
  blk00000003_blk000002a1_blk000002ce : LUT3
    generic map(
      INIT => X"D8"
    )
    port map (
      I0 => blk00000003_blk000002a1_sig00000b47,
      I1 => blk00000003_blk000002a1_sig00000b5a,
      I2 => blk00000003_blk000002a1_sig00000b5b,
      O => blk00000003_blk000002a1_sig00000b37
    );
  blk00000003_blk000002a1_blk000002cd : LUT3
    generic map(
      INIT => X"D8"
    )
    port map (
      I0 => blk00000003_blk000002a1_sig00000b47,
      I1 => blk00000003_blk000002a1_sig00000b58,
      I2 => blk00000003_blk000002a1_sig00000b59,
      O => blk00000003_blk000002a1_sig00000b2a
    );
  blk00000003_blk000002a1_blk000002cc : LUT3
    generic map(
      INIT => X"D8"
    )
    port map (
      I0 => blk00000003_blk000002a1_sig00000b47,
      I1 => blk00000003_blk000002a1_sig00000b56,
      I2 => blk00000003_blk000002a1_sig00000b57,
      O => blk00000003_blk000002a1_sig00000b26
    );
  blk00000003_blk000002a1_blk000002cb : LUT3
    generic map(
      INIT => X"D8"
    )
    port map (
      I0 => blk00000003_blk000002a1_sig00000b47,
      I1 => blk00000003_blk000002a1_sig00000b54,
      I2 => blk00000003_blk000002a1_sig00000b55,
      O => blk00000003_blk000002a1_sig00000b27
    );
  blk00000003_blk000002a1_blk000002ca : LUT3
    generic map(
      INIT => X"D8"
    )
    port map (
      I0 => blk00000003_blk000002a1_sig00000b47,
      I1 => blk00000003_blk000002a1_sig00000b52,
      I2 => blk00000003_blk000002a1_sig00000b53,
      O => blk00000003_blk000002a1_sig00000b28
    );
  blk00000003_blk000002a1_blk000002c9 : LUT3
    generic map(
      INIT => X"D8"
    )
    port map (
      I0 => blk00000003_blk000002a1_sig00000b47,
      I1 => blk00000003_blk000002a1_sig00000b50,
      I2 => blk00000003_blk000002a1_sig00000b51,
      O => blk00000003_blk000002a1_sig00000b29
    );
  blk00000003_blk000002a1_blk000002c8 : LUT3
    generic map(
      INIT => X"D8"
    )
    port map (
      I0 => blk00000003_blk000002a1_sig00000b47,
      I1 => blk00000003_blk000002a1_sig00000b4e,
      I2 => blk00000003_blk000002a1_sig00000b4f,
      O => blk00000003_blk000002a1_sig00000b2b
    );
  blk00000003_blk000002a1_blk000002c7 : LUT3
    generic map(
      INIT => X"D8"
    )
    port map (
      I0 => blk00000003_blk000002a1_sig00000b47,
      I1 => blk00000003_blk000002a1_sig00000b4c,
      I2 => blk00000003_blk000002a1_sig00000b4d,
      O => blk00000003_blk000002a1_sig00000b2c
    );
  blk00000003_blk000002a1_blk000002c6 : LUT3
    generic map(
      INIT => X"D8"
    )
    port map (
      I0 => blk00000003_blk000002a1_sig00000b47,
      I1 => blk00000003_blk000002a1_sig00000b4a,
      I2 => blk00000003_blk000002a1_sig00000b4b,
      O => blk00000003_blk000002a1_sig00000b2d
    );
  blk00000003_blk000002a1_blk000002c5 : LUT3
    generic map(
      INIT => X"D8"
    )
    port map (
      I0 => blk00000003_blk000002a1_sig00000b47,
      I1 => blk00000003_blk000002a1_sig00000b48,
      I2 => blk00000003_blk000002a1_sig00000b49,
      O => blk00000003_blk000002a1_sig00000b2e
    );
  blk00000003_blk000002a1_blk000002c4 : LUT2
    generic map(
      INIT => X"4"
    )
    port map (
      I0 => blk00000003_sig0000031f,
      I1 => blk00000003_sig00000187,
      O => blk00000003_blk000002a1_sig00000b46
    );
  blk00000003_blk000002a1_blk000002c3 : LUT2
    generic map(
      INIT => X"8"
    )
    port map (
      I0 => blk00000003_sig0000031f,
      I1 => blk00000003_sig00000187,
      O => blk00000003_blk000002a1_sig00000b45
    );
  blk00000003_blk000002a1_blk000002c2 : RAMB18
    generic map(
      DOA_REG => 0,
      DOB_REG => 1,
      INITP_00 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INITP_01 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INITP_02 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INITP_03 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INITP_04 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INITP_05 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INITP_06 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INITP_07 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_00 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_01 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_02 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_03 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_04 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_05 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_06 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_07 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_08 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_09 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_0A => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_0B => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_0C => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_0D => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_0E => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_0F => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_10 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_11 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_12 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_13 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_14 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_15 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_16 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_17 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_18 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_19 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_1A => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_1B => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_1C => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_1D => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_1E => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_1F => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_20 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_21 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_22 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_23 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_24 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_25 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_26 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_27 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_28 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_29 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_2A => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_2B => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_2C => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_2D => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_2E => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_2F => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_30 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_31 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_32 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_33 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_34 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_35 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_36 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_37 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_38 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_39 => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_3A => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_3B => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_3C => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_3D => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_3E => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_3F => X"0000000000000000000000000000000000000000000000000000000000000000",
      INIT_A => X"00000",
      INIT_B => X"00000",
      INIT_FILE => "NONE",
      READ_WIDTH_A => 0,
      READ_WIDTH_B => 4,
      SIM_COLLISION_CHECK => "GENERATE_X_ONLY",
      SIM_MODE => "SAFE",
      SRVAL_A => X"00000",
      SRVAL_B => X"00000",
      WRITE_MODE_A => "READ_FIRST",
      WRITE_MODE_B => "READ_FIRST",
      WRITE_WIDTH_A => 4,
      WRITE_WIDTH_B => 0
    )
    port map (
      CLKA => clk,
      CLKB => clk,
      ENA => ce,
      ENB => ce,
      REGCEA => blk00000003_blk000002a1_sig00000b25,
      REGCEB => ce,
      SSRA => blk00000003_blk000002a1_sig00000b25,
      SSRB => blk00000003_blk000002a1_sig00000b25,
      ADDRA(13) => blk00000003_sig0000031f,
      ADDRA(12) => blk00000003_sig00000321,
      ADDRA(11) => blk00000003_sig00000323,
      ADDRA(10) => blk00000003_sig00000325,
      ADDRA(9) => blk00000003_sig00000327,
      ADDRA(8) => blk00000003_sig00000329,
      ADDRA(7) => blk00000003_sig0000032b,
      ADDRA(6) => blk00000003_sig0000032d,
      ADDRA(5) => blk00000003_sig0000032f,
      ADDRA(4) => blk00000003_sig00000331,
      ADDRA(3) => blk00000003_sig00000333,
      ADDRA(2) => blk00000003_sig00000335,
      ADDRA(1) => blk00000003_blk000002a1_sig00000b25,
      ADDRA(0) => blk00000003_blk000002a1_sig00000b25,
      ADDRB(13) => blk00000003_sig00000307,
      ADDRB(12) => blk00000003_sig00000309,
      ADDRB(11) => blk00000003_sig0000030b,
      ADDRB(10) => blk00000003_sig0000030d,
      ADDRB(9) => blk00000003_sig0000030f,
      ADDRB(8) => blk00000003_sig00000311,
      ADDRB(7) => blk00000003_sig00000313,
      ADDRB(6) => blk00000003_sig00000315,
      ADDRB(5) => blk00000003_sig00000317,
      ADDRB(4) => blk00000003_sig00000319,
      ADDRB(3) => blk00000003_sig0000031b,
      ADDRB(2) => blk00000003_sig0000031d,
      ADDRB(1) => blk00000003_blk000002a1_sig00000b25,
      ADDRB(0) => blk00000003_blk000002a1_sig00000b25,
      DIA(15) => blk00000003_blk000002a1_sig00000b25,
      DIA(14) => blk00000003_blk000002a1_sig00000b25,
      DIA(13) => blk00000003_blk000002a1_sig00000b25,
      DIA(12) => blk00000003_blk000002a1_sig00000b25,
      DIA(11) => blk00000003_blk000002a1_sig00000b25,
      DIA(10) => blk00000003_blk000002a1_sig00000b25,
      DIA(9) => blk00000003_blk000002a1_sig00000b25,
      DIA(8) => blk00000003_blk000002a1_sig00000b25,
      DIA(7) => blk00000003_blk000002a1_sig00000b25,
      DIA(6) => blk00000003_blk000002a1_sig00000b25,
      DIA(5) => blk00000003_blk000002a1_sig00000b25,
      DIA(4) => blk00000003_blk000002a1_sig00000b25,
      DIA(3) => blk00000003_sig00000206,
      DIA(2) => blk00000003_sig00000208,
      DIA(1) => blk00000003_sig0000020a,
      DIA(0) => blk00000003_sig0000020c,
      DIB(15) => blk00000003_blk000002a1_sig00000b25,
      DIB(14) => blk00000003_blk000002a1_sig00000b25,
      DIB(13) => blk00000003_blk000002a1_sig00000b25,
      DIB(12) => blk00000003_blk000002a1_sig00000b25,
      DIB(11) => blk00000003_blk000002a1_sig00000b25,
      DIB(10) => blk00000003_blk000002a1_sig00000b25,
      DIB(9) => blk00000003_blk000002a1_sig00000b25,
      DIB(8) => blk00000003_blk000002a1_sig00000b25,
      DIB(7) => blk00000003_blk000002a1_sig00000b25,
      DIB(6) => blk00000003_blk000002a1_sig00000b25,
      DIB(5) => blk00000003_blk000002a1_sig00000b25,
      DIB(4) => blk00000003_blk000002a1_sig00000b25,
      DIB(3) => blk00000003_blk000002a1_sig00000b25,
      DIB(2) => blk00000003_blk000002a1_sig00000b25,
      DIB(1) => blk00000003_blk000002a1_sig00000b25,
      DIB(0) => blk00000003_blk000002a1_sig00000b25,
      DIPA(1) => blk00000003_blk000002a1_sig00000b25,
      DIPA(0) => blk00000003_blk000002a1_sig00000b25,
      DIPB(1) => blk00000003_blk000002a1_sig00000b25,
      DIPB(0) => blk00000003_blk000002a1_sig00000b25,
      DOA(15) => NLW_blk00000003_blk000002a1_blk000002c2_DOA_15_UNCONNECTED,
      DOA(14) => NLW_blk00000003_blk000002a1_blk000002c2_DOA_14_UNCONNECTED,
      DOA(13) => NLW_blk00000003_blk000002a1_blk000002c2_DOA_13_UNCONNECTED,
      DOA(12) => NLW_blk00000003_blk000002a1_blk000002c2_DOA_12_UNCONNECTED,
      DOA(11) => NLW_blk00000003_blk000002a1_blk000002c2_DOA_11_UNCONNECTED,
      DOA(10) => NLW_blk00000003_blk000002a1_blk000002c2_DOA_10_UNCONNECTED,
      DOA(9) => NLW_blk00000003_blk000002a1_blk000002c2_DOA_9_UNCONNECTED,
      DOA(8) => NLW_blk00000003_blk000002a1_blk000002c2_DOA_8_UNCONNECTED,
      DOA(7) => NLW_blk00000003_blk000002a1_blk000002c2_DOA_7_UNCONNECTED,
      DOA(6) => NLW_blk00000003_blk000002a1_blk000002c2_DOA_6_UNCONNECTED,
      DOA(5) => NLW_blk00000003_blk000002a1_blk000002c2_DOA_5_UNCONNECTED,
      DOA(4) => NLW_blk00000003_blk000002a1_blk000002c2_DOA_4_UNCONNECTED,
      DOA(3) => NLW_blk00000003_blk000002a1_blk000002c2_DOA_3_UNCONNECTED,
      DOA(2) => NLW_blk00000003_blk000002a1_blk000002c2_DOA_2_UNCONNECTED,
      DOA(1) => NLW_blk00000003_blk000002a1_blk000002c2_DOA_1_UNCONNECTED,
      DOA(0) => NLW_blk00000003_blk000002a1_blk000002c2_DOA_0_UNCONNECTED,
      DOB(15) => NLW_blk00000003_blk000002a1_blk000002c2_DOB_15_UNCONNECTED,
      DOB(14) => NLW_blk00000003_blk000002a1_blk000002c2_DOB_14_UNCONNECTED,
      DOB(13) => NLW_blk00000003_blk000002a1_blk000002c2_DOB_13_UNCONNECTED,
      DOB(12) => NLW_blk00000003_blk000002a1_blk000002c2_DOB_12_UNCONNECTED,
      DOB(11) => NLW_blk00000003_blk000002a1_blk000002c2_DOB_11_UNCONNECTED,
      DOB(10) => NLW_blk00000003_blk000002a1_blk000002c2_DOB_10_UNCONNECTED,
      DOB(9) => NLW_blk00000003_blk000002a1_blk000002c2_DOB_9_UNCONNECTED,
      DOB(8) => NLW_blk00000003_blk000002a1_blk000002c2_DOB_8_UNCONNECTED,
      DOB(7) => NLW_blk00000003_blk000002a1_blk000002c2_DOB_7_UNCONNECTED,
      DOB(6) => NLW_blk00000003_blk000002a1_blk000002c2_DOB_6_UNCONNECTED,
      DOB(5) => NLW_blk00000003_blk000002a1_blk000002c2_DOB_5_UNCONNECTED,
      DOB(4) => NLW_blk00000003_blk000002a1_blk000002c2_DOB_4_UNCONNECTED,
      DOB(3) => blk00000003_blk000002a1_sig00000b44,
      DOB(2) => blk00000003_blk000002a1_sig00000b43,
      DOB(1) => blk00000003_blk000002a1_sig00000b42,
      DOB(0) => blk00000003_blk000002a1_sig00000b41,
      DOPA(1) => NLW_blk00000003_blk000002a1_blk000002c2_DOPA_1_UNCONNECTED,
      DOPA(0) => NLW_blk00000003_blk000002a1_blk000002c2_DOPA_0_UNCONNECTED,
      DOPB(1) => NLW_blk00000003_blk000002a1_blk000002c2_DOPB_1_UNCONNECTED,
      DOPB(0) => NLW_blk00000003_blk000002a1_blk000002c2_DOPB_0_UNCONNECTED,
      WEA(1) => blk00000003_sig00000187,
      WEA(0) => blk00000003_sig00000187,
      WEB(1) => blk00000003_blk000002a1_sig00000b25,
      WEB(0) => blk00000003_blk000002a1_sig00000b25
    );
  blk00000003_blk000002a1_blk000002c1 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk000002a1_sig00000b44,
      Q => blk00000003_sig0000028a
    );
  blk00000003_blk000002a1_blk000002c0 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk000002a1_sig00000b43,
      Q => blk00000003_sig0000028c
    );
  blk00000003_blk000002a1_blk000002bf : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk000002a1_sig00000b42,
      Q => blk00000003_sig0000028e
    );
  blk00000003_blk000002a1_blk000002be : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk000002a1_sig00000b41,
      Q => blk00000003_sig00000290
    );
  blk00000003_blk000002a1_blk000002bd : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk000002a1_sig00000b40,
      Q => blk00000003_sig00000292
    );
  blk00000003_blk000002a1_blk000002bc : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk000002a1_sig00000b3f,
      Q => blk00000003_sig00000294
    );
  blk00000003_blk000002a1_blk000002bb : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk000002a1_sig00000b3e,
      Q => blk00000003_sig00000296
    );
  blk00000003_blk000002a1_blk000002ba : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk000002a1_sig00000b3d,
      Q => blk00000003_sig00000298
    );
  blk00000003_blk000002a1_blk000002b9 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk000002a1_sig00000b3c,
      Q => blk00000003_sig0000029a
    );
  blk00000003_blk000002a1_blk000002b8 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk000002a1_sig00000b3b,
      Q => blk00000003_sig0000029c
    );
  blk00000003_blk000002a1_blk000002b7 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk000002a1_sig00000b3a,
      Q => blk00000003_sig0000029e
    );
  blk00000003_blk000002a1_blk000002b6 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk000002a1_sig00000b39,
      Q => blk00000003_sig000002a0
    );
  blk00000003_blk000002a1_blk000002b5 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk000002a1_sig00000b38,
      Q => blk00000003_sig000002a2
    );
  blk00000003_blk000002a1_blk000002b4 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk000002a1_sig00000b37,
      Q => blk00000003_sig000002a4
    );
  blk00000003_blk000002a1_blk000002b3 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk000002a1_sig00000b36,
      Q => blk00000003_sig000002a6
    );
  blk00000003_blk000002a1_blk000002b2 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk000002a1_sig00000b35,
      Q => blk00000003_sig000002a8
    );
  blk00000003_blk000002a1_blk000002b1 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk000002a1_sig00000b34,
      Q => blk00000003_sig000002aa
    );
  blk00000003_blk000002a1_blk000002b0 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk000002a1_sig00000b33,
      Q => blk00000003_sig000002ac
    );
  blk00000003_blk000002a1_blk000002af : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk000002a1_sig00000b32,
      Q => blk00000003_sig000002ae
    );
  blk00000003_blk000002a1_blk000002ae : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk000002a1_sig00000b31,
      Q => blk00000003_sig000002b0
    );
  blk00000003_blk000002a1_blk000002ad : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk000002a1_sig00000b30,
      Q => blk00000003_sig000002b2
    );
  blk00000003_blk000002a1_blk000002ac : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk000002a1_sig00000b2f,
      Q => blk00000003_sig000002b4
    );
  blk00000003_blk000002a1_blk000002ab : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk000002a1_sig00000b2e,
      Q => blk00000003_sig000002b6
    );
  blk00000003_blk000002a1_blk000002aa : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk000002a1_sig00000b2d,
      Q => blk00000003_sig000002b8
    );
  blk00000003_blk000002a1_blk000002a9 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk000002a1_sig00000b2c,
      Q => blk00000003_sig000002ba
    );
  blk00000003_blk000002a1_blk000002a8 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk000002a1_sig00000b2b,
      Q => blk00000003_sig000002bc
    );
  blk00000003_blk000002a1_blk000002a7 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk000002a1_sig00000b2a,
      Q => blk00000003_sig000002be
    );
  blk00000003_blk000002a1_blk000002a6 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk000002a1_sig00000b29,
      Q => blk00000003_sig000002c0
    );
  blk00000003_blk000002a1_blk000002a5 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk000002a1_sig00000b28,
      Q => blk00000003_sig000002c2
    );
  blk00000003_blk000002a1_blk000002a4 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk000002a1_sig00000b27,
      Q => blk00000003_sig000002c4
    );
  blk00000003_blk000002a1_blk000002a3 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk000002a1_sig00000b26,
      Q => blk00000003_sig000002c6
    );
  blk00000003_blk000002a1_blk000002a2 : GND
    port map (
      G => blk00000003_blk000002a1_sig00000b25
    );
  blk00000003_blk00000326_blk00000327_blk0000032b : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk00000326_blk00000327_sig00000b8a,
      Q => blk00000003_sig00000287
    );
  blk00000003_blk00000326_blk00000327_blk0000032a : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk00000326_blk00000327_sig00000b88,
      A1 => blk00000003_blk00000326_blk00000327_sig00000b89,
      A2 => blk00000003_blk00000326_blk00000327_sig00000b88,
      A3 => blk00000003_blk00000326_blk00000327_sig00000b88,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig00000538,
      Q => blk00000003_blk00000326_blk00000327_sig00000b8a,
      Q15 => NLW_blk00000003_blk00000326_blk00000327_blk0000032a_Q15_UNCONNECTED
    );
  blk00000003_blk00000326_blk00000327_blk00000329 : VCC
    port map (
      P => blk00000003_blk00000326_blk00000327_sig00000b89
    );
  blk00000003_blk00000326_blk00000327_blk00000328 : GND
    port map (
      G => blk00000003_blk00000326_blk00000327_sig00000b88
    );
  blk00000003_blk0000032c_blk0000032d_blk0000036d : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk0000032c_blk0000032d_sig00000c2c,
      Q => blk00000003_sig000000ad
    );
  blk00000003_blk0000032c_blk0000032d_blk0000036c : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk0000032c_blk0000032d_sig00000c0c,
      A1 => blk00000003_blk0000032c_blk0000032d_sig00000c0d,
      A2 => blk00000003_blk0000032c_blk0000032d_sig00000c0d,
      A3 => blk00000003_blk0000032c_blk0000032d_sig00000c0c,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig000002e8,
      Q => blk00000003_blk0000032c_blk0000032d_sig00000c2c,
      Q15 => NLW_blk00000003_blk0000032c_blk0000032d_blk0000036c_Q15_UNCONNECTED
    );
  blk00000003_blk0000032c_blk0000032d_blk0000036b : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk0000032c_blk0000032d_sig00000c2b,
      Q => blk00000003_sig000000ae
    );
  blk00000003_blk0000032c_blk0000032d_blk0000036a : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk0000032c_blk0000032d_sig00000c0c,
      A1 => blk00000003_blk0000032c_blk0000032d_sig00000c0d,
      A2 => blk00000003_blk0000032c_blk0000032d_sig00000c0d,
      A3 => blk00000003_blk0000032c_blk0000032d_sig00000c0c,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig000002e9,
      Q => blk00000003_blk0000032c_blk0000032d_sig00000c2b,
      Q15 => NLW_blk00000003_blk0000032c_blk0000032d_blk0000036a_Q15_UNCONNECTED
    );
  blk00000003_blk0000032c_blk0000032d_blk00000369 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk0000032c_blk0000032d_sig00000c2a,
      Q => blk00000003_sig000000ac
    );
  blk00000003_blk0000032c_blk0000032d_blk00000368 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk0000032c_blk0000032d_sig00000c0c,
      A1 => blk00000003_blk0000032c_blk0000032d_sig00000c0d,
      A2 => blk00000003_blk0000032c_blk0000032d_sig00000c0d,
      A3 => blk00000003_blk0000032c_blk0000032d_sig00000c0c,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig000002e7,
      Q => blk00000003_blk0000032c_blk0000032d_sig00000c2a,
      Q15 => NLW_blk00000003_blk0000032c_blk0000032d_blk00000368_Q15_UNCONNECTED
    );
  blk00000003_blk0000032c_blk0000032d_blk00000367 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk0000032c_blk0000032d_sig00000c29,
      Q => blk00000003_sig000000af
    );
  blk00000003_blk0000032c_blk0000032d_blk00000366 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk0000032c_blk0000032d_sig00000c0c,
      A1 => blk00000003_blk0000032c_blk0000032d_sig00000c0d,
      A2 => blk00000003_blk0000032c_blk0000032d_sig00000c0d,
      A3 => blk00000003_blk0000032c_blk0000032d_sig00000c0c,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig000002ea,
      Q => blk00000003_blk0000032c_blk0000032d_sig00000c29,
      Q15 => NLW_blk00000003_blk0000032c_blk0000032d_blk00000366_Q15_UNCONNECTED
    );
  blk00000003_blk0000032c_blk0000032d_blk00000365 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk0000032c_blk0000032d_sig00000c28,
      Q => blk00000003_sig000000b0
    );
  blk00000003_blk0000032c_blk0000032d_blk00000364 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk0000032c_blk0000032d_sig00000c0c,
      A1 => blk00000003_blk0000032c_blk0000032d_sig00000c0d,
      A2 => blk00000003_blk0000032c_blk0000032d_sig00000c0d,
      A3 => blk00000003_blk0000032c_blk0000032d_sig00000c0c,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig000002eb,
      Q => blk00000003_blk0000032c_blk0000032d_sig00000c28,
      Q15 => NLW_blk00000003_blk0000032c_blk0000032d_blk00000364_Q15_UNCONNECTED
    );
  blk00000003_blk0000032c_blk0000032d_blk00000363 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk0000032c_blk0000032d_sig00000c27,
      Q => blk00000003_sig000000b1
    );
  blk00000003_blk0000032c_blk0000032d_blk00000362 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk0000032c_blk0000032d_sig00000c0c,
      A1 => blk00000003_blk0000032c_blk0000032d_sig00000c0d,
      A2 => blk00000003_blk0000032c_blk0000032d_sig00000c0d,
      A3 => blk00000003_blk0000032c_blk0000032d_sig00000c0c,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig000002ec,
      Q => blk00000003_blk0000032c_blk0000032d_sig00000c27,
      Q15 => NLW_blk00000003_blk0000032c_blk0000032d_blk00000362_Q15_UNCONNECTED
    );
  blk00000003_blk0000032c_blk0000032d_blk00000361 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk0000032c_blk0000032d_sig00000c26,
      Q => blk00000003_sig000000b2
    );
  blk00000003_blk0000032c_blk0000032d_blk00000360 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk0000032c_blk0000032d_sig00000c0c,
      A1 => blk00000003_blk0000032c_blk0000032d_sig00000c0d,
      A2 => blk00000003_blk0000032c_blk0000032d_sig00000c0d,
      A3 => blk00000003_blk0000032c_blk0000032d_sig00000c0c,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig000002ed,
      Q => blk00000003_blk0000032c_blk0000032d_sig00000c26,
      Q15 => NLW_blk00000003_blk0000032c_blk0000032d_blk00000360_Q15_UNCONNECTED
    );
  blk00000003_blk0000032c_blk0000032d_blk0000035f : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk0000032c_blk0000032d_sig00000c25,
      Q => blk00000003_sig000000b3
    );
  blk00000003_blk0000032c_blk0000032d_blk0000035e : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk0000032c_blk0000032d_sig00000c0c,
      A1 => blk00000003_blk0000032c_blk0000032d_sig00000c0d,
      A2 => blk00000003_blk0000032c_blk0000032d_sig00000c0d,
      A3 => blk00000003_blk0000032c_blk0000032d_sig00000c0c,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig000002ee,
      Q => blk00000003_blk0000032c_blk0000032d_sig00000c25,
      Q15 => NLW_blk00000003_blk0000032c_blk0000032d_blk0000035e_Q15_UNCONNECTED
    );
  blk00000003_blk0000032c_blk0000032d_blk0000035d : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk0000032c_blk0000032d_sig00000c24,
      Q => blk00000003_sig000000b4
    );
  blk00000003_blk0000032c_blk0000032d_blk0000035c : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk0000032c_blk0000032d_sig00000c0c,
      A1 => blk00000003_blk0000032c_blk0000032d_sig00000c0d,
      A2 => blk00000003_blk0000032c_blk0000032d_sig00000c0d,
      A3 => blk00000003_blk0000032c_blk0000032d_sig00000c0c,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig000002ef,
      Q => blk00000003_blk0000032c_blk0000032d_sig00000c24,
      Q15 => NLW_blk00000003_blk0000032c_blk0000032d_blk0000035c_Q15_UNCONNECTED
    );
  blk00000003_blk0000032c_blk0000032d_blk0000035b : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk0000032c_blk0000032d_sig00000c23,
      Q => blk00000003_sig000000b5
    );
  blk00000003_blk0000032c_blk0000032d_blk0000035a : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk0000032c_blk0000032d_sig00000c0c,
      A1 => blk00000003_blk0000032c_blk0000032d_sig00000c0d,
      A2 => blk00000003_blk0000032c_blk0000032d_sig00000c0d,
      A3 => blk00000003_blk0000032c_blk0000032d_sig00000c0c,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig000002f0,
      Q => blk00000003_blk0000032c_blk0000032d_sig00000c23,
      Q15 => NLW_blk00000003_blk0000032c_blk0000032d_blk0000035a_Q15_UNCONNECTED
    );
  blk00000003_blk0000032c_blk0000032d_blk00000359 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk0000032c_blk0000032d_sig00000c22,
      Q => blk00000003_sig000000b6
    );
  blk00000003_blk0000032c_blk0000032d_blk00000358 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk0000032c_blk0000032d_sig00000c0c,
      A1 => blk00000003_blk0000032c_blk0000032d_sig00000c0d,
      A2 => blk00000003_blk0000032c_blk0000032d_sig00000c0d,
      A3 => blk00000003_blk0000032c_blk0000032d_sig00000c0c,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig000002f1,
      Q => blk00000003_blk0000032c_blk0000032d_sig00000c22,
      Q15 => NLW_blk00000003_blk0000032c_blk0000032d_blk00000358_Q15_UNCONNECTED
    );
  blk00000003_blk0000032c_blk0000032d_blk00000357 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk0000032c_blk0000032d_sig00000c21,
      Q => blk00000003_sig000000b7
    );
  blk00000003_blk0000032c_blk0000032d_blk00000356 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk0000032c_blk0000032d_sig00000c0c,
      A1 => blk00000003_blk0000032c_blk0000032d_sig00000c0d,
      A2 => blk00000003_blk0000032c_blk0000032d_sig00000c0d,
      A3 => blk00000003_blk0000032c_blk0000032d_sig00000c0c,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig000002f2,
      Q => blk00000003_blk0000032c_blk0000032d_sig00000c21,
      Q15 => NLW_blk00000003_blk0000032c_blk0000032d_blk00000356_Q15_UNCONNECTED
    );
  blk00000003_blk0000032c_blk0000032d_blk00000355 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk0000032c_blk0000032d_sig00000c20,
      Q => blk00000003_sig000000b8
    );
  blk00000003_blk0000032c_blk0000032d_blk00000354 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk0000032c_blk0000032d_sig00000c0c,
      A1 => blk00000003_blk0000032c_blk0000032d_sig00000c0d,
      A2 => blk00000003_blk0000032c_blk0000032d_sig00000c0d,
      A3 => blk00000003_blk0000032c_blk0000032d_sig00000c0c,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig000002f3,
      Q => blk00000003_blk0000032c_blk0000032d_sig00000c20,
      Q15 => NLW_blk00000003_blk0000032c_blk0000032d_blk00000354_Q15_UNCONNECTED
    );
  blk00000003_blk0000032c_blk0000032d_blk00000353 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk0000032c_blk0000032d_sig00000c1f,
      Q => blk00000003_sig000000b9
    );
  blk00000003_blk0000032c_blk0000032d_blk00000352 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk0000032c_blk0000032d_sig00000c0c,
      A1 => blk00000003_blk0000032c_blk0000032d_sig00000c0d,
      A2 => blk00000003_blk0000032c_blk0000032d_sig00000c0d,
      A3 => blk00000003_blk0000032c_blk0000032d_sig00000c0c,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig000002f4,
      Q => blk00000003_blk0000032c_blk0000032d_sig00000c1f,
      Q15 => NLW_blk00000003_blk0000032c_blk0000032d_blk00000352_Q15_UNCONNECTED
    );
  blk00000003_blk0000032c_blk0000032d_blk00000351 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk0000032c_blk0000032d_sig00000c1e,
      Q => blk00000003_sig000000ba
    );
  blk00000003_blk0000032c_blk0000032d_blk00000350 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk0000032c_blk0000032d_sig00000c0c,
      A1 => blk00000003_blk0000032c_blk0000032d_sig00000c0d,
      A2 => blk00000003_blk0000032c_blk0000032d_sig00000c0d,
      A3 => blk00000003_blk0000032c_blk0000032d_sig00000c0c,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig000002f5,
      Q => blk00000003_blk0000032c_blk0000032d_sig00000c1e,
      Q15 => NLW_blk00000003_blk0000032c_blk0000032d_blk00000350_Q15_UNCONNECTED
    );
  blk00000003_blk0000032c_blk0000032d_blk0000034f : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk0000032c_blk0000032d_sig00000c1d,
      Q => blk00000003_sig000000bb
    );
  blk00000003_blk0000032c_blk0000032d_blk0000034e : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk0000032c_blk0000032d_sig00000c0c,
      A1 => blk00000003_blk0000032c_blk0000032d_sig00000c0d,
      A2 => blk00000003_blk0000032c_blk0000032d_sig00000c0d,
      A3 => blk00000003_blk0000032c_blk0000032d_sig00000c0c,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig000002f6,
      Q => blk00000003_blk0000032c_blk0000032d_sig00000c1d,
      Q15 => NLW_blk00000003_blk0000032c_blk0000032d_blk0000034e_Q15_UNCONNECTED
    );
  blk00000003_blk0000032c_blk0000032d_blk0000034d : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk0000032c_blk0000032d_sig00000c1c,
      Q => blk00000003_sig000000bc
    );
  blk00000003_blk0000032c_blk0000032d_blk0000034c : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk0000032c_blk0000032d_sig00000c0c,
      A1 => blk00000003_blk0000032c_blk0000032d_sig00000c0d,
      A2 => blk00000003_blk0000032c_blk0000032d_sig00000c0d,
      A3 => blk00000003_blk0000032c_blk0000032d_sig00000c0c,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig000002f7,
      Q => blk00000003_blk0000032c_blk0000032d_sig00000c1c,
      Q15 => NLW_blk00000003_blk0000032c_blk0000032d_blk0000034c_Q15_UNCONNECTED
    );
  blk00000003_blk0000032c_blk0000032d_blk0000034b : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk0000032c_blk0000032d_sig00000c1b,
      Q => blk00000003_sig000000bd
    );
  blk00000003_blk0000032c_blk0000032d_blk0000034a : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk0000032c_blk0000032d_sig00000c0c,
      A1 => blk00000003_blk0000032c_blk0000032d_sig00000c0d,
      A2 => blk00000003_blk0000032c_blk0000032d_sig00000c0d,
      A3 => blk00000003_blk0000032c_blk0000032d_sig00000c0c,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig000002f8,
      Q => blk00000003_blk0000032c_blk0000032d_sig00000c1b,
      Q15 => NLW_blk00000003_blk0000032c_blk0000032d_blk0000034a_Q15_UNCONNECTED
    );
  blk00000003_blk0000032c_blk0000032d_blk00000349 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk0000032c_blk0000032d_sig00000c1a,
      Q => blk00000003_sig000000be
    );
  blk00000003_blk0000032c_blk0000032d_blk00000348 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk0000032c_blk0000032d_sig00000c0c,
      A1 => blk00000003_blk0000032c_blk0000032d_sig00000c0d,
      A2 => blk00000003_blk0000032c_blk0000032d_sig00000c0d,
      A3 => blk00000003_blk0000032c_blk0000032d_sig00000c0c,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig000002f9,
      Q => blk00000003_blk0000032c_blk0000032d_sig00000c1a,
      Q15 => NLW_blk00000003_blk0000032c_blk0000032d_blk00000348_Q15_UNCONNECTED
    );
  blk00000003_blk0000032c_blk0000032d_blk00000347 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk0000032c_blk0000032d_sig00000c19,
      Q => blk00000003_sig000000bf
    );
  blk00000003_blk0000032c_blk0000032d_blk00000346 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk0000032c_blk0000032d_sig00000c0c,
      A1 => blk00000003_blk0000032c_blk0000032d_sig00000c0d,
      A2 => blk00000003_blk0000032c_blk0000032d_sig00000c0d,
      A3 => blk00000003_blk0000032c_blk0000032d_sig00000c0c,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig000002fa,
      Q => blk00000003_blk0000032c_blk0000032d_sig00000c19,
      Q15 => NLW_blk00000003_blk0000032c_blk0000032d_blk00000346_Q15_UNCONNECTED
    );
  blk00000003_blk0000032c_blk0000032d_blk00000345 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk0000032c_blk0000032d_sig00000c18,
      Q => blk00000003_sig000000c0
    );
  blk00000003_blk0000032c_blk0000032d_blk00000344 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk0000032c_blk0000032d_sig00000c0c,
      A1 => blk00000003_blk0000032c_blk0000032d_sig00000c0d,
      A2 => blk00000003_blk0000032c_blk0000032d_sig00000c0d,
      A3 => blk00000003_blk0000032c_blk0000032d_sig00000c0c,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig000002fb,
      Q => blk00000003_blk0000032c_blk0000032d_sig00000c18,
      Q15 => NLW_blk00000003_blk0000032c_blk0000032d_blk00000344_Q15_UNCONNECTED
    );
  blk00000003_blk0000032c_blk0000032d_blk00000343 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk0000032c_blk0000032d_sig00000c17,
      Q => blk00000003_sig000000c1
    );
  blk00000003_blk0000032c_blk0000032d_blk00000342 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk0000032c_blk0000032d_sig00000c0c,
      A1 => blk00000003_blk0000032c_blk0000032d_sig00000c0d,
      A2 => blk00000003_blk0000032c_blk0000032d_sig00000c0d,
      A3 => blk00000003_blk0000032c_blk0000032d_sig00000c0c,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig000002fc,
      Q => blk00000003_blk0000032c_blk0000032d_sig00000c17,
      Q15 => NLW_blk00000003_blk0000032c_blk0000032d_blk00000342_Q15_UNCONNECTED
    );
  blk00000003_blk0000032c_blk0000032d_blk00000341 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk0000032c_blk0000032d_sig00000c16,
      Q => blk00000003_sig000000c2
    );
  blk00000003_blk0000032c_blk0000032d_blk00000340 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk0000032c_blk0000032d_sig00000c0c,
      A1 => blk00000003_blk0000032c_blk0000032d_sig00000c0d,
      A2 => blk00000003_blk0000032c_blk0000032d_sig00000c0d,
      A3 => blk00000003_blk0000032c_blk0000032d_sig00000c0c,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig000002fd,
      Q => blk00000003_blk0000032c_blk0000032d_sig00000c16,
      Q15 => NLW_blk00000003_blk0000032c_blk0000032d_blk00000340_Q15_UNCONNECTED
    );
  blk00000003_blk0000032c_blk0000032d_blk0000033f : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk0000032c_blk0000032d_sig00000c15,
      Q => blk00000003_sig000000c3
    );
  blk00000003_blk0000032c_blk0000032d_blk0000033e : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk0000032c_blk0000032d_sig00000c0c,
      A1 => blk00000003_blk0000032c_blk0000032d_sig00000c0d,
      A2 => blk00000003_blk0000032c_blk0000032d_sig00000c0d,
      A3 => blk00000003_blk0000032c_blk0000032d_sig00000c0c,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig000002fe,
      Q => blk00000003_blk0000032c_blk0000032d_sig00000c15,
      Q15 => NLW_blk00000003_blk0000032c_blk0000032d_blk0000033e_Q15_UNCONNECTED
    );
  blk00000003_blk0000032c_blk0000032d_blk0000033d : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk0000032c_blk0000032d_sig00000c14,
      Q => blk00000003_sig000000c4
    );
  blk00000003_blk0000032c_blk0000032d_blk0000033c : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk0000032c_blk0000032d_sig00000c0c,
      A1 => blk00000003_blk0000032c_blk0000032d_sig00000c0d,
      A2 => blk00000003_blk0000032c_blk0000032d_sig00000c0d,
      A3 => blk00000003_blk0000032c_blk0000032d_sig00000c0c,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig000002ff,
      Q => blk00000003_blk0000032c_blk0000032d_sig00000c14,
      Q15 => NLW_blk00000003_blk0000032c_blk0000032d_blk0000033c_Q15_UNCONNECTED
    );
  blk00000003_blk0000032c_blk0000032d_blk0000033b : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk0000032c_blk0000032d_sig00000c13,
      Q => blk00000003_sig000000c5
    );
  blk00000003_blk0000032c_blk0000032d_blk0000033a : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk0000032c_blk0000032d_sig00000c0c,
      A1 => blk00000003_blk0000032c_blk0000032d_sig00000c0d,
      A2 => blk00000003_blk0000032c_blk0000032d_sig00000c0d,
      A3 => blk00000003_blk0000032c_blk0000032d_sig00000c0c,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig00000300,
      Q => blk00000003_blk0000032c_blk0000032d_sig00000c13,
      Q15 => NLW_blk00000003_blk0000032c_blk0000032d_blk0000033a_Q15_UNCONNECTED
    );
  blk00000003_blk0000032c_blk0000032d_blk00000339 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk0000032c_blk0000032d_sig00000c12,
      Q => blk00000003_sig000000c6
    );
  blk00000003_blk0000032c_blk0000032d_blk00000338 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk0000032c_blk0000032d_sig00000c0c,
      A1 => blk00000003_blk0000032c_blk0000032d_sig00000c0d,
      A2 => blk00000003_blk0000032c_blk0000032d_sig00000c0d,
      A3 => blk00000003_blk0000032c_blk0000032d_sig00000c0c,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig00000301,
      Q => blk00000003_blk0000032c_blk0000032d_sig00000c12,
      Q15 => NLW_blk00000003_blk0000032c_blk0000032d_blk00000338_Q15_UNCONNECTED
    );
  blk00000003_blk0000032c_blk0000032d_blk00000337 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk0000032c_blk0000032d_sig00000c11,
      Q => blk00000003_sig000000c7
    );
  blk00000003_blk0000032c_blk0000032d_blk00000336 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk0000032c_blk0000032d_sig00000c0c,
      A1 => blk00000003_blk0000032c_blk0000032d_sig00000c0d,
      A2 => blk00000003_blk0000032c_blk0000032d_sig00000c0d,
      A3 => blk00000003_blk0000032c_blk0000032d_sig00000c0c,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig00000302,
      Q => blk00000003_blk0000032c_blk0000032d_sig00000c11,
      Q15 => NLW_blk00000003_blk0000032c_blk0000032d_blk00000336_Q15_UNCONNECTED
    );
  blk00000003_blk0000032c_blk0000032d_blk00000335 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk0000032c_blk0000032d_sig00000c10,
      Q => blk00000003_sig000000c8
    );
  blk00000003_blk0000032c_blk0000032d_blk00000334 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk0000032c_blk0000032d_sig00000c0c,
      A1 => blk00000003_blk0000032c_blk0000032d_sig00000c0d,
      A2 => blk00000003_blk0000032c_blk0000032d_sig00000c0d,
      A3 => blk00000003_blk0000032c_blk0000032d_sig00000c0c,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig00000303,
      Q => blk00000003_blk0000032c_blk0000032d_sig00000c10,
      Q15 => NLW_blk00000003_blk0000032c_blk0000032d_blk00000334_Q15_UNCONNECTED
    );
  blk00000003_blk0000032c_blk0000032d_blk00000333 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk0000032c_blk0000032d_sig00000c0f,
      Q => blk00000003_sig000000c9
    );
  blk00000003_blk0000032c_blk0000032d_blk00000332 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk0000032c_blk0000032d_sig00000c0c,
      A1 => blk00000003_blk0000032c_blk0000032d_sig00000c0d,
      A2 => blk00000003_blk0000032c_blk0000032d_sig00000c0d,
      A3 => blk00000003_blk0000032c_blk0000032d_sig00000c0c,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig00000304,
      Q => blk00000003_blk0000032c_blk0000032d_sig00000c0f,
      Q15 => NLW_blk00000003_blk0000032c_blk0000032d_blk00000332_Q15_UNCONNECTED
    );
  blk00000003_blk0000032c_blk0000032d_blk00000331 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk0000032c_blk0000032d_sig00000c0e,
      Q => blk00000003_sig000000ca
    );
  blk00000003_blk0000032c_blk0000032d_blk00000330 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk0000032c_blk0000032d_sig00000c0c,
      A1 => blk00000003_blk0000032c_blk0000032d_sig00000c0d,
      A2 => blk00000003_blk0000032c_blk0000032d_sig00000c0d,
      A3 => blk00000003_blk0000032c_blk0000032d_sig00000c0c,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig00000305,
      Q => blk00000003_blk0000032c_blk0000032d_sig00000c0e,
      Q15 => NLW_blk00000003_blk0000032c_blk0000032d_blk00000330_Q15_UNCONNECTED
    );
  blk00000003_blk0000032c_blk0000032d_blk0000032f : VCC
    port map (
      P => blk00000003_blk0000032c_blk0000032d_sig00000c0d
    );
  blk00000003_blk0000032c_blk0000032d_blk0000032e : GND
    port map (
      G => blk00000003_blk0000032c_blk0000032d_sig00000c0c
    );
  blk00000003_blk0000036e_blk0000036f_blk000003af : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk0000036e_blk0000036f_sig00000cce,
      Q => blk00000003_sig00000142
    );
  blk00000003_blk0000036e_blk0000036f_blk000003ae : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk0000036e_blk0000036f_sig00000cae,
      A1 => blk00000003_blk0000036e_blk0000036f_sig00000caf,
      A2 => blk00000003_blk0000036e_blk0000036f_sig00000caf,
      A3 => blk00000003_blk0000036e_blk0000036f_sig00000cae,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig0000028d,
      Q => blk00000003_blk0000036e_blk0000036f_sig00000cce,
      Q15 => NLW_blk00000003_blk0000036e_blk0000036f_blk000003ae_Q15_UNCONNECTED
    );
  blk00000003_blk0000036e_blk0000036f_blk000003ad : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk0000036e_blk0000036f_sig00000ccd,
      Q => blk00000003_sig00000143
    );
  blk00000003_blk0000036e_blk0000036f_blk000003ac : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk0000036e_blk0000036f_sig00000cae,
      A1 => blk00000003_blk0000036e_blk0000036f_sig00000caf,
      A2 => blk00000003_blk0000036e_blk0000036f_sig00000caf,
      A3 => blk00000003_blk0000036e_blk0000036f_sig00000cae,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig0000028f,
      Q => blk00000003_blk0000036e_blk0000036f_sig00000ccd,
      Q15 => NLW_blk00000003_blk0000036e_blk0000036f_blk000003ac_Q15_UNCONNECTED
    );
  blk00000003_blk0000036e_blk0000036f_blk000003ab : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk0000036e_blk0000036f_sig00000ccc,
      Q => blk00000003_sig00000141
    );
  blk00000003_blk0000036e_blk0000036f_blk000003aa : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk0000036e_blk0000036f_sig00000cae,
      A1 => blk00000003_blk0000036e_blk0000036f_sig00000caf,
      A2 => blk00000003_blk0000036e_blk0000036f_sig00000caf,
      A3 => blk00000003_blk0000036e_blk0000036f_sig00000cae,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig0000028b,
      Q => blk00000003_blk0000036e_blk0000036f_sig00000ccc,
      Q15 => NLW_blk00000003_blk0000036e_blk0000036f_blk000003aa_Q15_UNCONNECTED
    );
  blk00000003_blk0000036e_blk0000036f_blk000003a9 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk0000036e_blk0000036f_sig00000ccb,
      Q => blk00000003_sig00000144
    );
  blk00000003_blk0000036e_blk0000036f_blk000003a8 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk0000036e_blk0000036f_sig00000cae,
      A1 => blk00000003_blk0000036e_blk0000036f_sig00000caf,
      A2 => blk00000003_blk0000036e_blk0000036f_sig00000caf,
      A3 => blk00000003_blk0000036e_blk0000036f_sig00000cae,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig00000291,
      Q => blk00000003_blk0000036e_blk0000036f_sig00000ccb,
      Q15 => NLW_blk00000003_blk0000036e_blk0000036f_blk000003a8_Q15_UNCONNECTED
    );
  blk00000003_blk0000036e_blk0000036f_blk000003a7 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk0000036e_blk0000036f_sig00000cca,
      Q => blk00000003_sig00000145
    );
  blk00000003_blk0000036e_blk0000036f_blk000003a6 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk0000036e_blk0000036f_sig00000cae,
      A1 => blk00000003_blk0000036e_blk0000036f_sig00000caf,
      A2 => blk00000003_blk0000036e_blk0000036f_sig00000caf,
      A3 => blk00000003_blk0000036e_blk0000036f_sig00000cae,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig00000293,
      Q => blk00000003_blk0000036e_blk0000036f_sig00000cca,
      Q15 => NLW_blk00000003_blk0000036e_blk0000036f_blk000003a6_Q15_UNCONNECTED
    );
  blk00000003_blk0000036e_blk0000036f_blk000003a5 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk0000036e_blk0000036f_sig00000cc9,
      Q => blk00000003_sig00000146
    );
  blk00000003_blk0000036e_blk0000036f_blk000003a4 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk0000036e_blk0000036f_sig00000cae,
      A1 => blk00000003_blk0000036e_blk0000036f_sig00000caf,
      A2 => blk00000003_blk0000036e_blk0000036f_sig00000caf,
      A3 => blk00000003_blk0000036e_blk0000036f_sig00000cae,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig00000295,
      Q => blk00000003_blk0000036e_blk0000036f_sig00000cc9,
      Q15 => NLW_blk00000003_blk0000036e_blk0000036f_blk000003a4_Q15_UNCONNECTED
    );
  blk00000003_blk0000036e_blk0000036f_blk000003a3 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk0000036e_blk0000036f_sig00000cc8,
      Q => blk00000003_sig00000147
    );
  blk00000003_blk0000036e_blk0000036f_blk000003a2 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk0000036e_blk0000036f_sig00000cae,
      A1 => blk00000003_blk0000036e_blk0000036f_sig00000caf,
      A2 => blk00000003_blk0000036e_blk0000036f_sig00000caf,
      A3 => blk00000003_blk0000036e_blk0000036f_sig00000cae,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig00000297,
      Q => blk00000003_blk0000036e_blk0000036f_sig00000cc8,
      Q15 => NLW_blk00000003_blk0000036e_blk0000036f_blk000003a2_Q15_UNCONNECTED
    );
  blk00000003_blk0000036e_blk0000036f_blk000003a1 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk0000036e_blk0000036f_sig00000cc7,
      Q => blk00000003_sig00000148
    );
  blk00000003_blk0000036e_blk0000036f_blk000003a0 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk0000036e_blk0000036f_sig00000cae,
      A1 => blk00000003_blk0000036e_blk0000036f_sig00000caf,
      A2 => blk00000003_blk0000036e_blk0000036f_sig00000caf,
      A3 => blk00000003_blk0000036e_blk0000036f_sig00000cae,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig00000299,
      Q => blk00000003_blk0000036e_blk0000036f_sig00000cc7,
      Q15 => NLW_blk00000003_blk0000036e_blk0000036f_blk000003a0_Q15_UNCONNECTED
    );
  blk00000003_blk0000036e_blk0000036f_blk0000039f : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk0000036e_blk0000036f_sig00000cc6,
      Q => blk00000003_sig00000149
    );
  blk00000003_blk0000036e_blk0000036f_blk0000039e : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk0000036e_blk0000036f_sig00000cae,
      A1 => blk00000003_blk0000036e_blk0000036f_sig00000caf,
      A2 => blk00000003_blk0000036e_blk0000036f_sig00000caf,
      A3 => blk00000003_blk0000036e_blk0000036f_sig00000cae,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig0000029b,
      Q => blk00000003_blk0000036e_blk0000036f_sig00000cc6,
      Q15 => NLW_blk00000003_blk0000036e_blk0000036f_blk0000039e_Q15_UNCONNECTED
    );
  blk00000003_blk0000036e_blk0000036f_blk0000039d : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk0000036e_blk0000036f_sig00000cc5,
      Q => blk00000003_sig0000014a
    );
  blk00000003_blk0000036e_blk0000036f_blk0000039c : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk0000036e_blk0000036f_sig00000cae,
      A1 => blk00000003_blk0000036e_blk0000036f_sig00000caf,
      A2 => blk00000003_blk0000036e_blk0000036f_sig00000caf,
      A3 => blk00000003_blk0000036e_blk0000036f_sig00000cae,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig0000029d,
      Q => blk00000003_blk0000036e_blk0000036f_sig00000cc5,
      Q15 => NLW_blk00000003_blk0000036e_blk0000036f_blk0000039c_Q15_UNCONNECTED
    );
  blk00000003_blk0000036e_blk0000036f_blk0000039b : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk0000036e_blk0000036f_sig00000cc4,
      Q => blk00000003_sig0000014b
    );
  blk00000003_blk0000036e_blk0000036f_blk0000039a : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk0000036e_blk0000036f_sig00000cae,
      A1 => blk00000003_blk0000036e_blk0000036f_sig00000caf,
      A2 => blk00000003_blk0000036e_blk0000036f_sig00000caf,
      A3 => blk00000003_blk0000036e_blk0000036f_sig00000cae,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig0000029f,
      Q => blk00000003_blk0000036e_blk0000036f_sig00000cc4,
      Q15 => NLW_blk00000003_blk0000036e_blk0000036f_blk0000039a_Q15_UNCONNECTED
    );
  blk00000003_blk0000036e_blk0000036f_blk00000399 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk0000036e_blk0000036f_sig00000cc3,
      Q => blk00000003_sig0000014c
    );
  blk00000003_blk0000036e_blk0000036f_blk00000398 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk0000036e_blk0000036f_sig00000cae,
      A1 => blk00000003_blk0000036e_blk0000036f_sig00000caf,
      A2 => blk00000003_blk0000036e_blk0000036f_sig00000caf,
      A3 => blk00000003_blk0000036e_blk0000036f_sig00000cae,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig000002a1,
      Q => blk00000003_blk0000036e_blk0000036f_sig00000cc3,
      Q15 => NLW_blk00000003_blk0000036e_blk0000036f_blk00000398_Q15_UNCONNECTED
    );
  blk00000003_blk0000036e_blk0000036f_blk00000397 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk0000036e_blk0000036f_sig00000cc2,
      Q => blk00000003_sig0000014d
    );
  blk00000003_blk0000036e_blk0000036f_blk00000396 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk0000036e_blk0000036f_sig00000cae,
      A1 => blk00000003_blk0000036e_blk0000036f_sig00000caf,
      A2 => blk00000003_blk0000036e_blk0000036f_sig00000caf,
      A3 => blk00000003_blk0000036e_blk0000036f_sig00000cae,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig000002a3,
      Q => blk00000003_blk0000036e_blk0000036f_sig00000cc2,
      Q15 => NLW_blk00000003_blk0000036e_blk0000036f_blk00000396_Q15_UNCONNECTED
    );
  blk00000003_blk0000036e_blk0000036f_blk00000395 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk0000036e_blk0000036f_sig00000cc1,
      Q => blk00000003_sig0000014e
    );
  blk00000003_blk0000036e_blk0000036f_blk00000394 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk0000036e_blk0000036f_sig00000cae,
      A1 => blk00000003_blk0000036e_blk0000036f_sig00000caf,
      A2 => blk00000003_blk0000036e_blk0000036f_sig00000caf,
      A3 => blk00000003_blk0000036e_blk0000036f_sig00000cae,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig000002a5,
      Q => blk00000003_blk0000036e_blk0000036f_sig00000cc1,
      Q15 => NLW_blk00000003_blk0000036e_blk0000036f_blk00000394_Q15_UNCONNECTED
    );
  blk00000003_blk0000036e_blk0000036f_blk00000393 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk0000036e_blk0000036f_sig00000cc0,
      Q => blk00000003_sig0000014f
    );
  blk00000003_blk0000036e_blk0000036f_blk00000392 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk0000036e_blk0000036f_sig00000cae,
      A1 => blk00000003_blk0000036e_blk0000036f_sig00000caf,
      A2 => blk00000003_blk0000036e_blk0000036f_sig00000caf,
      A3 => blk00000003_blk0000036e_blk0000036f_sig00000cae,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig000002a7,
      Q => blk00000003_blk0000036e_blk0000036f_sig00000cc0,
      Q15 => NLW_blk00000003_blk0000036e_blk0000036f_blk00000392_Q15_UNCONNECTED
    );
  blk00000003_blk0000036e_blk0000036f_blk00000391 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk0000036e_blk0000036f_sig00000cbf,
      Q => blk00000003_sig00000150
    );
  blk00000003_blk0000036e_blk0000036f_blk00000390 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk0000036e_blk0000036f_sig00000cae,
      A1 => blk00000003_blk0000036e_blk0000036f_sig00000caf,
      A2 => blk00000003_blk0000036e_blk0000036f_sig00000caf,
      A3 => blk00000003_blk0000036e_blk0000036f_sig00000cae,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig000002a9,
      Q => blk00000003_blk0000036e_blk0000036f_sig00000cbf,
      Q15 => NLW_blk00000003_blk0000036e_blk0000036f_blk00000390_Q15_UNCONNECTED
    );
  blk00000003_blk0000036e_blk0000036f_blk0000038f : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk0000036e_blk0000036f_sig00000cbe,
      Q => blk00000003_sig00000151
    );
  blk00000003_blk0000036e_blk0000036f_blk0000038e : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk0000036e_blk0000036f_sig00000cae,
      A1 => blk00000003_blk0000036e_blk0000036f_sig00000caf,
      A2 => blk00000003_blk0000036e_blk0000036f_sig00000caf,
      A3 => blk00000003_blk0000036e_blk0000036f_sig00000cae,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig000002ab,
      Q => blk00000003_blk0000036e_blk0000036f_sig00000cbe,
      Q15 => NLW_blk00000003_blk0000036e_blk0000036f_blk0000038e_Q15_UNCONNECTED
    );
  blk00000003_blk0000036e_blk0000036f_blk0000038d : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk0000036e_blk0000036f_sig00000cbd,
      Q => blk00000003_sig00000152
    );
  blk00000003_blk0000036e_blk0000036f_blk0000038c : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk0000036e_blk0000036f_sig00000cae,
      A1 => blk00000003_blk0000036e_blk0000036f_sig00000caf,
      A2 => blk00000003_blk0000036e_blk0000036f_sig00000caf,
      A3 => blk00000003_blk0000036e_blk0000036f_sig00000cae,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig000002ad,
      Q => blk00000003_blk0000036e_blk0000036f_sig00000cbd,
      Q15 => NLW_blk00000003_blk0000036e_blk0000036f_blk0000038c_Q15_UNCONNECTED
    );
  blk00000003_blk0000036e_blk0000036f_blk0000038b : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk0000036e_blk0000036f_sig00000cbc,
      Q => blk00000003_sig00000153
    );
  blk00000003_blk0000036e_blk0000036f_blk0000038a : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk0000036e_blk0000036f_sig00000cae,
      A1 => blk00000003_blk0000036e_blk0000036f_sig00000caf,
      A2 => blk00000003_blk0000036e_blk0000036f_sig00000caf,
      A3 => blk00000003_blk0000036e_blk0000036f_sig00000cae,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig000002af,
      Q => blk00000003_blk0000036e_blk0000036f_sig00000cbc,
      Q15 => NLW_blk00000003_blk0000036e_blk0000036f_blk0000038a_Q15_UNCONNECTED
    );
  blk00000003_blk0000036e_blk0000036f_blk00000389 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk0000036e_blk0000036f_sig00000cbb,
      Q => blk00000003_sig00000154
    );
  blk00000003_blk0000036e_blk0000036f_blk00000388 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk0000036e_blk0000036f_sig00000cae,
      A1 => blk00000003_blk0000036e_blk0000036f_sig00000caf,
      A2 => blk00000003_blk0000036e_blk0000036f_sig00000caf,
      A3 => blk00000003_blk0000036e_blk0000036f_sig00000cae,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig000002b1,
      Q => blk00000003_blk0000036e_blk0000036f_sig00000cbb,
      Q15 => NLW_blk00000003_blk0000036e_blk0000036f_blk00000388_Q15_UNCONNECTED
    );
  blk00000003_blk0000036e_blk0000036f_blk00000387 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk0000036e_blk0000036f_sig00000cba,
      Q => blk00000003_sig00000155
    );
  blk00000003_blk0000036e_blk0000036f_blk00000386 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk0000036e_blk0000036f_sig00000cae,
      A1 => blk00000003_blk0000036e_blk0000036f_sig00000caf,
      A2 => blk00000003_blk0000036e_blk0000036f_sig00000caf,
      A3 => blk00000003_blk0000036e_blk0000036f_sig00000cae,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig000002b3,
      Q => blk00000003_blk0000036e_blk0000036f_sig00000cba,
      Q15 => NLW_blk00000003_blk0000036e_blk0000036f_blk00000386_Q15_UNCONNECTED
    );
  blk00000003_blk0000036e_blk0000036f_blk00000385 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk0000036e_blk0000036f_sig00000cb9,
      Q => blk00000003_sig00000156
    );
  blk00000003_blk0000036e_blk0000036f_blk00000384 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk0000036e_blk0000036f_sig00000cae,
      A1 => blk00000003_blk0000036e_blk0000036f_sig00000caf,
      A2 => blk00000003_blk0000036e_blk0000036f_sig00000caf,
      A3 => blk00000003_blk0000036e_blk0000036f_sig00000cae,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig000002b5,
      Q => blk00000003_blk0000036e_blk0000036f_sig00000cb9,
      Q15 => NLW_blk00000003_blk0000036e_blk0000036f_blk00000384_Q15_UNCONNECTED
    );
  blk00000003_blk0000036e_blk0000036f_blk00000383 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk0000036e_blk0000036f_sig00000cb8,
      Q => blk00000003_sig00000157
    );
  blk00000003_blk0000036e_blk0000036f_blk00000382 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk0000036e_blk0000036f_sig00000cae,
      A1 => blk00000003_blk0000036e_blk0000036f_sig00000caf,
      A2 => blk00000003_blk0000036e_blk0000036f_sig00000caf,
      A3 => blk00000003_blk0000036e_blk0000036f_sig00000cae,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig000002b7,
      Q => blk00000003_blk0000036e_blk0000036f_sig00000cb8,
      Q15 => NLW_blk00000003_blk0000036e_blk0000036f_blk00000382_Q15_UNCONNECTED
    );
  blk00000003_blk0000036e_blk0000036f_blk00000381 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk0000036e_blk0000036f_sig00000cb7,
      Q => blk00000003_sig00000158
    );
  blk00000003_blk0000036e_blk0000036f_blk00000380 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk0000036e_blk0000036f_sig00000cae,
      A1 => blk00000003_blk0000036e_blk0000036f_sig00000caf,
      A2 => blk00000003_blk0000036e_blk0000036f_sig00000caf,
      A3 => blk00000003_blk0000036e_blk0000036f_sig00000cae,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig000002b9,
      Q => blk00000003_blk0000036e_blk0000036f_sig00000cb7,
      Q15 => NLW_blk00000003_blk0000036e_blk0000036f_blk00000380_Q15_UNCONNECTED
    );
  blk00000003_blk0000036e_blk0000036f_blk0000037f : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk0000036e_blk0000036f_sig00000cb6,
      Q => blk00000003_sig00000159
    );
  blk00000003_blk0000036e_blk0000036f_blk0000037e : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk0000036e_blk0000036f_sig00000cae,
      A1 => blk00000003_blk0000036e_blk0000036f_sig00000caf,
      A2 => blk00000003_blk0000036e_blk0000036f_sig00000caf,
      A3 => blk00000003_blk0000036e_blk0000036f_sig00000cae,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig000002bb,
      Q => blk00000003_blk0000036e_blk0000036f_sig00000cb6,
      Q15 => NLW_blk00000003_blk0000036e_blk0000036f_blk0000037e_Q15_UNCONNECTED
    );
  blk00000003_blk0000036e_blk0000036f_blk0000037d : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk0000036e_blk0000036f_sig00000cb5,
      Q => blk00000003_sig0000015a
    );
  blk00000003_blk0000036e_blk0000036f_blk0000037c : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk0000036e_blk0000036f_sig00000cae,
      A1 => blk00000003_blk0000036e_blk0000036f_sig00000caf,
      A2 => blk00000003_blk0000036e_blk0000036f_sig00000caf,
      A3 => blk00000003_blk0000036e_blk0000036f_sig00000cae,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig000002bd,
      Q => blk00000003_blk0000036e_blk0000036f_sig00000cb5,
      Q15 => NLW_blk00000003_blk0000036e_blk0000036f_blk0000037c_Q15_UNCONNECTED
    );
  blk00000003_blk0000036e_blk0000036f_blk0000037b : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk0000036e_blk0000036f_sig00000cb4,
      Q => blk00000003_sig0000015b
    );
  blk00000003_blk0000036e_blk0000036f_blk0000037a : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk0000036e_blk0000036f_sig00000cae,
      A1 => blk00000003_blk0000036e_blk0000036f_sig00000caf,
      A2 => blk00000003_blk0000036e_blk0000036f_sig00000caf,
      A3 => blk00000003_blk0000036e_blk0000036f_sig00000cae,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig000002bf,
      Q => blk00000003_blk0000036e_blk0000036f_sig00000cb4,
      Q15 => NLW_blk00000003_blk0000036e_blk0000036f_blk0000037a_Q15_UNCONNECTED
    );
  blk00000003_blk0000036e_blk0000036f_blk00000379 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk0000036e_blk0000036f_sig00000cb3,
      Q => blk00000003_sig0000015c
    );
  blk00000003_blk0000036e_blk0000036f_blk00000378 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk0000036e_blk0000036f_sig00000cae,
      A1 => blk00000003_blk0000036e_blk0000036f_sig00000caf,
      A2 => blk00000003_blk0000036e_blk0000036f_sig00000caf,
      A3 => blk00000003_blk0000036e_blk0000036f_sig00000cae,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig000002c1,
      Q => blk00000003_blk0000036e_blk0000036f_sig00000cb3,
      Q15 => NLW_blk00000003_blk0000036e_blk0000036f_blk00000378_Q15_UNCONNECTED
    );
  blk00000003_blk0000036e_blk0000036f_blk00000377 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk0000036e_blk0000036f_sig00000cb2,
      Q => blk00000003_sig0000015d
    );
  blk00000003_blk0000036e_blk0000036f_blk00000376 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk0000036e_blk0000036f_sig00000cae,
      A1 => blk00000003_blk0000036e_blk0000036f_sig00000caf,
      A2 => blk00000003_blk0000036e_blk0000036f_sig00000caf,
      A3 => blk00000003_blk0000036e_blk0000036f_sig00000cae,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig000002c3,
      Q => blk00000003_blk0000036e_blk0000036f_sig00000cb2,
      Q15 => NLW_blk00000003_blk0000036e_blk0000036f_blk00000376_Q15_UNCONNECTED
    );
  blk00000003_blk0000036e_blk0000036f_blk00000375 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk0000036e_blk0000036f_sig00000cb1,
      Q => blk00000003_sig0000015e
    );
  blk00000003_blk0000036e_blk0000036f_blk00000374 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk0000036e_blk0000036f_sig00000cae,
      A1 => blk00000003_blk0000036e_blk0000036f_sig00000caf,
      A2 => blk00000003_blk0000036e_blk0000036f_sig00000caf,
      A3 => blk00000003_blk0000036e_blk0000036f_sig00000cae,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig000002c5,
      Q => blk00000003_blk0000036e_blk0000036f_sig00000cb1,
      Q15 => NLW_blk00000003_blk0000036e_blk0000036f_blk00000374_Q15_UNCONNECTED
    );
  blk00000003_blk0000036e_blk0000036f_blk00000373 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk0000036e_blk0000036f_sig00000cb0,
      Q => blk00000003_sig0000015f
    );
  blk00000003_blk0000036e_blk0000036f_blk00000372 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk0000036e_blk0000036f_sig00000cae,
      A1 => blk00000003_blk0000036e_blk0000036f_sig00000caf,
      A2 => blk00000003_blk0000036e_blk0000036f_sig00000caf,
      A3 => blk00000003_blk0000036e_blk0000036f_sig00000cae,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig000002c7,
      Q => blk00000003_blk0000036e_blk0000036f_sig00000cb0,
      Q15 => NLW_blk00000003_blk0000036e_blk0000036f_blk00000372_Q15_UNCONNECTED
    );
  blk00000003_blk0000036e_blk0000036f_blk00000371 : VCC
    port map (
      P => blk00000003_blk0000036e_blk0000036f_sig00000caf
    );
  blk00000003_blk0000036e_blk0000036f_blk00000370 : GND
    port map (
      G => blk00000003_blk0000036e_blk0000036f_sig00000cae
    );
  blk00000003_blk000003b0_blk000003b1_blk000003b5 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk000003b0_blk000003b1_sig00000cd9,
      Q => blk00000003_sig000000cb
    );
  blk00000003_blk000003b0_blk000003b1_blk000003b4 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk000003b0_blk000003b1_sig00000cd8,
      A1 => blk00000003_blk000003b0_blk000003b1_sig00000cd8,
      A2 => blk00000003_blk000003b0_blk000003b1_sig00000cd8,
      A3 => blk00000003_blk000003b0_blk000003b1_sig00000cd7,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig00000288,
      Q => blk00000003_blk000003b0_blk000003b1_sig00000cd9,
      Q15 => NLW_blk00000003_blk000003b0_blk000003b1_blk000003b4_Q15_UNCONNECTED
    );
  blk00000003_blk000003b0_blk000003b1_blk000003b3 : VCC
    port map (
      P => blk00000003_blk000003b0_blk000003b1_sig00000cd8
    );
  blk00000003_blk000003b0_blk000003b1_blk000003b2 : GND
    port map (
      G => blk00000003_blk000003b0_blk000003b1_sig00000cd7
    );
  blk00000003_blk00000418_blk00000419_blk00000458 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk00000418_blk00000419_sig00000d7b,
      Q => blk00000003_sig000005e0
    );
  blk00000003_blk00000418_blk00000419_blk00000457 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk00000418_blk00000419_sig00000d5c,
      A1 => blk00000003_blk00000418_blk00000419_sig00000d5c,
      A2 => blk00000003_blk00000418_blk00000419_sig00000d5c,
      A3 => blk00000003_blk00000418_blk00000419_sig00000d5c,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig00000266,
      Q => blk00000003_blk00000418_blk00000419_sig00000d7b,
      Q15 => NLW_blk00000003_blk00000418_blk00000419_blk00000457_Q15_UNCONNECTED
    );
  blk00000003_blk00000418_blk00000419_blk00000456 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk00000418_blk00000419_sig00000d7a,
      Q => blk00000003_sig000005e1
    );
  blk00000003_blk00000418_blk00000419_blk00000455 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk00000418_blk00000419_sig00000d5c,
      A1 => blk00000003_blk00000418_blk00000419_sig00000d5c,
      A2 => blk00000003_blk00000418_blk00000419_sig00000d5c,
      A3 => blk00000003_blk00000418_blk00000419_sig00000d5c,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig00000267,
      Q => blk00000003_blk00000418_blk00000419_sig00000d7a,
      Q15 => NLW_blk00000003_blk00000418_blk00000419_blk00000455_Q15_UNCONNECTED
    );
  blk00000003_blk00000418_blk00000419_blk00000454 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk00000418_blk00000419_sig00000d79,
      Q => blk00000003_sig000005df
    );
  blk00000003_blk00000418_blk00000419_blk00000453 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk00000418_blk00000419_sig00000d5c,
      A1 => blk00000003_blk00000418_blk00000419_sig00000d5c,
      A2 => blk00000003_blk00000418_blk00000419_sig00000d5c,
      A3 => blk00000003_blk00000418_blk00000419_sig00000d5c,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig00000265,
      Q => blk00000003_blk00000418_blk00000419_sig00000d79,
      Q15 => NLW_blk00000003_blk00000418_blk00000419_blk00000453_Q15_UNCONNECTED
    );
  blk00000003_blk00000418_blk00000419_blk00000452 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk00000418_blk00000419_sig00000d78,
      Q => blk00000003_sig000005e2
    );
  blk00000003_blk00000418_blk00000419_blk00000451 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk00000418_blk00000419_sig00000d5c,
      A1 => blk00000003_blk00000418_blk00000419_sig00000d5c,
      A2 => blk00000003_blk00000418_blk00000419_sig00000d5c,
      A3 => blk00000003_blk00000418_blk00000419_sig00000d5c,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig00000268,
      Q => blk00000003_blk00000418_blk00000419_sig00000d78,
      Q15 => NLW_blk00000003_blk00000418_blk00000419_blk00000451_Q15_UNCONNECTED
    );
  blk00000003_blk00000418_blk00000419_blk00000450 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk00000418_blk00000419_sig00000d77,
      Q => blk00000003_sig000005e3
    );
  blk00000003_blk00000418_blk00000419_blk0000044f : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk00000418_blk00000419_sig00000d5c,
      A1 => blk00000003_blk00000418_blk00000419_sig00000d5c,
      A2 => blk00000003_blk00000418_blk00000419_sig00000d5c,
      A3 => blk00000003_blk00000418_blk00000419_sig00000d5c,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig00000269,
      Q => blk00000003_blk00000418_blk00000419_sig00000d77,
      Q15 => NLW_blk00000003_blk00000418_blk00000419_blk0000044f_Q15_UNCONNECTED
    );
  blk00000003_blk00000418_blk00000419_blk0000044e : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk00000418_blk00000419_sig00000d76,
      Q => blk00000003_sig000005e4
    );
  blk00000003_blk00000418_blk00000419_blk0000044d : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk00000418_blk00000419_sig00000d5c,
      A1 => blk00000003_blk00000418_blk00000419_sig00000d5c,
      A2 => blk00000003_blk00000418_blk00000419_sig00000d5c,
      A3 => blk00000003_blk00000418_blk00000419_sig00000d5c,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig0000026a,
      Q => blk00000003_blk00000418_blk00000419_sig00000d76,
      Q15 => NLW_blk00000003_blk00000418_blk00000419_blk0000044d_Q15_UNCONNECTED
    );
  blk00000003_blk00000418_blk00000419_blk0000044c : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk00000418_blk00000419_sig00000d75,
      Q => blk00000003_sig000005e5
    );
  blk00000003_blk00000418_blk00000419_blk0000044b : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk00000418_blk00000419_sig00000d5c,
      A1 => blk00000003_blk00000418_blk00000419_sig00000d5c,
      A2 => blk00000003_blk00000418_blk00000419_sig00000d5c,
      A3 => blk00000003_blk00000418_blk00000419_sig00000d5c,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig0000026b,
      Q => blk00000003_blk00000418_blk00000419_sig00000d75,
      Q15 => NLW_blk00000003_blk00000418_blk00000419_blk0000044b_Q15_UNCONNECTED
    );
  blk00000003_blk00000418_blk00000419_blk0000044a : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk00000418_blk00000419_sig00000d74,
      Q => blk00000003_sig000005e6
    );
  blk00000003_blk00000418_blk00000419_blk00000449 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk00000418_blk00000419_sig00000d5c,
      A1 => blk00000003_blk00000418_blk00000419_sig00000d5c,
      A2 => blk00000003_blk00000418_blk00000419_sig00000d5c,
      A3 => blk00000003_blk00000418_blk00000419_sig00000d5c,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig0000026c,
      Q => blk00000003_blk00000418_blk00000419_sig00000d74,
      Q15 => NLW_blk00000003_blk00000418_blk00000419_blk00000449_Q15_UNCONNECTED
    );
  blk00000003_blk00000418_blk00000419_blk00000448 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk00000418_blk00000419_sig00000d73,
      Q => blk00000003_sig000005e7
    );
  blk00000003_blk00000418_blk00000419_blk00000447 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk00000418_blk00000419_sig00000d5c,
      A1 => blk00000003_blk00000418_blk00000419_sig00000d5c,
      A2 => blk00000003_blk00000418_blk00000419_sig00000d5c,
      A3 => blk00000003_blk00000418_blk00000419_sig00000d5c,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig0000026d,
      Q => blk00000003_blk00000418_blk00000419_sig00000d73,
      Q15 => NLW_blk00000003_blk00000418_blk00000419_blk00000447_Q15_UNCONNECTED
    );
  blk00000003_blk00000418_blk00000419_blk00000446 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk00000418_blk00000419_sig00000d72,
      Q => blk00000003_sig000005e8
    );
  blk00000003_blk00000418_blk00000419_blk00000445 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk00000418_blk00000419_sig00000d5c,
      A1 => blk00000003_blk00000418_blk00000419_sig00000d5c,
      A2 => blk00000003_blk00000418_blk00000419_sig00000d5c,
      A3 => blk00000003_blk00000418_blk00000419_sig00000d5c,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig0000026e,
      Q => blk00000003_blk00000418_blk00000419_sig00000d72,
      Q15 => NLW_blk00000003_blk00000418_blk00000419_blk00000445_Q15_UNCONNECTED
    );
  blk00000003_blk00000418_blk00000419_blk00000444 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk00000418_blk00000419_sig00000d71,
      Q => blk00000003_sig000005e9
    );
  blk00000003_blk00000418_blk00000419_blk00000443 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk00000418_blk00000419_sig00000d5c,
      A1 => blk00000003_blk00000418_blk00000419_sig00000d5c,
      A2 => blk00000003_blk00000418_blk00000419_sig00000d5c,
      A3 => blk00000003_blk00000418_blk00000419_sig00000d5c,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig0000026f,
      Q => blk00000003_blk00000418_blk00000419_sig00000d71,
      Q15 => NLW_blk00000003_blk00000418_blk00000419_blk00000443_Q15_UNCONNECTED
    );
  blk00000003_blk00000418_blk00000419_blk00000442 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk00000418_blk00000419_sig00000d70,
      Q => blk00000003_sig000005ea
    );
  blk00000003_blk00000418_blk00000419_blk00000441 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk00000418_blk00000419_sig00000d5c,
      A1 => blk00000003_blk00000418_blk00000419_sig00000d5c,
      A2 => blk00000003_blk00000418_blk00000419_sig00000d5c,
      A3 => blk00000003_blk00000418_blk00000419_sig00000d5c,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig00000270,
      Q => blk00000003_blk00000418_blk00000419_sig00000d70,
      Q15 => NLW_blk00000003_blk00000418_blk00000419_blk00000441_Q15_UNCONNECTED
    );
  blk00000003_blk00000418_blk00000419_blk00000440 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk00000418_blk00000419_sig00000d6f,
      Q => blk00000003_sig000005eb
    );
  blk00000003_blk00000418_blk00000419_blk0000043f : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk00000418_blk00000419_sig00000d5c,
      A1 => blk00000003_blk00000418_blk00000419_sig00000d5c,
      A2 => blk00000003_blk00000418_blk00000419_sig00000d5c,
      A3 => blk00000003_blk00000418_blk00000419_sig00000d5c,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig00000271,
      Q => blk00000003_blk00000418_blk00000419_sig00000d6f,
      Q15 => NLW_blk00000003_blk00000418_blk00000419_blk0000043f_Q15_UNCONNECTED
    );
  blk00000003_blk00000418_blk00000419_blk0000043e : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk00000418_blk00000419_sig00000d6e,
      Q => blk00000003_sig000005ec
    );
  blk00000003_blk00000418_blk00000419_blk0000043d : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk00000418_blk00000419_sig00000d5c,
      A1 => blk00000003_blk00000418_blk00000419_sig00000d5c,
      A2 => blk00000003_blk00000418_blk00000419_sig00000d5c,
      A3 => blk00000003_blk00000418_blk00000419_sig00000d5c,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig00000272,
      Q => blk00000003_blk00000418_blk00000419_sig00000d6e,
      Q15 => NLW_blk00000003_blk00000418_blk00000419_blk0000043d_Q15_UNCONNECTED
    );
  blk00000003_blk00000418_blk00000419_blk0000043c : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk00000418_blk00000419_sig00000d6d,
      Q => blk00000003_sig000005ed
    );
  blk00000003_blk00000418_blk00000419_blk0000043b : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk00000418_blk00000419_sig00000d5c,
      A1 => blk00000003_blk00000418_blk00000419_sig00000d5c,
      A2 => blk00000003_blk00000418_blk00000419_sig00000d5c,
      A3 => blk00000003_blk00000418_blk00000419_sig00000d5c,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig00000273,
      Q => blk00000003_blk00000418_blk00000419_sig00000d6d,
      Q15 => NLW_blk00000003_blk00000418_blk00000419_blk0000043b_Q15_UNCONNECTED
    );
  blk00000003_blk00000418_blk00000419_blk0000043a : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk00000418_blk00000419_sig00000d6c,
      Q => blk00000003_sig000005ee
    );
  blk00000003_blk00000418_blk00000419_blk00000439 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk00000418_blk00000419_sig00000d5c,
      A1 => blk00000003_blk00000418_blk00000419_sig00000d5c,
      A2 => blk00000003_blk00000418_blk00000419_sig00000d5c,
      A3 => blk00000003_blk00000418_blk00000419_sig00000d5c,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig00000274,
      Q => blk00000003_blk00000418_blk00000419_sig00000d6c,
      Q15 => NLW_blk00000003_blk00000418_blk00000419_blk00000439_Q15_UNCONNECTED
    );
  blk00000003_blk00000418_blk00000419_blk00000438 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk00000418_blk00000419_sig00000d6b,
      Q => blk00000003_sig000005ef
    );
  blk00000003_blk00000418_blk00000419_blk00000437 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk00000418_blk00000419_sig00000d5c,
      A1 => blk00000003_blk00000418_blk00000419_sig00000d5c,
      A2 => blk00000003_blk00000418_blk00000419_sig00000d5c,
      A3 => blk00000003_blk00000418_blk00000419_sig00000d5c,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig00000275,
      Q => blk00000003_blk00000418_blk00000419_sig00000d6b,
      Q15 => NLW_blk00000003_blk00000418_blk00000419_blk00000437_Q15_UNCONNECTED
    );
  blk00000003_blk00000418_blk00000419_blk00000436 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk00000418_blk00000419_sig00000d6a,
      Q => blk00000003_sig000005f0
    );
  blk00000003_blk00000418_blk00000419_blk00000435 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk00000418_blk00000419_sig00000d5c,
      A1 => blk00000003_blk00000418_blk00000419_sig00000d5c,
      A2 => blk00000003_blk00000418_blk00000419_sig00000d5c,
      A3 => blk00000003_blk00000418_blk00000419_sig00000d5c,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig00000276,
      Q => blk00000003_blk00000418_blk00000419_sig00000d6a,
      Q15 => NLW_blk00000003_blk00000418_blk00000419_blk00000435_Q15_UNCONNECTED
    );
  blk00000003_blk00000418_blk00000419_blk00000434 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk00000418_blk00000419_sig00000d69,
      Q => blk00000003_sig000005f1
    );
  blk00000003_blk00000418_blk00000419_blk00000433 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk00000418_blk00000419_sig00000d5c,
      A1 => blk00000003_blk00000418_blk00000419_sig00000d5c,
      A2 => blk00000003_blk00000418_blk00000419_sig00000d5c,
      A3 => blk00000003_blk00000418_blk00000419_sig00000d5c,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig00000277,
      Q => blk00000003_blk00000418_blk00000419_sig00000d69,
      Q15 => NLW_blk00000003_blk00000418_blk00000419_blk00000433_Q15_UNCONNECTED
    );
  blk00000003_blk00000418_blk00000419_blk00000432 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk00000418_blk00000419_sig00000d68,
      Q => blk00000003_sig000005f2
    );
  blk00000003_blk00000418_blk00000419_blk00000431 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk00000418_blk00000419_sig00000d5c,
      A1 => blk00000003_blk00000418_blk00000419_sig00000d5c,
      A2 => blk00000003_blk00000418_blk00000419_sig00000d5c,
      A3 => blk00000003_blk00000418_blk00000419_sig00000d5c,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig00000278,
      Q => blk00000003_blk00000418_blk00000419_sig00000d68,
      Q15 => NLW_blk00000003_blk00000418_blk00000419_blk00000431_Q15_UNCONNECTED
    );
  blk00000003_blk00000418_blk00000419_blk00000430 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk00000418_blk00000419_sig00000d67,
      Q => blk00000003_sig000005f3
    );
  blk00000003_blk00000418_blk00000419_blk0000042f : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk00000418_blk00000419_sig00000d5c,
      A1 => blk00000003_blk00000418_blk00000419_sig00000d5c,
      A2 => blk00000003_blk00000418_blk00000419_sig00000d5c,
      A3 => blk00000003_blk00000418_blk00000419_sig00000d5c,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig00000279,
      Q => blk00000003_blk00000418_blk00000419_sig00000d67,
      Q15 => NLW_blk00000003_blk00000418_blk00000419_blk0000042f_Q15_UNCONNECTED
    );
  blk00000003_blk00000418_blk00000419_blk0000042e : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk00000418_blk00000419_sig00000d66,
      Q => blk00000003_sig000005f4
    );
  blk00000003_blk00000418_blk00000419_blk0000042d : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk00000418_blk00000419_sig00000d5c,
      A1 => blk00000003_blk00000418_blk00000419_sig00000d5c,
      A2 => blk00000003_blk00000418_blk00000419_sig00000d5c,
      A3 => blk00000003_blk00000418_blk00000419_sig00000d5c,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig0000027a,
      Q => blk00000003_blk00000418_blk00000419_sig00000d66,
      Q15 => NLW_blk00000003_blk00000418_blk00000419_blk0000042d_Q15_UNCONNECTED
    );
  blk00000003_blk00000418_blk00000419_blk0000042c : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk00000418_blk00000419_sig00000d65,
      Q => blk00000003_sig000005f5
    );
  blk00000003_blk00000418_blk00000419_blk0000042b : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk00000418_blk00000419_sig00000d5c,
      A1 => blk00000003_blk00000418_blk00000419_sig00000d5c,
      A2 => blk00000003_blk00000418_blk00000419_sig00000d5c,
      A3 => blk00000003_blk00000418_blk00000419_sig00000d5c,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig0000027b,
      Q => blk00000003_blk00000418_blk00000419_sig00000d65,
      Q15 => NLW_blk00000003_blk00000418_blk00000419_blk0000042b_Q15_UNCONNECTED
    );
  blk00000003_blk00000418_blk00000419_blk0000042a : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk00000418_blk00000419_sig00000d64,
      Q => blk00000003_sig000005f6
    );
  blk00000003_blk00000418_blk00000419_blk00000429 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk00000418_blk00000419_sig00000d5c,
      A1 => blk00000003_blk00000418_blk00000419_sig00000d5c,
      A2 => blk00000003_blk00000418_blk00000419_sig00000d5c,
      A3 => blk00000003_blk00000418_blk00000419_sig00000d5c,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig0000027c,
      Q => blk00000003_blk00000418_blk00000419_sig00000d64,
      Q15 => NLW_blk00000003_blk00000418_blk00000419_blk00000429_Q15_UNCONNECTED
    );
  blk00000003_blk00000418_blk00000419_blk00000428 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk00000418_blk00000419_sig00000d63,
      Q => blk00000003_sig000005f7
    );
  blk00000003_blk00000418_blk00000419_blk00000427 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk00000418_blk00000419_sig00000d5c,
      A1 => blk00000003_blk00000418_blk00000419_sig00000d5c,
      A2 => blk00000003_blk00000418_blk00000419_sig00000d5c,
      A3 => blk00000003_blk00000418_blk00000419_sig00000d5c,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig0000027d,
      Q => blk00000003_blk00000418_blk00000419_sig00000d63,
      Q15 => NLW_blk00000003_blk00000418_blk00000419_blk00000427_Q15_UNCONNECTED
    );
  blk00000003_blk00000418_blk00000419_blk00000426 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk00000418_blk00000419_sig00000d62,
      Q => blk00000003_sig000005f8
    );
  blk00000003_blk00000418_blk00000419_blk00000425 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk00000418_blk00000419_sig00000d5c,
      A1 => blk00000003_blk00000418_blk00000419_sig00000d5c,
      A2 => blk00000003_blk00000418_blk00000419_sig00000d5c,
      A3 => blk00000003_blk00000418_blk00000419_sig00000d5c,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig0000027e,
      Q => blk00000003_blk00000418_blk00000419_sig00000d62,
      Q15 => NLW_blk00000003_blk00000418_blk00000419_blk00000425_Q15_UNCONNECTED
    );
  blk00000003_blk00000418_blk00000419_blk00000424 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk00000418_blk00000419_sig00000d61,
      Q => blk00000003_sig000005f9
    );
  blk00000003_blk00000418_blk00000419_blk00000423 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk00000418_blk00000419_sig00000d5c,
      A1 => blk00000003_blk00000418_blk00000419_sig00000d5c,
      A2 => blk00000003_blk00000418_blk00000419_sig00000d5c,
      A3 => blk00000003_blk00000418_blk00000419_sig00000d5c,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig0000027f,
      Q => blk00000003_blk00000418_blk00000419_sig00000d61,
      Q15 => NLW_blk00000003_blk00000418_blk00000419_blk00000423_Q15_UNCONNECTED
    );
  blk00000003_blk00000418_blk00000419_blk00000422 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk00000418_blk00000419_sig00000d60,
      Q => blk00000003_sig000005fa
    );
  blk00000003_blk00000418_blk00000419_blk00000421 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk00000418_blk00000419_sig00000d5c,
      A1 => blk00000003_blk00000418_blk00000419_sig00000d5c,
      A2 => blk00000003_blk00000418_blk00000419_sig00000d5c,
      A3 => blk00000003_blk00000418_blk00000419_sig00000d5c,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig00000280,
      Q => blk00000003_blk00000418_blk00000419_sig00000d60,
      Q15 => NLW_blk00000003_blk00000418_blk00000419_blk00000421_Q15_UNCONNECTED
    );
  blk00000003_blk00000418_blk00000419_blk00000420 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk00000418_blk00000419_sig00000d5f,
      Q => blk00000003_sig000005fb
    );
  blk00000003_blk00000418_blk00000419_blk0000041f : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk00000418_blk00000419_sig00000d5c,
      A1 => blk00000003_blk00000418_blk00000419_sig00000d5c,
      A2 => blk00000003_blk00000418_blk00000419_sig00000d5c,
      A3 => blk00000003_blk00000418_blk00000419_sig00000d5c,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig00000281,
      Q => blk00000003_blk00000418_blk00000419_sig00000d5f,
      Q15 => NLW_blk00000003_blk00000418_blk00000419_blk0000041f_Q15_UNCONNECTED
    );
  blk00000003_blk00000418_blk00000419_blk0000041e : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk00000418_blk00000419_sig00000d5e,
      Q => blk00000003_sig000005fc
    );
  blk00000003_blk00000418_blk00000419_blk0000041d : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk00000418_blk00000419_sig00000d5c,
      A1 => blk00000003_blk00000418_blk00000419_sig00000d5c,
      A2 => blk00000003_blk00000418_blk00000419_sig00000d5c,
      A3 => blk00000003_blk00000418_blk00000419_sig00000d5c,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig00000282,
      Q => blk00000003_blk00000418_blk00000419_sig00000d5e,
      Q15 => NLW_blk00000003_blk00000418_blk00000419_blk0000041d_Q15_UNCONNECTED
    );
  blk00000003_blk00000418_blk00000419_blk0000041c : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk00000418_blk00000419_sig00000d5d,
      Q => blk00000003_sig000005fd
    );
  blk00000003_blk00000418_blk00000419_blk0000041b : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk00000418_blk00000419_sig00000d5c,
      A1 => blk00000003_blk00000418_blk00000419_sig00000d5c,
      A2 => blk00000003_blk00000418_blk00000419_sig00000d5c,
      A3 => blk00000003_blk00000418_blk00000419_sig00000d5c,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig00000283,
      Q => blk00000003_blk00000418_blk00000419_sig00000d5d,
      Q15 => NLW_blk00000003_blk00000418_blk00000419_blk0000041b_Q15_UNCONNECTED
    );
  blk00000003_blk00000418_blk00000419_blk0000041a : GND
    port map (
      G => blk00000003_blk00000418_blk00000419_sig00000d5c
    );
  blk00000003_blk00000459_blk0000045a_blk00000499 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk00000459_blk0000045a_sig00000e1d,
      Q => blk00000003_sig000005ff
    );
  blk00000003_blk00000459_blk0000045a_blk00000498 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk00000459_blk0000045a_sig00000dfe,
      A1 => blk00000003_blk00000459_blk0000045a_sig00000dfe,
      A2 => blk00000003_blk00000459_blk0000045a_sig00000dfe,
      A3 => blk00000003_blk00000459_blk0000045a_sig00000dfe,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig00000244,
      Q => blk00000003_blk00000459_blk0000045a_sig00000e1d,
      Q15 => NLW_blk00000003_blk00000459_blk0000045a_blk00000498_Q15_UNCONNECTED
    );
  blk00000003_blk00000459_blk0000045a_blk00000497 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk00000459_blk0000045a_sig00000e1c,
      Q => blk00000003_sig00000600
    );
  blk00000003_blk00000459_blk0000045a_blk00000496 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk00000459_blk0000045a_sig00000dfe,
      A1 => blk00000003_blk00000459_blk0000045a_sig00000dfe,
      A2 => blk00000003_blk00000459_blk0000045a_sig00000dfe,
      A3 => blk00000003_blk00000459_blk0000045a_sig00000dfe,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig00000245,
      Q => blk00000003_blk00000459_blk0000045a_sig00000e1c,
      Q15 => NLW_blk00000003_blk00000459_blk0000045a_blk00000496_Q15_UNCONNECTED
    );
  blk00000003_blk00000459_blk0000045a_blk00000495 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk00000459_blk0000045a_sig00000e1b,
      Q => blk00000003_sig000005fe
    );
  blk00000003_blk00000459_blk0000045a_blk00000494 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk00000459_blk0000045a_sig00000dfe,
      A1 => blk00000003_blk00000459_blk0000045a_sig00000dfe,
      A2 => blk00000003_blk00000459_blk0000045a_sig00000dfe,
      A3 => blk00000003_blk00000459_blk0000045a_sig00000dfe,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig00000243,
      Q => blk00000003_blk00000459_blk0000045a_sig00000e1b,
      Q15 => NLW_blk00000003_blk00000459_blk0000045a_blk00000494_Q15_UNCONNECTED
    );
  blk00000003_blk00000459_blk0000045a_blk00000493 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk00000459_blk0000045a_sig00000e1a,
      Q => blk00000003_sig00000601
    );
  blk00000003_blk00000459_blk0000045a_blk00000492 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk00000459_blk0000045a_sig00000dfe,
      A1 => blk00000003_blk00000459_blk0000045a_sig00000dfe,
      A2 => blk00000003_blk00000459_blk0000045a_sig00000dfe,
      A3 => blk00000003_blk00000459_blk0000045a_sig00000dfe,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig00000246,
      Q => blk00000003_blk00000459_blk0000045a_sig00000e1a,
      Q15 => NLW_blk00000003_blk00000459_blk0000045a_blk00000492_Q15_UNCONNECTED
    );
  blk00000003_blk00000459_blk0000045a_blk00000491 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk00000459_blk0000045a_sig00000e19,
      Q => blk00000003_sig00000602
    );
  blk00000003_blk00000459_blk0000045a_blk00000490 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk00000459_blk0000045a_sig00000dfe,
      A1 => blk00000003_blk00000459_blk0000045a_sig00000dfe,
      A2 => blk00000003_blk00000459_blk0000045a_sig00000dfe,
      A3 => blk00000003_blk00000459_blk0000045a_sig00000dfe,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig00000247,
      Q => blk00000003_blk00000459_blk0000045a_sig00000e19,
      Q15 => NLW_blk00000003_blk00000459_blk0000045a_blk00000490_Q15_UNCONNECTED
    );
  blk00000003_blk00000459_blk0000045a_blk0000048f : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk00000459_blk0000045a_sig00000e18,
      Q => blk00000003_sig00000603
    );
  blk00000003_blk00000459_blk0000045a_blk0000048e : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk00000459_blk0000045a_sig00000dfe,
      A1 => blk00000003_blk00000459_blk0000045a_sig00000dfe,
      A2 => blk00000003_blk00000459_blk0000045a_sig00000dfe,
      A3 => blk00000003_blk00000459_blk0000045a_sig00000dfe,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig00000248,
      Q => blk00000003_blk00000459_blk0000045a_sig00000e18,
      Q15 => NLW_blk00000003_blk00000459_blk0000045a_blk0000048e_Q15_UNCONNECTED
    );
  blk00000003_blk00000459_blk0000045a_blk0000048d : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk00000459_blk0000045a_sig00000e17,
      Q => blk00000003_sig00000604
    );
  blk00000003_blk00000459_blk0000045a_blk0000048c : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk00000459_blk0000045a_sig00000dfe,
      A1 => blk00000003_blk00000459_blk0000045a_sig00000dfe,
      A2 => blk00000003_blk00000459_blk0000045a_sig00000dfe,
      A3 => blk00000003_blk00000459_blk0000045a_sig00000dfe,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig00000249,
      Q => blk00000003_blk00000459_blk0000045a_sig00000e17,
      Q15 => NLW_blk00000003_blk00000459_blk0000045a_blk0000048c_Q15_UNCONNECTED
    );
  blk00000003_blk00000459_blk0000045a_blk0000048b : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk00000459_blk0000045a_sig00000e16,
      Q => blk00000003_sig00000605
    );
  blk00000003_blk00000459_blk0000045a_blk0000048a : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk00000459_blk0000045a_sig00000dfe,
      A1 => blk00000003_blk00000459_blk0000045a_sig00000dfe,
      A2 => blk00000003_blk00000459_blk0000045a_sig00000dfe,
      A3 => blk00000003_blk00000459_blk0000045a_sig00000dfe,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig0000024a,
      Q => blk00000003_blk00000459_blk0000045a_sig00000e16,
      Q15 => NLW_blk00000003_blk00000459_blk0000045a_blk0000048a_Q15_UNCONNECTED
    );
  blk00000003_blk00000459_blk0000045a_blk00000489 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk00000459_blk0000045a_sig00000e15,
      Q => blk00000003_sig00000606
    );
  blk00000003_blk00000459_blk0000045a_blk00000488 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk00000459_blk0000045a_sig00000dfe,
      A1 => blk00000003_blk00000459_blk0000045a_sig00000dfe,
      A2 => blk00000003_blk00000459_blk0000045a_sig00000dfe,
      A3 => blk00000003_blk00000459_blk0000045a_sig00000dfe,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig0000024b,
      Q => blk00000003_blk00000459_blk0000045a_sig00000e15,
      Q15 => NLW_blk00000003_blk00000459_blk0000045a_blk00000488_Q15_UNCONNECTED
    );
  blk00000003_blk00000459_blk0000045a_blk00000487 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk00000459_blk0000045a_sig00000e14,
      Q => blk00000003_sig00000607
    );
  blk00000003_blk00000459_blk0000045a_blk00000486 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk00000459_blk0000045a_sig00000dfe,
      A1 => blk00000003_blk00000459_blk0000045a_sig00000dfe,
      A2 => blk00000003_blk00000459_blk0000045a_sig00000dfe,
      A3 => blk00000003_blk00000459_blk0000045a_sig00000dfe,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig0000024c,
      Q => blk00000003_blk00000459_blk0000045a_sig00000e14,
      Q15 => NLW_blk00000003_blk00000459_blk0000045a_blk00000486_Q15_UNCONNECTED
    );
  blk00000003_blk00000459_blk0000045a_blk00000485 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk00000459_blk0000045a_sig00000e13,
      Q => blk00000003_sig00000608
    );
  blk00000003_blk00000459_blk0000045a_blk00000484 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk00000459_blk0000045a_sig00000dfe,
      A1 => blk00000003_blk00000459_blk0000045a_sig00000dfe,
      A2 => blk00000003_blk00000459_blk0000045a_sig00000dfe,
      A3 => blk00000003_blk00000459_blk0000045a_sig00000dfe,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig0000024d,
      Q => blk00000003_blk00000459_blk0000045a_sig00000e13,
      Q15 => NLW_blk00000003_blk00000459_blk0000045a_blk00000484_Q15_UNCONNECTED
    );
  blk00000003_blk00000459_blk0000045a_blk00000483 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk00000459_blk0000045a_sig00000e12,
      Q => blk00000003_sig00000609
    );
  blk00000003_blk00000459_blk0000045a_blk00000482 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk00000459_blk0000045a_sig00000dfe,
      A1 => blk00000003_blk00000459_blk0000045a_sig00000dfe,
      A2 => blk00000003_blk00000459_blk0000045a_sig00000dfe,
      A3 => blk00000003_blk00000459_blk0000045a_sig00000dfe,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig0000024e,
      Q => blk00000003_blk00000459_blk0000045a_sig00000e12,
      Q15 => NLW_blk00000003_blk00000459_blk0000045a_blk00000482_Q15_UNCONNECTED
    );
  blk00000003_blk00000459_blk0000045a_blk00000481 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk00000459_blk0000045a_sig00000e11,
      Q => blk00000003_sig0000060a
    );
  blk00000003_blk00000459_blk0000045a_blk00000480 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk00000459_blk0000045a_sig00000dfe,
      A1 => blk00000003_blk00000459_blk0000045a_sig00000dfe,
      A2 => blk00000003_blk00000459_blk0000045a_sig00000dfe,
      A3 => blk00000003_blk00000459_blk0000045a_sig00000dfe,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig0000024f,
      Q => blk00000003_blk00000459_blk0000045a_sig00000e11,
      Q15 => NLW_blk00000003_blk00000459_blk0000045a_blk00000480_Q15_UNCONNECTED
    );
  blk00000003_blk00000459_blk0000045a_blk0000047f : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk00000459_blk0000045a_sig00000e10,
      Q => blk00000003_sig0000060b
    );
  blk00000003_blk00000459_blk0000045a_blk0000047e : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk00000459_blk0000045a_sig00000dfe,
      A1 => blk00000003_blk00000459_blk0000045a_sig00000dfe,
      A2 => blk00000003_blk00000459_blk0000045a_sig00000dfe,
      A3 => blk00000003_blk00000459_blk0000045a_sig00000dfe,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig00000250,
      Q => blk00000003_blk00000459_blk0000045a_sig00000e10,
      Q15 => NLW_blk00000003_blk00000459_blk0000045a_blk0000047e_Q15_UNCONNECTED
    );
  blk00000003_blk00000459_blk0000045a_blk0000047d : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk00000459_blk0000045a_sig00000e0f,
      Q => blk00000003_sig0000060c
    );
  blk00000003_blk00000459_blk0000045a_blk0000047c : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk00000459_blk0000045a_sig00000dfe,
      A1 => blk00000003_blk00000459_blk0000045a_sig00000dfe,
      A2 => blk00000003_blk00000459_blk0000045a_sig00000dfe,
      A3 => blk00000003_blk00000459_blk0000045a_sig00000dfe,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig00000251,
      Q => blk00000003_blk00000459_blk0000045a_sig00000e0f,
      Q15 => NLW_blk00000003_blk00000459_blk0000045a_blk0000047c_Q15_UNCONNECTED
    );
  blk00000003_blk00000459_blk0000045a_blk0000047b : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk00000459_blk0000045a_sig00000e0e,
      Q => blk00000003_sig0000060d
    );
  blk00000003_blk00000459_blk0000045a_blk0000047a : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk00000459_blk0000045a_sig00000dfe,
      A1 => blk00000003_blk00000459_blk0000045a_sig00000dfe,
      A2 => blk00000003_blk00000459_blk0000045a_sig00000dfe,
      A3 => blk00000003_blk00000459_blk0000045a_sig00000dfe,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig00000252,
      Q => blk00000003_blk00000459_blk0000045a_sig00000e0e,
      Q15 => NLW_blk00000003_blk00000459_blk0000045a_blk0000047a_Q15_UNCONNECTED
    );
  blk00000003_blk00000459_blk0000045a_blk00000479 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk00000459_blk0000045a_sig00000e0d,
      Q => blk00000003_sig0000060e
    );
  blk00000003_blk00000459_blk0000045a_blk00000478 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk00000459_blk0000045a_sig00000dfe,
      A1 => blk00000003_blk00000459_blk0000045a_sig00000dfe,
      A2 => blk00000003_blk00000459_blk0000045a_sig00000dfe,
      A3 => blk00000003_blk00000459_blk0000045a_sig00000dfe,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig00000253,
      Q => blk00000003_blk00000459_blk0000045a_sig00000e0d,
      Q15 => NLW_blk00000003_blk00000459_blk0000045a_blk00000478_Q15_UNCONNECTED
    );
  blk00000003_blk00000459_blk0000045a_blk00000477 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk00000459_blk0000045a_sig00000e0c,
      Q => blk00000003_sig0000060f
    );
  blk00000003_blk00000459_blk0000045a_blk00000476 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk00000459_blk0000045a_sig00000dfe,
      A1 => blk00000003_blk00000459_blk0000045a_sig00000dfe,
      A2 => blk00000003_blk00000459_blk0000045a_sig00000dfe,
      A3 => blk00000003_blk00000459_blk0000045a_sig00000dfe,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig00000254,
      Q => blk00000003_blk00000459_blk0000045a_sig00000e0c,
      Q15 => NLW_blk00000003_blk00000459_blk0000045a_blk00000476_Q15_UNCONNECTED
    );
  blk00000003_blk00000459_blk0000045a_blk00000475 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk00000459_blk0000045a_sig00000e0b,
      Q => blk00000003_sig00000610
    );
  blk00000003_blk00000459_blk0000045a_blk00000474 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk00000459_blk0000045a_sig00000dfe,
      A1 => blk00000003_blk00000459_blk0000045a_sig00000dfe,
      A2 => blk00000003_blk00000459_blk0000045a_sig00000dfe,
      A3 => blk00000003_blk00000459_blk0000045a_sig00000dfe,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig00000255,
      Q => blk00000003_blk00000459_blk0000045a_sig00000e0b,
      Q15 => NLW_blk00000003_blk00000459_blk0000045a_blk00000474_Q15_UNCONNECTED
    );
  blk00000003_blk00000459_blk0000045a_blk00000473 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk00000459_blk0000045a_sig00000e0a,
      Q => blk00000003_sig00000611
    );
  blk00000003_blk00000459_blk0000045a_blk00000472 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk00000459_blk0000045a_sig00000dfe,
      A1 => blk00000003_blk00000459_blk0000045a_sig00000dfe,
      A2 => blk00000003_blk00000459_blk0000045a_sig00000dfe,
      A3 => blk00000003_blk00000459_blk0000045a_sig00000dfe,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig00000256,
      Q => blk00000003_blk00000459_blk0000045a_sig00000e0a,
      Q15 => NLW_blk00000003_blk00000459_blk0000045a_blk00000472_Q15_UNCONNECTED
    );
  blk00000003_blk00000459_blk0000045a_blk00000471 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk00000459_blk0000045a_sig00000e09,
      Q => blk00000003_sig00000612
    );
  blk00000003_blk00000459_blk0000045a_blk00000470 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk00000459_blk0000045a_sig00000dfe,
      A1 => blk00000003_blk00000459_blk0000045a_sig00000dfe,
      A2 => blk00000003_blk00000459_blk0000045a_sig00000dfe,
      A3 => blk00000003_blk00000459_blk0000045a_sig00000dfe,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig00000257,
      Q => blk00000003_blk00000459_blk0000045a_sig00000e09,
      Q15 => NLW_blk00000003_blk00000459_blk0000045a_blk00000470_Q15_UNCONNECTED
    );
  blk00000003_blk00000459_blk0000045a_blk0000046f : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk00000459_blk0000045a_sig00000e08,
      Q => blk00000003_sig00000613
    );
  blk00000003_blk00000459_blk0000045a_blk0000046e : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk00000459_blk0000045a_sig00000dfe,
      A1 => blk00000003_blk00000459_blk0000045a_sig00000dfe,
      A2 => blk00000003_blk00000459_blk0000045a_sig00000dfe,
      A3 => blk00000003_blk00000459_blk0000045a_sig00000dfe,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig00000258,
      Q => blk00000003_blk00000459_blk0000045a_sig00000e08,
      Q15 => NLW_blk00000003_blk00000459_blk0000045a_blk0000046e_Q15_UNCONNECTED
    );
  blk00000003_blk00000459_blk0000045a_blk0000046d : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk00000459_blk0000045a_sig00000e07,
      Q => blk00000003_sig00000614
    );
  blk00000003_blk00000459_blk0000045a_blk0000046c : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk00000459_blk0000045a_sig00000dfe,
      A1 => blk00000003_blk00000459_blk0000045a_sig00000dfe,
      A2 => blk00000003_blk00000459_blk0000045a_sig00000dfe,
      A3 => blk00000003_blk00000459_blk0000045a_sig00000dfe,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig00000259,
      Q => blk00000003_blk00000459_blk0000045a_sig00000e07,
      Q15 => NLW_blk00000003_blk00000459_blk0000045a_blk0000046c_Q15_UNCONNECTED
    );
  blk00000003_blk00000459_blk0000045a_blk0000046b : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk00000459_blk0000045a_sig00000e06,
      Q => blk00000003_sig00000615
    );
  blk00000003_blk00000459_blk0000045a_blk0000046a : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk00000459_blk0000045a_sig00000dfe,
      A1 => blk00000003_blk00000459_blk0000045a_sig00000dfe,
      A2 => blk00000003_blk00000459_blk0000045a_sig00000dfe,
      A3 => blk00000003_blk00000459_blk0000045a_sig00000dfe,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig0000025a,
      Q => blk00000003_blk00000459_blk0000045a_sig00000e06,
      Q15 => NLW_blk00000003_blk00000459_blk0000045a_blk0000046a_Q15_UNCONNECTED
    );
  blk00000003_blk00000459_blk0000045a_blk00000469 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk00000459_blk0000045a_sig00000e05,
      Q => blk00000003_sig00000616
    );
  blk00000003_blk00000459_blk0000045a_blk00000468 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk00000459_blk0000045a_sig00000dfe,
      A1 => blk00000003_blk00000459_blk0000045a_sig00000dfe,
      A2 => blk00000003_blk00000459_blk0000045a_sig00000dfe,
      A3 => blk00000003_blk00000459_blk0000045a_sig00000dfe,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig0000025b,
      Q => blk00000003_blk00000459_blk0000045a_sig00000e05,
      Q15 => NLW_blk00000003_blk00000459_blk0000045a_blk00000468_Q15_UNCONNECTED
    );
  blk00000003_blk00000459_blk0000045a_blk00000467 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk00000459_blk0000045a_sig00000e04,
      Q => blk00000003_sig00000617
    );
  blk00000003_blk00000459_blk0000045a_blk00000466 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk00000459_blk0000045a_sig00000dfe,
      A1 => blk00000003_blk00000459_blk0000045a_sig00000dfe,
      A2 => blk00000003_blk00000459_blk0000045a_sig00000dfe,
      A3 => blk00000003_blk00000459_blk0000045a_sig00000dfe,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig0000025c,
      Q => blk00000003_blk00000459_blk0000045a_sig00000e04,
      Q15 => NLW_blk00000003_blk00000459_blk0000045a_blk00000466_Q15_UNCONNECTED
    );
  blk00000003_blk00000459_blk0000045a_blk00000465 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk00000459_blk0000045a_sig00000e03,
      Q => blk00000003_sig00000618
    );
  blk00000003_blk00000459_blk0000045a_blk00000464 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk00000459_blk0000045a_sig00000dfe,
      A1 => blk00000003_blk00000459_blk0000045a_sig00000dfe,
      A2 => blk00000003_blk00000459_blk0000045a_sig00000dfe,
      A3 => blk00000003_blk00000459_blk0000045a_sig00000dfe,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig0000025d,
      Q => blk00000003_blk00000459_blk0000045a_sig00000e03,
      Q15 => NLW_blk00000003_blk00000459_blk0000045a_blk00000464_Q15_UNCONNECTED
    );
  blk00000003_blk00000459_blk0000045a_blk00000463 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk00000459_blk0000045a_sig00000e02,
      Q => blk00000003_sig00000619
    );
  blk00000003_blk00000459_blk0000045a_blk00000462 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk00000459_blk0000045a_sig00000dfe,
      A1 => blk00000003_blk00000459_blk0000045a_sig00000dfe,
      A2 => blk00000003_blk00000459_blk0000045a_sig00000dfe,
      A3 => blk00000003_blk00000459_blk0000045a_sig00000dfe,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig0000025e,
      Q => blk00000003_blk00000459_blk0000045a_sig00000e02,
      Q15 => NLW_blk00000003_blk00000459_blk0000045a_blk00000462_Q15_UNCONNECTED
    );
  blk00000003_blk00000459_blk0000045a_blk00000461 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk00000459_blk0000045a_sig00000e01,
      Q => blk00000003_sig0000061a
    );
  blk00000003_blk00000459_blk0000045a_blk00000460 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk00000459_blk0000045a_sig00000dfe,
      A1 => blk00000003_blk00000459_blk0000045a_sig00000dfe,
      A2 => blk00000003_blk00000459_blk0000045a_sig00000dfe,
      A3 => blk00000003_blk00000459_blk0000045a_sig00000dfe,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig0000025f,
      Q => blk00000003_blk00000459_blk0000045a_sig00000e01,
      Q15 => NLW_blk00000003_blk00000459_blk0000045a_blk00000460_Q15_UNCONNECTED
    );
  blk00000003_blk00000459_blk0000045a_blk0000045f : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk00000459_blk0000045a_sig00000e00,
      Q => blk00000003_sig0000061b
    );
  blk00000003_blk00000459_blk0000045a_blk0000045e : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk00000459_blk0000045a_sig00000dfe,
      A1 => blk00000003_blk00000459_blk0000045a_sig00000dfe,
      A2 => blk00000003_blk00000459_blk0000045a_sig00000dfe,
      A3 => blk00000003_blk00000459_blk0000045a_sig00000dfe,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig00000260,
      Q => blk00000003_blk00000459_blk0000045a_sig00000e00,
      Q15 => NLW_blk00000003_blk00000459_blk0000045a_blk0000045e_Q15_UNCONNECTED
    );
  blk00000003_blk00000459_blk0000045a_blk0000045d : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk00000459_blk0000045a_sig00000dff,
      Q => blk00000003_sig0000061c
    );
  blk00000003_blk00000459_blk0000045a_blk0000045c : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk00000459_blk0000045a_sig00000dfe,
      A1 => blk00000003_blk00000459_blk0000045a_sig00000dfe,
      A2 => blk00000003_blk00000459_blk0000045a_sig00000dfe,
      A3 => blk00000003_blk00000459_blk0000045a_sig00000dfe,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig00000261,
      Q => blk00000003_blk00000459_blk0000045a_sig00000dff,
      Q15 => NLW_blk00000003_blk00000459_blk0000045a_blk0000045c_Q15_UNCONNECTED
    );
  blk00000003_blk00000459_blk0000045a_blk0000045b : GND
    port map (
      G => blk00000003_blk00000459_blk0000045a_sig00000dfe
    );
  blk00000003_blk0000049a_blk000004f6 : LUT1
    generic map(
      INIT => X"2"
    )
    port map (
      I0 => blk00000003_sig000005fc,
      O => blk00000003_blk0000049a_sig00000e99
    );
  blk00000003_blk0000049a_blk000004f5 : LUT1
    generic map(
      INIT => X"2"
    )
    port map (
      I0 => blk00000003_sig000005fb,
      O => blk00000003_blk0000049a_sig00000e97
    );
  blk00000003_blk0000049a_blk000004f4 : LUT1
    generic map(
      INIT => X"2"
    )
    port map (
      I0 => blk00000003_sig000005fa,
      O => blk00000003_blk0000049a_sig00000e95
    );
  blk00000003_blk0000049a_blk000004f3 : LUT1
    generic map(
      INIT => X"2"
    )
    port map (
      I0 => blk00000003_sig000005f9,
      O => blk00000003_blk0000049a_sig00000e93
    );
  blk00000003_blk0000049a_blk000004f2 : LUT1
    generic map(
      INIT => X"2"
    )
    port map (
      I0 => blk00000003_sig000005f8,
      O => blk00000003_blk0000049a_sig00000e91
    );
  blk00000003_blk0000049a_blk000004f1 : LUT1
    generic map(
      INIT => X"2"
    )
    port map (
      I0 => blk00000003_sig000005f7,
      O => blk00000003_blk0000049a_sig00000e8f
    );
  blk00000003_blk0000049a_blk000004f0 : LUT1
    generic map(
      INIT => X"2"
    )
    port map (
      I0 => blk00000003_sig000005f6,
      O => blk00000003_blk0000049a_sig00000e8d
    );
  blk00000003_blk0000049a_blk000004ef : LUT1
    generic map(
      INIT => X"2"
    )
    port map (
      I0 => blk00000003_sig000005f5,
      O => blk00000003_blk0000049a_sig00000e8b
    );
  blk00000003_blk0000049a_blk000004ee : LUT1
    generic map(
      INIT => X"2"
    )
    port map (
      I0 => blk00000003_sig000005f4,
      O => blk00000003_blk0000049a_sig00000e89
    );
  blk00000003_blk0000049a_blk000004ed : LUT1
    generic map(
      INIT => X"2"
    )
    port map (
      I0 => blk00000003_sig000005f3,
      O => blk00000003_blk0000049a_sig00000e87
    );
  blk00000003_blk0000049a_blk000004ec : LUT1
    generic map(
      INIT => X"2"
    )
    port map (
      I0 => blk00000003_sig000005f2,
      O => blk00000003_blk0000049a_sig00000e85
    );
  blk00000003_blk0000049a_blk000004eb : LUT1
    generic map(
      INIT => X"2"
    )
    port map (
      I0 => blk00000003_sig000005f1,
      O => blk00000003_blk0000049a_sig00000e83
    );
  blk00000003_blk0000049a_blk000004ea : LUT1
    generic map(
      INIT => X"2"
    )
    port map (
      I0 => blk00000003_sig000005f0,
      O => blk00000003_blk0000049a_sig00000e81
    );
  blk00000003_blk0000049a_blk000004e9 : LUT1
    generic map(
      INIT => X"2"
    )
    port map (
      I0 => blk00000003_sig000005ef,
      O => blk00000003_blk0000049a_sig00000e7f
    );
  blk00000003_blk0000049a_blk000004e8 : LUT1
    generic map(
      INIT => X"2"
    )
    port map (
      I0 => blk00000003_sig000005ee,
      O => blk00000003_blk0000049a_sig00000e7d
    );
  blk00000003_blk0000049a_blk000004e7 : LUT1
    generic map(
      INIT => X"2"
    )
    port map (
      I0 => blk00000003_sig000005ed,
      O => blk00000003_blk0000049a_sig00000e7b
    );
  blk00000003_blk0000049a_blk000004e6 : LUT1
    generic map(
      INIT => X"2"
    )
    port map (
      I0 => blk00000003_sig000005ec,
      O => blk00000003_blk0000049a_sig00000e79
    );
  blk00000003_blk0000049a_blk000004e5 : LUT1
    generic map(
      INIT => X"2"
    )
    port map (
      I0 => blk00000003_sig000005eb,
      O => blk00000003_blk0000049a_sig00000e77
    );
  blk00000003_blk0000049a_blk000004e4 : LUT1
    generic map(
      INIT => X"2"
    )
    port map (
      I0 => blk00000003_sig000005ea,
      O => blk00000003_blk0000049a_sig00000e75
    );
  blk00000003_blk0000049a_blk000004e3 : LUT1
    generic map(
      INIT => X"2"
    )
    port map (
      I0 => blk00000003_sig000005e9,
      O => blk00000003_blk0000049a_sig00000e73
    );
  blk00000003_blk0000049a_blk000004e2 : LUT1
    generic map(
      INIT => X"2"
    )
    port map (
      I0 => blk00000003_sig000005e8,
      O => blk00000003_blk0000049a_sig00000e71
    );
  blk00000003_blk0000049a_blk000004e1 : LUT1
    generic map(
      INIT => X"2"
    )
    port map (
      I0 => blk00000003_sig000005e7,
      O => blk00000003_blk0000049a_sig00000e6f
    );
  blk00000003_blk0000049a_blk000004e0 : LUT1
    generic map(
      INIT => X"2"
    )
    port map (
      I0 => blk00000003_sig000005e6,
      O => blk00000003_blk0000049a_sig00000e6d
    );
  blk00000003_blk0000049a_blk000004df : LUT1
    generic map(
      INIT => X"2"
    )
    port map (
      I0 => blk00000003_sig000005e5,
      O => blk00000003_blk0000049a_sig00000e6b
    );
  blk00000003_blk0000049a_blk000004de : LUT1
    generic map(
      INIT => X"2"
    )
    port map (
      I0 => blk00000003_sig000005e4,
      O => blk00000003_blk0000049a_sig00000e69
    );
  blk00000003_blk0000049a_blk000004dd : LUT1
    generic map(
      INIT => X"2"
    )
    port map (
      I0 => blk00000003_sig000005e3,
      O => blk00000003_blk0000049a_sig00000e67
    );
  blk00000003_blk0000049a_blk000004dc : LUT1
    generic map(
      INIT => X"2"
    )
    port map (
      I0 => blk00000003_sig000005e2,
      O => blk00000003_blk0000049a_sig00000e65
    );
  blk00000003_blk0000049a_blk000004db : LUT1
    generic map(
      INIT => X"2"
    )
    port map (
      I0 => blk00000003_sig000005e1,
      O => blk00000003_blk0000049a_sig00000e63
    );
  blk00000003_blk0000049a_blk000004da : LUT1
    generic map(
      INIT => X"2"
    )
    port map (
      I0 => blk00000003_sig000005e0,
      O => blk00000003_blk0000049a_sig00000e61
    );
  blk00000003_blk0000049a_blk000004d9 : LUT2
    generic map(
      INIT => X"6"
    )
    port map (
      I0 => blk00000003_sig000005fd,
      I1 => blk00000003_sig000005c3,
      O => blk00000003_blk0000049a_sig00000e5e
    );
  blk00000003_blk0000049a_blk000004d8 : MUXCY
    port map (
      CI => blk00000003_blk0000049a_sig00000e5d,
      DI => blk00000003_sig000005fd,
      S => blk00000003_blk0000049a_sig00000e5e,
      O => blk00000003_blk0000049a_sig00000e98
    );
  blk00000003_blk0000049a_blk000004d7 : MUXCY
    port map (
      CI => blk00000003_blk0000049a_sig00000e98,
      DI => blk00000003_sig000005fc,
      S => blk00000003_blk0000049a_sig00000e99,
      O => blk00000003_blk0000049a_sig00000e96
    );
  blk00000003_blk0000049a_blk000004d6 : MUXCY
    port map (
      CI => blk00000003_blk0000049a_sig00000e96,
      DI => blk00000003_sig000005fb,
      S => blk00000003_blk0000049a_sig00000e97,
      O => blk00000003_blk0000049a_sig00000e94
    );
  blk00000003_blk0000049a_blk000004d5 : MUXCY
    port map (
      CI => blk00000003_blk0000049a_sig00000e94,
      DI => blk00000003_sig000005fa,
      S => blk00000003_blk0000049a_sig00000e95,
      O => blk00000003_blk0000049a_sig00000e92
    );
  blk00000003_blk0000049a_blk000004d4 : MUXCY
    port map (
      CI => blk00000003_blk0000049a_sig00000e92,
      DI => blk00000003_sig000005f9,
      S => blk00000003_blk0000049a_sig00000e93,
      O => blk00000003_blk0000049a_sig00000e90
    );
  blk00000003_blk0000049a_blk000004d3 : MUXCY
    port map (
      CI => blk00000003_blk0000049a_sig00000e90,
      DI => blk00000003_sig000005f8,
      S => blk00000003_blk0000049a_sig00000e91,
      O => blk00000003_blk0000049a_sig00000e8e
    );
  blk00000003_blk0000049a_blk000004d2 : MUXCY
    port map (
      CI => blk00000003_blk0000049a_sig00000e8e,
      DI => blk00000003_sig000005f7,
      S => blk00000003_blk0000049a_sig00000e8f,
      O => blk00000003_blk0000049a_sig00000e8c
    );
  blk00000003_blk0000049a_blk000004d1 : MUXCY
    port map (
      CI => blk00000003_blk0000049a_sig00000e8c,
      DI => blk00000003_sig000005f6,
      S => blk00000003_blk0000049a_sig00000e8d,
      O => blk00000003_blk0000049a_sig00000e8a
    );
  blk00000003_blk0000049a_blk000004d0 : MUXCY
    port map (
      CI => blk00000003_blk0000049a_sig00000e8a,
      DI => blk00000003_sig000005f5,
      S => blk00000003_blk0000049a_sig00000e8b,
      O => blk00000003_blk0000049a_sig00000e88
    );
  blk00000003_blk0000049a_blk000004cf : MUXCY
    port map (
      CI => blk00000003_blk0000049a_sig00000e88,
      DI => blk00000003_sig000005f4,
      S => blk00000003_blk0000049a_sig00000e89,
      O => blk00000003_blk0000049a_sig00000e86
    );
  blk00000003_blk0000049a_blk000004ce : MUXCY
    port map (
      CI => blk00000003_blk0000049a_sig00000e86,
      DI => blk00000003_sig000005f3,
      S => blk00000003_blk0000049a_sig00000e87,
      O => blk00000003_blk0000049a_sig00000e84
    );
  blk00000003_blk0000049a_blk000004cd : MUXCY
    port map (
      CI => blk00000003_blk0000049a_sig00000e84,
      DI => blk00000003_sig000005f2,
      S => blk00000003_blk0000049a_sig00000e85,
      O => blk00000003_blk0000049a_sig00000e82
    );
  blk00000003_blk0000049a_blk000004cc : MUXCY
    port map (
      CI => blk00000003_blk0000049a_sig00000e82,
      DI => blk00000003_sig000005f1,
      S => blk00000003_blk0000049a_sig00000e83,
      O => blk00000003_blk0000049a_sig00000e80
    );
  blk00000003_blk0000049a_blk000004cb : MUXCY
    port map (
      CI => blk00000003_blk0000049a_sig00000e80,
      DI => blk00000003_sig000005f0,
      S => blk00000003_blk0000049a_sig00000e81,
      O => blk00000003_blk0000049a_sig00000e7e
    );
  blk00000003_blk0000049a_blk000004ca : MUXCY
    port map (
      CI => blk00000003_blk0000049a_sig00000e7e,
      DI => blk00000003_sig000005ef,
      S => blk00000003_blk0000049a_sig00000e7f,
      O => blk00000003_blk0000049a_sig00000e7c
    );
  blk00000003_blk0000049a_blk000004c9 : MUXCY
    port map (
      CI => blk00000003_blk0000049a_sig00000e7c,
      DI => blk00000003_sig000005ee,
      S => blk00000003_blk0000049a_sig00000e7d,
      O => blk00000003_blk0000049a_sig00000e7a
    );
  blk00000003_blk0000049a_blk000004c8 : MUXCY
    port map (
      CI => blk00000003_blk0000049a_sig00000e7a,
      DI => blk00000003_sig000005ed,
      S => blk00000003_blk0000049a_sig00000e7b,
      O => blk00000003_blk0000049a_sig00000e78
    );
  blk00000003_blk0000049a_blk000004c7 : MUXCY
    port map (
      CI => blk00000003_blk0000049a_sig00000e78,
      DI => blk00000003_sig000005ec,
      S => blk00000003_blk0000049a_sig00000e79,
      O => blk00000003_blk0000049a_sig00000e76
    );
  blk00000003_blk0000049a_blk000004c6 : MUXCY
    port map (
      CI => blk00000003_blk0000049a_sig00000e76,
      DI => blk00000003_sig000005eb,
      S => blk00000003_blk0000049a_sig00000e77,
      O => blk00000003_blk0000049a_sig00000e74
    );
  blk00000003_blk0000049a_blk000004c5 : MUXCY
    port map (
      CI => blk00000003_blk0000049a_sig00000e74,
      DI => blk00000003_sig000005ea,
      S => blk00000003_blk0000049a_sig00000e75,
      O => blk00000003_blk0000049a_sig00000e72
    );
  blk00000003_blk0000049a_blk000004c4 : MUXCY
    port map (
      CI => blk00000003_blk0000049a_sig00000e72,
      DI => blk00000003_sig000005e9,
      S => blk00000003_blk0000049a_sig00000e73,
      O => blk00000003_blk0000049a_sig00000e70
    );
  blk00000003_blk0000049a_blk000004c3 : MUXCY
    port map (
      CI => blk00000003_blk0000049a_sig00000e70,
      DI => blk00000003_sig000005e8,
      S => blk00000003_blk0000049a_sig00000e71,
      O => blk00000003_blk0000049a_sig00000e6e
    );
  blk00000003_blk0000049a_blk000004c2 : MUXCY
    port map (
      CI => blk00000003_blk0000049a_sig00000e6e,
      DI => blk00000003_sig000005e7,
      S => blk00000003_blk0000049a_sig00000e6f,
      O => blk00000003_blk0000049a_sig00000e6c
    );
  blk00000003_blk0000049a_blk000004c1 : MUXCY
    port map (
      CI => blk00000003_blk0000049a_sig00000e6c,
      DI => blk00000003_sig000005e6,
      S => blk00000003_blk0000049a_sig00000e6d,
      O => blk00000003_blk0000049a_sig00000e6a
    );
  blk00000003_blk0000049a_blk000004c0 : MUXCY
    port map (
      CI => blk00000003_blk0000049a_sig00000e6a,
      DI => blk00000003_sig000005e5,
      S => blk00000003_blk0000049a_sig00000e6b,
      O => blk00000003_blk0000049a_sig00000e68
    );
  blk00000003_blk0000049a_blk000004bf : MUXCY
    port map (
      CI => blk00000003_blk0000049a_sig00000e68,
      DI => blk00000003_sig000005e4,
      S => blk00000003_blk0000049a_sig00000e69,
      O => blk00000003_blk0000049a_sig00000e66
    );
  blk00000003_blk0000049a_blk000004be : MUXCY
    port map (
      CI => blk00000003_blk0000049a_sig00000e66,
      DI => blk00000003_sig000005e3,
      S => blk00000003_blk0000049a_sig00000e67,
      O => blk00000003_blk0000049a_sig00000e64
    );
  blk00000003_blk0000049a_blk000004bd : MUXCY
    port map (
      CI => blk00000003_blk0000049a_sig00000e64,
      DI => blk00000003_sig000005e2,
      S => blk00000003_blk0000049a_sig00000e65,
      O => blk00000003_blk0000049a_sig00000e62
    );
  blk00000003_blk0000049a_blk000004bc : MUXCY
    port map (
      CI => blk00000003_blk0000049a_sig00000e62,
      DI => blk00000003_sig000005e1,
      S => blk00000003_blk0000049a_sig00000e63,
      O => blk00000003_blk0000049a_sig00000e60
    );
  blk00000003_blk0000049a_blk000004bb : MUXCY
    port map (
      CI => blk00000003_blk0000049a_sig00000e60,
      DI => blk00000003_sig000005e0,
      S => blk00000003_blk0000049a_sig00000e61,
      O => blk00000003_blk0000049a_sig00000e5f
    );
  blk00000003_blk0000049a_blk000004ba : XORCY
    port map (
      CI => blk00000003_blk0000049a_sig00000e98,
      LI => blk00000003_blk0000049a_sig00000e99,
      O => blk00000003_sig00000581
    );
  blk00000003_blk0000049a_blk000004b9 : XORCY
    port map (
      CI => blk00000003_blk0000049a_sig00000e96,
      LI => blk00000003_blk0000049a_sig00000e97,
      O => blk00000003_sig00000583
    );
  blk00000003_blk0000049a_blk000004b8 : XORCY
    port map (
      CI => blk00000003_blk0000049a_sig00000e94,
      LI => blk00000003_blk0000049a_sig00000e95,
      O => blk00000003_sig00000585
    );
  blk00000003_blk0000049a_blk000004b7 : XORCY
    port map (
      CI => blk00000003_blk0000049a_sig00000e92,
      LI => blk00000003_blk0000049a_sig00000e93,
      O => blk00000003_sig00000587
    );
  blk00000003_blk0000049a_blk000004b6 : XORCY
    port map (
      CI => blk00000003_blk0000049a_sig00000e90,
      LI => blk00000003_blk0000049a_sig00000e91,
      O => blk00000003_sig00000589
    );
  blk00000003_blk0000049a_blk000004b5 : XORCY
    port map (
      CI => blk00000003_blk0000049a_sig00000e8e,
      LI => blk00000003_blk0000049a_sig00000e8f,
      O => blk00000003_sig0000058b
    );
  blk00000003_blk0000049a_blk000004b4 : XORCY
    port map (
      CI => blk00000003_blk0000049a_sig00000e8c,
      LI => blk00000003_blk0000049a_sig00000e8d,
      O => blk00000003_sig0000058d
    );
  blk00000003_blk0000049a_blk000004b3 : XORCY
    port map (
      CI => blk00000003_blk0000049a_sig00000e8a,
      LI => blk00000003_blk0000049a_sig00000e8b,
      O => blk00000003_sig0000058f
    );
  blk00000003_blk0000049a_blk000004b2 : XORCY
    port map (
      CI => blk00000003_blk0000049a_sig00000e88,
      LI => blk00000003_blk0000049a_sig00000e89,
      O => blk00000003_sig00000591
    );
  blk00000003_blk0000049a_blk000004b1 : XORCY
    port map (
      CI => blk00000003_blk0000049a_sig00000e86,
      LI => blk00000003_blk0000049a_sig00000e87,
      O => blk00000003_sig00000593
    );
  blk00000003_blk0000049a_blk000004b0 : XORCY
    port map (
      CI => blk00000003_blk0000049a_sig00000e84,
      LI => blk00000003_blk0000049a_sig00000e85,
      O => blk00000003_sig00000595
    );
  blk00000003_blk0000049a_blk000004af : XORCY
    port map (
      CI => blk00000003_blk0000049a_sig00000e82,
      LI => blk00000003_blk0000049a_sig00000e83,
      O => blk00000003_sig00000597
    );
  blk00000003_blk0000049a_blk000004ae : XORCY
    port map (
      CI => blk00000003_blk0000049a_sig00000e80,
      LI => blk00000003_blk0000049a_sig00000e81,
      O => blk00000003_sig00000599
    );
  blk00000003_blk0000049a_blk000004ad : XORCY
    port map (
      CI => blk00000003_blk0000049a_sig00000e7e,
      LI => blk00000003_blk0000049a_sig00000e7f,
      O => blk00000003_sig0000059b
    );
  blk00000003_blk0000049a_blk000004ac : XORCY
    port map (
      CI => blk00000003_blk0000049a_sig00000e7c,
      LI => blk00000003_blk0000049a_sig00000e7d,
      O => blk00000003_sig0000059d
    );
  blk00000003_blk0000049a_blk000004ab : XORCY
    port map (
      CI => blk00000003_blk0000049a_sig00000e7a,
      LI => blk00000003_blk0000049a_sig00000e7b,
      O => blk00000003_sig0000059f
    );
  blk00000003_blk0000049a_blk000004aa : XORCY
    port map (
      CI => blk00000003_blk0000049a_sig00000e78,
      LI => blk00000003_blk0000049a_sig00000e79,
      O => blk00000003_sig000005a1
    );
  blk00000003_blk0000049a_blk000004a9 : XORCY
    port map (
      CI => blk00000003_blk0000049a_sig00000e76,
      LI => blk00000003_blk0000049a_sig00000e77,
      O => blk00000003_sig000005a3
    );
  blk00000003_blk0000049a_blk000004a8 : XORCY
    port map (
      CI => blk00000003_blk0000049a_sig00000e74,
      LI => blk00000003_blk0000049a_sig00000e75,
      O => blk00000003_sig000005a5
    );
  blk00000003_blk0000049a_blk000004a7 : XORCY
    port map (
      CI => blk00000003_blk0000049a_sig00000e72,
      LI => blk00000003_blk0000049a_sig00000e73,
      O => blk00000003_sig000005a7
    );
  blk00000003_blk0000049a_blk000004a6 : XORCY
    port map (
      CI => blk00000003_blk0000049a_sig00000e70,
      LI => blk00000003_blk0000049a_sig00000e71,
      O => blk00000003_sig000005a9
    );
  blk00000003_blk0000049a_blk000004a5 : XORCY
    port map (
      CI => blk00000003_blk0000049a_sig00000e6e,
      LI => blk00000003_blk0000049a_sig00000e6f,
      O => blk00000003_sig000005ab
    );
  blk00000003_blk0000049a_blk000004a4 : XORCY
    port map (
      CI => blk00000003_blk0000049a_sig00000e6c,
      LI => blk00000003_blk0000049a_sig00000e6d,
      O => blk00000003_sig000005ad
    );
  blk00000003_blk0000049a_blk000004a3 : XORCY
    port map (
      CI => blk00000003_blk0000049a_sig00000e6a,
      LI => blk00000003_blk0000049a_sig00000e6b,
      O => blk00000003_sig000005af
    );
  blk00000003_blk0000049a_blk000004a2 : XORCY
    port map (
      CI => blk00000003_blk0000049a_sig00000e68,
      LI => blk00000003_blk0000049a_sig00000e69,
      O => blk00000003_sig000005b1
    );
  blk00000003_blk0000049a_blk000004a1 : XORCY
    port map (
      CI => blk00000003_blk0000049a_sig00000e66,
      LI => blk00000003_blk0000049a_sig00000e67,
      O => blk00000003_sig000005b3
    );
  blk00000003_blk0000049a_blk000004a0 : XORCY
    port map (
      CI => blk00000003_blk0000049a_sig00000e64,
      LI => blk00000003_blk0000049a_sig00000e65,
      O => blk00000003_sig000005b5
    );
  blk00000003_blk0000049a_blk0000049f : XORCY
    port map (
      CI => blk00000003_blk0000049a_sig00000e62,
      LI => blk00000003_blk0000049a_sig00000e63,
      O => blk00000003_sig000005b7
    );
  blk00000003_blk0000049a_blk0000049e : XORCY
    port map (
      CI => blk00000003_blk0000049a_sig00000e60,
      LI => blk00000003_blk0000049a_sig00000e61,
      O => blk00000003_sig000005b9
    );
  blk00000003_blk0000049a_blk0000049d : XORCY
    port map (
      CI => blk00000003_blk0000049a_sig00000e5f,
      LI => blk00000003_sig000005df,
      O => blk00000003_sig000005bb
    );
  blk00000003_blk0000049a_blk0000049c : XORCY
    port map (
      CI => blk00000003_blk0000049a_sig00000e5d,
      LI => blk00000003_blk0000049a_sig00000e5e,
      O => blk00000003_sig0000057f
    );
  blk00000003_blk0000049a_blk0000049b : GND
    port map (
      G => blk00000003_blk0000049a_sig00000e5d
    );
  blk00000003_blk000004f7_blk00000553 : LUT1
    generic map(
      INIT => X"2"
    )
    port map (
      I0 => blk00000003_sig0000061b,
      O => blk00000003_blk000004f7_sig00000f15
    );
  blk00000003_blk000004f7_blk00000552 : LUT1
    generic map(
      INIT => X"2"
    )
    port map (
      I0 => blk00000003_sig0000061a,
      O => blk00000003_blk000004f7_sig00000f13
    );
  blk00000003_blk000004f7_blk00000551 : LUT1
    generic map(
      INIT => X"2"
    )
    port map (
      I0 => blk00000003_sig00000619,
      O => blk00000003_blk000004f7_sig00000f11
    );
  blk00000003_blk000004f7_blk00000550 : LUT1
    generic map(
      INIT => X"2"
    )
    port map (
      I0 => blk00000003_sig00000618,
      O => blk00000003_blk000004f7_sig00000f0f
    );
  blk00000003_blk000004f7_blk0000054f : LUT1
    generic map(
      INIT => X"2"
    )
    port map (
      I0 => blk00000003_sig00000617,
      O => blk00000003_blk000004f7_sig00000f0d
    );
  blk00000003_blk000004f7_blk0000054e : LUT1
    generic map(
      INIT => X"2"
    )
    port map (
      I0 => blk00000003_sig00000616,
      O => blk00000003_blk000004f7_sig00000f0b
    );
  blk00000003_blk000004f7_blk0000054d : LUT1
    generic map(
      INIT => X"2"
    )
    port map (
      I0 => blk00000003_sig00000615,
      O => blk00000003_blk000004f7_sig00000f09
    );
  blk00000003_blk000004f7_blk0000054c : LUT1
    generic map(
      INIT => X"2"
    )
    port map (
      I0 => blk00000003_sig00000614,
      O => blk00000003_blk000004f7_sig00000f07
    );
  blk00000003_blk000004f7_blk0000054b : LUT1
    generic map(
      INIT => X"2"
    )
    port map (
      I0 => blk00000003_sig00000613,
      O => blk00000003_blk000004f7_sig00000f05
    );
  blk00000003_blk000004f7_blk0000054a : LUT1
    generic map(
      INIT => X"2"
    )
    port map (
      I0 => blk00000003_sig00000612,
      O => blk00000003_blk000004f7_sig00000f03
    );
  blk00000003_blk000004f7_blk00000549 : LUT1
    generic map(
      INIT => X"2"
    )
    port map (
      I0 => blk00000003_sig00000611,
      O => blk00000003_blk000004f7_sig00000f01
    );
  blk00000003_blk000004f7_blk00000548 : LUT1
    generic map(
      INIT => X"2"
    )
    port map (
      I0 => blk00000003_sig00000610,
      O => blk00000003_blk000004f7_sig00000eff
    );
  blk00000003_blk000004f7_blk00000547 : LUT1
    generic map(
      INIT => X"2"
    )
    port map (
      I0 => blk00000003_sig0000060f,
      O => blk00000003_blk000004f7_sig00000efd
    );
  blk00000003_blk000004f7_blk00000546 : LUT1
    generic map(
      INIT => X"2"
    )
    port map (
      I0 => blk00000003_sig0000060e,
      O => blk00000003_blk000004f7_sig00000efb
    );
  blk00000003_blk000004f7_blk00000545 : LUT1
    generic map(
      INIT => X"2"
    )
    port map (
      I0 => blk00000003_sig0000060d,
      O => blk00000003_blk000004f7_sig00000ef9
    );
  blk00000003_blk000004f7_blk00000544 : LUT1
    generic map(
      INIT => X"2"
    )
    port map (
      I0 => blk00000003_sig0000060c,
      O => blk00000003_blk000004f7_sig00000ef7
    );
  blk00000003_blk000004f7_blk00000543 : LUT1
    generic map(
      INIT => X"2"
    )
    port map (
      I0 => blk00000003_sig0000060b,
      O => blk00000003_blk000004f7_sig00000ef5
    );
  blk00000003_blk000004f7_blk00000542 : LUT1
    generic map(
      INIT => X"2"
    )
    port map (
      I0 => blk00000003_sig0000060a,
      O => blk00000003_blk000004f7_sig00000ef3
    );
  blk00000003_blk000004f7_blk00000541 : LUT1
    generic map(
      INIT => X"2"
    )
    port map (
      I0 => blk00000003_sig00000609,
      O => blk00000003_blk000004f7_sig00000ef1
    );
  blk00000003_blk000004f7_blk00000540 : LUT1
    generic map(
      INIT => X"2"
    )
    port map (
      I0 => blk00000003_sig00000608,
      O => blk00000003_blk000004f7_sig00000eef
    );
  blk00000003_blk000004f7_blk0000053f : LUT1
    generic map(
      INIT => X"2"
    )
    port map (
      I0 => blk00000003_sig00000607,
      O => blk00000003_blk000004f7_sig00000eed
    );
  blk00000003_blk000004f7_blk0000053e : LUT1
    generic map(
      INIT => X"2"
    )
    port map (
      I0 => blk00000003_sig00000606,
      O => blk00000003_blk000004f7_sig00000eeb
    );
  blk00000003_blk000004f7_blk0000053d : LUT1
    generic map(
      INIT => X"2"
    )
    port map (
      I0 => blk00000003_sig00000605,
      O => blk00000003_blk000004f7_sig00000ee9
    );
  blk00000003_blk000004f7_blk0000053c : LUT1
    generic map(
      INIT => X"2"
    )
    port map (
      I0 => blk00000003_sig00000604,
      O => blk00000003_blk000004f7_sig00000ee7
    );
  blk00000003_blk000004f7_blk0000053b : LUT1
    generic map(
      INIT => X"2"
    )
    port map (
      I0 => blk00000003_sig00000603,
      O => blk00000003_blk000004f7_sig00000ee5
    );
  blk00000003_blk000004f7_blk0000053a : LUT1
    generic map(
      INIT => X"2"
    )
    port map (
      I0 => blk00000003_sig00000602,
      O => blk00000003_blk000004f7_sig00000ee3
    );
  blk00000003_blk000004f7_blk00000539 : LUT1
    generic map(
      INIT => X"2"
    )
    port map (
      I0 => blk00000003_sig00000601,
      O => blk00000003_blk000004f7_sig00000ee1
    );
  blk00000003_blk000004f7_blk00000538 : LUT1
    generic map(
      INIT => X"2"
    )
    port map (
      I0 => blk00000003_sig00000600,
      O => blk00000003_blk000004f7_sig00000edf
    );
  blk00000003_blk000004f7_blk00000537 : LUT1
    generic map(
      INIT => X"2"
    )
    port map (
      I0 => blk00000003_sig000005ff,
      O => blk00000003_blk000004f7_sig00000edd
    );
  blk00000003_blk000004f7_blk00000536 : LUT2
    generic map(
      INIT => X"6"
    )
    port map (
      I0 => blk00000003_sig0000061c,
      I1 => blk00000003_sig0000057d,
      O => blk00000003_blk000004f7_sig00000eda
    );
  blk00000003_blk000004f7_blk00000535 : MUXCY
    port map (
      CI => blk00000003_blk000004f7_sig00000ed9,
      DI => blk00000003_sig0000061c,
      S => blk00000003_blk000004f7_sig00000eda,
      O => blk00000003_blk000004f7_sig00000f14
    );
  blk00000003_blk000004f7_blk00000534 : MUXCY
    port map (
      CI => blk00000003_blk000004f7_sig00000f14,
      DI => blk00000003_sig0000061b,
      S => blk00000003_blk000004f7_sig00000f15,
      O => blk00000003_blk000004f7_sig00000f12
    );
  blk00000003_blk000004f7_blk00000533 : MUXCY
    port map (
      CI => blk00000003_blk000004f7_sig00000f12,
      DI => blk00000003_sig0000061a,
      S => blk00000003_blk000004f7_sig00000f13,
      O => blk00000003_blk000004f7_sig00000f10
    );
  blk00000003_blk000004f7_blk00000532 : MUXCY
    port map (
      CI => blk00000003_blk000004f7_sig00000f10,
      DI => blk00000003_sig00000619,
      S => blk00000003_blk000004f7_sig00000f11,
      O => blk00000003_blk000004f7_sig00000f0e
    );
  blk00000003_blk000004f7_blk00000531 : MUXCY
    port map (
      CI => blk00000003_blk000004f7_sig00000f0e,
      DI => blk00000003_sig00000618,
      S => blk00000003_blk000004f7_sig00000f0f,
      O => blk00000003_blk000004f7_sig00000f0c
    );
  blk00000003_blk000004f7_blk00000530 : MUXCY
    port map (
      CI => blk00000003_blk000004f7_sig00000f0c,
      DI => blk00000003_sig00000617,
      S => blk00000003_blk000004f7_sig00000f0d,
      O => blk00000003_blk000004f7_sig00000f0a
    );
  blk00000003_blk000004f7_blk0000052f : MUXCY
    port map (
      CI => blk00000003_blk000004f7_sig00000f0a,
      DI => blk00000003_sig00000616,
      S => blk00000003_blk000004f7_sig00000f0b,
      O => blk00000003_blk000004f7_sig00000f08
    );
  blk00000003_blk000004f7_blk0000052e : MUXCY
    port map (
      CI => blk00000003_blk000004f7_sig00000f08,
      DI => blk00000003_sig00000615,
      S => blk00000003_blk000004f7_sig00000f09,
      O => blk00000003_blk000004f7_sig00000f06
    );
  blk00000003_blk000004f7_blk0000052d : MUXCY
    port map (
      CI => blk00000003_blk000004f7_sig00000f06,
      DI => blk00000003_sig00000614,
      S => blk00000003_blk000004f7_sig00000f07,
      O => blk00000003_blk000004f7_sig00000f04
    );
  blk00000003_blk000004f7_blk0000052c : MUXCY
    port map (
      CI => blk00000003_blk000004f7_sig00000f04,
      DI => blk00000003_sig00000613,
      S => blk00000003_blk000004f7_sig00000f05,
      O => blk00000003_blk000004f7_sig00000f02
    );
  blk00000003_blk000004f7_blk0000052b : MUXCY
    port map (
      CI => blk00000003_blk000004f7_sig00000f02,
      DI => blk00000003_sig00000612,
      S => blk00000003_blk000004f7_sig00000f03,
      O => blk00000003_blk000004f7_sig00000f00
    );
  blk00000003_blk000004f7_blk0000052a : MUXCY
    port map (
      CI => blk00000003_blk000004f7_sig00000f00,
      DI => blk00000003_sig00000611,
      S => blk00000003_blk000004f7_sig00000f01,
      O => blk00000003_blk000004f7_sig00000efe
    );
  blk00000003_blk000004f7_blk00000529 : MUXCY
    port map (
      CI => blk00000003_blk000004f7_sig00000efe,
      DI => blk00000003_sig00000610,
      S => blk00000003_blk000004f7_sig00000eff,
      O => blk00000003_blk000004f7_sig00000efc
    );
  blk00000003_blk000004f7_blk00000528 : MUXCY
    port map (
      CI => blk00000003_blk000004f7_sig00000efc,
      DI => blk00000003_sig0000060f,
      S => blk00000003_blk000004f7_sig00000efd,
      O => blk00000003_blk000004f7_sig00000efa
    );
  blk00000003_blk000004f7_blk00000527 : MUXCY
    port map (
      CI => blk00000003_blk000004f7_sig00000efa,
      DI => blk00000003_sig0000060e,
      S => blk00000003_blk000004f7_sig00000efb,
      O => blk00000003_blk000004f7_sig00000ef8
    );
  blk00000003_blk000004f7_blk00000526 : MUXCY
    port map (
      CI => blk00000003_blk000004f7_sig00000ef8,
      DI => blk00000003_sig0000060d,
      S => blk00000003_blk000004f7_sig00000ef9,
      O => blk00000003_blk000004f7_sig00000ef6
    );
  blk00000003_blk000004f7_blk00000525 : MUXCY
    port map (
      CI => blk00000003_blk000004f7_sig00000ef6,
      DI => blk00000003_sig0000060c,
      S => blk00000003_blk000004f7_sig00000ef7,
      O => blk00000003_blk000004f7_sig00000ef4
    );
  blk00000003_blk000004f7_blk00000524 : MUXCY
    port map (
      CI => blk00000003_blk000004f7_sig00000ef4,
      DI => blk00000003_sig0000060b,
      S => blk00000003_blk000004f7_sig00000ef5,
      O => blk00000003_blk000004f7_sig00000ef2
    );
  blk00000003_blk000004f7_blk00000523 : MUXCY
    port map (
      CI => blk00000003_blk000004f7_sig00000ef2,
      DI => blk00000003_sig0000060a,
      S => blk00000003_blk000004f7_sig00000ef3,
      O => blk00000003_blk000004f7_sig00000ef0
    );
  blk00000003_blk000004f7_blk00000522 : MUXCY
    port map (
      CI => blk00000003_blk000004f7_sig00000ef0,
      DI => blk00000003_sig00000609,
      S => blk00000003_blk000004f7_sig00000ef1,
      O => blk00000003_blk000004f7_sig00000eee
    );
  blk00000003_blk000004f7_blk00000521 : MUXCY
    port map (
      CI => blk00000003_blk000004f7_sig00000eee,
      DI => blk00000003_sig00000608,
      S => blk00000003_blk000004f7_sig00000eef,
      O => blk00000003_blk000004f7_sig00000eec
    );
  blk00000003_blk000004f7_blk00000520 : MUXCY
    port map (
      CI => blk00000003_blk000004f7_sig00000eec,
      DI => blk00000003_sig00000607,
      S => blk00000003_blk000004f7_sig00000eed,
      O => blk00000003_blk000004f7_sig00000eea
    );
  blk00000003_blk000004f7_blk0000051f : MUXCY
    port map (
      CI => blk00000003_blk000004f7_sig00000eea,
      DI => blk00000003_sig00000606,
      S => blk00000003_blk000004f7_sig00000eeb,
      O => blk00000003_blk000004f7_sig00000ee8
    );
  blk00000003_blk000004f7_blk0000051e : MUXCY
    port map (
      CI => blk00000003_blk000004f7_sig00000ee8,
      DI => blk00000003_sig00000605,
      S => blk00000003_blk000004f7_sig00000ee9,
      O => blk00000003_blk000004f7_sig00000ee6
    );
  blk00000003_blk000004f7_blk0000051d : MUXCY
    port map (
      CI => blk00000003_blk000004f7_sig00000ee6,
      DI => blk00000003_sig00000604,
      S => blk00000003_blk000004f7_sig00000ee7,
      O => blk00000003_blk000004f7_sig00000ee4
    );
  blk00000003_blk000004f7_blk0000051c : MUXCY
    port map (
      CI => blk00000003_blk000004f7_sig00000ee4,
      DI => blk00000003_sig00000603,
      S => blk00000003_blk000004f7_sig00000ee5,
      O => blk00000003_blk000004f7_sig00000ee2
    );
  blk00000003_blk000004f7_blk0000051b : MUXCY
    port map (
      CI => blk00000003_blk000004f7_sig00000ee2,
      DI => blk00000003_sig00000602,
      S => blk00000003_blk000004f7_sig00000ee3,
      O => blk00000003_blk000004f7_sig00000ee0
    );
  blk00000003_blk000004f7_blk0000051a : MUXCY
    port map (
      CI => blk00000003_blk000004f7_sig00000ee0,
      DI => blk00000003_sig00000601,
      S => blk00000003_blk000004f7_sig00000ee1,
      O => blk00000003_blk000004f7_sig00000ede
    );
  blk00000003_blk000004f7_blk00000519 : MUXCY
    port map (
      CI => blk00000003_blk000004f7_sig00000ede,
      DI => blk00000003_sig00000600,
      S => blk00000003_blk000004f7_sig00000edf,
      O => blk00000003_blk000004f7_sig00000edc
    );
  blk00000003_blk000004f7_blk00000518 : MUXCY
    port map (
      CI => blk00000003_blk000004f7_sig00000edc,
      DI => blk00000003_sig000005ff,
      S => blk00000003_blk000004f7_sig00000edd,
      O => blk00000003_blk000004f7_sig00000edb
    );
  blk00000003_blk000004f7_blk00000517 : XORCY
    port map (
      CI => blk00000003_blk000004f7_sig00000f14,
      LI => blk00000003_blk000004f7_sig00000f15,
      O => blk00000003_sig0000053b
    );
  blk00000003_blk000004f7_blk00000516 : XORCY
    port map (
      CI => blk00000003_blk000004f7_sig00000f12,
      LI => blk00000003_blk000004f7_sig00000f13,
      O => blk00000003_sig0000053d
    );
  blk00000003_blk000004f7_blk00000515 : XORCY
    port map (
      CI => blk00000003_blk000004f7_sig00000f10,
      LI => blk00000003_blk000004f7_sig00000f11,
      O => blk00000003_sig0000053f
    );
  blk00000003_blk000004f7_blk00000514 : XORCY
    port map (
      CI => blk00000003_blk000004f7_sig00000f0e,
      LI => blk00000003_blk000004f7_sig00000f0f,
      O => blk00000003_sig00000541
    );
  blk00000003_blk000004f7_blk00000513 : XORCY
    port map (
      CI => blk00000003_blk000004f7_sig00000f0c,
      LI => blk00000003_blk000004f7_sig00000f0d,
      O => blk00000003_sig00000543
    );
  blk00000003_blk000004f7_blk00000512 : XORCY
    port map (
      CI => blk00000003_blk000004f7_sig00000f0a,
      LI => blk00000003_blk000004f7_sig00000f0b,
      O => blk00000003_sig00000545
    );
  blk00000003_blk000004f7_blk00000511 : XORCY
    port map (
      CI => blk00000003_blk000004f7_sig00000f08,
      LI => blk00000003_blk000004f7_sig00000f09,
      O => blk00000003_sig00000547
    );
  blk00000003_blk000004f7_blk00000510 : XORCY
    port map (
      CI => blk00000003_blk000004f7_sig00000f06,
      LI => blk00000003_blk000004f7_sig00000f07,
      O => blk00000003_sig00000549
    );
  blk00000003_blk000004f7_blk0000050f : XORCY
    port map (
      CI => blk00000003_blk000004f7_sig00000f04,
      LI => blk00000003_blk000004f7_sig00000f05,
      O => blk00000003_sig0000054b
    );
  blk00000003_blk000004f7_blk0000050e : XORCY
    port map (
      CI => blk00000003_blk000004f7_sig00000f02,
      LI => blk00000003_blk000004f7_sig00000f03,
      O => blk00000003_sig0000054d
    );
  blk00000003_blk000004f7_blk0000050d : XORCY
    port map (
      CI => blk00000003_blk000004f7_sig00000f00,
      LI => blk00000003_blk000004f7_sig00000f01,
      O => blk00000003_sig0000054f
    );
  blk00000003_blk000004f7_blk0000050c : XORCY
    port map (
      CI => blk00000003_blk000004f7_sig00000efe,
      LI => blk00000003_blk000004f7_sig00000eff,
      O => blk00000003_sig00000551
    );
  blk00000003_blk000004f7_blk0000050b : XORCY
    port map (
      CI => blk00000003_blk000004f7_sig00000efc,
      LI => blk00000003_blk000004f7_sig00000efd,
      O => blk00000003_sig00000553
    );
  blk00000003_blk000004f7_blk0000050a : XORCY
    port map (
      CI => blk00000003_blk000004f7_sig00000efa,
      LI => blk00000003_blk000004f7_sig00000efb,
      O => blk00000003_sig00000555
    );
  blk00000003_blk000004f7_blk00000509 : XORCY
    port map (
      CI => blk00000003_blk000004f7_sig00000ef8,
      LI => blk00000003_blk000004f7_sig00000ef9,
      O => blk00000003_sig00000557
    );
  blk00000003_blk000004f7_blk00000508 : XORCY
    port map (
      CI => blk00000003_blk000004f7_sig00000ef6,
      LI => blk00000003_blk000004f7_sig00000ef7,
      O => blk00000003_sig00000559
    );
  blk00000003_blk000004f7_blk00000507 : XORCY
    port map (
      CI => blk00000003_blk000004f7_sig00000ef4,
      LI => blk00000003_blk000004f7_sig00000ef5,
      O => blk00000003_sig0000055b
    );
  blk00000003_blk000004f7_blk00000506 : XORCY
    port map (
      CI => blk00000003_blk000004f7_sig00000ef2,
      LI => blk00000003_blk000004f7_sig00000ef3,
      O => blk00000003_sig0000055d
    );
  blk00000003_blk000004f7_blk00000505 : XORCY
    port map (
      CI => blk00000003_blk000004f7_sig00000ef0,
      LI => blk00000003_blk000004f7_sig00000ef1,
      O => blk00000003_sig0000055f
    );
  blk00000003_blk000004f7_blk00000504 : XORCY
    port map (
      CI => blk00000003_blk000004f7_sig00000eee,
      LI => blk00000003_blk000004f7_sig00000eef,
      O => blk00000003_sig00000561
    );
  blk00000003_blk000004f7_blk00000503 : XORCY
    port map (
      CI => blk00000003_blk000004f7_sig00000eec,
      LI => blk00000003_blk000004f7_sig00000eed,
      O => blk00000003_sig00000563
    );
  blk00000003_blk000004f7_blk00000502 : XORCY
    port map (
      CI => blk00000003_blk000004f7_sig00000eea,
      LI => blk00000003_blk000004f7_sig00000eeb,
      O => blk00000003_sig00000565
    );
  blk00000003_blk000004f7_blk00000501 : XORCY
    port map (
      CI => blk00000003_blk000004f7_sig00000ee8,
      LI => blk00000003_blk000004f7_sig00000ee9,
      O => blk00000003_sig00000567
    );
  blk00000003_blk000004f7_blk00000500 : XORCY
    port map (
      CI => blk00000003_blk000004f7_sig00000ee6,
      LI => blk00000003_blk000004f7_sig00000ee7,
      O => blk00000003_sig00000569
    );
  blk00000003_blk000004f7_blk000004ff : XORCY
    port map (
      CI => blk00000003_blk000004f7_sig00000ee4,
      LI => blk00000003_blk000004f7_sig00000ee5,
      O => blk00000003_sig0000056b
    );
  blk00000003_blk000004f7_blk000004fe : XORCY
    port map (
      CI => blk00000003_blk000004f7_sig00000ee2,
      LI => blk00000003_blk000004f7_sig00000ee3,
      O => blk00000003_sig0000056d
    );
  blk00000003_blk000004f7_blk000004fd : XORCY
    port map (
      CI => blk00000003_blk000004f7_sig00000ee0,
      LI => blk00000003_blk000004f7_sig00000ee1,
      O => blk00000003_sig0000056f
    );
  blk00000003_blk000004f7_blk000004fc : XORCY
    port map (
      CI => blk00000003_blk000004f7_sig00000ede,
      LI => blk00000003_blk000004f7_sig00000edf,
      O => blk00000003_sig00000571
    );
  blk00000003_blk000004f7_blk000004fb : XORCY
    port map (
      CI => blk00000003_blk000004f7_sig00000edc,
      LI => blk00000003_blk000004f7_sig00000edd,
      O => blk00000003_sig00000573
    );
  blk00000003_blk000004f7_blk000004fa : XORCY
    port map (
      CI => blk00000003_blk000004f7_sig00000edb,
      LI => blk00000003_sig000005fe,
      O => blk00000003_sig00000575
    );
  blk00000003_blk000004f7_blk000004f9 : XORCY
    port map (
      CI => blk00000003_blk000004f7_sig00000ed9,
      LI => blk00000003_blk000004f7_sig00000eda,
      O => blk00000003_sig00000539
    );
  blk00000003_blk000004f7_blk000004f8 : GND
    port map (
      G => blk00000003_blk000004f7_sig00000ed9
    );
  blk00000003_blk00000559_blk0000055a_blk0000055e : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk00000559_blk0000055a_sig00000f21,
      Q => blk00000003_sig00000624
    );
  blk00000003_blk00000559_blk0000055a_blk0000055d : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk00000559_blk0000055a_sig00000f20,
      A1 => blk00000003_blk00000559_blk0000055a_sig00000f1f,
      A2 => blk00000003_blk00000559_blk0000055a_sig00000f1f,
      A3 => blk00000003_blk00000559_blk0000055a_sig00000f1f,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig00000623,
      Q => blk00000003_blk00000559_blk0000055a_sig00000f21,
      Q15 => NLW_blk00000003_blk00000559_blk0000055a_blk0000055d_Q15_UNCONNECTED
    );
  blk00000003_blk00000559_blk0000055a_blk0000055c : VCC
    port map (
      P => blk00000003_blk00000559_blk0000055a_sig00000f20
    );
  blk00000003_blk00000559_blk0000055a_blk0000055b : GND
    port map (
      G => blk00000003_blk00000559_blk0000055a_sig00000f1f
    );
  blk00000003_blk0000058d_blk000005b1 : INV
    port map (
      I => blk00000003_sig00000674,
      O => blk00000003_blk0000058d_sig00000f51
    );
  blk00000003_blk0000058d_blk000005b0 : LUT1
    generic map(
      INIT => X"2"
    )
    port map (
      I0 => blk00000003_sig00000673,
      O => blk00000003_blk0000058d_sig00000f50
    );
  blk00000003_blk0000058d_blk000005af : LUT1
    generic map(
      INIT => X"2"
    )
    port map (
      I0 => blk00000003_sig00000672,
      O => blk00000003_blk0000058d_sig00000f4e
    );
  blk00000003_blk0000058d_blk000005ae : LUT1
    generic map(
      INIT => X"2"
    )
    port map (
      I0 => blk00000003_sig00000671,
      O => blk00000003_blk0000058d_sig00000f4c
    );
  blk00000003_blk0000058d_blk000005ad : LUT1
    generic map(
      INIT => X"2"
    )
    port map (
      I0 => blk00000003_sig00000670,
      O => blk00000003_blk0000058d_sig00000f4a
    );
  blk00000003_blk0000058d_blk000005ac : LUT1
    generic map(
      INIT => X"2"
    )
    port map (
      I0 => blk00000003_sig0000066f,
      O => blk00000003_blk0000058d_sig00000f48
    );
  blk00000003_blk0000058d_blk000005ab : LUT1
    generic map(
      INIT => X"2"
    )
    port map (
      I0 => blk00000003_sig0000066e,
      O => blk00000003_blk0000058d_sig00000f46
    );
  blk00000003_blk0000058d_blk000005aa : LUT1
    generic map(
      INIT => X"2"
    )
    port map (
      I0 => blk00000003_sig0000066d,
      O => blk00000003_blk0000058d_sig00000f44
    );
  blk00000003_blk0000058d_blk000005a9 : LUT1
    generic map(
      INIT => X"2"
    )
    port map (
      I0 => blk00000003_sig0000066c,
      O => blk00000003_blk0000058d_sig00000f42
    );
  blk00000003_blk0000058d_blk000005a8 : LUT1
    generic map(
      INIT => X"2"
    )
    port map (
      I0 => blk00000003_sig0000066b,
      O => blk00000003_blk0000058d_sig00000f40
    );
  blk00000003_blk0000058d_blk000005a7 : LUT1
    generic map(
      INIT => X"2"
    )
    port map (
      I0 => blk00000003_sig0000066a,
      O => blk00000003_blk0000058d_sig00000f3d
    );
  blk00000003_blk0000058d_blk000005a6 : MUXCY
    port map (
      CI => blk00000003_blk0000058d_sig00000f3a,
      DI => blk00000003_blk0000058d_sig00000f3b,
      S => blk00000003_blk0000058d_sig00000f51,
      O => blk00000003_blk0000058d_sig00000f4f
    );
  blk00000003_blk0000058d_blk000005a5 : XORCY
    port map (
      CI => blk00000003_blk0000058d_sig00000f3a,
      LI => blk00000003_blk0000058d_sig00000f51,
      O => blk00000003_sig00000657
    );
  blk00000003_blk0000058d_blk000005a4 : XORCY
    port map (
      CI => blk00000003_blk0000058d_sig00000f3e,
      LI => blk00000003_sig00000669,
      O => blk00000003_sig00000668
    );
  blk00000003_blk0000058d_blk000005a3 : MUXCY
    port map (
      CI => blk00000003_blk0000058d_sig00000f4f,
      DI => blk00000003_blk0000058d_sig00000f3a,
      S => blk00000003_blk0000058d_sig00000f50,
      O => blk00000003_blk0000058d_sig00000f4d
    );
  blk00000003_blk0000058d_blk000005a2 : XORCY
    port map (
      CI => blk00000003_blk0000058d_sig00000f4f,
      LI => blk00000003_blk0000058d_sig00000f50,
      O => blk00000003_sig00000659
    );
  blk00000003_blk0000058d_blk000005a1 : MUXCY
    port map (
      CI => blk00000003_blk0000058d_sig00000f4d,
      DI => blk00000003_blk0000058d_sig00000f3a,
      S => blk00000003_blk0000058d_sig00000f4e,
      O => blk00000003_blk0000058d_sig00000f4b
    );
  blk00000003_blk0000058d_blk000005a0 : XORCY
    port map (
      CI => blk00000003_blk0000058d_sig00000f4d,
      LI => blk00000003_blk0000058d_sig00000f4e,
      O => blk00000003_sig0000065b
    );
  blk00000003_blk0000058d_blk0000059f : MUXCY
    port map (
      CI => blk00000003_blk0000058d_sig00000f4b,
      DI => blk00000003_blk0000058d_sig00000f3a,
      S => blk00000003_blk0000058d_sig00000f4c,
      O => blk00000003_blk0000058d_sig00000f49
    );
  blk00000003_blk0000058d_blk0000059e : XORCY
    port map (
      CI => blk00000003_blk0000058d_sig00000f4b,
      LI => blk00000003_blk0000058d_sig00000f4c,
      O => blk00000003_sig0000065d
    );
  blk00000003_blk0000058d_blk0000059d : MUXCY
    port map (
      CI => blk00000003_blk0000058d_sig00000f49,
      DI => blk00000003_blk0000058d_sig00000f3a,
      S => blk00000003_blk0000058d_sig00000f4a,
      O => blk00000003_blk0000058d_sig00000f47
    );
  blk00000003_blk0000058d_blk0000059c : XORCY
    port map (
      CI => blk00000003_blk0000058d_sig00000f49,
      LI => blk00000003_blk0000058d_sig00000f4a,
      O => blk00000003_sig0000065f
    );
  blk00000003_blk0000058d_blk0000059b : MUXCY
    port map (
      CI => blk00000003_blk0000058d_sig00000f47,
      DI => blk00000003_blk0000058d_sig00000f3a,
      S => blk00000003_blk0000058d_sig00000f48,
      O => blk00000003_blk0000058d_sig00000f45
    );
  blk00000003_blk0000058d_blk0000059a : XORCY
    port map (
      CI => blk00000003_blk0000058d_sig00000f47,
      LI => blk00000003_blk0000058d_sig00000f48,
      O => blk00000003_sig00000661
    );
  blk00000003_blk0000058d_blk00000599 : MUXCY
    port map (
      CI => blk00000003_blk0000058d_sig00000f45,
      DI => blk00000003_blk0000058d_sig00000f3a,
      S => blk00000003_blk0000058d_sig00000f46,
      O => blk00000003_blk0000058d_sig00000f43
    );
  blk00000003_blk0000058d_blk00000598 : XORCY
    port map (
      CI => blk00000003_blk0000058d_sig00000f45,
      LI => blk00000003_blk0000058d_sig00000f46,
      O => blk00000003_sig00000663
    );
  blk00000003_blk0000058d_blk00000597 : MUXCY
    port map (
      CI => blk00000003_blk0000058d_sig00000f43,
      DI => blk00000003_blk0000058d_sig00000f3a,
      S => blk00000003_blk0000058d_sig00000f44,
      O => blk00000003_blk0000058d_sig00000f41
    );
  blk00000003_blk0000058d_blk00000596 : XORCY
    port map (
      CI => blk00000003_blk0000058d_sig00000f43,
      LI => blk00000003_blk0000058d_sig00000f44,
      O => blk00000003_sig00000664
    );
  blk00000003_blk0000058d_blk00000595 : MUXCY
    port map (
      CI => blk00000003_blk0000058d_sig00000f41,
      DI => blk00000003_blk0000058d_sig00000f3a,
      S => blk00000003_blk0000058d_sig00000f42,
      O => blk00000003_blk0000058d_sig00000f3f
    );
  blk00000003_blk0000058d_blk00000594 : XORCY
    port map (
      CI => blk00000003_blk0000058d_sig00000f41,
      LI => blk00000003_blk0000058d_sig00000f42,
      O => blk00000003_sig00000665
    );
  blk00000003_blk0000058d_blk00000593 : MUXCY
    port map (
      CI => blk00000003_blk0000058d_sig00000f3f,
      DI => blk00000003_blk0000058d_sig00000f3a,
      S => blk00000003_blk0000058d_sig00000f40,
      O => blk00000003_blk0000058d_sig00000f3c
    );
  blk00000003_blk0000058d_blk00000592 : XORCY
    port map (
      CI => blk00000003_blk0000058d_sig00000f3f,
      LI => blk00000003_blk0000058d_sig00000f40,
      O => blk00000003_sig00000666
    );
  blk00000003_blk0000058d_blk00000591 : MUXCY
    port map (
      CI => blk00000003_blk0000058d_sig00000f3c,
      DI => blk00000003_blk0000058d_sig00000f3a,
      S => blk00000003_blk0000058d_sig00000f3d,
      O => blk00000003_blk0000058d_sig00000f3e
    );
  blk00000003_blk0000058d_blk00000590 : XORCY
    port map (
      CI => blk00000003_blk0000058d_sig00000f3c,
      LI => blk00000003_blk0000058d_sig00000f3d,
      O => blk00000003_sig00000667
    );
  blk00000003_blk0000058d_blk0000058f : GND
    port map (
      G => blk00000003_blk0000058d_sig00000f3a
    );
  blk00000003_blk0000058d_blk0000058e : VCC
    port map (
      P => blk00000003_blk0000058d_sig00000f3b
    );
  blk00000003_blk0000068f_blk00000690_blk000006aa : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk0000068f_blk00000690_sig00000f93,
      Q => blk00000003_sig00000773
    );
  blk00000003_blk0000068f_blk00000690_blk000006a9 : SRLC32E
    generic map(
      INIT => X"00000000"
    )
    port map (
      CLK => clk,
      D => blk00000003_sig000006f2,
      CE => ce,
      Q => blk00000003_blk0000068f_blk00000690_sig00000f93,
      Q31 => NLW_blk00000003_blk0000068f_blk00000690_blk000006a9_Q31_UNCONNECTED,
      A(4) => blk00000003_blk0000068f_blk00000690_sig00000f87,
      A(3) => blk00000003_blk0000068f_blk00000690_sig00000f86,
      A(2) => blk00000003_blk0000068f_blk00000690_sig00000f86,
      A(1) => blk00000003_blk0000068f_blk00000690_sig00000f87,
      A(0) => blk00000003_blk0000068f_blk00000690_sig00000f87
    );
  blk00000003_blk0000068f_blk00000690_blk000006a8 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk0000068f_blk00000690_sig00000f92,
      Q => blk00000003_sig00000774
    );
  blk00000003_blk0000068f_blk00000690_blk000006a7 : SRLC32E
    generic map(
      INIT => X"00000000"
    )
    port map (
      CLK => clk,
      D => blk00000003_sig000006f4,
      CE => ce,
      Q => blk00000003_blk0000068f_blk00000690_sig00000f92,
      Q31 => NLW_blk00000003_blk0000068f_blk00000690_blk000006a7_Q31_UNCONNECTED,
      A(4) => blk00000003_blk0000068f_blk00000690_sig00000f87,
      A(3) => blk00000003_blk0000068f_blk00000690_sig00000f86,
      A(2) => blk00000003_blk0000068f_blk00000690_sig00000f86,
      A(1) => blk00000003_blk0000068f_blk00000690_sig00000f87,
      A(0) => blk00000003_blk0000068f_blk00000690_sig00000f87
    );
  blk00000003_blk0000068f_blk00000690_blk000006a6 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk0000068f_blk00000690_sig00000f91,
      Q => blk00000003_sig00000772
    );
  blk00000003_blk0000068f_blk00000690_blk000006a5 : SRLC32E
    generic map(
      INIT => X"00000000"
    )
    port map (
      CLK => clk,
      D => blk00000003_sig000006f0,
      CE => ce,
      Q => blk00000003_blk0000068f_blk00000690_sig00000f91,
      Q31 => NLW_blk00000003_blk0000068f_blk00000690_blk000006a5_Q31_UNCONNECTED,
      A(4) => blk00000003_blk0000068f_blk00000690_sig00000f87,
      A(3) => blk00000003_blk0000068f_blk00000690_sig00000f86,
      A(2) => blk00000003_blk0000068f_blk00000690_sig00000f86,
      A(1) => blk00000003_blk0000068f_blk00000690_sig00000f87,
      A(0) => blk00000003_blk0000068f_blk00000690_sig00000f87
    );
  blk00000003_blk0000068f_blk00000690_blk000006a4 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk0000068f_blk00000690_sig00000f90,
      Q => blk00000003_sig00000776
    );
  blk00000003_blk0000068f_blk00000690_blk000006a3 : SRLC32E
    generic map(
      INIT => X"00000000"
    )
    port map (
      CLK => clk,
      D => blk00000003_sig000006f8,
      CE => ce,
      Q => blk00000003_blk0000068f_blk00000690_sig00000f90,
      Q31 => NLW_blk00000003_blk0000068f_blk00000690_blk000006a3_Q31_UNCONNECTED,
      A(4) => blk00000003_blk0000068f_blk00000690_sig00000f87,
      A(3) => blk00000003_blk0000068f_blk00000690_sig00000f86,
      A(2) => blk00000003_blk0000068f_blk00000690_sig00000f86,
      A(1) => blk00000003_blk0000068f_blk00000690_sig00000f87,
      A(0) => blk00000003_blk0000068f_blk00000690_sig00000f87
    );
  blk00000003_blk0000068f_blk00000690_blk000006a2 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk0000068f_blk00000690_sig00000f8f,
      Q => blk00000003_sig00000777
    );
  blk00000003_blk0000068f_blk00000690_blk000006a1 : SRLC32E
    generic map(
      INIT => X"00000000"
    )
    port map (
      CLK => clk,
      D => blk00000003_sig000006fa,
      CE => ce,
      Q => blk00000003_blk0000068f_blk00000690_sig00000f8f,
      Q31 => NLW_blk00000003_blk0000068f_blk00000690_blk000006a1_Q31_UNCONNECTED,
      A(4) => blk00000003_blk0000068f_blk00000690_sig00000f87,
      A(3) => blk00000003_blk0000068f_blk00000690_sig00000f86,
      A(2) => blk00000003_blk0000068f_blk00000690_sig00000f86,
      A(1) => blk00000003_blk0000068f_blk00000690_sig00000f87,
      A(0) => blk00000003_blk0000068f_blk00000690_sig00000f87
    );
  blk00000003_blk0000068f_blk00000690_blk000006a0 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk0000068f_blk00000690_sig00000f8e,
      Q => blk00000003_sig00000775
    );
  blk00000003_blk0000068f_blk00000690_blk0000069f : SRLC32E
    generic map(
      INIT => X"00000000"
    )
    port map (
      CLK => clk,
      D => blk00000003_sig000006f6,
      CE => ce,
      Q => blk00000003_blk0000068f_blk00000690_sig00000f8e,
      Q31 => NLW_blk00000003_blk0000068f_blk00000690_blk0000069f_Q31_UNCONNECTED,
      A(4) => blk00000003_blk0000068f_blk00000690_sig00000f87,
      A(3) => blk00000003_blk0000068f_blk00000690_sig00000f86,
      A(2) => blk00000003_blk0000068f_blk00000690_sig00000f86,
      A(1) => blk00000003_blk0000068f_blk00000690_sig00000f87,
      A(0) => blk00000003_blk0000068f_blk00000690_sig00000f87
    );
  blk00000003_blk0000068f_blk00000690_blk0000069e : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk0000068f_blk00000690_sig00000f8d,
      Q => blk00000003_sig00000779
    );
  blk00000003_blk0000068f_blk00000690_blk0000069d : SRLC32E
    generic map(
      INIT => X"00000000"
    )
    port map (
      CLK => clk,
      D => blk00000003_sig000006fe,
      CE => ce,
      Q => blk00000003_blk0000068f_blk00000690_sig00000f8d,
      Q31 => NLW_blk00000003_blk0000068f_blk00000690_blk0000069d_Q31_UNCONNECTED,
      A(4) => blk00000003_blk0000068f_blk00000690_sig00000f87,
      A(3) => blk00000003_blk0000068f_blk00000690_sig00000f86,
      A(2) => blk00000003_blk0000068f_blk00000690_sig00000f86,
      A(1) => blk00000003_blk0000068f_blk00000690_sig00000f87,
      A(0) => blk00000003_blk0000068f_blk00000690_sig00000f87
    );
  blk00000003_blk0000068f_blk00000690_blk0000069c : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk0000068f_blk00000690_sig00000f8c,
      Q => blk00000003_sig0000077a
    );
  blk00000003_blk0000068f_blk00000690_blk0000069b : SRLC32E
    generic map(
      INIT => X"00000000"
    )
    port map (
      CLK => clk,
      D => blk00000003_sig00000700,
      CE => ce,
      Q => blk00000003_blk0000068f_blk00000690_sig00000f8c,
      Q31 => NLW_blk00000003_blk0000068f_blk00000690_blk0000069b_Q31_UNCONNECTED,
      A(4) => blk00000003_blk0000068f_blk00000690_sig00000f87,
      A(3) => blk00000003_blk0000068f_blk00000690_sig00000f86,
      A(2) => blk00000003_blk0000068f_blk00000690_sig00000f86,
      A(1) => blk00000003_blk0000068f_blk00000690_sig00000f87,
      A(0) => blk00000003_blk0000068f_blk00000690_sig00000f87
    );
  blk00000003_blk0000068f_blk00000690_blk0000069a : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk0000068f_blk00000690_sig00000f8b,
      Q => blk00000003_sig00000778
    );
  blk00000003_blk0000068f_blk00000690_blk00000699 : SRLC32E
    generic map(
      INIT => X"00000000"
    )
    port map (
      CLK => clk,
      D => blk00000003_sig000006fc,
      CE => ce,
      Q => blk00000003_blk0000068f_blk00000690_sig00000f8b,
      Q31 => NLW_blk00000003_blk0000068f_blk00000690_blk00000699_Q31_UNCONNECTED,
      A(4) => blk00000003_blk0000068f_blk00000690_sig00000f87,
      A(3) => blk00000003_blk0000068f_blk00000690_sig00000f86,
      A(2) => blk00000003_blk0000068f_blk00000690_sig00000f86,
      A(1) => blk00000003_blk0000068f_blk00000690_sig00000f87,
      A(0) => blk00000003_blk0000068f_blk00000690_sig00000f87
    );
  blk00000003_blk0000068f_blk00000690_blk00000698 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk0000068f_blk00000690_sig00000f8a,
      Q => blk00000003_sig0000077c
    );
  blk00000003_blk0000068f_blk00000690_blk00000697 : SRLC32E
    generic map(
      INIT => X"00000000"
    )
    port map (
      CLK => clk,
      D => blk00000003_sig00000704,
      CE => ce,
      Q => blk00000003_blk0000068f_blk00000690_sig00000f8a,
      Q31 => NLW_blk00000003_blk0000068f_blk00000690_blk00000697_Q31_UNCONNECTED,
      A(4) => blk00000003_blk0000068f_blk00000690_sig00000f87,
      A(3) => blk00000003_blk0000068f_blk00000690_sig00000f86,
      A(2) => blk00000003_blk0000068f_blk00000690_sig00000f86,
      A(1) => blk00000003_blk0000068f_blk00000690_sig00000f87,
      A(0) => blk00000003_blk0000068f_blk00000690_sig00000f87
    );
  blk00000003_blk0000068f_blk00000690_blk00000696 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk0000068f_blk00000690_sig00000f89,
      Q => blk00000003_sig0000077d
    );
  blk00000003_blk0000068f_blk00000690_blk00000695 : SRLC32E
    generic map(
      INIT => X"00000000"
    )
    port map (
      CLK => clk,
      D => blk00000003_sig00000706,
      CE => ce,
      Q => blk00000003_blk0000068f_blk00000690_sig00000f89,
      Q31 => NLW_blk00000003_blk0000068f_blk00000690_blk00000695_Q31_UNCONNECTED,
      A(4) => blk00000003_blk0000068f_blk00000690_sig00000f87,
      A(3) => blk00000003_blk0000068f_blk00000690_sig00000f86,
      A(2) => blk00000003_blk0000068f_blk00000690_sig00000f86,
      A(1) => blk00000003_blk0000068f_blk00000690_sig00000f87,
      A(0) => blk00000003_blk0000068f_blk00000690_sig00000f87
    );
  blk00000003_blk0000068f_blk00000690_blk00000694 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk0000068f_blk00000690_sig00000f88,
      Q => blk00000003_sig0000077b
    );
  blk00000003_blk0000068f_blk00000690_blk00000693 : SRLC32E
    generic map(
      INIT => X"00000000"
    )
    port map (
      CLK => clk,
      D => blk00000003_sig00000702,
      CE => ce,
      Q => blk00000003_blk0000068f_blk00000690_sig00000f88,
      Q31 => NLW_blk00000003_blk0000068f_blk00000690_blk00000693_Q31_UNCONNECTED,
      A(4) => blk00000003_blk0000068f_blk00000690_sig00000f87,
      A(3) => blk00000003_blk0000068f_blk00000690_sig00000f86,
      A(2) => blk00000003_blk0000068f_blk00000690_sig00000f86,
      A(1) => blk00000003_blk0000068f_blk00000690_sig00000f87,
      A(0) => blk00000003_blk0000068f_blk00000690_sig00000f87
    );
  blk00000003_blk0000068f_blk00000690_blk00000692 : VCC
    port map (
      P => blk00000003_blk0000068f_blk00000690_sig00000f87
    );
  blk00000003_blk0000068f_blk00000690_blk00000691 : GND
    port map (
      G => blk00000003_blk0000068f_blk00000690_sig00000f86
    );
  blk00000003_blk000006ab_blk000006ac_blk000006b0 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk000006ab_blk000006ac_sig00000f9e,
      Q => blk00000003_sig0000077e
    );
  blk00000003_blk000006ab_blk000006ac_blk000006af : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk000006ab_blk000006ac_sig00000f9c,
      A1 => blk00000003_blk000006ab_blk000006ac_sig00000f9d,
      A2 => blk00000003_blk000006ab_blk000006ac_sig00000f9d,
      A3 => blk00000003_blk000006ab_blk000006ac_sig00000f9d,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig0000070f,
      Q => blk00000003_blk000006ab_blk000006ac_sig00000f9e,
      Q15 => NLW_blk00000003_blk000006ab_blk000006ac_blk000006af_Q15_UNCONNECTED
    );
  blk00000003_blk000006ab_blk000006ac_blk000006ae : VCC
    port map (
      P => blk00000003_blk000006ab_blk000006ac_sig00000f9d
    );
  blk00000003_blk000006ab_blk000006ac_blk000006ad : GND
    port map (
      G => blk00000003_blk000006ab_blk000006ac_sig00000f9c
    );
  blk00000003_blk000006b1_blk000006b2_blk000006b6 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk000006b1_blk000006b2_sig00000fa9,
      Q => blk00000003_sig0000077f
    );
  blk00000003_blk000006b1_blk000006b2_blk000006b5 : SRLC32E
    generic map(
      INIT => X"00000000"
    )
    port map (
      CLK => clk,
      D => blk00000003_sig00000711,
      CE => ce,
      Q => blk00000003_blk000006b1_blk000006b2_sig00000fa9,
      Q31 => NLW_blk00000003_blk000006b1_blk000006b2_blk000006b5_Q31_UNCONNECTED,
      A(4) => blk00000003_blk000006b1_blk000006b2_sig00000fa8,
      A(3) => blk00000003_blk000006b1_blk000006b2_sig00000fa7,
      A(2) => blk00000003_blk000006b1_blk000006b2_sig00000fa7,
      A(1) => blk00000003_blk000006b1_blk000006b2_sig00000fa7,
      A(0) => blk00000003_blk000006b1_blk000006b2_sig00000fa8
    );
  blk00000003_blk000006b1_blk000006b2_blk000006b4 : VCC
    port map (
      P => blk00000003_blk000006b1_blk000006b2_sig00000fa8
    );
  blk00000003_blk000006b1_blk000006b2_blk000006b3 : GND
    port map (
      G => blk00000003_blk000006b1_blk000006b2_sig00000fa7
    );
  blk00000003_blk000006b7_blk000006c3 : INV
    port map (
      I => blk00000003_sig00000783,
      O => blk00000003_blk000006b7_sig00000fb9
    );
  blk00000003_blk000006b7_blk000006c2 : LUT1
    generic map(
      INIT => X"2"
    )
    port map (
      I0 => blk00000003_sig00000782,
      O => blk00000003_blk000006b7_sig00000fb8
    );
  blk00000003_blk000006b7_blk000006c1 : LUT1
    generic map(
      INIT => X"2"
    )
    port map (
      I0 => blk00000003_sig00000781,
      O => blk00000003_blk000006b7_sig00000fb5
    );
  blk00000003_blk000006b7_blk000006c0 : MUXCY
    port map (
      CI => blk00000003_blk000006b7_sig00000fb2,
      DI => blk00000003_blk000006b7_sig00000fb3,
      S => blk00000003_blk000006b7_sig00000fb9,
      O => blk00000003_blk000006b7_sig00000fb7
    );
  blk00000003_blk000006b7_blk000006bf : XORCY
    port map (
      CI => blk00000003_blk000006b7_sig00000fb2,
      LI => blk00000003_blk000006b7_sig00000fb9,
      O => blk00000003_sig000006e3
    );
  blk00000003_blk000006b7_blk000006be : XORCY
    port map (
      CI => blk00000003_blk000006b7_sig00000fb6,
      LI => blk00000003_sig00000780,
      O => blk00000003_sig000006e9
    );
  blk00000003_blk000006b7_blk000006bd : MUXCY
    port map (
      CI => blk00000003_blk000006b7_sig00000fb7,
      DI => blk00000003_blk000006b7_sig00000fb2,
      S => blk00000003_blk000006b7_sig00000fb8,
      O => blk00000003_blk000006b7_sig00000fb4
    );
  blk00000003_blk000006b7_blk000006bc : XORCY
    port map (
      CI => blk00000003_blk000006b7_sig00000fb7,
      LI => blk00000003_blk000006b7_sig00000fb8,
      O => blk00000003_sig000006e5
    );
  blk00000003_blk000006b7_blk000006bb : MUXCY
    port map (
      CI => blk00000003_blk000006b7_sig00000fb4,
      DI => blk00000003_blk000006b7_sig00000fb2,
      S => blk00000003_blk000006b7_sig00000fb5,
      O => blk00000003_blk000006b7_sig00000fb6
    );
  blk00000003_blk000006b7_blk000006ba : XORCY
    port map (
      CI => blk00000003_blk000006b7_sig00000fb4,
      LI => blk00000003_blk000006b7_sig00000fb5,
      O => blk00000003_sig000006e7
    );
  blk00000003_blk000006b7_blk000006b9 : GND
    port map (
      G => blk00000003_blk000006b7_sig00000fb2
    );
  blk00000003_blk000006b7_blk000006b8 : VCC
    port map (
      P => blk00000003_blk000006b7_sig00000fb3
    );
  blk00000003_blk000006c4_blk000006c5_blk000006c9 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk000006c4_blk000006c5_sig00000fc5,
      Q => blk00000003_sig00000784
    );
  blk00000003_blk000006c4_blk000006c5_blk000006c8 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk000006c4_blk000006c5_sig00000fc4,
      A1 => blk00000003_blk000006c4_blk000006c5_sig00000fc3,
      A2 => blk00000003_blk000006c4_blk000006c5_sig00000fc3,
      A3 => blk00000003_blk000006c4_blk000006c5_sig00000fc3,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig0000064e,
      Q => blk00000003_blk000006c4_blk000006c5_sig00000fc5,
      Q15 => NLW_blk00000003_blk000006c4_blk000006c5_blk000006c8_Q15_UNCONNECTED
    );
  blk00000003_blk000006c4_blk000006c5_blk000006c7 : VCC
    port map (
      P => blk00000003_blk000006c4_blk000006c5_sig00000fc4
    );
  blk00000003_blk000006c4_blk000006c5_blk000006c6 : GND
    port map (
      G => blk00000003_blk000006c4_blk000006c5_sig00000fc3
    );
  blk00000003_blk000006ca_blk000006cb_blk000006cf : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk000006ca_blk000006cb_sig00000fd1,
      Q => blk00000003_sig00000786
    );
  blk00000003_blk000006ca_blk000006cb_blk000006ce : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk000006ca_blk000006cb_sig00000fd0,
      A1 => blk00000003_blk000006ca_blk000006cb_sig00000fcf,
      A2 => blk00000003_blk000006ca_blk000006cb_sig00000fcf,
      A3 => blk00000003_blk000006ca_blk000006cb_sig00000fcf,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig00000785,
      Q => blk00000003_blk000006ca_blk000006cb_sig00000fd1,
      Q15 => NLW_blk00000003_blk000006ca_blk000006cb_blk000006ce_Q15_UNCONNECTED
    );
  blk00000003_blk000006ca_blk000006cb_blk000006cd : VCC
    port map (
      P => blk00000003_blk000006ca_blk000006cb_sig00000fd0
    );
  blk00000003_blk000006ca_blk000006cb_blk000006cc : GND
    port map (
      G => blk00000003_blk000006ca_blk000006cb_sig00000fcf
    );
  blk00000003_blk000006d0_blk000006d1_blk000006d5 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk000006d0_blk000006d1_sig00000fdd,
      Q => blk00000003_sig00000183
    );
  blk00000003_blk000006d0_blk000006d1_blk000006d4 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk000006d0_blk000006d1_sig00000fdc,
      A1 => blk00000003_blk000006d0_blk000006d1_sig00000fdb,
      A2 => blk00000003_blk000006d0_blk000006d1_sig00000fdb,
      A3 => blk00000003_blk000006d0_blk000006d1_sig00000fdb,
      CE => ce,
      CLK => clk,
      D => NlwRenamedSig_OI_rfd,
      Q => blk00000003_blk000006d0_blk000006d1_sig00000fdd,
      Q15 => NLW_blk00000003_blk000006d0_blk000006d1_blk000006d4_Q15_UNCONNECTED
    );
  blk00000003_blk000006d0_blk000006d1_blk000006d3 : VCC
    port map (
      P => blk00000003_blk000006d0_blk000006d1_sig00000fdc
    );
  blk00000003_blk000006d0_blk000006d1_blk000006d2 : GND
    port map (
      G => blk00000003_blk000006d0_blk000006d1_sig00000fdb
    );
  blk00000003_blk000006d6_blk000006d7_blk000006db : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk000006d6_blk000006d7_sig00000fe9,
      Q => blk00000003_sig00000788
    );
  blk00000003_blk000006d6_blk000006d7_blk000006da : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk000006d6_blk000006d7_sig00000fe7,
      A1 => blk00000003_blk000006d6_blk000006d7_sig00000fe8,
      A2 => blk00000003_blk000006d6_blk000006d7_sig00000fe7,
      A3 => blk00000003_blk000006d6_blk000006d7_sig00000fe7,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig00000787,
      Q => blk00000003_blk000006d6_blk000006d7_sig00000fe9,
      Q15 => NLW_blk00000003_blk000006d6_blk000006d7_blk000006da_Q15_UNCONNECTED
    );
  blk00000003_blk000006d6_blk000006d7_blk000006d9 : VCC
    port map (
      P => blk00000003_blk000006d6_blk000006d7_sig00000fe8
    );
  blk00000003_blk000006d6_blk000006d7_blk000006d8 : GND
    port map (
      G => blk00000003_blk000006d6_blk000006d7_sig00000fe7
    );
  blk00000003_blk000006ea_blk000006eb_blk00000705 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk000006ea_blk000006eb_sig0000102b,
      Q => blk00000003_sig0000078b
    );
  blk00000003_blk000006ea_blk000006eb_blk00000704 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk000006ea_blk000006eb_sig0000101e,
      A1 => blk00000003_blk000006ea_blk000006eb_sig0000101f,
      A2 => blk00000003_blk000006ea_blk000006eb_sig0000101e,
      A3 => blk00000003_blk000006ea_blk000006eb_sig0000101e,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig00000654,
      Q => blk00000003_blk000006ea_blk000006eb_sig0000102b,
      Q15 => NLW_blk00000003_blk000006ea_blk000006eb_blk00000704_Q15_UNCONNECTED
    );
  blk00000003_blk000006ea_blk000006eb_blk00000703 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk000006ea_blk000006eb_sig0000102a,
      Q => blk00000003_sig0000078c
    );
  blk00000003_blk000006ea_blk000006eb_blk00000702 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk000006ea_blk000006eb_sig0000101e,
      A1 => blk00000003_blk000006ea_blk000006eb_sig0000101f,
      A2 => blk00000003_blk000006ea_blk000006eb_sig0000101e,
      A3 => blk00000003_blk000006ea_blk000006eb_sig0000101e,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig00000653,
      Q => blk00000003_blk000006ea_blk000006eb_sig0000102a,
      Q15 => NLW_blk00000003_blk000006ea_blk000006eb_blk00000702_Q15_UNCONNECTED
    );
  blk00000003_blk000006ea_blk000006eb_blk00000701 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk000006ea_blk000006eb_sig00001029,
      Q => blk00000003_sig00000789
    );
  blk00000003_blk000006ea_blk000006eb_blk00000700 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk000006ea_blk000006eb_sig0000101e,
      A1 => blk00000003_blk000006ea_blk000006eb_sig0000101f,
      A2 => blk00000003_blk000006ea_blk000006eb_sig0000101e,
      A3 => blk00000003_blk000006ea_blk000006eb_sig0000101e,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig00000655,
      Q => blk00000003_blk000006ea_blk000006eb_sig00001029,
      Q15 => NLW_blk00000003_blk000006ea_blk000006eb_blk00000700_Q15_UNCONNECTED
    );
  blk00000003_blk000006ea_blk000006eb_blk000006ff : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk000006ea_blk000006eb_sig00001028,
      Q => blk00000003_sig0000078e
    );
  blk00000003_blk000006ea_blk000006eb_blk000006fe : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk000006ea_blk000006eb_sig0000101e,
      A1 => blk00000003_blk000006ea_blk000006eb_sig0000101f,
      A2 => blk00000003_blk000006ea_blk000006eb_sig0000101e,
      A3 => blk00000003_blk000006ea_blk000006eb_sig0000101e,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig00000651,
      Q => blk00000003_blk000006ea_blk000006eb_sig00001028,
      Q15 => NLW_blk00000003_blk000006ea_blk000006eb_blk000006fe_Q15_UNCONNECTED
    );
  blk00000003_blk000006ea_blk000006eb_blk000006fd : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk000006ea_blk000006eb_sig00001027,
      Q => blk00000003_sig0000078f
    );
  blk00000003_blk000006ea_blk000006eb_blk000006fc : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk000006ea_blk000006eb_sig0000101e,
      A1 => blk00000003_blk000006ea_blk000006eb_sig0000101f,
      A2 => blk00000003_blk000006ea_blk000006eb_sig0000101e,
      A3 => blk00000003_blk000006ea_blk000006eb_sig0000101e,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig00000650,
      Q => blk00000003_blk000006ea_blk000006eb_sig00001027,
      Q15 => NLW_blk00000003_blk000006ea_blk000006eb_blk000006fc_Q15_UNCONNECTED
    );
  blk00000003_blk000006ea_blk000006eb_blk000006fb : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk000006ea_blk000006eb_sig00001026,
      Q => blk00000003_sig0000078d
    );
  blk00000003_blk000006ea_blk000006eb_blk000006fa : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk000006ea_blk000006eb_sig0000101e,
      A1 => blk00000003_blk000006ea_blk000006eb_sig0000101f,
      A2 => blk00000003_blk000006ea_blk000006eb_sig0000101e,
      A3 => blk00000003_blk000006ea_blk000006eb_sig0000101e,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig00000652,
      Q => blk00000003_blk000006ea_blk000006eb_sig00001026,
      Q15 => NLW_blk00000003_blk000006ea_blk000006eb_blk000006fa_Q15_UNCONNECTED
    );
  blk00000003_blk000006ea_blk000006eb_blk000006f9 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk000006ea_blk000006eb_sig00001025,
      Q => blk00000003_sig00000791
    );
  blk00000003_blk000006ea_blk000006eb_blk000006f8 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk000006ea_blk000006eb_sig0000101e,
      A1 => blk00000003_blk000006ea_blk000006eb_sig0000101f,
      A2 => blk00000003_blk000006ea_blk000006eb_sig0000101e,
      A3 => blk00000003_blk000006ea_blk000006eb_sig0000101e,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig00000660,
      Q => blk00000003_blk000006ea_blk000006eb_sig00001025,
      Q15 => NLW_blk00000003_blk000006ea_blk000006eb_blk000006f8_Q15_UNCONNECTED
    );
  blk00000003_blk000006ea_blk000006eb_blk000006f7 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk000006ea_blk000006eb_sig00001024,
      Q => blk00000003_sig00000792
    );
  blk00000003_blk000006ea_blk000006eb_blk000006f6 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk000006ea_blk000006eb_sig0000101e,
      A1 => blk00000003_blk000006ea_blk000006eb_sig0000101f,
      A2 => blk00000003_blk000006ea_blk000006eb_sig0000101e,
      A3 => blk00000003_blk000006ea_blk000006eb_sig0000101e,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig0000065e,
      Q => blk00000003_blk000006ea_blk000006eb_sig00001024,
      Q15 => NLW_blk00000003_blk000006ea_blk000006eb_blk000006f6_Q15_UNCONNECTED
    );
  blk00000003_blk000006ea_blk000006eb_blk000006f5 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk000006ea_blk000006eb_sig00001023,
      Q => blk00000003_sig00000790
    );
  blk00000003_blk000006ea_blk000006eb_blk000006f4 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk000006ea_blk000006eb_sig0000101e,
      A1 => blk00000003_blk000006ea_blk000006eb_sig0000101f,
      A2 => blk00000003_blk000006ea_blk000006eb_sig0000101e,
      A3 => blk00000003_blk000006ea_blk000006eb_sig0000101e,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig00000662,
      Q => blk00000003_blk000006ea_blk000006eb_sig00001023,
      Q15 => NLW_blk00000003_blk000006ea_blk000006eb_blk000006f4_Q15_UNCONNECTED
    );
  blk00000003_blk000006ea_blk000006eb_blk000006f3 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk000006ea_blk000006eb_sig00001022,
      Q => blk00000003_sig00000794
    );
  blk00000003_blk000006ea_blk000006eb_blk000006f2 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk000006ea_blk000006eb_sig0000101e,
      A1 => blk00000003_blk000006ea_blk000006eb_sig0000101f,
      A2 => blk00000003_blk000006ea_blk000006eb_sig0000101e,
      A3 => blk00000003_blk000006ea_blk000006eb_sig0000101e,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig0000065a,
      Q => blk00000003_blk000006ea_blk000006eb_sig00001022,
      Q15 => NLW_blk00000003_blk000006ea_blk000006eb_blk000006f2_Q15_UNCONNECTED
    );
  blk00000003_blk000006ea_blk000006eb_blk000006f1 : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk000006ea_blk000006eb_sig00001021,
      Q => blk00000003_sig00000795
    );
  blk00000003_blk000006ea_blk000006eb_blk000006f0 : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk000006ea_blk000006eb_sig0000101e,
      A1 => blk00000003_blk000006ea_blk000006eb_sig0000101f,
      A2 => blk00000003_blk000006ea_blk000006eb_sig0000101e,
      A3 => blk00000003_blk000006ea_blk000006eb_sig0000101e,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig00000658,
      Q => blk00000003_blk000006ea_blk000006eb_sig00001021,
      Q15 => NLW_blk00000003_blk000006ea_blk000006eb_blk000006f0_Q15_UNCONNECTED
    );
  blk00000003_blk000006ea_blk000006eb_blk000006ef : FDE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk000006ea_blk000006eb_sig00001020,
      Q => blk00000003_sig00000793
    );
  blk00000003_blk000006ea_blk000006eb_blk000006ee : SRLC16E
    generic map(
      INIT => X"0000"
    )
    port map (
      A0 => blk00000003_blk000006ea_blk000006eb_sig0000101e,
      A1 => blk00000003_blk000006ea_blk000006eb_sig0000101f,
      A2 => blk00000003_blk000006ea_blk000006eb_sig0000101e,
      A3 => blk00000003_blk000006ea_blk000006eb_sig0000101e,
      CE => ce,
      CLK => clk,
      D => blk00000003_sig0000065c,
      Q => blk00000003_blk000006ea_blk000006eb_sig00001020,
      Q15 => NLW_blk00000003_blk000006ea_blk000006eb_blk000006ee_Q15_UNCONNECTED
    );
  blk00000003_blk000006ea_blk000006eb_blk000006ed : VCC
    port map (
      P => blk00000003_blk000006ea_blk000006eb_sig0000101f
    );
  blk00000003_blk000006ea_blk000006eb_blk000006ec : GND
    port map (
      G => blk00000003_blk000006ea_blk000006eb_sig0000101e
    );
  blk00000003_blk00000706_blk00000736 : INV
    port map (
      I => blk00000003_sig000007a4,
      O => blk00000003_blk00000706_sig00001069
    );
  blk00000003_blk00000706_blk00000735 : LUT1
    generic map(
      INIT => X"2"
    )
    port map (
      I0 => blk00000003_sig000007a3,
      O => blk00000003_blk00000706_sig00001066
    );
  blk00000003_blk00000706_blk00000734 : LUT1
    generic map(
      INIT => X"2"
    )
    port map (
      I0 => blk00000003_sig000007a2,
      O => blk00000003_blk00000706_sig00001063
    );
  blk00000003_blk00000706_blk00000733 : LUT1
    generic map(
      INIT => X"2"
    )
    port map (
      I0 => blk00000003_sig000007a1,
      O => blk00000003_blk00000706_sig00001060
    );
  blk00000003_blk00000706_blk00000732 : LUT1
    generic map(
      INIT => X"2"
    )
    port map (
      I0 => blk00000003_sig000007a0,
      O => blk00000003_blk00000706_sig0000105d
    );
  blk00000003_blk00000706_blk00000731 : LUT1
    generic map(
      INIT => X"2"
    )
    port map (
      I0 => blk00000003_sig0000079f,
      O => blk00000003_blk00000706_sig0000105a
    );
  blk00000003_blk00000706_blk00000730 : LUT1
    generic map(
      INIT => X"2"
    )
    port map (
      I0 => blk00000003_sig0000079e,
      O => blk00000003_blk00000706_sig00001057
    );
  blk00000003_blk00000706_blk0000072f : LUT1
    generic map(
      INIT => X"2"
    )
    port map (
      I0 => blk00000003_sig0000079d,
      O => blk00000003_blk00000706_sig00001054
    );
  blk00000003_blk00000706_blk0000072e : LUT1
    generic map(
      INIT => X"2"
    )
    port map (
      I0 => blk00000003_sig0000079c,
      O => blk00000003_blk00000706_sig00001051
    );
  blk00000003_blk00000706_blk0000072d : LUT1
    generic map(
      INIT => X"2"
    )
    port map (
      I0 => blk00000003_sig0000079b,
      O => blk00000003_blk00000706_sig0000104e
    );
  blk00000003_blk00000706_blk0000072c : LUT1
    generic map(
      INIT => X"2"
    )
    port map (
      I0 => blk00000003_sig0000079a,
      O => blk00000003_blk00000706_sig0000104a
    );
  blk00000003_blk00000706_blk0000072b : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk00000706_sig0000106a,
      R => sclr,
      Q => NlwRenamedSig_OI_xn_index(0)
    );
  blk00000003_blk00000706_blk0000072a : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk00000706_sig00001067,
      R => sclr,
      Q => NlwRenamedSig_OI_xn_index(1)
    );
  blk00000003_blk00000706_blk00000729 : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk00000706_sig00001064,
      R => sclr,
      Q => NlwRenamedSig_OI_xn_index(2)
    );
  blk00000003_blk00000706_blk00000728 : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk00000706_sig00001061,
      R => sclr,
      Q => NlwRenamedSig_OI_xn_index(3)
    );
  blk00000003_blk00000706_blk00000727 : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk00000706_sig0000105e,
      R => sclr,
      Q => NlwRenamedSig_OI_xn_index(4)
    );
  blk00000003_blk00000706_blk00000726 : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk00000706_sig0000105b,
      R => sclr,
      Q => NlwRenamedSig_OI_xn_index(5)
    );
  blk00000003_blk00000706_blk00000725 : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk00000706_sig00001058,
      R => sclr,
      Q => NlwRenamedSig_OI_xn_index(6)
    );
  blk00000003_blk00000706_blk00000724 : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk00000706_sig00001055,
      R => sclr,
      Q => NlwRenamedSig_OI_xn_index(7)
    );
  blk00000003_blk00000706_blk00000723 : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk00000706_sig00001052,
      R => sclr,
      Q => NlwRenamedSig_OI_xn_index(8)
    );
  blk00000003_blk00000706_blk00000722 : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk00000706_sig0000104f,
      R => sclr,
      Q => NlwRenamedSig_OI_xn_index(9)
    );
  blk00000003_blk00000706_blk00000721 : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk00000706_sig0000104b,
      R => sclr,
      Q => NlwRenamedSig_OI_xn_index(10)
    );
  blk00000003_blk00000706_blk00000720 : FDRE
    generic map(
      INIT => '0'
    )
    port map (
      C => clk,
      CE => ce,
      D => blk00000003_blk00000706_sig00001068,
      R => sclr,
      Q => NlwRenamedSig_OI_xn_index(11)
    );
  blk00000003_blk00000706_blk0000071f : MUXCY
    port map (
      CI => blk00000003_blk00000706_sig00001047,
      DI => blk00000003_blk00000706_sig00001048,
      S => blk00000003_blk00000706_sig00001069,
      O => blk00000003_blk00000706_sig00001065
    );
  blk00000003_blk00000706_blk0000071e : XORCY
    port map (
      CI => blk00000003_blk00000706_sig00001047,
      LI => blk00000003_blk00000706_sig00001069,
      O => blk00000003_blk00000706_sig0000106a
    );
  blk00000003_blk00000706_blk0000071d : XORCY
    port map (
      CI => blk00000003_blk00000706_sig0000104c,
      LI => blk00000003_sig00000799,
      O => blk00000003_blk00000706_sig00001068
    );
  blk00000003_blk00000706_blk0000071c : MUXCY
    port map (
      CI => blk00000003_blk00000706_sig00001065,
      DI => blk00000003_blk00000706_sig00001047,
      S => blk00000003_blk00000706_sig00001066,
      O => blk00000003_blk00000706_sig00001062
    );
  blk00000003_blk00000706_blk0000071b : XORCY
    port map (
      CI => blk00000003_blk00000706_sig00001065,
      LI => blk00000003_blk00000706_sig00001066,
      O => blk00000003_blk00000706_sig00001067
    );
  blk00000003_blk00000706_blk0000071a : MUXCY
    port map (
      CI => blk00000003_blk00000706_sig00001062,
      DI => blk00000003_blk00000706_sig00001047,
      S => blk00000003_blk00000706_sig00001063,
      O => blk00000003_blk00000706_sig0000105f
    );
  blk00000003_blk00000706_blk00000719 : XORCY
    port map (
      CI => blk00000003_blk00000706_sig00001062,
      LI => blk00000003_blk00000706_sig00001063,
      O => blk00000003_blk00000706_sig00001064
    );
  blk00000003_blk00000706_blk00000718 : MUXCY
    port map (
      CI => blk00000003_blk00000706_sig0000105f,
      DI => blk00000003_blk00000706_sig00001047,
      S => blk00000003_blk00000706_sig00001060,
      O => blk00000003_blk00000706_sig0000105c
    );
  blk00000003_blk00000706_blk00000717 : XORCY
    port map (
      CI => blk00000003_blk00000706_sig0000105f,
      LI => blk00000003_blk00000706_sig00001060,
      O => blk00000003_blk00000706_sig00001061
    );
  blk00000003_blk00000706_blk00000716 : MUXCY
    port map (
      CI => blk00000003_blk00000706_sig0000105c,
      DI => blk00000003_blk00000706_sig00001047,
      S => blk00000003_blk00000706_sig0000105d,
      O => blk00000003_blk00000706_sig00001059
    );
  blk00000003_blk00000706_blk00000715 : XORCY
    port map (
      CI => blk00000003_blk00000706_sig0000105c,
      LI => blk00000003_blk00000706_sig0000105d,
      O => blk00000003_blk00000706_sig0000105e
    );
  blk00000003_blk00000706_blk00000714 : MUXCY
    port map (
      CI => blk00000003_blk00000706_sig00001059,
      DI => blk00000003_blk00000706_sig00001047,
      S => blk00000003_blk00000706_sig0000105a,
      O => blk00000003_blk00000706_sig00001056
    );
  blk00000003_blk00000706_blk00000713 : XORCY
    port map (
      CI => blk00000003_blk00000706_sig00001059,
      LI => blk00000003_blk00000706_sig0000105a,
      O => blk00000003_blk00000706_sig0000105b
    );
  blk00000003_blk00000706_blk00000712 : MUXCY
    port map (
      CI => blk00000003_blk00000706_sig00001056,
      DI => blk00000003_blk00000706_sig00001047,
      S => blk00000003_blk00000706_sig00001057,
      O => blk00000003_blk00000706_sig00001053
    );
  blk00000003_blk00000706_blk00000711 : XORCY
    port map (
      CI => blk00000003_blk00000706_sig00001056,
      LI => blk00000003_blk00000706_sig00001057,
      O => blk00000003_blk00000706_sig00001058
    );
  blk00000003_blk00000706_blk00000710 : MUXCY
    port map (
      CI => blk00000003_blk00000706_sig00001053,
      DI => blk00000003_blk00000706_sig00001047,
      S => blk00000003_blk00000706_sig00001054,
      O => blk00000003_blk00000706_sig00001050
    );
  blk00000003_blk00000706_blk0000070f : XORCY
    port map (
      CI => blk00000003_blk00000706_sig00001053,
      LI => blk00000003_blk00000706_sig00001054,
      O => blk00000003_blk00000706_sig00001055
    );
  blk00000003_blk00000706_blk0000070e : MUXCY
    port map (
      CI => blk00000003_blk00000706_sig00001050,
      DI => blk00000003_blk00000706_sig00001047,
      S => blk00000003_blk00000706_sig00001051,
      O => blk00000003_blk00000706_sig0000104d
    );
  blk00000003_blk00000706_blk0000070d : XORCY
    port map (
      CI => blk00000003_blk00000706_sig00001050,
      LI => blk00000003_blk00000706_sig00001051,
      O => blk00000003_blk00000706_sig00001052
    );
  blk00000003_blk00000706_blk0000070c : MUXCY
    port map (
      CI => blk00000003_blk00000706_sig0000104d,
      DI => blk00000003_blk00000706_sig00001047,
      S => blk00000003_blk00000706_sig0000104e,
      O => blk00000003_blk00000706_sig00001049
    );
  blk00000003_blk00000706_blk0000070b : XORCY
    port map (
      CI => blk00000003_blk00000706_sig0000104d,
      LI => blk00000003_blk00000706_sig0000104e,
      O => blk00000003_blk00000706_sig0000104f
    );
  blk00000003_blk00000706_blk0000070a : MUXCY
    port map (
      CI => blk00000003_blk00000706_sig00001049,
      DI => blk00000003_blk00000706_sig00001047,
      S => blk00000003_blk00000706_sig0000104a,
      O => blk00000003_blk00000706_sig0000104c
    );
  blk00000003_blk00000706_blk00000709 : XORCY
    port map (
      CI => blk00000003_blk00000706_sig00001049,
      LI => blk00000003_blk00000706_sig0000104a,
      O => blk00000003_blk00000706_sig0000104b
    );
  blk00000003_blk00000706_blk00000708 : GND
    port map (
      G => blk00000003_blk00000706_sig00001047
    );
  blk00000003_blk00000706_blk00000707 : VCC
    port map (
      P => blk00000003_blk00000706_sig00001048
    );

end STRUCTURE;

-- synthesis translate_on
--------------------------------------------------------------------------------
--    This file is owned and controlled by Xilinx and must be used solely     --
--    for design, simulation, implementation and creation of design files     --
--    limited to Xilinx devices or technologies. Use with non-Xilinx          --
--    devices or technologies is expressly prohibited and immediately         --
--    terminates your license.                                                --
--                                                                            --
--    XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" SOLELY    --
--    FOR USE IN DEVELOPING PROGRAMS AND SOLUTIONS FOR XILINX DEVICES.  BY    --
--    PROVIDING THIS DESIGN, CODE, OR INFORMATION AS ONE POSSIBLE             --
--    IMPLEMENTATION OF THIS FEATURE, APPLICATION OR STANDARD, XILINX IS      --
--    MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION IS FREE FROM ANY      --
--    CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE FOR OBTAINING ANY       --
--    RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.  XILINX EXPRESSLY       --
--    DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO THE ADEQUACY OF THE   --
--    IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OR          --
--    REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE FROM CLAIMS OF         --
--    INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A   --
--    PARTICULAR PURPOSE.                                                     --
--                                                                            --
--    Xilinx products are not intended for use in life support appliances,    --
--    devices, or systems.  Use in such applications are expressly            --
--    prohibited.                                                             --
--                                                                            --
--    (c) Copyright 1995-2014 Xilinx, Inc.                                    --
--    All rights reserved.                                                    --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
-- You must compile the wrapper file bmg_72_35957677be9347c5.vhd when simulating
-- the core, bmg_72_35957677be9347c5. When compiling the wrapper file, be sure to
-- reference the XilinxCoreLib VHDL simulation library. For detailed
-- instructions, please refer to the "CORE Generator Help".

-- The synthesis directives "translate_off/translate_on" specified
-- below are supported by Xilinx, Mentor Graphics and Synplicity
-- synthesis tools. Ensure they are correct for your synthesis tool(s).

LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
-- synthesis translate_off
LIBRARY XilinxCoreLib;
-- synthesis translate_on
ENTITY bmg_72_35957677be9347c5 IS
  PORT (
    clka : IN STD_LOGIC;
    ena : IN STD_LOGIC;
    addra : IN STD_LOGIC_VECTOR(2 DOWNTO 0);
    douta : OUT STD_LOGIC_VECTOR(17 DOWNTO 0)
  );
END bmg_72_35957677be9347c5;

ARCHITECTURE bmg_72_35957677be9347c5_a OF bmg_72_35957677be9347c5 IS
-- synthesis translate_off
COMPONENT wrapped_bmg_72_35957677be9347c5
  PORT (
    clka : IN STD_LOGIC;
    ena : IN STD_LOGIC;
    addra : IN STD_LOGIC_VECTOR(2 DOWNTO 0);
    douta : OUT STD_LOGIC_VECTOR(17 DOWNTO 0)
  );
END COMPONENT;

-- Configuration specification
  FOR ALL : wrapped_bmg_72_35957677be9347c5 USE ENTITY XilinxCoreLib.blk_mem_gen_v7_2(behavioral)
    GENERIC MAP (
      c_addra_width => 3,
      c_addrb_width => 3,
      c_algorithm => 1,
      c_axi_id_width => 4,
      c_axi_slave_type => 0,
      c_axi_type => 1,
      c_byte_size => 9,
      c_common_clk => 0,
      c_default_data => "0",
      c_disable_warn_bhv_coll => 0,
      c_disable_warn_bhv_range => 0,
      c_enable_32bit_address => 0,
      c_family => "virtex5",
      c_has_axi_id => 0,
      c_has_ena => 1,
      c_has_enb => 0,
      c_has_injecterr => 0,
      c_has_mem_output_regs_a => 1,
      c_has_mem_output_regs_b => 0,
      c_has_mux_output_regs_a => 0,
      c_has_mux_output_regs_b => 0,
      c_has_regcea => 0,
      c_has_regceb => 0,
      c_has_rsta => 0,
      c_has_rstb => 0,
      c_has_softecc_input_regs_a => 0,
      c_has_softecc_output_regs_b => 0,
      c_init_file_name => "bmg_72_35957677be9347c5.mif",
      c_inita_val => "0",
      c_initb_val => "0",
      c_interface_type => 0,
      c_load_init_file => 1,
      c_mem_type => 3,
      c_mux_pipeline_stages => 0,
      c_prim_type => 1,
      c_read_depth_a => 8,
      c_read_depth_b => 8,
      c_read_width_a => 18,
      c_read_width_b => 18,
      c_rst_priority_a => "CE",
      c_rst_priority_b => "CE",
      c_rst_type => "SYNC",
      c_rstram_a => 0,
      c_rstram_b => 0,
      c_sim_collision_check => "ALL",
      c_use_byte_wea => 0,
      c_use_byte_web => 0,
      c_use_default_data => 0,
      c_use_ecc => 0,
      c_use_softecc => 0,
      c_wea_width => 1,
      c_web_width => 1,
      c_write_depth_a => 8,
      c_write_depth_b => 8,
      c_write_mode_a => "WRITE_FIRST",
      c_write_mode_b => "WRITE_FIRST",
      c_write_width_a => 18,
      c_write_width_b => 18,
      c_xdevicefamily => "virtex5"
    );
-- synthesis translate_on
BEGIN
-- synthesis translate_off
U0 : wrapped_bmg_72_35957677be9347c5
  PORT MAP (
    clka => clka,
    ena => ena,
    addra => addra,
    douta => douta
  );
-- synthesis translate_on

END bmg_72_35957677be9347c5_a;
--------------------------------------------------------------------------------
--    This file is owned and controlled by Xilinx and must be used solely     --
--    for design, simulation, implementation and creation of design files     --
--    limited to Xilinx devices or technologies. Use with non-Xilinx          --
--    devices or technologies is expressly prohibited and immediately         --
--    terminates your license.                                                --
--                                                                            --
--    XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" SOLELY    --
--    FOR USE IN DEVELOPING PROGRAMS AND SOLUTIONS FOR XILINX DEVICES.  BY    --
--    PROVIDING THIS DESIGN, CODE, OR INFORMATION AS ONE POSSIBLE             --
--    IMPLEMENTATION OF THIS FEATURE, APPLICATION OR STANDARD, XILINX IS      --
--    MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION IS FREE FROM ANY      --
--    CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE FOR OBTAINING ANY       --
--    RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.  XILINX EXPRESSLY       --
--    DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO THE ADEQUACY OF THE   --
--    IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OR          --
--    REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE FROM CLAIMS OF         --
--    INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A   --
--    PARTICULAR PURPOSE.                                                     --
--                                                                            --
--    Xilinx products are not intended for use in life support appliances,    --
--    devices, or systems.  Use in such applications are expressly            --
--    prohibited.                                                             --
--                                                                            --
--    (c) Copyright 1995-2014 Xilinx, Inc.                                    --
--    All rights reserved.                                                    --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
-- You must compile the wrapper file dmg_72_8cacf5ca230175f7.vhd when simulating
-- the core, dmg_72_8cacf5ca230175f7. When compiling the wrapper file, be sure to
-- reference the XilinxCoreLib VHDL simulation library. For detailed
-- instructions, please refer to the "CORE Generator Help".

-- The synthesis directives "translate_off/translate_on" specified
-- below are supported by Xilinx, Mentor Graphics and Synplicity
-- synthesis tools. Ensure they are correct for your synthesis tool(s).

LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
-- synthesis translate_off
LIBRARY XilinxCoreLib;
-- synthesis translate_on
ENTITY dmg_72_8cacf5ca230175f7 IS
  PORT (
    a : IN STD_LOGIC_VECTOR(5 DOWNTO 0);
    spo : OUT STD_LOGIC_VECTOR(5 DOWNTO 0)
  );
END dmg_72_8cacf5ca230175f7;

ARCHITECTURE dmg_72_8cacf5ca230175f7_a OF dmg_72_8cacf5ca230175f7 IS
-- synthesis translate_off
COMPONENT wrapped_dmg_72_8cacf5ca230175f7
  PORT (
    a : IN STD_LOGIC_VECTOR(5 DOWNTO 0);
    spo : OUT STD_LOGIC_VECTOR(5 DOWNTO 0)
  );
END COMPONENT;

-- Configuration specification
  FOR ALL : wrapped_dmg_72_8cacf5ca230175f7 USE ENTITY XilinxCoreLib.dist_mem_gen_v7_2(behavioral)
    GENERIC MAP (
      c_addr_width => 6,
      c_default_data => "0",
      c_depth => 64,
      c_family => "virtex5",
      c_has_clk => 0,
      c_has_d => 0,
      c_has_dpo => 0,
      c_has_dpra => 0,
      c_has_i_ce => 0,
      c_has_qdpo => 0,
      c_has_qdpo_ce => 0,
      c_has_qdpo_clk => 0,
      c_has_qdpo_rst => 0,
      c_has_qdpo_srst => 0,
      c_has_qspo => 0,
      c_has_qspo_ce => 0,
      c_has_qspo_rst => 0,
      c_has_qspo_srst => 0,
      c_has_spo => 1,
      c_has_spra => 0,
      c_has_we => 0,
      c_mem_init_file => "dmg_72_8cacf5ca230175f7.mif",
      c_mem_type => 0,
      c_parser_type => 1,
      c_pipeline_stages => 0,
      c_qce_joined => 0,
      c_qualify_we => 0,
      c_read_mif => 1,
      c_reg_a_d_inputs => 0,
      c_reg_dpra_input => 0,
      c_sync_enable => 1,
      c_width => 6
    );
-- synthesis translate_on
BEGIN
-- synthesis translate_off
U0 : wrapped_dmg_72_8cacf5ca230175f7
  PORT MAP (
    a => a,
    spo => spo
  );
-- synthesis translate_on

END dmg_72_8cacf5ca230175f7_a;
--------------------------------------------------------------------------------
--    This file is owned and controlled by Xilinx and must be used solely     --
--    for design, simulation, implementation and creation of design files     --
--    limited to Xilinx devices or technologies. Use with non-Xilinx          --
--    devices or technologies is expressly prohibited and immediately         --
--    terminates your license.                                                --
--                                                                            --
--    XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" SOLELY    --
--    FOR USE IN DEVELOPING PROGRAMS AND SOLUTIONS FOR XILINX DEVICES.  BY    --
--    PROVIDING THIS DESIGN, CODE, OR INFORMATION AS ONE POSSIBLE             --
--    IMPLEMENTATION OF THIS FEATURE, APPLICATION OR STANDARD, XILINX IS      --
--    MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION IS FREE FROM ANY      --
--    CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE FOR OBTAINING ANY       --
--    RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.  XILINX EXPRESSLY       --
--    DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO THE ADEQUACY OF THE   --
--    IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OR          --
--    REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE FROM CLAIMS OF         --
--    INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A   --
--    PARTICULAR PURPOSE.                                                     --
--                                                                            --
--    Xilinx products are not intended for use in life support appliances,    --
--    devices, or systems.  Use in such applications are expressly            --
--    prohibited.                                                             --
--                                                                            --
--    (c) Copyright 1995-2014 Xilinx, Inc.                                    --
--    All rights reserved.                                                    --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
-- You must compile the wrapper file cntr_11_0_81c610783c35b073.vhd when simulating
-- the core, cntr_11_0_81c610783c35b073. When compiling the wrapper file, be sure to
-- reference the XilinxCoreLib VHDL simulation library. For detailed
-- instructions, please refer to the "CORE Generator Help".

-- The synthesis directives "translate_off/translate_on" specified
-- below are supported by Xilinx, Mentor Graphics and Synplicity
-- synthesis tools. Ensure they are correct for your synthesis tool(s).

LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
-- synthesis translate_off
LIBRARY XilinxCoreLib;
-- synthesis translate_on
ENTITY cntr_11_0_81c610783c35b073 IS
  PORT (
    clk : IN STD_LOGIC;
    ce : IN STD_LOGIC;
    sinit : IN STD_LOGIC;
    load : IN STD_LOGIC;
    l : IN STD_LOGIC_VECTOR(3 DOWNTO 0);
    q : OUT STD_LOGIC_VECTOR(3 DOWNTO 0)
  );
END cntr_11_0_81c610783c35b073;

ARCHITECTURE cntr_11_0_81c610783c35b073_a OF cntr_11_0_81c610783c35b073 IS
-- synthesis translate_off
COMPONENT wrapped_cntr_11_0_81c610783c35b073
  PORT (
    clk : IN STD_LOGIC;
    ce : IN STD_LOGIC;
    sinit : IN STD_LOGIC;
    load : IN STD_LOGIC;
    l : IN STD_LOGIC_VECTOR(3 DOWNTO 0);
    q : OUT STD_LOGIC_VECTOR(3 DOWNTO 0)
  );
END COMPONENT;

-- Configuration specification
  FOR ALL : wrapped_cntr_11_0_81c610783c35b073 USE ENTITY XilinxCoreLib.c_counter_binary_v11_0(behavioral)
    GENERIC MAP (
      c_ainit_val => "0",
      c_ce_overrides_sync => 0,
      c_count_by => "1",
      c_count_mode => 1,
      c_count_to => "1",
      c_fb_latency => 0,
      c_has_ce => 1,
      c_has_load => 1,
      c_has_sclr => 0,
      c_has_sinit => 1,
      c_has_sset => 0,
      c_has_thresh0 => 0,
      c_implementation => 0,
      c_latency => 1,
      c_load_low => 0,
      c_restrict_count => 0,
      c_sclr_overrides_sset => 1,
      c_sinit_val => "0",
      c_thresh0_value => "1",
      c_verbosity => 0,
      c_width => 4,
      c_xdevicefamily => "virtex5"
    );
-- synthesis translate_on
BEGIN
-- synthesis translate_off
U0 : wrapped_cntr_11_0_81c610783c35b073
  PORT MAP (
    clk => clk,
    ce => ce,
    sinit => sinit,
    load => load,
    l => l,
    q => q
  );
-- synthesis translate_on

END cntr_11_0_81c610783c35b073_a;
--------------------------------------------------------------------------------
--    This file is owned and controlled by Xilinx and must be used solely     --
--    for design, simulation, implementation and creation of design files     --
--    limited to Xilinx devices or technologies. Use with non-Xilinx          --
--    devices or technologies is expressly prohibited and immediately         --
--    terminates your license.                                                --
--                                                                            --
--    XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" SOLELY    --
--    FOR USE IN DEVELOPING PROGRAMS AND SOLUTIONS FOR XILINX DEVICES.  BY    --
--    PROVIDING THIS DESIGN, CODE, OR INFORMATION AS ONE POSSIBLE             --
--    IMPLEMENTATION OF THIS FEATURE, APPLICATION OR STANDARD, XILINX IS      --
--    MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION IS FREE FROM ANY      --
--    CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE FOR OBTAINING ANY       --
--    RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.  XILINX EXPRESSLY       --
--    DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO THE ADEQUACY OF THE   --
--    IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OR          --
--    REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE FROM CLAIMS OF         --
--    INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A   --
--    PARTICULAR PURPOSE.                                                     --
--                                                                            --
--    Xilinx products are not intended for use in life support appliances,    --
--    devices, or systems.  Use in such applications are expressly            --
--    prohibited.                                                             --
--                                                                            --
--    (c) Copyright 1995-2014 Xilinx, Inc.                                    --
--    All rights reserved.                                                    --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
-- You must compile the wrapper file bmg_72_def2631b070914b0.vhd when simulating
-- the core, bmg_72_def2631b070914b0. When compiling the wrapper file, be sure to
-- reference the XilinxCoreLib VHDL simulation library. For detailed
-- instructions, please refer to the "CORE Generator Help".

-- The synthesis directives "translate_off/translate_on" specified
-- below are supported by Xilinx, Mentor Graphics and Synplicity
-- synthesis tools. Ensure they are correct for your synthesis tool(s).

LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
-- synthesis translate_off
LIBRARY XilinxCoreLib;
-- synthesis translate_on
ENTITY bmg_72_def2631b070914b0 IS
  PORT (
    clka : IN STD_LOGIC;
    ena : IN STD_LOGIC;
    addra : IN STD_LOGIC_VECTOR(2 DOWNTO 0);
    douta : OUT STD_LOGIC_VECTOR(17 DOWNTO 0)
  );
END bmg_72_def2631b070914b0;

ARCHITECTURE bmg_72_def2631b070914b0_a OF bmg_72_def2631b070914b0 IS
-- synthesis translate_off
COMPONENT wrapped_bmg_72_def2631b070914b0
  PORT (
    clka : IN STD_LOGIC;
    ena : IN STD_LOGIC;
    addra : IN STD_LOGIC_VECTOR(2 DOWNTO 0);
    douta : OUT STD_LOGIC_VECTOR(17 DOWNTO 0)
  );
END COMPONENT;

-- Configuration specification
  FOR ALL : wrapped_bmg_72_def2631b070914b0 USE ENTITY XilinxCoreLib.blk_mem_gen_v7_2(behavioral)
    GENERIC MAP (
      c_addra_width => 3,
      c_addrb_width => 3,
      c_algorithm => 1,
      c_axi_id_width => 4,
      c_axi_slave_type => 0,
      c_axi_type => 1,
      c_byte_size => 9,
      c_common_clk => 0,
      c_default_data => "0",
      c_disable_warn_bhv_coll => 0,
      c_disable_warn_bhv_range => 0,
      c_enable_32bit_address => 0,
      c_family => "virtex5",
      c_has_axi_id => 0,
      c_has_ena => 1,
      c_has_enb => 0,
      c_has_injecterr => 0,
      c_has_mem_output_regs_a => 1,
      c_has_mem_output_regs_b => 0,
      c_has_mux_output_regs_a => 0,
      c_has_mux_output_regs_b => 0,
      c_has_regcea => 0,
      c_has_regceb => 0,
      c_has_rsta => 0,
      c_has_rstb => 0,
      c_has_softecc_input_regs_a => 0,
      c_has_softecc_output_regs_b => 0,
      c_init_file_name => "bmg_72_def2631b070914b0.mif",
      c_inita_val => "0",
      c_initb_val => "0",
      c_interface_type => 0,
      c_load_init_file => 1,
      c_mem_type => 3,
      c_mux_pipeline_stages => 0,
      c_prim_type => 1,
      c_read_depth_a => 8,
      c_read_depth_b => 8,
      c_read_width_a => 18,
      c_read_width_b => 18,
      c_rst_priority_a => "CE",
      c_rst_priority_b => "CE",
      c_rst_type => "SYNC",
      c_rstram_a => 0,
      c_rstram_b => 0,
      c_sim_collision_check => "ALL",
      c_use_byte_wea => 0,
      c_use_byte_web => 0,
      c_use_default_data => 0,
      c_use_ecc => 0,
      c_use_softecc => 0,
      c_wea_width => 1,
      c_web_width => 1,
      c_write_depth_a => 8,
      c_write_depth_b => 8,
      c_write_mode_a => "WRITE_FIRST",
      c_write_mode_b => "WRITE_FIRST",
      c_write_width_a => 18,
      c_write_width_b => 18,
      c_xdevicefamily => "virtex5"
    );
-- synthesis translate_on
BEGIN
-- synthesis translate_off
U0 : wrapped_bmg_72_def2631b070914b0
  PORT MAP (
    clka => clka,
    ena => ena,
    addra => addra,
    douta => douta
  );
-- synthesis translate_on

END bmg_72_def2631b070914b0_a;
--------------------------------------------------------------------------------
--    This file is owned and controlled by Xilinx and must be used solely     --
--    for design, simulation, implementation and creation of design files     --
--    limited to Xilinx devices or technologies. Use with non-Xilinx          --
--    devices or technologies is expressly prohibited and immediately         --
--    terminates your license.                                                --
--                                                                            --
--    XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" SOLELY    --
--    FOR USE IN DEVELOPING PROGRAMS AND SOLUTIONS FOR XILINX DEVICES.  BY    --
--    PROVIDING THIS DESIGN, CODE, OR INFORMATION AS ONE POSSIBLE             --
--    IMPLEMENTATION OF THIS FEATURE, APPLICATION OR STANDARD, XILINX IS      --
--    MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION IS FREE FROM ANY      --
--    CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE FOR OBTAINING ANY       --
--    RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.  XILINX EXPRESSLY       --
--    DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO THE ADEQUACY OF THE   --
--    IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OR          --
--    REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE FROM CLAIMS OF         --
--    INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A   --
--    PARTICULAR PURPOSE.                                                     --
--                                                                            --
--    Xilinx products are not intended for use in life support appliances,    --
--    devices, or systems.  Use in such applications are expressly            --
--    prohibited.                                                             --
--                                                                            --
--    (c) Copyright 1995-2014 Xilinx, Inc.                                    --
--    All rights reserved.                                                    --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
-- You must compile the wrapper file addsb_11_0_6791698c7be255e7.vhd when simulating
-- the core, addsb_11_0_6791698c7be255e7. When compiling the wrapper file, be sure to
-- reference the XilinxCoreLib VHDL simulation library. For detailed
-- instructions, please refer to the "CORE Generator Help".

-- The synthesis directives "translate_off/translate_on" specified
-- below are supported by Xilinx, Mentor Graphics and Synplicity
-- synthesis tools. Ensure they are correct for your synthesis tool(s).

LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
-- synthesis translate_off
LIBRARY XilinxCoreLib;
-- synthesis translate_on
ENTITY addsb_11_0_6791698c7be255e7 IS
  PORT (
    a : IN STD_LOGIC_VECTOR(49 DOWNTO 0);
    b : IN STD_LOGIC_VECTOR(49 DOWNTO 0);
    clk : IN STD_LOGIC;
    ce : IN STD_LOGIC;
    s : OUT STD_LOGIC_VECTOR(49 DOWNTO 0)
  );
END addsb_11_0_6791698c7be255e7;

ARCHITECTURE addsb_11_0_6791698c7be255e7_a OF addsb_11_0_6791698c7be255e7 IS
-- synthesis translate_off
COMPONENT wrapped_addsb_11_0_6791698c7be255e7
  PORT (
    a : IN STD_LOGIC_VECTOR(49 DOWNTO 0);
    b : IN STD_LOGIC_VECTOR(49 DOWNTO 0);
    clk : IN STD_LOGIC;
    ce : IN STD_LOGIC;
    s : OUT STD_LOGIC_VECTOR(49 DOWNTO 0)
  );
END COMPONENT;

-- Configuration specification
  FOR ALL : wrapped_addsb_11_0_6791698c7be255e7 USE ENTITY XilinxCoreLib.c_addsub_v11_0(behavioral)
    GENERIC MAP (
      c_a_type => 0,
      c_a_width => 50,
      c_add_mode => 0,
      c_ainit_val => "0",
      c_b_constant => 0,
      c_b_type => 0,
      c_b_value => "00000000000000000000000000000000000000000000000000",
      c_b_width => 50,
      c_borrow_low => 1,
      c_bypass_low => 0,
      c_ce_overrides_bypass => 1,
      c_ce_overrides_sclr => 0,
      c_has_bypass => 0,
      c_has_c_in => 0,
      c_has_c_out => 0,
      c_has_ce => 1,
      c_has_sclr => 0,
      c_has_sinit => 0,
      c_has_sset => 0,
      c_implementation => 0,
      c_latency => 1,
      c_out_width => 50,
      c_sclr_overrides_sset => 1,
      c_sinit_val => "0",
      c_verbosity => 0,
      c_xdevicefamily => "virtex5"
    );
-- synthesis translate_on
BEGIN
-- synthesis translate_off
U0 : wrapped_addsb_11_0_6791698c7be255e7
  PORT MAP (
    a => a,
    b => b,
    clk => clk,
    ce => ce,
    s => s
  );
-- synthesis translate_on

END addsb_11_0_6791698c7be255e7_a;
--------------------------------------------------------------------------------
--    This file is owned and controlled by Xilinx and must be used solely     --
--    for design, simulation, implementation and creation of design files     --
--    limited to Xilinx devices or technologies. Use with non-Xilinx          --
--    devices or technologies is expressly prohibited and immediately         --
--    terminates your license.                                                --
--                                                                            --
--    XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" SOLELY    --
--    FOR USE IN DEVELOPING PROGRAMS AND SOLUTIONS FOR XILINX DEVICES.  BY    --
--    PROVIDING THIS DESIGN, CODE, OR INFORMATION AS ONE POSSIBLE             --
--    IMPLEMENTATION OF THIS FEATURE, APPLICATION OR STANDARD, XILINX IS      --
--    MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION IS FREE FROM ANY      --
--    CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE FOR OBTAINING ANY       --
--    RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.  XILINX EXPRESSLY       --
--    DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO THE ADEQUACY OF THE   --
--    IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OR          --
--    REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE FROM CLAIMS OF         --
--    INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A   --
--    PARTICULAR PURPOSE.                                                     --
--                                                                            --
--    Xilinx products are not intended for use in life support appliances,    --
--    devices, or systems.  Use in such applications are expressly            --
--    prohibited.                                                             --
--                                                                            --
--    (c) Copyright 1995-2014 Xilinx, Inc.                                    --
--    All rights reserved.                                                    --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
-- You must compile the wrapper file bmg_72_f55ad1fbb330c587.vhd when simulating
-- the core, bmg_72_f55ad1fbb330c587. When compiling the wrapper file, be sure to
-- reference the XilinxCoreLib VHDL simulation library. For detailed
-- instructions, please refer to the "CORE Generator Help".

-- The synthesis directives "translate_off/translate_on" specified
-- below are supported by Xilinx, Mentor Graphics and Synplicity
-- synthesis tools. Ensure they are correct for your synthesis tool(s).

LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
-- synthesis translate_off
LIBRARY XilinxCoreLib;
-- synthesis translate_on
ENTITY bmg_72_f55ad1fbb330c587 IS
  PORT (
    clka : IN STD_LOGIC;
    ena : IN STD_LOGIC;
    addra : IN STD_LOGIC_VECTOR(6 DOWNTO 0);
    douta : OUT STD_LOGIC_VECTOR(17 DOWNTO 0)
  );
END bmg_72_f55ad1fbb330c587;

ARCHITECTURE bmg_72_f55ad1fbb330c587_a OF bmg_72_f55ad1fbb330c587 IS
-- synthesis translate_off
COMPONENT wrapped_bmg_72_f55ad1fbb330c587
  PORT (
    clka : IN STD_LOGIC;
    ena : IN STD_LOGIC;
    addra : IN STD_LOGIC_VECTOR(6 DOWNTO 0);
    douta : OUT STD_LOGIC_VECTOR(17 DOWNTO 0)
  );
END COMPONENT;

-- Configuration specification
  FOR ALL : wrapped_bmg_72_f55ad1fbb330c587 USE ENTITY XilinxCoreLib.blk_mem_gen_v7_2(behavioral)
    GENERIC MAP (
      c_addra_width => 7,
      c_addrb_width => 7,
      c_algorithm => 1,
      c_axi_id_width => 4,
      c_axi_slave_type => 0,
      c_axi_type => 1,
      c_byte_size => 9,
      c_common_clk => 0,
      c_default_data => "0",
      c_disable_warn_bhv_coll => 0,
      c_disable_warn_bhv_range => 0,
      c_enable_32bit_address => 0,
      c_family => "virtex5",
      c_has_axi_id => 0,
      c_has_ena => 1,
      c_has_enb => 0,
      c_has_injecterr => 0,
      c_has_mem_output_regs_a => 1,
      c_has_mem_output_regs_b => 0,
      c_has_mux_output_regs_a => 0,
      c_has_mux_output_regs_b => 0,
      c_has_regcea => 0,
      c_has_regceb => 0,
      c_has_rsta => 0,
      c_has_rstb => 0,
      c_has_softecc_input_regs_a => 0,
      c_has_softecc_output_regs_b => 0,
      c_init_file_name => "bmg_72_f55ad1fbb330c587.mif",
      c_inita_val => "0",
      c_initb_val => "0",
      c_interface_type => 0,
      c_load_init_file => 1,
      c_mem_type => 3,
      c_mux_pipeline_stages => 0,
      c_prim_type => 1,
      c_read_depth_a => 128,
      c_read_depth_b => 128,
      c_read_width_a => 18,
      c_read_width_b => 18,
      c_rst_priority_a => "CE",
      c_rst_priority_b => "CE",
      c_rst_type => "SYNC",
      c_rstram_a => 0,
      c_rstram_b => 0,
      c_sim_collision_check => "ALL",
      c_use_byte_wea => 0,
      c_use_byte_web => 0,
      c_use_default_data => 0,
      c_use_ecc => 0,
      c_use_softecc => 0,
      c_wea_width => 1,
      c_web_width => 1,
      c_write_depth_a => 128,
      c_write_depth_b => 128,
      c_write_mode_a => "WRITE_FIRST",
      c_write_mode_b => "WRITE_FIRST",
      c_write_width_a => 18,
      c_write_width_b => 18,
      c_xdevicefamily => "virtex5"
    );
-- synthesis translate_on
BEGIN
-- synthesis translate_off
U0 : wrapped_bmg_72_f55ad1fbb330c587
  PORT MAP (
    clka => clka,
    ena => ena,
    addra => addra,
    douta => douta
  );
-- synthesis translate_on

END bmg_72_f55ad1fbb330c587_a;
--------------------------------------------------------------------------------
--    This file is owned and controlled by Xilinx and must be used solely     --
--    for design, simulation, implementation and creation of design files     --
--    limited to Xilinx devices or technologies. Use with non-Xilinx          --
--    devices or technologies is expressly prohibited and immediately         --
--    terminates your license.                                                --
--                                                                            --
--    XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" SOLELY    --
--    FOR USE IN DEVELOPING PROGRAMS AND SOLUTIONS FOR XILINX DEVICES.  BY    --
--    PROVIDING THIS DESIGN, CODE, OR INFORMATION AS ONE POSSIBLE             --
--    IMPLEMENTATION OF THIS FEATURE, APPLICATION OR STANDARD, XILINX IS      --
--    MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION IS FREE FROM ANY      --
--    CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE FOR OBTAINING ANY       --
--    RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.  XILINX EXPRESSLY       --
--    DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO THE ADEQUACY OF THE   --
--    IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OR          --
--    REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE FROM CLAIMS OF         --
--    INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A   --
--    PARTICULAR PURPOSE.                                                     --
--                                                                            --
--    Xilinx products are not intended for use in life support appliances,    --
--    devices, or systems.  Use in such applications are expressly            --
--    prohibited.                                                             --
--                                                                            --
--    (c) Copyright 1995-2014 Xilinx, Inc.                                    --
--    All rights reserved.                                                    --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
-- You must compile the wrapper file bmg_72_1853928182002eb1.vhd when simulating
-- the core, bmg_72_1853928182002eb1. When compiling the wrapper file, be sure to
-- reference the XilinxCoreLib VHDL simulation library. For detailed
-- instructions, please refer to the "CORE Generator Help".

-- The synthesis directives "translate_off/translate_on" specified
-- below are supported by Xilinx, Mentor Graphics and Synplicity
-- synthesis tools. Ensure they are correct for your synthesis tool(s).

LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
-- synthesis translate_off
LIBRARY XilinxCoreLib;
-- synthesis translate_on
ENTITY bmg_72_1853928182002eb1 IS
  PORT (
    clka : IN STD_LOGIC;
    ena : IN STD_LOGIC;
    wea : IN STD_LOGIC_VECTOR(0 DOWNTO 0);
    addra : IN STD_LOGIC_VECTOR(5 DOWNTO 0);
    dina : IN STD_LOGIC_VECTOR(35 DOWNTO 0);
    douta : OUT STD_LOGIC_VECTOR(35 DOWNTO 0)
  );
END bmg_72_1853928182002eb1;

ARCHITECTURE bmg_72_1853928182002eb1_a OF bmg_72_1853928182002eb1 IS
-- synthesis translate_off
COMPONENT wrapped_bmg_72_1853928182002eb1
  PORT (
    clka : IN STD_LOGIC;
    ena : IN STD_LOGIC;
    wea : IN STD_LOGIC_VECTOR(0 DOWNTO 0);
    addra : IN STD_LOGIC_VECTOR(5 DOWNTO 0);
    dina : IN STD_LOGIC_VECTOR(35 DOWNTO 0);
    douta : OUT STD_LOGIC_VECTOR(35 DOWNTO 0)
  );
END COMPONENT;

-- Configuration specification
  FOR ALL : wrapped_bmg_72_1853928182002eb1 USE ENTITY XilinxCoreLib.blk_mem_gen_v7_2(behavioral)
    GENERIC MAP (
      c_addra_width => 6,
      c_addrb_width => 6,
      c_algorithm => 1,
      c_axi_id_width => 4,
      c_axi_slave_type => 0,
      c_axi_type => 1,
      c_byte_size => 9,
      c_common_clk => 0,
      c_default_data => "0",
      c_disable_warn_bhv_coll => 0,
      c_disable_warn_bhv_range => 0,
      c_enable_32bit_address => 0,
      c_family => "virtex5",
      c_has_axi_id => 0,
      c_has_ena => 1,
      c_has_enb => 0,
      c_has_injecterr => 0,
      c_has_mem_output_regs_a => 1,
      c_has_mem_output_regs_b => 0,
      c_has_mux_output_regs_a => 0,
      c_has_mux_output_regs_b => 0,
      c_has_regcea => 0,
      c_has_regceb => 0,
      c_has_rsta => 0,
      c_has_rstb => 0,
      c_has_softecc_input_regs_a => 0,
      c_has_softecc_output_regs_b => 0,
      c_init_file_name => "bmg_72_1853928182002eb1.mif",
      c_inita_val => "0",
      c_initb_val => "0",
      c_interface_type => 0,
      c_load_init_file => 1,
      c_mem_type => 0,
      c_mux_pipeline_stages => 0,
      c_prim_type => 1,
      c_read_depth_a => 64,
      c_read_depth_b => 64,
      c_read_width_a => 36,
      c_read_width_b => 36,
      c_rst_priority_a => "CE",
      c_rst_priority_b => "CE",
      c_rst_type => "SYNC",
      c_rstram_a => 0,
      c_rstram_b => 0,
      c_sim_collision_check => "ALL",
      c_use_byte_wea => 0,
      c_use_byte_web => 0,
      c_use_default_data => 0,
      c_use_ecc => 0,
      c_use_softecc => 0,
      c_wea_width => 1,
      c_web_width => 1,
      c_write_depth_a => 64,
      c_write_depth_b => 64,
      c_write_mode_a => "READ_FIRST",
      c_write_mode_b => "WRITE_FIRST",
      c_write_width_a => 36,
      c_write_width_b => 36,
      c_xdevicefamily => "virtex5"
    );
-- synthesis translate_on
BEGIN
-- synthesis translate_off
U0 : wrapped_bmg_72_1853928182002eb1
  PORT MAP (
    clka => clka,
    ena => ena,
    wea => wea,
    addra => addra,
    dina => dina,
    douta => douta
  );
-- synthesis translate_on

END bmg_72_1853928182002eb1_a;
--------------------------------------------------------------------------------
--    This file is owned and controlled by Xilinx and must be used solely     --
--    for design, simulation, implementation and creation of design files     --
--    limited to Xilinx devices or technologies. Use with non-Xilinx          --
--    devices or technologies is expressly prohibited and immediately         --
--    terminates your license.                                                --
--                                                                            --
--    XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" SOLELY    --
--    FOR USE IN DEVELOPING PROGRAMS AND SOLUTIONS FOR XILINX DEVICES.  BY    --
--    PROVIDING THIS DESIGN, CODE, OR INFORMATION AS ONE POSSIBLE             --
--    IMPLEMENTATION OF THIS FEATURE, APPLICATION OR STANDARD, XILINX IS      --
--    MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION IS FREE FROM ANY      --
--    CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE FOR OBTAINING ANY       --
--    RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.  XILINX EXPRESSLY       --
--    DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO THE ADEQUACY OF THE   --
--    IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OR          --
--    REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE FROM CLAIMS OF         --
--    INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A   --
--    PARTICULAR PURPOSE.                                                     --
--                                                                            --
--    Xilinx products are not intended for use in life support appliances,    --
--    devices, or systems.  Use in such applications are expressly            --
--    prohibited.                                                             --
--                                                                            --
--    (c) Copyright 1995-2014 Xilinx, Inc.                                    --
--    All rights reserved.                                                    --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
-- You must compile the wrapper file bmg_72_dc97d51467d52108.vhd when simulating
-- the core, bmg_72_dc97d51467d52108. When compiling the wrapper file, be sure to
-- reference the XilinxCoreLib VHDL simulation library. For detailed
-- instructions, please refer to the "CORE Generator Help".

-- The synthesis directives "translate_off/translate_on" specified
-- below are supported by Xilinx, Mentor Graphics and Synplicity
-- synthesis tools. Ensure they are correct for your synthesis tool(s).

LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
-- synthesis translate_off
LIBRARY XilinxCoreLib;
-- synthesis translate_on
ENTITY bmg_72_dc97d51467d52108 IS
  PORT (
    clka : IN STD_LOGIC;
    ena : IN STD_LOGIC;
    addra : IN STD_LOGIC_VECTOR(9 DOWNTO 0);
    douta : OUT STD_LOGIC_VECTOR(17 DOWNTO 0)
  );
END bmg_72_dc97d51467d52108;

ARCHITECTURE bmg_72_dc97d51467d52108_a OF bmg_72_dc97d51467d52108 IS
-- synthesis translate_off
COMPONENT wrapped_bmg_72_dc97d51467d52108
  PORT (
    clka : IN STD_LOGIC;
    ena : IN STD_LOGIC;
    addra : IN STD_LOGIC_VECTOR(9 DOWNTO 0);
    douta : OUT STD_LOGIC_VECTOR(17 DOWNTO 0)
  );
END COMPONENT;

-- Configuration specification
  FOR ALL : wrapped_bmg_72_dc97d51467d52108 USE ENTITY XilinxCoreLib.blk_mem_gen_v7_2(behavioral)
    GENERIC MAP (
      c_addra_width => 10,
      c_addrb_width => 10,
      c_algorithm => 1,
      c_axi_id_width => 4,
      c_axi_slave_type => 0,
      c_axi_type => 1,
      c_byte_size => 9,
      c_common_clk => 0,
      c_default_data => "0",
      c_disable_warn_bhv_coll => 0,
      c_disable_warn_bhv_range => 0,
      c_enable_32bit_address => 0,
      c_family => "virtex5",
      c_has_axi_id => 0,
      c_has_ena => 1,
      c_has_enb => 0,
      c_has_injecterr => 0,
      c_has_mem_output_regs_a => 1,
      c_has_mem_output_regs_b => 0,
      c_has_mux_output_regs_a => 0,
      c_has_mux_output_regs_b => 0,
      c_has_regcea => 0,
      c_has_regceb => 0,
      c_has_rsta => 0,
      c_has_rstb => 0,
      c_has_softecc_input_regs_a => 0,
      c_has_softecc_output_regs_b => 0,
      c_init_file_name => "bmg_72_dc97d51467d52108.mif",
      c_inita_val => "0",
      c_initb_val => "0",
      c_interface_type => 0,
      c_load_init_file => 1,
      c_mem_type => 3,
      c_mux_pipeline_stages => 0,
      c_prim_type => 1,
      c_read_depth_a => 1024,
      c_read_depth_b => 1024,
      c_read_width_a => 18,
      c_read_width_b => 18,
      c_rst_priority_a => "CE",
      c_rst_priority_b => "CE",
      c_rst_type => "SYNC",
      c_rstram_a => 0,
      c_rstram_b => 0,
      c_sim_collision_check => "ALL",
      c_use_byte_wea => 0,
      c_use_byte_web => 0,
      c_use_default_data => 0,
      c_use_ecc => 0,
      c_use_softecc => 0,
      c_wea_width => 1,
      c_web_width => 1,
      c_write_depth_a => 1024,
      c_write_depth_b => 1024,
      c_write_mode_a => "WRITE_FIRST",
      c_write_mode_b => "WRITE_FIRST",
      c_write_width_a => 18,
      c_write_width_b => 18,
      c_xdevicefamily => "virtex5"
    );
-- synthesis translate_on
BEGIN
-- synthesis translate_off
U0 : wrapped_bmg_72_dc97d51467d52108
  PORT MAP (
    clka => clka,
    ena => ena,
    addra => addra,
    douta => douta
  );
-- synthesis translate_on

END bmg_72_dc97d51467d52108_a;
--------------------------------------------------------------------------------
--    This file is owned and controlled by Xilinx and must be used solely     --
--    for design, simulation, implementation and creation of design files     --
--    limited to Xilinx devices or technologies. Use with non-Xilinx          --
--    devices or technologies is expressly prohibited and immediately         --
--    terminates your license.                                                --
--                                                                            --
--    XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" SOLELY    --
--    FOR USE IN DEVELOPING PROGRAMS AND SOLUTIONS FOR XILINX DEVICES.  BY    --
--    PROVIDING THIS DESIGN, CODE, OR INFORMATION AS ONE POSSIBLE             --
--    IMPLEMENTATION OF THIS FEATURE, APPLICATION OR STANDARD, XILINX IS      --
--    MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION IS FREE FROM ANY      --
--    CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE FOR OBTAINING ANY       --
--    RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.  XILINX EXPRESSLY       --
--    DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO THE ADEQUACY OF THE   --
--    IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OR          --
--    REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE FROM CLAIMS OF         --
--    INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A   --
--    PARTICULAR PURPOSE.                                                     --
--                                                                            --
--    Xilinx products are not intended for use in life support appliances,    --
--    devices, or systems.  Use in such applications are expressly            --
--    prohibited.                                                             --
--                                                                            --
--    (c) Copyright 1995-2014 Xilinx, Inc.                                    --
--    All rights reserved.                                                    --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
-- You must compile the wrapper file bmg_72_82d7e698d6cd5771.vhd when simulating
-- the core, bmg_72_82d7e698d6cd5771. When compiling the wrapper file, be sure to
-- reference the XilinxCoreLib VHDL simulation library. For detailed
-- instructions, please refer to the "CORE Generator Help".

-- The synthesis directives "translate_off/translate_on" specified
-- below are supported by Xilinx, Mentor Graphics and Synplicity
-- synthesis tools. Ensure they are correct for your synthesis tool(s).

LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
-- synthesis translate_off
LIBRARY XilinxCoreLib;
-- synthesis translate_on
ENTITY bmg_72_82d7e698d6cd5771 IS
  PORT (
    clka : IN STD_LOGIC;
    ena : IN STD_LOGIC;
    addra : IN STD_LOGIC_VECTOR(2 DOWNTO 0);
    douta : OUT STD_LOGIC_VECTOR(17 DOWNTO 0)
  );
END bmg_72_82d7e698d6cd5771;

ARCHITECTURE bmg_72_82d7e698d6cd5771_a OF bmg_72_82d7e698d6cd5771 IS
-- synthesis translate_off
COMPONENT wrapped_bmg_72_82d7e698d6cd5771
  PORT (
    clka : IN STD_LOGIC;
    ena : IN STD_LOGIC;
    addra : IN STD_LOGIC_VECTOR(2 DOWNTO 0);
    douta : OUT STD_LOGIC_VECTOR(17 DOWNTO 0)
  );
END COMPONENT;

-- Configuration specification
  FOR ALL : wrapped_bmg_72_82d7e698d6cd5771 USE ENTITY XilinxCoreLib.blk_mem_gen_v7_2(behavioral)
    GENERIC MAP (
      c_addra_width => 3,
      c_addrb_width => 3,
      c_algorithm => 1,
      c_axi_id_width => 4,
      c_axi_slave_type => 0,
      c_axi_type => 1,
      c_byte_size => 9,
      c_common_clk => 0,
      c_default_data => "0",
      c_disable_warn_bhv_coll => 0,
      c_disable_warn_bhv_range => 0,
      c_enable_32bit_address => 0,
      c_family => "virtex5",
      c_has_axi_id => 0,
      c_has_ena => 1,
      c_has_enb => 0,
      c_has_injecterr => 0,
      c_has_mem_output_regs_a => 1,
      c_has_mem_output_regs_b => 0,
      c_has_mux_output_regs_a => 0,
      c_has_mux_output_regs_b => 0,
      c_has_regcea => 0,
      c_has_regceb => 0,
      c_has_rsta => 0,
      c_has_rstb => 0,
      c_has_softecc_input_regs_a => 0,
      c_has_softecc_output_regs_b => 0,
      c_init_file_name => "bmg_72_82d7e698d6cd5771.mif",
      c_inita_val => "0",
      c_initb_val => "0",
      c_interface_type => 0,
      c_load_init_file => 1,
      c_mem_type => 3,
      c_mux_pipeline_stages => 0,
      c_prim_type => 1,
      c_read_depth_a => 8,
      c_read_depth_b => 8,
      c_read_width_a => 18,
      c_read_width_b => 18,
      c_rst_priority_a => "CE",
      c_rst_priority_b => "CE",
      c_rst_type => "SYNC",
      c_rstram_a => 0,
      c_rstram_b => 0,
      c_sim_collision_check => "ALL",
      c_use_byte_wea => 0,
      c_use_byte_web => 0,
      c_use_default_data => 0,
      c_use_ecc => 0,
      c_use_softecc => 0,
      c_wea_width => 1,
      c_web_width => 1,
      c_write_depth_a => 8,
      c_write_depth_b => 8,
      c_write_mode_a => "WRITE_FIRST",
      c_write_mode_b => "WRITE_FIRST",
      c_write_width_a => 18,
      c_write_width_b => 18,
      c_xdevicefamily => "virtex5"
    );
-- synthesis translate_on
BEGIN
-- synthesis translate_off
U0 : wrapped_bmg_72_82d7e698d6cd5771
  PORT MAP (
    clka => clka,
    ena => ena,
    addra => addra,
    douta => douta
  );
-- synthesis translate_on

END bmg_72_82d7e698d6cd5771_a;
--------------------------------------------------------------------------------
--    This file is owned and controlled by Xilinx and must be used solely     --
--    for design, simulation, implementation and creation of design files     --
--    limited to Xilinx devices or technologies. Use with non-Xilinx          --
--    devices or technologies is expressly prohibited and immediately         --
--    terminates your license.                                                --
--                                                                            --
--    XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" SOLELY    --
--    FOR USE IN DEVELOPING PROGRAMS AND SOLUTIONS FOR XILINX DEVICES.  BY    --
--    PROVIDING THIS DESIGN, CODE, OR INFORMATION AS ONE POSSIBLE             --
--    IMPLEMENTATION OF THIS FEATURE, APPLICATION OR STANDARD, XILINX IS      --
--    MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION IS FREE FROM ANY      --
--    CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE FOR OBTAINING ANY       --
--    RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.  XILINX EXPRESSLY       --
--    DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO THE ADEQUACY OF THE   --
--    IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OR          --
--    REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE FROM CLAIMS OF         --
--    INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A   --
--    PARTICULAR PURPOSE.                                                     --
--                                                                            --
--    Xilinx products are not intended for use in life support appliances,    --
--    devices, or systems.  Use in such applications are expressly            --
--    prohibited.                                                             --
--                                                                            --
--    (c) Copyright 1995-2014 Xilinx, Inc.                                    --
--    All rights reserved.                                                    --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
-- You must compile the wrapper file cntr_11_0_514048f9c72a30b1.vhd when simulating
-- the core, cntr_11_0_514048f9c72a30b1. When compiling the wrapper file, be sure to
-- reference the XilinxCoreLib VHDL simulation library. For detailed
-- instructions, please refer to the "CORE Generator Help".

-- The synthesis directives "translate_off/translate_on" specified
-- below are supported by Xilinx, Mentor Graphics and Synplicity
-- synthesis tools. Ensure they are correct for your synthesis tool(s).

LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
-- synthesis translate_off
LIBRARY XilinxCoreLib;
-- synthesis translate_on
ENTITY cntr_11_0_514048f9c72a30b1 IS
  PORT (
    clk : IN STD_LOGIC;
    ce : IN STD_LOGIC;
    sinit : IN STD_LOGIC;
    q : OUT STD_LOGIC_VECTOR(2 DOWNTO 0)
  );
END cntr_11_0_514048f9c72a30b1;

ARCHITECTURE cntr_11_0_514048f9c72a30b1_a OF cntr_11_0_514048f9c72a30b1 IS
-- synthesis translate_off
COMPONENT wrapped_cntr_11_0_514048f9c72a30b1
  PORT (
    clk : IN STD_LOGIC;
    ce : IN STD_LOGIC;
    sinit : IN STD_LOGIC;
    q : OUT STD_LOGIC_VECTOR(2 DOWNTO 0)
  );
END COMPONENT;

-- Configuration specification
  FOR ALL : wrapped_cntr_11_0_514048f9c72a30b1 USE ENTITY XilinxCoreLib.c_counter_binary_v11_0(behavioral)
    GENERIC MAP (
      c_ainit_val => "0",
      c_ce_overrides_sync => 0,
      c_count_by => "1",
      c_count_mode => 0,
      c_count_to => "1",
      c_fb_latency => 0,
      c_has_ce => 1,
      c_has_load => 0,
      c_has_sclr => 0,
      c_has_sinit => 1,
      c_has_sset => 0,
      c_has_thresh0 => 0,
      c_implementation => 0,
      c_latency => 1,
      c_load_low => 0,
      c_restrict_count => 0,
      c_sclr_overrides_sset => 1,
      c_sinit_val => "0",
      c_thresh0_value => "1",
      c_verbosity => 0,
      c_width => 3,
      c_xdevicefamily => "virtex5"
    );
-- synthesis translate_on
BEGIN
-- synthesis translate_off
U0 : wrapped_cntr_11_0_514048f9c72a30b1
  PORT MAP (
    clk => clk,
    ce => ce,
    sinit => sinit,
    q => q
  );
-- synthesis translate_on

END cntr_11_0_514048f9c72a30b1_a;
--------------------------------------------------------------------------------
--    This file is owned and controlled by Xilinx and must be used solely     --
--    for design, simulation, implementation and creation of design files     --
--    limited to Xilinx devices or technologies. Use with non-Xilinx          --
--    devices or technologies is expressly prohibited and immediately         --
--    terminates your license.                                                --
--                                                                            --
--    XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" SOLELY    --
--    FOR USE IN DEVELOPING PROGRAMS AND SOLUTIONS FOR XILINX DEVICES.  BY    --
--    PROVIDING THIS DESIGN, CODE, OR INFORMATION AS ONE POSSIBLE             --
--    IMPLEMENTATION OF THIS FEATURE, APPLICATION OR STANDARD, XILINX IS      --
--    MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION IS FREE FROM ANY      --
--    CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE FOR OBTAINING ANY       --
--    RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.  XILINX EXPRESSLY       --
--    DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO THE ADEQUACY OF THE   --
--    IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OR          --
--    REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE FROM CLAIMS OF         --
--    INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A   --
--    PARTICULAR PURPOSE.                                                     --
--                                                                            --
--    Xilinx products are not intended for use in life support appliances,    --
--    devices, or systems.  Use in such applications are expressly            --
--    prohibited.                                                             --
--                                                                            --
--    (c) Copyright 1995-2014 Xilinx, Inc.                                    --
--    All rights reserved.                                                    --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
-- You must compile the wrapper file cntr_11_0_467594213c284489.vhd when simulating
-- the core, cntr_11_0_467594213c284489. When compiling the wrapper file, be sure to
-- reference the XilinxCoreLib VHDL simulation library. For detailed
-- instructions, please refer to the "CORE Generator Help".

-- The synthesis directives "translate_off/translate_on" specified
-- below are supported by Xilinx, Mentor Graphics and Synplicity
-- synthesis tools. Ensure they are correct for your synthesis tool(s).

LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
-- synthesis translate_off
LIBRARY XilinxCoreLib;
-- synthesis translate_on
ENTITY cntr_11_0_467594213c284489 IS
  PORT (
    clk : IN STD_LOGIC;
    ce : IN STD_LOGIC;
    sinit : IN STD_LOGIC;
    q : OUT STD_LOGIC_VECTOR(9 DOWNTO 0)
  );
END cntr_11_0_467594213c284489;

ARCHITECTURE cntr_11_0_467594213c284489_a OF cntr_11_0_467594213c284489 IS
-- synthesis translate_off
COMPONENT wrapped_cntr_11_0_467594213c284489
  PORT (
    clk : IN STD_LOGIC;
    ce : IN STD_LOGIC;
    sinit : IN STD_LOGIC;
    q : OUT STD_LOGIC_VECTOR(9 DOWNTO 0)
  );
END COMPONENT;

-- Configuration specification
  FOR ALL : wrapped_cntr_11_0_467594213c284489 USE ENTITY XilinxCoreLib.c_counter_binary_v11_0(behavioral)
    GENERIC MAP (
      c_ainit_val => "0",
      c_ce_overrides_sync => 0,
      c_count_by => "1",
      c_count_mode => 0,
      c_count_to => "1",
      c_fb_latency => 0,
      c_has_ce => 1,
      c_has_load => 0,
      c_has_sclr => 0,
      c_has_sinit => 1,
      c_has_sset => 0,
      c_has_thresh0 => 0,
      c_implementation => 0,
      c_latency => 1,
      c_load_low => 0,
      c_restrict_count => 0,
      c_sclr_overrides_sset => 1,
      c_sinit_val => "0",
      c_thresh0_value => "1",
      c_verbosity => 0,
      c_width => 10,
      c_xdevicefamily => "virtex5"
    );
-- synthesis translate_on
BEGIN
-- synthesis translate_off
U0 : wrapped_cntr_11_0_467594213c284489
  PORT MAP (
    clk => clk,
    ce => ce,
    sinit => sinit,
    q => q
  );
-- synthesis translate_on

END cntr_11_0_467594213c284489_a;
--------------------------------------------------------------------------------
--    This file is owned and controlled by Xilinx and must be used solely     --
--    for design, simulation, implementation and creation of design files     --
--    limited to Xilinx devices or technologies. Use with non-Xilinx          --
--    devices or technologies is expressly prohibited and immediately         --
--    terminates your license.                                                --
--                                                                            --
--    XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" SOLELY    --
--    FOR USE IN DEVELOPING PROGRAMS AND SOLUTIONS FOR XILINX DEVICES.  BY    --
--    PROVIDING THIS DESIGN, CODE, OR INFORMATION AS ONE POSSIBLE             --
--    IMPLEMENTATION OF THIS FEATURE, APPLICATION OR STANDARD, XILINX IS      --
--    MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION IS FREE FROM ANY      --
--    CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE FOR OBTAINING ANY       --
--    RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.  XILINX EXPRESSLY       --
--    DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO THE ADEQUACY OF THE   --
--    IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OR          --
--    REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE FROM CLAIMS OF         --
--    INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A   --
--    PARTICULAR PURPOSE.                                                     --
--                                                                            --
--    Xilinx products are not intended for use in life support appliances,    --
--    devices, or systems.  Use in such applications are expressly            --
--    prohibited.                                                             --
--                                                                            --
--    (c) Copyright 1995-2014 Xilinx, Inc.                                    --
--    All rights reserved.                                                    --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
-- You must compile the wrapper file cntr_11_0_5c141fadd7b08b3b.vhd when simulating
-- the core, cntr_11_0_5c141fadd7b08b3b. When compiling the wrapper file, be sure to
-- reference the XilinxCoreLib VHDL simulation library. For detailed
-- instructions, please refer to the "CORE Generator Help".

-- The synthesis directives "translate_off/translate_on" specified
-- below are supported by Xilinx, Mentor Graphics and Synplicity
-- synthesis tools. Ensure they are correct for your synthesis tool(s).

LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
-- synthesis translate_off
LIBRARY XilinxCoreLib;
-- synthesis translate_on
ENTITY cntr_11_0_5c141fadd7b08b3b IS
  PORT (
    clk : IN STD_LOGIC;
    ce : IN STD_LOGIC;
    sinit : IN STD_LOGIC;
    q : OUT STD_LOGIC_VECTOR(16 DOWNTO 0)
  );
END cntr_11_0_5c141fadd7b08b3b;

ARCHITECTURE cntr_11_0_5c141fadd7b08b3b_a OF cntr_11_0_5c141fadd7b08b3b IS
-- synthesis translate_off
COMPONENT wrapped_cntr_11_0_5c141fadd7b08b3b
  PORT (
    clk : IN STD_LOGIC;
    ce : IN STD_LOGIC;
    sinit : IN STD_LOGIC;
    q : OUT STD_LOGIC_VECTOR(16 DOWNTO 0)
  );
END COMPONENT;

-- Configuration specification
  FOR ALL : wrapped_cntr_11_0_5c141fadd7b08b3b USE ENTITY XilinxCoreLib.c_counter_binary_v11_0(behavioral)
    GENERIC MAP (
      c_ainit_val => "0",
      c_ce_overrides_sync => 0,
      c_count_by => "1",
      c_count_mode => 0,
      c_count_to => "1",
      c_fb_latency => 0,
      c_has_ce => 1,
      c_has_load => 0,
      c_has_sclr => 0,
      c_has_sinit => 1,
      c_has_sset => 0,
      c_has_thresh0 => 0,
      c_implementation => 0,
      c_latency => 1,
      c_load_low => 0,
      c_restrict_count => 0,
      c_sclr_overrides_sset => 1,
      c_sinit_val => "0",
      c_thresh0_value => "1",
      c_verbosity => 0,
      c_width => 17,
      c_xdevicefamily => "virtex5"
    );
-- synthesis translate_on
BEGIN
-- synthesis translate_off
U0 : wrapped_cntr_11_0_5c141fadd7b08b3b
  PORT MAP (
    clk => clk,
    ce => ce,
    sinit => sinit,
    q => q
  );
-- synthesis translate_on

END cntr_11_0_5c141fadd7b08b3b_a;
--------------------------------------------------------------------------------
--    This file is owned and controlled by Xilinx and must be used solely     --
--    for design, simulation, implementation and creation of design files     --
--    limited to Xilinx devices or technologies. Use with non-Xilinx          --
--    devices or technologies is expressly prohibited and immediately         --
--    terminates your license.                                                --
--                                                                            --
--    XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" SOLELY    --
--    FOR USE IN DEVELOPING PROGRAMS AND SOLUTIONS FOR XILINX DEVICES.  BY    --
--    PROVIDING THIS DESIGN, CODE, OR INFORMATION AS ONE POSSIBLE             --
--    IMPLEMENTATION OF THIS FEATURE, APPLICATION OR STANDARD, XILINX IS      --
--    MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION IS FREE FROM ANY      --
--    CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE FOR OBTAINING ANY       --
--    RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.  XILINX EXPRESSLY       --
--    DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO THE ADEQUACY OF THE   --
--    IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OR          --
--    REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE FROM CLAIMS OF         --
--    INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A   --
--    PARTICULAR PURPOSE.                                                     --
--                                                                            --
--    Xilinx products are not intended for use in life support appliances,    --
--    devices, or systems.  Use in such applications are expressly            --
--    prohibited.                                                             --
--                                                                            --
--    (c) Copyright 1995-2014 Xilinx, Inc.                                    --
--    All rights reserved.                                                    --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
-- You must compile the wrapper file bmg_72_321d886e2c47e239.vhd when simulating
-- the core, bmg_72_321d886e2c47e239. When compiling the wrapper file, be sure to
-- reference the XilinxCoreLib VHDL simulation library. For detailed
-- instructions, please refer to the "CORE Generator Help".

-- The synthesis directives "translate_off/translate_on" specified
-- below are supported by Xilinx, Mentor Graphics and Synplicity
-- synthesis tools. Ensure they are correct for your synthesis tool(s).

LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
-- synthesis translate_off
LIBRARY XilinxCoreLib;
-- synthesis translate_on
ENTITY bmg_72_321d886e2c47e239 IS
  PORT (
    clka : IN STD_LOGIC;
    ena : IN STD_LOGIC;
    addra : IN STD_LOGIC_VECTOR(9 DOWNTO 0);
    douta : OUT STD_LOGIC_VECTOR(17 DOWNTO 0)
  );
END bmg_72_321d886e2c47e239;

ARCHITECTURE bmg_72_321d886e2c47e239_a OF bmg_72_321d886e2c47e239 IS
-- synthesis translate_off
COMPONENT wrapped_bmg_72_321d886e2c47e239
  PORT (
    clka : IN STD_LOGIC;
    ena : IN STD_LOGIC;
    addra : IN STD_LOGIC_VECTOR(9 DOWNTO 0);
    douta : OUT STD_LOGIC_VECTOR(17 DOWNTO 0)
  );
END COMPONENT;

-- Configuration specification
  FOR ALL : wrapped_bmg_72_321d886e2c47e239 USE ENTITY XilinxCoreLib.blk_mem_gen_v7_2(behavioral)
    GENERIC MAP (
      c_addra_width => 10,
      c_addrb_width => 10,
      c_algorithm => 1,
      c_axi_id_width => 4,
      c_axi_slave_type => 0,
      c_axi_type => 1,
      c_byte_size => 9,
      c_common_clk => 0,
      c_default_data => "0",
      c_disable_warn_bhv_coll => 0,
      c_disable_warn_bhv_range => 0,
      c_enable_32bit_address => 0,
      c_family => "virtex5",
      c_has_axi_id => 0,
      c_has_ena => 1,
      c_has_enb => 0,
      c_has_injecterr => 0,
      c_has_mem_output_regs_a => 1,
      c_has_mem_output_regs_b => 0,
      c_has_mux_output_regs_a => 0,
      c_has_mux_output_regs_b => 0,
      c_has_regcea => 0,
      c_has_regceb => 0,
      c_has_rsta => 0,
      c_has_rstb => 0,
      c_has_softecc_input_regs_a => 0,
      c_has_softecc_output_regs_b => 0,
      c_init_file_name => "bmg_72_321d886e2c47e239.mif",
      c_inita_val => "0",
      c_initb_val => "0",
      c_interface_type => 0,
      c_load_init_file => 1,
      c_mem_type => 3,
      c_mux_pipeline_stages => 0,
      c_prim_type => 1,
      c_read_depth_a => 1024,
      c_read_depth_b => 1024,
      c_read_width_a => 18,
      c_read_width_b => 18,
      c_rst_priority_a => "CE",
      c_rst_priority_b => "CE",
      c_rst_type => "SYNC",
      c_rstram_a => 0,
      c_rstram_b => 0,
      c_sim_collision_check => "ALL",
      c_use_byte_wea => 0,
      c_use_byte_web => 0,
      c_use_default_data => 0,
      c_use_ecc => 0,
      c_use_softecc => 0,
      c_wea_width => 1,
      c_web_width => 1,
      c_write_depth_a => 1024,
      c_write_depth_b => 1024,
      c_write_mode_a => "WRITE_FIRST",
      c_write_mode_b => "WRITE_FIRST",
      c_write_width_a => 18,
      c_write_width_b => 18,
      c_xdevicefamily => "virtex5"
    );
-- synthesis translate_on
BEGIN
-- synthesis translate_off
U0 : wrapped_bmg_72_321d886e2c47e239
  PORT MAP (
    clka => clka,
    ena => ena,
    addra => addra,
    douta => douta
  );
-- synthesis translate_on

END bmg_72_321d886e2c47e239_a;
--------------------------------------------------------------------------------
--    This file is owned and controlled by Xilinx and must be used solely     --
--    for design, simulation, implementation and creation of design files     --
--    limited to Xilinx devices or technologies. Use with non-Xilinx          --
--    devices or technologies is expressly prohibited and immediately         --
--    terminates your license.                                                --
--                                                                            --
--    XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" SOLELY    --
--    FOR USE IN DEVELOPING PROGRAMS AND SOLUTIONS FOR XILINX DEVICES.  BY    --
--    PROVIDING THIS DESIGN, CODE, OR INFORMATION AS ONE POSSIBLE             --
--    IMPLEMENTATION OF THIS FEATURE, APPLICATION OR STANDARD, XILINX IS      --
--    MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION IS FREE FROM ANY      --
--    CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE FOR OBTAINING ANY       --
--    RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.  XILINX EXPRESSLY       --
--    DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO THE ADEQUACY OF THE   --
--    IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OR          --
--    REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE FROM CLAIMS OF         --
--    INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A   --
--    PARTICULAR PURPOSE.                                                     --
--                                                                            --
--    Xilinx products are not intended for use in life support appliances,    --
--    devices, or systems.  Use in such applications are expressly            --
--    prohibited.                                                             --
--                                                                            --
--    (c) Copyright 1995-2014 Xilinx, Inc.                                    --
--    All rights reserved.                                                    --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
-- You must compile the wrapper file addsb_11_0_a37a2abb0bb82ab2.vhd when simulating
-- the core, addsb_11_0_a37a2abb0bb82ab2. When compiling the wrapper file, be sure to
-- reference the XilinxCoreLib VHDL simulation library. For detailed
-- instructions, please refer to the "CORE Generator Help".

-- The synthesis directives "translate_off/translate_on" specified
-- below are supported by Xilinx, Mentor Graphics and Synplicity
-- synthesis tools. Ensure they are correct for your synthesis tool(s).

LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
-- synthesis translate_off
LIBRARY XilinxCoreLib;
-- synthesis translate_on
ENTITY addsb_11_0_a37a2abb0bb82ab2 IS
  PORT (
    a : IN STD_LOGIC_VECTOR(15 DOWNTO 0);
    b : IN STD_LOGIC_VECTOR(15 DOWNTO 0);
    clk : IN STD_LOGIC;
    ce : IN STD_LOGIC;
    s : OUT STD_LOGIC_VECTOR(15 DOWNTO 0)
  );
END addsb_11_0_a37a2abb0bb82ab2;

ARCHITECTURE addsb_11_0_a37a2abb0bb82ab2_a OF addsb_11_0_a37a2abb0bb82ab2 IS
-- synthesis translate_off
COMPONENT wrapped_addsb_11_0_a37a2abb0bb82ab2
  PORT (
    a : IN STD_LOGIC_VECTOR(15 DOWNTO 0);
    b : IN STD_LOGIC_VECTOR(15 DOWNTO 0);
    clk : IN STD_LOGIC;
    ce : IN STD_LOGIC;
    s : OUT STD_LOGIC_VECTOR(15 DOWNTO 0)
  );
END COMPONENT;

-- Configuration specification
  FOR ALL : wrapped_addsb_11_0_a37a2abb0bb82ab2 USE ENTITY XilinxCoreLib.c_addsub_v11_0(behavioral)
    GENERIC MAP (
      c_a_type => 1,
      c_a_width => 16,
      c_add_mode => 0,
      c_ainit_val => "0",
      c_b_constant => 0,
      c_b_type => 1,
      c_b_value => "0000000000000000",
      c_b_width => 16,
      c_borrow_low => 1,
      c_bypass_low => 0,
      c_ce_overrides_bypass => 1,
      c_ce_overrides_sclr => 0,
      c_has_bypass => 0,
      c_has_c_in => 0,
      c_has_c_out => 0,
      c_has_ce => 1,
      c_has_sclr => 0,
      c_has_sinit => 0,
      c_has_sset => 0,
      c_implementation => 1,
      c_latency => 1,
      c_out_width => 16,
      c_sclr_overrides_sset => 1,
      c_sinit_val => "0",
      c_verbosity => 0,
      c_xdevicefamily => "virtex5"
    );
-- synthesis translate_on
BEGIN
-- synthesis translate_off
U0 : wrapped_addsb_11_0_a37a2abb0bb82ab2
  PORT MAP (
    a => a,
    b => b,
    clk => clk,
    ce => ce,
    s => s
  );
-- synthesis translate_on

END addsb_11_0_a37a2abb0bb82ab2_a;
--------------------------------------------------------------------------------
--    This file is owned and controlled by Xilinx and must be used solely     --
--    for design, simulation, implementation and creation of design files     --
--    limited to Xilinx devices or technologies. Use with non-Xilinx          --
--    devices or technologies is expressly prohibited and immediately         --
--    terminates your license.                                                --
--                                                                            --
--    XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" SOLELY    --
--    FOR USE IN DEVELOPING PROGRAMS AND SOLUTIONS FOR XILINX DEVICES.  BY    --
--    PROVIDING THIS DESIGN, CODE, OR INFORMATION AS ONE POSSIBLE             --
--    IMPLEMENTATION OF THIS FEATURE, APPLICATION OR STANDARD, XILINX IS      --
--    MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION IS FREE FROM ANY      --
--    CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE FOR OBTAINING ANY       --
--    RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.  XILINX EXPRESSLY       --
--    DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO THE ADEQUACY OF THE   --
--    IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OR          --
--    REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE FROM CLAIMS OF         --
--    INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A   --
--    PARTICULAR PURPOSE.                                                     --
--                                                                            --
--    Xilinx products are not intended for use in life support appliances,    --
--    devices, or systems.  Use in such applications are expressly            --
--    prohibited.                                                             --
--                                                                            --
--    (c) Copyright 1995-2014 Xilinx, Inc.                                    --
--    All rights reserved.                                                    --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
-- You must compile the wrapper file cntr_11_0_ecb560ca58503876.vhd when simulating
-- the core, cntr_11_0_ecb560ca58503876. When compiling the wrapper file, be sure to
-- reference the XilinxCoreLib VHDL simulation library. For detailed
-- instructions, please refer to the "CORE Generator Help".

-- The synthesis directives "translate_off/translate_on" specified
-- below are supported by Xilinx, Mentor Graphics and Synplicity
-- synthesis tools. Ensure they are correct for your synthesis tool(s).

LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
-- synthesis translate_off
LIBRARY XilinxCoreLib;
-- synthesis translate_on
ENTITY cntr_11_0_ecb560ca58503876 IS
  PORT (
    clk : IN STD_LOGIC;
    ce : IN STD_LOGIC;
    sinit : IN STD_LOGIC;
    q : OUT STD_LOGIC_VECTOR(11 DOWNTO 0)
  );
END cntr_11_0_ecb560ca58503876;

ARCHITECTURE cntr_11_0_ecb560ca58503876_a OF cntr_11_0_ecb560ca58503876 IS
-- synthesis translate_off
COMPONENT wrapped_cntr_11_0_ecb560ca58503876
  PORT (
    clk : IN STD_LOGIC;
    ce : IN STD_LOGIC;
    sinit : IN STD_LOGIC;
    q : OUT STD_LOGIC_VECTOR(11 DOWNTO 0)
  );
END COMPONENT;

-- Configuration specification
  FOR ALL : wrapped_cntr_11_0_ecb560ca58503876 USE ENTITY XilinxCoreLib.c_counter_binary_v11_0(behavioral)
    GENERIC MAP (
      c_ainit_val => "0",
      c_ce_overrides_sync => 0,
      c_count_by => "1",
      c_count_mode => 0,
      c_count_to => "1",
      c_fb_latency => 0,
      c_has_ce => 1,
      c_has_load => 0,
      c_has_sclr => 0,
      c_has_sinit => 1,
      c_has_sset => 0,
      c_has_thresh0 => 0,
      c_implementation => 0,
      c_latency => 1,
      c_load_low => 0,
      c_restrict_count => 0,
      c_sclr_overrides_sset => 1,
      c_sinit_val => "0",
      c_thresh0_value => "1",
      c_verbosity => 0,
      c_width => 12,
      c_xdevicefamily => "virtex5"
    );
-- synthesis translate_on
BEGIN
-- synthesis translate_off
U0 : wrapped_cntr_11_0_ecb560ca58503876
  PORT MAP (
    clk => clk,
    ce => ce,
    sinit => sinit,
    q => q
  );
-- synthesis translate_on

END cntr_11_0_ecb560ca58503876_a;
--------------------------------------------------------------------------------
--    This file is owned and controlled by Xilinx and must be used solely     --
--    for design, simulation, implementation and creation of design files     --
--    limited to Xilinx devices or technologies. Use with non-Xilinx          --
--    devices or technologies is expressly prohibited and immediately         --
--    terminates your license.                                                --
--                                                                            --
--    XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" SOLELY    --
--    FOR USE IN DEVELOPING PROGRAMS AND SOLUTIONS FOR XILINX DEVICES.  BY    --
--    PROVIDING THIS DESIGN, CODE, OR INFORMATION AS ONE POSSIBLE             --
--    IMPLEMENTATION OF THIS FEATURE, APPLICATION OR STANDARD, XILINX IS      --
--    MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION IS FREE FROM ANY      --
--    CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE FOR OBTAINING ANY       --
--    RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.  XILINX EXPRESSLY       --
--    DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO THE ADEQUACY OF THE   --
--    IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OR          --
--    REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE FROM CLAIMS OF         --
--    INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A   --
--    PARTICULAR PURPOSE.                                                     --
--                                                                            --
--    Xilinx products are not intended for use in life support appliances,    --
--    devices, or systems.  Use in such applications are expressly            --
--    prohibited.                                                             --
--                                                                            --
--    (c) Copyright 1995-2014 Xilinx, Inc.                                    --
--    All rights reserved.                                                    --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
-- You must compile the wrapper file addsb_11_0_0b9b6e1cbccbb2be.vhd when simulating
-- the core, addsb_11_0_0b9b6e1cbccbb2be. When compiling the wrapper file, be sure to
-- reference the XilinxCoreLib VHDL simulation library. For detailed
-- instructions, please refer to the "CORE Generator Help".

-- The synthesis directives "translate_off/translate_on" specified
-- below are supported by Xilinx, Mentor Graphics and Synplicity
-- synthesis tools. Ensure they are correct for your synthesis tool(s).

LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
-- synthesis translate_off
LIBRARY XilinxCoreLib;
-- synthesis translate_on
ENTITY addsb_11_0_0b9b6e1cbccbb2be IS
  PORT (
    a : IN STD_LOGIC_VECTOR(16 DOWNTO 0);
    b : IN STD_LOGIC_VECTOR(16 DOWNTO 0);
    clk : IN STD_LOGIC;
    ce : IN STD_LOGIC;
    s : OUT STD_LOGIC_VECTOR(16 DOWNTO 0)
  );
END addsb_11_0_0b9b6e1cbccbb2be;

ARCHITECTURE addsb_11_0_0b9b6e1cbccbb2be_a OF addsb_11_0_0b9b6e1cbccbb2be IS
-- synthesis translate_off
COMPONENT wrapped_addsb_11_0_0b9b6e1cbccbb2be
  PORT (
    a : IN STD_LOGIC_VECTOR(16 DOWNTO 0);
    b : IN STD_LOGIC_VECTOR(16 DOWNTO 0);
    clk : IN STD_LOGIC;
    ce : IN STD_LOGIC;
    s : OUT STD_LOGIC_VECTOR(16 DOWNTO 0)
  );
END COMPONENT;

-- Configuration specification
  FOR ALL : wrapped_addsb_11_0_0b9b6e1cbccbb2be USE ENTITY XilinxCoreLib.c_addsub_v11_0(behavioral)
    GENERIC MAP (
      c_a_type => 0,
      c_a_width => 17,
      c_add_mode => 0,
      c_ainit_val => "0",
      c_b_constant => 0,
      c_b_type => 0,
      c_b_value => "00000000000000000",
      c_b_width => 17,
      c_borrow_low => 1,
      c_bypass_low => 0,
      c_ce_overrides_bypass => 1,
      c_ce_overrides_sclr => 0,
      c_has_bypass => 0,
      c_has_c_in => 0,
      c_has_c_out => 0,
      c_has_ce => 1,
      c_has_sclr => 0,
      c_has_sinit => 0,
      c_has_sset => 0,
      c_implementation => 0,
      c_latency => 1,
      c_out_width => 17,
      c_sclr_overrides_sset => 1,
      c_sinit_val => "0",
      c_verbosity => 0,
      c_xdevicefamily => "virtex5"
    );
-- synthesis translate_on
BEGIN
-- synthesis translate_off
U0 : wrapped_addsb_11_0_0b9b6e1cbccbb2be
  PORT MAP (
    a => a,
    b => b,
    clk => clk,
    ce => ce,
    s => s
  );
-- synthesis translate_on

END addsb_11_0_0b9b6e1cbccbb2be_a;
--------------------------------------------------------------------------------
--    This file is owned and controlled by Xilinx and must be used solely     --
--    for design, simulation, implementation and creation of design files     --
--    limited to Xilinx devices or technologies. Use with non-Xilinx          --
--    devices or technologies is expressly prohibited and immediately         --
--    terminates your license.                                                --
--                                                                            --
--    XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" SOLELY    --
--    FOR USE IN DEVELOPING PROGRAMS AND SOLUTIONS FOR XILINX DEVICES.  BY    --
--    PROVIDING THIS DESIGN, CODE, OR INFORMATION AS ONE POSSIBLE             --
--    IMPLEMENTATION OF THIS FEATURE, APPLICATION OR STANDARD, XILINX IS      --
--    MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION IS FREE FROM ANY      --
--    CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE FOR OBTAINING ANY       --
--    RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.  XILINX EXPRESSLY       --
--    DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO THE ADEQUACY OF THE   --
--    IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OR          --
--    REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE FROM CLAIMS OF         --
--    INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A   --
--    PARTICULAR PURPOSE.                                                     --
--                                                                            --
--    Xilinx products are not intended for use in life support appliances,    --
--    devices, or systems.  Use in such applications are expressly            --
--    prohibited.                                                             --
--                                                                            --
--    (c) Copyright 1995-2014 Xilinx, Inc.                                    --
--    All rights reserved.                                                    --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
-- You must compile the wrapper file bmg_72_04e0d9cde0f49a3d.vhd when simulating
-- the core, bmg_72_04e0d9cde0f49a3d. When compiling the wrapper file, be sure to
-- reference the XilinxCoreLib VHDL simulation library. For detailed
-- instructions, please refer to the "CORE Generator Help".

-- The synthesis directives "translate_off/translate_on" specified
-- below are supported by Xilinx, Mentor Graphics and Synplicity
-- synthesis tools. Ensure they are correct for your synthesis tool(s).

LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
-- synthesis translate_off
LIBRARY XilinxCoreLib;
-- synthesis translate_on
ENTITY bmg_72_04e0d9cde0f49a3d IS
  PORT (
    clka : IN STD_LOGIC;
    ena : IN STD_LOGIC;
    addra : IN STD_LOGIC_VECTOR(5 DOWNTO 0);
    douta : OUT STD_LOGIC_VECTOR(17 DOWNTO 0)
  );
END bmg_72_04e0d9cde0f49a3d;

ARCHITECTURE bmg_72_04e0d9cde0f49a3d_a OF bmg_72_04e0d9cde0f49a3d IS
-- synthesis translate_off
COMPONENT wrapped_bmg_72_04e0d9cde0f49a3d
  PORT (
    clka : IN STD_LOGIC;
    ena : IN STD_LOGIC;
    addra : IN STD_LOGIC_VECTOR(5 DOWNTO 0);
    douta : OUT STD_LOGIC_VECTOR(17 DOWNTO 0)
  );
END COMPONENT;

-- Configuration specification
  FOR ALL : wrapped_bmg_72_04e0d9cde0f49a3d USE ENTITY XilinxCoreLib.blk_mem_gen_v7_2(behavioral)
    GENERIC MAP (
      c_addra_width => 6,
      c_addrb_width => 6,
      c_algorithm => 1,
      c_axi_id_width => 4,
      c_axi_slave_type => 0,
      c_axi_type => 1,
      c_byte_size => 9,
      c_common_clk => 0,
      c_default_data => "0",
      c_disable_warn_bhv_coll => 0,
      c_disable_warn_bhv_range => 0,
      c_enable_32bit_address => 0,
      c_family => "virtex5",
      c_has_axi_id => 0,
      c_has_ena => 1,
      c_has_enb => 0,
      c_has_injecterr => 0,
      c_has_mem_output_regs_a => 1,
      c_has_mem_output_regs_b => 0,
      c_has_mux_output_regs_a => 0,
      c_has_mux_output_regs_b => 0,
      c_has_regcea => 0,
      c_has_regceb => 0,
      c_has_rsta => 0,
      c_has_rstb => 0,
      c_has_softecc_input_regs_a => 0,
      c_has_softecc_output_regs_b => 0,
      c_init_file_name => "bmg_72_04e0d9cde0f49a3d.mif",
      c_inita_val => "0",
      c_initb_val => "0",
      c_interface_type => 0,
      c_load_init_file => 1,
      c_mem_type => 3,
      c_mux_pipeline_stages => 0,
      c_prim_type => 1,
      c_read_depth_a => 64,
      c_read_depth_b => 64,
      c_read_width_a => 18,
      c_read_width_b => 18,
      c_rst_priority_a => "CE",
      c_rst_priority_b => "CE",
      c_rst_type => "SYNC",
      c_rstram_a => 0,
      c_rstram_b => 0,
      c_sim_collision_check => "ALL",
      c_use_byte_wea => 0,
      c_use_byte_web => 0,
      c_use_default_data => 0,
      c_use_ecc => 0,
      c_use_softecc => 0,
      c_wea_width => 1,
      c_web_width => 1,
      c_write_depth_a => 64,
      c_write_depth_b => 64,
      c_write_mode_a => "WRITE_FIRST",
      c_write_mode_b => "WRITE_FIRST",
      c_write_width_a => 18,
      c_write_width_b => 18,
      c_xdevicefamily => "virtex5"
    );
-- synthesis translate_on
BEGIN
-- synthesis translate_off
U0 : wrapped_bmg_72_04e0d9cde0f49a3d
  PORT MAP (
    clka => clka,
    ena => ena,
    addra => addra,
    douta => douta
  );
-- synthesis translate_on

END bmg_72_04e0d9cde0f49a3d_a;
--------------------------------------------------------------------------------
--    This file is owned and controlled by Xilinx and must be used solely     --
--    for design, simulation, implementation and creation of design files     --
--    limited to Xilinx devices or technologies. Use with non-Xilinx          --
--    devices or technologies is expressly prohibited and immediately         --
--    terminates your license.                                                --
--                                                                            --
--    XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" SOLELY    --
--    FOR USE IN DEVELOPING PROGRAMS AND SOLUTIONS FOR XILINX DEVICES.  BY    --
--    PROVIDING THIS DESIGN, CODE, OR INFORMATION AS ONE POSSIBLE             --
--    IMPLEMENTATION OF THIS FEATURE, APPLICATION OR STANDARD, XILINX IS      --
--    MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION IS FREE FROM ANY      --
--    CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE FOR OBTAINING ANY       --
--    RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.  XILINX EXPRESSLY       --
--    DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO THE ADEQUACY OF THE   --
--    IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OR          --
--    REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE FROM CLAIMS OF         --
--    INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A   --
--    PARTICULAR PURPOSE.                                                     --
--                                                                            --
--    Xilinx products are not intended for use in life support appliances,    --
--    devices, or systems.  Use in such applications are expressly            --
--    prohibited.                                                             --
--                                                                            --
--    (c) Copyright 1995-2014 Xilinx, Inc.                                    --
--    All rights reserved.                                                    --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
-- You must compile the wrapper file bmg_72_7884e23b5c653602.vhd when simulating
-- the core, bmg_72_7884e23b5c653602. When compiling the wrapper file, be sure to
-- reference the XilinxCoreLib VHDL simulation library. For detailed
-- instructions, please refer to the "CORE Generator Help".

-- The synthesis directives "translate_off/translate_on" specified
-- below are supported by Xilinx, Mentor Graphics and Synplicity
-- synthesis tools. Ensure they are correct for your synthesis tool(s).

LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
-- synthesis translate_off
LIBRARY XilinxCoreLib;
-- synthesis translate_on
ENTITY bmg_72_7884e23b5c653602 IS
  PORT (
    clka : IN STD_LOGIC;
    ena : IN STD_LOGIC;
    addra : IN STD_LOGIC_VECTOR(6 DOWNTO 0);
    douta : OUT STD_LOGIC_VECTOR(17 DOWNTO 0)
  );
END bmg_72_7884e23b5c653602;

ARCHITECTURE bmg_72_7884e23b5c653602_a OF bmg_72_7884e23b5c653602 IS
-- synthesis translate_off
COMPONENT wrapped_bmg_72_7884e23b5c653602
  PORT (
    clka : IN STD_LOGIC;
    ena : IN STD_LOGIC;
    addra : IN STD_LOGIC_VECTOR(6 DOWNTO 0);
    douta : OUT STD_LOGIC_VECTOR(17 DOWNTO 0)
  );
END COMPONENT;

-- Configuration specification
  FOR ALL : wrapped_bmg_72_7884e23b5c653602 USE ENTITY XilinxCoreLib.blk_mem_gen_v7_2(behavioral)
    GENERIC MAP (
      c_addra_width => 7,
      c_addrb_width => 7,
      c_algorithm => 1,
      c_axi_id_width => 4,
      c_axi_slave_type => 0,
      c_axi_type => 1,
      c_byte_size => 9,
      c_common_clk => 0,
      c_default_data => "0",
      c_disable_warn_bhv_coll => 0,
      c_disable_warn_bhv_range => 0,
      c_enable_32bit_address => 0,
      c_family => "virtex5",
      c_has_axi_id => 0,
      c_has_ena => 1,
      c_has_enb => 0,
      c_has_injecterr => 0,
      c_has_mem_output_regs_a => 1,
      c_has_mem_output_regs_b => 0,
      c_has_mux_output_regs_a => 0,
      c_has_mux_output_regs_b => 0,
      c_has_regcea => 0,
      c_has_regceb => 0,
      c_has_rsta => 0,
      c_has_rstb => 0,
      c_has_softecc_input_regs_a => 0,
      c_has_softecc_output_regs_b => 0,
      c_init_file_name => "bmg_72_7884e23b5c653602.mif",
      c_inita_val => "0",
      c_initb_val => "0",
      c_interface_type => 0,
      c_load_init_file => 1,
      c_mem_type => 3,
      c_mux_pipeline_stages => 0,
      c_prim_type => 1,
      c_read_depth_a => 128,
      c_read_depth_b => 128,
      c_read_width_a => 18,
      c_read_width_b => 18,
      c_rst_priority_a => "CE",
      c_rst_priority_b => "CE",
      c_rst_type => "SYNC",
      c_rstram_a => 0,
      c_rstram_b => 0,
      c_sim_collision_check => "ALL",
      c_use_byte_wea => 0,
      c_use_byte_web => 0,
      c_use_default_data => 0,
      c_use_ecc => 0,
      c_use_softecc => 0,
      c_wea_width => 1,
      c_web_width => 1,
      c_write_depth_a => 128,
      c_write_depth_b => 128,
      c_write_mode_a => "WRITE_FIRST",
      c_write_mode_b => "WRITE_FIRST",
      c_write_width_a => 18,
      c_write_width_b => 18,
      c_xdevicefamily => "virtex5"
    );
-- synthesis translate_on
BEGIN
-- synthesis translate_off
U0 : wrapped_bmg_72_7884e23b5c653602
  PORT MAP (
    clka => clka,
    ena => ena,
    addra => addra,
    douta => douta
  );
-- synthesis translate_on

END bmg_72_7884e23b5c653602_a;
--------------------------------------------------------------------------------
--    This file is owned and controlled by Xilinx and must be used solely     --
--    for design, simulation, implementation and creation of design files     --
--    limited to Xilinx devices or technologies. Use with non-Xilinx          --
--    devices or technologies is expressly prohibited and immediately         --
--    terminates your license.                                                --
--                                                                            --
--    XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" SOLELY    --
--    FOR USE IN DEVELOPING PROGRAMS AND SOLUTIONS FOR XILINX DEVICES.  BY    --
--    PROVIDING THIS DESIGN, CODE, OR INFORMATION AS ONE POSSIBLE             --
--    IMPLEMENTATION OF THIS FEATURE, APPLICATION OR STANDARD, XILINX IS      --
--    MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION IS FREE FROM ANY      --
--    CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE FOR OBTAINING ANY       --
--    RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.  XILINX EXPRESSLY       --
--    DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO THE ADEQUACY OF THE   --
--    IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OR          --
--    REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE FROM CLAIMS OF         --
--    INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A   --
--    PARTICULAR PURPOSE.                                                     --
--                                                                            --
--    Xilinx products are not intended for use in life support appliances,    --
--    devices, or systems.  Use in such applications are expressly            --
--    prohibited.                                                             --
--                                                                            --
--    (c) Copyright 1995-2014 Xilinx, Inc.                                    --
--    All rights reserved.                                                    --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
-- You must compile the wrapper file bmg_72_7923a80e2a3186d3.vhd when simulating
-- the core, bmg_72_7923a80e2a3186d3. When compiling the wrapper file, be sure to
-- reference the XilinxCoreLib VHDL simulation library. For detailed
-- instructions, please refer to the "CORE Generator Help".

-- The synthesis directives "translate_off/translate_on" specified
-- below are supported by Xilinx, Mentor Graphics and Synplicity
-- synthesis tools. Ensure they are correct for your synthesis tool(s).

LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
-- synthesis translate_off
LIBRARY XilinxCoreLib;
-- synthesis translate_on
ENTITY bmg_72_7923a80e2a3186d3 IS
  PORT (
    clka : IN STD_LOGIC;
    ena : IN STD_LOGIC;
    addra : IN STD_LOGIC_VECTOR(2 DOWNTO 0);
    douta : OUT STD_LOGIC_VECTOR(17 DOWNTO 0)
  );
END bmg_72_7923a80e2a3186d3;

ARCHITECTURE bmg_72_7923a80e2a3186d3_a OF bmg_72_7923a80e2a3186d3 IS
-- synthesis translate_off
COMPONENT wrapped_bmg_72_7923a80e2a3186d3
  PORT (
    clka : IN STD_LOGIC;
    ena : IN STD_LOGIC;
    addra : IN STD_LOGIC_VECTOR(2 DOWNTO 0);
    douta : OUT STD_LOGIC_VECTOR(17 DOWNTO 0)
  );
END COMPONENT;

-- Configuration specification
  FOR ALL : wrapped_bmg_72_7923a80e2a3186d3 USE ENTITY XilinxCoreLib.blk_mem_gen_v7_2(behavioral)
    GENERIC MAP (
      c_addra_width => 3,
      c_addrb_width => 3,
      c_algorithm => 1,
      c_axi_id_width => 4,
      c_axi_slave_type => 0,
      c_axi_type => 1,
      c_byte_size => 9,
      c_common_clk => 0,
      c_default_data => "0",
      c_disable_warn_bhv_coll => 0,
      c_disable_warn_bhv_range => 0,
      c_enable_32bit_address => 0,
      c_family => "virtex5",
      c_has_axi_id => 0,
      c_has_ena => 1,
      c_has_enb => 0,
      c_has_injecterr => 0,
      c_has_mem_output_regs_a => 1,
      c_has_mem_output_regs_b => 0,
      c_has_mux_output_regs_a => 0,
      c_has_mux_output_regs_b => 0,
      c_has_regcea => 0,
      c_has_regceb => 0,
      c_has_rsta => 0,
      c_has_rstb => 0,
      c_has_softecc_input_regs_a => 0,
      c_has_softecc_output_regs_b => 0,
      c_init_file_name => "bmg_72_7923a80e2a3186d3.mif",
      c_inita_val => "0",
      c_initb_val => "0",
      c_interface_type => 0,
      c_load_init_file => 1,
      c_mem_type => 3,
      c_mux_pipeline_stages => 0,
      c_prim_type => 1,
      c_read_depth_a => 8,
      c_read_depth_b => 8,
      c_read_width_a => 18,
      c_read_width_b => 18,
      c_rst_priority_a => "CE",
      c_rst_priority_b => "CE",
      c_rst_type => "SYNC",
      c_rstram_a => 0,
      c_rstram_b => 0,
      c_sim_collision_check => "ALL",
      c_use_byte_wea => 0,
      c_use_byte_web => 0,
      c_use_default_data => 0,
      c_use_ecc => 0,
      c_use_softecc => 0,
      c_wea_width => 1,
      c_web_width => 1,
      c_write_depth_a => 8,
      c_write_depth_b => 8,
      c_write_mode_a => "WRITE_FIRST",
      c_write_mode_b => "WRITE_FIRST",
      c_write_width_a => 18,
      c_write_width_b => 18,
      c_xdevicefamily => "virtex5"
    );
-- synthesis translate_on
BEGIN
-- synthesis translate_off
U0 : wrapped_bmg_72_7923a80e2a3186d3
  PORT MAP (
    clka => clka,
    ena => ena,
    addra => addra,
    douta => douta
  );
-- synthesis translate_on

END bmg_72_7923a80e2a3186d3_a;
--------------------------------------------------------------------------------
--    This file is owned and controlled by Xilinx and must be used solely     --
--    for design, simulation, implementation and creation of design files     --
--    limited to Xilinx devices or technologies. Use with non-Xilinx          --
--    devices or technologies is expressly prohibited and immediately         --
--    terminates your license.                                                --
--                                                                            --
--    XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" SOLELY    --
--    FOR USE IN DEVELOPING PROGRAMS AND SOLUTIONS FOR XILINX DEVICES.  BY    --
--    PROVIDING THIS DESIGN, CODE, OR INFORMATION AS ONE POSSIBLE             --
--    IMPLEMENTATION OF THIS FEATURE, APPLICATION OR STANDARD, XILINX IS      --
--    MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION IS FREE FROM ANY      --
--    CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE FOR OBTAINING ANY       --
--    RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.  XILINX EXPRESSLY       --
--    DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO THE ADEQUACY OF THE   --
--    IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OR          --
--    REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE FROM CLAIMS OF         --
--    INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A   --
--    PARTICULAR PURPOSE.                                                     --
--                                                                            --
--    Xilinx products are not intended for use in life support appliances,    --
--    devices, or systems.  Use in such applications are expressly            --
--    prohibited.                                                             --
--                                                                            --
--    (c) Copyright 1995-2014 Xilinx, Inc.                                    --
--    All rights reserved.                                                    --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
-- You must compile the wrapper file cntr_11_0_50ef766046ea9bf4.vhd when simulating
-- the core, cntr_11_0_50ef766046ea9bf4. When compiling the wrapper file, be sure to
-- reference the XilinxCoreLib VHDL simulation library. For detailed
-- instructions, please refer to the "CORE Generator Help".

-- The synthesis directives "translate_off/translate_on" specified
-- below are supported by Xilinx, Mentor Graphics and Synplicity
-- synthesis tools. Ensure they are correct for your synthesis tool(s).

LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
-- synthesis translate_off
LIBRARY XilinxCoreLib;
-- synthesis translate_on
ENTITY cntr_11_0_50ef766046ea9bf4 IS
  PORT (
    clk : IN STD_LOGIC;
    ce : IN STD_LOGIC;
    sinit : IN STD_LOGIC;
    q : OUT STD_LOGIC_VECTOR(5 DOWNTO 0)
  );
END cntr_11_0_50ef766046ea9bf4;

ARCHITECTURE cntr_11_0_50ef766046ea9bf4_a OF cntr_11_0_50ef766046ea9bf4 IS
-- synthesis translate_off
COMPONENT wrapped_cntr_11_0_50ef766046ea9bf4
  PORT (
    clk : IN STD_LOGIC;
    ce : IN STD_LOGIC;
    sinit : IN STD_LOGIC;
    q : OUT STD_LOGIC_VECTOR(5 DOWNTO 0)
  );
END COMPONENT;

-- Configuration specification
  FOR ALL : wrapped_cntr_11_0_50ef766046ea9bf4 USE ENTITY XilinxCoreLib.c_counter_binary_v11_0(behavioral)
    GENERIC MAP (
      c_ainit_val => "0",
      c_ce_overrides_sync => 0,
      c_count_by => "1",
      c_count_mode => 0,
      c_count_to => "1",
      c_fb_latency => 0,
      c_has_ce => 1,
      c_has_load => 0,
      c_has_sclr => 0,
      c_has_sinit => 1,
      c_has_sset => 0,
      c_has_thresh0 => 0,
      c_implementation => 0,
      c_latency => 1,
      c_load_low => 0,
      c_restrict_count => 0,
      c_sclr_overrides_sset => 1,
      c_sinit_val => "0",
      c_thresh0_value => "1",
      c_verbosity => 0,
      c_width => 6,
      c_xdevicefamily => "virtex5"
    );
-- synthesis translate_on
BEGIN
-- synthesis translate_off
U0 : wrapped_cntr_11_0_50ef766046ea9bf4
  PORT MAP (
    clk => clk,
    ce => ce,
    sinit => sinit,
    q => q
  );
-- synthesis translate_on

END cntr_11_0_50ef766046ea9bf4_a;
--------------------------------------------------------------------------------
--    This file is owned and controlled by Xilinx and must be used solely     --
--    for design, simulation, implementation and creation of design files     --
--    limited to Xilinx devices or technologies. Use with non-Xilinx          --
--    devices or technologies is expressly prohibited and immediately         --
--    terminates your license.                                                --
--                                                                            --
--    XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" SOLELY    --
--    FOR USE IN DEVELOPING PROGRAMS AND SOLUTIONS FOR XILINX DEVICES.  BY    --
--    PROVIDING THIS DESIGN, CODE, OR INFORMATION AS ONE POSSIBLE             --
--    IMPLEMENTATION OF THIS FEATURE, APPLICATION OR STANDARD, XILINX IS      --
--    MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION IS FREE FROM ANY      --
--    CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE FOR OBTAINING ANY       --
--    RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.  XILINX EXPRESSLY       --
--    DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO THE ADEQUACY OF THE   --
--    IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OR          --
--    REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE FROM CLAIMS OF         --
--    INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A   --
--    PARTICULAR PURPOSE.                                                     --
--                                                                            --
--    Xilinx products are not intended for use in life support appliances,    --
--    devices, or systems.  Use in such applications are expressly            --
--    prohibited.                                                             --
--                                                                            --
--    (c) Copyright 1995-2014 Xilinx, Inc.                                    --
--    All rights reserved.                                                    --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
-- You must compile the wrapper file addsb_11_0_607fe0700100c715.vhd when simulating
-- the core, addsb_11_0_607fe0700100c715. When compiling the wrapper file, be sure to
-- reference the XilinxCoreLib VHDL simulation library. For detailed
-- instructions, please refer to the "CORE Generator Help".

-- The synthesis directives "translate_off/translate_on" specified
-- below are supported by Xilinx, Mentor Graphics and Synplicity
-- synthesis tools. Ensure they are correct for your synthesis tool(s).

LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
-- synthesis translate_off
LIBRARY XilinxCoreLib;
-- synthesis translate_on
ENTITY addsb_11_0_607fe0700100c715 IS
  PORT (
    a : IN STD_LOGIC_VECTOR(21 DOWNTO 0);
    b : IN STD_LOGIC_VECTOR(21 DOWNTO 0);
    s : OUT STD_LOGIC_VECTOR(21 DOWNTO 0)
  );
END addsb_11_0_607fe0700100c715;

ARCHITECTURE addsb_11_0_607fe0700100c715_a OF addsb_11_0_607fe0700100c715 IS
-- synthesis translate_off
COMPONENT wrapped_addsb_11_0_607fe0700100c715
  PORT (
    a : IN STD_LOGIC_VECTOR(21 DOWNTO 0);
    b : IN STD_LOGIC_VECTOR(21 DOWNTO 0);
    s : OUT STD_LOGIC_VECTOR(21 DOWNTO 0)
  );
END COMPONENT;

-- Configuration specification
  FOR ALL : wrapped_addsb_11_0_607fe0700100c715 USE ENTITY XilinxCoreLib.c_addsub_v11_0(behavioral)
    GENERIC MAP (
      c_a_type => 0,
      c_a_width => 22,
      c_add_mode => 0,
      c_ainit_val => "0",
      c_b_constant => 0,
      c_b_type => 0,
      c_b_value => "0000000000000000000000",
      c_b_width => 22,
      c_borrow_low => 1,
      c_bypass_low => 0,
      c_ce_overrides_bypass => 1,
      c_ce_overrides_sclr => 0,
      c_has_bypass => 0,
      c_has_c_in => 0,
      c_has_c_out => 0,
      c_has_ce => 0,
      c_has_sclr => 0,
      c_has_sinit => 0,
      c_has_sset => 0,
      c_implementation => 0,
      c_latency => 0,
      c_out_width => 22,
      c_sclr_overrides_sset => 1,
      c_sinit_val => "0",
      c_verbosity => 0,
      c_xdevicefamily => "virtex5"
    );
-- synthesis translate_on
BEGIN
-- synthesis translate_off
U0 : wrapped_addsb_11_0_607fe0700100c715
  PORT MAP (
    a => a,
    b => b,
    s => s
  );
-- synthesis translate_on

END addsb_11_0_607fe0700100c715_a;
--------------------------------------------------------------------------------
--    This file is owned and controlled by Xilinx and must be used solely     --
--    for design, simulation, implementation and creation of design files     --
--    limited to Xilinx devices or technologies. Use with non-Xilinx          --
--    devices or technologies is expressly prohibited and immediately         --
--    terminates your license.                                                --
--                                                                            --
--    XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" SOLELY    --
--    FOR USE IN DEVELOPING PROGRAMS AND SOLUTIONS FOR XILINX DEVICES.  BY    --
--    PROVIDING THIS DESIGN, CODE, OR INFORMATION AS ONE POSSIBLE             --
--    IMPLEMENTATION OF THIS FEATURE, APPLICATION OR STANDARD, XILINX IS      --
--    MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION IS FREE FROM ANY      --
--    CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE FOR OBTAINING ANY       --
--    RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.  XILINX EXPRESSLY       --
--    DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO THE ADEQUACY OF THE   --
--    IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OR          --
--    REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE FROM CLAIMS OF         --
--    INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A   --
--    PARTICULAR PURPOSE.                                                     --
--                                                                            --
--    Xilinx products are not intended for use in life support appliances,    --
--    devices, or systems.  Use in such applications are expressly            --
--    prohibited.                                                             --
--                                                                            --
--    (c) Copyright 1995-2014 Xilinx, Inc.                                    --
--    All rights reserved.                                                    --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
-- You must compile the wrapper file cntr_11_0_b502b5814ea90a92.vhd when simulating
-- the core, cntr_11_0_b502b5814ea90a92. When compiling the wrapper file, be sure to
-- reference the XilinxCoreLib VHDL simulation library. For detailed
-- instructions, please refer to the "CORE Generator Help".

-- The synthesis directives "translate_off/translate_on" specified
-- below are supported by Xilinx, Mentor Graphics and Synplicity
-- synthesis tools. Ensure they are correct for your synthesis tool(s).

LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
-- synthesis translate_off
LIBRARY XilinxCoreLib;
-- synthesis translate_on
ENTITY cntr_11_0_b502b5814ea90a92 IS
  PORT (
    clk : IN STD_LOGIC;
    ce : IN STD_LOGIC;
    sinit : IN STD_LOGIC;
    load : IN STD_LOGIC;
    l : IN STD_LOGIC_VECTOR(2 DOWNTO 0);
    q : OUT STD_LOGIC_VECTOR(2 DOWNTO 0)
  );
END cntr_11_0_b502b5814ea90a92;

ARCHITECTURE cntr_11_0_b502b5814ea90a92_a OF cntr_11_0_b502b5814ea90a92 IS
-- synthesis translate_off
COMPONENT wrapped_cntr_11_0_b502b5814ea90a92
  PORT (
    clk : IN STD_LOGIC;
    ce : IN STD_LOGIC;
    sinit : IN STD_LOGIC;
    load : IN STD_LOGIC;
    l : IN STD_LOGIC_VECTOR(2 DOWNTO 0);
    q : OUT STD_LOGIC_VECTOR(2 DOWNTO 0)
  );
END COMPONENT;

-- Configuration specification
  FOR ALL : wrapped_cntr_11_0_b502b5814ea90a92 USE ENTITY XilinxCoreLib.c_counter_binary_v11_0(behavioral)
    GENERIC MAP (
      c_ainit_val => "0",
      c_ce_overrides_sync => 0,
      c_count_by => "1",
      c_count_mode => 1,
      c_count_to => "1",
      c_fb_latency => 0,
      c_has_ce => 1,
      c_has_load => 1,
      c_has_sclr => 0,
      c_has_sinit => 1,
      c_has_sset => 0,
      c_has_thresh0 => 0,
      c_implementation => 0,
      c_latency => 1,
      c_load_low => 0,
      c_restrict_count => 0,
      c_sclr_overrides_sset => 1,
      c_sinit_val => "0",
      c_thresh0_value => "1",
      c_verbosity => 0,
      c_width => 3,
      c_xdevicefamily => "virtex5"
    );
-- synthesis translate_on
BEGIN
-- synthesis translate_off
U0 : wrapped_cntr_11_0_b502b5814ea90a92
  PORT MAP (
    clk => clk,
    ce => ce,
    sinit => sinit,
    load => load,
    l => l,
    q => q
  );
-- synthesis translate_on

END cntr_11_0_b502b5814ea90a92_a;
--------------------------------------------------------------------------------
--    This file is owned and controlled by Xilinx and must be used solely     --
--    for design, simulation, implementation and creation of design files     --
--    limited to Xilinx devices or technologies. Use with non-Xilinx          --
--    devices or technologies is expressly prohibited and immediately         --
--    terminates your license.                                                --
--                                                                            --
--    XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" SOLELY    --
--    FOR USE IN DEVELOPING PROGRAMS AND SOLUTIONS FOR XILINX DEVICES.  BY    --
--    PROVIDING THIS DESIGN, CODE, OR INFORMATION AS ONE POSSIBLE             --
--    IMPLEMENTATION OF THIS FEATURE, APPLICATION OR STANDARD, XILINX IS      --
--    MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION IS FREE FROM ANY      --
--    CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE FOR OBTAINING ANY       --
--    RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.  XILINX EXPRESSLY       --
--    DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO THE ADEQUACY OF THE   --
--    IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OR          --
--    REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE FROM CLAIMS OF         --
--    INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A   --
--    PARTICULAR PURPOSE.                                                     --
--                                                                            --
--    Xilinx products are not intended for use in life support appliances,    --
--    devices, or systems.  Use in such applications are expressly            --
--    prohibited.                                                             --
--                                                                            --
--    (c) Copyright 1995-2014 Xilinx, Inc.                                    --
--    All rights reserved.                                                    --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
-- You must compile the wrapper file bmg_72_59f0d912b26aa159.vhd when simulating
-- the core, bmg_72_59f0d912b26aa159. When compiling the wrapper file, be sure to
-- reference the XilinxCoreLib VHDL simulation library. For detailed
-- instructions, please refer to the "CORE Generator Help".

-- The synthesis directives "translate_off/translate_on" specified
-- below are supported by Xilinx, Mentor Graphics and Synplicity
-- synthesis tools. Ensure they are correct for your synthesis tool(s).

LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
-- synthesis translate_off
LIBRARY XilinxCoreLib;
-- synthesis translate_on
ENTITY bmg_72_59f0d912b26aa159 IS
  PORT (
    clka : IN STD_LOGIC;
    ena : IN STD_LOGIC;
    addra : IN STD_LOGIC_VECTOR(3 DOWNTO 0);
    douta : OUT STD_LOGIC_VECTOR(17 DOWNTO 0)
  );
END bmg_72_59f0d912b26aa159;

ARCHITECTURE bmg_72_59f0d912b26aa159_a OF bmg_72_59f0d912b26aa159 IS
-- synthesis translate_off
COMPONENT wrapped_bmg_72_59f0d912b26aa159
  PORT (
    clka : IN STD_LOGIC;
    ena : IN STD_LOGIC;
    addra : IN STD_LOGIC_VECTOR(3 DOWNTO 0);
    douta : OUT STD_LOGIC_VECTOR(17 DOWNTO 0)
  );
END COMPONENT;

-- Configuration specification
  FOR ALL : wrapped_bmg_72_59f0d912b26aa159 USE ENTITY XilinxCoreLib.blk_mem_gen_v7_2(behavioral)
    GENERIC MAP (
      c_addra_width => 4,
      c_addrb_width => 4,
      c_algorithm => 1,
      c_axi_id_width => 4,
      c_axi_slave_type => 0,
      c_axi_type => 1,
      c_byte_size => 9,
      c_common_clk => 0,
      c_default_data => "0",
      c_disable_warn_bhv_coll => 0,
      c_disable_warn_bhv_range => 0,
      c_enable_32bit_address => 0,
      c_family => "virtex5",
      c_has_axi_id => 0,
      c_has_ena => 1,
      c_has_enb => 0,
      c_has_injecterr => 0,
      c_has_mem_output_regs_a => 1,
      c_has_mem_output_regs_b => 0,
      c_has_mux_output_regs_a => 0,
      c_has_mux_output_regs_b => 0,
      c_has_regcea => 0,
      c_has_regceb => 0,
      c_has_rsta => 0,
      c_has_rstb => 0,
      c_has_softecc_input_regs_a => 0,
      c_has_softecc_output_regs_b => 0,
      c_init_file_name => "bmg_72_59f0d912b26aa159.mif",
      c_inita_val => "0",
      c_initb_val => "0",
      c_interface_type => 0,
      c_load_init_file => 1,
      c_mem_type => 3,
      c_mux_pipeline_stages => 0,
      c_prim_type => 1,
      c_read_depth_a => 16,
      c_read_depth_b => 16,
      c_read_width_a => 18,
      c_read_width_b => 18,
      c_rst_priority_a => "CE",
      c_rst_priority_b => "CE",
      c_rst_type => "SYNC",
      c_rstram_a => 0,
      c_rstram_b => 0,
      c_sim_collision_check => "ALL",
      c_use_byte_wea => 0,
      c_use_byte_web => 0,
      c_use_default_data => 0,
      c_use_ecc => 0,
      c_use_softecc => 0,
      c_wea_width => 1,
      c_web_width => 1,
      c_write_depth_a => 16,
      c_write_depth_b => 16,
      c_write_mode_a => "WRITE_FIRST",
      c_write_mode_b => "WRITE_FIRST",
      c_write_width_a => 18,
      c_write_width_b => 18,
      c_xdevicefamily => "virtex5"
    );
-- synthesis translate_on
BEGIN
-- synthesis translate_off
U0 : wrapped_bmg_72_59f0d912b26aa159
  PORT MAP (
    clka => clka,
    ena => ena,
    addra => addra,
    douta => douta
  );
-- synthesis translate_on

END bmg_72_59f0d912b26aa159_a;
--------------------------------------------------------------------------------
--    This file is owned and controlled by Xilinx and must be used solely     --
--    for design, simulation, implementation and creation of design files     --
--    limited to Xilinx devices or technologies. Use with non-Xilinx          --
--    devices or technologies is expressly prohibited and immediately         --
--    terminates your license.                                                --
--                                                                            --
--    XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" SOLELY    --
--    FOR USE IN DEVELOPING PROGRAMS AND SOLUTIONS FOR XILINX DEVICES.  BY    --
--    PROVIDING THIS DESIGN, CODE, OR INFORMATION AS ONE POSSIBLE             --
--    IMPLEMENTATION OF THIS FEATURE, APPLICATION OR STANDARD, XILINX IS      --
--    MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION IS FREE FROM ANY      --
--    CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE FOR OBTAINING ANY       --
--    RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.  XILINX EXPRESSLY       --
--    DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO THE ADEQUACY OF THE   --
--    IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OR          --
--    REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE FROM CLAIMS OF         --
--    INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A   --
--    PARTICULAR PURPOSE.                                                     --
--                                                                            --
--    Xilinx products are not intended for use in life support appliances,    --
--    devices, or systems.  Use in such applications are expressly            --
--    prohibited.                                                             --
--                                                                            --
--    (c) Copyright 1995-2014 Xilinx, Inc.                                    --
--    All rights reserved.                                                    --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
-- You must compile the wrapper file cntr_11_0_85571b722fff644c.vhd when simulating
-- the core, cntr_11_0_85571b722fff644c. When compiling the wrapper file, be sure to
-- reference the XilinxCoreLib VHDL simulation library. For detailed
-- instructions, please refer to the "CORE Generator Help".

-- The synthesis directives "translate_off/translate_on" specified
-- below are supported by Xilinx, Mentor Graphics and Synplicity
-- synthesis tools. Ensure they are correct for your synthesis tool(s).

LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
-- synthesis translate_off
LIBRARY XilinxCoreLib;
-- synthesis translate_on
ENTITY cntr_11_0_85571b722fff644c IS
  PORT (
    clk : IN STD_LOGIC;
    ce : IN STD_LOGIC;
    sinit : IN STD_LOGIC;
    q : OUT STD_LOGIC_VECTOR(30 DOWNTO 0)
  );
END cntr_11_0_85571b722fff644c;

ARCHITECTURE cntr_11_0_85571b722fff644c_a OF cntr_11_0_85571b722fff644c IS
-- synthesis translate_off
COMPONENT wrapped_cntr_11_0_85571b722fff644c
  PORT (
    clk : IN STD_LOGIC;
    ce : IN STD_LOGIC;
    sinit : IN STD_LOGIC;
    q : OUT STD_LOGIC_VECTOR(30 DOWNTO 0)
  );
END COMPONENT;

-- Configuration specification
  FOR ALL : wrapped_cntr_11_0_85571b722fff644c USE ENTITY XilinxCoreLib.c_counter_binary_v11_0(behavioral)
    GENERIC MAP (
      c_ainit_val => "0",
      c_ce_overrides_sync => 0,
      c_count_by => "1",
      c_count_mode => 0,
      c_count_to => "1",
      c_fb_latency => 0,
      c_has_ce => 1,
      c_has_load => 0,
      c_has_sclr => 0,
      c_has_sinit => 1,
      c_has_sset => 0,
      c_has_thresh0 => 0,
      c_implementation => 0,
      c_latency => 1,
      c_load_low => 0,
      c_restrict_count => 0,
      c_sclr_overrides_sset => 1,
      c_sinit_val => "11",
      c_thresh0_value => "1",
      c_verbosity => 0,
      c_width => 31,
      c_xdevicefamily => "virtex5"
    );
-- synthesis translate_on
BEGIN
-- synthesis translate_off
U0 : wrapped_cntr_11_0_85571b722fff644c
  PORT MAP (
    clk => clk,
    ce => ce,
    sinit => sinit,
    q => q
  );
-- synthesis translate_on

END cntr_11_0_85571b722fff644c_a;
--------------------------------------------------------------------------------
--    This file is owned and controlled by Xilinx and must be used solely     --
--    for design, simulation, implementation and creation of design files     --
--    limited to Xilinx devices or technologies. Use with non-Xilinx          --
--    devices or technologies is expressly prohibited and immediately         --
--    terminates your license.                                                --
--                                                                            --
--    XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" SOLELY    --
--    FOR USE IN DEVELOPING PROGRAMS AND SOLUTIONS FOR XILINX DEVICES.  BY    --
--    PROVIDING THIS DESIGN, CODE, OR INFORMATION AS ONE POSSIBLE             --
--    IMPLEMENTATION OF THIS FEATURE, APPLICATION OR STANDARD, XILINX IS      --
--    MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION IS FREE FROM ANY      --
--    CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE FOR OBTAINING ANY       --
--    RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.  XILINX EXPRESSLY       --
--    DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO THE ADEQUACY OF THE   --
--    IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OR          --
--    REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE FROM CLAIMS OF         --
--    INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A   --
--    PARTICULAR PURPOSE.                                                     --
--                                                                            --
--    Xilinx products are not intended for use in life support appliances,    --
--    devices, or systems.  Use in such applications are expressly            --
--    prohibited.                                                             --
--                                                                            --
--    (c) Copyright 1995-2014 Xilinx, Inc.                                    --
--    All rights reserved.                                                    --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
-- You must compile the wrapper file bmg_72_3de7891ec729adb4.vhd when simulating
-- the core, bmg_72_3de7891ec729adb4. When compiling the wrapper file, be sure to
-- reference the XilinxCoreLib VHDL simulation library. For detailed
-- instructions, please refer to the "CORE Generator Help".

-- The synthesis directives "translate_off/translate_on" specified
-- below are supported by Xilinx, Mentor Graphics and Synplicity
-- synthesis tools. Ensure they are correct for your synthesis tool(s).

LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
-- synthesis translate_off
LIBRARY XilinxCoreLib;
-- synthesis translate_on
ENTITY bmg_72_3de7891ec729adb4 IS
  PORT (
    clka : IN STD_LOGIC;
    ena : IN STD_LOGIC;
    wea : IN STD_LOGIC_VECTOR(0 DOWNTO 0);
    addra : IN STD_LOGIC_VECTOR(3 DOWNTO 0);
    dina : IN STD_LOGIC_VECTOR(35 DOWNTO 0);
    douta : OUT STD_LOGIC_VECTOR(35 DOWNTO 0)
  );
END bmg_72_3de7891ec729adb4;

ARCHITECTURE bmg_72_3de7891ec729adb4_a OF bmg_72_3de7891ec729adb4 IS
-- synthesis translate_off
COMPONENT wrapped_bmg_72_3de7891ec729adb4
  PORT (
    clka : IN STD_LOGIC;
    ena : IN STD_LOGIC;
    wea : IN STD_LOGIC_VECTOR(0 DOWNTO 0);
    addra : IN STD_LOGIC_VECTOR(3 DOWNTO 0);
    dina : IN STD_LOGIC_VECTOR(35 DOWNTO 0);
    douta : OUT STD_LOGIC_VECTOR(35 DOWNTO 0)
  );
END COMPONENT;

-- Configuration specification
  FOR ALL : wrapped_bmg_72_3de7891ec729adb4 USE ENTITY XilinxCoreLib.blk_mem_gen_v7_2(behavioral)
    GENERIC MAP (
      c_addra_width => 4,
      c_addrb_width => 4,
      c_algorithm => 1,
      c_axi_id_width => 4,
      c_axi_slave_type => 0,
      c_axi_type => 1,
      c_byte_size => 9,
      c_common_clk => 0,
      c_default_data => "0",
      c_disable_warn_bhv_coll => 0,
      c_disable_warn_bhv_range => 0,
      c_enable_32bit_address => 0,
      c_family => "virtex5",
      c_has_axi_id => 0,
      c_has_ena => 1,
      c_has_enb => 0,
      c_has_injecterr => 0,
      c_has_mem_output_regs_a => 1,
      c_has_mem_output_regs_b => 0,
      c_has_mux_output_regs_a => 0,
      c_has_mux_output_regs_b => 0,
      c_has_regcea => 0,
      c_has_regceb => 0,
      c_has_rsta => 0,
      c_has_rstb => 0,
      c_has_softecc_input_regs_a => 0,
      c_has_softecc_output_regs_b => 0,
      c_init_file_name => "bmg_72_3de7891ec729adb4.mif",
      c_inita_val => "0",
      c_initb_val => "0",
      c_interface_type => 0,
      c_load_init_file => 1,
      c_mem_type => 0,
      c_mux_pipeline_stages => 0,
      c_prim_type => 1,
      c_read_depth_a => 16,
      c_read_depth_b => 16,
      c_read_width_a => 36,
      c_read_width_b => 36,
      c_rst_priority_a => "CE",
      c_rst_priority_b => "CE",
      c_rst_type => "SYNC",
      c_rstram_a => 0,
      c_rstram_b => 0,
      c_sim_collision_check => "ALL",
      c_use_byte_wea => 0,
      c_use_byte_web => 0,
      c_use_default_data => 0,
      c_use_ecc => 0,
      c_use_softecc => 0,
      c_wea_width => 1,
      c_web_width => 1,
      c_write_depth_a => 16,
      c_write_depth_b => 16,
      c_write_mode_a => "READ_FIRST",
      c_write_mode_b => "WRITE_FIRST",
      c_write_width_a => 36,
      c_write_width_b => 36,
      c_xdevicefamily => "virtex5"
    );
-- synthesis translate_on
BEGIN
-- synthesis translate_off
U0 : wrapped_bmg_72_3de7891ec729adb4
  PORT MAP (
    clka => clka,
    ena => ena,
    wea => wea,
    addra => addra,
    dina => dina,
    douta => douta
  );
-- synthesis translate_on

END bmg_72_3de7891ec729adb4_a;
--------------------------------------------------------------------------------
--    This file is owned and controlled by Xilinx and must be used solely     --
--    for design, simulation, implementation and creation of design files     --
--    limited to Xilinx devices or technologies. Use with non-Xilinx          --
--    devices or technologies is expressly prohibited and immediately         --
--    terminates your license.                                                --
--                                                                            --
--    XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" SOLELY    --
--    FOR USE IN DEVELOPING PROGRAMS AND SOLUTIONS FOR XILINX DEVICES.  BY    --
--    PROVIDING THIS DESIGN, CODE, OR INFORMATION AS ONE POSSIBLE             --
--    IMPLEMENTATION OF THIS FEATURE, APPLICATION OR STANDARD, XILINX IS      --
--    MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION IS FREE FROM ANY      --
--    CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE FOR OBTAINING ANY       --
--    RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.  XILINX EXPRESSLY       --
--    DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO THE ADEQUACY OF THE   --
--    IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OR          --
--    REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE FROM CLAIMS OF         --
--    INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A   --
--    PARTICULAR PURPOSE.                                                     --
--                                                                            --
--    Xilinx products are not intended for use in life support appliances,    --
--    devices, or systems.  Use in such applications are expressly            --
--    prohibited.                                                             --
--                                                                            --
--    (c) Copyright 1995-2014 Xilinx, Inc.                                    --
--    All rights reserved.                                                    --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
-- You must compile the wrapper file dmg_72_31a1909e3929c7f7.vhd when simulating
-- the core, dmg_72_31a1909e3929c7f7. When compiling the wrapper file, be sure to
-- reference the XilinxCoreLib VHDL simulation library. For detailed
-- instructions, please refer to the "CORE Generator Help".

-- The synthesis directives "translate_off/translate_on" specified
-- below are supported by Xilinx, Mentor Graphics and Synplicity
-- synthesis tools. Ensure they are correct for your synthesis tool(s).

LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
-- synthesis translate_off
LIBRARY XilinxCoreLib;
-- synthesis translate_on
ENTITY dmg_72_31a1909e3929c7f7 IS
  PORT (
    a : IN STD_LOGIC_VECTOR(3 DOWNTO 0);
    clk : IN STD_LOGIC;
    qspo_ce : IN STD_LOGIC;
    qspo : OUT STD_LOGIC_VECTOR(17 DOWNTO 0)
  );
END dmg_72_31a1909e3929c7f7;

ARCHITECTURE dmg_72_31a1909e3929c7f7_a OF dmg_72_31a1909e3929c7f7 IS
-- synthesis translate_off
COMPONENT wrapped_dmg_72_31a1909e3929c7f7
  PORT (
    a : IN STD_LOGIC_VECTOR(3 DOWNTO 0);
    clk : IN STD_LOGIC;
    qspo_ce : IN STD_LOGIC;
    qspo : OUT STD_LOGIC_VECTOR(17 DOWNTO 0)
  );
END COMPONENT;

-- Configuration specification
  FOR ALL : wrapped_dmg_72_31a1909e3929c7f7 USE ENTITY XilinxCoreLib.dist_mem_gen_v7_2(behavioral)
    GENERIC MAP (
      c_addr_width => 4,
      c_default_data => "0",
      c_depth => 16,
      c_family => "virtex5",
      c_has_clk => 1,
      c_has_d => 0,
      c_has_dpo => 0,
      c_has_dpra => 0,
      c_has_i_ce => 0,
      c_has_qdpo => 0,
      c_has_qdpo_ce => 0,
      c_has_qdpo_clk => 0,
      c_has_qdpo_rst => 0,
      c_has_qdpo_srst => 0,
      c_has_qspo => 1,
      c_has_qspo_ce => 1,
      c_has_qspo_rst => 0,
      c_has_qspo_srst => 0,
      c_has_spo => 0,
      c_has_spra => 0,
      c_has_we => 0,
      c_mem_init_file => "dmg_72_31a1909e3929c7f7.mif",
      c_mem_type => 0,
      c_parser_type => 1,
      c_pipeline_stages => 0,
      c_qce_joined => 0,
      c_qualify_we => 0,
      c_read_mif => 1,
      c_reg_a_d_inputs => 0,
      c_reg_dpra_input => 0,
      c_sync_enable => 1,
      c_width => 18
    );
-- synthesis translate_on
BEGIN
-- synthesis translate_off
U0 : wrapped_dmg_72_31a1909e3929c7f7
  PORT MAP (
    a => a,
    clk => clk,
    qspo_ce => qspo_ce,
    qspo => qspo
  );
-- synthesis translate_on

END dmg_72_31a1909e3929c7f7_a;
--------------------------------------------------------------------------------
--    This file is owned and controlled by Xilinx and must be used solely     --
--    for design, simulation, implementation and creation of design files     --
--    limited to Xilinx devices or technologies. Use with non-Xilinx          --
--    devices or technologies is expressly prohibited and immediately         --
--    terminates your license.                                                --
--                                                                            --
--    XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" SOLELY    --
--    FOR USE IN DEVELOPING PROGRAMS AND SOLUTIONS FOR XILINX DEVICES.  BY    --
--    PROVIDING THIS DESIGN, CODE, OR INFORMATION AS ONE POSSIBLE             --
--    IMPLEMENTATION OF THIS FEATURE, APPLICATION OR STANDARD, XILINX IS      --
--    MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION IS FREE FROM ANY      --
--    CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE FOR OBTAINING ANY       --
--    RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.  XILINX EXPRESSLY       --
--    DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO THE ADEQUACY OF THE   --
--    IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OR          --
--    REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE FROM CLAIMS OF         --
--    INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A   --
--    PARTICULAR PURPOSE.                                                     --
--                                                                            --
--    Xilinx products are not intended for use in life support appliances,    --
--    devices, or systems.  Use in such applications are expressly            --
--    prohibited.                                                             --
--                                                                            --
--    (c) Copyright 1995-2014 Xilinx, Inc.                                    --
--    All rights reserved.                                                    --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
-- You must compile the wrapper file bmg_72_b3ad50e1afdb9e3d.vhd when simulating
-- the core, bmg_72_b3ad50e1afdb9e3d. When compiling the wrapper file, be sure to
-- reference the XilinxCoreLib VHDL simulation library. For detailed
-- instructions, please refer to the "CORE Generator Help".

-- The synthesis directives "translate_off/translate_on" specified
-- below are supported by Xilinx, Mentor Graphics and Synplicity
-- synthesis tools. Ensure they are correct for your synthesis tool(s).

LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
-- synthesis translate_off
LIBRARY XilinxCoreLib;
-- synthesis translate_on
ENTITY bmg_72_b3ad50e1afdb9e3d IS
  PORT (
    clka : IN STD_LOGIC;
    ena : IN STD_LOGIC;
    addra : IN STD_LOGIC_VECTOR(12 DOWNTO 0);
    douta : OUT STD_LOGIC_VECTOR(12 DOWNTO 0)
  );
END bmg_72_b3ad50e1afdb9e3d;

ARCHITECTURE bmg_72_b3ad50e1afdb9e3d_a OF bmg_72_b3ad50e1afdb9e3d IS
-- synthesis translate_off
COMPONENT wrapped_bmg_72_b3ad50e1afdb9e3d
  PORT (
    clka : IN STD_LOGIC;
    ena : IN STD_LOGIC;
    addra : IN STD_LOGIC_VECTOR(12 DOWNTO 0);
    douta : OUT STD_LOGIC_VECTOR(12 DOWNTO 0)
  );
END COMPONENT;

-- Configuration specification
  FOR ALL : wrapped_bmg_72_b3ad50e1afdb9e3d USE ENTITY XilinxCoreLib.blk_mem_gen_v7_2(behavioral)
    GENERIC MAP (
      c_addra_width => 13,
      c_addrb_width => 13,
      c_algorithm => 1,
      c_axi_id_width => 4,
      c_axi_slave_type => 0,
      c_axi_type => 1,
      c_byte_size => 9,
      c_common_clk => 0,
      c_default_data => "0",
      c_disable_warn_bhv_coll => 0,
      c_disable_warn_bhv_range => 0,
      c_enable_32bit_address => 0,
      c_family => "virtex5",
      c_has_axi_id => 0,
      c_has_ena => 1,
      c_has_enb => 0,
      c_has_injecterr => 0,
      c_has_mem_output_regs_a => 0,
      c_has_mem_output_regs_b => 0,
      c_has_mux_output_regs_a => 0,
      c_has_mux_output_regs_b => 0,
      c_has_regcea => 0,
      c_has_regceb => 0,
      c_has_rsta => 0,
      c_has_rstb => 0,
      c_has_softecc_input_regs_a => 0,
      c_has_softecc_output_regs_b => 0,
      c_init_file_name => "bmg_72_b3ad50e1afdb9e3d.mif",
      c_inita_val => "0",
      c_initb_val => "0",
      c_interface_type => 0,
      c_load_init_file => 1,
      c_mem_type => 3,
      c_mux_pipeline_stages => 0,
      c_prim_type => 1,
      c_read_depth_a => 8192,
      c_read_depth_b => 8192,
      c_read_width_a => 13,
      c_read_width_b => 13,
      c_rst_priority_a => "CE",
      c_rst_priority_b => "CE",
      c_rst_type => "SYNC",
      c_rstram_a => 0,
      c_rstram_b => 0,
      c_sim_collision_check => "ALL",
      c_use_byte_wea => 0,
      c_use_byte_web => 0,
      c_use_default_data => 0,
      c_use_ecc => 0,
      c_use_softecc => 0,
      c_wea_width => 1,
      c_web_width => 1,
      c_write_depth_a => 8192,
      c_write_depth_b => 8192,
      c_write_mode_a => "WRITE_FIRST",
      c_write_mode_b => "WRITE_FIRST",
      c_write_width_a => 13,
      c_write_width_b => 13,
      c_xdevicefamily => "virtex5"
    );
-- synthesis translate_on
BEGIN
-- synthesis translate_off
U0 : wrapped_bmg_72_b3ad50e1afdb9e3d
  PORT MAP (
    clka => clka,
    ena => ena,
    addra => addra,
    douta => douta
  );
-- synthesis translate_on

END bmg_72_b3ad50e1afdb9e3d_a;
--------------------------------------------------------------------------------
--    This file is owned and controlled by Xilinx and must be used solely     --
--    for design, simulation, implementation and creation of design files     --
--    limited to Xilinx devices or technologies. Use with non-Xilinx          --
--    devices or technologies is expressly prohibited and immediately         --
--    terminates your license.                                                --
--                                                                            --
--    XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" SOLELY    --
--    FOR USE IN DEVELOPING PROGRAMS AND SOLUTIONS FOR XILINX DEVICES.  BY    --
--    PROVIDING THIS DESIGN, CODE, OR INFORMATION AS ONE POSSIBLE             --
--    IMPLEMENTATION OF THIS FEATURE, APPLICATION OR STANDARD, XILINX IS      --
--    MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION IS FREE FROM ANY      --
--    CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE FOR OBTAINING ANY       --
--    RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.  XILINX EXPRESSLY       --
--    DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO THE ADEQUACY OF THE   --
--    IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OR          --
--    REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE FROM CLAIMS OF         --
--    INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A   --
--    PARTICULAR PURPOSE.                                                     --
--                                                                            --
--    Xilinx products are not intended for use in life support appliances,    --
--    devices, or systems.  Use in such applications are expressly            --
--    prohibited.                                                             --
--                                                                            --
--    (c) Copyright 1995-2014 Xilinx, Inc.                                    --
--    All rights reserved.                                                    --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
-- You must compile the wrapper file addsb_11_0_6c8b791c8b797704.vhd when simulating
-- the core, addsb_11_0_6c8b791c8b797704. When compiling the wrapper file, be sure to
-- reference the XilinxCoreLib VHDL simulation library. For detailed
-- instructions, please refer to the "CORE Generator Help".

-- The synthesis directives "translate_off/translate_on" specified
-- below are supported by Xilinx, Mentor Graphics and Synplicity
-- synthesis tools. Ensure they are correct for your synthesis tool(s).

LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
-- synthesis translate_off
LIBRARY XilinxCoreLib;
-- synthesis translate_on
ENTITY addsb_11_0_6c8b791c8b797704 IS
  PORT (
    a : IN STD_LOGIC_VECTOR(20 DOWNTO 0);
    b : IN STD_LOGIC_VECTOR(20 DOWNTO 0);
    clk : IN STD_LOGIC;
    ce : IN STD_LOGIC;
    s : OUT STD_LOGIC_VECTOR(20 DOWNTO 0)
  );
END addsb_11_0_6c8b791c8b797704;

ARCHITECTURE addsb_11_0_6c8b791c8b797704_a OF addsb_11_0_6c8b791c8b797704 IS
-- synthesis translate_off
COMPONENT wrapped_addsb_11_0_6c8b791c8b797704
  PORT (
    a : IN STD_LOGIC_VECTOR(20 DOWNTO 0);
    b : IN STD_LOGIC_VECTOR(20 DOWNTO 0);
    clk : IN STD_LOGIC;
    ce : IN STD_LOGIC;
    s : OUT STD_LOGIC_VECTOR(20 DOWNTO 0)
  );
END COMPONENT;

-- Configuration specification
  FOR ALL : wrapped_addsb_11_0_6c8b791c8b797704 USE ENTITY XilinxCoreLib.c_addsub_v11_0(behavioral)
    GENERIC MAP (
      c_a_type => 0,
      c_a_width => 21,
      c_add_mode => 0,
      c_ainit_val => "0",
      c_b_constant => 0,
      c_b_type => 0,
      c_b_value => "000000000000000000000",
      c_b_width => 21,
      c_borrow_low => 1,
      c_bypass_low => 0,
      c_ce_overrides_bypass => 1,
      c_ce_overrides_sclr => 0,
      c_has_bypass => 0,
      c_has_c_in => 0,
      c_has_c_out => 0,
      c_has_ce => 1,
      c_has_sclr => 0,
      c_has_sinit => 0,
      c_has_sset => 0,
      c_implementation => 0,
      c_latency => 1,
      c_out_width => 21,
      c_sclr_overrides_sset => 1,
      c_sinit_val => "0",
      c_verbosity => 0,
      c_xdevicefamily => "virtex5"
    );
-- synthesis translate_on
BEGIN
-- synthesis translate_off
U0 : wrapped_addsb_11_0_6c8b791c8b797704
  PORT MAP (
    a => a,
    b => b,
    clk => clk,
    ce => ce,
    s => s
  );
-- synthesis translate_on

END addsb_11_0_6c8b791c8b797704_a;
--------------------------------------------------------------------------------
--    This file is owned and controlled by Xilinx and must be used solely     --
--    for design, simulation, implementation and creation of design files     --
--    limited to Xilinx devices or technologies. Use with non-Xilinx          --
--    devices or technologies is expressly prohibited and immediately         --
--    terminates your license.                                                --
--                                                                            --
--    XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" SOLELY    --
--    FOR USE IN DEVELOPING PROGRAMS AND SOLUTIONS FOR XILINX DEVICES.  BY    --
--    PROVIDING THIS DESIGN, CODE, OR INFORMATION AS ONE POSSIBLE             --
--    IMPLEMENTATION OF THIS FEATURE, APPLICATION OR STANDARD, XILINX IS      --
--    MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION IS FREE FROM ANY      --
--    CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE FOR OBTAINING ANY       --
--    RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.  XILINX EXPRESSLY       --
--    DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO THE ADEQUACY OF THE   --
--    IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OR          --
--    REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE FROM CLAIMS OF         --
--    INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A   --
--    PARTICULAR PURPOSE.                                                     --
--                                                                            --
--    Xilinx products are not intended for use in life support appliances,    --
--    devices, or systems.  Use in such applications are expressly            --
--    prohibited.                                                             --
--                                                                            --
--    (c) Copyright 1995-2014 Xilinx, Inc.                                    --
--    All rights reserved.                                                    --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
-- You must compile the wrapper file bmg_72_bf7d8227d376109b.vhd when simulating
-- the core, bmg_72_bf7d8227d376109b. When compiling the wrapper file, be sure to
-- reference the XilinxCoreLib VHDL simulation library. For detailed
-- instructions, please refer to the "CORE Generator Help".

-- The synthesis directives "translate_off/translate_on" specified
-- below are supported by Xilinx, Mentor Graphics and Synplicity
-- synthesis tools. Ensure they are correct for your synthesis tool(s).

LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
-- synthesis translate_off
LIBRARY XilinxCoreLib;
-- synthesis translate_on
ENTITY bmg_72_bf7d8227d376109b IS
  PORT (
    clka : IN STD_LOGIC;
    ena : IN STD_LOGIC;
    addra : IN STD_LOGIC_VECTOR(2 DOWNTO 0);
    douta : OUT STD_LOGIC_VECTOR(17 DOWNTO 0)
  );
END bmg_72_bf7d8227d376109b;

ARCHITECTURE bmg_72_bf7d8227d376109b_a OF bmg_72_bf7d8227d376109b IS
-- synthesis translate_off
COMPONENT wrapped_bmg_72_bf7d8227d376109b
  PORT (
    clka : IN STD_LOGIC;
    ena : IN STD_LOGIC;
    addra : IN STD_LOGIC_VECTOR(2 DOWNTO 0);
    douta : OUT STD_LOGIC_VECTOR(17 DOWNTO 0)
  );
END COMPONENT;

-- Configuration specification
  FOR ALL : wrapped_bmg_72_bf7d8227d376109b USE ENTITY XilinxCoreLib.blk_mem_gen_v7_2(behavioral)
    GENERIC MAP (
      c_addra_width => 3,
      c_addrb_width => 3,
      c_algorithm => 1,
      c_axi_id_width => 4,
      c_axi_slave_type => 0,
      c_axi_type => 1,
      c_byte_size => 9,
      c_common_clk => 0,
      c_default_data => "0",
      c_disable_warn_bhv_coll => 0,
      c_disable_warn_bhv_range => 0,
      c_enable_32bit_address => 0,
      c_family => "virtex5",
      c_has_axi_id => 0,
      c_has_ena => 1,
      c_has_enb => 0,
      c_has_injecterr => 0,
      c_has_mem_output_regs_a => 1,
      c_has_mem_output_regs_b => 0,
      c_has_mux_output_regs_a => 0,
      c_has_mux_output_regs_b => 0,
      c_has_regcea => 0,
      c_has_regceb => 0,
      c_has_rsta => 0,
      c_has_rstb => 0,
      c_has_softecc_input_regs_a => 0,
      c_has_softecc_output_regs_b => 0,
      c_init_file_name => "bmg_72_bf7d8227d376109b.mif",
      c_inita_val => "0",
      c_initb_val => "0",
      c_interface_type => 0,
      c_load_init_file => 1,
      c_mem_type => 3,
      c_mux_pipeline_stages => 0,
      c_prim_type => 1,
      c_read_depth_a => 8,
      c_read_depth_b => 8,
      c_read_width_a => 18,
      c_read_width_b => 18,
      c_rst_priority_a => "CE",
      c_rst_priority_b => "CE",
      c_rst_type => "SYNC",
      c_rstram_a => 0,
      c_rstram_b => 0,
      c_sim_collision_check => "ALL",
      c_use_byte_wea => 0,
      c_use_byte_web => 0,
      c_use_default_data => 0,
      c_use_ecc => 0,
      c_use_softecc => 0,
      c_wea_width => 1,
      c_web_width => 1,
      c_write_depth_a => 8,
      c_write_depth_b => 8,
      c_write_mode_a => "WRITE_FIRST",
      c_write_mode_b => "WRITE_FIRST",
      c_write_width_a => 18,
      c_write_width_b => 18,
      c_xdevicefamily => "virtex5"
    );
-- synthesis translate_on
BEGIN
-- synthesis translate_off
U0 : wrapped_bmg_72_bf7d8227d376109b
  PORT MAP (
    clka => clka,
    ena => ena,
    addra => addra,
    douta => douta
  );
-- synthesis translate_on

END bmg_72_bf7d8227d376109b_a;
--------------------------------------------------------------------------------
--    This file is owned and controlled by Xilinx and must be used solely     --
--    for design, simulation, implementation and creation of design files     --
--    limited to Xilinx devices or technologies. Use with non-Xilinx          --
--    devices or technologies is expressly prohibited and immediately         --
--    terminates your license.                                                --
--                                                                            --
--    XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" SOLELY    --
--    FOR USE IN DEVELOPING PROGRAMS AND SOLUTIONS FOR XILINX DEVICES.  BY    --
--    PROVIDING THIS DESIGN, CODE, OR INFORMATION AS ONE POSSIBLE             --
--    IMPLEMENTATION OF THIS FEATURE, APPLICATION OR STANDARD, XILINX IS      --
--    MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION IS FREE FROM ANY      --
--    CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE FOR OBTAINING ANY       --
--    RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.  XILINX EXPRESSLY       --
--    DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO THE ADEQUACY OF THE   --
--    IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OR          --
--    REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE FROM CLAIMS OF         --
--    INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A   --
--    PARTICULAR PURPOSE.                                                     --
--                                                                            --
--    Xilinx products are not intended for use in life support appliances,    --
--    devices, or systems.  Use in such applications are expressly            --
--    prohibited.                                                             --
--                                                                            --
--    (c) Copyright 1995-2014 Xilinx, Inc.                                    --
--    All rights reserved.                                                    --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
-- You must compile the wrapper file bmg_72_8ed993a9a42f84a8.vhd when simulating
-- the core, bmg_72_8ed993a9a42f84a8. When compiling the wrapper file, be sure to
-- reference the XilinxCoreLib VHDL simulation library. For detailed
-- instructions, please refer to the "CORE Generator Help".

-- The synthesis directives "translate_off/translate_on" specified
-- below are supported by Xilinx, Mentor Graphics and Synplicity
-- synthesis tools. Ensure they are correct for your synthesis tool(s).

LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
-- synthesis translate_off
LIBRARY XilinxCoreLib;
-- synthesis translate_on
ENTITY bmg_72_8ed993a9a42f84a8 IS
  PORT (
    clka : IN STD_LOGIC;
    ena : IN STD_LOGIC;
    addra : IN STD_LOGIC_VECTOR(6 DOWNTO 0);
    douta : OUT STD_LOGIC_VECTOR(17 DOWNTO 0)
  );
END bmg_72_8ed993a9a42f84a8;

ARCHITECTURE bmg_72_8ed993a9a42f84a8_a OF bmg_72_8ed993a9a42f84a8 IS
-- synthesis translate_off
COMPONENT wrapped_bmg_72_8ed993a9a42f84a8
  PORT (
    clka : IN STD_LOGIC;
    ena : IN STD_LOGIC;
    addra : IN STD_LOGIC_VECTOR(6 DOWNTO 0);
    douta : OUT STD_LOGIC_VECTOR(17 DOWNTO 0)
  );
END COMPONENT;

-- Configuration specification
  FOR ALL : wrapped_bmg_72_8ed993a9a42f84a8 USE ENTITY XilinxCoreLib.blk_mem_gen_v7_2(behavioral)
    GENERIC MAP (
      c_addra_width => 7,
      c_addrb_width => 7,
      c_algorithm => 1,
      c_axi_id_width => 4,
      c_axi_slave_type => 0,
      c_axi_type => 1,
      c_byte_size => 9,
      c_common_clk => 0,
      c_default_data => "0",
      c_disable_warn_bhv_coll => 0,
      c_disable_warn_bhv_range => 0,
      c_enable_32bit_address => 0,
      c_family => "virtex5",
      c_has_axi_id => 0,
      c_has_ena => 1,
      c_has_enb => 0,
      c_has_injecterr => 0,
      c_has_mem_output_regs_a => 1,
      c_has_mem_output_regs_b => 0,
      c_has_mux_output_regs_a => 0,
      c_has_mux_output_regs_b => 0,
      c_has_regcea => 0,
      c_has_regceb => 0,
      c_has_rsta => 0,
      c_has_rstb => 0,
      c_has_softecc_input_regs_a => 0,
      c_has_softecc_output_regs_b => 0,
      c_init_file_name => "bmg_72_8ed993a9a42f84a8.mif",
      c_inita_val => "0",
      c_initb_val => "0",
      c_interface_type => 0,
      c_load_init_file => 1,
      c_mem_type => 3,
      c_mux_pipeline_stages => 0,
      c_prim_type => 1,
      c_read_depth_a => 128,
      c_read_depth_b => 128,
      c_read_width_a => 18,
      c_read_width_b => 18,
      c_rst_priority_a => "CE",
      c_rst_priority_b => "CE",
      c_rst_type => "SYNC",
      c_rstram_a => 0,
      c_rstram_b => 0,
      c_sim_collision_check => "ALL",
      c_use_byte_wea => 0,
      c_use_byte_web => 0,
      c_use_default_data => 0,
      c_use_ecc => 0,
      c_use_softecc => 0,
      c_wea_width => 1,
      c_web_width => 1,
      c_write_depth_a => 128,
      c_write_depth_b => 128,
      c_write_mode_a => "WRITE_FIRST",
      c_write_mode_b => "WRITE_FIRST",
      c_write_width_a => 18,
      c_write_width_b => 18,
      c_xdevicefamily => "virtex5"
    );
-- synthesis translate_on
BEGIN
-- synthesis translate_off
U0 : wrapped_bmg_72_8ed993a9a42f84a8
  PORT MAP (
    clka => clka,
    ena => ena,
    addra => addra,
    douta => douta
  );
-- synthesis translate_on

END bmg_72_8ed993a9a42f84a8_a;
--------------------------------------------------------------------------------
--    This file is owned and controlled by Xilinx and must be used solely     --
--    for design, simulation, implementation and creation of design files     --
--    limited to Xilinx devices or technologies. Use with non-Xilinx          --
--    devices or technologies is expressly prohibited and immediately         --
--    terminates your license.                                                --
--                                                                            --
--    XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" SOLELY    --
--    FOR USE IN DEVELOPING PROGRAMS AND SOLUTIONS FOR XILINX DEVICES.  BY    --
--    PROVIDING THIS DESIGN, CODE, OR INFORMATION AS ONE POSSIBLE             --
--    IMPLEMENTATION OF THIS FEATURE, APPLICATION OR STANDARD, XILINX IS      --
--    MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION IS FREE FROM ANY      --
--    CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE FOR OBTAINING ANY       --
--    RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.  XILINX EXPRESSLY       --
--    DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO THE ADEQUACY OF THE   --
--    IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OR          --
--    REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE FROM CLAIMS OF         --
--    INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A   --
--    PARTICULAR PURPOSE.                                                     --
--                                                                            --
--    Xilinx products are not intended for use in life support appliances,    --
--    devices, or systems.  Use in such applications are expressly            --
--    prohibited.                                                             --
--                                                                            --
--    (c) Copyright 1995-2014 Xilinx, Inc.                                    --
--    All rights reserved.                                                    --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
-- You must compile the wrapper file bmg_72_b1697c6003ecdb6f.vhd when simulating
-- the core, bmg_72_b1697c6003ecdb6f. When compiling the wrapper file, be sure to
-- reference the XilinxCoreLib VHDL simulation library. For detailed
-- instructions, please refer to the "CORE Generator Help".

-- The synthesis directives "translate_off/translate_on" specified
-- below are supported by Xilinx, Mentor Graphics and Synplicity
-- synthesis tools. Ensure they are correct for your synthesis tool(s).

LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
-- synthesis translate_off
LIBRARY XilinxCoreLib;
-- synthesis translate_on
ENTITY bmg_72_b1697c6003ecdb6f IS
  PORT (
    clka : IN STD_LOGIC;
    ena : IN STD_LOGIC;
    wea : IN STD_LOGIC_VECTOR(0 DOWNTO 0);
    addra : IN STD_LOGIC_VECTOR(12 DOWNTO 0);
    dina : IN STD_LOGIC_VECTOR(15 DOWNTO 0);
    douta : OUT STD_LOGIC_VECTOR(15 DOWNTO 0)
  );
END bmg_72_b1697c6003ecdb6f;

ARCHITECTURE bmg_72_b1697c6003ecdb6f_a OF bmg_72_b1697c6003ecdb6f IS
-- synthesis translate_off
COMPONENT wrapped_bmg_72_b1697c6003ecdb6f
  PORT (
    clka : IN STD_LOGIC;
    ena : IN STD_LOGIC;
    wea : IN STD_LOGIC_VECTOR(0 DOWNTO 0);
    addra : IN STD_LOGIC_VECTOR(12 DOWNTO 0);
    dina : IN STD_LOGIC_VECTOR(15 DOWNTO 0);
    douta : OUT STD_LOGIC_VECTOR(15 DOWNTO 0)
  );
END COMPONENT;

-- Configuration specification
  FOR ALL : wrapped_bmg_72_b1697c6003ecdb6f USE ENTITY XilinxCoreLib.blk_mem_gen_v7_2(behavioral)
    GENERIC MAP (
      c_addra_width => 13,
      c_addrb_width => 13,
      c_algorithm => 1,
      c_axi_id_width => 4,
      c_axi_slave_type => 0,
      c_axi_type => 1,
      c_byte_size => 9,
      c_common_clk => 0,
      c_default_data => "0",
      c_disable_warn_bhv_coll => 0,
      c_disable_warn_bhv_range => 0,
      c_enable_32bit_address => 0,
      c_family => "virtex5",
      c_has_axi_id => 0,
      c_has_ena => 1,
      c_has_enb => 0,
      c_has_injecterr => 0,
      c_has_mem_output_regs_a => 0,
      c_has_mem_output_regs_b => 0,
      c_has_mux_output_regs_a => 0,
      c_has_mux_output_regs_b => 0,
      c_has_regcea => 0,
      c_has_regceb => 0,
      c_has_rsta => 0,
      c_has_rstb => 0,
      c_has_softecc_input_regs_a => 0,
      c_has_softecc_output_regs_b => 0,
      c_init_file_name => "bmg_72_b1697c6003ecdb6f.mif",
      c_inita_val => "0",
      c_initb_val => "0",
      c_interface_type => 0,
      c_load_init_file => 1,
      c_mem_type => 0,
      c_mux_pipeline_stages => 0,
      c_prim_type => 1,
      c_read_depth_a => 8192,
      c_read_depth_b => 8192,
      c_read_width_a => 16,
      c_read_width_b => 16,
      c_rst_priority_a => "CE",
      c_rst_priority_b => "CE",
      c_rst_type => "SYNC",
      c_rstram_a => 0,
      c_rstram_b => 0,
      c_sim_collision_check => "ALL",
      c_use_byte_wea => 0,
      c_use_byte_web => 0,
      c_use_default_data => 0,
      c_use_ecc => 0,
      c_use_softecc => 0,
      c_wea_width => 1,
      c_web_width => 1,
      c_write_depth_a => 8192,
      c_write_depth_b => 8192,
      c_write_mode_a => "READ_FIRST",
      c_write_mode_b => "WRITE_FIRST",
      c_write_width_a => 16,
      c_write_width_b => 16,
      c_xdevicefamily => "virtex5"
    );
-- synthesis translate_on
BEGIN
-- synthesis translate_off
U0 : wrapped_bmg_72_b1697c6003ecdb6f
  PORT MAP (
    clka => clka,
    ena => ena,
    wea => wea,
    addra => addra,
    dina => dina,
    douta => douta
  );
-- synthesis translate_on

END bmg_72_b1697c6003ecdb6f_a;
--------------------------------------------------------------------------------
--    This file is owned and controlled by Xilinx and must be used solely     --
--    for design, simulation, implementation and creation of design files     --
--    limited to Xilinx devices or technologies. Use with non-Xilinx          --
--    devices or technologies is expressly prohibited and immediately         --
--    terminates your license.                                                --
--                                                                            --
--    XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" SOLELY    --
--    FOR USE IN DEVELOPING PROGRAMS AND SOLUTIONS FOR XILINX DEVICES.  BY    --
--    PROVIDING THIS DESIGN, CODE, OR INFORMATION AS ONE POSSIBLE             --
--    IMPLEMENTATION OF THIS FEATURE, APPLICATION OR STANDARD, XILINX IS      --
--    MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION IS FREE FROM ANY      --
--    CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE FOR OBTAINING ANY       --
--    RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.  XILINX EXPRESSLY       --
--    DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO THE ADEQUACY OF THE   --
--    IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OR          --
--    REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE FROM CLAIMS OF         --
--    INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A   --
--    PARTICULAR PURPOSE.                                                     --
--                                                                            --
--    Xilinx products are not intended for use in life support appliances,    --
--    devices, or systems.  Use in such applications are expressly            --
--    prohibited.                                                             --
--                                                                            --
--    (c) Copyright 1995-2014 Xilinx, Inc.                                    --
--    All rights reserved.                                                    --
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
-- You must compile the wrapper file cntr_11_0_9407b84ef10719d1.vhd when simulating
-- the core, cntr_11_0_9407b84ef10719d1. When compiling the wrapper file, be sure to
-- reference the XilinxCoreLib VHDL simulation library. For detailed
-- instructions, please refer to the "CORE Generator Help".

-- The synthesis directives "translate_off/translate_on" specified
-- below are supported by Xilinx, Mentor Graphics and Synplicity
-- synthesis tools. Ensure they are correct for your synthesis tool(s).

LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
-- synthesis translate_off
LIBRARY XilinxCoreLib;
-- synthesis translate_on
ENTITY cntr_11_0_9407b84ef10719d1 IS
  PORT (
    clk : IN STD_LOGIC;
    ce : IN STD_LOGIC;
    sclr : IN STD_LOGIC;
    q : OUT STD_LOGIC_VECTOR(47 DOWNTO 0)
  );
END cntr_11_0_9407b84ef10719d1;

ARCHITECTURE cntr_11_0_9407b84ef10719d1_a OF cntr_11_0_9407b84ef10719d1 IS
-- synthesis translate_off
COMPONENT wrapped_cntr_11_0_9407b84ef10719d1
  PORT (
    clk : IN STD_LOGIC;
    ce : IN STD_LOGIC;
    sclr : IN STD_LOGIC;
    q : OUT STD_LOGIC_VECTOR(47 DOWNTO 0)
  );
END COMPONENT;

-- Configuration specification
  FOR ALL : wrapped_cntr_11_0_9407b84ef10719d1 USE ENTITY XilinxCoreLib.c_counter_binary_v11_0(behavioral)
    GENERIC MAP (
      c_ainit_val => "0",
      c_ce_overrides_sync => 0,
      c_count_by => "1",
      c_count_mode => 0,
      c_count_to => "1",
      c_fb_latency => 0,
      c_has_ce => 1,
      c_has_load => 0,
      c_has_sclr => 1,
      c_has_sinit => 0,
      c_has_sset => 0,
      c_has_thresh0 => 0,
      c_implementation => 1,
      c_latency => 1,
      c_load_low => 0,
      c_restrict_count => 0,
      c_sclr_overrides_sset => 1,
      c_sinit_val => "0",
      c_thresh0_value => "1",
      c_verbosity => 0,
      c_width => 48,
      c_xdevicefamily => "virtex5"
    );
-- synthesis translate_on
BEGIN
-- synthesis translate_off
U0 : wrapped_cntr_11_0_9407b84ef10719d1
  PORT MAP (
    clk => clk,
    ce => ce,
    sclr => sclr,
    q => q
  );
-- synthesis translate_on

END cntr_11_0_9407b84ef10719d1_a;

-------------------------------------------------------------------
-- System Generator version 14.6 VHDL source file.
--
-- Copyright(C) 2013 by Xilinx, Inc.  All rights reserved.  This
-- text/file contains proprietary, confidential information of Xilinx,
-- Inc., is distributed under license from Xilinx, Inc., and may be used,
-- copied and/or disclosed only pursuant to the terms of a valid license
-- agreement with Xilinx, Inc.  Xilinx hereby grants you a license to use
-- this text/file solely for design, simulation, implementation and
-- creation of design files limited to Xilinx devices or technologies.
-- Use with non-Xilinx devices or technologies is expressly prohibited
-- and immediately terminates your license unless covered by a separate
-- agreement.
--
-- Xilinx is providing this design, code, or information "as is" solely
-- for use in developing programs and solutions for Xilinx devices.  By
-- providing this design, code, or information as one possible
-- implementation of this feature, application or standard, Xilinx is
-- making no representation that this implementation is free from any
-- claims of infringement.  You are responsible for obtaining any rights
-- you may require for your implementation.  Xilinx expressly disclaims
-- any warranty whatsoever with respect to the adequacy of the
-- implementation, including but not limited to warranties of
-- merchantability or fitness for a particular purpose.
--
-- Xilinx products are not intended for use in life support appliances,
-- devices, or systems.  Use in such applications is expressly prohibited.
--
-- Any modifications that are made to the source code are done at the user's
-- sole risk and will be unsupported.
--
-- This copyright and support notice must be retained as part of this
-- text at all times.  (c) Copyright 1995-2013 Xilinx, Inc.  All rights
-- reserved.
-------------------------------------------------------------------
library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
package conv_pkg is
    constant simulating : boolean := false
      -- synopsys translate_off
        or true
      -- synopsys translate_on
    ;
    constant xlUnsigned : integer := 1;
    constant xlSigned : integer := 2;
    constant xlFloat : integer := 3;
    constant xlWrap : integer := 1;
    constant xlSaturate : integer := 2;
    constant xlTruncate : integer := 1;
    constant xlRound : integer := 2;
    constant xlRoundBanker : integer := 3;
    constant xlAddMode : integer := 1;
    constant xlSubMode : integer := 2;
    attribute black_box : boolean;
    attribute syn_black_box : boolean;
    attribute fpga_dont_touch: string;
    attribute box_type :  string;
    attribute keep : string;
    attribute syn_keep : boolean;
    function std_logic_vector_to_unsigned(inp : std_logic_vector) return unsigned;
    function unsigned_to_std_logic_vector(inp : unsigned) return std_logic_vector;
    function std_logic_vector_to_signed(inp : std_logic_vector) return signed;
    function signed_to_std_logic_vector(inp : signed) return std_logic_vector;
    function unsigned_to_signed(inp : unsigned) return signed;
    function signed_to_unsigned(inp : signed) return unsigned;
    function pos(inp : std_logic_vector; arith : INTEGER) return boolean;
    function all_same(inp: std_logic_vector) return boolean;
    function all_zeros(inp: std_logic_vector) return boolean;
    function is_point_five(inp: std_logic_vector) return boolean;
    function all_ones(inp: std_logic_vector) return boolean;
    function convert_type (inp : std_logic_vector; old_width, old_bin_pt,
                           old_arith, new_width, new_bin_pt, new_arith,
                           quantization, overflow : INTEGER)
        return std_logic_vector;
    function cast (inp : std_logic_vector; old_bin_pt,
                   new_width, new_bin_pt, new_arith : INTEGER)
        return std_logic_vector;
    function shift_division_result(quotient, fraction: std_logic_vector;
                                   fraction_width, shift_value, shift_dir: INTEGER)
        return std_logic_vector;
    function shift_op (inp: std_logic_vector;
                       result_width, shift_value, shift_dir: INTEGER)
        return std_logic_vector;
    function vec_slice (inp : std_logic_vector; upper, lower : INTEGER)
        return std_logic_vector;
    function s2u_slice (inp : signed; upper, lower : INTEGER)
        return unsigned;
    function u2u_slice (inp : unsigned; upper, lower : INTEGER)
        return unsigned;
    function s2s_cast (inp : signed; old_bin_pt,
                   new_width, new_bin_pt : INTEGER)
        return signed;
    function u2s_cast (inp : unsigned; old_bin_pt,
                   new_width, new_bin_pt : INTEGER)
        return signed;
    function s2u_cast (inp : signed; old_bin_pt,
                   new_width, new_bin_pt : INTEGER)
        return unsigned;
    function u2u_cast (inp : unsigned; old_bin_pt,
                   new_width, new_bin_pt : INTEGER)
        return unsigned;
    function u2v_cast (inp : unsigned; old_bin_pt,
                   new_width, new_bin_pt : INTEGER)
        return std_logic_vector;
    function s2v_cast (inp : signed; old_bin_pt,
                   new_width, new_bin_pt : INTEGER)
        return std_logic_vector;
    function trunc (inp : std_logic_vector; old_width, old_bin_pt, old_arith,
                    new_width, new_bin_pt, new_arith : INTEGER)
        return std_logic_vector;
    function round_towards_inf (inp : std_logic_vector; old_width, old_bin_pt,
                                old_arith, new_width, new_bin_pt,
                                new_arith : INTEGER) return std_logic_vector;
    function round_towards_even (inp : std_logic_vector; old_width, old_bin_pt,
                                old_arith, new_width, new_bin_pt,
                                new_arith : INTEGER) return std_logic_vector;
    function max_signed(width : INTEGER) return std_logic_vector;
    function min_signed(width : INTEGER) return std_logic_vector;
    function saturation_arith(inp:  std_logic_vector;  old_width, old_bin_pt,
                              old_arith, new_width, new_bin_pt, new_arith
                              : INTEGER) return std_logic_vector;
    function wrap_arith(inp:  std_logic_vector;  old_width, old_bin_pt,
                        old_arith, new_width, new_bin_pt, new_arith : INTEGER)
                        return std_logic_vector;
    function fractional_bits(a_bin_pt, b_bin_pt: INTEGER) return INTEGER;
    function integer_bits(a_width, a_bin_pt, b_width, b_bin_pt: INTEGER)
        return INTEGER;
    function sign_ext(inp : std_logic_vector; new_width : INTEGER)
        return std_logic_vector;
    function zero_ext(inp : std_logic_vector; new_width : INTEGER)
        return std_logic_vector;
    function zero_ext(inp : std_logic; new_width : INTEGER)
        return std_logic_vector;
    function extend_MSB(inp : std_logic_vector; new_width, arith : INTEGER)
        return std_logic_vector;
    function align_input(inp : std_logic_vector; old_width, delta, new_arith,
                          new_width: INTEGER)
        return std_logic_vector;
    function pad_LSB(inp : std_logic_vector; new_width: integer)
        return std_logic_vector;
    function pad_LSB(inp : std_logic_vector; new_width, arith : integer)
        return std_logic_vector;
    function max(L, R: INTEGER) return INTEGER;
    function min(L, R: INTEGER) return INTEGER;
    function "="(left,right: STRING) return boolean;
    function boolean_to_signed (inp : boolean; width: integer)
        return signed;
    function boolean_to_unsigned (inp : boolean; width: integer)
        return unsigned;
    function boolean_to_vector (inp : boolean)
        return std_logic_vector;
    function std_logic_to_vector (inp : std_logic)
        return std_logic_vector;
    function integer_to_std_logic_vector (inp : integer;  width, arith : integer)
        return std_logic_vector;
    function std_logic_vector_to_integer (inp : std_logic_vector;  arith : integer)
        return integer;
    function std_logic_to_integer(constant inp : std_logic := '0')
        return integer;
    function bin_string_element_to_std_logic_vector (inp : string;  width, index : integer)
        return std_logic_vector;
    function bin_string_to_std_logic_vector (inp : string)
        return std_logic_vector;
    function hex_string_to_std_logic_vector (inp : string; width : integer)
        return std_logic_vector;
    function makeZeroBinStr (width : integer) return STRING;
    function and_reduce(inp: std_logic_vector) return std_logic;
    -- synopsys translate_off
    function is_binary_string_invalid (inp : string)
        return boolean;
    function is_binary_string_undefined (inp : string)
        return boolean;
    function is_XorU(inp : std_logic_vector)
        return boolean;
    function to_real(inp : std_logic_vector; bin_pt : integer; arith : integer)
        return real;
    function std_logic_to_real(inp : std_logic; bin_pt : integer; arith : integer)
        return real;
    function real_to_std_logic_vector (inp : real;  width, bin_pt, arith : integer)
        return std_logic_vector;
    function real_string_to_std_logic_vector (inp : string;  width, bin_pt, arith : integer)
        return std_logic_vector;
    constant display_precision : integer := 20;
    function real_to_string (inp : real) return string;
    function valid_bin_string(inp : string) return boolean;
    function std_logic_vector_to_bin_string(inp : std_logic_vector) return string;
    function std_logic_to_bin_string(inp : std_logic) return string;
    function std_logic_vector_to_bin_string_w_point(inp : std_logic_vector; bin_pt : integer)
        return string;
    function real_to_bin_string(inp : real;  width, bin_pt, arith : integer)
        return string;
    type stdlogic_to_char_t is array(std_logic) of character;
    constant to_char : stdlogic_to_char_t := (
        'U' => 'U',
        'X' => 'X',
        '0' => '0',
        '1' => '1',
        'Z' => 'Z',
        'W' => 'W',
        'L' => 'L',
        'H' => 'H',
        '-' => '-');
    -- synopsys translate_on
end conv_pkg;
package body conv_pkg is
    function std_logic_vector_to_unsigned(inp : std_logic_vector)
        return unsigned
    is
    begin
        return unsigned (inp);
    end;
    function unsigned_to_std_logic_vector(inp : unsigned)
        return std_logic_vector
    is
    begin
        return std_logic_vector(inp);
    end;
    function std_logic_vector_to_signed(inp : std_logic_vector)
        return signed
    is
    begin
        return  signed (inp);
    end;
    function signed_to_std_logic_vector(inp : signed)
        return std_logic_vector
    is
    begin
        return std_logic_vector(inp);
    end;
    function unsigned_to_signed (inp : unsigned)
        return signed
    is
    begin
        return signed(std_logic_vector(inp));
    end;
    function signed_to_unsigned (inp : signed)
        return unsigned
    is
    begin
        return unsigned(std_logic_vector(inp));
    end;
    function pos(inp : std_logic_vector; arith : INTEGER)
        return boolean
    is
        constant width : integer := inp'length;
        variable vec : std_logic_vector(width-1 downto 0);
    begin
        vec := inp;
        if arith = xlUnsigned then
            return true;
        else
            if vec(width-1) = '0' then
                return true;
            else
                return false;
            end if;
        end if;
        return true;
    end;
    function max_signed(width : INTEGER)
        return std_logic_vector
    is
        variable ones : std_logic_vector(width-2 downto 0);
        variable result : std_logic_vector(width-1 downto 0);
    begin
        ones := (others => '1');
        result(width-1) := '0';
        result(width-2 downto 0) := ones;
        return result;
    end;
    function min_signed(width : INTEGER)
        return std_logic_vector
    is
        variable zeros : std_logic_vector(width-2 downto 0);
        variable result : std_logic_vector(width-1 downto 0);
    begin
        zeros := (others => '0');
        result(width-1) := '1';
        result(width-2 downto 0) := zeros;
        return result;
    end;
    function and_reduce(inp: std_logic_vector) return std_logic
    is
        variable result: std_logic;
        constant width : integer := inp'length;
        variable vec : std_logic_vector(width-1 downto 0);
    begin
        vec := inp;
        result := vec(0);
        if width > 1 then
            for i in 1 to width-1 loop
                result := result and vec(i);
            end loop;
        end if;
        return result;
    end;
    function all_same(inp: std_logic_vector) return boolean
    is
        variable result: boolean;
        constant width : integer := inp'length;
        variable vec : std_logic_vector(width-1 downto 0);
    begin
        vec := inp;
        result := true;
        if width > 0 then
            for i in 1 to width-1 loop
                if vec(i) /= vec(0) then
                    result := false;
                end if;
            end loop;
        end if;
        return result;
    end;
    function all_zeros(inp: std_logic_vector)
        return boolean
    is
        constant width : integer := inp'length;
        variable vec : std_logic_vector(width-1 downto 0);
        variable zero : std_logic_vector(width-1 downto 0);
        variable result : boolean;
    begin
        zero := (others => '0');
        vec := inp;
        -- synopsys translate_off
        if (is_XorU(vec)) then
            return false;
        end if;
         -- synopsys translate_on
        if (std_logic_vector_to_unsigned(vec) = std_logic_vector_to_unsigned(zero)) then
            result := true;
        else
            result := false;
        end if;
        return result;
    end;
    function is_point_five(inp: std_logic_vector)
        return boolean
    is
        constant width : integer := inp'length;
        variable vec : std_logic_vector(width-1 downto 0);
        variable result : boolean;
    begin
        vec := inp;
        -- synopsys translate_off
        if (is_XorU(vec)) then
            return false;
        end if;
         -- synopsys translate_on
        if (width > 1) then
           if ((vec(width-1) = '1') and (all_zeros(vec(width-2 downto 0)) = true)) then
               result := true;
           else
               result := false;
           end if;
        else
           if (vec(width-1) = '1') then
               result := true;
           else
               result := false;
           end if;
        end if;
        return result;
    end;
    function all_ones(inp: std_logic_vector)
        return boolean
    is
        constant width : integer := inp'length;
        variable vec : std_logic_vector(width-1 downto 0);
        variable one : std_logic_vector(width-1 downto 0);
        variable result : boolean;
    begin
        one := (others => '1');
        vec := inp;
        -- synopsys translate_off
        if (is_XorU(vec)) then
            return false;
        end if;
         -- synopsys translate_on
        if (std_logic_vector_to_unsigned(vec) = std_logic_vector_to_unsigned(one)) then
            result := true;
        else
            result := false;
        end if;
        return result;
    end;
    function full_precision_num_width(quantization, overflow, old_width,
                                      old_bin_pt, old_arith,
                                      new_width, new_bin_pt, new_arith : INTEGER)
        return integer
    is
        variable result : integer;
    begin
        result := old_width + 2;
        return result;
    end;
    function quantized_num_width(quantization, overflow, old_width, old_bin_pt,
                                 old_arith, new_width, new_bin_pt, new_arith
                                 : INTEGER)
        return integer
    is
        variable right_of_dp, left_of_dp, result : integer;
    begin
        right_of_dp := max(new_bin_pt, old_bin_pt);
        left_of_dp := max((new_width - new_bin_pt), (old_width - old_bin_pt));
        result := (old_width + 2) + (new_bin_pt - old_bin_pt);
        return result;
    end;
    function convert_type (inp : std_logic_vector; old_width, old_bin_pt,
                           old_arith, new_width, new_bin_pt, new_arith,
                           quantization, overflow : INTEGER)
        return std_logic_vector
    is
        constant fp_width : integer :=
            full_precision_num_width(quantization, overflow, old_width,
                                     old_bin_pt, old_arith, new_width,
                                     new_bin_pt, new_arith);
        constant fp_bin_pt : integer := old_bin_pt;
        constant fp_arith : integer := old_arith;
        variable full_precision_result : std_logic_vector(fp_width-1 downto 0);
        constant q_width : integer :=
            quantized_num_width(quantization, overflow, old_width, old_bin_pt,
                                old_arith, new_width, new_bin_pt, new_arith);
        constant q_bin_pt : integer := new_bin_pt;
        constant q_arith : integer := old_arith;
        variable quantized_result : std_logic_vector(q_width-1 downto 0);
        variable result : std_logic_vector(new_width-1 downto 0);
    begin
        result := (others => '0');
        full_precision_result := cast(inp, old_bin_pt, fp_width, fp_bin_pt,
                                      fp_arith);
        if (quantization = xlRound) then
            quantized_result := round_towards_inf(full_precision_result,
                                                  fp_width, fp_bin_pt,
                                                  fp_arith, q_width, q_bin_pt,
                                                  q_arith);
        elsif (quantization = xlRoundBanker) then
            quantized_result := round_towards_even(full_precision_result,
                                                  fp_width, fp_bin_pt,
                                                  fp_arith, q_width, q_bin_pt,
                                                  q_arith);
        else
            quantized_result := trunc(full_precision_result, fp_width, fp_bin_pt,
                                      fp_arith, q_width, q_bin_pt, q_arith);
        end if;
        if (overflow = xlSaturate) then
            result := saturation_arith(quantized_result, q_width, q_bin_pt,
                                       q_arith, new_width, new_bin_pt, new_arith);
        else
             result := wrap_arith(quantized_result, q_width, q_bin_pt, q_arith,
                                  new_width, new_bin_pt, new_arith);
        end if;
        return result;
    end;
    function cast (inp : std_logic_vector; old_bin_pt, new_width,
                   new_bin_pt, new_arith : INTEGER)
        return std_logic_vector
    is
        constant old_width : integer := inp'length;
        constant left_of_dp : integer := (new_width - new_bin_pt)
                                         - (old_width - old_bin_pt);
        constant right_of_dp : integer := (new_bin_pt - old_bin_pt);
        variable vec : std_logic_vector(old_width-1 downto 0);
        variable result : std_logic_vector(new_width-1 downto 0);
        variable j   : integer;
    begin
        vec := inp;
        for i in new_width-1 downto 0 loop
            j := i - right_of_dp;
            if ( j > old_width-1) then
                if (new_arith = xlUnsigned) then
                    result(i) := '0';
                else
                    result(i) := vec(old_width-1);
                end if;
            elsif ( j >= 0) then
                result(i) := vec(j);
            else
                result(i) := '0';
            end if;
        end loop;
        return result;
    end;
    function shift_division_result(quotient, fraction: std_logic_vector;
                                   fraction_width, shift_value, shift_dir: INTEGER)
        return std_logic_vector
    is
        constant q_width : integer := quotient'length;
        constant f_width : integer := fraction'length;
        constant vec_MSB : integer := q_width+f_width-1;
        constant result_MSB : integer := q_width+fraction_width-1;
        constant result_LSB : integer := vec_MSB-result_MSB;
        variable vec : std_logic_vector(vec_MSB downto 0);
        variable result : std_logic_vector(result_MSB downto 0);
    begin
        vec := ( quotient & fraction );
        if shift_dir = 1 then
            for i in vec_MSB downto 0 loop
                if (i < shift_value) then
                     vec(i) := '0';
                else
                    vec(i) := vec(i-shift_value);
                end if;
            end loop;
        else
            for i in 0 to vec_MSB loop
                if (i > vec_MSB-shift_value) then
                    vec(i) := vec(vec_MSB);
                else
                    vec(i) := vec(i+shift_value);
                end if;
            end loop;
        end if;
        result := vec(vec_MSB downto result_LSB);
        return result;
    end;
    function shift_op (inp: std_logic_vector;
                       result_width, shift_value, shift_dir: INTEGER)
        return std_logic_vector
    is
        constant inp_width : integer := inp'length;
        constant vec_MSB : integer := inp_width-1;
        constant result_MSB : integer := result_width-1;
        constant result_LSB : integer := vec_MSB-result_MSB;
        variable vec : std_logic_vector(vec_MSB downto 0);
        variable result : std_logic_vector(result_MSB downto 0);
    begin
        vec := inp;
        if shift_dir = 1 then
            for i in vec_MSB downto 0 loop
                if (i < shift_value) then
                     vec(i) := '0';
                else
                    vec(i) := vec(i-shift_value);
                end if;
            end loop;
        else
            for i in 0 to vec_MSB loop
                if (i > vec_MSB-shift_value) then
                    vec(i) := vec(vec_MSB);
                else
                    vec(i) := vec(i+shift_value);
                end if;
            end loop;
        end if;
        result := vec(vec_MSB downto result_LSB);
        return result;
    end;
    function vec_slice (inp : std_logic_vector; upper, lower : INTEGER)
      return std_logic_vector
    is
    begin
        return inp(upper downto lower);
    end;
    function s2u_slice (inp : signed; upper, lower : INTEGER)
      return unsigned
    is
    begin
        return unsigned(vec_slice(std_logic_vector(inp), upper, lower));
    end;
    function u2u_slice (inp : unsigned; upper, lower : INTEGER)
      return unsigned
    is
    begin
        return unsigned(vec_slice(std_logic_vector(inp), upper, lower));
    end;
    function s2s_cast (inp : signed; old_bin_pt, new_width, new_bin_pt : INTEGER)
        return signed
    is
    begin
        return signed(cast(std_logic_vector(inp), old_bin_pt, new_width, new_bin_pt, xlSigned));
    end;
    function s2u_cast (inp : signed; old_bin_pt, new_width,
                   new_bin_pt : INTEGER)
        return unsigned
    is
    begin
        return unsigned(cast(std_logic_vector(inp), old_bin_pt, new_width, new_bin_pt, xlSigned));
    end;
    function u2s_cast (inp : unsigned; old_bin_pt, new_width,
                   new_bin_pt : INTEGER)
        return signed
    is
    begin
        return signed(cast(std_logic_vector(inp), old_bin_pt, new_width, new_bin_pt, xlUnsigned));
    end;
    function u2u_cast (inp : unsigned; old_bin_pt, new_width,
                   new_bin_pt : INTEGER)
        return unsigned
    is
    begin
        return unsigned(cast(std_logic_vector(inp), old_bin_pt, new_width, new_bin_pt, xlUnsigned));
    end;
    function u2v_cast (inp : unsigned; old_bin_pt, new_width,
                   new_bin_pt : INTEGER)
        return std_logic_vector
    is
    begin
        return cast(std_logic_vector(inp), old_bin_pt, new_width, new_bin_pt, xlUnsigned);
    end;
    function s2v_cast (inp : signed; old_bin_pt, new_width,
                   new_bin_pt : INTEGER)
        return std_logic_vector
    is
    begin
        return cast(std_logic_vector(inp), old_bin_pt, new_width, new_bin_pt, xlSigned);
    end;
    function boolean_to_signed (inp : boolean; width : integer)
        return signed
    is
        variable result : signed(width - 1 downto 0);
    begin
        result := (others => '0');
        if inp then
          result(0) := '1';
        else
          result(0) := '0';
        end if;
        return result;
    end;
    function boolean_to_unsigned (inp : boolean; width : integer)
        return unsigned
    is
        variable result : unsigned(width - 1 downto 0);
    begin
        result := (others => '0');
        if inp then
          result(0) := '1';
        else
          result(0) := '0';
        end if;
        return result;
    end;
    function boolean_to_vector (inp : boolean)
        return std_logic_vector
    is
        variable result : std_logic_vector(1 - 1 downto 0);
    begin
        result := (others => '0');
        if inp then
          result(0) := '1';
        else
          result(0) := '0';
        end if;
        return result;
    end;
    function std_logic_to_vector (inp : std_logic)
        return std_logic_vector
    is
        variable result : std_logic_vector(1 - 1 downto 0);
    begin
        result(0) := inp;
        return result;
    end;
    function trunc (inp : std_logic_vector; old_width, old_bin_pt, old_arith,
                                new_width, new_bin_pt, new_arith : INTEGER)
        return std_logic_vector
    is
        constant right_of_dp : integer := (old_bin_pt - new_bin_pt);
        variable vec : std_logic_vector(old_width-1 downto 0);
        variable result : std_logic_vector(new_width-1 downto 0);
    begin
        vec := inp;
        if right_of_dp >= 0 then
            if new_arith = xlUnsigned then
                result := zero_ext(vec(old_width-1 downto right_of_dp), new_width);
            else
                result := sign_ext(vec(old_width-1 downto right_of_dp), new_width);
            end if;
        else
            if new_arith = xlUnsigned then
                result := zero_ext(pad_LSB(vec, old_width +
                                           abs(right_of_dp)), new_width);
            else
                result := sign_ext(pad_LSB(vec, old_width +
                                           abs(right_of_dp)), new_width);
            end if;
        end if;
        return result;
    end;
    function round_towards_inf (inp : std_logic_vector; old_width, old_bin_pt,
                                old_arith, new_width, new_bin_pt, new_arith
                                : INTEGER)
        return std_logic_vector
    is
        constant right_of_dp : integer := (old_bin_pt - new_bin_pt);
        constant expected_new_width : integer :=  old_width - right_of_dp  + 1;
        variable vec : std_logic_vector(old_width-1 downto 0);
        variable one_or_zero : std_logic_vector(new_width-1 downto 0);
        variable truncated_val : std_logic_vector(new_width-1 downto 0);
        variable result : std_logic_vector(new_width-1 downto 0);
    begin
        vec := inp;
        if right_of_dp >= 0 then
            if new_arith = xlUnsigned then
                truncated_val := zero_ext(vec(old_width-1 downto right_of_dp),
                                          new_width);
            else
                truncated_val := sign_ext(vec(old_width-1 downto right_of_dp),
                                          new_width);
            end if;
        else
            if new_arith = xlUnsigned then
                truncated_val := zero_ext(pad_LSB(vec, old_width +
                                                  abs(right_of_dp)), new_width);
            else
                truncated_val := sign_ext(pad_LSB(vec, old_width +
                                                  abs(right_of_dp)), new_width);
            end if;
        end if;
        one_or_zero := (others => '0');
        if (new_arith = xlSigned) then
            if (vec(old_width-1) = '0') then
                one_or_zero(0) := '1';
            end if;
            if (right_of_dp >= 2) and (right_of_dp <= old_width) then
                if (all_zeros(vec(right_of_dp-2 downto 0)) = false) then
                    one_or_zero(0) := '1';
                end if;
            end if;
            if (right_of_dp >= 1) and (right_of_dp <= old_width) then
                if vec(right_of_dp-1) = '0' then
                    one_or_zero(0) := '0';
                end if;
            else
                one_or_zero(0) := '0';
            end if;
        else
            if (right_of_dp >= 1) and (right_of_dp <= old_width) then
                one_or_zero(0) :=  vec(right_of_dp-1);
            end if;
        end if;
        if new_arith = xlSigned then
            result := signed_to_std_logic_vector(std_logic_vector_to_signed(truncated_val) +
                                                 std_logic_vector_to_signed(one_or_zero));
        else
            result := unsigned_to_std_logic_vector(std_logic_vector_to_unsigned(truncated_val) +
                                                  std_logic_vector_to_unsigned(one_or_zero));
        end if;
        return result;
    end;
    function round_towards_even (inp : std_logic_vector; old_width, old_bin_pt,
                                old_arith, new_width, new_bin_pt, new_arith
                                : INTEGER)
        return std_logic_vector
    is
        constant right_of_dp : integer := (old_bin_pt - new_bin_pt);
        constant expected_new_width : integer :=  old_width - right_of_dp  + 1;
        variable vec : std_logic_vector(old_width-1 downto 0);
        variable one_or_zero : std_logic_vector(new_width-1 downto 0);
        variable truncated_val : std_logic_vector(new_width-1 downto 0);
        variable result : std_logic_vector(new_width-1 downto 0);
    begin
        vec := inp;
        if right_of_dp >= 0 then
            if new_arith = xlUnsigned then
                truncated_val := zero_ext(vec(old_width-1 downto right_of_dp),
                                          new_width);
            else
                truncated_val := sign_ext(vec(old_width-1 downto right_of_dp),
                                          new_width);
            end if;
        else
            if new_arith = xlUnsigned then
                truncated_val := zero_ext(pad_LSB(vec, old_width +
                                                  abs(right_of_dp)), new_width);
            else
                truncated_val := sign_ext(pad_LSB(vec, old_width +
                                                  abs(right_of_dp)), new_width);
            end if;
        end if;
        one_or_zero := (others => '0');
        if (right_of_dp >= 1) and (right_of_dp <= old_width) then
            if (is_point_five(vec(right_of_dp-1 downto 0)) = false) then
                one_or_zero(0) :=  vec(right_of_dp-1);
            else
                one_or_zero(0) :=  vec(right_of_dp);
            end if;
        end if;
        if new_arith = xlSigned then
            result := signed_to_std_logic_vector(std_logic_vector_to_signed(truncated_val) +
                                                 std_logic_vector_to_signed(one_or_zero));
        else
            result := unsigned_to_std_logic_vector(std_logic_vector_to_unsigned(truncated_val) +
                                                  std_logic_vector_to_unsigned(one_or_zero));
        end if;
        return result;
    end;
    function saturation_arith(inp:  std_logic_vector;  old_width, old_bin_pt,
                              old_arith, new_width, new_bin_pt, new_arith
                              : INTEGER)
        return std_logic_vector
    is
        constant left_of_dp : integer := (old_width - old_bin_pt) -
                                         (new_width - new_bin_pt);
        variable vec : std_logic_vector(old_width-1 downto 0);
        variable result : std_logic_vector(new_width-1 downto 0);
        variable overflow : boolean;
    begin
        vec := inp;
        overflow := true;
        result := (others => '0');
        if (new_width >= old_width) then
            overflow := false;
        end if;
        if ((old_arith = xlSigned and new_arith = xlSigned) and (old_width > new_width)) then
            if all_same(vec(old_width-1 downto new_width-1)) then
                overflow := false;
            end if;
        end if;
        if (old_arith = xlSigned and new_arith = xlUnsigned) then
            if (old_width > new_width) then
                if all_zeros(vec(old_width-1 downto new_width)) then
                    overflow := false;
                end if;
            else
                if (old_width = new_width) then
                    if (vec(new_width-1) = '0') then
                        overflow := false;
                    end if;
                end if;
            end if;
        end if;
        if (old_arith = xlUnsigned and new_arith = xlUnsigned) then
            if (old_width > new_width) then
                if all_zeros(vec(old_width-1 downto new_width)) then
                    overflow := false;
                end if;
            else
                if (old_width = new_width) then
                    overflow := false;
                end if;
            end if;
        end if;
        if ((old_arith = xlUnsigned and new_arith = xlSigned) and (old_width > new_width)) then
            if all_same(vec(old_width-1 downto new_width-1)) then
                overflow := false;
            end if;
        end if;
        if overflow then
            if new_arith = xlSigned then
                if vec(old_width-1) = '0' then
                    result := max_signed(new_width);
                else
                    result := min_signed(new_width);
                end if;
            else
                if ((old_arith = xlSigned) and vec(old_width-1) = '1') then
                    result := (others => '0');
                else
                    result := (others => '1');
                end if;
            end if;
        else
            if (old_arith = xlSigned) and (new_arith = xlUnsigned) then
                if (vec(old_width-1) = '1') then
                    vec := (others => '0');
                end if;
            end if;
            if new_width <= old_width then
                result := vec(new_width-1 downto 0);
            else
                if new_arith = xlUnsigned then
                    result := zero_ext(vec, new_width);
                else
                    result := sign_ext(vec, new_width);
                end if;
            end if;
        end if;
        return result;
    end;
   function wrap_arith(inp:  std_logic_vector;  old_width, old_bin_pt,
                       old_arith, new_width, new_bin_pt, new_arith : INTEGER)
        return std_logic_vector
    is
        variable result : std_logic_vector(new_width-1 downto 0);
        variable result_arith : integer;
    begin
        if (old_arith = xlSigned) and (new_arith = xlUnsigned) then
            result_arith := xlSigned;
        end if;
        result := cast(inp, old_bin_pt, new_width, new_bin_pt, result_arith);
        return result;
    end;
    function fractional_bits(a_bin_pt, b_bin_pt: INTEGER) return INTEGER is
    begin
        return max(a_bin_pt, b_bin_pt);
    end;
    function integer_bits(a_width, a_bin_pt, b_width, b_bin_pt: INTEGER)
        return INTEGER is
    begin
        return  max(a_width - a_bin_pt, b_width - b_bin_pt);
    end;
    function pad_LSB(inp : std_logic_vector; new_width: integer)
        return STD_LOGIC_VECTOR
    is
        constant orig_width : integer := inp'length;
        variable vec : std_logic_vector(orig_width-1 downto 0);
        variable result : std_logic_vector(new_width-1 downto 0);
        variable pos : integer;
        constant pad_pos : integer := new_width - orig_width - 1;
    begin
        vec := inp;
        pos := new_width-1;
        if (new_width >= orig_width) then
            for i in orig_width-1 downto 0 loop
                result(pos) := vec(i);
                pos := pos - 1;
            end loop;
            if pad_pos >= 0 then
                for i in pad_pos downto 0 loop
                    result(i) := '0';
                end loop;
            end if;
        end if;
        return result;
    end;
    function sign_ext(inp : std_logic_vector; new_width : INTEGER)
        return std_logic_vector
    is
        constant old_width : integer := inp'length;
        variable vec : std_logic_vector(old_width-1 downto 0);
        variable result : std_logic_vector(new_width-1 downto 0);
    begin
        vec := inp;
        if new_width >= old_width then
            result(old_width-1 downto 0) := vec;
            if new_width-1 >= old_width then
                for i in new_width-1 downto old_width loop
                    result(i) := vec(old_width-1);
                end loop;
            end if;
        else
            result(new_width-1 downto 0) := vec(new_width-1 downto 0);
        end if;
        return result;
    end;
    function zero_ext(inp : std_logic_vector; new_width : INTEGER)
        return std_logic_vector
    is
        constant old_width : integer := inp'length;
        variable vec : std_logic_vector(old_width-1 downto 0);
        variable result : std_logic_vector(new_width-1 downto 0);
    begin
        vec := inp;
        if new_width >= old_width then
            result(old_width-1 downto 0) := vec;
            if new_width-1 >= old_width then
                for i in new_width-1 downto old_width loop
                    result(i) := '0';
                end loop;
            end if;
        else
            result(new_width-1 downto 0) := vec(new_width-1 downto 0);
        end if;
        return result;
    end;
    function zero_ext(inp : std_logic; new_width : INTEGER)
        return std_logic_vector
    is
        variable result : std_logic_vector(new_width-1 downto 0);
    begin
        result(0) := inp;
        for i in new_width-1 downto 1 loop
            result(i) := '0';
        end loop;
        return result;
    end;
    function extend_MSB(inp : std_logic_vector; new_width, arith : INTEGER)
        return std_logic_vector
    is
        constant orig_width : integer := inp'length;
        variable vec : std_logic_vector(orig_width-1 downto 0);
        variable result : std_logic_vector(new_width-1 downto 0);
    begin
        vec := inp;
        if arith = xlUnsigned then
            result := zero_ext(vec, new_width);
        else
            result := sign_ext(vec, new_width);
        end if;
        return result;
    end;
    function pad_LSB(inp : std_logic_vector; new_width, arith: integer)
        return STD_LOGIC_VECTOR
    is
        constant orig_width : integer := inp'length;
        variable vec : std_logic_vector(orig_width-1 downto 0);
        variable result : std_logic_vector(new_width-1 downto 0);
        variable pos : integer;
    begin
        vec := inp;
        pos := new_width-1;
        if (arith = xlUnsigned) then
            result(pos) := '0';
            pos := pos - 1;
        else
            result(pos) := vec(orig_width-1);
            pos := pos - 1;
        end if;
        if (new_width >= orig_width) then
            for i in orig_width-1 downto 0 loop
                result(pos) := vec(i);
                pos := pos - 1;
            end loop;
            if pos >= 0 then
                for i in pos downto 0 loop
                    result(i) := '0';
                end loop;
            end if;
        end if;
        return result;
    end;
    function align_input(inp : std_logic_vector; old_width, delta, new_arith,
                         new_width: INTEGER)
        return std_logic_vector
    is
        variable vec : std_logic_vector(old_width-1 downto 0);
        variable padded_inp : std_logic_vector((old_width + delta)-1  downto 0);
        variable result : std_logic_vector(new_width-1 downto 0);
    begin
        vec := inp;
        if delta > 0 then
            padded_inp := pad_LSB(vec, old_width+delta);
            result := extend_MSB(padded_inp, new_width, new_arith);
        else
            result := extend_MSB(vec, new_width, new_arith);
        end if;
        return result;
    end;
    function max(L, R: INTEGER) return INTEGER is
    begin
        if L > R then
            return L;
        else
            return R;
        end if;
    end;
    function min(L, R: INTEGER) return INTEGER is
    begin
        if L < R then
            return L;
        else
            return R;
        end if;
    end;
    function "="(left,right: STRING) return boolean is
    begin
        if (left'length /= right'length) then
            return false;
        else
            test : for i in 1 to left'length loop
                if left(i) /= right(i) then
                    return false;
                end if;
            end loop test;
            return true;
        end if;
    end;
    -- synopsys translate_off
    function is_binary_string_invalid (inp : string)
        return boolean
    is
        variable vec : string(1 to inp'length);
        variable result : boolean;
    begin
        vec := inp;
        result := false;
        for i in 1 to vec'length loop
            if ( vec(i) = 'X' ) then
                result := true;
            end if;
        end loop;
        return result;
    end;
    function is_binary_string_undefined (inp : string)
        return boolean
    is
        variable vec : string(1 to inp'length);
        variable result : boolean;
    begin
        vec := inp;
        result := false;
        for i in 1 to vec'length loop
            if ( vec(i) = 'U' ) then
                result := true;
            end if;
        end loop;
        return result;
    end;
    function is_XorU(inp : std_logic_vector)
        return boolean
    is
        constant width : integer := inp'length;
        variable vec : std_logic_vector(width-1 downto 0);
        variable result : boolean;
    begin
        vec := inp;
        result := false;
        for i in 0 to width-1 loop
            if (vec(i) = 'U') or (vec(i) = 'X') then
                result := true;
            end if;
        end loop;
        return result;
    end;
    function to_real(inp : std_logic_vector; bin_pt : integer; arith : integer)
        return real
    is
        variable  vec : std_logic_vector(inp'length-1 downto 0);
        variable result, shift_val, undefined_real : real;
        variable neg_num : boolean;
    begin
        vec := inp;
        result := 0.0;
        neg_num := false;
        if vec(inp'length-1) = '1' then
            neg_num := true;
        end if;
        for i in 0 to inp'length-1 loop
            if  vec(i) = 'U' or vec(i) = 'X' then
                return undefined_real;
            end if;
            if arith = xlSigned then
                if neg_num then
                    if vec(i) = '0' then
                        result := result + 2.0**i;
                    end if;
                else
                    if vec(i) = '1' then
                        result := result + 2.0**i;
                    end if;
                end if;
            else
                if vec(i) = '1' then
                    result := result + 2.0**i;
                end if;
            end if;
        end loop;
        if arith = xlSigned then
            if neg_num then
                result := result + 1.0;
                result := result * (-1.0);
            end if;
        end if;
        shift_val := 2.0**(-1*bin_pt);
        result := result * shift_val;
        return result;
    end;
    function std_logic_to_real(inp : std_logic; bin_pt : integer; arith : integer)
        return real
    is
        variable result : real := 0.0;
    begin
        if inp = '1' then
            result := 1.0;
        end if;
        if arith = xlSigned then
            assert false
                report "It doesn't make sense to convert a 1 bit number to a signed real.";
        end if;
        return result;
    end;
    -- synopsys translate_on
    function integer_to_std_logic_vector (inp : integer;  width, arith : integer)
        return std_logic_vector
    is
        variable result : std_logic_vector(width-1 downto 0);
        variable unsigned_val : unsigned(width-1 downto 0);
        variable signed_val : signed(width-1 downto 0);
    begin
        if (arith = xlSigned) then
            signed_val := to_signed(inp, width);
            result := signed_to_std_logic_vector(signed_val);
        else
            unsigned_val := to_unsigned(inp, width);
            result := unsigned_to_std_logic_vector(unsigned_val);
        end if;
        return result;
    end;
    function std_logic_vector_to_integer (inp : std_logic_vector;  arith : integer)
        return integer
    is
        constant width : integer := inp'length;
        variable unsigned_val : unsigned(width-1 downto 0);
        variable signed_val : signed(width-1 downto 0);
        variable result : integer;
    begin
        if (arith = xlSigned) then
            signed_val := std_logic_vector_to_signed(inp);
            result := to_integer(signed_val);
        else
            unsigned_val := std_logic_vector_to_unsigned(inp);
            result := to_integer(unsigned_val);
        end if;
        return result;
    end;
    function std_logic_to_integer(constant inp : std_logic := '0')
        return integer
    is
    begin
        if inp = '1' then
            return 1;
        else
            return 0;
        end if;
    end;
    function makeZeroBinStr (width : integer) return STRING is
        variable result : string(1 to width+3);
    begin
        result(1) := '0';
        result(2) := 'b';
        for i in 3 to width+2 loop
            result(i) := '0';
        end loop;
        result(width+3) := '.';
        return result;
    end;
    -- synopsys translate_off
    function real_string_to_std_logic_vector (inp : string;  width, bin_pt, arith : integer)
        return std_logic_vector
    is
        variable result : std_logic_vector(width-1 downto 0);
    begin
        result := (others => '0');
        return result;
    end;
    function real_to_std_logic_vector (inp : real;  width, bin_pt, arith : integer)
        return std_logic_vector
    is
        variable real_val : real;
        variable int_val : integer;
        variable result : std_logic_vector(width-1 downto 0) := (others => '0');
        variable unsigned_val : unsigned(width-1 downto 0) := (others => '0');
        variable signed_val : signed(width-1 downto 0) := (others => '0');
    begin
        real_val := inp;
        int_val := integer(real_val * 2.0**(bin_pt));
        if (arith = xlSigned) then
            signed_val := to_signed(int_val, width);
            result := signed_to_std_logic_vector(signed_val);
        else
            unsigned_val := to_unsigned(int_val, width);
            result := unsigned_to_std_logic_vector(unsigned_val);
        end if;
        return result;
    end;
    -- synopsys translate_on
    function valid_bin_string (inp : string)
        return boolean
    is
        variable vec : string(1 to inp'length);
    begin
        vec := inp;
        if (vec(1) = '0' and vec(2) = 'b') then
            return true;
        else
            return false;
        end if;
    end;
    function hex_string_to_std_logic_vector(inp: string; width : integer)
        return std_logic_vector is
        constant strlen       : integer := inp'LENGTH;
        variable result       : std_logic_vector(width-1 downto 0);
        variable bitval       : std_logic_vector((strlen*4)-1 downto 0);
        variable posn         : integer;
        variable ch           : character;
        variable vec          : string(1 to strlen);
    begin
        vec := inp;
        result := (others => '0');
        posn := (strlen*4)-1;
        for i in 1 to strlen loop
            ch := vec(i);
            case ch is
                when '0' => bitval(posn downto posn-3) := "0000";
                when '1' => bitval(posn downto posn-3) := "0001";
                when '2' => bitval(posn downto posn-3) := "0010";
                when '3' => bitval(posn downto posn-3) := "0011";
                when '4' => bitval(posn downto posn-3) := "0100";
                when '5' => bitval(posn downto posn-3) := "0101";
                when '6' => bitval(posn downto posn-3) := "0110";
                when '7' => bitval(posn downto posn-3) := "0111";
                when '8' => bitval(posn downto posn-3) := "1000";
                when '9' => bitval(posn downto posn-3) := "1001";
                when 'A' | 'a' => bitval(posn downto posn-3) := "1010";
                when 'B' | 'b' => bitval(posn downto posn-3) := "1011";
                when 'C' | 'c' => bitval(posn downto posn-3) := "1100";
                when 'D' | 'd' => bitval(posn downto posn-3) := "1101";
                when 'E' | 'e' => bitval(posn downto posn-3) := "1110";
                when 'F' | 'f' => bitval(posn downto posn-3) := "1111";
                when others => bitval(posn downto posn-3) := "XXXX";
                               -- synopsys translate_off
                               ASSERT false
                                   REPORT "Invalid hex value" SEVERITY ERROR;
                               -- synopsys translate_on
            end case;
            posn := posn - 4;
        end loop;
        if (width <= strlen*4) then
            result :=  bitval(width-1 downto 0);
        else
            result((strlen*4)-1 downto 0) := bitval;
        end if;
        return result;
    end;
    function bin_string_to_std_logic_vector (inp : string)
        return std_logic_vector
    is
        variable pos : integer;
        variable vec : string(1 to inp'length);
        variable result : std_logic_vector(inp'length-1 downto 0);
    begin
        vec := inp;
        pos := inp'length-1;
        result := (others => '0');
        for i in 1 to vec'length loop
            -- synopsys translate_off
            if (pos < 0) and (vec(i) = '0' or vec(i) = '1' or vec(i) = 'X' or vec(i) = 'U')  then
                assert false
                    report "Input string is larger than output std_logic_vector. Truncating output.";
                return result;
            end if;
            -- synopsys translate_on
            if vec(i) = '0' then
                result(pos) := '0';
                pos := pos - 1;
            end if;
            if vec(i) = '1' then
                result(pos) := '1';
                pos := pos - 1;
            end if;
            -- synopsys translate_off
            if (vec(i) = 'X' or vec(i) = 'U') then
                result(pos) := 'U';
                pos := pos - 1;
            end if;
            -- synopsys translate_on
        end loop;
        return result;
    end;
    function bin_string_element_to_std_logic_vector (inp : string;  width, index : integer)
        return std_logic_vector
    is
        constant str_width : integer := width + 4;
        constant inp_len : integer := inp'length;
        constant num_elements : integer := (inp_len + 1)/str_width;
        constant reverse_index : integer := (num_elements-1) - index;
        variable left_pos : integer;
        variable right_pos : integer;
        variable vec : string(1 to inp'length);
        variable result : std_logic_vector(width-1 downto 0);
    begin
        vec := inp;
        result := (others => '0');
        if (reverse_index = 0) and (reverse_index < num_elements) and (inp_len-3 >= width) then
            left_pos := 1;
            right_pos := width + 3;
            result := bin_string_to_std_logic_vector(vec(left_pos to right_pos));
        end if;
        if (reverse_index > 0) and (reverse_index < num_elements) and (inp_len-3 >= width) then
            left_pos := (reverse_index * str_width) + 1;
            right_pos := left_pos + width + 2;
            result := bin_string_to_std_logic_vector(vec(left_pos to right_pos));
        end if;
        return result;
    end;
   -- synopsys translate_off
    function std_logic_vector_to_bin_string(inp : std_logic_vector)
        return string
    is
        variable vec : std_logic_vector(1 to inp'length);
        variable result : string(vec'range);
    begin
        vec := inp;
        for i in vec'range loop
            result(i) := to_char(vec(i));
        end loop;
        return result;
    end;
    function std_logic_to_bin_string(inp : std_logic)
        return string
    is
        variable result : string(1 to 3);
    begin
        result(1) := '0';
        result(2) := 'b';
        result(3) := to_char(inp);
        return result;
    end;
    function std_logic_vector_to_bin_string_w_point(inp : std_logic_vector; bin_pt : integer)
        return string
    is
        variable width : integer := inp'length;
        variable vec : std_logic_vector(width-1 downto 0);
        variable str_pos : integer;
        variable result : string(1 to width+3);
    begin
        vec := inp;
        str_pos := 1;
        result(str_pos) := '0';
        str_pos := 2;
        result(str_pos) := 'b';
        str_pos := 3;
        for i in width-1 downto 0  loop
            if (((width+3) - bin_pt) = str_pos) then
                result(str_pos) := '.';
                str_pos := str_pos + 1;
            end if;
            result(str_pos) := to_char(vec(i));
            str_pos := str_pos + 1;
        end loop;
        if (bin_pt = 0) then
            result(str_pos) := '.';
        end if;
        return result;
    end;
    function real_to_bin_string(inp : real;  width, bin_pt, arith : integer)
        return string
    is
        variable result : string(1 to width);
        variable vec : std_logic_vector(width-1 downto 0);
    begin
        vec := real_to_std_logic_vector(inp, width, bin_pt, arith);
        result := std_logic_vector_to_bin_string(vec);
        return result;
    end;
    function real_to_string (inp : real) return string
    is
        variable result : string(1 to display_precision) := (others => ' ');
    begin
        result(real'image(inp)'range) := real'image(inp);
        return result;
    end;
    -- synopsys translate_on
end conv_pkg;

-------------------------------------------------------------------
-- System Generator version 14.6 VHDL source file.
--
-- Copyright(C) 2013 by Xilinx, Inc.  All rights reserved.  This
-- text/file contains proprietary, confidential information of Xilinx,
-- Inc., is distributed under license from Xilinx, Inc., and may be used,
-- copied and/or disclosed only pursuant to the terms of a valid license
-- agreement with Xilinx, Inc.  Xilinx hereby grants you a license to use
-- this text/file solely for design, simulation, implementation and
-- creation of design files limited to Xilinx devices or technologies.
-- Use with non-Xilinx devices or technologies is expressly prohibited
-- and immediately terminates your license unless covered by a separate
-- agreement.
--
-- Xilinx is providing this design, code, or information "as is" solely
-- for use in developing programs and solutions for Xilinx devices.  By
-- providing this design, code, or information as one possible
-- implementation of this feature, application or standard, Xilinx is
-- making no representation that this implementation is free from any
-- claims of infringement.  You are responsible for obtaining any rights
-- you may require for your implementation.  Xilinx expressly disclaims
-- any warranty whatsoever with respect to the adequacy of the
-- implementation, including but not limited to warranties of
-- merchantability or fitness for a particular purpose.
--
-- Xilinx products are not intended for use in life support appliances,
-- devices, or systems.  Use in such applications is expressly prohibited.
--
-- Any modifications that are made to the source code are done at the user's
-- sole risk and will be unsupported.
--
-- This copyright and support notice must be retained as part of this
-- text at all times.  (c) Copyright 1995-2013 Xilinx, Inc.  All rights
-- reserved.
-------------------------------------------------------------------
-- synopsys translate_off
library unisim;
use unisim.vcomponents.all;
-- synopsys translate_on
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;
entity srl17e is
    generic (width : integer:=16;
             latency : integer :=8);
    port (clk   : in std_logic;
          ce    : in std_logic;
          d     : in std_logic_vector(width-1 downto 0);
          q     : out std_logic_vector(width-1 downto 0));
end srl17e;
architecture structural of srl17e is
    component SRL16E
        port (D   : in STD_ULOGIC;
              CE  : in STD_ULOGIC;
              CLK : in STD_ULOGIC;
              A0  : in STD_ULOGIC;
              A1  : in STD_ULOGIC;
              A2  : in STD_ULOGIC;
              A3  : in STD_ULOGIC;
              Q   : out STD_ULOGIC);
    end component;
    attribute syn_black_box of SRL16E : component is true;
    attribute fpga_dont_touch of SRL16E : component is "true";
    component FDE
        port(
            Q  :        out   STD_ULOGIC;
            D  :        in    STD_ULOGIC;
            C  :        in    STD_ULOGIC;
            CE :        in    STD_ULOGIC);
    end component;
    attribute syn_black_box of FDE : component is true;
    attribute fpga_dont_touch of FDE : component is "true";
    constant a : std_logic_vector(4 downto 0) :=
        integer_to_std_logic_vector(latency-2,5,xlSigned);
    signal d_delayed : std_logic_vector(width-1 downto 0);
    signal srl16_out : std_logic_vector(width-1 downto 0);
begin
    d_delayed <= d after 200 ps;
    reg_array : for i in 0 to width-1 generate
        srl16_used: if latency > 1 generate
            u1 : srl16e port map(clk => clk,
                                 d => d_delayed(i),
                                 q => srl16_out(i),
                                 ce => ce,
                                 a0 => a(0),
                                 a1 => a(1),
                                 a2 => a(2),
                                 a3 => a(3));
        end generate;
        srl16_not_used: if latency <= 1 generate
            srl16_out(i) <= d_delayed(i);
        end generate;
        fde_used: if latency /= 0  generate
            u2 : fde port map(c => clk,
                              d => srl16_out(i),
                              q => q(i),
                              ce => ce);
        end generate;
        fde_not_used: if latency = 0  generate
            q(i) <= srl16_out(i);
        end generate;
    end generate;
 end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;
entity synth_reg is
    generic (width           : integer := 8;
             latency         : integer := 1);
    port (i       : in std_logic_vector(width-1 downto 0);
          ce      : in std_logic;
          clr     : in std_logic;
          clk     : in std_logic;
          o       : out std_logic_vector(width-1 downto 0));
end synth_reg;
architecture structural of synth_reg is
    component srl17e
        generic (width : integer:=16;
                 latency : integer :=8);
        port (clk : in std_logic;
              ce  : in std_logic;
              d   : in std_logic_vector(width-1 downto 0);
              q   : out std_logic_vector(width-1 downto 0));
    end component;
    function calc_num_srl17es (latency : integer)
        return integer
    is
        variable remaining_latency : integer;
        variable result : integer;
    begin
        result := latency / 17;
        remaining_latency := latency - (result * 17);
        if (remaining_latency /= 0) then
            result := result + 1;
        end if;
        return result;
    end;
    constant complete_num_srl17es : integer := latency / 17;
    constant num_srl17es : integer := calc_num_srl17es(latency);
    constant remaining_latency : integer := latency - (complete_num_srl17es * 17);
    type register_array is array (num_srl17es downto 0) of
        std_logic_vector(width-1 downto 0);
    signal z : register_array;
begin
    z(0) <= i;
    complete_ones : if complete_num_srl17es > 0 generate
        srl17e_array: for i in 0 to complete_num_srl17es-1 generate
            delay_comp : srl17e
                generic map (width => width,
                             latency => 17)
                port map (clk => clk,
                          ce  => ce,
                          d       => z(i),
                          q       => z(i+1));
        end generate;
    end generate;
    partial_one : if remaining_latency > 0 generate
        last_srl17e : srl17e
            generic map (width => width,
                         latency => remaining_latency)
            port map (clk => clk,
                      ce  => ce,
                      d   => z(num_srl17es-1),
                      q   => z(num_srl17es));
    end generate;
    o <= z(num_srl17es);
end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;
entity synth_reg_reg is
    generic (width           : integer := 8;
             latency         : integer := 1);
    port (i       : in std_logic_vector(width-1 downto 0);
          ce      : in std_logic;
          clr     : in std_logic;
          clk     : in std_logic;
          o       : out std_logic_vector(width-1 downto 0));
end synth_reg_reg;
architecture behav of synth_reg_reg is
  type reg_array_type is array (latency-1 downto 0) of std_logic_vector(width -1 downto 0);
  signal reg_bank : reg_array_type := (others => (others => '0'));
  signal reg_bank_in : reg_array_type := (others => (others => '0'));
  attribute syn_allow_retiming : boolean;
  attribute syn_srlstyle : string;
  attribute syn_allow_retiming of reg_bank : signal is true;
  attribute syn_allow_retiming of reg_bank_in : signal is true;
  attribute syn_srlstyle of reg_bank : signal is "registers";
  attribute syn_srlstyle of reg_bank_in : signal is "registers";
begin
  latency_eq_0: if latency = 0 generate
    o <= i;
  end generate latency_eq_0;
  latency_gt_0: if latency >= 1 generate
    o <= reg_bank(latency-1);
    reg_bank_in(0) <= i;
    loop_gen: for idx in latency-2 downto 0 generate
      reg_bank_in(idx+1) <= reg_bank(idx);
    end generate loop_gen;
    sync_loop: for sync_idx in latency-1 downto 0 generate
      sync_proc: process (clk)
      begin
        if clk'event and clk = '1' then
          if clr = '1' then
            reg_bank_in <= (others => (others => '0'));
          elsif ce = '1'  then
            reg_bank(sync_idx) <= reg_bank_in(sync_idx);
          end if;
        end if;
      end process sync_proc;
    end generate sync_loop;
  end generate latency_gt_0;
end behav;

-------------------------------------------------------------------
-- System Generator version 14.6 VHDL source file.
--
-- Copyright(C) 2013 by Xilinx, Inc.  All rights reserved.  This
-- text/file contains proprietary, confidential information of Xilinx,
-- Inc., is distributed under license from Xilinx, Inc., and may be used,
-- copied and/or disclosed only pursuant to the terms of a valid license
-- agreement with Xilinx, Inc.  Xilinx hereby grants you a license to use
-- this text/file solely for design, simulation, implementation and
-- creation of design files limited to Xilinx devices or technologies.
-- Use with non-Xilinx devices or technologies is expressly prohibited
-- and immediately terminates your license unless covered by a separate
-- agreement.
--
-- Xilinx is providing this design, code, or information "as is" solely
-- for use in developing programs and solutions for Xilinx devices.  By
-- providing this design, code, or information as one possible
-- implementation of this feature, application or standard, Xilinx is
-- making no representation that this implementation is free from any
-- claims of infringement.  You are responsible for obtaining any rights
-- you may require for your implementation.  Xilinx expressly disclaims
-- any warranty whatsoever with respect to the adequacy of the
-- implementation, including but not limited to warranties of
-- merchantability or fitness for a particular purpose.
--
-- Xilinx products are not intended for use in life support appliances,
-- devices, or systems.  Use in such applications is expressly prohibited.
--
-- Any modifications that are made to the source code are done at the user's
-- sole risk and will be unsupported.
--
-- This copyright and support notice must be retained as part of this
-- text at all times.  (c) Copyright 1995-2013 Xilinx, Inc.  All rights
-- reserved.
-------------------------------------------------------------------
-- synopsys translate_off
library unisim;
use unisim.vcomponents.all;
-- synopsys translate_on
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;
entity single_reg_w_init is
  generic (
    width: integer := 8;
    init_index: integer := 0;
    init_value: bit_vector := b"0000"
  );
  port (
    i: in std_logic_vector(width - 1 downto 0);
    ce: in std_logic;
    clr: in std_logic;
    clk: in std_logic;
    o: out std_logic_vector(width - 1 downto 0)
  );
end single_reg_w_init;
architecture structural of single_reg_w_init is
  function build_init_const(width: integer;
                            init_index: integer;
                            init_value: bit_vector)
    return std_logic_vector
  is
    variable result: std_logic_vector(width - 1 downto 0);
  begin
    if init_index = 0 then
      result := (others => '0');
    elsif init_index = 1 then
      result := (others => '0');
      result(0) := '1';
    else
      result := to_stdlogicvector(init_value);
    end if;
    return result;
  end;
  component fdre
    port (
      q: out std_ulogic;
      d: in  std_ulogic;
      c: in  std_ulogic;
      ce: in  std_ulogic;
      r: in  std_ulogic
    );
  end component;
  attribute syn_black_box of fdre: component is true;
  attribute fpga_dont_touch of fdre: component is "true";
  component fdse
    port (
      q: out std_ulogic;
      d: in  std_ulogic;
      c: in  std_ulogic;
      ce: in  std_ulogic;
      s: in  std_ulogic
    );
  end component;
  attribute syn_black_box of fdse: component is true;
  attribute fpga_dont_touch of fdse: component is "true";
  constant init_const: std_logic_vector(width - 1 downto 0)
    := build_init_const(width, init_index, init_value);
begin
  fd_prim_array: for index in 0 to width - 1 generate
    bit_is_0: if (init_const(index) = '0') generate
      fdre_comp: fdre
        port map (
          c => clk,
          d => i(index),
          q => o(index),
          ce => ce,
          r => clr
        );
    end generate;
    bit_is_1: if (init_const(index) = '1') generate
      fdse_comp: fdse
        port map (
          c => clk,
          d => i(index),
          q => o(index),
          ce => ce,
          s => clr
        );
    end generate;
  end generate;
end architecture structural;
-- synopsys translate_off
library unisim;
use unisim.vcomponents.all;
-- synopsys translate_on
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;
entity synth_reg_w_init is
  generic (
    width: integer := 8;
    init_index: integer := 0;
    init_value: bit_vector := b"0000";
    latency: integer := 1
  );
  port (
    i: in std_logic_vector(width - 1 downto 0);
    ce: in std_logic;
    clr: in std_logic;
    clk: in std_logic;
    o: out std_logic_vector(width - 1 downto 0)
  );
end synth_reg_w_init;
architecture structural of synth_reg_w_init is
  component single_reg_w_init
    generic (
      width: integer := 8;
      init_index: integer := 0;
      init_value: bit_vector := b"0000"
    );
    port (
      i: in std_logic_vector(width - 1 downto 0);
      ce: in std_logic;
      clr: in std_logic;
      clk: in std_logic;
      o: out std_logic_vector(width - 1 downto 0)
    );
  end component;
  signal dly_i: std_logic_vector((latency + 1) * width - 1 downto 0);
  signal dly_clr: std_logic;
begin
  latency_eq_0: if (latency = 0) generate
    o <= i;
  end generate;
  latency_gt_0: if (latency >= 1) generate
    dly_i((latency + 1) * width - 1 downto latency * width) <= i
      after 200 ps;
    dly_clr <= clr after 200 ps;
    fd_array: for index in latency downto 1 generate
       reg_comp: single_reg_w_init
          generic map (
            width => width,
            init_index => init_index,
            init_value => init_value
          )
          port map (
            clk => clk,
            i => dly_i((index + 1) * width - 1 downto index * width),
            o => dly_i(index * width - 1 downto (index - 1) * width),
            ce => ce,
            clr => dly_clr
          );
    end generate;
    o <= dly_i(width - 1 downto 0);
  end generate;
end structural;

-------------------------------------------------------------------
-- System Generator version 14.6 VHDL source file.
--
-- Copyright(C) 2013 by Xilinx, Inc.  All rights reserved.  This
-- text/file contains proprietary, confidential information of Xilinx,
-- Inc., is distributed under license from Xilinx, Inc., and may be used,
-- copied and/or disclosed only pursuant to the terms of a valid license
-- agreement with Xilinx, Inc.  Xilinx hereby grants you a license to use
-- this text/file solely for design, simulation, implementation and
-- creation of design files limited to Xilinx devices or technologies.
-- Use with non-Xilinx devices or technologies is expressly prohibited
-- and immediately terminates your license unless covered by a separate
-- agreement.
--
-- Xilinx is providing this design, code, or information "as is" solely
-- for use in developing programs and solutions for Xilinx devices.  By
-- providing this design, code, or information as one possible
-- implementation of this feature, application or standard, Xilinx is
-- making no representation that this implementation is free from any
-- claims of infringement.  You are responsible for obtaining any rights
-- you may require for your implementation.  Xilinx expressly disclaims
-- any warranty whatsoever with respect to the adequacy of the
-- implementation, including but not limited to warranties of
-- merchantability or fitness for a particular purpose.
--
-- Xilinx products are not intended for use in life support appliances,
-- devices, or systems.  Use in such applications is expressly prohibited.
--
-- Any modifications that are made to the source code are done at the user's
-- sole risk and will be unsupported.
--
-- This copyright and support notice must be retained as part of this
-- text at all times.  (c) Copyright 1995-2013 Xilinx, Inc.  All rights
-- reserved.
-------------------------------------------------------------------
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;
entity xlregister is
   generic (d_width          : integer := 5;
            init_value       : bit_vector := b"00");
   port (d   : in std_logic_vector (d_width-1 downto 0);
         rst : in std_logic_vector(0 downto 0) := "0";
         en  : in std_logic_vector(0 downto 0) := "1";
         ce  : in std_logic;
         clk : in std_logic;
         q   : out std_logic_vector (d_width-1 downto 0));
end xlregister;
architecture behavior of xlregister is
   component synth_reg_w_init
      generic (width      : integer;
               init_index : integer;
               init_value : bit_vector;
               latency    : integer);
      port (i   : in std_logic_vector(width-1 downto 0);
            ce  : in std_logic;
            clr : in std_logic;
            clk : in std_logic;
            o   : out std_logic_vector(width-1 downto 0));
   end component;
   -- synopsys translate_off
   signal real_d, real_q           : real;
   -- synopsys translate_on
   signal internal_clr             : std_logic;
   signal internal_ce              : std_logic;
begin
   internal_clr <= rst(0) and ce;
   internal_ce  <= en(0) and ce;
   synth_reg_inst : synth_reg_w_init
      generic map (width      => d_width,
                   init_index => 2,
                   init_value => init_value,
                   latency    => 1)
      port map (i   => d,
                ce  => internal_ce,
                clr => internal_clr,
                clk => clk,
                o   => q);
end architecture behavior;
library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity concat_7ad576a6fc is
  port (
    in0 : in std_logic_vector((5 - 1) downto 0);
    in1 : in std_logic_vector((5 - 1) downto 0);
    in2 : in std_logic_vector((2 - 1) downto 0);
    in3 : in std_logic_vector((2 - 1) downto 0);
    in4 : in std_logic_vector((1 - 1) downto 0);
    in5 : in std_logic_vector((1 - 1) downto 0);
    in6 : in std_logic_vector((9 - 1) downto 0);
    in7 : in std_logic_vector((1 - 1) downto 0);
    in8 : in std_logic_vector((1 - 1) downto 0);
    in9 : in std_logic_vector((1 - 1) downto 0);
    in10 : in std_logic_vector((1 - 1) downto 0);
    in11 : in std_logic_vector((1 - 1) downto 0);
    in12 : in std_logic_vector((1 - 1) downto 0);
    in13 : in std_logic_vector((1 - 1) downto 0);
    y : out std_logic_vector((32 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end concat_7ad576a6fc;


architecture behavior of concat_7ad576a6fc is
  signal in0_1_23: unsigned((5 - 1) downto 0);
  signal in1_1_27: unsigned((5 - 1) downto 0);
  signal in2_1_31: unsigned((2 - 1) downto 0);
  signal in3_1_35: unsigned((2 - 1) downto 0);
  signal in4_1_39: boolean;
  signal in5_1_43: boolean;
  signal in6_1_47: unsigned((9 - 1) downto 0);
  signal in7_1_51: boolean;
  signal in8_1_55: boolean;
  signal in9_1_59: boolean;
  signal in10_1_63: boolean;
  signal in11_1_68: boolean;
  signal in12_1_73: boolean;
  signal in13_1_78: boolean;
  signal y_2_1_concat: unsigned((32 - 1) downto 0);
begin
  in0_1_23 <= std_logic_vector_to_unsigned(in0);
  in1_1_27 <= std_logic_vector_to_unsigned(in1);
  in2_1_31 <= std_logic_vector_to_unsigned(in2);
  in3_1_35 <= std_logic_vector_to_unsigned(in3);
  in4_1_39 <= ((in4) = "1");
  in5_1_43 <= ((in5) = "1");
  in6_1_47 <= std_logic_vector_to_unsigned(in6);
  in7_1_51 <= ((in7) = "1");
  in8_1_55 <= ((in8) = "1");
  in9_1_59 <= ((in9) = "1");
  in10_1_63 <= ((in10) = "1");
  in11_1_68 <= ((in11) = "1");
  in12_1_73 <= ((in12) = "1");
  in13_1_78 <= ((in13) = "1");
  y_2_1_concat <= std_logic_vector_to_unsigned(unsigned_to_std_logic_vector(in0_1_23) & unsigned_to_std_logic_vector(in1_1_27) & unsigned_to_std_logic_vector(in2_1_31) & unsigned_to_std_logic_vector(in3_1_35) & boolean_to_vector(in4_1_39) & boolean_to_vector(in5_1_43) & unsigned_to_std_logic_vector(in6_1_47) & boolean_to_vector(in7_1_51) & boolean_to_vector(in8_1_55) & boolean_to_vector(in9_1_59) & boolean_to_vector(in10_1_63) & boolean_to_vector(in11_1_68) & boolean_to_vector(in12_1_73) & boolean_to_vector(in13_1_78));
  y <= unsigned_to_std_logic_vector(y_2_1_concat);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity constant_cda50df78a is
  port (
    op : out std_logic_vector((2 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end constant_cda50df78a;


architecture behavior of constant_cda50df78a is
begin
  op <= "00";
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity constant_fd85eb7067 is
  port (
    op : out std_logic_vector((9 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end constant_fd85eb7067;


architecture behavior of constant_fd85eb7067 is
begin
  op <= "000000000";
end behavior;


-------------------------------------------------------------------
-- System Generator version 14.6 VHDL source file.
--
-- Copyright(C) 2013 by Xilinx, Inc.  All rights reserved.  This
-- text/file contains proprietary, confidential information of Xilinx,
-- Inc., is distributed under license from Xilinx, Inc., and may be used,
-- copied and/or disclosed only pursuant to the terms of a valid license
-- agreement with Xilinx, Inc.  Xilinx hereby grants you a license to use
-- this text/file solely for design, simulation, implementation and
-- creation of design files limited to Xilinx devices or technologies.
-- Use with non-Xilinx devices or technologies is expressly prohibited
-- and immediately terminates your license unless covered by a separate
-- agreement.
--
-- Xilinx is providing this design, code, or information "as is" solely
-- for use in developing programs and solutions for Xilinx devices.  By
-- providing this design, code, or information as one possible
-- implementation of this feature, application or standard, Xilinx is
-- making no representation that this implementation is free from any
-- claims of infringement.  You are responsible for obtaining any rights
-- you may require for your implementation.  Xilinx expressly disclaims
-- any warranty whatsoever with respect to the adequacy of the
-- implementation, including but not limited to warranties of
-- merchantability or fitness for a particular purpose.
--
-- Xilinx products are not intended for use in life support appliances,
-- devices, or systems.  Use in such applications is expressly prohibited.
--
-- Any modifications that are made to the source code are done at the user's
-- sole risk and will be unsupported.
--
-- This copyright and support notice must be retained as part of this
-- text at all times.  (c) Copyright 1995-2013 Xilinx, Inc.  All rights
-- reserved.
-------------------------------------------------------------------
library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.std_logic_arith.all;
use work.conv_pkg.all;
entity xlslice is
    generic (
        new_msb      : integer := 9;
        new_lsb      : integer := 1;
        x_width      : integer := 16;
        y_width      : integer := 8);
    port (
        x : in std_logic_vector (x_width-1 downto 0);
        y : out std_logic_vector (y_width-1 downto 0));
end xlslice;
architecture behavior of xlslice is
begin
    y <= x(new_msb downto new_lsb);
end  behavior;
library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity concat_12f835c970 is
  port (
    in0 : in std_logic_vector((1 - 1) downto 0);
    in1 : in std_logic_vector((128 - 1) downto 0);
    in2 : in std_logic_vector((1 - 1) downto 0);
    y : out std_logic_vector((130 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end concat_12f835c970;


architecture behavior of concat_12f835c970 is
  signal in0_1_23: unsigned((1 - 1) downto 0);
  signal in1_1_27: unsigned((128 - 1) downto 0);
  signal in2_1_31: unsigned((1 - 1) downto 0);
  signal y_2_1_concat: unsigned((130 - 1) downto 0);
begin
  in0_1_23 <= std_logic_vector_to_unsigned(in0);
  in1_1_27 <= std_logic_vector_to_unsigned(in1);
  in2_1_31 <= std_logic_vector_to_unsigned(in2);
  y_2_1_concat <= std_logic_vector_to_unsigned(unsigned_to_std_logic_vector(in0_1_23) & unsigned_to_std_logic_vector(in1_1_27) & unsigned_to_std_logic_vector(in2_1_31));
  y <= unsigned_to_std_logic_vector(y_2_1_concat);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity reinterpret_112d91c147 is
  port (
    input_port : in std_logic_vector((1 - 1) downto 0);
    output_port : out std_logic_vector((1 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end reinterpret_112d91c147;


architecture behavior of reinterpret_112d91c147 is
  signal input_port_1_40: boolean;
  signal output_port_7_5_convert: unsigned((1 - 1) downto 0);
begin
  input_port_1_40 <= ((input_port) = "1");
  output_port_7_5_convert <= u2u_cast(std_logic_vector_to_unsigned(boolean_to_vector(input_port_1_40)), 0, 1, 0);
  output_port <= unsigned_to_std_logic_vector(output_port_7_5_convert);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity reinterpret_28b9ecc6fc is
  port (
    input_port : in std_logic_vector((128 - 1) downto 0);
    output_port : out std_logic_vector((128 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end reinterpret_28b9ecc6fc;


architecture behavior of reinterpret_28b9ecc6fc is
  signal input_port_1_40: unsigned((128 - 1) downto 0);
begin
  input_port_1_40 <= std_logic_vector_to_unsigned(input_port);
  output_port <= unsigned_to_std_logic_vector(input_port_1_40);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity concat_8d83147763 is
  port (
    in0 : in std_logic_vector((1 - 1) downto 0);
    in1 : in std_logic_vector((1 - 1) downto 0);
    in2 : in std_logic_vector((1 - 1) downto 0);
    in3 : in std_logic_vector((1 - 1) downto 0);
    in4 : in std_logic_vector((1 - 1) downto 0);
    in5 : in std_logic_vector((1 - 1) downto 0);
    in6 : in std_logic_vector((32 - 1) downto 0);
    in7 : in std_logic_vector((64 - 1) downto 0);
    y : out std_logic_vector((102 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end concat_8d83147763;


architecture behavior of concat_8d83147763 is
  signal in0_1_23: unsigned((1 - 1) downto 0);
  signal in1_1_27: unsigned((1 - 1) downto 0);
  signal in2_1_31: unsigned((1 - 1) downto 0);
  signal in3_1_35: unsigned((1 - 1) downto 0);
  signal in4_1_39: unsigned((1 - 1) downto 0);
  signal in5_1_43: unsigned((1 - 1) downto 0);
  signal in6_1_47: unsigned((32 - 1) downto 0);
  signal in7_1_51: unsigned((64 - 1) downto 0);
  signal y_2_1_concat: unsigned((102 - 1) downto 0);
begin
  in0_1_23 <= std_logic_vector_to_unsigned(in0);
  in1_1_27 <= std_logic_vector_to_unsigned(in1);
  in2_1_31 <= std_logic_vector_to_unsigned(in2);
  in3_1_35 <= std_logic_vector_to_unsigned(in3);
  in4_1_39 <= std_logic_vector_to_unsigned(in4);
  in5_1_43 <= std_logic_vector_to_unsigned(in5);
  in6_1_47 <= std_logic_vector_to_unsigned(in6);
  in7_1_51 <= std_logic_vector_to_unsigned(in7);
  y_2_1_concat <= std_logic_vector_to_unsigned(unsigned_to_std_logic_vector(in0_1_23) & unsigned_to_std_logic_vector(in1_1_27) & unsigned_to_std_logic_vector(in2_1_31) & unsigned_to_std_logic_vector(in3_1_35) & unsigned_to_std_logic_vector(in4_1_39) & unsigned_to_std_logic_vector(in5_1_43) & unsigned_to_std_logic_vector(in6_1_47) & unsigned_to_std_logic_vector(in7_1_51));
  y <= unsigned_to_std_logic_vector(y_2_1_concat);
end behavior;


-------------------------------------------------------------------
-- System Generator version 14.6 VHDL source file.
--
-- Copyright(C) 2013 by Xilinx, Inc.  All rights reserved.  This
-- text/file contains proprietary, confidential information of Xilinx,
-- Inc., is distributed under license from Xilinx, Inc., and may be used,
-- copied and/or disclosed only pursuant to the terms of a valid license
-- agreement with Xilinx, Inc.  Xilinx hereby grants you a license to use
-- this text/file solely for design, simulation, implementation and
-- creation of design files limited to Xilinx devices or technologies.
-- Use with non-Xilinx devices or technologies is expressly prohibited
-- and immediately terminates your license unless covered by a separate
-- agreement.
--
-- Xilinx is providing this design, code, or information "as is" solely
-- for use in developing programs and solutions for Xilinx devices.  By
-- providing this design, code, or information as one possible
-- implementation of this feature, application or standard, Xilinx is
-- making no representation that this implementation is free from any
-- claims of infringement.  You are responsible for obtaining any rights
-- you may require for your implementation.  Xilinx expressly disclaims
-- any warranty whatsoever with respect to the adequacy of the
-- implementation, including but not limited to warranties of
-- merchantability or fitness for a particular purpose.
--
-- Xilinx products are not intended for use in life support appliances,
-- devices, or systems.  Use in such applications is expressly prohibited.
--
-- Any modifications that are made to the source code are done at the user's
-- sole risk and will be unsupported.
--
-- This copyright and support notice must be retained as part of this
-- text at all times.  (c) Copyright 1995-2013 Xilinx, Inc.  All rights
-- reserved.
-------------------------------------------------------------------
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;
entity convert_func_call is
    generic (
        din_width    : integer := 16;
        din_bin_pt   : integer := 4;
        din_arith    : integer := xlUnsigned;
        dout_width   : integer := 8;
        dout_bin_pt  : integer := 2;
        dout_arith   : integer := xlUnsigned;
        quantization : integer := xlTruncate;
        overflow     : integer := xlWrap);
    port (
        din : in std_logic_vector (din_width-1 downto 0);
        result : out std_logic_vector (dout_width-1 downto 0));
end convert_func_call;
architecture behavior of convert_func_call is
begin
    result <= convert_type(din, din_width, din_bin_pt, din_arith,
                           dout_width, dout_bin_pt, dout_arith,
                           quantization, overflow);
end behavior;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;
entity xlconvert is
    generic (
        din_width    : integer := 16;
        din_bin_pt   : integer := 4;
        din_arith    : integer := xlUnsigned;
        dout_width   : integer := 8;
        dout_bin_pt  : integer := 2;
        dout_arith   : integer := xlUnsigned;
        en_width     : integer := 1;
        en_bin_pt    : integer := 0;
        en_arith     : integer := xlUnsigned;
        bool_conversion : integer :=0;
        latency      : integer := 0;
        quantization : integer := xlTruncate;
        overflow     : integer := xlWrap);
    port (
        din : in std_logic_vector (din_width-1 downto 0);
        en  : in std_logic_vector (en_width-1 downto 0);
        ce  : in std_logic;
        clr : in std_logic;
        clk : in std_logic;
        dout : out std_logic_vector (dout_width-1 downto 0));
end xlconvert;
architecture behavior of xlconvert is
    component synth_reg
        generic (width       : integer;
                 latency     : integer);
        port (i       : in std_logic_vector(width-1 downto 0);
              ce      : in std_logic;
              clr     : in std_logic;
              clk     : in std_logic;
              o       : out std_logic_vector(width-1 downto 0));
    end component;
    component convert_func_call
        generic (
            din_width    : integer := 16;
            din_bin_pt   : integer := 4;
            din_arith    : integer := xlUnsigned;
            dout_width   : integer := 8;
            dout_bin_pt  : integer := 2;
            dout_arith   : integer := xlUnsigned;
            quantization : integer := xlTruncate;
            overflow     : integer := xlWrap);
        port (
            din : in std_logic_vector (din_width-1 downto 0);
            result : out std_logic_vector (dout_width-1 downto 0));
    end component;
    -- synopsys translate_off
    -- synopsys translate_on
    signal result : std_logic_vector(dout_width-1 downto 0);
    signal internal_ce : std_logic;
begin
    -- synopsys translate_off
    -- synopsys translate_on
    internal_ce <= ce and en(0);

    bool_conversion_generate : if (bool_conversion = 1)
    generate
      result <= din;
    end generate;
    std_conversion_generate : if (bool_conversion = 0)
    generate
      convert : convert_func_call
        generic map (
          din_width   => din_width,
          din_bin_pt  => din_bin_pt,
          din_arith   => din_arith,
          dout_width  => dout_width,
          dout_bin_pt => dout_bin_pt,
          dout_arith  => dout_arith,
          quantization => quantization,
          overflow     => overflow)
        port map (
          din => din,
          result => result);
    end generate;
    latency_test : if (latency > 0) generate
        reg : synth_reg
            generic map (
              width => dout_width,
              latency => latency
            )
            port map (
              i => result,
              ce => internal_ce,
              clr => clr,
              clk => clk,
              o => dout
            );
    end generate;
    latency0 : if (latency = 0)
    generate
        dout <= result;
    end generate latency0;
end  behavior;
library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity logical_80f90b97d0 is
  port (
    d0 : in std_logic_vector((1 - 1) downto 0);
    d1 : in std_logic_vector((1 - 1) downto 0);
    y : out std_logic_vector((1 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end logical_80f90b97d0;


architecture behavior of logical_80f90b97d0 is
  signal d0_1_24: std_logic;
  signal d1_1_27: std_logic;
  signal fully_2_1_bit: std_logic;
begin
  d0_1_24 <= d0(0);
  d1_1_27 <= d1(0);
  fully_2_1_bit <= d0_1_24 and d1_1_27;
  y <= std_logic_to_vector(fully_2_1_bit);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity concat_0e2072f8e1 is
  port (
    in0 : in std_logic_vector((32 - 1) downto 0);
    in1 : in std_logic_vector((64 - 1) downto 0);
    y : out std_logic_vector((96 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end concat_0e2072f8e1;


architecture behavior of concat_0e2072f8e1 is
  signal in0_1_23: unsigned((32 - 1) downto 0);
  signal in1_1_27: unsigned((64 - 1) downto 0);
  signal y_2_1_concat: unsigned((96 - 1) downto 0);
begin
  in0_1_23 <= std_logic_vector_to_unsigned(in0);
  in1_1_27 <= std_logic_vector_to_unsigned(in1);
  y_2_1_concat <= std_logic_vector_to_unsigned(unsigned_to_std_logic_vector(in0_1_23) & unsigned_to_std_logic_vector(in1_1_27));
  y <= unsigned_to_std_logic_vector(y_2_1_concat);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity concat_1ece14600f is
  port (
    in0 : in std_logic_vector((1 - 1) downto 0);
    in1 : in std_logic_vector((8 - 1) downto 0);
    y : out std_logic_vector((9 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end concat_1ece14600f;


architecture behavior of concat_1ece14600f is
  signal in0_1_23: unsigned((1 - 1) downto 0);
  signal in1_1_27: unsigned((8 - 1) downto 0);
  signal y_2_1_concat: unsigned((9 - 1) downto 0);
begin
  in0_1_23 <= std_logic_vector_to_unsigned(in0);
  in1_1_27 <= std_logic_vector_to_unsigned(in1);
  y_2_1_concat <= std_logic_vector_to_unsigned(unsigned_to_std_logic_vector(in0_1_23) & unsigned_to_std_logic_vector(in1_1_27));
  y <= unsigned_to_std_logic_vector(y_2_1_concat);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity reinterpret_8b4279cdc5 is
  port (
    input_port : in std_logic_vector((72 - 1) downto 0);
    output_port : out std_logic_vector((72 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end reinterpret_8b4279cdc5;


architecture behavior of reinterpret_8b4279cdc5 is
  signal input_port_1_40: unsigned((72 - 1) downto 0);
begin
  input_port_1_40 <= std_logic_vector_to_unsigned(input_port);
  output_port <= unsigned_to_std_logic_vector(input_port_1_40);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity reinterpret_ddc3ebdd7c is
  port (
    input_port : in std_logic_vector((16 - 1) downto 0);
    output_port : out std_logic_vector((16 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end reinterpret_ddc3ebdd7c;


architecture behavior of reinterpret_ddc3ebdd7c is
  signal input_port_1_40: unsigned((16 - 1) downto 0);
begin
  input_port_1_40 <= std_logic_vector_to_unsigned(input_port);
  output_port <= unsigned_to_std_logic_vector(input_port_1_40);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity reinterpret_9a13f6a2a0 is
  port (
    input_port : in std_logic_vector((64 - 1) downto 0);
    output_port : out std_logic_vector((64 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end reinterpret_9a13f6a2a0;


architecture behavior of reinterpret_9a13f6a2a0 is
  signal input_port_1_40: unsigned((64 - 1) downto 0);
begin
  input_port_1_40 <= std_logic_vector_to_unsigned(input_port);
  output_port <= unsigned_to_std_logic_vector(input_port_1_40);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity mux_c42b9c1ff1 is
  port (
    sel : in std_logic_vector((3 - 1) downto 0);
    d0 : in std_logic_vector((130 - 1) downto 0);
    d1 : in std_logic_vector((130 - 1) downto 0);
    d2 : in std_logic_vector((130 - 1) downto 0);
    d3 : in std_logic_vector((130 - 1) downto 0);
    d4 : in std_logic_vector((130 - 1) downto 0);
    d5 : in std_logic_vector((130 - 1) downto 0);
    d6 : in std_logic_vector((130 - 1) downto 0);
    d7 : in std_logic_vector((130 - 1) downto 0);
    y : out std_logic_vector((130 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end mux_c42b9c1ff1;


architecture behavior of mux_c42b9c1ff1 is
  signal sel_1_20: std_logic_vector((3 - 1) downto 0);
  signal d0_1_24: std_logic_vector((130 - 1) downto 0);
  signal d1_1_27: std_logic_vector((130 - 1) downto 0);
  signal d2_1_30: std_logic_vector((130 - 1) downto 0);
  signal d3_1_33: std_logic_vector((130 - 1) downto 0);
  signal d4_1_36: std_logic_vector((130 - 1) downto 0);
  signal d5_1_39: std_logic_vector((130 - 1) downto 0);
  signal d6_1_42: std_logic_vector((130 - 1) downto 0);
  signal d7_1_45: std_logic_vector((130 - 1) downto 0);
  type array_type_pipe_28_22 is array (0 to (2 - 1)) of std_logic_vector((130 - 1) downto 0);
  signal pipe_28_22: array_type_pipe_28_22 := (
    "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
  signal pipe_28_22_front_din: std_logic_vector((130 - 1) downto 0);
  signal pipe_28_22_back: std_logic_vector((130 - 1) downto 0);
  signal pipe_28_22_push_front_pop_back_en: std_logic;
  signal unregy_join_6_1: std_logic_vector((130 - 1) downto 0);
begin
  sel_1_20 <= sel;
  d0_1_24 <= d0;
  d1_1_27 <= d1;
  d2_1_30 <= d2;
  d3_1_33 <= d3;
  d4_1_36 <= d4;
  d5_1_39 <= d5;
  d6_1_42 <= d6;
  d7_1_45 <= d7;
  pipe_28_22_back <= pipe_28_22(1);
  proc_pipe_28_22: process (clk)
  is
    variable i: integer;
  begin
    if (clk'event and (clk = '1')) then
      if ((ce = '1') and (pipe_28_22_push_front_pop_back_en = '1')) then
        for i in 1 downto 1 loop 
          pipe_28_22(i) <= pipe_28_22(i-1);
        end loop;
        pipe_28_22(0) <= pipe_28_22_front_din;
      end if;
    end if;
  end process proc_pipe_28_22;
  proc_switch_6_1: process (d0_1_24, d1_1_27, d2_1_30, d3_1_33, d4_1_36, d5_1_39, d6_1_42, d7_1_45, sel_1_20)
  is
  begin
    case sel_1_20 is 
      when "000" =>
        unregy_join_6_1 <= d0_1_24;
      when "001" =>
        unregy_join_6_1 <= d1_1_27;
      when "010" =>
        unregy_join_6_1 <= d2_1_30;
      when "011" =>
        unregy_join_6_1 <= d3_1_33;
      when "100" =>
        unregy_join_6_1 <= d4_1_36;
      when "101" =>
        unregy_join_6_1 <= d5_1_39;
      when "110" =>
        unregy_join_6_1 <= d6_1_42;
      when others =>
        unregy_join_6_1 <= d7_1_45;
    end case;
  end process proc_switch_6_1;
  pipe_28_22_front_din <= unregy_join_6_1;
  pipe_28_22_push_front_pop_back_en <= '1';
  y <= pipe_28_22_back;
end behavior;


-------------------------------------------------------------------
-- System Generator version 14.6 VHDL source file.
--
-- Copyright(C) 2013 by Xilinx, Inc.  All rights reserved.  This
-- text/file contains proprietary, confidential information of Xilinx,
-- Inc., is distributed under license from Xilinx, Inc., and may be used,
-- copied and/or disclosed only pursuant to the terms of a valid license
-- agreement with Xilinx, Inc.  Xilinx hereby grants you a license to use
-- this text/file solely for design, simulation, implementation and
-- creation of design files limited to Xilinx devices or technologies.
-- Use with non-Xilinx devices or technologies is expressly prohibited
-- and immediately terminates your license unless covered by a separate
-- agreement.
--
-- Xilinx is providing this design, code, or information "as is" solely
-- for use in developing programs and solutions for Xilinx devices.  By
-- providing this design, code, or information as one possible
-- implementation of this feature, application or standard, Xilinx is
-- making no representation that this implementation is free from any
-- claims of infringement.  You are responsible for obtaining any rights
-- you may require for your implementation.  Xilinx expressly disclaims
-- any warranty whatsoever with respect to the adequacy of the
-- implementation, including but not limited to warranties of
-- merchantability or fitness for a particular purpose.
--
-- Xilinx products are not intended for use in life support appliances,
-- devices, or systems.  Use in such applications is expressly prohibited.
--
-- Any modifications that are made to the source code are done at the user's
-- sole risk and will be unsupported.
--
-- This copyright and support notice must be retained as part of this
-- text at all times.  (c) Copyright 1995-2013 Xilinx, Inc.  All rights
-- reserved.
-------------------------------------------------------------------
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;
entity xldelay is
   generic(width        : integer := -1;
           latency      : integer := -1;
           reg_retiming : integer :=  0;
           reset        : integer :=  0);
   port(d       : in std_logic_vector (width-1 downto 0);
        ce      : in std_logic;
        clk     : in std_logic;
        en      : in std_logic;
        rst     : in std_logic;
        q       : out std_logic_vector (width-1 downto 0));
end xldelay;
architecture behavior of xldelay is
   component synth_reg
      generic (width       : integer;
               latency     : integer);
      port (i       : in std_logic_vector(width-1 downto 0);
            ce      : in std_logic;
            clr     : in std_logic;
            clk     : in std_logic;
            o       : out std_logic_vector(width-1 downto 0));
   end component;
   component synth_reg_reg
      generic (width       : integer;
               latency     : integer);
      port (i       : in std_logic_vector(width-1 downto 0);
            ce      : in std_logic;
            clr     : in std_logic;
            clk     : in std_logic;
            o       : out std_logic_vector(width-1 downto 0));
   end component;
   signal internal_ce  : std_logic;
begin
   internal_ce  <= ce and en;
   srl_delay: if ((reg_retiming = 0) and (reset = 0)) or (latency < 1) generate
     synth_reg_srl_inst : synth_reg
       generic map (
         width   => width,
         latency => latency)
       port map (
         i   => d,
         ce  => internal_ce,
         clr => '0',
         clk => clk,
         o   => q);
   end generate srl_delay;
   reg_delay: if ((reg_retiming = 1) or (reset = 1)) and (latency >= 1) generate
     synth_reg_reg_inst : synth_reg_reg
       generic map (
         width   => width,
         latency => latency)
       port map (
         i   => d,
         ce  => internal_ce,
         clr => rst,
         clk => clk,
         o   => q);
   end generate reg_delay;
end architecture behavior;
library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity inverter_e5b38cca3b is
  port (
    ip : in std_logic_vector((1 - 1) downto 0);
    op : out std_logic_vector((1 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end inverter_e5b38cca3b;


architecture behavior of inverter_e5b38cca3b is
  signal ip_1_26: boolean;
  type array_type_op_mem_22_20 is array (0 to (1 - 1)) of boolean;
  signal op_mem_22_20: array_type_op_mem_22_20 := (
    0 => false);
  signal op_mem_22_20_front_din: boolean;
  signal op_mem_22_20_back: boolean;
  signal op_mem_22_20_push_front_pop_back_en: std_logic;
  signal internal_ip_12_1_bitnot: boolean;
begin
  ip_1_26 <= ((ip) = "1");
  op_mem_22_20_back <= op_mem_22_20(0);
  proc_op_mem_22_20: process (clk)
  is
    variable i: integer;
  begin
    if (clk'event and (clk = '1')) then
      if ((ce = '1') and (op_mem_22_20_push_front_pop_back_en = '1')) then
        op_mem_22_20(0) <= op_mem_22_20_front_din;
      end if;
    end if;
  end process proc_op_mem_22_20;
  internal_ip_12_1_bitnot <= ((not boolean_to_vector(ip_1_26)) = "1");
  op_mem_22_20_push_front_pop_back_en <= '0';
  op <= boolean_to_vector(internal_ip_12_1_bitnot);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity logical_f6397bdee1 is
  port (
    d0 : in std_logic_vector((1 - 1) downto 0);
    d1 : in std_logic_vector((1 - 1) downto 0);
    y : out std_logic_vector((1 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end logical_f6397bdee1;


architecture behavior of logical_f6397bdee1 is
  signal d0_1_24: std_logic;
  signal d1_1_27: std_logic;
  signal bit_2_27: std_logic;
  signal fully_2_1_bitnot: std_logic;
begin
  d0_1_24 <= d0(0);
  d1_1_27 <= d1(0);
  bit_2_27 <= d0_1_24 xor d1_1_27;
  fully_2_1_bitnot <= not bit_2_27;
  y <= std_logic_to_vector(fully_2_1_bitnot);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity concat_1d665a7331 is
  port (
    in0 : in std_logic_vector((19 - 1) downto 0);
    in1 : in std_logic_vector((1 - 1) downto 0);
    in2 : in std_logic_vector((12 - 1) downto 0);
    y : out std_logic_vector((32 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end concat_1d665a7331;


architecture behavior of concat_1d665a7331 is
  signal in0_1_23: unsigned((19 - 1) downto 0);
  signal in1_1_27: boolean;
  signal in2_1_31: unsigned((12 - 1) downto 0);
  signal y_2_1_concat: unsigned((32 - 1) downto 0);
begin
  in0_1_23 <= std_logic_vector_to_unsigned(in0);
  in1_1_27 <= ((in1) = "1");
  in2_1_31 <= std_logic_vector_to_unsigned(in2);
  y_2_1_concat <= std_logic_vector_to_unsigned(unsigned_to_std_logic_vector(in0_1_23) & boolean_to_vector(in1_1_27) & unsigned_to_std_logic_vector(in2_1_31));
  y <= unsigned_to_std_logic_vector(y_2_1_concat);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity logical_aacf6e1b0e is
  port (
    d0 : in std_logic_vector((1 - 1) downto 0);
    d1 : in std_logic_vector((1 - 1) downto 0);
    y : out std_logic_vector((1 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end logical_aacf6e1b0e;


architecture behavior of logical_aacf6e1b0e is
  signal d0_1_24: std_logic;
  signal d1_1_27: std_logic;
  signal fully_2_1_bit: std_logic;
begin
  d0_1_24 <= d0(0);
  d1_1_27 <= d1(0);
  fully_2_1_bit <= d0_1_24 or d1_1_27;
  y <= std_logic_to_vector(fully_2_1_bit);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity logical_3640e86e6c is
  port (
    d0 : in std_logic_vector((1 - 1) downto 0);
    d1 : in std_logic_vector((1 - 1) downto 0);
    d2 : in std_logic_vector((1 - 1) downto 0);
    d3 : in std_logic_vector((1 - 1) downto 0);
    y : out std_logic_vector((1 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end logical_3640e86e6c;


architecture behavior of logical_3640e86e6c is
  signal d0_1_24: std_logic;
  signal d1_1_27: std_logic;
  signal d2_1_30: std_logic;
  signal d3_1_33: std_logic;
  signal fully_2_1_bit: std_logic;
begin
  d0_1_24 <= d0(0);
  d1_1_27 <= d1(0);
  d2_1_30 <= d2(0);
  d3_1_33 <= d3(0);
  fully_2_1_bit <= d0_1_24 and d1_1_27 and d2_1_30 and d3_1_33;
  y <= std_logic_to_vector(fully_2_1_bit);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity shift_892c2104f7 is
  port (
    ip : in std_logic_vector((19 - 1) downto 0);
    op : out std_logic_vector((19 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end shift_892c2104f7;


architecture behavior of shift_892c2104f7 is
  signal ip_1_23: unsigned((19 - 1) downto 0);
  type array_type_op_mem_46_20 is array (0 to (1 - 1)) of unsigned((19 - 1) downto 0);
  signal op_mem_46_20: array_type_op_mem_46_20 := (
    0 => "0000000000000000000");
  signal op_mem_46_20_front_din: unsigned((19 - 1) downto 0);
  signal op_mem_46_20_back: unsigned((19 - 1) downto 0);
  signal op_mem_46_20_push_front_pop_back_en: std_logic;
  signal cast_internal_ip_25_3_lsh: unsigned((37 - 1) downto 0);
  signal cast_internal_ip_36_3_convert: unsigned((19 - 1) downto 0);
begin
  ip_1_23 <= std_logic_vector_to_unsigned(ip);
  op_mem_46_20_back <= op_mem_46_20(0);
  proc_op_mem_46_20: process (clk)
  is
    variable i: integer;
  begin
    if (clk'event and (clk = '1')) then
      if ((ce = '1') and (op_mem_46_20_push_front_pop_back_en = '1')) then
        op_mem_46_20(0) <= op_mem_46_20_front_din;
      end if;
    end if;
  end process proc_op_mem_46_20;
  cast_internal_ip_25_3_lsh <= u2u_cast(ip_1_23, 0, 37, 18);
  cast_internal_ip_36_3_convert <= u2u_cast(cast_internal_ip_25_3_lsh, 0, 19, 0);
  op_mem_46_20_front_din <= cast_internal_ip_36_3_convert;
  op_mem_46_20_push_front_pop_back_en <= '1';
  op <= unsigned_to_std_logic_vector(op_mem_46_20_back);
end behavior;


-------------------------------------------------------------------
-- System Generator version 14.6 VHDL source file.
--
-- Copyright(C) 2013 by Xilinx, Inc.  All rights reserved.  This
-- text/file contains proprietary, confidential information of Xilinx,
-- Inc., is distributed under license from Xilinx, Inc., and may be used,
-- copied and/or disclosed only pursuant to the terms of a valid license
-- agreement with Xilinx, Inc.  Xilinx hereby grants you a license to use
-- this text/file solely for design, simulation, implementation and
-- creation of design files limited to Xilinx devices or technologies.
-- Use with non-Xilinx devices or technologies is expressly prohibited
-- and immediately terminates your license unless covered by a separate
-- agreement.
--
-- Xilinx is providing this design, code, or information "as is" solely
-- for use in developing programs and solutions for Xilinx devices.  By
-- providing this design, code, or information as one possible
-- implementation of this feature, application or standard, Xilinx is
-- making no representation that this implementation is free from any
-- claims of infringement.  You are responsible for obtaining any rights
-- you may require for your implementation.  Xilinx expressly disclaims
-- any warranty whatsoever with respect to the adequacy of the
-- implementation, including but not limited to warranties of
-- merchantability or fitness for a particular purpose.
--
-- Xilinx products are not intended for use in life support appliances,
-- devices, or systems.  Use in such applications is expressly prohibited.
--
-- Any modifications that are made to the source code are done at the user's
-- sole risk and will be unsupported.
--
-- This copyright and support notice must be retained as part of this
-- text at all times.  (c) Copyright 1995-2013 Xilinx, Inc.  All rights
-- reserved.
-------------------------------------------------------------------
-- synopsys translate_off
library XilinxCoreLib;
-- synopsys translate_on
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;
entity xlcounter_free_c09f12_01 is
  generic (
    core_name0: string := "";
    op_width: integer := 5;
    op_arith: integer := xlSigned
  );
  port (
    ce: in std_logic;
    clr: in std_logic;
    clk: in std_logic;
    op: out std_logic_vector(op_width - 1 downto 0);
    up: in std_logic_vector(0 downto 0) := (others => '0');
    load: in std_logic_vector(0 downto 0) := (others => '0');
    din: in std_logic_vector(op_width - 1 downto 0) := (others => '0');
    en: in std_logic_vector(0 downto 0);
    rst: in std_logic_vector(0 downto 0)
  );
end xlcounter_free_c09f12_01 ;
architecture behavior of xlcounter_free_c09f12_01 is
  component cntr_11_0_047d617e0a3da9e0
    port (
      clk: in std_logic;
      ce: in std_logic;
      SINIT: in std_logic;
      q: out std_logic_vector(op_width - 1 downto 0)
    );
  end component;

  attribute syn_black_box of cntr_11_0_047d617e0a3da9e0:
    component is true;
  attribute fpga_dont_touch of cntr_11_0_047d617e0a3da9e0:
    component is "true";
  attribute box_type of cntr_11_0_047d617e0a3da9e0:
    component  is "black_box";
  component cntr_11_0_263175d139d7ac6d
    port (
      clk: in std_logic;
      ce: in std_logic;
      SINIT: in std_logic;
      q: out std_logic_vector(op_width - 1 downto 0)
    );
  end component;

  attribute syn_black_box of cntr_11_0_263175d139d7ac6d:
    component is true;
  attribute fpga_dont_touch of cntr_11_0_263175d139d7ac6d:
    component is "true";
  attribute box_type of cntr_11_0_263175d139d7ac6d:
    component  is "black_box";
  component cntr_11_0_e22be57ef6aab3d8
    port (
      clk: in std_logic;
      ce: in std_logic;
      SCLR: in std_logic;
      q: out std_logic_vector(op_width - 1 downto 0)
    );
  end component;

  attribute syn_black_box of cntr_11_0_e22be57ef6aab3d8:
    component is true;
  attribute fpga_dont_touch of cntr_11_0_e22be57ef6aab3d8:
    component is "true";
  attribute box_type of cntr_11_0_e22be57ef6aab3d8:
    component  is "black_box";
  component cntr_11_0_68c512538c59954a
    port (
      clk: in std_logic;
      ce: in std_logic;
      SINIT: in std_logic;
      q: out std_logic_vector(op_width - 1 downto 0)
    );
  end component;

  attribute syn_black_box of cntr_11_0_68c512538c59954a:
    component is true;
  attribute fpga_dont_touch of cntr_11_0_68c512538c59954a:
    component is "true";
  attribute box_type of cntr_11_0_68c512538c59954a:
    component  is "black_box";
  component cntr_11_0_50ef766046ea9bf4
    port (
      clk: in std_logic;
      ce: in std_logic;
      SINIT: in std_logic;
      q: out std_logic_vector(op_width - 1 downto 0)
    );
  end component;

  attribute syn_black_box of cntr_11_0_50ef766046ea9bf4:
    component is true;
  attribute fpga_dont_touch of cntr_11_0_50ef766046ea9bf4:
    component is "true";
  attribute box_type of cntr_11_0_50ef766046ea9bf4:
    component  is "black_box";
  component cntr_11_0_aeada998ec385fcd
    port (
      clk: in std_logic;
      ce: in std_logic;
      SINIT: in std_logic;
      q: out std_logic_vector(op_width - 1 downto 0)
    );
  end component;

  attribute syn_black_box of cntr_11_0_aeada998ec385fcd:
    component is true;
  attribute fpga_dont_touch of cntr_11_0_aeada998ec385fcd:
    component is "true";
  attribute box_type of cntr_11_0_aeada998ec385fcd:
    component  is "black_box";
  component cntr_11_0_3ad9dc21603f5ae0
    port (
      clk: in std_logic;
      ce: in std_logic;
      SINIT: in std_logic;
      load: in std_logic;
      l: in std_logic_vector(op_width - 1 downto 0);
      q: out std_logic_vector(op_width - 1 downto 0)
    );
  end component;

  attribute syn_black_box of cntr_11_0_3ad9dc21603f5ae0:
    component is true;
  attribute fpga_dont_touch of cntr_11_0_3ad9dc21603f5ae0:
    component is "true";
  attribute box_type of cntr_11_0_3ad9dc21603f5ae0:
    component  is "black_box";
  component cntr_11_0_c0e9491a3fe88c1d
    port (
      clk: in std_logic;
      ce: in std_logic;
      SINIT: in std_logic;
      load: in std_logic;
      l: in std_logic_vector(op_width - 1 downto 0);
      q: out std_logic_vector(op_width - 1 downto 0)
    );
  end component;

  attribute syn_black_box of cntr_11_0_c0e9491a3fe88c1d:
    component is true;
  attribute fpga_dont_touch of cntr_11_0_c0e9491a3fe88c1d:
    component is "true";
  attribute box_type of cntr_11_0_c0e9491a3fe88c1d:
    component  is "black_box";
  component cntr_11_0_10284ba20859264d
    port (
      clk: in std_logic;
      ce: in std_logic;
      SINIT: in std_logic;
      load: in std_logic;
      l: in std_logic_vector(op_width - 1 downto 0);
      q: out std_logic_vector(op_width - 1 downto 0)
    );
  end component;

  attribute syn_black_box of cntr_11_0_10284ba20859264d:
    component is true;
  attribute fpga_dont_touch of cntr_11_0_10284ba20859264d:
    component is "true";
  attribute box_type of cntr_11_0_10284ba20859264d:
    component  is "black_box";
  component cntr_11_0_f2301c6681846b15
    port (
      clk: in std_logic;
      ce: in std_logic;
      SINIT: in std_logic;
      q: out std_logic_vector(op_width - 1 downto 0)
    );
  end component;

  attribute syn_black_box of cntr_11_0_f2301c6681846b15:
    component is true;
  attribute fpga_dont_touch of cntr_11_0_f2301c6681846b15:
    component is "true";
  attribute box_type of cntr_11_0_f2301c6681846b15:
    component  is "black_box";
  component cntr_11_0_81c610783c35b073
    port (
      clk: in std_logic;
      ce: in std_logic;
      SINIT: in std_logic;
      load: in std_logic;
      l: in std_logic_vector(op_width - 1 downto 0);
      q: out std_logic_vector(op_width - 1 downto 0)
    );
  end component;

  attribute syn_black_box of cntr_11_0_81c610783c35b073:
    component is true;
  attribute fpga_dont_touch of cntr_11_0_81c610783c35b073:
    component is "true";
  attribute box_type of cntr_11_0_81c610783c35b073:
    component  is "black_box";
  component cntr_11_0_77d9d8bb324abfb9
    port (
      clk: in std_logic;
      ce: in std_logic;
      SINIT: in std_logic;
      q: out std_logic_vector(op_width - 1 downto 0)
    );
  end component;

  attribute syn_black_box of cntr_11_0_77d9d8bb324abfb9:
    component is true;
  attribute fpga_dont_touch of cntr_11_0_77d9d8bb324abfb9:
    component is "true";
  attribute box_type of cntr_11_0_77d9d8bb324abfb9:
    component  is "black_box";
  component cntr_11_0_b502b5814ea90a92
    port (
      clk: in std_logic;
      ce: in std_logic;
      SINIT: in std_logic;
      load: in std_logic;
      l: in std_logic_vector(op_width - 1 downto 0);
      q: out std_logic_vector(op_width - 1 downto 0)
    );
  end component;

  attribute syn_black_box of cntr_11_0_b502b5814ea90a92:
    component is true;
  attribute fpga_dont_touch of cntr_11_0_b502b5814ea90a92:
    component is "true";
  attribute box_type of cntr_11_0_b502b5814ea90a92:
    component  is "black_box";
  component cntr_11_0_514048f9c72a30b1
    port (
      clk: in std_logic;
      ce: in std_logic;
      SINIT: in std_logic;
      q: out std_logic_vector(op_width - 1 downto 0)
    );
  end component;

  attribute syn_black_box of cntr_11_0_514048f9c72a30b1:
    component is true;
  attribute fpga_dont_touch of cntr_11_0_514048f9c72a30b1:
    component is "true";
  attribute box_type of cntr_11_0_514048f9c72a30b1:
    component  is "black_box";
  component cntr_11_0_93187ca4b7bc144e
    port (
      clk: in std_logic;
      ce: in std_logic;
      SINIT: in std_logic;
      load: in std_logic;
      l: in std_logic_vector(op_width - 1 downto 0);
      q: out std_logic_vector(op_width - 1 downto 0)
    );
  end component;

  attribute syn_black_box of cntr_11_0_93187ca4b7bc144e:
    component is true;
  attribute fpga_dont_touch of cntr_11_0_93187ca4b7bc144e:
    component is "true";
  attribute box_type of cntr_11_0_93187ca4b7bc144e:
    component  is "black_box";
  component cntr_11_0_7eefee4be204e56b
    port (
      clk: in std_logic;
      ce: in std_logic;
      SINIT: in std_logic;
      load: in std_logic;
      l: in std_logic_vector(op_width - 1 downto 0);
      q: out std_logic_vector(op_width - 1 downto 0)
    );
  end component;

  attribute syn_black_box of cntr_11_0_7eefee4be204e56b:
    component is true;
  attribute fpga_dont_touch of cntr_11_0_7eefee4be204e56b:
    component is "true";
  attribute box_type of cntr_11_0_7eefee4be204e56b:
    component  is "black_box";
  component cntr_11_0_09a48837e6414c49
    port (
      clk: in std_logic;
      ce: in std_logic;
      SINIT: in std_logic;
      q: out std_logic_vector(op_width - 1 downto 0)
    );
  end component;

  attribute syn_black_box of cntr_11_0_09a48837e6414c49:
    component is true;
  attribute fpga_dont_touch of cntr_11_0_09a48837e6414c49:
    component is "true";
  attribute box_type of cntr_11_0_09a48837e6414c49:
    component  is "black_box";
  component cntr_11_0_ecb560ca58503876
    port (
      clk: in std_logic;
      ce: in std_logic;
      SINIT: in std_logic;
      q: out std_logic_vector(op_width - 1 downto 0)
    );
  end component;

  attribute syn_black_box of cntr_11_0_ecb560ca58503876:
    component is true;
  attribute fpga_dont_touch of cntr_11_0_ecb560ca58503876:
    component is "true";
  attribute box_type of cntr_11_0_ecb560ca58503876:
    component  is "black_box";
  component cntr_11_0_9407b84ef10719d1
    port (
      clk: in std_logic;
      ce: in std_logic;
      SCLR: in std_logic;
      q: out std_logic_vector(op_width - 1 downto 0)
    );
  end component;

  attribute syn_black_box of cntr_11_0_9407b84ef10719d1:
    component is true;
  attribute fpga_dont_touch of cntr_11_0_9407b84ef10719d1:
    component is "true";
  attribute box_type of cntr_11_0_9407b84ef10719d1:
    component  is "black_box";
  component cntr_11_0_4df07e1ba68d0c6e
    port (
      clk: in std_logic;
      ce: in std_logic;
      SINIT: in std_logic;
      q: out std_logic_vector(op_width - 1 downto 0)
    );
  end component;

  attribute syn_black_box of cntr_11_0_4df07e1ba68d0c6e:
    component is true;
  attribute fpga_dont_touch of cntr_11_0_4df07e1ba68d0c6e:
    component is "true";
  attribute box_type of cntr_11_0_4df07e1ba68d0c6e:
    component  is "black_box";
  component cntr_11_0_99cfda0476972b76
    port (
      clk: in std_logic;
      ce: in std_logic;
      SINIT: in std_logic;
      q: out std_logic_vector(op_width - 1 downto 0)
    );
  end component;

  attribute syn_black_box of cntr_11_0_99cfda0476972b76:
    component is true;
  attribute fpga_dont_touch of cntr_11_0_99cfda0476972b76:
    component is "true";
  attribute box_type of cntr_11_0_99cfda0476972b76:
    component  is "black_box";
  component cntr_11_0_0400b347688ef51a
    port (
      clk: in std_logic;
      ce: in std_logic;
      SINIT: in std_logic;
      q: out std_logic_vector(op_width - 1 downto 0)
    );
  end component;

  attribute syn_black_box of cntr_11_0_0400b347688ef51a:
    component is true;
  attribute fpga_dont_touch of cntr_11_0_0400b347688ef51a:
    component is "true";
  attribute box_type of cntr_11_0_0400b347688ef51a:
    component  is "black_box";
  component cntr_11_0_ccf1a4007466a9ac
    port (
      clk: in std_logic;
      ce: in std_logic;
      SINIT: in std_logic;
      q: out std_logic_vector(op_width - 1 downto 0)
    );
  end component;

  attribute syn_black_box of cntr_11_0_ccf1a4007466a9ac:
    component is true;
  attribute fpga_dont_touch of cntr_11_0_ccf1a4007466a9ac:
    component is "true";
  attribute box_type of cntr_11_0_ccf1a4007466a9ac:
    component  is "black_box";
  component cntr_11_0_0c0d4ef78e6c6aa9
    port (
      clk: in std_logic;
      ce: in std_logic;
      SINIT: in std_logic;
      q: out std_logic_vector(op_width - 1 downto 0)
    );
  end component;

  attribute syn_black_box of cntr_11_0_0c0d4ef78e6c6aa9:
    component is true;
  attribute fpga_dont_touch of cntr_11_0_0c0d4ef78e6c6aa9:
    component is "true";
  attribute box_type of cntr_11_0_0c0d4ef78e6c6aa9:
    component  is "black_box";
  component cntr_11_0_d98da069fc1111dd
    port (
      clk: in std_logic;
      ce: in std_logic;
      SINIT: in std_logic;
      up: in std_logic;
      q: out std_logic_vector(op_width - 1 downto 0)
    );
  end component;

  attribute syn_black_box of cntr_11_0_d98da069fc1111dd:
    component is true;
  attribute fpga_dont_touch of cntr_11_0_d98da069fc1111dd:
    component is "true";
  attribute box_type of cntr_11_0_d98da069fc1111dd:
    component  is "black_box";
  component cntr_11_0_48e1762367ed2904
    port (
      clk: in std_logic;
      ce: in std_logic;
      SCLR: in std_logic;
      q: out std_logic_vector(op_width - 1 downto 0)
    );
  end component;

  attribute syn_black_box of cntr_11_0_48e1762367ed2904:
    component is true;
  attribute fpga_dont_touch of cntr_11_0_48e1762367ed2904:
    component is "true";
  attribute box_type of cntr_11_0_48e1762367ed2904:
    component  is "black_box";
  component cntr_11_0_5175c845ca556d8f
    port (
      clk: in std_logic;
      ce: in std_logic;
      SINIT: in std_logic;
      q: out std_logic_vector(op_width - 1 downto 0)
    );
  end component;

  attribute syn_black_box of cntr_11_0_5175c845ca556d8f:
    component is true;
  attribute fpga_dont_touch of cntr_11_0_5175c845ca556d8f:
    component is "true";
  attribute box_type of cntr_11_0_5175c845ca556d8f:
    component  is "black_box";
  component cntr_11_0_9cad7c433fbdcec9
    port (
      clk: in std_logic;
      ce: in std_logic;
      SINIT: in std_logic;
      q: out std_logic_vector(op_width - 1 downto 0)
    );
  end component;

  attribute syn_black_box of cntr_11_0_9cad7c433fbdcec9:
    component is true;
  attribute fpga_dont_touch of cntr_11_0_9cad7c433fbdcec9:
    component is "true";
  attribute box_type of cntr_11_0_9cad7c433fbdcec9:
    component  is "black_box";
  component cntr_11_0_5c141fadd7b08b3b
    port (
      clk: in std_logic;
      ce: in std_logic;
      SINIT: in std_logic;
      q: out std_logic_vector(op_width - 1 downto 0)
    );
  end component;

  attribute syn_black_box of cntr_11_0_5c141fadd7b08b3b:
    component is true;
  attribute fpga_dont_touch of cntr_11_0_5c141fadd7b08b3b:
    component is "true";
  attribute box_type of cntr_11_0_5c141fadd7b08b3b:
    component  is "black_box";
  component cntr_11_0_e16427883c4a8980
    port (
      clk: in std_logic;
      ce: in std_logic;
      SINIT: in std_logic;
      load: in std_logic;
      l: in std_logic_vector(op_width - 1 downto 0);
      q: out std_logic_vector(op_width - 1 downto 0)
    );
  end component;

  attribute syn_black_box of cntr_11_0_e16427883c4a8980:
    component is true;
  attribute fpga_dont_touch of cntr_11_0_e16427883c4a8980:
    component is "true";
  attribute box_type of cntr_11_0_e16427883c4a8980:
    component  is "black_box";
  component cntr_11_0_d443bc0f2f8ab282
    port (
      clk: in std_logic;
      ce: in std_logic;
      SINIT: in std_logic;
      q: out std_logic_vector(op_width - 1 downto 0)
    );
  end component;

  attribute syn_black_box of cntr_11_0_d443bc0f2f8ab282:
    component is true;
  attribute fpga_dont_touch of cntr_11_0_d443bc0f2f8ab282:
    component is "true";
  attribute box_type of cntr_11_0_d443bc0f2f8ab282:
    component  is "black_box";
  component cntr_11_0_14e5b6d5c91ed436
    port (
      clk: in std_logic;
      ce: in std_logic;
      SINIT: in std_logic;
      q: out std_logic_vector(op_width - 1 downto 0)
    );
  end component;

  attribute syn_black_box of cntr_11_0_14e5b6d5c91ed436:
    component is true;
  attribute fpga_dont_touch of cntr_11_0_14e5b6d5c91ed436:
    component is "true";
  attribute box_type of cntr_11_0_14e5b6d5c91ed436:
    component  is "black_box";
  component cntr_11_0_85571b722fff644c
    port (
      clk: in std_logic;
      ce: in std_logic;
      SINIT: in std_logic;
      q: out std_logic_vector(op_width - 1 downto 0)
    );
  end component;

  attribute syn_black_box of cntr_11_0_85571b722fff644c:
    component is true;
  attribute fpga_dont_touch of cntr_11_0_85571b722fff644c:
    component is "true";
  attribute box_type of cntr_11_0_85571b722fff644c:
    component  is "black_box";
  component cntr_11_0_ed472a6d5a5cb515
    port (
      clk: in std_logic;
      ce: in std_logic;
      SINIT: in std_logic;
      q: out std_logic_vector(op_width - 1 downto 0)
    );
  end component;

  attribute syn_black_box of cntr_11_0_ed472a6d5a5cb515:
    component is true;
  attribute fpga_dont_touch of cntr_11_0_ed472a6d5a5cb515:
    component is "true";
  attribute box_type of cntr_11_0_ed472a6d5a5cb515:
    component  is "black_box";
  component cntr_11_0_904cce14b13b282e
    port (
      clk: in std_logic;
      ce: in std_logic;
      SCLR: in std_logic;
      q: out std_logic_vector(op_width - 1 downto 0)
    );
  end component;

  attribute syn_black_box of cntr_11_0_904cce14b13b282e:
    component is true;
  attribute fpga_dont_touch of cntr_11_0_904cce14b13b282e:
    component is "true";
  attribute box_type of cntr_11_0_904cce14b13b282e:
    component  is "black_box";
-- synopsys translate_off
  constant zeroVec: std_logic_vector(op_width - 1 downto 0) := (others => '0');
  constant oneVec: std_logic_vector(op_width - 1 downto 0) := (others => '1');
  constant zeroStr: string(1 to op_width) :=
    std_logic_vector_to_bin_string(zeroVec);
  constant oneStr: string(1 to op_width) :=
    std_logic_vector_to_bin_string(oneVec);
-- synopsys translate_on
  signal core_sinit: std_logic;
  signal core_ce: std_logic;
  signal op_net: std_logic_vector(op_width - 1 downto 0);
begin
  core_ce <= ce and en(0);
  core_sinit <= (clr or rst(0)) and ce;
  op <= op_net;
  comp0: if ((core_name0 = "cntr_11_0_047d617e0a3da9e0")) generate
    core_instance0: cntr_11_0_047d617e0a3da9e0
      port map (
        clk => clk,
        ce => core_ce,
        SINIT => core_sinit,
        q => op_net
      );
  end generate;
  comp1: if ((core_name0 = "cntr_11_0_263175d139d7ac6d")) generate
    core_instance1: cntr_11_0_263175d139d7ac6d
      port map (
        clk => clk,
        ce => core_ce,
        SINIT => core_sinit,
        q => op_net
      );
  end generate;
  comp2: if ((core_name0 = "cntr_11_0_e22be57ef6aab3d8")) generate
    core_instance2: cntr_11_0_e22be57ef6aab3d8
      port map (
        clk => clk,
        ce => core_ce,
        SCLR => core_sinit,
        q => op_net
      );
  end generate;
  comp3: if ((core_name0 = "cntr_11_0_68c512538c59954a")) generate
    core_instance3: cntr_11_0_68c512538c59954a
      port map (
        clk => clk,
        ce => core_ce,
        SINIT => core_sinit,
        q => op_net
      );
  end generate;
  comp4: if ((core_name0 = "cntr_11_0_50ef766046ea9bf4")) generate
    core_instance4: cntr_11_0_50ef766046ea9bf4
      port map (
        clk => clk,
        ce => core_ce,
        SINIT => core_sinit,
        q => op_net
      );
  end generate;
  comp5: if ((core_name0 = "cntr_11_0_aeada998ec385fcd")) generate
    core_instance5: cntr_11_0_aeada998ec385fcd
      port map (
        clk => clk,
        ce => core_ce,
        SINIT => core_sinit,
        q => op_net
      );
  end generate;
  comp6: if ((core_name0 = "cntr_11_0_3ad9dc21603f5ae0")) generate
    core_instance6: cntr_11_0_3ad9dc21603f5ae0
      port map (
        clk => clk,
        ce => core_ce,
        SINIT => core_sinit,
        load => load(0),
        l => din,
        q => op_net
      );
  end generate;
  comp7: if ((core_name0 = "cntr_11_0_c0e9491a3fe88c1d")) generate
    core_instance7: cntr_11_0_c0e9491a3fe88c1d
      port map (
        clk => clk,
        ce => core_ce,
        SINIT => core_sinit,
        load => load(0),
        l => din,
        q => op_net
      );
  end generate;
  comp8: if ((core_name0 = "cntr_11_0_10284ba20859264d")) generate
    core_instance8: cntr_11_0_10284ba20859264d
      port map (
        clk => clk,
        ce => core_ce,
        SINIT => core_sinit,
        load => load(0),
        l => din,
        q => op_net
      );
  end generate;
  comp9: if ((core_name0 = "cntr_11_0_f2301c6681846b15")) generate
    core_instance9: cntr_11_0_f2301c6681846b15
      port map (
        clk => clk,
        ce => core_ce,
        SINIT => core_sinit,
        q => op_net
      );
  end generate;
  comp10: if ((core_name0 = "cntr_11_0_81c610783c35b073")) generate
    core_instance10: cntr_11_0_81c610783c35b073
      port map (
        clk => clk,
        ce => core_ce,
        SINIT => core_sinit,
        load => load(0),
        l => din,
        q => op_net
      );
  end generate;
  comp11: if ((core_name0 = "cntr_11_0_77d9d8bb324abfb9")) generate
    core_instance11: cntr_11_0_77d9d8bb324abfb9
      port map (
        clk => clk,
        ce => core_ce,
        SINIT => core_sinit,
        q => op_net
      );
  end generate;
  comp12: if ((core_name0 = "cntr_11_0_b502b5814ea90a92")) generate
    core_instance12: cntr_11_0_b502b5814ea90a92
      port map (
        clk => clk,
        ce => core_ce,
        SINIT => core_sinit,
        load => load(0),
        l => din,
        q => op_net
      );
  end generate;
  comp13: if ((core_name0 = "cntr_11_0_514048f9c72a30b1")) generate
    core_instance13: cntr_11_0_514048f9c72a30b1
      port map (
        clk => clk,
        ce => core_ce,
        SINIT => core_sinit,
        q => op_net
      );
  end generate;
  comp14: if ((core_name0 = "cntr_11_0_93187ca4b7bc144e")) generate
    core_instance14: cntr_11_0_93187ca4b7bc144e
      port map (
        clk => clk,
        ce => core_ce,
        SINIT => core_sinit,
        load => load(0),
        l => din,
        q => op_net
      );
  end generate;
  comp15: if ((core_name0 = "cntr_11_0_7eefee4be204e56b")) generate
    core_instance15: cntr_11_0_7eefee4be204e56b
      port map (
        clk => clk,
        ce => core_ce,
        SINIT => core_sinit,
        load => load(0),
        l => din,
        q => op_net
      );
  end generate;
  comp16: if ((core_name0 = "cntr_11_0_09a48837e6414c49")) generate
    core_instance16: cntr_11_0_09a48837e6414c49
      port map (
        clk => clk,
        ce => core_ce,
        SINIT => core_sinit,
        q => op_net
      );
  end generate;
  comp17: if ((core_name0 = "cntr_11_0_ecb560ca58503876")) generate
    core_instance17: cntr_11_0_ecb560ca58503876
      port map (
        clk => clk,
        ce => core_ce,
        SINIT => core_sinit,
        q => op_net
      );
  end generate;
  comp18: if ((core_name0 = "cntr_11_0_9407b84ef10719d1")) generate
    core_instance18: cntr_11_0_9407b84ef10719d1
      port map (
        clk => clk,
        ce => core_ce,
        SCLR => core_sinit,
        q => op_net
      );
  end generate;
  comp19: if ((core_name0 = "cntr_11_0_4df07e1ba68d0c6e")) generate
    core_instance19: cntr_11_0_4df07e1ba68d0c6e
      port map (
        clk => clk,
        ce => core_ce,
        SINIT => core_sinit,
        q => op_net
      );
  end generate;
  comp20: if ((core_name0 = "cntr_11_0_99cfda0476972b76")) generate
    core_instance20: cntr_11_0_99cfda0476972b76
      port map (
        clk => clk,
        ce => core_ce,
        SINIT => core_sinit,
        q => op_net
      );
  end generate;
  comp21: if ((core_name0 = "cntr_11_0_0400b347688ef51a")) generate
    core_instance21: cntr_11_0_0400b347688ef51a
      port map (
        clk => clk,
        ce => core_ce,
        SINIT => core_sinit,
        q => op_net
      );
  end generate;
  comp22: if ((core_name0 = "cntr_11_0_ccf1a4007466a9ac")) generate
    core_instance22: cntr_11_0_ccf1a4007466a9ac
      port map (
        clk => clk,
        ce => core_ce,
        SINIT => core_sinit,
        q => op_net
      );
  end generate;
  comp23: if ((core_name0 = "cntr_11_0_0c0d4ef78e6c6aa9")) generate
    core_instance23: cntr_11_0_0c0d4ef78e6c6aa9
      port map (
        clk => clk,
        ce => core_ce,
        SINIT => core_sinit,
        q => op_net
      );
  end generate;
  comp24: if ((core_name0 = "cntr_11_0_d98da069fc1111dd")) generate
    core_instance24: cntr_11_0_d98da069fc1111dd
      port map (
        clk => clk,
        ce => core_ce,
        SINIT => core_sinit,
        up => up(0),
        q => op_net
      );
  end generate;
  comp25: if ((core_name0 = "cntr_11_0_48e1762367ed2904")) generate
    core_instance25: cntr_11_0_48e1762367ed2904
      port map (
        clk => clk,
        ce => core_ce,
        SCLR => core_sinit,
        q => op_net
      );
  end generate;
  comp26: if ((core_name0 = "cntr_11_0_5175c845ca556d8f")) generate
    core_instance26: cntr_11_0_5175c845ca556d8f
      port map (
        clk => clk,
        ce => core_ce,
        SINIT => core_sinit,
        q => op_net
      );
  end generate;
  comp27: if ((core_name0 = "cntr_11_0_9cad7c433fbdcec9")) generate
    core_instance27: cntr_11_0_9cad7c433fbdcec9
      port map (
        clk => clk,
        ce => core_ce,
        SINIT => core_sinit,
        q => op_net
      );
  end generate;
  comp28: if ((core_name0 = "cntr_11_0_5c141fadd7b08b3b")) generate
    core_instance28: cntr_11_0_5c141fadd7b08b3b
      port map (
        clk => clk,
        ce => core_ce,
        SINIT => core_sinit,
        q => op_net
      );
  end generate;
  comp29: if ((core_name0 = "cntr_11_0_e16427883c4a8980")) generate
    core_instance29: cntr_11_0_e16427883c4a8980
      port map (
        clk => clk,
        ce => core_ce,
        SINIT => core_sinit,
        load => load(0),
        l => din,
        q => op_net
      );
  end generate;
  comp30: if ((core_name0 = "cntr_11_0_d443bc0f2f8ab282")) generate
    core_instance30: cntr_11_0_d443bc0f2f8ab282
      port map (
        clk => clk,
        ce => core_ce,
        SINIT => core_sinit,
        q => op_net
      );
  end generate;
  comp31: if ((core_name0 = "cntr_11_0_14e5b6d5c91ed436")) generate
    core_instance31: cntr_11_0_14e5b6d5c91ed436
      port map (
        clk => clk,
        ce => core_ce,
        SINIT => core_sinit,
        q => op_net
      );
  end generate;
  comp32: if ((core_name0 = "cntr_11_0_85571b722fff644c")) generate
    core_instance32: cntr_11_0_85571b722fff644c
      port map (
        clk => clk,
        ce => core_ce,
        SINIT => core_sinit,
        q => op_net
      );
  end generate;
  comp33: if ((core_name0 = "cntr_11_0_ed472a6d5a5cb515")) generate
    core_instance33: cntr_11_0_ed472a6d5a5cb515
      port map (
        clk => clk,
        ce => core_ce,
        SINIT => core_sinit,
        q => op_net
      );
  end generate;
  comp34: if ((core_name0 = "cntr_11_0_904cce14b13b282e")) generate
    core_instance34: cntr_11_0_904cce14b13b282e
      port map (
        clk => clk,
        ce => core_ce,
        SCLR => core_sinit,
        q => op_net
      );
  end generate;
end behavior;
library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity concat_762608f33d is
  port (
    in0 : in std_logic_vector((8 - 1) downto 0);
    in1 : in std_logic_vector((32 - 1) downto 0);
    in2 : in std_logic_vector((8 - 1) downto 0);
    in3 : in std_logic_vector((32 - 1) downto 0);
    y : out std_logic_vector((80 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end concat_762608f33d;


architecture behavior of concat_762608f33d is
  signal in0_1_23: unsigned((8 - 1) downto 0);
  signal in1_1_27: unsigned((32 - 1) downto 0);
  signal in2_1_31: unsigned((8 - 1) downto 0);
  signal in3_1_35: unsigned((32 - 1) downto 0);
  signal y_2_1_concat: unsigned((80 - 1) downto 0);
begin
  in0_1_23 <= std_logic_vector_to_unsigned(in0);
  in1_1_27 <= std_logic_vector_to_unsigned(in1);
  in2_1_31 <= std_logic_vector_to_unsigned(in2);
  in3_1_35 <= std_logic_vector_to_unsigned(in3);
  y_2_1_concat <= std_logic_vector_to_unsigned(unsigned_to_std_logic_vector(in0_1_23) & unsigned_to_std_logic_vector(in1_1_27) & unsigned_to_std_logic_vector(in2_1_31) & unsigned_to_std_logic_vector(in3_1_35));
  y <= unsigned_to_std_logic_vector(y_2_1_concat);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity constant_91ef1678ca is
  port (
    op : out std_logic_vector((8 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end constant_91ef1678ca;


architecture behavior of constant_91ef1678ca is
begin
  op <= "00000000";
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity logical_799f62af22 is
  port (
    d0 : in std_logic_vector((1 - 1) downto 0);
    d1 : in std_logic_vector((1 - 1) downto 0);
    y : out std_logic_vector((1 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end logical_799f62af22;


architecture behavior of logical_799f62af22 is
  signal d0_1_24: std_logic;
  signal d1_1_27: std_logic;
  type array_type_latency_pipe_5_26 is array (0 to (1 - 1)) of std_logic;
  signal latency_pipe_5_26: array_type_latency_pipe_5_26 := (
    0 => '0');
  signal latency_pipe_5_26_front_din: std_logic;
  signal latency_pipe_5_26_back: std_logic;
  signal latency_pipe_5_26_push_front_pop_back_en: std_logic;
  signal fully_2_1_bit: std_logic;
begin
  d0_1_24 <= d0(0);
  d1_1_27 <= d1(0);
  latency_pipe_5_26_back <= latency_pipe_5_26(0);
  proc_latency_pipe_5_26: process (clk)
  is
    variable i: integer;
  begin
    if (clk'event and (clk = '1')) then
      if ((ce = '1') and (latency_pipe_5_26_push_front_pop_back_en = '1')) then
        latency_pipe_5_26(0) <= latency_pipe_5_26_front_din;
      end if;
    end if;
  end process proc_latency_pipe_5_26;
  fully_2_1_bit <= d0_1_24 and d1_1_27;
  latency_pipe_5_26_front_din <= fully_2_1_bit;
  latency_pipe_5_26_push_front_pop_back_en <= '1';
  y <= std_logic_to_vector(latency_pipe_5_26_back);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity mux_a575c74b27 is
  port (
    sel : in std_logic_vector((1 - 1) downto 0);
    d0 : in std_logic_vector((80 - 1) downto 0);
    d1 : in std_logic_vector((80 - 1) downto 0);
    y : out std_logic_vector((80 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end mux_a575c74b27;


architecture behavior of mux_a575c74b27 is
  signal sel_1_20: std_logic_vector((1 - 1) downto 0);
  signal d0_1_24: std_logic_vector((80 - 1) downto 0);
  signal d1_1_27: std_logic_vector((80 - 1) downto 0);
  type array_type_pipe_16_22 is array (0 to (1 - 1)) of std_logic_vector((80 - 1) downto 0);
  signal pipe_16_22: array_type_pipe_16_22 := (
    0 => "00000000000000000000000000000000000000000000000000000000000000000000000000000000");
  signal pipe_16_22_front_din: std_logic_vector((80 - 1) downto 0);
  signal pipe_16_22_back: std_logic_vector((80 - 1) downto 0);
  signal pipe_16_22_push_front_pop_back_en: std_logic;
  signal unregy_join_6_1: std_logic_vector((80 - 1) downto 0);
begin
  sel_1_20 <= sel;
  d0_1_24 <= d0;
  d1_1_27 <= d1;
  pipe_16_22_back <= pipe_16_22(0);
  proc_pipe_16_22: process (clk)
  is
    variable i: integer;
  begin
    if (clk'event and (clk = '1')) then
      if ((ce = '1') and (pipe_16_22_push_front_pop_back_en = '1')) then
        pipe_16_22(0) <= pipe_16_22_front_din;
      end if;
    end if;
  end process proc_pipe_16_22;
  proc_switch_6_1: process (d0_1_24, d1_1_27, sel_1_20)
  is
  begin
    case sel_1_20 is 
      when "0" =>
        unregy_join_6_1 <= d0_1_24;
      when others =>
        unregy_join_6_1 <= d1_1_27;
    end case;
  end process proc_switch_6_1;
  pipe_16_22_front_din <= unregy_join_6_1;
  pipe_16_22_push_front_pop_back_en <= '1';
  y <= pipe_16_22_back;
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity relational_5f1eb17108 is
  port (
    a : in std_logic_vector((2 - 1) downto 0);
    b : in std_logic_vector((2 - 1) downto 0);
    op : out std_logic_vector((1 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end relational_5f1eb17108;


architecture behavior of relational_5f1eb17108 is
  signal a_1_31: unsigned((2 - 1) downto 0);
  signal b_1_34: unsigned((2 - 1) downto 0);
  signal result_12_3_rel: boolean;
begin
  a_1_31 <= std_logic_vector_to_unsigned(a);
  b_1_34 <= std_logic_vector_to_unsigned(b);
  result_12_3_rel <= a_1_31 = b_1_34;
  op <= boolean_to_vector(result_12_3_rel);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity constant_a7e2bb9e12 is
  port (
    op : out std_logic_vector((2 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end constant_a7e2bb9e12;


architecture behavior of constant_a7e2bb9e12 is
begin
  op <= "01";
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity constant_e8ddc079e9 is
  port (
    op : out std_logic_vector((2 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end constant_e8ddc079e9;


architecture behavior of constant_e8ddc079e9 is
begin
  op <= "10";
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity constant_3a9a3daeb9 is
  port (
    op : out std_logic_vector((2 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end constant_3a9a3daeb9;


architecture behavior of constant_3a9a3daeb9 is
begin
  op <= "11";
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity mux_b4a3823c60 is
  port (
    sel : in std_logic_vector((1 - 1) downto 0);
    d0 : in std_logic_vector((32 - 1) downto 0);
    d1 : in std_logic_vector((80 - 1) downto 0);
    y : out std_logic_vector((32 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end mux_b4a3823c60;


architecture behavior of mux_b4a3823c60 is
  signal sel_1_20: std_logic;
  signal d0_1_24: std_logic_vector((32 - 1) downto 0);
  signal d1_1_27: std_logic_vector((80 - 1) downto 0);
  signal sel_internal_2_1_convert: std_logic_vector((1 - 1) downto 0);
  signal unregy_join_6_1: std_logic_vector((80 - 1) downto 0);
  signal cast_unregy_13_5_convert: std_logic_vector((32 - 1) downto 0);
begin
  sel_1_20 <= sel(0);
  d0_1_24 <= d0;
  d1_1_27 <= d1;
  sel_internal_2_1_convert <= cast(std_logic_to_vector(sel_1_20), 0, 1, 0, xlUnsigned);
  proc_switch_6_1: process (d0_1_24, d1_1_27, sel_internal_2_1_convert)
  is
  begin
    case sel_internal_2_1_convert is 
      when "0" =>
        unregy_join_6_1 <= cast(d0_1_24, 0, 80, 0, xlUnsigned);
      when others =>
        unregy_join_6_1 <= d1_1_27;
    end case;
  end process proc_switch_6_1;
  cast_unregy_13_5_convert <= cast(unregy_join_6_1, 0, 32, 0, xlUnsigned);
  y <= cast_unregy_13_5_convert;
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity counter_41314d726b is
  port (
    rst : in std_logic_vector((1 - 1) downto 0);
    en : in std_logic_vector((1 - 1) downto 0);
    op : out std_logic_vector((1 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end counter_41314d726b;


architecture behavior of counter_41314d726b is
  signal rst_1_40: boolean;
  signal en_1_45: boolean;
  signal count_reg_20_23: unsigned((1 - 1) downto 0) := "0";
  signal count_reg_20_23_rst: std_logic;
  signal count_reg_20_23_en: std_logic;
  signal bool_44_4: boolean;
  signal rst_limit_join_44_1: boolean;
  signal count_reg_join_44_1: unsigned((2 - 1) downto 0);
  signal count_reg_join_44_1_en: std_logic;
  signal count_reg_join_44_1_rst: std_logic;
begin
  rst_1_40 <= ((rst) = "1");
  en_1_45 <= ((en) = "1");
  proc_count_reg_20_23: process (clk)
  is
  begin
    if (clk'event and (clk = '1')) then
      if ((ce = '1') and (count_reg_20_23_rst = '1')) then
        count_reg_20_23 <= "0";
      elsif ((ce = '1') and (count_reg_20_23_en = '1')) then 
        count_reg_20_23 <= count_reg_20_23 + std_logic_vector_to_unsigned("1");
      end if;
    end if;
  end process proc_count_reg_20_23;
  bool_44_4 <= rst_1_40 or false;
  proc_if_44_1: process (bool_44_4, count_reg_20_23, en_1_45)
  is
  begin
    if bool_44_4 then
      count_reg_join_44_1_rst <= '1';
    elsif en_1_45 then
      count_reg_join_44_1_rst <= '0';
    else 
      count_reg_join_44_1_rst <= '0';
    end if;
    if en_1_45 then
      count_reg_join_44_1_en <= '1';
    else 
      count_reg_join_44_1_en <= '0';
    end if;
    if bool_44_4 then
      rst_limit_join_44_1 <= false;
    elsif en_1_45 then
      rst_limit_join_44_1 <= false;
    else 
      rst_limit_join_44_1 <= false;
    end if;
  end process proc_if_44_1;
  count_reg_20_23_rst <= count_reg_join_44_1_rst;
  count_reg_20_23_en <= count_reg_join_44_1_en;
  op <= unsigned_to_std_logic_vector(count_reg_20_23);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity constant_963ed6358a is
  port (
    op : out std_logic_vector((1 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end constant_963ed6358a;


architecture behavior of constant_963ed6358a is
begin
  op <= "0";
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity mux_286b77e019 is
  port (
    sel : in std_logic_vector((1 - 1) downto 0);
    d0 : in std_logic_vector((32 - 1) downto 0);
    d1 : in std_logic_vector((32 - 1) downto 0);
    y : out std_logic_vector((32 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end mux_286b77e019;


architecture behavior of mux_286b77e019 is
  signal sel_1_20: std_logic;
  signal d0_1_24: std_logic_vector((32 - 1) downto 0);
  signal d1_1_27: std_logic_vector((32 - 1) downto 0);
  signal sel_internal_2_1_convert: std_logic_vector((1 - 1) downto 0);
  signal unregy_join_6_1: std_logic_vector((32 - 1) downto 0);
begin
  sel_1_20 <= sel(0);
  d0_1_24 <= d0;
  d1_1_27 <= d1;
  sel_internal_2_1_convert <= cast(std_logic_to_vector(sel_1_20), 0, 1, 0, xlUnsigned);
  proc_switch_6_1: process (d0_1_24, d1_1_27, sel_internal_2_1_convert)
  is
  begin
    case sel_internal_2_1_convert is 
      when "0" =>
        unregy_join_6_1 <= d0_1_24;
      when others =>
        unregy_join_6_1 <= d1_1_27;
    end case;
  end process proc_switch_6_1;
  y <= unregy_join_6_1;
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity mux_d99e59b6d4 is
  port (
    sel : in std_logic_vector((1 - 1) downto 0);
    d0 : in std_logic_vector((1 - 1) downto 0);
    d1 : in std_logic_vector((1 - 1) downto 0);
    y : out std_logic_vector((1 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end mux_d99e59b6d4;


architecture behavior of mux_d99e59b6d4 is
  signal sel_1_20: std_logic;
  signal d0_1_24: std_logic;
  signal d1_1_27: std_logic;
  signal sel_internal_2_1_convert: std_logic_vector((1 - 1) downto 0);
  signal unregy_join_6_1: std_logic;
begin
  sel_1_20 <= sel(0);
  d0_1_24 <= d0(0);
  d1_1_27 <= d1(0);
  sel_internal_2_1_convert <= cast(std_logic_to_vector(sel_1_20), 0, 1, 0, xlUnsigned);
  proc_switch_6_1: process (d0_1_24, d1_1_27, sel_internal_2_1_convert)
  is
  begin
    case sel_internal_2_1_convert is 
      when "0" =>
        unregy_join_6_1 <= d0_1_24;
      when others =>
        unregy_join_6_1 <= d1_1_27;
    end case;
  end process proc_switch_6_1;
  y <= std_logic_to_vector(unregy_join_6_1);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity logical_dfe2dded7f is
  port (
    d0 : in std_logic_vector((1 - 1) downto 0);
    d1 : in std_logic_vector((1 - 1) downto 0);
    y : out std_logic_vector((1 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end logical_dfe2dded7f;


architecture behavior of logical_dfe2dded7f is
  signal d0_1_24: std_logic;
  signal d1_1_27: std_logic;
  signal bit_2_26: std_logic;
  signal fully_2_1_bitnot: std_logic;
begin
  d0_1_24 <= d0(0);
  d1_1_27 <= d1(0);
  bit_2_26 <= d0_1_24 or d1_1_27;
  fully_2_1_bitnot <= not bit_2_26;
  y <= std_logic_to_vector(fully_2_1_bitnot);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity constant_6293007044 is
  port (
    op : out std_logic_vector((1 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end constant_6293007044;


architecture behavior of constant_6293007044 is
begin
  op <= "1";
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity addsub_c13097e33e is
  port (
    a : in std_logic_vector((1 - 1) downto 0);
    b : in std_logic_vector((1 - 1) downto 0);
    s : out std_logic_vector((1 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end addsub_c13097e33e;


architecture behavior of addsub_c13097e33e is
  signal a_17_32: unsigned((1 - 1) downto 0);
  signal b_17_35: unsigned((1 - 1) downto 0);
  type array_type_op_mem_91_20 is array (0 to (1 - 1)) of unsigned((1 - 1) downto 0);
  signal op_mem_91_20: array_type_op_mem_91_20 := (
    0 => "0");
  signal op_mem_91_20_front_din: unsigned((1 - 1) downto 0);
  signal op_mem_91_20_back: unsigned((1 - 1) downto 0);
  signal op_mem_91_20_push_front_pop_back_en: std_logic;
  type array_type_cout_mem_92_22 is array (0 to (1 - 1)) of unsigned((1 - 1) downto 0);
  signal cout_mem_92_22: array_type_cout_mem_92_22 := (
    0 => "0");
  signal cout_mem_92_22_front_din: unsigned((1 - 1) downto 0);
  signal cout_mem_92_22_back: unsigned((1 - 1) downto 0);
  signal cout_mem_92_22_push_front_pop_back_en: std_logic;
  signal prev_mode_93_22_next: unsigned((3 - 1) downto 0);
  signal prev_mode_93_22: unsigned((3 - 1) downto 0);
  signal prev_mode_93_22_reg_i: std_logic_vector((3 - 1) downto 0);
  signal prev_mode_93_22_reg_o: std_logic_vector((3 - 1) downto 0);
  signal cast_71_18: signed((3 - 1) downto 0);
  signal cast_71_22: signed((3 - 1) downto 0);
  signal internal_s_71_5_addsub: signed((3 - 1) downto 0);
  signal cast_internal_s_83_3_convert: unsigned((1 - 1) downto 0);
begin
  a_17_32 <= std_logic_vector_to_unsigned(a);
  b_17_35 <= std_logic_vector_to_unsigned(b);
  op_mem_91_20_back <= op_mem_91_20(0);
  proc_op_mem_91_20: process (clk)
  is
    variable i: integer;
  begin
    if (clk'event and (clk = '1')) then
      if ((ce = '1') and (op_mem_91_20_push_front_pop_back_en = '1')) then
        op_mem_91_20(0) <= op_mem_91_20_front_din;
      end if;
    end if;
  end process proc_op_mem_91_20;
  cout_mem_92_22_back <= cout_mem_92_22(0);
  proc_cout_mem_92_22: process (clk)
  is
    variable i_x_000000: integer;
  begin
    if (clk'event and (clk = '1')) then
      if ((ce = '1') and (cout_mem_92_22_push_front_pop_back_en = '1')) then
        cout_mem_92_22(0) <= cout_mem_92_22_front_din;
      end if;
    end if;
  end process proc_cout_mem_92_22;
  prev_mode_93_22_reg_i <= unsigned_to_std_logic_vector(prev_mode_93_22_next);
  prev_mode_93_22 <= std_logic_vector_to_unsigned(prev_mode_93_22_reg_o);
  prev_mode_93_22_reg_inst: entity work.synth_reg_w_init
    generic map (
      init_index => 2, 
      init_value => b"010", 
      latency => 1, 
      width => 3)
    port map (
      ce => ce, 
      clk => clk, 
      clr => clr, 
      i => prev_mode_93_22_reg_i, 
      o => prev_mode_93_22_reg_o);
  cast_71_18 <= u2s_cast(a_17_32, 0, 3, 0);
  cast_71_22 <= u2s_cast(b_17_35, 0, 3, 0);
  internal_s_71_5_addsub <= cast_71_18 - cast_71_22;
  cast_internal_s_83_3_convert <= s2u_cast(internal_s_71_5_addsub, 0, 1, 0);
  op_mem_91_20_push_front_pop_back_en <= '0';
  cout_mem_92_22_push_front_pop_back_en <= '0';
  prev_mode_93_22_next <= std_logic_vector_to_unsigned("000");
  s <= unsigned_to_std_logic_vector(cast_internal_s_83_3_convert);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity concat_1d98d96b58 is
  port (
    in0 : in std_logic_vector((9 - 1) downto 0);
    in1 : in std_logic_vector((1 - 1) downto 0);
    y : out std_logic_vector((10 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end concat_1d98d96b58;


architecture behavior of concat_1d98d96b58 is
  signal in0_1_23: unsigned((9 - 1) downto 0);
  signal in1_1_27: unsigned((1 - 1) downto 0);
  signal y_2_1_concat: unsigned((10 - 1) downto 0);
begin
  in0_1_23 <= std_logic_vector_to_unsigned(in0);
  in1_1_27 <= std_logic_vector_to_unsigned(in1);
  y_2_1_concat <= std_logic_vector_to_unsigned(unsigned_to_std_logic_vector(in0_1_23) & unsigned_to_std_logic_vector(in1_1_27));
  y <= unsigned_to_std_logic_vector(y_2_1_concat);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity mux_4fe5face7f is
  port (
    sel : in std_logic_vector((1 - 1) downto 0);
    d0 : in std_logic_vector((10 - 1) downto 0);
    d1 : in std_logic_vector((10 - 1) downto 0);
    y : out std_logic_vector((10 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end mux_4fe5face7f;


architecture behavior of mux_4fe5face7f is
  signal sel_1_20: std_logic_vector((1 - 1) downto 0);
  signal d0_1_24: std_logic_vector((10 - 1) downto 0);
  signal d1_1_27: std_logic_vector((10 - 1) downto 0);
  signal unregy_join_6_1: std_logic_vector((10 - 1) downto 0);
begin
  sel_1_20 <= sel;
  d0_1_24 <= d0;
  d1_1_27 <= d1;
  proc_switch_6_1: process (d0_1_24, d1_1_27, sel_1_20)
  is
  begin
    case sel_1_20 is 
      when "0" =>
        unregy_join_6_1 <= d0_1_24;
      when others =>
        unregy_join_6_1 <= d1_1_27;
    end case;
  end process proc_switch_6_1;
  y <= unregy_join_6_1;
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity delay_920dce5cac is
  port (
    d : in std_logic_vector((32 - 1) downto 0);
    q : out std_logic_vector((32 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end delay_920dce5cac;


architecture behavior of delay_920dce5cac is
  signal d_1_22: std_logic_vector((32 - 1) downto 0);
  type array_type_op_mem_20_24 is array (0 to (3 - 1)) of std_logic_vector((32 - 1) downto 0);
  signal op_mem_20_24: array_type_op_mem_20_24 := (
    "00000000000000000000000000000000",
    "00000000000000000000000000000000",
    "00000000000000000000000000000000");
  signal op_mem_20_24_front_din: std_logic_vector((32 - 1) downto 0);
  signal op_mem_20_24_back: std_logic_vector((32 - 1) downto 0);
  signal op_mem_20_24_push_front_pop_back_en: std_logic;
begin
  d_1_22 <= d;
  op_mem_20_24_back <= op_mem_20_24(2);
  proc_op_mem_20_24: process (clk)
  is
    variable i: integer;
  begin
    if (clk'event and (clk = '1')) then
      if ((ce = '1') and (op_mem_20_24_push_front_pop_back_en = '1')) then
        for i in 2 downto 1 loop 
          op_mem_20_24(i) <= op_mem_20_24(i-1);
        end loop;
        op_mem_20_24(0) <= op_mem_20_24_front_din;
      end if;
    end if;
  end process proc_op_mem_20_24;
  op_mem_20_24_front_din <= d_1_22;
  op_mem_20_24_push_front_pop_back_en <= '1';
  q <= op_mem_20_24_back;
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity delay_23d71a76f2 is
  port (
    d : in std_logic_vector((1 - 1) downto 0);
    q : out std_logic_vector((1 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end delay_23d71a76f2;


architecture behavior of delay_23d71a76f2 is
  signal d_1_22: std_logic;
  type array_type_op_mem_20_24 is array (0 to (3 - 1)) of std_logic;
  signal op_mem_20_24: array_type_op_mem_20_24 := (
    '0',
    '0',
    '0');
  signal op_mem_20_24_front_din: std_logic;
  signal op_mem_20_24_back: std_logic;
  signal op_mem_20_24_push_front_pop_back_en: std_logic;
begin
  d_1_22 <= d(0);
  op_mem_20_24_back <= op_mem_20_24(2);
  proc_op_mem_20_24: process (clk)
  is
    variable i: integer;
  begin
    if (clk'event and (clk = '1')) then
      if ((ce = '1') and (op_mem_20_24_push_front_pop_back_en = '1')) then
        for i in 2 downto 1 loop 
          op_mem_20_24(i) <= op_mem_20_24(i-1);
        end loop;
        op_mem_20_24(0) <= op_mem_20_24_front_din;
      end if;
    end if;
  end process proc_op_mem_20_24;
  op_mem_20_24_front_din <= d_1_22;
  op_mem_20_24_push_front_pop_back_en <= '1';
  q <= std_logic_to_vector(op_mem_20_24_back);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity delay_e18fb31a3d is
  port (
    d : in std_logic_vector((1 - 1) downto 0);
    q : out std_logic_vector((1 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end delay_e18fb31a3d;


architecture behavior of delay_e18fb31a3d is
  signal d_1_22: std_logic;
  type array_type_op_mem_20_24 is array (0 to (2 - 1)) of std_logic;
  signal op_mem_20_24: array_type_op_mem_20_24 := (
    '0',
    '0');
  signal op_mem_20_24_front_din: std_logic;
  signal op_mem_20_24_back: std_logic;
  signal op_mem_20_24_push_front_pop_back_en: std_logic;
begin
  d_1_22 <= d(0);
  op_mem_20_24_back <= op_mem_20_24(1);
  proc_op_mem_20_24: process (clk)
  is
    variable i: integer;
  begin
    if (clk'event and (clk = '1')) then
      if ((ce = '1') and (op_mem_20_24_push_front_pop_back_en = '1')) then
        for i in 1 downto 1 loop 
          op_mem_20_24(i) <= op_mem_20_24(i-1);
        end loop;
        op_mem_20_24(0) <= op_mem_20_24_front_din;
      end if;
    end if;
  end process proc_op_mem_20_24;
  op_mem_20_24_front_din <= d_1_22;
  op_mem_20_24_push_front_pop_back_en <= '1';
  q <= std_logic_to_vector(op_mem_20_24_back);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity delay_9f02caa990 is
  port (
    d : in std_logic_vector((1 - 1) downto 0);
    q : out std_logic_vector((1 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end delay_9f02caa990;


architecture behavior of delay_9f02caa990 is
  signal d_1_22: std_logic;
  type array_type_op_mem_20_24 is array (0 to (1 - 1)) of std_logic;
  signal op_mem_20_24: array_type_op_mem_20_24 := (
    0 => '0');
  signal op_mem_20_24_front_din: std_logic;
  signal op_mem_20_24_back: std_logic;
  signal op_mem_20_24_push_front_pop_back_en: std_logic;
begin
  d_1_22 <= d(0);
  op_mem_20_24_back <= op_mem_20_24(0);
  proc_op_mem_20_24: process (clk)
  is
    variable i: integer;
  begin
    if (clk'event and (clk = '1')) then
      if ((ce = '1') and (op_mem_20_24_push_front_pop_back_en = '1')) then
        op_mem_20_24(0) <= op_mem_20_24_front_din;
      end if;
    end if;
  end process proc_op_mem_20_24;
  op_mem_20_24_front_din <= d_1_22;
  op_mem_20_24_push_front_pop_back_en <= '1';
  q <= std_logic_to_vector(op_mem_20_24_back);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity relational_34fc311f5b is
  port (
    a : in std_logic_vector((32 - 1) downto 0);
    b : in std_logic_vector((32 - 1) downto 0);
    op : out std_logic_vector((1 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end relational_34fc311f5b;


architecture behavior of relational_34fc311f5b is
  signal a_1_31: unsigned((32 - 1) downto 0);
  signal b_1_34: unsigned((32 - 1) downto 0);
  type array_type_op_mem_32_22 is array (0 to (1 - 1)) of boolean;
  signal op_mem_32_22: array_type_op_mem_32_22 := (
    0 => false);
  signal op_mem_32_22_front_din: boolean;
  signal op_mem_32_22_back: boolean;
  signal op_mem_32_22_push_front_pop_back_en: std_logic;
  signal result_18_3_rel: boolean;
begin
  a_1_31 <= std_logic_vector_to_unsigned(a);
  b_1_34 <= std_logic_vector_to_unsigned(b);
  op_mem_32_22_back <= op_mem_32_22(0);
  proc_op_mem_32_22: process (clk)
  is
    variable i: integer;
  begin
    if (clk'event and (clk = '1')) then
      if ((ce = '1') and (op_mem_32_22_push_front_pop_back_en = '1')) then
        op_mem_32_22(0) <= op_mem_32_22_front_din;
      end if;
    end if;
  end process proc_op_mem_32_22;
  result_18_3_rel <= a_1_31 > b_1_34;
  op_mem_32_22_front_din <= result_18_3_rel;
  op_mem_32_22_push_front_pop_back_en <= '1';
  op <= boolean_to_vector(op_mem_32_22_back);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity reinterpret_c5d4d59b73 is
  port (
    input_port : in std_logic_vector((32 - 1) downto 0);
    output_port : out std_logic_vector((32 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end reinterpret_c5d4d59b73;


architecture behavior of reinterpret_c5d4d59b73 is
  signal input_port_1_40: unsigned((32 - 1) downto 0);
begin
  input_port_1_40 <= std_logic_vector_to_unsigned(input_port);
  output_port <= unsigned_to_std_logic_vector(input_port_1_40);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity concat_62c4475a80 is
  port (
    in0 : in std_logic_vector((32 - 1) downto 0);
    in1 : in std_logic_vector((32 - 1) downto 0);
    y : out std_logic_vector((64 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end concat_62c4475a80;


architecture behavior of concat_62c4475a80 is
  signal in0_1_23: unsigned((32 - 1) downto 0);
  signal in1_1_27: unsigned((32 - 1) downto 0);
  signal y_2_1_concat: unsigned((64 - 1) downto 0);
begin
  in0_1_23 <= std_logic_vector_to_unsigned(in0);
  in1_1_27 <= std_logic_vector_to_unsigned(in1);
  y_2_1_concat <= std_logic_vector_to_unsigned(unsigned_to_std_logic_vector(in0_1_23) & unsigned_to_std_logic_vector(in1_1_27));
  y <= unsigned_to_std_logic_vector(y_2_1_concat);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity concat_a1e126f11c is
  port (
    in0 : in std_logic_vector((8 - 1) downto 0);
    in1 : in std_logic_vector((8 - 1) downto 0);
    in2 : in std_logic_vector((8 - 1) downto 0);
    in3 : in std_logic_vector((8 - 1) downto 0);
    y : out std_logic_vector((32 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end concat_a1e126f11c;


architecture behavior of concat_a1e126f11c is
  signal in0_1_23: unsigned((8 - 1) downto 0);
  signal in1_1_27: unsigned((8 - 1) downto 0);
  signal in2_1_31: unsigned((8 - 1) downto 0);
  signal in3_1_35: unsigned((8 - 1) downto 0);
  signal y_2_1_concat: unsigned((32 - 1) downto 0);
begin
  in0_1_23 <= std_logic_vector_to_unsigned(in0);
  in1_1_27 <= std_logic_vector_to_unsigned(in1);
  in2_1_31 <= std_logic_vector_to_unsigned(in2);
  in3_1_35 <= std_logic_vector_to_unsigned(in3);
  y_2_1_concat <= std_logic_vector_to_unsigned(unsigned_to_std_logic_vector(in0_1_23) & unsigned_to_std_logic_vector(in1_1_27) & unsigned_to_std_logic_vector(in2_1_31) & unsigned_to_std_logic_vector(in3_1_35));
  y <= unsigned_to_std_logic_vector(y_2_1_concat);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity reinterpret_d51df7ac30 is
  port (
    input_port : in std_logic_vector((8 - 1) downto 0);
    output_port : out std_logic_vector((8 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end reinterpret_d51df7ac30;


architecture behavior of reinterpret_d51df7ac30 is
  signal input_port_1_40: signed((8 - 1) downto 0);
  signal output_port_5_5_force: unsigned((8 - 1) downto 0);
begin
  input_port_1_40 <= std_logic_vector_to_signed(input_port);
  output_port_5_5_force <= signed_to_unsigned(input_port_1_40);
  output_port <= unsigned_to_std_logic_vector(output_port_5_5_force);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity concat_a0c7cd7a34 is
  port (
    in0 : in std_logic_vector((1 - 1) downto 0);
    in1 : in std_logic_vector((1 - 1) downto 0);
    in2 : in std_logic_vector((1 - 1) downto 0);
    in3 : in std_logic_vector((1 - 1) downto 0);
    y : out std_logic_vector((4 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end concat_a0c7cd7a34;


architecture behavior of concat_a0c7cd7a34 is
  signal in0_1_23: unsigned((1 - 1) downto 0);
  signal in1_1_27: unsigned((1 - 1) downto 0);
  signal in2_1_31: unsigned((1 - 1) downto 0);
  signal in3_1_35: unsigned((1 - 1) downto 0);
  signal y_2_1_concat: unsigned((4 - 1) downto 0);
begin
  in0_1_23 <= std_logic_vector_to_unsigned(in0);
  in1_1_27 <= std_logic_vector_to_unsigned(in1);
  in2_1_31 <= std_logic_vector_to_unsigned(in2);
  in3_1_35 <= std_logic_vector_to_unsigned(in3);
  y_2_1_concat <= std_logic_vector_to_unsigned(unsigned_to_std_logic_vector(in0_1_23) & unsigned_to_std_logic_vector(in1_1_27) & unsigned_to_std_logic_vector(in2_1_31) & unsigned_to_std_logic_vector(in3_1_35));
  y <= unsigned_to_std_logic_vector(y_2_1_concat);
end behavior;


-------------------------------------------------------------------
-- System Generator version 14.6 VHDL source file.
--
-- Copyright(C) 2013 by Xilinx, Inc.  All rights reserved.  This
-- text/file contains proprietary, confidential information of Xilinx,
-- Inc., is distributed under license from Xilinx, Inc., and may be used,
-- copied and/or disclosed only pursuant to the terms of a valid license
-- agreement with Xilinx, Inc.  Xilinx hereby grants you a license to use
-- this text/file solely for design, simulation, implementation and
-- creation of design files limited to Xilinx devices or technologies.
-- Use with non-Xilinx devices or technologies is expressly prohibited
-- and immediately terminates your license unless covered by a separate
-- agreement.
--
-- Xilinx is providing this design, code, or information "as is" solely
-- for use in developing programs and solutions for Xilinx devices.  By
-- providing this design, code, or information as one possible
-- implementation of this feature, application or standard, Xilinx is
-- making no representation that this implementation is free from any
-- claims of infringement.  You are responsible for obtaining any rights
-- you may require for your implementation.  Xilinx expressly disclaims
-- any warranty whatsoever with respect to the adequacy of the
-- implementation, including but not limited to warranties of
-- merchantability or fitness for a particular purpose.
--
-- Xilinx products are not intended for use in life support appliances,
-- devices, or systems.  Use in such applications is expressly prohibited.
--
-- Any modifications that are made to the source code are done at the user's
-- sole risk and will be unsupported.
--
-- This copyright and support notice must be retained as part of this
-- text at all times.  (c) Copyright 1995-2013 Xilinx, Inc.  All rights
-- reserved.
-------------------------------------------------------------------
-- synopsys translate_off
library XilinxCoreLib;
-- synopsys translate_on
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;
entity xlaccum_c09f12_01 is
  generic (
    core_name0: string := "";
    b_width: integer := 8;
    b_bin_pt: integer := 2;
    b_arith: integer := xlUnsigned;
    q_width: integer := 18;
    q_bin_pt: integer := 4;
    q_arith: integer := xlSigned
  );
  port (
    b: in std_logic_vector(b_width - 1 downto 0);
    ce: in std_logic;
    clr: in std_logic;
    clk: in std_logic;
    en: in std_logic_vector(0 downto 0);
    rst: in std_logic_vector(0 downto 0);
    q: out std_logic_vector(q_width - 1 downto 0)
  );
end xlaccum_c09f12_01 ;
architecture behavior of xlaccum_c09f12_01 is
  -- synopsys translate_off
  signal real_b, real_q : real;
   -- synopsys translate_on
  signal internal_ce : std_logic;
  signal sclr : std_logic;
  component accm_11_0_8f8edad76401ddd0
    port (
      b: in std_logic_vector(b_width - 1 downto 0);
      q: out std_logic_vector(q_width - 1 downto 0);
      sclr: in std_logic;
      clk: in std_logic;
      ce: in std_logic

    );
  end component;

  attribute syn_black_box of accm_11_0_8f8edad76401ddd0:
    component is true;
  attribute fpga_dont_touch of accm_11_0_8f8edad76401ddd0:
    component is "true";
  attribute box_type of accm_11_0_8f8edad76401ddd0:
    component  is "black_box";
-- synopsys translate_off
  constant zeroVec: std_logic_vector(q_width - 1 downto 0) :=
    (others => '0');
  constant zeroStr : string(1 to q_width) :=
    std_logic_vector_to_bin_string(zeroVec);
-- synopsys translate_on
begin
  internal_ce <= ce and en(0);
  sclr <= (clr or rst(0)) and ce;
  comp0: if ((core_name0 = "accm_11_0_8f8edad76401ddd0")) generate
    core_instance0: accm_11_0_8f8edad76401ddd0
      port map (
        b => b,
        clk => clk,
        ce => internal_ce,
        sclr => sclr,
        q => q

      );
  end generate;
end  behavior;
library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity delay_4246ea65a9 is
  port (
    d : in std_logic_vector((16 - 1) downto 0);
    q : out std_logic_vector((16 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end delay_4246ea65a9;


architecture behavior of delay_4246ea65a9 is
  signal d_1_22: std_logic_vector((16 - 1) downto 0);
  type array_type_op_mem_20_24 is array (0 to (1 - 1)) of std_logic_vector((16 - 1) downto 0);
  signal op_mem_20_24: array_type_op_mem_20_24 := (
    0 => "0000000000000000");
  signal op_mem_20_24_front_din: std_logic_vector((16 - 1) downto 0);
  signal op_mem_20_24_back: std_logic_vector((16 - 1) downto 0);
  signal op_mem_20_24_push_front_pop_back_en: std_logic;
begin
  d_1_22 <= d;
  op_mem_20_24_back <= op_mem_20_24(0);
  proc_op_mem_20_24: process (clk)
  is
    variable i: integer;
  begin
    if (clk'event and (clk = '1')) then
      if ((ce = '1') and (op_mem_20_24_push_front_pop_back_en = '1')) then
        op_mem_20_24(0) <= op_mem_20_24_front_din;
      end if;
    end if;
  end process proc_op_mem_20_24;
  op_mem_20_24_front_din <= d_1_22;
  op_mem_20_24_push_front_pop_back_en <= '1';
  q <= op_mem_20_24_back;
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity mult_98e3c7048f is
  port (
    a : in std_logic_vector((8 - 1) downto 0);
    b : in std_logic_vector((8 - 1) downto 0);
    p : out std_logic_vector((16 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end mult_98e3c7048f;


architecture behavior of mult_98e3c7048f is
  signal a_1_22: signed((8 - 1) downto 0);
  signal b_1_25: signed((8 - 1) downto 0);
  type array_type_op_mem_65_20 is array (0 to (2 - 1)) of signed((16 - 1) downto 0);
  signal op_mem_65_20: array_type_op_mem_65_20 := (
    "0000000000000000",
    "0000000000000000");
  signal op_mem_65_20_front_din: signed((16 - 1) downto 0);
  signal op_mem_65_20_back: signed((16 - 1) downto 0);
  signal op_mem_65_20_push_front_pop_back_en: std_logic;
  signal mult_46_56: signed((16 - 1) downto 0);
begin
  a_1_22 <= std_logic_vector_to_signed(a);
  b_1_25 <= std_logic_vector_to_signed(b);
  op_mem_65_20_back <= op_mem_65_20(1);
  proc_op_mem_65_20: process (clk)
  is
    variable i: integer;
  begin
    if (clk'event and (clk = '1')) then
      if ((ce = '1') and (op_mem_65_20_push_front_pop_back_en = '1')) then
        for i in 1 downto 1 loop 
          op_mem_65_20(i) <= op_mem_65_20(i-1);
        end loop;
        op_mem_65_20(0) <= op_mem_65_20_front_din;
      end if;
    end if;
  end process proc_op_mem_65_20;
  mult_46_56 <= (a_1_22 * b_1_25);
  op_mem_65_20_front_din <= mult_46_56;
  op_mem_65_20_push_front_pop_back_en <= '1';
  p <= signed_to_std_logic_vector(op_mem_65_20_back);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity mux_81f00cece7 is
  port (
    sel : in std_logic_vector((2 - 1) downto 0);
    d0 : in std_logic_vector((8 - 1) downto 0);
    d1 : in std_logic_vector((8 - 1) downto 0);
    d2 : in std_logic_vector((8 - 1) downto 0);
    d3 : in std_logic_vector((8 - 1) downto 0);
    y : out std_logic_vector((8 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end mux_81f00cece7;


architecture behavior of mux_81f00cece7 is
  signal sel_1_20: std_logic_vector((2 - 1) downto 0);
  signal d0_1_24: std_logic_vector((8 - 1) downto 0);
  signal d1_1_27: std_logic_vector((8 - 1) downto 0);
  signal d2_1_30: std_logic_vector((8 - 1) downto 0);
  signal d3_1_33: std_logic_vector((8 - 1) downto 0);
  type array_type_pipe_20_22 is array (0 to (1 - 1)) of std_logic_vector((8 - 1) downto 0);
  signal pipe_20_22: array_type_pipe_20_22 := (
    0 => "00000000");
  signal pipe_20_22_front_din: std_logic_vector((8 - 1) downto 0);
  signal pipe_20_22_back: std_logic_vector((8 - 1) downto 0);
  signal pipe_20_22_push_front_pop_back_en: std_logic;
  signal unregy_join_6_1: std_logic_vector((8 - 1) downto 0);
begin
  sel_1_20 <= sel;
  d0_1_24 <= d0;
  d1_1_27 <= d1;
  d2_1_30 <= d2;
  d3_1_33 <= d3;
  pipe_20_22_back <= pipe_20_22(0);
  proc_pipe_20_22: process (clk)
  is
    variable i: integer;
  begin
    if (clk'event and (clk = '1')) then
      if ((ce = '1') and (pipe_20_22_push_front_pop_back_en = '1')) then
        pipe_20_22(0) <= pipe_20_22_front_din;
      end if;
    end if;
  end process proc_pipe_20_22;
  proc_switch_6_1: process (d0_1_24, d1_1_27, d2_1_30, d3_1_33, sel_1_20)
  is
  begin
    case sel_1_20 is 
      when "00" =>
        unregy_join_6_1 <= d0_1_24;
      when "01" =>
        unregy_join_6_1 <= d1_1_27;
      when "10" =>
        unregy_join_6_1 <= d2_1_30;
      when others =>
        unregy_join_6_1 <= d3_1_33;
    end case;
  end process proc_switch_6_1;
  pipe_20_22_front_din <= unregy_join_6_1;
  pipe_20_22_push_front_pop_back_en <= '1';
  y <= pipe_20_22_back;
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity delay_0341f7be44 is
  port (
    d : in std_logic_vector((1 - 1) downto 0);
    q : out std_logic_vector((1 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end delay_0341f7be44;


architecture behavior of delay_0341f7be44 is
  signal d_1_22: std_logic;
begin
  d_1_22 <= d(0);
  q <= std_logic_to_vector(d_1_22);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity shift_01a2ba5449 is
  port (
    ip : in std_logic_vector((18 - 1) downto 0);
    op : out std_logic_vector((18 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end shift_01a2ba5449;


architecture behavior of shift_01a2ba5449 is
  signal ip_1_23: signed((18 - 1) downto 0);
  type array_type_op_mem_46_20 is array (0 to (1 - 1)) of signed((18 - 1) downto 0);
  signal op_mem_46_20: array_type_op_mem_46_20 := (
    0 => "000000000000000000");
  signal op_mem_46_20_front_din: signed((18 - 1) downto 0);
  signal op_mem_46_20_back: signed((18 - 1) downto 0);
  signal op_mem_46_20_push_front_pop_back_en: std_logic;
  signal cast_internal_ip_36_3_convert: signed((18 - 1) downto 0);
begin
  ip_1_23 <= std_logic_vector_to_signed(ip);
  op_mem_46_20_back <= op_mem_46_20(0);
  proc_op_mem_46_20: process (clk)
  is
    variable i: integer;
  begin
    if (clk'event and (clk = '1')) then
      if ((ce = '1') and (op_mem_46_20_push_front_pop_back_en = '1')) then
        op_mem_46_20(0) <= op_mem_46_20_front_din;
      end if;
    end if;
  end process proc_op_mem_46_20;
  cast_internal_ip_36_3_convert <= s2s_cast(ip_1_23, 18, 18, 17);
  op_mem_46_20_push_front_pop_back_en <= '0';
  op <= signed_to_std_logic_vector(cast_internal_ip_36_3_convert);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity concat_c3ccc04d1a is
  port (
    in0 : in std_logic_vector((36 - 1) downto 0);
    in1 : in std_logic_vector((36 - 1) downto 0);
    y : out std_logic_vector((72 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end concat_c3ccc04d1a;


architecture behavior of concat_c3ccc04d1a is
  signal in0_1_23: unsigned((36 - 1) downto 0);
  signal in1_1_27: unsigned((36 - 1) downto 0);
  signal y_2_1_concat: unsigned((72 - 1) downto 0);
begin
  in0_1_23 <= std_logic_vector_to_unsigned(in0);
  in1_1_27 <= std_logic_vector_to_unsigned(in1);
  y_2_1_concat <= std_logic_vector_to_unsigned(unsigned_to_std_logic_vector(in0_1_23) & unsigned_to_std_logic_vector(in1_1_27));
  y <= unsigned_to_std_logic_vector(y_2_1_concat);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity reinterpret_86b044698f is
  port (
    input_port : in std_logic_vector((36 - 1) downto 0);
    output_port : out std_logic_vector((36 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end reinterpret_86b044698f;


architecture behavior of reinterpret_86b044698f is
  signal input_port_1_40: unsigned((36 - 1) downto 0);
begin
  input_port_1_40 <= std_logic_vector_to_unsigned(input_port);
  output_port <= unsigned_to_std_logic_vector(input_port_1_40);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity reinterpret_f21e7f2ddf is
  port (
    input_port : in std_logic_vector((8 - 1) downto 0);
    output_port : out std_logic_vector((8 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end reinterpret_f21e7f2ddf;


architecture behavior of reinterpret_f21e7f2ddf is
  signal input_port_1_40: unsigned((8 - 1) downto 0);
begin
  input_port_1_40 <= std_logic_vector_to_unsigned(input_port);
  output_port <= unsigned_to_std_logic_vector(input_port_1_40);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity concat_7995541f2a is
  port (
    in0 : in std_logic_vector((1 - 1) downto 0);
    in1 : in std_logic_vector((72 - 1) downto 0);
    in2 : in std_logic_vector((1 - 1) downto 0);
    y : out std_logic_vector((74 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end concat_7995541f2a;


architecture behavior of concat_7995541f2a is
  signal in0_1_23: unsigned((1 - 1) downto 0);
  signal in1_1_27: unsigned((72 - 1) downto 0);
  signal in2_1_31: unsigned((1 - 1) downto 0);
  signal y_2_1_concat: unsigned((74 - 1) downto 0);
begin
  in0_1_23 <= std_logic_vector_to_unsigned(in0);
  in1_1_27 <= std_logic_vector_to_unsigned(in1);
  in2_1_31 <= std_logic_vector_to_unsigned(in2);
  y_2_1_concat <= std_logic_vector_to_unsigned(unsigned_to_std_logic_vector(in0_1_23) & unsigned_to_std_logic_vector(in1_1_27) & unsigned_to_std_logic_vector(in2_1_31));
  y <= unsigned_to_std_logic_vector(y_2_1_concat);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity delay_a8953e790b is
  port (
    d : in std_logic_vector((72 - 1) downto 0);
    q : out std_logic_vector((72 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end delay_a8953e790b;


architecture behavior of delay_a8953e790b is
  signal d_1_22: std_logic_vector((72 - 1) downto 0);
  type array_type_op_mem_20_24 is array (0 to (1 - 1)) of std_logic_vector((72 - 1) downto 0);
  signal op_mem_20_24: array_type_op_mem_20_24 := (
    0 => "000000000000000000000000000000000000000000000000000000000000000000000000");
  signal op_mem_20_24_front_din: std_logic_vector((72 - 1) downto 0);
  signal op_mem_20_24_back: std_logic_vector((72 - 1) downto 0);
  signal op_mem_20_24_push_front_pop_back_en: std_logic;
begin
  d_1_22 <= d;
  op_mem_20_24_back <= op_mem_20_24(0);
  proc_op_mem_20_24: process (clk)
  is
    variable i: integer;
  begin
    if (clk'event and (clk = '1')) then
      if ((ce = '1') and (op_mem_20_24_push_front_pop_back_en = '1')) then
        op_mem_20_24(0) <= op_mem_20_24_front_din;
      end if;
    end if;
  end process proc_op_mem_20_24;
  op_mem_20_24_front_din <= d_1_22;
  op_mem_20_24_push_front_pop_back_en <= '1';
  q <= op_mem_20_24_back;
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity mux_c9cee7d6bf is
  port (
    sel : in std_logic_vector((1 - 1) downto 0);
    d0 : in std_logic_vector((72 - 1) downto 0);
    d1 : in std_logic_vector((72 - 1) downto 0);
    y : out std_logic_vector((72 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end mux_c9cee7d6bf;


architecture behavior of mux_c9cee7d6bf is
  signal sel_1_20: std_logic;
  signal d0_1_24: std_logic_vector((72 - 1) downto 0);
  signal d1_1_27: std_logic_vector((72 - 1) downto 0);
  type array_type_pipe_16_22 is array (0 to (2 - 1)) of std_logic_vector((72 - 1) downto 0);
  signal pipe_16_22: array_type_pipe_16_22 := (
    "000000000000000000000000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000000000000000000000000");
  signal pipe_16_22_front_din: std_logic_vector((72 - 1) downto 0);
  signal pipe_16_22_back: std_logic_vector((72 - 1) downto 0);
  signal pipe_16_22_push_front_pop_back_en: std_logic;
  signal sel_internal_2_1_convert: std_logic_vector((1 - 1) downto 0);
  signal unregy_join_6_1: std_logic_vector((72 - 1) downto 0);
begin
  sel_1_20 <= sel(0);
  d0_1_24 <= d0;
  d1_1_27 <= d1;
  pipe_16_22_back <= pipe_16_22(1);
  proc_pipe_16_22: process (clk)
  is
    variable i: integer;
  begin
    if (clk'event and (clk = '1')) then
      if ((ce = '1') and (pipe_16_22_push_front_pop_back_en = '1')) then
        for i in 1 downto 1 loop 
          pipe_16_22(i) <= pipe_16_22(i-1);
        end loop;
        pipe_16_22(0) <= pipe_16_22_front_din;
      end if;
    end if;
  end process proc_pipe_16_22;
  sel_internal_2_1_convert <= cast(std_logic_to_vector(sel_1_20), 0, 1, 0, xlUnsigned);
  proc_switch_6_1: process (d0_1_24, d1_1_27, sel_internal_2_1_convert)
  is
  begin
    case sel_internal_2_1_convert is 
      when "0" =>
        unregy_join_6_1 <= d0_1_24;
      when others =>
        unregy_join_6_1 <= d1_1_27;
    end case;
  end process proc_switch_6_1;
  pipe_16_22_front_din <= unregy_join_6_1;
  pipe_16_22_push_front_pop_back_en <= '1';
  y <= pipe_16_22_back;
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity relational_db6796afe7 is
  port (
    a : in std_logic_vector((6 - 1) downto 0);
    b : in std_logic_vector((6 - 1) downto 0);
    op : out std_logic_vector((1 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end relational_db6796afe7;


architecture behavior of relational_db6796afe7 is
  signal a_1_31: unsigned((6 - 1) downto 0);
  signal b_1_34: unsigned((6 - 1) downto 0);
  type array_type_op_mem_32_22 is array (0 to (1 - 1)) of boolean;
  signal op_mem_32_22: array_type_op_mem_32_22 := (
    0 => false);
  signal op_mem_32_22_front_din: boolean;
  signal op_mem_32_22_back: boolean;
  signal op_mem_32_22_push_front_pop_back_en: std_logic;
  signal result_12_3_rel: boolean;
begin
  a_1_31 <= std_logic_vector_to_unsigned(a);
  b_1_34 <= std_logic_vector_to_unsigned(b);
  op_mem_32_22_back <= op_mem_32_22(0);
  proc_op_mem_32_22: process (clk)
  is
    variable i: integer;
  begin
    if (clk'event and (clk = '1')) then
      if ((ce = '1') and (op_mem_32_22_push_front_pop_back_en = '1')) then
        op_mem_32_22(0) <= op_mem_32_22_front_din;
      end if;
    end if;
  end process proc_op_mem_32_22;
  result_12_3_rel <= a_1_31 = b_1_34;
  op_mem_32_22_front_din <= result_12_3_rel;
  op_mem_32_22_push_front_pop_back_en <= '1';
  op <= boolean_to_vector(op_mem_32_22_back);
end behavior;


-------------------------------------------------------------------
-- System Generator version 14.6 VHDL source file.
--
-- Copyright(C) 2013 by Xilinx, Inc.  All rights reserved.  This
-- text/file contains proprietary, confidential information of Xilinx,
-- Inc., is distributed under license from Xilinx, Inc., and may be used,
-- copied and/or disclosed only pursuant to the terms of a valid license
-- agreement with Xilinx, Inc.  Xilinx hereby grants you a license to use
-- this text/file solely for design, simulation, implementation and
-- creation of design files limited to Xilinx devices or technologies.
-- Use with non-Xilinx devices or technologies is expressly prohibited
-- and immediately terminates your license unless covered by a separate
-- agreement.
--
-- Xilinx is providing this design, code, or information "as is" solely
-- for use in developing programs and solutions for Xilinx devices.  By
-- providing this design, code, or information as one possible
-- implementation of this feature, application or standard, Xilinx is
-- making no representation that this implementation is free from any
-- claims of infringement.  You are responsible for obtaining any rights
-- you may require for your implementation.  Xilinx expressly disclaims
-- any warranty whatsoever with respect to the adequacy of the
-- implementation, including but not limited to warranties of
-- merchantability or fitness for a particular purpose.
--
-- Xilinx products are not intended for use in life support appliances,
-- devices, or systems.  Use in such applications is expressly prohibited.
--
-- Any modifications that are made to the source code are done at the user's
-- sole risk and will be unsupported.
--
-- This copyright and support notice must be retained as part of this
-- text at all times.  (c) Copyright 1995-2013 Xilinx, Inc.  All rights
-- reserved.
-------------------------------------------------------------------
-- synopsys translate_off
library XilinxCoreLib;
-- synopsys translate_on
library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;
entity xlcounter_limit_c09f12_01 is
  generic (
    core_name0: string := "";
    op_width: integer := 5;
    op_arith: integer := xlSigned;
    cnt_63_48: integer:= 0;
    cnt_47_32: integer:= 0;
    cnt_31_16: integer:= 0;
    cnt_15_0: integer:= 0;
    count_limited: integer := 0
  );
  port (
    ce: in std_logic;
    clr: in std_logic;
    clk: in std_logic;
    op: out std_logic_vector(op_width - 1 downto 0);
    up: in std_logic_vector(0 downto 0) := (others => '0');
    en: in std_logic_vector(0 downto 0);
    rst: in std_logic_vector(0 downto 0)
  );
end xlcounter_limit_c09f12_01 ;
architecture behavior of xlcounter_limit_c09f12_01 is
  signal high_cnt_to: std_logic_vector(31 downto 0);
  signal low_cnt_to: std_logic_vector(31 downto 0);
  signal cnt_to: std_logic_vector(63 downto 0);
  signal core_sinit, op_thresh0, core_ce: std_logic;
  signal rst_overrides_en: std_logic;
  signal op_net: std_logic_vector(op_width - 1 downto 0);
  -- synopsys translate_off
  signal real_op : real;
   -- synopsys translate_on
  function equals(op, cnt_to : std_logic_vector; width, arith : integer)
    return std_logic
  is
    variable signed_op, signed_cnt_to : signed (width - 1 downto 0);
    variable unsigned_op, unsigned_cnt_to : unsigned (width - 1 downto 0);
    variable result : std_logic;
  begin
    -- synopsys translate_off
    if ((is_XorU(op)) or (is_XorU(cnt_to)) ) then
      result := '0';
      return result;
    end if;
    -- synopsys translate_on
    if (op = cnt_to) then
      result := '1';
    else
      result := '0';
    end if;
    return result;
  end;
  component cntr_11_0_50ef766046ea9bf4
    port (
      clk: in std_logic;
      ce: in std_logic;
      SINIT: in std_logic;
      q: out std_logic_vector(op_width - 1 downto 0)
    );
  end component;

  attribute syn_black_box of cntr_11_0_50ef766046ea9bf4:
    component is true;
  attribute fpga_dont_touch of cntr_11_0_50ef766046ea9bf4:
    component is "true";
  attribute box_type of cntr_11_0_50ef766046ea9bf4:
    component  is "black_box";
  component cntr_11_0_aeada998ec385fcd
    port (
      clk: in std_logic;
      ce: in std_logic;
      SINIT: in std_logic;
      q: out std_logic_vector(op_width - 1 downto 0)
    );
  end component;

  attribute syn_black_box of cntr_11_0_aeada998ec385fcd:
    component is true;
  attribute fpga_dont_touch of cntr_11_0_aeada998ec385fcd:
    component is "true";
  attribute box_type of cntr_11_0_aeada998ec385fcd:
    component  is "black_box";
  component cntr_11_0_f2301c6681846b15
    port (
      clk: in std_logic;
      ce: in std_logic;
      SINIT: in std_logic;
      q: out std_logic_vector(op_width - 1 downto 0)
    );
  end component;

  attribute syn_black_box of cntr_11_0_f2301c6681846b15:
    component is true;
  attribute fpga_dont_touch of cntr_11_0_f2301c6681846b15:
    component is "true";
  attribute box_type of cntr_11_0_f2301c6681846b15:
    component  is "black_box";
  component cntr_11_0_77d9d8bb324abfb9
    port (
      clk: in std_logic;
      ce: in std_logic;
      SINIT: in std_logic;
      q: out std_logic_vector(op_width - 1 downto 0)
    );
  end component;

  attribute syn_black_box of cntr_11_0_77d9d8bb324abfb9:
    component is true;
  attribute fpga_dont_touch of cntr_11_0_77d9d8bb324abfb9:
    component is "true";
  attribute box_type of cntr_11_0_77d9d8bb324abfb9:
    component  is "black_box";
  component cntr_11_0_514048f9c72a30b1
    port (
      clk: in std_logic;
      ce: in std_logic;
      SINIT: in std_logic;
      q: out std_logic_vector(op_width - 1 downto 0)
    );
  end component;

  attribute syn_black_box of cntr_11_0_514048f9c72a30b1:
    component is true;
  attribute fpga_dont_touch of cntr_11_0_514048f9c72a30b1:
    component is "true";
  attribute box_type of cntr_11_0_514048f9c72a30b1:
    component  is "black_box";
  component cntr_11_0_467594213c284489
    port (
      clk: in std_logic;
      ce: in std_logic;
      SINIT: in std_logic;
      q: out std_logic_vector(op_width - 1 downto 0)
    );
  end component;

  attribute syn_black_box of cntr_11_0_467594213c284489:
    component is true;
  attribute fpga_dont_touch of cntr_11_0_467594213c284489:
    component is "true";
  attribute box_type of cntr_11_0_467594213c284489:
    component  is "black_box";
  component cntr_11_0_bc43ff9b02fd1262
    port (
      clk: in std_logic;
      ce: in std_logic;
      SINIT: in std_logic;
      q: out std_logic_vector(op_width - 1 downto 0)
    );
  end component;

  attribute syn_black_box of cntr_11_0_bc43ff9b02fd1262:
    component is true;
  attribute fpga_dont_touch of cntr_11_0_bc43ff9b02fd1262:
    component is "true";
  attribute box_type of cntr_11_0_bc43ff9b02fd1262:
    component  is "black_box";
  component cntr_11_0_8438db56645cca14
    port (
      clk: in std_logic;
      ce: in std_logic;
      SINIT: in std_logic;
      q: out std_logic_vector(op_width - 1 downto 0)
    );
  end component;

  attribute syn_black_box of cntr_11_0_8438db56645cca14:
    component is true;
  attribute fpga_dont_touch of cntr_11_0_8438db56645cca14:
    component is "true";
  attribute box_type of cntr_11_0_8438db56645cca14:
    component  is "black_box";
-- synopsys translate_off
  constant zeroVec : std_logic_vector(op_width - 1 downto 0) := (others => '0');
  constant oneVec : std_logic_vector(op_width - 1 downto 0) := (others => '1');
  constant zeroStr : string(1 to op_width) :=
    std_logic_vector_to_bin_string(zeroVec);
  constant oneStr : string(1 to op_width) :=
    std_logic_vector_to_bin_string(oneVec);
-- synopsys translate_on
begin
  -- synopsys translate_off
  -- synopsys translate_on
  cnt_to(63 downto 48) <= integer_to_std_logic_vector(cnt_63_48, 16, op_arith);
  cnt_to(47 downto 32) <= integer_to_std_logic_vector(cnt_47_32, 16, op_arith);
  cnt_to(31 downto 16) <= integer_to_std_logic_vector(cnt_31_16, 16, op_arith);
  cnt_to(15 downto 0) <= integer_to_std_logic_vector(cnt_15_0, 16, op_arith);
  op <= op_net;
  core_ce <= ce and en(0);
  rst_overrides_en <= rst(0) or en(0);
  limit : if (count_limited = 1) generate
    eq_cnt_to : process (op_net, cnt_to)
    begin
      op_thresh0 <= equals(op_net, cnt_to(op_width - 1 downto 0),
                     op_width, op_arith);
    end process;
    core_sinit <= (op_thresh0 or clr or rst(0)) and ce and rst_overrides_en;
  end generate;
  no_limit : if (count_limited = 0) generate
    core_sinit <= (clr or rst(0)) and ce and rst_overrides_en;
  end generate;
  comp0: if ((core_name0 = "cntr_11_0_50ef766046ea9bf4")) generate
    core_instance0: cntr_11_0_50ef766046ea9bf4
      port map (
        clk => clk,
        ce => core_ce,
        SINIT => core_sinit,
        q => op_net
      );
  end generate;
  comp1: if ((core_name0 = "cntr_11_0_aeada998ec385fcd")) generate
    core_instance1: cntr_11_0_aeada998ec385fcd
      port map (
        clk => clk,
        ce => core_ce,
        SINIT => core_sinit,
        q => op_net
      );
  end generate;
  comp2: if ((core_name0 = "cntr_11_0_f2301c6681846b15")) generate
    core_instance2: cntr_11_0_f2301c6681846b15
      port map (
        clk => clk,
        ce => core_ce,
        SINIT => core_sinit,
        q => op_net
      );
  end generate;
  comp3: if ((core_name0 = "cntr_11_0_77d9d8bb324abfb9")) generate
    core_instance3: cntr_11_0_77d9d8bb324abfb9
      port map (
        clk => clk,
        ce => core_ce,
        SINIT => core_sinit,
        q => op_net
      );
  end generate;
  comp4: if ((core_name0 = "cntr_11_0_514048f9c72a30b1")) generate
    core_instance4: cntr_11_0_514048f9c72a30b1
      port map (
        clk => clk,
        ce => core_ce,
        SINIT => core_sinit,
        q => op_net
      );
  end generate;
  comp5: if ((core_name0 = "cntr_11_0_467594213c284489")) generate
    core_instance5: cntr_11_0_467594213c284489
      port map (
        clk => clk,
        ce => core_ce,
        SINIT => core_sinit,
        q => op_net
      );
  end generate;
  comp6: if ((core_name0 = "cntr_11_0_bc43ff9b02fd1262")) generate
    core_instance6: cntr_11_0_bc43ff9b02fd1262
      port map (
        clk => clk,
        ce => core_ce,
        SINIT => core_sinit,
        q => op_net
      );
  end generate;
  comp7: if ((core_name0 = "cntr_11_0_8438db56645cca14")) generate
    core_instance7: cntr_11_0_8438db56645cca14
      port map (
        clk => clk,
        ce => core_ce,
        SINIT => core_sinit,
        q => op_net
      );
  end generate;
end  behavior;

-------------------------------------------------------------------
-- System Generator version 14.6 VHDL source file.
--
-- Copyright(C) 2013 by Xilinx, Inc.  All rights reserved.  This
-- text/file contains proprietary, confidential information of Xilinx,
-- Inc., is distributed under license from Xilinx, Inc., and may be used,
-- copied and/or disclosed only pursuant to the terms of a valid license
-- agreement with Xilinx, Inc.  Xilinx hereby grants you a license to use
-- this text/file solely for design, simulation, implementation and
-- creation of design files limited to Xilinx devices or technologies.
-- Use with non-Xilinx devices or technologies is expressly prohibited
-- and immediately terminates your license unless covered by a separate
-- agreement.
--
-- Xilinx is providing this design, code, or information "as is" solely
-- for use in developing programs and solutions for Xilinx devices.  By
-- providing this design, code, or information as one possible
-- implementation of this feature, application or standard, Xilinx is
-- making no representation that this implementation is free from any
-- claims of infringement.  You are responsible for obtaining any rights
-- you may require for your implementation.  Xilinx expressly disclaims
-- any warranty whatsoever with respect to the adequacy of the
-- implementation, including but not limited to warranties of
-- merchantability or fitness for a particular purpose.
--
-- Xilinx products are not intended for use in life support appliances,
-- devices, or systems.  Use in such applications is expressly prohibited.
--
-- Any modifications that are made to the source code are done at the user's
-- sole risk and will be unsupported.
--
-- This copyright and support notice must be retained as part of this
-- text at all times.  (c) Copyright 1995-2013 Xilinx, Inc.  All rights
-- reserved.
-------------------------------------------------------------------
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;
entity xlspram_c09f12_01 is
  generic (
    core_name0: string := "";
    c_width: integer := 12;
    c_address_width: integer := 4;
    latency: integer := 1
    );
  port (
    data_in: in std_logic_vector(c_width - 1 downto 0);
    addr: in std_logic_vector(c_address_width - 1 downto 0);
    we: in std_logic_vector(0 downto 0);
    en: in std_logic_vector(0 downto 0);
    rst: in std_logic_vector(0 downto 0);
    ce: in std_logic;
    clk: in std_logic;
    data_out: out std_logic_vector(c_width - 1 downto 0)
  );
end xlspram_c09f12_01 ;
architecture behavior of xlspram_c09f12_01 is
  component synth_reg
    generic (
      width: integer;
      latency: integer
    );
    port (
      i: in std_logic_vector(width - 1 downto 0);
      ce: in std_logic;
      clr: in std_logic;
      clk: in std_logic;
      o: out std_logic_vector(width - 1 downto 0)
    );
  end component;
  signal core_data_out, dly_data_out: std_logic_vector(c_width - 1 downto 0);
  signal core_we, core_ce, sinit: std_logic;
  component bmg_72_47e00fa602868a13
    port (
                              addra: in std_logic_vector(c_address_width - 1 downto 0);
      clka: in std_logic;
      dina: in std_logic_vector(c_width - 1 downto 0);
      wea: in std_logic_vector(0 downto 0);
      ena: in std_logic;
      douta: out std_logic_vector(c_width - 1 downto 0)
    );
  end component;

  attribute syn_black_box of bmg_72_47e00fa602868a13:
    component is true;
  attribute fpga_dont_touch of bmg_72_47e00fa602868a13:
    component is "true";
  attribute box_type of bmg_72_47e00fa602868a13:
    component  is "black_box";
  component bmg_72_1853928182002eb1
    port (
                              addra: in std_logic_vector(c_address_width - 1 downto 0);
      clka: in std_logic;
      dina: in std_logic_vector(c_width - 1 downto 0);
      wea: in std_logic_vector(0 downto 0);
      ena: in std_logic;
      douta: out std_logic_vector(c_width - 1 downto 0)
    );
  end component;

  attribute syn_black_box of bmg_72_1853928182002eb1:
    component is true;
  attribute fpga_dont_touch of bmg_72_1853928182002eb1:
    component is "true";
  attribute box_type of bmg_72_1853928182002eb1:
    component  is "black_box";
  component bmg_72_a6ba22940df932c0
    port (
                              addra: in std_logic_vector(c_address_width - 1 downto 0);
      clka: in std_logic;
      dina: in std_logic_vector(c_width - 1 downto 0);
      wea: in std_logic_vector(0 downto 0);
      ena: in std_logic;
      douta: out std_logic_vector(c_width - 1 downto 0)
    );
  end component;

  attribute syn_black_box of bmg_72_a6ba22940df932c0:
    component is true;
  attribute fpga_dont_touch of bmg_72_a6ba22940df932c0:
    component is "true";
  attribute box_type of bmg_72_a6ba22940df932c0:
    component  is "black_box";
  component bmg_72_3de7891ec729adb4
    port (
                              addra: in std_logic_vector(c_address_width - 1 downto 0);
      clka: in std_logic;
      dina: in std_logic_vector(c_width - 1 downto 0);
      wea: in std_logic_vector(0 downto 0);
      ena: in std_logic;
      douta: out std_logic_vector(c_width - 1 downto 0)
    );
  end component;

  attribute syn_black_box of bmg_72_3de7891ec729adb4:
    component is true;
  attribute fpga_dont_touch of bmg_72_3de7891ec729adb4:
    component is "true";
  attribute box_type of bmg_72_3de7891ec729adb4:
    component  is "black_box";
  component bmg_72_37c9a3ecdc0c1393
    port (
                              addra: in std_logic_vector(c_address_width - 1 downto 0);
      clka: in std_logic;
      dina: in std_logic_vector(c_width - 1 downto 0);
      wea: in std_logic_vector(0 downto 0);
      ena: in std_logic;
      douta: out std_logic_vector(c_width - 1 downto 0)
    );
  end component;

  attribute syn_black_box of bmg_72_37c9a3ecdc0c1393:
    component is true;
  attribute fpga_dont_touch of bmg_72_37c9a3ecdc0c1393:
    component is "true";
  attribute box_type of bmg_72_37c9a3ecdc0c1393:
    component  is "black_box";
  component bmg_72_deac774267b579f6
    port (
                              addra: in std_logic_vector(c_address_width - 1 downto 0);
      clka: in std_logic;
      dina: in std_logic_vector(c_width - 1 downto 0);
      wea: in std_logic_vector(0 downto 0);
      ena: in std_logic;
      douta: out std_logic_vector(c_width - 1 downto 0)
    );
  end component;

  attribute syn_black_box of bmg_72_deac774267b579f6:
    component is true;
  attribute fpga_dont_touch of bmg_72_deac774267b579f6:
    component is "true";
  attribute box_type of bmg_72_deac774267b579f6:
    component  is "black_box";
  component bmg_72_b673a6c277a0b565
    port (
                              addra: in std_logic_vector(c_address_width - 1 downto 0);
      clka: in std_logic;
      dina: in std_logic_vector(c_width - 1 downto 0);
      wea: in std_logic_vector(0 downto 0);
      ena: in std_logic;
      douta: out std_logic_vector(c_width - 1 downto 0)
    );
  end component;

  attribute syn_black_box of bmg_72_b673a6c277a0b565:
    component is true;
  attribute fpga_dont_touch of bmg_72_b673a6c277a0b565:
    component is "true";
  attribute box_type of bmg_72_b673a6c277a0b565:
    component  is "black_box";
  component bmg_72_ddcdd9bb5f78a2a9
    port (
                              addra: in std_logic_vector(c_address_width - 1 downto 0);
      clka: in std_logic;
      dina: in std_logic_vector(c_width - 1 downto 0);
      wea: in std_logic_vector(0 downto 0);
      ena: in std_logic;
      douta: out std_logic_vector(c_width - 1 downto 0)
    );
  end component;

  attribute syn_black_box of bmg_72_ddcdd9bb5f78a2a9:
    component is true;
  attribute fpga_dont_touch of bmg_72_ddcdd9bb5f78a2a9:
    component is "true";
  attribute box_type of bmg_72_ddcdd9bb5f78a2a9:
    component  is "black_box";
  component bmg_72_b1697c6003ecdb6f
    port (
                              addra: in std_logic_vector(c_address_width - 1 downto 0);
      clka: in std_logic;
      dina: in std_logic_vector(c_width - 1 downto 0);
      wea: in std_logic_vector(0 downto 0);
      ena: in std_logic;
      douta: out std_logic_vector(c_width - 1 downto 0)
    );
  end component;

  attribute syn_black_box of bmg_72_b1697c6003ecdb6f:
    component is true;
  attribute fpga_dont_touch of bmg_72_b1697c6003ecdb6f:
    component is "true";
  attribute box_type of bmg_72_b1697c6003ecdb6f:
    component  is "black_box";
begin
  data_out <= dly_data_out;
  core_we <= we(0);
  core_ce <= ce and en(0);
  sinit <= rst(0) and ce;
  comp0: if ((core_name0 = "bmg_72_47e00fa602868a13")) generate
    core_instance0: bmg_72_47e00fa602868a13
      port map (
                                        addra => addr,
        clka => clk,
        dina => data_in,
        wea(0) => core_we,
        ena => core_ce,
        douta => core_data_out
      );
  end generate;
  comp1: if ((core_name0 = "bmg_72_1853928182002eb1")) generate
    core_instance1: bmg_72_1853928182002eb1
      port map (
                                        addra => addr,
        clka => clk,
        dina => data_in,
        wea(0) => core_we,
        ena => core_ce,
        douta => core_data_out
      );
  end generate;
  comp2: if ((core_name0 = "bmg_72_a6ba22940df932c0")) generate
    core_instance2: bmg_72_a6ba22940df932c0
      port map (
                                        addra => addr,
        clka => clk,
        dina => data_in,
        wea(0) => core_we,
        ena => core_ce,
        douta => core_data_out
      );
  end generate;
  comp3: if ((core_name0 = "bmg_72_3de7891ec729adb4")) generate
    core_instance3: bmg_72_3de7891ec729adb4
      port map (
                                        addra => addr,
        clka => clk,
        dina => data_in,
        wea(0) => core_we,
        ena => core_ce,
        douta => core_data_out
      );
  end generate;
  comp4: if ((core_name0 = "bmg_72_37c9a3ecdc0c1393")) generate
    core_instance4: bmg_72_37c9a3ecdc0c1393
      port map (
                                        addra => addr,
        clka => clk,
        dina => data_in,
        wea(0) => core_we,
        ena => core_ce,
        douta => core_data_out
      );
  end generate;
  comp5: if ((core_name0 = "bmg_72_deac774267b579f6")) generate
    core_instance5: bmg_72_deac774267b579f6
      port map (
                                        addra => addr,
        clka => clk,
        dina => data_in,
        wea(0) => core_we,
        ena => core_ce,
        douta => core_data_out
      );
  end generate;
  comp6: if ((core_name0 = "bmg_72_b673a6c277a0b565")) generate
    core_instance6: bmg_72_b673a6c277a0b565
      port map (
                                        addra => addr,
        clka => clk,
        dina => data_in,
        wea(0) => core_we,
        ena => core_ce,
        douta => core_data_out
      );
  end generate;
  comp7: if ((core_name0 = "bmg_72_ddcdd9bb5f78a2a9")) generate
    core_instance7: bmg_72_ddcdd9bb5f78a2a9
      port map (
                                        addra => addr,
        clka => clk,
        dina => data_in,
        wea(0) => core_we,
        ena => core_ce,
        douta => core_data_out
      );
  end generate;
  comp8: if ((core_name0 = "bmg_72_b1697c6003ecdb6f")) generate
    core_instance8: bmg_72_b1697c6003ecdb6f
      port map (
                                        addra => addr,
        clka => clk,
        dina => data_in,
        wea(0) => core_we,
        ena => core_ce,
        douta => core_data_out
      );
  end generate;
  latency_test: if (latency > 1) generate
    reg: synth_reg
      generic map (
        width => c_width,
        latency => latency - 1
      )
      port map (
        i => core_data_out,
        ce => core_ce,
        clr => '0',
        clk => clk,
        o => dly_data_out
      );
  end generate;
  latency_1: if (latency <= 1) generate
    dly_data_out <= core_data_out;
  end generate;
end behavior;
library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity reinterpret_9a0fa0f632 is
  port (
    input_port : in std_logic_vector((18 - 1) downto 0);
    output_port : out std_logic_vector((18 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end reinterpret_9a0fa0f632;


architecture behavior of reinterpret_9a0fa0f632 is
  signal input_port_1_40: unsigned((18 - 1) downto 0);
  signal output_port_5_5_force: signed((18 - 1) downto 0);
begin
  input_port_1_40 <= std_logic_vector_to_unsigned(input_port);
  output_port_5_5_force <= unsigned_to_signed(input_port_1_40);
  output_port <= signed_to_std_logic_vector(output_port_5_5_force);
end behavior;


-------------------------------------------------------------------
-- System Generator version 14.6 VHDL source file.
--
-- Copyright(C) 2013 by Xilinx, Inc.  All rights reserved.  This
-- text/file contains proprietary, confidential information of Xilinx,
-- Inc., is distributed under license from Xilinx, Inc., and may be used,
-- copied and/or disclosed only pursuant to the terms of a valid license
-- agreement with Xilinx, Inc.  Xilinx hereby grants you a license to use
-- this text/file solely for design, simulation, implementation and
-- creation of design files limited to Xilinx devices or technologies.
-- Use with non-Xilinx devices or technologies is expressly prohibited
-- and immediately terminates your license unless covered by a separate
-- agreement.
--
-- Xilinx is providing this design, code, or information "as is" solely
-- for use in developing programs and solutions for Xilinx devices.  By
-- providing this design, code, or information as one possible
-- implementation of this feature, application or standard, Xilinx is
-- making no representation that this implementation is free from any
-- claims of infringement.  You are responsible for obtaining any rights
-- you may require for your implementation.  Xilinx expressly disclaims
-- any warranty whatsoever with respect to the adequacy of the
-- implementation, including but not limited to warranties of
-- merchantability or fitness for a particular purpose.
--
-- Xilinx products are not intended for use in life support appliances,
-- devices, or systems.  Use in such applications is expressly prohibited.
--
-- Any modifications that are made to the source code are done at the user's
-- sole risk and will be unsupported.
--
-- This copyright and support notice must be retained as part of this
-- text at all times.  (c) Copyright 1995-2013 Xilinx, Inc.  All rights
-- reserved.
-------------------------------------------------------------------
library IEEE;
use IEEE.std_logic_1164.all;
entity generatePowerEfficientEnable is
  generic (
    use_reg : integer := 0
  );
  port (
    cereg : in std_logic;
    ce : in std_logic;
    en : in std_logic;
    internal_cereg : out std_logic
  );
end  generatePowerEfficientEnable;
architecture structural of generatePowerEfficientEnable is
begin
using_reg : if (use_reg = 1)
generate
  internal_cereg <= cereg and ce and en;
end generate;
not_using_reg : if (use_reg /= 1)
generate
  internal_cereg <= '0';
end generate;
end structural;
-- synopsys translate_off
library XilinxCoreLib;
-- synopsys translate_on
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;
-- synopsys translate_off
library unisim;
use unisim.vcomponents.all;
-- synopsys translate_on
-- synopsys translate_off
-- synopsys translate_on
entity xldsp48e is
  generic (
        carryout_width  : integer               := 1;
        alumodereg      : integer               := 1;
        areg            : integer               := 1;
        use_c_port      : integer              := 1;
        use_op          : integer               := 0;
        autoreset_pattern_detect                : boolean               := false;
        autoreset_pattern_detect_optinv         : string                := "MATCH";
        a_input         : string                := "DIRECT";
            acascreg        : integer           := 0;
        bcascreg        : integer               := 1;
        breg            : integer               := 1;
        b_input         : string                := "DIRECT";
        carryinreg      : integer               := 1;
        carryinselreg   : integer               := 1;
        creg            : integer               := 1;
        mask            : bit_vector            := X"3FFFFFFFFFFF";
        mreg            : integer               := 1;
        multcarryinreg  : integer               := 1;
        opmodereg       : integer               := 1;
        pattern         : bit_vector            := X"000000000000";
        preg            : integer               := 1;
        sel_mask        : string                := "MASK";
        sel_pattern     : string                := "PATTERN";
        sel_rounding_mask       : string        := "SEL_MASK";
        use_mult        : string                := "MULT";
        use_pattern_detect      : string        := "NO_PATDET";
        use_simd        : string                := "ONE48"
        );
 port (
        acout              : out std_logic_vector(29 downto 0);
        bcout              : out std_logic_vector(17 downto 0);
        carrycascout       : out std_logic_vector(0 downto 0);
        carryout           : out std_logic_vector(carryout_width-1 downto 0);
        multsignout        : out std_logic_vector(0 downto 0);
        overflow           : out std_logic_vector(0 downto 0);
        p                  : out std_logic_vector(47 downto 0);
        patternbdetect     : out std_logic_vector(0 downto 0);
        patterndetect      : out std_logic_vector(0 downto 0);
        pcout              : out std_logic_vector(47 downto 0);
        underflow          : out std_logic_vector(0 downto 0);
        a                  : in  std_logic_vector(29 downto 0) := (others => '0');
        acin               : in  std_logic_vector(29 downto 0) := (others => '0');
        alumode            : in  std_logic_vector(3 downto 0) := (others => '0');
        b                  : in  std_logic_vector(17 downto 0) := (others => '0');
        bcin               : in  std_logic_vector(17 downto 0) := (others => '0');
        c                  : in  std_logic_vector(47 downto 0) := (others => '0');
        carrycascin        : in  std_logic_vector(0 downto 0) := (others => '0');
        carryin            : in  std_logic_vector(0 downto 0) := (others => '0');
        carryinsel         : in  std_logic_vector(2 downto 0) := (others => '0');
        cea1               : in  std_logic_vector(0 downto 0) := (others => '1');
        cea2               : in  std_logic_vector(0 downto 0) := (others => '1');
        cealumode          : in  std_logic_vector(0 downto 0) := (others => '1');
        ceb1               : in  std_logic_vector(0 downto 0) := (others => '1');
        ceb2               : in  std_logic_vector(0 downto 0) := (others => '1');
        cec                : in  std_logic_vector(0 downto 0) := (others => '1');
        cecarryin          : in  std_logic_vector(0 downto 0) := (others => '1');
        cectrl             : in  std_logic_vector(0 downto 0) := (others => '1');
        cem                : in  std_logic_vector(0 downto 0) := (others => '1');
        cemultcarryin      : in  std_logic_vector(0 downto 0) := (others => '1');
        cep                : in  std_logic_vector(0 downto 0) := (others => '1');
        multsignin         : in  std_logic_vector(0 downto 0) := (others => '0');
        opmode             : in  std_logic_vector(6 downto 0) := (others => '0');
        pcin               : in  std_logic_vector(47 downto 0) := (others => '0');
        rsta               : in  std_logic_vector(0 downto 0) := (others => '0');
        rstcarryin      : in  std_logic_vector(0 downto 0) := (others => '0');
        rstalumode         : in  std_logic_vector(0 downto 0) := (others => '0');
        rstb               : in  std_logic_vector(0 downto 0) := (others => '0');
        rstc               : in  std_logic_vector(0 downto 0) := (others => '0');
        rstctrl            : in  std_logic_vector(0 downto 0) := (others => '0');
        rstm               : in  std_logic_vector(0 downto 0) := (others => '0');
        rstp               : in  std_logic_vector(0 downto 0) := (others => '0');
        op                 : in  std_logic_vector(14 downto 0) := (others => '0');
        clk                : in  std_ulogic;
        en                 : in  std_logic_vector(0 downto 0) := (others => '1');
        rst                : in  std_logic_vector(0 downto 0) := (others => '0');
        ce                 : in  std_logic
      );
end xldsp48e;
architecture behavior of xldsp48e is
component DSP48E
 generic(
        ACASCREG        : integer;
        ALUMODEREG      : integer;
        AREG            : integer;
        AUTORESET_PATTERN_DETECT                : boolean;
        AUTORESET_PATTERN_DETECT_OPTINV         : string;
        A_INPUT         : string;
        BCASCREG        : integer;
        BREG            : integer;
        B_INPUT         : string;
        CARRYINREG      : integer;
        CARRYINSELREG   : integer;
        CREG            : integer;
        MASK            : bit_vector;
        MREG            : integer;
        MULTCARRYINREG  : integer;
        OPMODEREG       : integer;
        PATTERN         : bit_vector;
        PREG            : integer;
        SEL_MASK        : string;
        SEL_PATTERN     : string;
        SEL_ROUNDING_MASK       : string;
        USE_MULT        : string        ;
        USE_PATTERN_DETECT      : string;
        USE_SIMD        : string
        );
  port(
        ACOUT                   : out std_logic_vector(29 downto 0);
        BCOUT                   : out std_logic_vector(17 downto 0);
        CARRYCASCOUT            : out std_ulogic;
        CARRYOUT                : out std_logic_vector(3 downto 0);
        MULTSIGNOUT             : out std_ulogic;
        OVERFLOW                : out std_ulogic;
        P                       : out std_logic_vector(47 downto 0);
        PATTERNBDETECT          : out std_ulogic;
        PATTERNDETECT           : out std_ulogic;
        PCOUT                   : out std_logic_vector(47 downto 0);
        UNDERFLOW               : out std_ulogic;
        A                       : in  std_logic_vector(29 downto 0);
        ACIN                    : in  std_logic_vector(29 downto 0);
        ALUMODE                 : in  std_logic_vector(3 downto 0);
        B                       : in  std_logic_vector(17 downto 0);
        BCIN                    : in  std_logic_vector(17 downto 0);
        C                       : in  std_logic_vector(47 downto 0);
        CARRYCASCIN             : in  std_ulogic;
        CARRYIN                 : in  std_ulogic;
        CARRYINSEL              : in  std_logic_vector(2 downto 0);
        CEA1                    : in  std_ulogic;
        CEA2                    : in  std_ulogic;
        CEALUMODE               : in  std_ulogic;
        CEB1                    : in  std_ulogic;
        CEB2                    : in  std_ulogic;
        CEC                     : in  std_ulogic;
        CECARRYIN               : in  std_ulogic;
        CECTRL                  : in  std_ulogic;
        CEM                     : in  std_ulogic;
        CEMULTCARRYIN           : in  std_ulogic;
        CEP                     : in  std_ulogic;
        CLK                     : in  std_ulogic;
        MULTSIGNIN              : in std_ulogic;
        OPMODE                  : in  std_logic_vector(6 downto 0);
        PCIN                    : in  std_logic_vector(47 downto 0);
        RSTA                    : in  std_ulogic;
        RSTALLCARRYIN           : in  std_ulogic;
        RSTALUMODE              : in  std_ulogic;
        RSTB                    : in  std_ulogic;
        RSTC                    : in  std_ulogic;
        RSTCTRL                 : in  std_ulogic;
        RSTM                    : in  std_ulogic;
        RSTP                    : in  std_ulogic
      );
   end component;
  signal internal_cea1: std_logic;
  signal internal_cea2: std_logic;
  signal internal_ceb1: std_logic;
  signal internal_ceb2: std_logic;
  signal internal_cec: std_logic;
  signal internal_cep: std_logic;
  signal internal_cem: std_logic;
  signal internal_cecarryin: std_logic;
  signal internal_cectrl: std_logic;
  signal internal_rsta : std_logic;
  signal internal_rstb : std_logic;
  signal internal_rstc : std_logic;
  signal internal_rstalumode : std_logic;
  signal internal_rstcarryin : std_logic;
  signal internal_rstctrl : std_logic;
  signal internal_rstm : std_logic;
  signal internal_cecinsub : std_logic;
  signal internal_rstp : std_logic;
  signal internal_opmode : std_logic_vector(6 downto 0);
  signal internal_alumode : std_logic_vector(3 downto 0);
  signal internal_cealumode : std_logic;
  signal internal_carryin : std_logic;
  signal internal_cemultcarryin : std_logic;
  signal internal_carryinsel : std_logic_vector(2 downto 0);
  signal internal_carryout : std_logic_vector(3 downto 0);
begin
  using_c_port: if (use_c_port = 1)
  generate
      generate_power_efficient_creg_enable : entity work.generatePowerEfficientEnable
        generic map(
          use_reg => creg
        )
        port map(
          cereg => cec(0),
          ce => ce,
          en => en(0),
          internal_cereg => internal_cec
        );
      internal_rstc <= (rstc(0) or rst(0)) and ce;
  end generate;
  not_using_c_port: if (use_c_port = 0)
  generate
      internal_cec <= '0';
      internal_rstc <= '1';
  end generate;

  generate_power_efficient_mreg_enable : entity work.generatePowerEfficientEnable
    generic map(
      use_reg => mreg
    )
    port map(
      cereg => cem(0),
      ce => ce,
      en => en(0),
      internal_cereg => internal_cem
    );
  generate_power_efficient_preg_enable : entity work.generatePowerEfficientEnable
    generic map(
      use_reg => preg
    )
    port map(
      cereg => cep(0),
      ce => ce,
      en => en(0),
      internal_cereg => internal_cep
    );
  internal_cecarryin <= cecarryin(0) and ce and en(0);
  internal_cectrl <= cectrl(0) and ce and en(0);
  internal_cealumode <= cealumode(0) and ce and en(0);

  internal_rsta <= (rsta(0) or rst(0)) and ce;
  internal_rstb <= (rstb(0) or rst(0)) and ce;
  internal_rstcarryin <= (rstcarryin(0) or rst(0)) and ce;
  internal_rstctrl <= (rstctrl(0) or rst(0)) and ce;
  internal_rstalumode <= (rstalumode(0) or rst(0)) and ce;
  internal_rstm <= (rstm(0) or rst(0)) and ce;
  internal_rstp <= (rstp(0) or rst(0)) and ce;

  internal_cemultcarryin <= cemultcarryin(0) and ce and en(0);
  ceacontrol_1: if(areg = 1)
  generate
    internal_cea1 <= '0';
    internal_cea2 <= cea1(0) and ce and en(0);
  end generate;
  ceacontrol_2: if(areg = 2)
  generate
    internal_cea1 <= cea1(0) and ce and en(0);
    internal_cea2 <= cea2(0) and ce and en(0);
  end generate;
  ceacontrol_0: if(areg = 0)
  generate
    internal_cea1 <= '0';
    internal_cea2 <= '0';
  end generate;
  cebcontrol_1: if(breg = 1)
  generate
    internal_ceb1 <= '0';
    internal_ceb2 <= ceb1(0) and ce and en(0);
  end generate;
  cebcontrol_2: if(breg = 2)
  generate
    internal_ceb1 <= ceb1(0) and ce and en(0);
    internal_ceb2 <= ceb2(0) and ce and en(0);
  end generate;
  cebcontrol_0: if(breg = 0)
  generate
    internal_ceb1 <= '0';
    internal_ceb2 <= '0';
  end generate;
  opmode_0: if(use_op = 0)
  generate
        internal_opmode <= opmode;
  end generate;
  opmode_1: if(use_op = 1)
  generate
        internal_opmode <= op(6 downto 0);
  end generate;
  sub_0: if(use_op = 0)
  generate
        internal_alumode <= alumode;
  end generate;
  sub_1: if(use_op = 1)
  generate
        internal_alumode <= op(10 downto 7);
  end generate;
  carryin_0: if(use_op = 0)
  generate
        internal_carryin <= carryin(0);
  end generate;
  carryin_1: if(use_op = 1)
  generate
        internal_carryin <= op(11);
  end generate;
  carryinsel_0: if(use_op = 0)
  generate
        internal_carryinsel <= carryinsel;
  end generate;
  carryinsel_1: if(use_op = 1)
  generate
        internal_carryinsel <= op(14 downto 12);
  end generate;
  dsp48e_inst: DSP48E
  generic map(
        ACASCREG        => acascreg,
        ALUMODEREG      => alumodereg,
        AREG            => areg,
        AUTORESET_PATTERN_DETECT                => autoreset_pattern_detect,
        AUTORESET_PATTERN_DETECT_OPTINV         => autoreset_pattern_detect_optinv,
        A_INPUT         => a_input,
        BCASCREG        => bcascreg,
        BREG            => breg,
        B_INPUT         => b_input,
        CARRYINREG      => carryinreg,
        CARRYINSELREG   => carryinselreg,
        CREG            => creg,
        MASK            => mask,
        MREG            => mreg,
        MULTCARRYINREG  => multcarryinreg,
        OPMODEREG       => opmodereg,
        PATTERN         => pattern,
        PREG            => preg,
        SEL_MASK        => sel_mask,
        SEL_PATTERN     => sel_pattern,
        SEL_ROUNDING_MASK       => sel_rounding_mask,
        USE_MULT                => use_mult,
        USE_PATTERN_DETECT      => use_pattern_detect,
        USE_SIMD                => use_simd
        )
  port map(
        ACOUT           => acout,
        BCOUT           => bcout,
        CARRYCASCOUT    => carrycascout(0),
        CARRYOUT        => internal_carryout,
        MULTSIGNOUT     => multsignout(0),
        OVERFLOW        => overflow(0),
        P               => p,
        PATTERNBDETECT  => patternbdetect(0),
        PATTERNDETECT   => patterndetect(0),
        PCOUT           => pcout,
        UNDERFLOW       => underflow(0),
        A               => a,
        ACIN            => acin,
        ALUMODE         => internal_alumode,
        B               => b,
        BCIN            => bcin,
        C               => c,
        CARRYCASCIN     => carrycascin(0),
        CARRYIN         => internal_carryin,
        CARRYINSEL      => internal_carryinsel,
        CEA1            => internal_cea1,
        CEA2            => internal_cea2,
        CEALUMODE       => internal_cealumode,
        CEB1            => internal_ceb1,
        CEB2            => internal_ceb2,
        CEC             => internal_cec,
        CECARRYIN       => internal_cecarryin,
        CECTRL          => internal_cectrl,
        CEM             => internal_cem,
        CEMULTCARRYIN   => internal_cemultcarryin,
        CEP             => internal_cep,
        CLK             => clk,
        MULTSIGNIN      => multsignin(0),
        OPMODE          => internal_opmode,
        PCIN            => pcin,
        RSTA            => internal_rsta,
        RSTALLCARRYIN   => internal_rstcarryin,
        RSTALUMODE      => internal_rstalumode,
        RSTB            => internal_rstb,
        RSTC            => internal_rstc,
        RSTCTRL         => internal_rstctrl,
        RSTM            => internal_rstm,
        RSTP            => internal_rstp
      );
  one48_mode : if (  use_simd = "ONE48") generate
      carryout(0) <= internal_carryout(3);
  end generate;
  two24_mode : if ( use_simd = "TWO24" ) generate
        carryout(1) <= internal_carryout(3);
        carryout(0) <= internal_carryout(1);
  end generate;
  four12_mode : if ( use_simd = "FOUR12" ) generate
        carryout <= internal_carryout;
  end generate;
end behavior;
library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity reinterpret_eb03bc3377 is
  port (
    input_port : in std_logic_vector((30 - 1) downto 0);
    output_port : out std_logic_vector((30 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end reinterpret_eb03bc3377;


architecture behavior of reinterpret_eb03bc3377 is
  signal input_port_1_40: unsigned((30 - 1) downto 0);
  signal output_port_5_5_force: signed((30 - 1) downto 0);
begin
  input_port_1_40 <= std_logic_vector_to_unsigned(input_port);
  output_port_5_5_force <= unsigned_to_signed(input_port_1_40);
  output_port <= signed_to_std_logic_vector(output_port_5_5_force);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity reinterpret_7ea107432a is
  port (
    input_port : in std_logic_vector((48 - 1) downto 0);
    output_port : out std_logic_vector((48 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end reinterpret_7ea107432a;


architecture behavior of reinterpret_7ea107432a is
  signal input_port_1_40: unsigned((48 - 1) downto 0);
  signal output_port_5_5_force: signed((48 - 1) downto 0);
begin
  input_port_1_40 <= std_logic_vector_to_unsigned(input_port);
  output_port_5_5_force <= unsigned_to_signed(input_port_1_40);
  output_port <= signed_to_std_logic_vector(output_port_5_5_force);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity constant_4c449dd556 is
  port (
    op : out std_logic_vector((4 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end constant_4c449dd556;


architecture behavior of constant_4c449dd556 is
begin
  op <= "0000";
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity constant_822933f89b is
  port (
    op : out std_logic_vector((3 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end constant_822933f89b;


architecture behavior of constant_822933f89b is
begin
  op <= "000";
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity concat_b57c4be2de is
  port (
    in0 : in std_logic_vector((24 - 1) downto 0);
    in1 : in std_logic_vector((24 - 1) downto 0);
    y : out std_logic_vector((48 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end concat_b57c4be2de;


architecture behavior of concat_b57c4be2de is
  signal in0_1_23: unsigned((24 - 1) downto 0);
  signal in1_1_27: unsigned((24 - 1) downto 0);
  signal y_2_1_concat: unsigned((48 - 1) downto 0);
begin
  in0_1_23 <= std_logic_vector_to_unsigned(in0);
  in1_1_27 <= std_logic_vector_to_unsigned(in1);
  y_2_1_concat <= std_logic_vector_to_unsigned(unsigned_to_std_logic_vector(in0_1_23) & unsigned_to_std_logic_vector(in1_1_27));
  y <= unsigned_to_std_logic_vector(y_2_1_concat);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity constant_270746ab47 is
  port (
    op : out std_logic_vector((7 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end constant_270746ab47;


architecture behavior of constant_270746ab47 is
begin
  op <= "0110011";
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity reinterpret_3fb4604c01 is
  port (
    input_port : in std_logic_vector((24 - 1) downto 0);
    output_port : out std_logic_vector((24 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end reinterpret_3fb4604c01;


architecture behavior of reinterpret_3fb4604c01 is
  signal input_port_1_40: signed((24 - 1) downto 0);
  signal output_port_5_5_force: unsigned((24 - 1) downto 0);
begin
  input_port_1_40 <= std_logic_vector_to_signed(input_port);
  output_port_5_5_force <= signed_to_unsigned(input_port_1_40);
  output_port <= unsigned_to_std_logic_vector(output_port_5_5_force);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity reinterpret_4bf1ad328a is
  port (
    input_port : in std_logic_vector((24 - 1) downto 0);
    output_port : out std_logic_vector((24 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end reinterpret_4bf1ad328a;


architecture behavior of reinterpret_4bf1ad328a is
  signal input_port_1_40: unsigned((24 - 1) downto 0);
  signal output_port_5_5_force: signed((24 - 1) downto 0);
begin
  input_port_1_40 <= std_logic_vector_to_unsigned(input_port);
  output_port_5_5_force <= unsigned_to_signed(input_port_1_40);
  output_port <= signed_to_std_logic_vector(output_port_5_5_force);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity constant_8038205d89 is
  port (
    op : out std_logic_vector((4 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end constant_8038205d89;


architecture behavior of constant_8038205d89 is
begin
  op <= "0011";
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity concat_b198bd62b0 is
  port (
    in0 : in std_logic_vector((18 - 1) downto 0);
    in1 : in std_logic_vector((18 - 1) downto 0);
    y : out std_logic_vector((36 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end concat_b198bd62b0;


architecture behavior of concat_b198bd62b0 is
  signal in0_1_23: unsigned((18 - 1) downto 0);
  signal in1_1_27: unsigned((18 - 1) downto 0);
  signal y_2_1_concat: unsigned((36 - 1) downto 0);
begin
  in0_1_23 <= std_logic_vector_to_unsigned(in0);
  in1_1_27 <= std_logic_vector_to_unsigned(in1);
  y_2_1_concat <= std_logic_vector_to_unsigned(unsigned_to_std_logic_vector(in0_1_23) & unsigned_to_std_logic_vector(in1_1_27));
  y <= unsigned_to_std_logic_vector(y_2_1_concat);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity reinterpret_580feec131 is
  port (
    input_port : in std_logic_vector((18 - 1) downto 0);
    output_port : out std_logic_vector((18 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end reinterpret_580feec131;


architecture behavior of reinterpret_580feec131 is
  signal input_port_1_40: signed((18 - 1) downto 0);
  signal output_port_5_5_force: unsigned((18 - 1) downto 0);
begin
  input_port_1_40 <= std_logic_vector_to_signed(input_port);
  output_port_5_5_force <= signed_to_unsigned(input_port_1_40);
  output_port <= unsigned_to_std_logic_vector(output_port_5_5_force);
end behavior;


-------------------------------------------------------------------
-- System Generator version 14.6 VHDL source file.
--
-- Copyright(C) 2013 by Xilinx, Inc.  All rights reserved.  This
-- text/file contains proprietary, confidential information of Xilinx,
-- Inc., is distributed under license from Xilinx, Inc., and may be used,
-- copied and/or disclosed only pursuant to the terms of a valid license
-- agreement with Xilinx, Inc.  Xilinx hereby grants you a license to use
-- this text/file solely for design, simulation, implementation and
-- creation of design files limited to Xilinx devices or technologies.
-- Use with non-Xilinx devices or technologies is expressly prohibited
-- and immediately terminates your license unless covered by a separate
-- agreement.
--
-- Xilinx is providing this design, code, or information "as is" solely
-- for use in developing programs and solutions for Xilinx devices.  By
-- providing this design, code, or information as one possible
-- implementation of this feature, application or standard, Xilinx is
-- making no representation that this implementation is free from any
-- claims of infringement.  You are responsible for obtaining any rights
-- you may require for your implementation.  Xilinx expressly disclaims
-- any warranty whatsoever with respect to the adequacy of the
-- implementation, including but not limited to warranties of
-- merchantability or fitness for a particular purpose.
--
-- Xilinx products are not intended for use in life support appliances,
-- devices, or systems.  Use in such applications is expressly prohibited.
--
-- Any modifications that are made to the source code are done at the user's
-- sole risk and will be unsupported.
--
-- This copyright and support notice must be retained as part of this
-- text at all times.  (c) Copyright 1995-2013 Xilinx, Inc.  All rights
-- reserved.
-------------------------------------------------------------------
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;
entity convert_pipeline is
    generic (
        old_width   : integer := 16;
        old_bin_pt  : integer := 4;
        old_arith   : integer := xlUnsigned;
        new_width   : integer := 8;
        new_bin_pt  : integer := 2;
        new_arith   : integer := xlUnsigned;
        en_width    : integer := 1;
        en_bin_pt   : integer := 0;
        en_arith    : integer := xlUnsigned;
        quantization : integer := xlTruncate;
        overflow    : integer := xlWrap;
        latency     : integer := 1);
    port (
        din : in std_logic_vector (old_width-1 downto 0);
        en  : in std_logic_vector (en_width-1 downto 0);
        ce  : in std_logic;
        clr : in std_logic;
        clk : in std_logic;
        result : out std_logic_vector (new_width-1 downto 0));
end convert_pipeline;
architecture behavior of convert_pipeline is
    component synth_reg
        generic (width       : integer;
                 latency     : integer);
        port (i           : in std_logic_vector(width-1 downto 0);
              ce      : in std_logic;
              clr     : in std_logic;
              clk     : in std_logic;
              o       : out std_logic_vector(width-1 downto 0));
    end component;
    constant fp_width : integer := old_width + 2;
    constant fp_bin_pt : integer := old_bin_pt;
    constant fp_arith : integer := old_arith;
    constant q_width : integer := (old_width + 2) + (new_bin_pt - old_bin_pt);
    constant q_bin_pt : integer := new_bin_pt;
    constant q_arith : integer := old_arith;
    signal full_precision_result_in, full_precision_result_out
        : std_logic_vector(fp_width-1 downto 0);
    signal quantized_result_in, quantized_result_out
        : std_logic_vector(q_width-1 downto 0);
    signal result_in : std_logic_vector(new_width-1 downto 0):= (others => '0');
    signal internal_ce : std_logic;
begin
    internal_ce <= ce and en(0);

    fp_result : process (din)
    begin
        full_precision_result_in <= cast(din, old_bin_pt,
                                         fp_width, fp_bin_pt, fp_arith);
    end process;
    latency_fpr : if (latency > 2)
    generate
        reg_fpr : synth_reg
            generic map ( width => fp_width,
                          latency => 1)
            port map (i => full_precision_result_in,
                      ce => internal_ce,
                      clr => clr,
                      clk => clk,
                      o => full_precision_result_out);
    end generate;
    no_latency_fpr : if (latency < 3)
    generate
        full_precision_result_out <= full_precision_result_in;
    end generate;
    xlround_generate : if (quantization = xlRound)
    generate
      xlround_result : process (full_precision_result_out)
      begin
          quantized_result_in <= round_towards_inf(full_precision_result_out,
                                                   fp_width, fp_bin_pt,
                                                   fp_arith, q_width, q_bin_pt,
                                                   q_arith);
      end process;
    end generate;
    xlroundbanker_generate : if (quantization = xlRoundBanker)
    generate
      xlroundbanker_result : process (full_precision_result_out)
      begin
          quantized_result_in <= round_towards_even(full_precision_result_out,
                                                   fp_width, fp_bin_pt,
                                                   fp_arith, q_width, q_bin_pt,
                                                   q_arith);
      end process;
    end generate;
    xltruncate_generate : if (quantization = xlTruncate)
    generate
      xltruncate_result : process (full_precision_result_out)
      begin
          quantized_result_in <= trunc(full_precision_result_out,
                                       fp_width, fp_bin_pt,
                                       fp_arith, q_width, q_bin_pt,
                                       q_arith);
      end process;
    end generate;
    latency_qr : if (latency > 1)
    generate
        reg_qr : synth_reg
            generic map ( width => q_width,
                          latency => 1)
            port map (i => quantized_result_in,
                      ce => internal_ce,
                      clr => clr,
                      clk => clk,
                      o => quantized_result_out);
    end generate;
    no_latency_qr : if (latency < 2)
    generate
        quantized_result_out <= quantized_result_in;
    end generate;
    xlsaturate_generate : if (overflow = xlSaturate)
    generate
      xlsaturate_result : process (quantized_result_out)
      begin
          result_in <= saturation_arith(quantized_result_out, q_width, q_bin_pt,
                                       q_arith, new_width, new_bin_pt, new_arith);
      end process;
    end generate;
    xlwrap_generate : if (overflow = xlWrap)
    generate
      xlwrap_result : process (quantized_result_out)
      begin
          result_in <= wrap_arith(quantized_result_out, q_width, q_bin_pt,
                                  q_arith, new_width, new_bin_pt, new_arith);
      end process;
    end generate;
    latency_gt_3 : if (latency > 3)
    generate
        reg_out : synth_reg
            generic map ( width => new_width,
                          latency => latency-2)
            port map (i => result_in,
                      ce => internal_ce,
                      clr => clr,
                      clk => clk,
                      o => result);
    end generate;
    latency_lt_4 : if ((latency < 4) and (latency > 0))
    generate
        reg_out : synth_reg
            generic map ( width => new_width,
                          latency => 1)
            port map (i => result_in,
                      ce => internal_ce,
                      clr => clr,
                      clk => clk,
                      o => result);
    end generate;
    latency0 : if (latency = 0)
    generate
        result <= result_in;
    end generate latency0;
end behavior;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;
entity xlconvert_pipeline is
    generic (
        din_width    : integer := 16;
        din_bin_pt   : integer := 4;
        din_arith    : integer := xlUnsigned;
        dout_width   : integer := 8;
        dout_bin_pt  : integer := 2;
        dout_arith   : integer := xlUnsigned;
        en_width     : integer := 1;
        en_bin_pt    : integer := 0;
        en_arith     : integer := xlUnsigned;
        bool_conversion : integer :=0;
        latency      : integer := 0;
        quantization : integer := xlTruncate;
        overflow     : integer := xlWrap);
    port (
        din  : in std_logic_vector (din_width-1 downto 0);
        en   : in std_logic_vector (en_width-1 downto 0);
        ce   : in std_logic;
        clr  : in std_logic;
        clk  : in std_logic;
        dout : out std_logic_vector (dout_width-1 downto 0));
end xlconvert_pipeline;
architecture behavior of xlconvert_pipeline is
    component convert_pipeline
        generic (
            old_width    : integer := 16;
            old_bin_pt   : integer := 4;
            old_arith    : integer := xlUnsigned;
            new_width    : integer := 8;
            new_bin_pt   : integer := 2;
            new_arith    : integer := xlUnsigned;
            en_width     : integer := 1;
            en_bin_pt    : integer := 0;
            en_arith     : integer := xlUnsigned;
            quantization : integer := xlTruncate;
            overflow     : integer := xlWrap;
            latency      : integer := 1);
        port (
            din    : in std_logic_vector (din_width-1 downto 0);
            en     : in std_logic_vector (en_width-1 downto 0);
            ce     : in std_logic;
            clr    : in std_logic;
            clk    : in std_logic;
            result : out std_logic_vector (dout_width-1 downto 0));
    end component;
   begin
      convert : convert_pipeline
        generic map (
          old_width   => din_width,
          old_bin_pt  => din_bin_pt,
          old_arith   => din_arith,
          new_width   => dout_width,
          new_bin_pt  => dout_bin_pt,
          new_arith   => dout_arith,
          en_width    => en_width,
          en_bin_pt   => en_bin_pt,
          en_arith    => en_arith,
          quantization => quantization,
          overflow    => overflow,
          latency     => latency)
        port map (
          din => din,
          en => en,
          ce => ce,
          clr => clr,
          clk => clk,
          result => dout);
end  behavior;
library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity scale_9f61027ba4 is
  port (
    ip : in std_logic_vector((19 - 1) downto 0);
    op : out std_logic_vector((19 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end scale_9f61027ba4;


architecture behavior of scale_9f61027ba4 is
  signal ip_17_23: signed((19 - 1) downto 0);
begin
  ip_17_23 <= std_logic_vector_to_signed(ip);
  op <= signed_to_std_logic_vector(ip_17_23);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity reinterpret_9306b5127f is
  port (
    input_port : in std_logic_vector((18 - 1) downto 0);
    output_port : out std_logic_vector((18 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end reinterpret_9306b5127f;


architecture behavior of reinterpret_9306b5127f is
  signal input_port_1_40: unsigned((18 - 1) downto 0);
begin
  input_port_1_40 <= std_logic_vector_to_unsigned(input_port);
  output_port <= unsigned_to_std_logic_vector(input_port_1_40);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity constant_7b07120b87 is
  port (
    op : out std_logic_vector((7 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end constant_7b07120b87;


architecture behavior of constant_7b07120b87 is
begin
  op <= "1000000";
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity mux_fca786f2ff is
  port (
    sel : in std_logic_vector((1 - 1) downto 0);
    d0 : in std_logic_vector((36 - 1) downto 0);
    d1 : in std_logic_vector((36 - 1) downto 0);
    y : out std_logic_vector((36 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end mux_fca786f2ff;


architecture behavior of mux_fca786f2ff is
  signal sel_1_20: std_logic;
  signal d0_1_24: std_logic_vector((36 - 1) downto 0);
  signal d1_1_27: std_logic_vector((36 - 1) downto 0);
  type array_type_pipe_16_22 is array (0 to (1 - 1)) of std_logic_vector((36 - 1) downto 0);
  signal pipe_16_22: array_type_pipe_16_22 := (
    0 => "000000000000000000000000000000000000");
  signal pipe_16_22_front_din: std_logic_vector((36 - 1) downto 0);
  signal pipe_16_22_back: std_logic_vector((36 - 1) downto 0);
  signal pipe_16_22_push_front_pop_back_en: std_logic;
  signal sel_internal_2_1_convert: std_logic_vector((1 - 1) downto 0);
  signal unregy_join_6_1: std_logic_vector((36 - 1) downto 0);
begin
  sel_1_20 <= sel(0);
  d0_1_24 <= d0;
  d1_1_27 <= d1;
  pipe_16_22_back <= pipe_16_22(0);
  proc_pipe_16_22: process (clk)
  is
    variable i: integer;
  begin
    if (clk'event and (clk = '1')) then
      if ((ce = '1') and (pipe_16_22_push_front_pop_back_en = '1')) then
        pipe_16_22(0) <= pipe_16_22_front_din;
      end if;
    end if;
  end process proc_pipe_16_22;
  sel_internal_2_1_convert <= cast(std_logic_to_vector(sel_1_20), 0, 1, 0, xlUnsigned);
  proc_switch_6_1: process (d0_1_24, d1_1_27, sel_internal_2_1_convert)
  is
  begin
    case sel_internal_2_1_convert is 
      when "0" =>
        unregy_join_6_1 <= d0_1_24;
      when others =>
        unregy_join_6_1 <= d1_1_27;
    end case;
  end process proc_switch_6_1;
  pipe_16_22_front_din <= unregy_join_6_1;
  pipe_16_22_push_front_pop_back_en <= '1';
  y <= pipe_16_22_back;
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity relational_cd73dde7d1 is
  port (
    a : in std_logic_vector((7 - 1) downto 0);
    b : in std_logic_vector((7 - 1) downto 0);
    op : out std_logic_vector((1 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end relational_cd73dde7d1;


architecture behavior of relational_cd73dde7d1 is
  signal a_1_31: unsigned((7 - 1) downto 0);
  signal b_1_34: unsigned((7 - 1) downto 0);
  type array_type_op_mem_32_22 is array (0 to (1 - 1)) of boolean;
  signal op_mem_32_22: array_type_op_mem_32_22 := (
    0 => false);
  signal op_mem_32_22_front_din: boolean;
  signal op_mem_32_22_back: boolean;
  signal op_mem_32_22_push_front_pop_back_en: std_logic;
  signal result_18_3_rel: boolean;
begin
  a_1_31 <= std_logic_vector_to_unsigned(a);
  b_1_34 <= std_logic_vector_to_unsigned(b);
  op_mem_32_22_back <= op_mem_32_22(0);
  proc_op_mem_32_22: process (clk)
  is
    variable i: integer;
  begin
    if (clk'event and (clk = '1')) then
      if ((ce = '1') and (op_mem_32_22_push_front_pop_back_en = '1')) then
        op_mem_32_22(0) <= op_mem_32_22_front_din;
      end if;
    end if;
  end process proc_op_mem_32_22;
  result_18_3_rel <= a_1_31 > b_1_34;
  op_mem_32_22_front_din <= result_18_3_rel;
  op_mem_32_22_push_front_pop_back_en <= '1';
  op <= boolean_to_vector(op_mem_32_22_back);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity negate_06f4d445bc is
  port (
    ip : in std_logic_vector((18 - 1) downto 0);
    op : out std_logic_vector((18 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end negate_06f4d445bc;


architecture behavior of negate_06f4d445bc is
  signal ip_18_25: signed((18 - 1) downto 0);
  type array_type_op_mem_48_20 is array (0 to (1 - 1)) of unsigned((18 - 1) downto 0);
  signal op_mem_48_20: array_type_op_mem_48_20 := (
    0 => "000000000000000000");
  signal op_mem_48_20_front_din: unsigned((18 - 1) downto 0);
  signal op_mem_48_20_back: unsigned((18 - 1) downto 0);
  signal op_mem_48_20_push_front_pop_back_en: std_logic;
  signal cast_35_24: signed((19 - 1) downto 0);
  signal internal_ip_35_9_neg: signed((19 - 1) downto 0);
  signal internal_ip_join_30_1: signed((19 - 1) downto 0);
  signal cast_internal_ip_40_3_convert: unsigned((18 - 1) downto 0);
begin
  ip_18_25 <= std_logic_vector_to_signed(ip);
  op_mem_48_20_back <= op_mem_48_20(0);
  proc_op_mem_48_20: process (clk)
  is
    variable i: integer;
  begin
    if (clk'event and (clk = '1')) then
      if ((ce = '1') and (op_mem_48_20_push_front_pop_back_en = '1')) then
        op_mem_48_20(0) <= op_mem_48_20_front_din;
      end if;
    end if;
  end process proc_op_mem_48_20;
  cast_35_24 <= s2s_cast(ip_18_25, 17, 19, 17);
  internal_ip_35_9_neg <=  -cast_35_24;
  proc_if_30_1: process (internal_ip_35_9_neg)
  is
  begin
    if false then
      internal_ip_join_30_1 <= std_logic_vector_to_signed("0000000000000000000");
    else 
      internal_ip_join_30_1 <= internal_ip_35_9_neg;
    end if;
  end process proc_if_30_1;
  cast_internal_ip_40_3_convert <= s2u_cast(internal_ip_join_30_1, 17, 18, 17);
  op_mem_48_20_front_din <= cast_internal_ip_40_3_convert;
  op_mem_48_20_push_front_pop_back_en <= '1';
  op <= unsigned_to_std_logic_vector(op_mem_48_20_back);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity constant_180df391de is
  port (
    op : out std_logic_vector((7 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end constant_180df391de;


architecture behavior of constant_180df391de is
begin
  op <= "0000001";
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity constant_7244cd602b is
  port (
    op : out std_logic_vector((7 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end constant_7244cd602b;


architecture behavior of constant_7244cd602b is
begin
  op <= "0000000";
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity mux_1bef4ba0e4 is
  port (
    sel : in std_logic_vector((1 - 1) downto 0);
    d0 : in std_logic_vector((1 - 1) downto 0);
    d1 : in std_logic_vector((1 - 1) downto 0);
    y : out std_logic_vector((1 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end mux_1bef4ba0e4;


architecture behavior of mux_1bef4ba0e4 is
  signal sel_1_20: std_logic_vector((1 - 1) downto 0);
  signal d0_1_24: std_logic;
  signal d1_1_27: std_logic;
  signal unregy_join_6_1: std_logic;
begin
  sel_1_20 <= sel;
  d0_1_24 <= d0(0);
  d1_1_27 <= d1(0);
  proc_switch_6_1: process (d0_1_24, d1_1_27, sel_1_20)
  is
  begin
    case sel_1_20 is 
      when "0" =>
        unregy_join_6_1 <= d0_1_24;
      when others =>
        unregy_join_6_1 <= d1_1_27;
    end case;
  end process proc_switch_6_1;
  y <= std_logic_to_vector(unregy_join_6_1);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity relational_9a3978c602 is
  port (
    a : in std_logic_vector((7 - 1) downto 0);
    b : in std_logic_vector((7 - 1) downto 0);
    op : out std_logic_vector((1 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end relational_9a3978c602;


architecture behavior of relational_9a3978c602 is
  signal a_1_31: unsigned((7 - 1) downto 0);
  signal b_1_34: unsigned((7 - 1) downto 0);
  signal result_12_3_rel: boolean;
begin
  a_1_31 <= std_logic_vector_to_unsigned(a);
  b_1_34 <= std_logic_vector_to_unsigned(b);
  result_12_3_rel <= a_1_31 = b_1_34;
  op <= boolean_to_vector(result_12_3_rel);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity relational_23065a6aa3 is
  port (
    a : in std_logic_vector((7 - 1) downto 0);
    b : in std_logic_vector((7 - 1) downto 0);
    op : out std_logic_vector((1 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end relational_23065a6aa3;


architecture behavior of relational_23065a6aa3 is
  signal a_1_31: unsigned((7 - 1) downto 0);
  signal b_1_34: unsigned((7 - 1) downto 0);
  signal result_14_3_rel: boolean;
begin
  a_1_31 <= std_logic_vector_to_unsigned(a);
  b_1_34 <= std_logic_vector_to_unsigned(b);
  result_14_3_rel <= a_1_31 /= b_1_34;
  op <= boolean_to_vector(result_14_3_rel);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity mux_6f25c73c33 is
  port (
    sel : in std_logic_vector((1 - 1) downto 0);
    d0 : in std_logic_vector((6 - 1) downto 0);
    d1 : in std_logic_vector((6 - 1) downto 0);
    y : out std_logic_vector((6 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end mux_6f25c73c33;


architecture behavior of mux_6f25c73c33 is
  signal sel_1_20: std_logic_vector((1 - 1) downto 0);
  signal d0_1_24: std_logic_vector((6 - 1) downto 0);
  signal d1_1_27: std_logic_vector((6 - 1) downto 0);
  type array_type_pipe_16_22 is array (0 to (1 - 1)) of std_logic_vector((6 - 1) downto 0);
  signal pipe_16_22: array_type_pipe_16_22 := (
    0 => "000000");
  signal pipe_16_22_front_din: std_logic_vector((6 - 1) downto 0);
  signal pipe_16_22_back: std_logic_vector((6 - 1) downto 0);
  signal pipe_16_22_push_front_pop_back_en: std_logic;
  signal unregy_join_6_1: std_logic_vector((6 - 1) downto 0);
begin
  sel_1_20 <= sel;
  d0_1_24 <= d0;
  d1_1_27 <= d1;
  pipe_16_22_back <= pipe_16_22(0);
  proc_pipe_16_22: process (clk)
  is
    variable i: integer;
  begin
    if (clk'event and (clk = '1')) then
      if ((ce = '1') and (pipe_16_22_push_front_pop_back_en = '1')) then
        pipe_16_22(0) <= pipe_16_22_front_din;
      end if;
    end if;
  end process proc_pipe_16_22;
  proc_switch_6_1: process (d0_1_24, d1_1_27, sel_1_20)
  is
  begin
    case sel_1_20 is 
      when "0" =>
        unregy_join_6_1 <= d0_1_24;
      when others =>
        unregy_join_6_1 <= d1_1_27;
    end case;
  end process proc_switch_6_1;
  pipe_16_22_front_din <= unregy_join_6_1;
  pipe_16_22_push_front_pop_back_en <= '1';
  y <= pipe_16_22_back;
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity delay_0abb1eedfd is
  port (
    d : in std_logic_vector((6 - 1) downto 0);
    q : out std_logic_vector((6 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end delay_0abb1eedfd;


architecture behavior of delay_0abb1eedfd is
  signal d_1_22: std_logic_vector((6 - 1) downto 0);
begin
  d_1_22 <= d;
  q <= d_1_22;
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity delay_21355083c1 is
  port (
    d : in std_logic_vector((1 - 1) downto 0);
    q : out std_logic_vector((1 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end delay_21355083c1;


architecture behavior of delay_21355083c1 is
  signal d_1_22: std_logic_vector((1 - 1) downto 0);
begin
  d_1_22 <= d;
  q <= d_1_22;
end behavior;


-------------------------------------------------------------------
-- System Generator version 14.6 VHDL source file.
--
-- Copyright(C) 2013 by Xilinx, Inc.  All rights reserved.  This
-- text/file contains proprietary, confidential information of Xilinx,
-- Inc., is distributed under license from Xilinx, Inc., and may be used,
-- copied and/or disclosed only pursuant to the terms of a valid license
-- agreement with Xilinx, Inc.  Xilinx hereby grants you a license to use
-- this text/file solely for design, simulation, implementation and
-- creation of design files limited to Xilinx devices or technologies.
-- Use with non-Xilinx devices or technologies is expressly prohibited
-- and immediately terminates your license unless covered by a separate
-- agreement.
--
-- Xilinx is providing this design, code, or information "as is" solely
-- for use in developing programs and solutions for Xilinx devices.  By
-- providing this design, code, or information as one possible
-- implementation of this feature, application or standard, Xilinx is
-- making no representation that this implementation is free from any
-- claims of infringement.  You are responsible for obtaining any rights
-- you may require for your implementation.  Xilinx expressly disclaims
-- any warranty whatsoever with respect to the adequacy of the
-- implementation, including but not limited to warranties of
-- merchantability or fitness for a particular purpose.
--
-- Xilinx products are not intended for use in life support appliances,
-- devices, or systems.  Use in such applications is expressly prohibited.
--
-- Any modifications that are made to the source code are done at the user's
-- sole risk and will be unsupported.
--
-- This copyright and support notice must be retained as part of this
-- text at all times.  (c) Copyright 1995-2013 Xilinx, Inc.  All rights
-- reserved.
-------------------------------------------------------------------
-- synopsys translate_off
library XilinxCoreLib;
-- synopsys translate_on
library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.std_logic_arith.all;
use work.conv_pkg.all;
entity xlsprom_dist_c09f12_01 is
  generic (
    core_name0: string := "";
    addr_width: integer := 2;
    latency: integer := 0;
    c_width: integer := 12;
    c_address_width: integer := 4
  );
  port (
    addr: in std_logic_vector(addr_width - 1 downto 0);
    en: in std_logic_vector(0 downto 0);
    ce: in std_logic;
    clk: in std_logic;
    data: out std_logic_vector(c_width - 1 downto 0)
  );
end xlsprom_dist_c09f12_01 ;
architecture behavior of xlsprom_dist_c09f12_01 is
  component synth_reg
      generic (width       : integer;
               latency     : integer);
      port (i           : in std_logic_vector(width - 1 downto 0);
            ce      : in std_logic;
            clr     : in std_logic;
            clk     : in std_logic;
            o       : out std_logic_vector(width - 1 downto 0));
  end component;
  signal core_data_out: std_logic_vector(c_width - 1 downto 0);
  constant num_extra_addr_bits: integer := (c_address_width - addr_width);
  signal core_addr: std_logic_vector(c_address_width - 1 downto 0);
  signal core_ce: std_logic;
  component dmg_72_9ddb0dccfe86828e
    port (
      a: in std_logic_vector(c_address_width - 1 downto 0);
      spo: out std_logic_vector(c_width - 1 downto 0) 
    );
  end component;

  attribute syn_black_box of dmg_72_9ddb0dccfe86828e:
    component is true;
  attribute fpga_dont_touch of dmg_72_9ddb0dccfe86828e:
    component is "true";
  attribute box_type of dmg_72_9ddb0dccfe86828e:
    component  is "black_box";
  component dmg_72_60b1d930b1392bee
    port (
      a: in std_logic_vector(c_address_width - 1 downto 0);
      spo: out std_logic_vector(c_width - 1 downto 0) 
    );
  end component;

  attribute syn_black_box of dmg_72_60b1d930b1392bee:
    component is true;
  attribute fpga_dont_touch of dmg_72_60b1d930b1392bee:
    component is "true";
  attribute box_type of dmg_72_60b1d930b1392bee:
    component  is "black_box";
  component dmg_72_8cacf5ca230175f7
    port (
      a: in std_logic_vector(c_address_width - 1 downto 0);
      spo: out std_logic_vector(c_width - 1 downto 0) 
    );
  end component;

  attribute syn_black_box of dmg_72_8cacf5ca230175f7:
    component is true;
  attribute fpga_dont_touch of dmg_72_8cacf5ca230175f7:
    component is "true";
  attribute box_type of dmg_72_8cacf5ca230175f7:
    component  is "black_box";
  component dmg_72_31a1909e3929c7f7
    port (
      a: in std_logic_vector(c_address_width - 1 downto 0);
      clk: in std_logic;
      qspo_ce: in std_logic;
      qspo: out std_logic_vector(c_width - 1 downto 0)
    );
  end component;

  attribute syn_black_box of dmg_72_31a1909e3929c7f7:
    component is true;
  attribute fpga_dont_touch of dmg_72_31a1909e3929c7f7:
    component is "true";
  attribute box_type of dmg_72_31a1909e3929c7f7:
    component  is "black_box";
  component dmg_72_c09662d4202cd49a
    port (
      a: in std_logic_vector(c_address_width - 1 downto 0);
      clk: in std_logic;
      qspo_ce: in std_logic;
      qspo: out std_logic_vector(c_width - 1 downto 0)
    );
  end component;

  attribute syn_black_box of dmg_72_c09662d4202cd49a:
    component is true;
  attribute fpga_dont_touch of dmg_72_c09662d4202cd49a:
    component is "true";
  attribute box_type of dmg_72_c09662d4202cd49a:
    component  is "black_box";
  component dmg_72_8ff5c16d3b09b3bb
    port (
      a: in std_logic_vector(c_address_width - 1 downto 0);
      clk: in std_logic;
      qspo_ce: in std_logic;
      qspo: out std_logic_vector(c_width - 1 downto 0)
    );
  end component;

  attribute syn_black_box of dmg_72_8ff5c16d3b09b3bb:
    component is true;
  attribute fpga_dont_touch of dmg_72_8ff5c16d3b09b3bb:
    component is "true";
  attribute box_type of dmg_72_8ff5c16d3b09b3bb:
    component  is "black_box";
begin
  need_to_pad_addr: if num_extra_addr_bits > 0 generate
      core_addr(c_address_width - 1 downto addr_width) <= (others => '0');
    core_addr(addr_width - 1 downto 0) <= addr;
  end generate;
  no_need_to_pad_addr: if num_extra_addr_bits = 0 generate
    core_addr <= addr;
  end generate;
  core_ce <= ce and en(0);
  comp0: if ((core_name0 = "dmg_72_9ddb0dccfe86828e")) generate
    core_instance0: dmg_72_9ddb0dccfe86828e
      port map (
        a => core_addr,
        spo => core_data_out
      );
  end generate;
  comp1: if ((core_name0 = "dmg_72_60b1d930b1392bee")) generate
    core_instance1: dmg_72_60b1d930b1392bee
      port map (
        a => core_addr,
        spo => core_data_out
      );
  end generate;
  comp2: if ((core_name0 = "dmg_72_8cacf5ca230175f7")) generate
    core_instance2: dmg_72_8cacf5ca230175f7
      port map (
        a => core_addr,
        spo => core_data_out
      );
  end generate;
  comp3: if ((core_name0 = "dmg_72_31a1909e3929c7f7")) generate
    core_instance3: dmg_72_31a1909e3929c7f7
      port map (
        a => core_addr,
        clk => clk,
        qspo_ce => core_ce,
        qspo => core_data_out
      );
  end generate;
  comp4: if ((core_name0 = "dmg_72_c09662d4202cd49a")) generate
    core_instance4: dmg_72_c09662d4202cd49a
      port map (
        a => core_addr,
        clk => clk,
        qspo_ce => core_ce,
        qspo => core_data_out
      );
  end generate;
  comp5: if ((core_name0 = "dmg_72_8ff5c16d3b09b3bb")) generate
    core_instance5: dmg_72_8ff5c16d3b09b3bb
      port map (
        a => core_addr,
        clk => clk,
        qspo_ce => core_ce,
        qspo => core_data_out
      );
  end generate;
  latency_test: if (latency > 1) generate
    reg: synth_reg
      generic map (
        width => c_width,
        latency => latency - 1
      )
      port map (
        i => core_data_out,
        ce => core_ce,
        clr => '0',
        clk => clk,
        o => data
      );
  end generate;
  latency_0_or_1: if (latency <= 1)
  generate
    data <= core_data_out;
  end generate;
end  behavior;
library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity constant_09b32c3b22 is
  port (
    op : out std_logic_vector((7 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end constant_09b32c3b22;


architecture behavior of constant_09b32c3b22 is
begin
  op <= "1000101";
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity concat_c615d93998 is
  port (
    in0 : in std_logic_vector((20 - 1) downto 0);
    in1 : in std_logic_vector((1 - 1) downto 0);
    y : out std_logic_vector((21 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end concat_c615d93998;


architecture behavior of concat_c615d93998 is
  signal in0_1_23: unsigned((20 - 1) downto 0);
  signal in1_1_27: unsigned((1 - 1) downto 0);
  signal y_2_1_concat: unsigned((21 - 1) downto 0);
begin
  in0_1_23 <= std_logic_vector_to_unsigned(in0);
  in1_1_27 <= std_logic_vector_to_unsigned(in1);
  y_2_1_concat <= std_logic_vector_to_unsigned(unsigned_to_std_logic_vector(in0_1_23) & unsigned_to_std_logic_vector(in1_1_27));
  y <= unsigned_to_std_logic_vector(y_2_1_concat);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity reinterpret_4a8cbc85ce is
  port (
    input_port : in std_logic_vector((20 - 1) downto 0);
    output_port : out std_logic_vector((20 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end reinterpret_4a8cbc85ce;


architecture behavior of reinterpret_4a8cbc85ce is
  signal input_port_1_40: signed((20 - 1) downto 0);
  signal output_port_5_5_force: unsigned((20 - 1) downto 0);
begin
  input_port_1_40 <= std_logic_vector_to_signed(input_port);
  output_port_5_5_force <= signed_to_unsigned(input_port_1_40);
  output_port <= unsigned_to_std_logic_vector(output_port_5_5_force);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity addsub_8ea27c0b26 is
  port (
    a : in std_logic_vector((21 - 1) downto 0);
    b : in std_logic_vector((19 - 1) downto 0);
    s : out std_logic_vector((18 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end addsub_8ea27c0b26;


architecture behavior of addsub_8ea27c0b26 is
  signal a_17_32: signed((21 - 1) downto 0);
  signal b_17_35: unsigned((19 - 1) downto 0);
  type array_type_op_mem_91_20 is array (0 to (2 - 1)) of signed((18 - 1) downto 0);
  signal op_mem_91_20: array_type_op_mem_91_20 := (
    "000000000000000000",
    "000000000000000000");
  signal op_mem_91_20_front_din: signed((18 - 1) downto 0);
  signal op_mem_91_20_back: signed((18 - 1) downto 0);
  signal op_mem_91_20_push_front_pop_back_en: std_logic;
  type array_type_cout_mem_92_22 is array (0 to (2 - 1)) of unsigned((1 - 1) downto 0);
  signal cout_mem_92_22: array_type_cout_mem_92_22 := (
    "0",
    "0");
  signal cout_mem_92_22_front_din: unsigned((1 - 1) downto 0);
  signal cout_mem_92_22_back: unsigned((1 - 1) downto 0);
  signal cout_mem_92_22_push_front_pop_back_en: std_logic;
  signal prev_mode_93_22_next: unsigned((3 - 1) downto 0);
  signal prev_mode_93_22: unsigned((3 - 1) downto 0);
  signal prev_mode_93_22_reg_i: std_logic_vector((3 - 1) downto 0);
  signal prev_mode_93_22_reg_o: std_logic_vector((3 - 1) downto 0);
  signal cast_69_18: signed((22 - 1) downto 0);
  signal cast_69_22: signed((22 - 1) downto 0);
  signal internal_s_69_5_addsub: signed((22 - 1) downto 0);
  signal cast_internal_s_83_3_convert: signed((18 - 1) downto 0);
begin
  a_17_32 <= std_logic_vector_to_signed(a);
  b_17_35 <= std_logic_vector_to_unsigned(b);
  op_mem_91_20_back <= op_mem_91_20(1);
  proc_op_mem_91_20: process (clk)
  is
    variable i: integer;
  begin
    if (clk'event and (clk = '1')) then
      if ((ce = '1') and (op_mem_91_20_push_front_pop_back_en = '1')) then
        for i in 1 downto 1 loop 
          op_mem_91_20(i) <= op_mem_91_20(i-1);
        end loop;
        op_mem_91_20(0) <= op_mem_91_20_front_din;
      end if;
    end if;
  end process proc_op_mem_91_20;
  cout_mem_92_22_back <= cout_mem_92_22(1);
  proc_cout_mem_92_22: process (clk)
  is
    variable i_x_000000: integer;
  begin
    if (clk'event and (clk = '1')) then
      if ((ce = '1') and (cout_mem_92_22_push_front_pop_back_en = '1')) then
        for i_x_000000 in 1 downto 1 loop 
          cout_mem_92_22(i_x_000000) <= cout_mem_92_22(i_x_000000-1);
        end loop;
        cout_mem_92_22(0) <= cout_mem_92_22_front_din;
      end if;
    end if;
  end process proc_cout_mem_92_22;
  prev_mode_93_22_reg_i <= unsigned_to_std_logic_vector(prev_mode_93_22_next);
  prev_mode_93_22 <= std_logic_vector_to_unsigned(prev_mode_93_22_reg_o);
  prev_mode_93_22_reg_inst: entity work.synth_reg_w_init
    generic map (
      init_index => 2, 
      init_value => b"010", 
      latency => 1, 
      width => 3)
    port map (
      ce => ce, 
      clk => clk, 
      clr => clr, 
      i => prev_mode_93_22_reg_i, 
      o => prev_mode_93_22_reg_o);
  cast_69_18 <= s2s_cast(a_17_32, 19, 22, 19);
  cast_69_22 <= u2s_cast(b_17_35, 19, 22, 19);
  internal_s_69_5_addsub <= cast_69_18 + cast_69_22;
  cast_internal_s_83_3_convert <= s2s_cast(internal_s_69_5_addsub, 19, 18, 17);
  op_mem_91_20_front_din <= cast_internal_s_83_3_convert;
  op_mem_91_20_push_front_pop_back_en <= '1';
  cout_mem_92_22_front_din <= std_logic_vector_to_unsigned("0");
  cout_mem_92_22_push_front_pop_back_en <= '1';
  prev_mode_93_22_next <= std_logic_vector_to_unsigned("000");
  s <= signed_to_std_logic_vector(op_mem_91_20_back);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity constant_4709ea49b5 is
  port (
    op : out std_logic_vector((19 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end constant_4709ea49b5;


architecture behavior of constant_4709ea49b5 is
begin
  op <= "0000000000000000001";
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity reinterpret_d357e69fa3 is
  port (
    input_port : in std_logic_vector((21 - 1) downto 0);
    output_port : out std_logic_vector((21 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end reinterpret_d357e69fa3;


architecture behavior of reinterpret_d357e69fa3 is
  signal input_port_1_40: unsigned((21 - 1) downto 0);
  signal output_port_5_5_force: signed((21 - 1) downto 0);
begin
  input_port_1_40 <= std_logic_vector_to_unsigned(input_port);
  output_port_5_5_force <= unsigned_to_signed(input_port_1_40);
  output_port <= signed_to_std_logic_vector(output_port_5_5_force);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity reinterpret_d2180c9169 is
  port (
    input_port : in std_logic_vector((19 - 1) downto 0);
    output_port : out std_logic_vector((19 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end reinterpret_d2180c9169;


architecture behavior of reinterpret_d2180c9169 is
  signal input_port_1_40: unsigned((19 - 1) downto 0);
begin
  input_port_1_40 <= std_logic_vector_to_unsigned(input_port);
  output_port <= unsigned_to_std_logic_vector(input_port_1_40);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity logical_938d99ac11 is
  port (
    d0 : in std_logic_vector((1 - 1) downto 0);
    d1 : in std_logic_vector((1 - 1) downto 0);
    y : out std_logic_vector((1 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end logical_938d99ac11;


architecture behavior of logical_938d99ac11 is
  signal d0_1_24: std_logic_vector((1 - 1) downto 0);
  signal d1_1_27: std_logic_vector((1 - 1) downto 0);
  signal fully_2_1_bit: std_logic_vector((1 - 1) downto 0);
begin
  d0_1_24 <= d0;
  d1_1_27 <= d1;
  fully_2_1_bit <= d0_1_24 and d1_1_27;
  y <= fully_2_1_bit;
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity logical_89dc141487 is
  port (
    d0 : in std_logic_vector((1 - 1) downto 0);
    d1 : in std_logic_vector((1 - 1) downto 0);
    y : out std_logic_vector((1 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end logical_89dc141487;


architecture behavior of logical_89dc141487 is
  signal d0_1_24: std_logic;
  signal d1_1_27: std_logic;
  type array_type_latency_pipe_5_26 is array (0 to (2 - 1)) of std_logic;
  signal latency_pipe_5_26: array_type_latency_pipe_5_26 := (
    '0',
    '0');
  signal latency_pipe_5_26_front_din: std_logic;
  signal latency_pipe_5_26_back: std_logic;
  signal latency_pipe_5_26_push_front_pop_back_en: std_logic;
  signal bit_2_27: std_logic;
  signal fully_2_1_bitnot: std_logic;
begin
  d0_1_24 <= d0(0);
  d1_1_27 <= d1(0);
  latency_pipe_5_26_back <= latency_pipe_5_26(1);
  proc_latency_pipe_5_26: process (clk)
  is
    variable i: integer;
  begin
    if (clk'event and (clk = '1')) then
      if ((ce = '1') and (latency_pipe_5_26_push_front_pop_back_en = '1')) then
        for i in 1 downto 1 loop 
          latency_pipe_5_26(i) <= latency_pipe_5_26(i-1);
        end loop;
        latency_pipe_5_26(0) <= latency_pipe_5_26_front_din;
      end if;
    end if;
  end process proc_latency_pipe_5_26;
  bit_2_27 <= d0_1_24 and d1_1_27;
  fully_2_1_bitnot <= not bit_2_27;
  latency_pipe_5_26_front_din <= fully_2_1_bitnot;
  latency_pipe_5_26_push_front_pop_back_en <= '1';
  y <= std_logic_to_vector(latency_pipe_5_26_back);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity logical_a6d07705dd is
  port (
    d0 : in std_logic_vector((1 - 1) downto 0);
    d1 : in std_logic_vector((1 - 1) downto 0);
    d2 : in std_logic_vector((1 - 1) downto 0);
    d3 : in std_logic_vector((1 - 1) downto 0);
    y : out std_logic_vector((1 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end logical_a6d07705dd;


architecture behavior of logical_a6d07705dd is
  signal d0_1_24: std_logic;
  signal d1_1_27: std_logic;
  signal d2_1_30: std_logic;
  signal d3_1_33: std_logic;
  signal fully_2_1_bit: std_logic;
begin
  d0_1_24 <= d0(0);
  d1_1_27 <= d1(0);
  d2_1_30 <= d2(0);
  d3_1_33 <= d3(0);
  fully_2_1_bit <= d0_1_24 or d1_1_27 or d2_1_30 or d3_1_33;
  y <= std_logic_to_vector(fully_2_1_bit);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity mux_28159dbdb9 is
  port (
    sel : in std_logic_vector((1 - 1) downto 0);
    d0 : in std_logic_vector((19 - 1) downto 0);
    d1 : in std_logic_vector((19 - 1) downto 0);
    y : out std_logic_vector((20 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end mux_28159dbdb9;


architecture behavior of mux_28159dbdb9 is
  signal sel_1_20: std_logic;
  signal d0_1_24: std_logic_vector((19 - 1) downto 0);
  signal d1_1_27: std_logic_vector((19 - 1) downto 0);
  type array_type_pipe_16_22 is array (0 to (2 - 1)) of std_logic_vector((20 - 1) downto 0);
  signal pipe_16_22: array_type_pipe_16_22 := (
    "00000000000000000000",
    "00000000000000000000");
  signal pipe_16_22_front_din: std_logic_vector((20 - 1) downto 0);
  signal pipe_16_22_back: std_logic_vector((20 - 1) downto 0);
  signal pipe_16_22_push_front_pop_back_en: std_logic;
  signal sel_internal_2_1_convert: std_logic_vector((1 - 1) downto 0);
  signal unregy_join_6_1: std_logic_vector((20 - 1) downto 0);
begin
  sel_1_20 <= sel(0);
  d0_1_24 <= d0;
  d1_1_27 <= d1;
  pipe_16_22_back <= pipe_16_22(1);
  proc_pipe_16_22: process (clk)
  is
    variable i: integer;
  begin
    if (clk'event and (clk = '1')) then
      if ((ce = '1') and (pipe_16_22_push_front_pop_back_en = '1')) then
        for i in 1 downto 1 loop 
          pipe_16_22(i) <= pipe_16_22(i-1);
        end loop;
        pipe_16_22(0) <= pipe_16_22_front_din;
      end if;
    end if;
  end process proc_pipe_16_22;
  sel_internal_2_1_convert <= cast(std_logic_to_vector(sel_1_20), 0, 1, 0, xlUnsigned);
  proc_switch_6_1: process (d0_1_24, d1_1_27, sel_internal_2_1_convert)
  is
  begin
    case sel_internal_2_1_convert is 
      when "0" =>
        unregy_join_6_1 <= cast(d0_1_24, 17, 20, 18, xlSigned);
      when others =>
        unregy_join_6_1 <= cast(d1_1_27, 18, 20, 18, xlSigned);
    end case;
  end process proc_switch_6_1;
  pipe_16_22_front_din <= unregy_join_6_1;
  pipe_16_22_push_front_pop_back_en <= '1';
  y <= pipe_16_22_back;
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity delay_aab7b18c27 is
  port (
    d : in std_logic_vector((1 - 1) downto 0);
    q : out std_logic_vector((1 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end delay_aab7b18c27;


architecture behavior of delay_aab7b18c27 is
  signal d_1_22: std_logic;
  type array_type_op_mem_20_24 is array (0 to (6 - 1)) of std_logic;
  signal op_mem_20_24: array_type_op_mem_20_24 := (
    '0',
    '0',
    '0',
    '0',
    '0',
    '0');
  signal op_mem_20_24_front_din: std_logic;
  signal op_mem_20_24_back: std_logic;
  signal op_mem_20_24_push_front_pop_back_en: std_logic;
begin
  d_1_22 <= d(0);
  op_mem_20_24_back <= op_mem_20_24(5);
  proc_op_mem_20_24: process (clk)
  is
    variable i: integer;
  begin
    if (clk'event and (clk = '1')) then
      if ((ce = '1') and (op_mem_20_24_push_front_pop_back_en = '1')) then
        for i in 5 downto 1 loop 
          op_mem_20_24(i) <= op_mem_20_24(i-1);
        end loop;
        op_mem_20_24(0) <= op_mem_20_24_front_din;
      end if;
    end if;
  end process proc_op_mem_20_24;
  op_mem_20_24_front_din <= d_1_22;
  op_mem_20_24_push_front_pop_back_en <= '1';
  q <= std_logic_to_vector(op_mem_20_24_back);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity logical_444d3f5046 is
  port (
    d0 : in std_logic_vector((1 - 1) downto 0);
    d1 : in std_logic_vector((1 - 1) downto 0);
    y : out std_logic_vector((1 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end logical_444d3f5046;


architecture behavior of logical_444d3f5046 is
  signal d0_1_24: std_logic;
  signal d1_1_27: std_logic;
  type array_type_latency_pipe_5_26 is array (0 to (1 - 1)) of std_logic;
  signal latency_pipe_5_26: array_type_latency_pipe_5_26 := (
    0 => '0');
  signal latency_pipe_5_26_front_din: std_logic;
  signal latency_pipe_5_26_back: std_logic;
  signal latency_pipe_5_26_push_front_pop_back_en: std_logic;
  signal fully_2_1_bit: std_logic;
begin
  d0_1_24 <= d0(0);
  d1_1_27 <= d1(0);
  latency_pipe_5_26_back <= latency_pipe_5_26(0);
  proc_latency_pipe_5_26: process (clk)
  is
    variable i: integer;
  begin
    if (clk'event and (clk = '1')) then
      if ((ce = '1') and (latency_pipe_5_26_push_front_pop_back_en = '1')) then
        latency_pipe_5_26(0) <= latency_pipe_5_26_front_din;
      end if;
    end if;
  end process proc_latency_pipe_5_26;
  fully_2_1_bit <= d0_1_24 or d1_1_27;
  latency_pipe_5_26_front_din <= fully_2_1_bit;
  latency_pipe_5_26_push_front_pop_back_en <= '1';
  y <= std_logic_to_vector(latency_pipe_5_26_back);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity mux_4bb6f691f7 is
  port (
    sel : in std_logic_vector((1 - 1) downto 0);
    d0 : in std_logic_vector((36 - 1) downto 0);
    d1 : in std_logic_vector((36 - 1) downto 0);
    y : out std_logic_vector((36 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end mux_4bb6f691f7;


architecture behavior of mux_4bb6f691f7 is
  signal sel_1_20: std_logic_vector((1 - 1) downto 0);
  signal d0_1_24: std_logic_vector((36 - 1) downto 0);
  signal d1_1_27: std_logic_vector((36 - 1) downto 0);
  type array_type_pipe_16_22 is array (0 to (1 - 1)) of std_logic_vector((36 - 1) downto 0);
  signal pipe_16_22: array_type_pipe_16_22 := (
    0 => "000000000000000000000000000000000000");
  signal pipe_16_22_front_din: std_logic_vector((36 - 1) downto 0);
  signal pipe_16_22_back: std_logic_vector((36 - 1) downto 0);
  signal pipe_16_22_push_front_pop_back_en: std_logic;
  signal unregy_join_6_1: std_logic_vector((36 - 1) downto 0);
begin
  sel_1_20 <= sel;
  d0_1_24 <= d0;
  d1_1_27 <= d1;
  pipe_16_22_back <= pipe_16_22(0);
  proc_pipe_16_22: process (clk)
  is
    variable i: integer;
  begin
    if (clk'event and (clk = '1')) then
      if ((ce = '1') and (pipe_16_22_push_front_pop_back_en = '1')) then
        pipe_16_22(0) <= pipe_16_22_front_din;
      end if;
    end if;
  end process proc_pipe_16_22;
  proc_switch_6_1: process (d0_1_24, d1_1_27, sel_1_20)
  is
  begin
    case sel_1_20 is 
      when "0" =>
        unregy_join_6_1 <= d0_1_24;
      when others =>
        unregy_join_6_1 <= d1_1_27;
    end case;
  end process proc_switch_6_1;
  pipe_16_22_front_din <= unregy_join_6_1;
  pipe_16_22_push_front_pop_back_en <= '1';
  y <= pipe_16_22_back;
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity counter_7888581f80 is
  port (
    rst : in std_logic_vector((1 - 1) downto 0);
    op : out std_logic_vector((6 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end counter_7888581f80;


architecture behavior of counter_7888581f80 is
  signal rst_1_40: boolean;
  signal count_reg_20_23: unsigned((6 - 1) downto 0) := "000000";
  signal count_reg_20_23_rst: std_logic;
  signal bool_44_4: boolean;
  signal count_reg_join_44_1: unsigned((7 - 1) downto 0);
  signal count_reg_join_44_1_rst: std_logic;
  signal rst_limit_join_44_1: boolean;
begin
  rst_1_40 <= ((rst) = "1");
  proc_count_reg_20_23: process (clk)
  is
  begin
    if (clk'event and (clk = '1')) then
      if ((ce = '1') and (count_reg_20_23_rst = '1')) then
        count_reg_20_23 <= "000000";
      elsif (ce = '1') then 
        count_reg_20_23 <= count_reg_20_23 + std_logic_vector_to_unsigned("000001");
      end if;
    end if;
  end process proc_count_reg_20_23;
  bool_44_4 <= rst_1_40 or false;
  proc_if_44_1: process (bool_44_4, count_reg_20_23)
  is
  begin
    if bool_44_4 then
      count_reg_join_44_1_rst <= '1';
    else 
      count_reg_join_44_1_rst <= '0';
    end if;
    if bool_44_4 then
      rst_limit_join_44_1 <= false;
    else 
      rst_limit_join_44_1 <= false;
    end if;
  end process proc_if_44_1;
  count_reg_20_23_rst <= count_reg_join_44_1_rst;
  op <= unsigned_to_std_logic_vector(count_reg_20_23);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity delay_fa2be75f6e is
  port (
    d : in std_logic_vector((18 - 1) downto 0);
    q : out std_logic_vector((18 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end delay_fa2be75f6e;


architecture behavior of delay_fa2be75f6e is
  signal d_1_22: std_logic_vector((18 - 1) downto 0);
  type array_type_op_mem_20_24 is array (0 to (10 - 1)) of std_logic_vector((18 - 1) downto 0);
  signal op_mem_20_24: array_type_op_mem_20_24 := (
    "000000000000000000",
    "000000000000000000",
    "000000000000000000",
    "000000000000000000",
    "000000000000000000",
    "000000000000000000",
    "000000000000000000",
    "000000000000000000",
    "000000000000000000",
    "000000000000000000");
  signal op_mem_20_24_front_din: std_logic_vector((18 - 1) downto 0);
  signal op_mem_20_24_back: std_logic_vector((18 - 1) downto 0);
  signal op_mem_20_24_push_front_pop_back_en: std_logic;
begin
  d_1_22 <= d;
  op_mem_20_24_back <= op_mem_20_24(9);
  proc_op_mem_20_24: process (clk)
  is
    variable i: integer;
  begin
    if (clk'event and (clk = '1')) then
      if ((ce = '1') and (op_mem_20_24_push_front_pop_back_en = '1')) then
        for i in 9 downto 1 loop 
          op_mem_20_24(i) <= op_mem_20_24(i-1);
        end loop;
        op_mem_20_24(0) <= op_mem_20_24_front_din;
      end if;
    end if;
  end process proc_op_mem_20_24;
  op_mem_20_24_front_din <= d_1_22;
  op_mem_20_24_push_front_pop_back_en <= '1';
  q <= op_mem_20_24_back;
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity delay_5b3ce5f2ae is
  port (
    d : in std_logic_vector((1 - 1) downto 0);
    q : out std_logic_vector((1 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end delay_5b3ce5f2ae;


architecture behavior of delay_5b3ce5f2ae is
  signal d_1_22: std_logic_vector((1 - 1) downto 0);
  type array_type_op_mem_20_24 is array (0 to (6 - 1)) of std_logic_vector((1 - 1) downto 0);
  signal op_mem_20_24: array_type_op_mem_20_24 := (
    "0",
    "0",
    "0",
    "0",
    "0",
    "0");
  signal op_mem_20_24_front_din: std_logic_vector((1 - 1) downto 0);
  signal op_mem_20_24_back: std_logic_vector((1 - 1) downto 0);
  signal op_mem_20_24_push_front_pop_back_en: std_logic;
begin
  d_1_22 <= d;
  op_mem_20_24_back <= op_mem_20_24(5);
  proc_op_mem_20_24: process (clk)
  is
    variable i: integer;
  begin
    if (clk'event and (clk = '1')) then
      if ((ce = '1') and (op_mem_20_24_push_front_pop_back_en = '1')) then
        for i in 5 downto 1 loop 
          op_mem_20_24(i) <= op_mem_20_24(i-1);
        end loop;
        op_mem_20_24(0) <= op_mem_20_24_front_din;
      end if;
    end if;
  end process proc_op_mem_20_24;
  op_mem_20_24_front_din <= d_1_22;
  op_mem_20_24_push_front_pop_back_en <= '1';
  q <= op_mem_20_24_back;
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity delay_4217913c13 is
  port (
    d : in std_logic_vector((18 - 1) downto 0);
    q : out std_logic_vector((18 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end delay_4217913c13;


architecture behavior of delay_4217913c13 is
  signal d_1_22: std_logic_vector((18 - 1) downto 0);
  type array_type_op_mem_20_24 is array (0 to (6 - 1)) of std_logic_vector((18 - 1) downto 0);
  signal op_mem_20_24: array_type_op_mem_20_24 := (
    "000000000000000000",
    "000000000000000000",
    "000000000000000000",
    "000000000000000000",
    "000000000000000000",
    "000000000000000000");
  signal op_mem_20_24_front_din: std_logic_vector((18 - 1) downto 0);
  signal op_mem_20_24_back: std_logic_vector((18 - 1) downto 0);
  signal op_mem_20_24_push_front_pop_back_en: std_logic;
begin
  d_1_22 <= d;
  op_mem_20_24_back <= op_mem_20_24(5);
  proc_op_mem_20_24: process (clk)
  is
    variable i: integer;
  begin
    if (clk'event and (clk = '1')) then
      if ((ce = '1') and (op_mem_20_24_push_front_pop_back_en = '1')) then
        for i in 5 downto 1 loop 
          op_mem_20_24(i) <= op_mem_20_24(i-1);
        end loop;
        op_mem_20_24(0) <= op_mem_20_24_front_din;
      end if;
    end if;
  end process proc_op_mem_20_24;
  op_mem_20_24_front_din <= d_1_22;
  op_mem_20_24_push_front_pop_back_en <= '1';
  q <= op_mem_20_24_back;
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity delay_328e8ebbb5 is
  port (
    d : in std_logic_vector((18 - 1) downto 0);
    q : out std_logic_vector((18 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end delay_328e8ebbb5;


architecture behavior of delay_328e8ebbb5 is
  signal d_1_22: std_logic_vector((18 - 1) downto 0);
  type array_type_op_mem_20_24 is array (0 to (3 - 1)) of std_logic_vector((18 - 1) downto 0);
  signal op_mem_20_24: array_type_op_mem_20_24 := (
    "000000000000000000",
    "000000000000000000",
    "000000000000000000");
  signal op_mem_20_24_front_din: std_logic_vector((18 - 1) downto 0);
  signal op_mem_20_24_back: std_logic_vector((18 - 1) downto 0);
  signal op_mem_20_24_push_front_pop_back_en: std_logic;
begin
  d_1_22 <= d;
  op_mem_20_24_back <= op_mem_20_24(2);
  proc_op_mem_20_24: process (clk)
  is
    variable i: integer;
  begin
    if (clk'event and (clk = '1')) then
      if ((ce = '1') and (op_mem_20_24_push_front_pop_back_en = '1')) then
        for i in 2 downto 1 loop 
          op_mem_20_24(i) <= op_mem_20_24(i-1);
        end loop;
        op_mem_20_24(0) <= op_mem_20_24_front_din;
      end if;
    end if;
  end process proc_op_mem_20_24;
  op_mem_20_24_front_din <= d_1_22;
  op_mem_20_24_push_front_pop_back_en <= '1';
  q <= op_mem_20_24_back;
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity delay_fa260f7d22 is
  port (
    d : in std_logic_vector((1 - 1) downto 0);
    q : out std_logic_vector((1 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end delay_fa260f7d22;


architecture behavior of delay_fa260f7d22 is
  signal d_1_22: std_logic;
  type array_type_op_mem_20_24 is array (0 to (7 - 1)) of std_logic;
  signal op_mem_20_24: array_type_op_mem_20_24 := (
    '0',
    '0',
    '0',
    '0',
    '0',
    '0',
    '0');
  signal op_mem_20_24_front_din: std_logic;
  signal op_mem_20_24_back: std_logic;
  signal op_mem_20_24_push_front_pop_back_en: std_logic;
begin
  d_1_22 <= d(0);
  op_mem_20_24_back <= op_mem_20_24(6);
  proc_op_mem_20_24: process (clk)
  is
    variable i: integer;
  begin
    if (clk'event and (clk = '1')) then
      if ((ce = '1') and (op_mem_20_24_push_front_pop_back_en = '1')) then
        for i in 6 downto 1 loop 
          op_mem_20_24(i) <= op_mem_20_24(i-1);
        end loop;
        op_mem_20_24(0) <= op_mem_20_24_front_din;
      end if;
    end if;
  end process proc_op_mem_20_24;
  op_mem_20_24_front_din <= d_1_22;
  op_mem_20_24_push_front_pop_back_en <= '1';
  q <= std_logic_to_vector(op_mem_20_24_back);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity mux_30e9ca90db is
  port (
    sel : in std_logic_vector((1 - 1) downto 0);
    d0 : in std_logic_vector((18 - 1) downto 0);
    d1 : in std_logic_vector((18 - 1) downto 0);
    y : out std_logic_vector((18 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end mux_30e9ca90db;


architecture behavior of mux_30e9ca90db is
  signal sel_1_20: std_logic_vector((1 - 1) downto 0);
  signal d0_1_24: std_logic_vector((18 - 1) downto 0);
  signal d1_1_27: std_logic_vector((18 - 1) downto 0);
  type array_type_pipe_16_22 is array (0 to (7 - 1)) of std_logic_vector((18 - 1) downto 0);
  signal pipe_16_22: array_type_pipe_16_22 := (
    "000000000000000000",
    "000000000000000000",
    "000000000000000000",
    "000000000000000000",
    "000000000000000000",
    "000000000000000000",
    "000000000000000000");
  signal pipe_16_22_front_din: std_logic_vector((18 - 1) downto 0);
  signal pipe_16_22_back: std_logic_vector((18 - 1) downto 0);
  signal pipe_16_22_push_front_pop_back_en: std_logic;
  signal unregy_join_6_1: std_logic_vector((18 - 1) downto 0);
begin
  sel_1_20 <= sel;
  d0_1_24 <= d0;
  d1_1_27 <= d1;
  pipe_16_22_back <= pipe_16_22(6);
  proc_pipe_16_22: process (clk)
  is
    variable i: integer;
  begin
    if (clk'event and (clk = '1')) then
      if ((ce = '1') and (pipe_16_22_push_front_pop_back_en = '1')) then
        for i in 6 downto 1 loop 
          pipe_16_22(i) <= pipe_16_22(i-1);
        end loop;
        pipe_16_22(0) <= pipe_16_22_front_din;
      end if;
    end if;
  end process proc_pipe_16_22;
  proc_switch_6_1: process (d0_1_24, d1_1_27, sel_1_20)
  is
  begin
    case sel_1_20 is 
      when "0" =>
        unregy_join_6_1 <= d0_1_24;
      when others =>
        unregy_join_6_1 <= d1_1_27;
    end case;
  end process proc_switch_6_1;
  pipe_16_22_front_din <= unregy_join_6_1;
  pipe_16_22_push_front_pop_back_en <= '1';
  y <= pipe_16_22_back;
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity mux_181e58d842 is
  port (
    sel : in std_logic_vector((1 - 1) downto 0);
    d0 : in std_logic_vector((18 - 1) downto 0);
    d1 : in std_logic_vector((18 - 1) downto 0);
    y : out std_logic_vector((18 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end mux_181e58d842;


architecture behavior of mux_181e58d842 is
  signal sel_1_20: std_logic_vector((1 - 1) downto 0);
  signal d0_1_24: std_logic_vector((18 - 1) downto 0);
  signal d1_1_27: std_logic_vector((18 - 1) downto 0);
  type array_type_pipe_16_22 is array (0 to (1 - 1)) of std_logic_vector((18 - 1) downto 0);
  signal pipe_16_22: array_type_pipe_16_22 := (
    0 => "000000000000000000");
  signal pipe_16_22_front_din: std_logic_vector((18 - 1) downto 0);
  signal pipe_16_22_back: std_logic_vector((18 - 1) downto 0);
  signal pipe_16_22_push_front_pop_back_en: std_logic;
  signal unregy_join_6_1: std_logic_vector((18 - 1) downto 0);
begin
  sel_1_20 <= sel;
  d0_1_24 <= d0;
  d1_1_27 <= d1;
  pipe_16_22_back <= pipe_16_22(0);
  proc_pipe_16_22: process (clk)
  is
    variable i: integer;
  begin
    if (clk'event and (clk = '1')) then
      if ((ce = '1') and (pipe_16_22_push_front_pop_back_en = '1')) then
        pipe_16_22(0) <= pipe_16_22_front_din;
      end if;
    end if;
  end process proc_pipe_16_22;
  proc_switch_6_1: process (d0_1_24, d1_1_27, sel_1_20)
  is
  begin
    case sel_1_20 is 
      when "0" =>
        unregy_join_6_1 <= d0_1_24;
      when others =>
        unregy_join_6_1 <= d1_1_27;
    end case;
  end process proc_switch_6_1;
  pipe_16_22_front_din <= unregy_join_6_1;
  pipe_16_22_push_front_pop_back_en <= '1';
  y <= pipe_16_22_back;
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity negate_293ec41b50 is
  port (
    ip : in std_logic_vector((18 - 1) downto 0);
    op : out std_logic_vector((19 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end negate_293ec41b50;


architecture behavior of negate_293ec41b50 is
  signal ip_18_25: signed((18 - 1) downto 0);
  type array_type_op_mem_48_20 is array (0 to (1 - 1)) of signed((19 - 1) downto 0);
  signal op_mem_48_20: array_type_op_mem_48_20 := (
    0 => "0000000000000000000");
  signal op_mem_48_20_front_din: signed((19 - 1) downto 0);
  signal op_mem_48_20_back: signed((19 - 1) downto 0);
  signal op_mem_48_20_push_front_pop_back_en: std_logic;
  signal cast_35_24: signed((19 - 1) downto 0);
  signal internal_ip_35_9_neg: signed((19 - 1) downto 0);
  signal internal_ip_join_30_1: signed((19 - 1) downto 0);
begin
  ip_18_25 <= std_logic_vector_to_signed(ip);
  op_mem_48_20_back <= op_mem_48_20(0);
  proc_op_mem_48_20: process (clk)
  is
    variable i: integer;
  begin
    if (clk'event and (clk = '1')) then
      if ((ce = '1') and (op_mem_48_20_push_front_pop_back_en = '1')) then
        op_mem_48_20(0) <= op_mem_48_20_front_din;
      end if;
    end if;
  end process proc_op_mem_48_20;
  cast_35_24 <= s2s_cast(ip_18_25, 17, 19, 17);
  internal_ip_35_9_neg <=  -cast_35_24;
  proc_if_30_1: process (internal_ip_35_9_neg)
  is
  begin
    if false then
      internal_ip_join_30_1 <= std_logic_vector_to_signed("0000000000000000000");
    else 
      internal_ip_join_30_1 <= internal_ip_35_9_neg;
    end if;
  end process proc_if_30_1;
  op_mem_48_20_front_din <= internal_ip_join_30_1;
  op_mem_48_20_push_front_pop_back_en <= '1';
  op <= signed_to_std_logic_vector(op_mem_48_20_back);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity constant_a267c870be is
  port (
    op : out std_logic_vector((6 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end constant_a267c870be;


architecture behavior of constant_a267c870be is
begin
  op <= "000001";
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity constant_7ea0f2fff7 is
  port (
    op : out std_logic_vector((6 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end constant_7ea0f2fff7;


architecture behavior of constant_7ea0f2fff7 is
begin
  op <= "000000";
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity constant_961b61f8a1 is
  port (
    op : out std_logic_vector((6 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end constant_961b61f8a1;


architecture behavior of constant_961b61f8a1 is
begin
  op <= "100000";
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity relational_931d61fb72 is
  port (
    a : in std_logic_vector((6 - 1) downto 0);
    b : in std_logic_vector((6 - 1) downto 0);
    op : out std_logic_vector((1 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end relational_931d61fb72;


architecture behavior of relational_931d61fb72 is
  signal a_1_31: unsigned((6 - 1) downto 0);
  signal b_1_34: unsigned((6 - 1) downto 0);
  signal result_12_3_rel: boolean;
begin
  a_1_31 <= std_logic_vector_to_unsigned(a);
  b_1_34 <= std_logic_vector_to_unsigned(b);
  result_12_3_rel <= a_1_31 = b_1_34;
  op <= boolean_to_vector(result_12_3_rel);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity relational_fe487ce1c7 is
  port (
    a : in std_logic_vector((6 - 1) downto 0);
    b : in std_logic_vector((6 - 1) downto 0);
    op : out std_logic_vector((1 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end relational_fe487ce1c7;


architecture behavior of relational_fe487ce1c7 is
  signal a_1_31: unsigned((6 - 1) downto 0);
  signal b_1_34: unsigned((6 - 1) downto 0);
  signal result_14_3_rel: boolean;
begin
  a_1_31 <= std_logic_vector_to_unsigned(a);
  b_1_34 <= std_logic_vector_to_unsigned(b);
  result_14_3_rel <= a_1_31 /= b_1_34;
  op <= boolean_to_vector(result_14_3_rel);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity concat_f133931c1f is
  port (
    in0 : in std_logic_vector((24 - 1) downto 0);
    in1 : in std_logic_vector((1 - 1) downto 0);
    y : out std_logic_vector((25 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end concat_f133931c1f;


architecture behavior of concat_f133931c1f is
  signal in0_1_23: unsigned((24 - 1) downto 0);
  signal in1_1_27: unsigned((1 - 1) downto 0);
  signal y_2_1_concat: unsigned((25 - 1) downto 0);
begin
  in0_1_23 <= std_logic_vector_to_unsigned(in0);
  in1_1_27 <= std_logic_vector_to_unsigned(in1);
  y_2_1_concat <= std_logic_vector_to_unsigned(unsigned_to_std_logic_vector(in0_1_23) & unsigned_to_std_logic_vector(in1_1_27));
  y <= unsigned_to_std_logic_vector(y_2_1_concat);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity addsub_580a0b011a is
  port (
    a : in std_logic_vector((25 - 1) downto 0);
    b : in std_logic_vector((21 - 1) downto 0);
    s : out std_logic_vector((18 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end addsub_580a0b011a;


architecture behavior of addsub_580a0b011a is
  signal a_17_32: signed((25 - 1) downto 0);
  signal b_17_35: unsigned((21 - 1) downto 0);
  type array_type_op_mem_91_20 is array (0 to (2 - 1)) of signed((18 - 1) downto 0);
  signal op_mem_91_20: array_type_op_mem_91_20 := (
    "000000000000000000",
    "000000000000000000");
  signal op_mem_91_20_front_din: signed((18 - 1) downto 0);
  signal op_mem_91_20_back: signed((18 - 1) downto 0);
  signal op_mem_91_20_push_front_pop_back_en: std_logic;
  type array_type_cout_mem_92_22 is array (0 to (2 - 1)) of unsigned((1 - 1) downto 0);
  signal cout_mem_92_22: array_type_cout_mem_92_22 := (
    "0",
    "0");
  signal cout_mem_92_22_front_din: unsigned((1 - 1) downto 0);
  signal cout_mem_92_22_back: unsigned((1 - 1) downto 0);
  signal cout_mem_92_22_push_front_pop_back_en: std_logic;
  signal prev_mode_93_22_next: unsigned((3 - 1) downto 0);
  signal prev_mode_93_22: unsigned((3 - 1) downto 0);
  signal prev_mode_93_22_reg_i: std_logic_vector((3 - 1) downto 0);
  signal prev_mode_93_22_reg_o: std_logic_vector((3 - 1) downto 0);
  signal cast_69_18: signed((26 - 1) downto 0);
  signal cast_69_22: signed((26 - 1) downto 0);
  signal internal_s_69_5_addsub: signed((26 - 1) downto 0);
  signal cast_internal_s_83_3_convert: signed((18 - 1) downto 0);
begin
  a_17_32 <= std_logic_vector_to_signed(a);
  b_17_35 <= std_logic_vector_to_unsigned(b);
  op_mem_91_20_back <= op_mem_91_20(1);
  proc_op_mem_91_20: process (clk)
  is
    variable i: integer;
  begin
    if (clk'event and (clk = '1')) then
      if ((ce = '1') and (op_mem_91_20_push_front_pop_back_en = '1')) then
        for i in 1 downto 1 loop 
          op_mem_91_20(i) <= op_mem_91_20(i-1);
        end loop;
        op_mem_91_20(0) <= op_mem_91_20_front_din;
      end if;
    end if;
  end process proc_op_mem_91_20;
  cout_mem_92_22_back <= cout_mem_92_22(1);
  proc_cout_mem_92_22: process (clk)
  is
    variable i_x_000000: integer;
  begin
    if (clk'event and (clk = '1')) then
      if ((ce = '1') and (cout_mem_92_22_push_front_pop_back_en = '1')) then
        for i_x_000000 in 1 downto 1 loop 
          cout_mem_92_22(i_x_000000) <= cout_mem_92_22(i_x_000000-1);
        end loop;
        cout_mem_92_22(0) <= cout_mem_92_22_front_din;
      end if;
    end if;
  end process proc_cout_mem_92_22;
  prev_mode_93_22_reg_i <= unsigned_to_std_logic_vector(prev_mode_93_22_next);
  prev_mode_93_22 <= std_logic_vector_to_unsigned(prev_mode_93_22_reg_o);
  prev_mode_93_22_reg_inst: entity work.synth_reg_w_init
    generic map (
      init_index => 2, 
      init_value => b"010", 
      latency => 1, 
      width => 3)
    port map (
      ce => ce, 
      clk => clk, 
      clr => clr, 
      i => prev_mode_93_22_reg_i, 
      o => prev_mode_93_22_reg_o);
  cast_69_18 <= s2s_cast(a_17_32, 21, 26, 21);
  cast_69_22 <= u2s_cast(b_17_35, 21, 26, 21);
  internal_s_69_5_addsub <= cast_69_18 + cast_69_22;
  cast_internal_s_83_3_convert <= s2s_cast(internal_s_69_5_addsub, 21, 18, 17);
  op_mem_91_20_front_din <= cast_internal_s_83_3_convert;
  op_mem_91_20_push_front_pop_back_en <= '1';
  cout_mem_92_22_front_din <= std_logic_vector_to_unsigned("0");
  cout_mem_92_22_push_front_pop_back_en <= '1';
  prev_mode_93_22_next <= std_logic_vector_to_unsigned("000");
  s <= signed_to_std_logic_vector(op_mem_91_20_back);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity constant_9a2c97cce5 is
  port (
    op : out std_logic_vector((21 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end constant_9a2c97cce5;


architecture behavior of constant_9a2c97cce5 is
begin
  op <= "000000000000000000111";
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity reinterpret_60ea556961 is
  port (
    input_port : in std_logic_vector((25 - 1) downto 0);
    output_port : out std_logic_vector((25 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end reinterpret_60ea556961;


architecture behavior of reinterpret_60ea556961 is
  signal input_port_1_40: unsigned((25 - 1) downto 0);
  signal output_port_5_5_force: signed((25 - 1) downto 0);
begin
  input_port_1_40 <= std_logic_vector_to_unsigned(input_port);
  output_port_5_5_force <= unsigned_to_signed(input_port_1_40);
  output_port <= signed_to_std_logic_vector(output_port_5_5_force);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity reinterpret_299ca43e25 is
  port (
    input_port : in std_logic_vector((21 - 1) downto 0);
    output_port : out std_logic_vector((21 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end reinterpret_299ca43e25;


architecture behavior of reinterpret_299ca43e25 is
  signal input_port_1_40: unsigned((21 - 1) downto 0);
begin
  input_port_1_40 <= std_logic_vector_to_unsigned(input_port);
  output_port <= unsigned_to_std_logic_vector(input_port_1_40);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity logical_f5b5b4645f is
  port (
    d0 : in std_logic_vector((1 - 1) downto 0);
    d1 : in std_logic_vector((1 - 1) downto 0);
    d2 : in std_logic_vector((1 - 1) downto 0);
    d3 : in std_logic_vector((1 - 1) downto 0);
    y : out std_logic_vector((1 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end logical_f5b5b4645f;


architecture behavior of logical_f5b5b4645f is
  signal d0_1_24: std_logic;
  signal d1_1_27: std_logic;
  signal d2_1_30: std_logic;
  signal d3_1_33: std_logic;
  type array_type_latency_pipe_5_26 is array (0 to (2 - 1)) of std_logic;
  signal latency_pipe_5_26: array_type_latency_pipe_5_26 := (
    '0',
    '0');
  signal latency_pipe_5_26_front_din: std_logic;
  signal latency_pipe_5_26_back: std_logic;
  signal latency_pipe_5_26_push_front_pop_back_en: std_logic;
  signal bit_2_27: std_logic;
  signal fully_2_1_bitnot: std_logic;
begin
  d0_1_24 <= d0(0);
  d1_1_27 <= d1(0);
  d2_1_30 <= d2(0);
  d3_1_33 <= d3(0);
  latency_pipe_5_26_back <= latency_pipe_5_26(1);
  proc_latency_pipe_5_26: process (clk)
  is
    variable i: integer;
  begin
    if (clk'event and (clk = '1')) then
      if ((ce = '1') and (latency_pipe_5_26_push_front_pop_back_en = '1')) then
        for i in 1 downto 1 loop 
          latency_pipe_5_26(i) <= latency_pipe_5_26(i-1);
        end loop;
        latency_pipe_5_26(0) <= latency_pipe_5_26_front_din;
      end if;
    end if;
  end process proc_latency_pipe_5_26;
  bit_2_27 <= d0_1_24 and d1_1_27 and d2_1_30 and d3_1_33;
  fully_2_1_bitnot <= not bit_2_27;
  latency_pipe_5_26_front_din <= fully_2_1_bitnot;
  latency_pipe_5_26_push_front_pop_back_en <= '1';
  y <= std_logic_to_vector(latency_pipe_5_26_back);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity addsub_be8c56327e is
  port (
    a : in std_logic_vector((36 - 1) downto 0);
    b : in std_logic_vector((36 - 1) downto 0);
    s : out std_logic_vector((37 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end addsub_be8c56327e;


architecture behavior of addsub_be8c56327e is
  signal a_17_32: signed((36 - 1) downto 0);
  signal b_17_35: signed((36 - 1) downto 0);
  type array_type_op_mem_91_20 is array (0 to (2 - 1)) of signed((37 - 1) downto 0);
  signal op_mem_91_20: array_type_op_mem_91_20 := (
    "0000000000000000000000000000000000000",
    "0000000000000000000000000000000000000");
  signal op_mem_91_20_front_din: signed((37 - 1) downto 0);
  signal op_mem_91_20_back: signed((37 - 1) downto 0);
  signal op_mem_91_20_push_front_pop_back_en: std_logic;
  type array_type_cout_mem_92_22 is array (0 to (2 - 1)) of unsigned((1 - 1) downto 0);
  signal cout_mem_92_22: array_type_cout_mem_92_22 := (
    "0",
    "0");
  signal cout_mem_92_22_front_din: unsigned((1 - 1) downto 0);
  signal cout_mem_92_22_back: unsigned((1 - 1) downto 0);
  signal cout_mem_92_22_push_front_pop_back_en: std_logic;
  signal prev_mode_93_22_next: unsigned((3 - 1) downto 0);
  signal prev_mode_93_22: unsigned((3 - 1) downto 0);
  signal prev_mode_93_22_reg_i: std_logic_vector((3 - 1) downto 0);
  signal prev_mode_93_22_reg_o: std_logic_vector((3 - 1) downto 0);
  signal cast_71_18: signed((37 - 1) downto 0);
  signal cast_71_22: signed((37 - 1) downto 0);
  signal internal_s_71_5_addsub: signed((37 - 1) downto 0);
begin
  a_17_32 <= std_logic_vector_to_signed(a);
  b_17_35 <= std_logic_vector_to_signed(b);
  op_mem_91_20_back <= op_mem_91_20(1);
  proc_op_mem_91_20: process (clk)
  is
    variable i: integer;
  begin
    if (clk'event and (clk = '1')) then
      if ((ce = '1') and (op_mem_91_20_push_front_pop_back_en = '1')) then
        for i in 1 downto 1 loop 
          op_mem_91_20(i) <= op_mem_91_20(i-1);
        end loop;
        op_mem_91_20(0) <= op_mem_91_20_front_din;
      end if;
    end if;
  end process proc_op_mem_91_20;
  cout_mem_92_22_back <= cout_mem_92_22(1);
  proc_cout_mem_92_22: process (clk)
  is
    variable i_x_000000: integer;
  begin
    if (clk'event and (clk = '1')) then
      if ((ce = '1') and (cout_mem_92_22_push_front_pop_back_en = '1')) then
        for i_x_000000 in 1 downto 1 loop 
          cout_mem_92_22(i_x_000000) <= cout_mem_92_22(i_x_000000-1);
        end loop;
        cout_mem_92_22(0) <= cout_mem_92_22_front_din;
      end if;
    end if;
  end process proc_cout_mem_92_22;
  prev_mode_93_22_reg_i <= unsigned_to_std_logic_vector(prev_mode_93_22_next);
  prev_mode_93_22 <= std_logic_vector_to_unsigned(prev_mode_93_22_reg_o);
  prev_mode_93_22_reg_inst: entity work.synth_reg_w_init
    generic map (
      init_index => 2, 
      init_value => b"010", 
      latency => 1, 
      width => 3)
    port map (
      ce => ce, 
      clk => clk, 
      clr => clr, 
      i => prev_mode_93_22_reg_i, 
      o => prev_mode_93_22_reg_o);
  cast_71_18 <= s2s_cast(a_17_32, 33, 37, 33);
  cast_71_22 <= s2s_cast(b_17_35, 33, 37, 33);
  internal_s_71_5_addsub <= cast_71_18 - cast_71_22;
  op_mem_91_20_front_din <= internal_s_71_5_addsub;
  op_mem_91_20_push_front_pop_back_en <= '1';
  cout_mem_92_22_front_din <= std_logic_vector_to_unsigned("0");
  cout_mem_92_22_push_front_pop_back_en <= '1';
  prev_mode_93_22_next <= std_logic_vector_to_unsigned("000");
  s <= signed_to_std_logic_vector(op_mem_91_20_back);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity addsub_eb2273ac28 is
  port (
    a : in std_logic_vector((36 - 1) downto 0);
    b : in std_logic_vector((36 - 1) downto 0);
    s : out std_logic_vector((37 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end addsub_eb2273ac28;


architecture behavior of addsub_eb2273ac28 is
  signal a_17_32: signed((36 - 1) downto 0);
  signal b_17_35: signed((36 - 1) downto 0);
  type array_type_op_mem_91_20 is array (0 to (2 - 1)) of signed((37 - 1) downto 0);
  signal op_mem_91_20: array_type_op_mem_91_20 := (
    "0000000000000000000000000000000000000",
    "0000000000000000000000000000000000000");
  signal op_mem_91_20_front_din: signed((37 - 1) downto 0);
  signal op_mem_91_20_back: signed((37 - 1) downto 0);
  signal op_mem_91_20_push_front_pop_back_en: std_logic;
  type array_type_cout_mem_92_22 is array (0 to (2 - 1)) of unsigned((1 - 1) downto 0);
  signal cout_mem_92_22: array_type_cout_mem_92_22 := (
    "0",
    "0");
  signal cout_mem_92_22_front_din: unsigned((1 - 1) downto 0);
  signal cout_mem_92_22_back: unsigned((1 - 1) downto 0);
  signal cout_mem_92_22_push_front_pop_back_en: std_logic;
  signal prev_mode_93_22_next: unsigned((3 - 1) downto 0);
  signal prev_mode_93_22: unsigned((3 - 1) downto 0);
  signal prev_mode_93_22_reg_i: std_logic_vector((3 - 1) downto 0);
  signal prev_mode_93_22_reg_o: std_logic_vector((3 - 1) downto 0);
  signal cast_69_18: signed((37 - 1) downto 0);
  signal cast_69_22: signed((37 - 1) downto 0);
  signal internal_s_69_5_addsub: signed((37 - 1) downto 0);
begin
  a_17_32 <= std_logic_vector_to_signed(a);
  b_17_35 <= std_logic_vector_to_signed(b);
  op_mem_91_20_back <= op_mem_91_20(1);
  proc_op_mem_91_20: process (clk)
  is
    variable i: integer;
  begin
    if (clk'event and (clk = '1')) then
      if ((ce = '1') and (op_mem_91_20_push_front_pop_back_en = '1')) then
        for i in 1 downto 1 loop 
          op_mem_91_20(i) <= op_mem_91_20(i-1);
        end loop;
        op_mem_91_20(0) <= op_mem_91_20_front_din;
      end if;
    end if;
  end process proc_op_mem_91_20;
  cout_mem_92_22_back <= cout_mem_92_22(1);
  proc_cout_mem_92_22: process (clk)
  is
    variable i_x_000000: integer;
  begin
    if (clk'event and (clk = '1')) then
      if ((ce = '1') and (cout_mem_92_22_push_front_pop_back_en = '1')) then
        for i_x_000000 in 1 downto 1 loop 
          cout_mem_92_22(i_x_000000) <= cout_mem_92_22(i_x_000000-1);
        end loop;
        cout_mem_92_22(0) <= cout_mem_92_22_front_din;
      end if;
    end if;
  end process proc_cout_mem_92_22;
  prev_mode_93_22_reg_i <= unsigned_to_std_logic_vector(prev_mode_93_22_next);
  prev_mode_93_22 <= std_logic_vector_to_unsigned(prev_mode_93_22_reg_o);
  prev_mode_93_22_reg_inst: entity work.synth_reg_w_init
    generic map (
      init_index => 2, 
      init_value => b"010", 
      latency => 1, 
      width => 3)
    port map (
      ce => ce, 
      clk => clk, 
      clr => clr, 
      i => prev_mode_93_22_reg_i, 
      o => prev_mode_93_22_reg_o);
  cast_69_18 <= s2s_cast(a_17_32, 33, 37, 33);
  cast_69_22 <= s2s_cast(b_17_35, 33, 37, 33);
  internal_s_69_5_addsub <= cast_69_18 + cast_69_22;
  op_mem_91_20_front_din <= internal_s_69_5_addsub;
  op_mem_91_20_push_front_pop_back_en <= '1';
  cout_mem_92_22_front_din <= std_logic_vector_to_unsigned("0");
  cout_mem_92_22_push_front_pop_back_en <= '1';
  prev_mode_93_22_next <= std_logic_vector_to_unsigned("000");
  s <= signed_to_std_logic_vector(op_mem_91_20_back);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity delay_4b00a70dea is
  port (
    d : in std_logic_vector((36 - 1) downto 0);
    q : out std_logic_vector((36 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end delay_4b00a70dea;


architecture behavior of delay_4b00a70dea is
  signal d_1_22: std_logic_vector((36 - 1) downto 0);
  type array_type_op_mem_20_24 is array (0 to (3 - 1)) of std_logic_vector((36 - 1) downto 0);
  signal op_mem_20_24: array_type_op_mem_20_24 := (
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000");
  signal op_mem_20_24_front_din: std_logic_vector((36 - 1) downto 0);
  signal op_mem_20_24_back: std_logic_vector((36 - 1) downto 0);
  signal op_mem_20_24_push_front_pop_back_en: std_logic;
begin
  d_1_22 <= d;
  op_mem_20_24_back <= op_mem_20_24(2);
  proc_op_mem_20_24: process (clk)
  is
    variable i: integer;
  begin
    if (clk'event and (clk = '1')) then
      if ((ce = '1') and (op_mem_20_24_push_front_pop_back_en = '1')) then
        for i in 2 downto 1 loop 
          op_mem_20_24(i) <= op_mem_20_24(i-1);
        end loop;
        op_mem_20_24(0) <= op_mem_20_24_front_din;
      end if;
    end if;
  end process proc_op_mem_20_24;
  op_mem_20_24_front_din <= d_1_22;
  op_mem_20_24_push_front_pop_back_en <= '1';
  q <= op_mem_20_24_back;
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity mult_cfc8c45902 is
  port (
    a : in std_logic_vector((18 - 1) downto 0);
    b : in std_logic_vector((18 - 1) downto 0);
    p : out std_logic_vector((36 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end mult_cfc8c45902;


architecture behavior of mult_cfc8c45902 is
  signal a_1_22: signed((18 - 1) downto 0);
  signal b_1_25: signed((18 - 1) downto 0);
  type array_type_op_mem_65_20 is array (0 to (3 - 1)) of signed((36 - 1) downto 0);
  signal op_mem_65_20: array_type_op_mem_65_20 := (
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000",
    "000000000000000000000000000000000000");
  signal op_mem_65_20_front_din: signed((36 - 1) downto 0);
  signal op_mem_65_20_back: signed((36 - 1) downto 0);
  signal op_mem_65_20_push_front_pop_back_en: std_logic;
  signal mult_46_56: signed((36 - 1) downto 0);
begin
  a_1_22 <= std_logic_vector_to_signed(a);
  b_1_25 <= std_logic_vector_to_signed(b);
  op_mem_65_20_back <= op_mem_65_20(2);
  proc_op_mem_65_20: process (clk)
  is
    variable i: integer;
  begin
    if (clk'event and (clk = '1')) then
      if ((ce = '1') and (op_mem_65_20_push_front_pop_back_en = '1')) then
        for i in 2 downto 1 loop 
          op_mem_65_20(i) <= op_mem_65_20(i-1);
        end loop;
        op_mem_65_20(0) <= op_mem_65_20_front_din;
      end if;
    end if;
  end process proc_op_mem_65_20;
  mult_46_56 <= (a_1_22 * b_1_25);
  op_mem_65_20_front_din <= mult_46_56;
  op_mem_65_20_push_front_pop_back_en <= '1';
  p <= signed_to_std_logic_vector(op_mem_65_20_back);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity mux_f1f44b96f0 is
  port (
    sel : in std_logic_vector((1 - 1) downto 0);
    d0 : in std_logic_vector((23 - 1) downto 0);
    d1 : in std_logic_vector((23 - 1) downto 0);
    y : out std_logic_vector((24 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end mux_f1f44b96f0;


architecture behavior of mux_f1f44b96f0 is
  signal sel_1_20: std_logic;
  signal d0_1_24: std_logic_vector((23 - 1) downto 0);
  signal d1_1_27: std_logic_vector((23 - 1) downto 0);
  type array_type_pipe_16_22 is array (0 to (2 - 1)) of std_logic_vector((24 - 1) downto 0);
  signal pipe_16_22: array_type_pipe_16_22 := (
    "000000000000000000000000",
    "000000000000000000000000");
  signal pipe_16_22_front_din: std_logic_vector((24 - 1) downto 0);
  signal pipe_16_22_back: std_logic_vector((24 - 1) downto 0);
  signal pipe_16_22_push_front_pop_back_en: std_logic;
  signal sel_internal_2_1_convert: std_logic_vector((1 - 1) downto 0);
  signal unregy_join_6_1: std_logic_vector((24 - 1) downto 0);
begin
  sel_1_20 <= sel(0);
  d0_1_24 <= d0;
  d1_1_27 <= d1;
  pipe_16_22_back <= pipe_16_22(1);
  proc_pipe_16_22: process (clk)
  is
    variable i: integer;
  begin
    if (clk'event and (clk = '1')) then
      if ((ce = '1') and (pipe_16_22_push_front_pop_back_en = '1')) then
        for i in 1 downto 1 loop 
          pipe_16_22(i) <= pipe_16_22(i-1);
        end loop;
        pipe_16_22(0) <= pipe_16_22_front_din;
      end if;
    end if;
  end process proc_pipe_16_22;
  sel_internal_2_1_convert <= cast(std_logic_to_vector(sel_1_20), 0, 1, 0, xlUnsigned);
  proc_switch_6_1: process (d0_1_24, d1_1_27, sel_internal_2_1_convert)
  is
  begin
    case sel_internal_2_1_convert is 
      when "0" =>
        unregy_join_6_1 <= cast(d0_1_24, 19, 24, 20, xlSigned);
      when others =>
        unregy_join_6_1 <= cast(d1_1_27, 20, 24, 20, xlSigned);
    end case;
  end process proc_switch_6_1;
  pipe_16_22_front_din <= unregy_join_6_1;
  pipe_16_22_push_front_pop_back_en <= '1';
  y <= pipe_16_22_back;
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity scale_e5d0b4a1ec is
  port (
    ip : in std_logic_vector((23 - 1) downto 0);
    op : out std_logic_vector((23 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end scale_e5d0b4a1ec;


architecture behavior of scale_e5d0b4a1ec is
  signal ip_17_23: signed((23 - 1) downto 0);
begin
  ip_17_23 <= std_logic_vector_to_signed(ip);
  op <= signed_to_std_logic_vector(ip_17_23);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity constant_582a3706dd is
  port (
    op : out std_logic_vector((5 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end constant_582a3706dd;


architecture behavior of constant_582a3706dd is
begin
  op <= "00001";
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity constant_fe72737ca0 is
  port (
    op : out std_logic_vector((5 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end constant_fe72737ca0;


architecture behavior of constant_fe72737ca0 is
begin
  op <= "00000";
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity constant_ef0e2e5fc6 is
  port (
    op : out std_logic_vector((5 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end constant_ef0e2e5fc6;


architecture behavior of constant_ef0e2e5fc6 is
begin
  op <= "10000";
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity relational_9ece3c8c4e is
  port (
    a : in std_logic_vector((5 - 1) downto 0);
    b : in std_logic_vector((5 - 1) downto 0);
    op : out std_logic_vector((1 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end relational_9ece3c8c4e;


architecture behavior of relational_9ece3c8c4e is
  signal a_1_31: unsigned((5 - 1) downto 0);
  signal b_1_34: unsigned((5 - 1) downto 0);
  signal result_12_3_rel: boolean;
begin
  a_1_31 <= std_logic_vector_to_unsigned(a);
  b_1_34 <= std_logic_vector_to_unsigned(b);
  result_12_3_rel <= a_1_31 = b_1_34;
  op <= boolean_to_vector(result_12_3_rel);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity relational_dc5bc996c9 is
  port (
    a : in std_logic_vector((5 - 1) downto 0);
    b : in std_logic_vector((5 - 1) downto 0);
    op : out std_logic_vector((1 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end relational_dc5bc996c9;


architecture behavior of relational_dc5bc996c9 is
  signal a_1_31: unsigned((5 - 1) downto 0);
  signal b_1_34: unsigned((5 - 1) downto 0);
  signal result_14_3_rel: boolean;
begin
  a_1_31 <= std_logic_vector_to_unsigned(a);
  b_1_34 <= std_logic_vector_to_unsigned(b);
  result_14_3_rel <= a_1_31 /= b_1_34;
  op <= boolean_to_vector(result_14_3_rel);
end behavior;


-------------------------------------------------------------------
-- System Generator version 14.6 VHDL source file.
--
-- Copyright(C) 2013 by Xilinx, Inc.  All rights reserved.  This
-- text/file contains proprietary, confidential information of Xilinx,
-- Inc., is distributed under license from Xilinx, Inc., and may be used,
-- copied and/or disclosed only pursuant to the terms of a valid license
-- agreement with Xilinx, Inc.  Xilinx hereby grants you a license to use
-- this text/file solely for design, simulation, implementation and
-- creation of design files limited to Xilinx devices or technologies.
-- Use with non-Xilinx devices or technologies is expressly prohibited
-- and immediately terminates your license unless covered by a separate
-- agreement.
--
-- Xilinx is providing this design, code, or information "as is" solely
-- for use in developing programs and solutions for Xilinx devices.  By
-- providing this design, code, or information as one possible
-- implementation of this feature, application or standard, Xilinx is
-- making no representation that this implementation is free from any
-- claims of infringement.  You are responsible for obtaining any rights
-- you may require for your implementation.  Xilinx expressly disclaims
-- any warranty whatsoever with respect to the adequacy of the
-- implementation, including but not limited to warranties of
-- merchantability or fitness for a particular purpose.
--
-- Xilinx products are not intended for use in life support appliances,
-- devices, or systems.  Use in such applications is expressly prohibited.
--
-- Any modifications that are made to the source code are done at the user's
-- sole risk and will be unsupported.
--
-- This copyright and support notice must be retained as part of this
-- text at all times.  (c) Copyright 1995-2013 Xilinx, Inc.  All rights
-- reserved.
-------------------------------------------------------------------
library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.std_logic_arith.all;
use work.conv_pkg.all;
entity xlsprom_c09f12_01 is
  generic (
    core_name0: string := "";
    c_width: integer := 12;
    c_address_width: integer := 4;
    latency: integer := 1
  );
  port (
    addr: in std_logic_vector(c_address_width - 1 downto 0);
    en: in std_logic_vector(0 downto 0);
    rst: in std_logic_vector(0 downto 0);
    ce: in std_logic;
    clk: in std_logic;
    data: out std_logic_vector(c_width - 1 downto 0)
  );
end xlsprom_c09f12_01 ;
architecture behavior of xlsprom_c09f12_01 is
  component synth_reg
    generic (
      width: integer;
      latency: integer
    );
    port (
      i: in std_logic_vector(width - 1 downto 0);
      ce: in std_logic;
      clr: in std_logic;
      clk: in std_logic;
      o: out std_logic_vector(width - 1 downto 0)
    );
  end component;
  signal core_addr: std_logic_vector(c_address_width - 1 downto 0);
  signal core_data_out: std_logic_vector(c_width - 1 downto 0);
  signal core_ce, sinit: std_logic;
  component bmg_72_031b3366e458494d
    port (
                              addra: in std_logic_vector(c_address_width - 1 downto 0);
      clka: in std_logic;
      ena: in std_logic;
      douta: out std_logic_vector(c_width - 1 downto 0)
    );
  end component;

  attribute syn_black_box of bmg_72_031b3366e458494d:
    component is true;
  attribute fpga_dont_touch of bmg_72_031b3366e458494d:
    component is "true";
  attribute box_type of bmg_72_031b3366e458494d:
    component  is "black_box";
  component bmg_72_5eb14d6795836fe0
    port (
                              addra: in std_logic_vector(c_address_width - 1 downto 0);
      clka: in std_logic;
      ena: in std_logic;
      douta: out std_logic_vector(c_width - 1 downto 0)
    );
  end component;

  attribute syn_black_box of bmg_72_5eb14d6795836fe0:
    component is true;
  attribute fpga_dont_touch of bmg_72_5eb14d6795836fe0:
    component is "true";
  attribute box_type of bmg_72_5eb14d6795836fe0:
    component  is "black_box";
  component bmg_72_763f056d1756d515
    port (
                              addra: in std_logic_vector(c_address_width - 1 downto 0);
      clka: in std_logic;
      ena: in std_logic;
      douta: out std_logic_vector(c_width - 1 downto 0)
    );
  end component;

  attribute syn_black_box of bmg_72_763f056d1756d515:
    component is true;
  attribute fpga_dont_touch of bmg_72_763f056d1756d515:
    component is "true";
  attribute box_type of bmg_72_763f056d1756d515:
    component  is "black_box";
  component bmg_72_59f0d912b26aa159
    port (
                              addra: in std_logic_vector(c_address_width - 1 downto 0);
      clka: in std_logic;
      ena: in std_logic;
      douta: out std_logic_vector(c_width - 1 downto 0)
    );
  end component;

  attribute syn_black_box of bmg_72_59f0d912b26aa159:
    component is true;
  attribute fpga_dont_touch of bmg_72_59f0d912b26aa159:
    component is "true";
  attribute box_type of bmg_72_59f0d912b26aa159:
    component  is "black_box";
  component bmg_72_765e7ee20c0385ac
    port (
                              addra: in std_logic_vector(c_address_width - 1 downto 0);
      clka: in std_logic;
      ena: in std_logic;
      douta: out std_logic_vector(c_width - 1 downto 0)
    );
  end component;

  attribute syn_black_box of bmg_72_765e7ee20c0385ac:
    component is true;
  attribute fpga_dont_touch of bmg_72_765e7ee20c0385ac:
    component is "true";
  attribute box_type of bmg_72_765e7ee20c0385ac:
    component  is "black_box";
  component bmg_72_b50899b30d5ca737
    port (
                              addra: in std_logic_vector(c_address_width - 1 downto 0);
      clka: in std_logic;
      ena: in std_logic;
      douta: out std_logic_vector(c_width - 1 downto 0)
    );
  end component;

  attribute syn_black_box of bmg_72_b50899b30d5ca737:
    component is true;
  attribute fpga_dont_touch of bmg_72_b50899b30d5ca737:
    component is "true";
  attribute box_type of bmg_72_b50899b30d5ca737:
    component  is "black_box";
  component bmg_72_05b952b0e97b2a0d
    port (
                              addra: in std_logic_vector(c_address_width - 1 downto 0);
      clka: in std_logic;
      ena: in std_logic;
      douta: out std_logic_vector(c_width - 1 downto 0)
    );
  end component;

  attribute syn_black_box of bmg_72_05b952b0e97b2a0d:
    component is true;
  attribute fpga_dont_touch of bmg_72_05b952b0e97b2a0d:
    component is "true";
  attribute box_type of bmg_72_05b952b0e97b2a0d:
    component  is "black_box";
  component bmg_72_04e0d9cde0f49a3d
    port (
                              addra: in std_logic_vector(c_address_width - 1 downto 0);
      clka: in std_logic;
      ena: in std_logic;
      douta: out std_logic_vector(c_width - 1 downto 0)
    );
  end component;

  attribute syn_black_box of bmg_72_04e0d9cde0f49a3d:
    component is true;
  attribute fpga_dont_touch of bmg_72_04e0d9cde0f49a3d:
    component is "true";
  attribute box_type of bmg_72_04e0d9cde0f49a3d:
    component  is "black_box";
  component bmg_72_76e1be4e7480a75f
    port (
                              addra: in std_logic_vector(c_address_width - 1 downto 0);
      clka: in std_logic;
      ena: in std_logic;
      douta: out std_logic_vector(c_width - 1 downto 0)
    );
  end component;

  attribute syn_black_box of bmg_72_76e1be4e7480a75f:
    component is true;
  attribute fpga_dont_touch of bmg_72_76e1be4e7480a75f:
    component is "true";
  attribute box_type of bmg_72_76e1be4e7480a75f:
    component  is "black_box";
  component bmg_72_f55ad1fbb330c587
    port (
                              addra: in std_logic_vector(c_address_width - 1 downto 0);
      clka: in std_logic;
      ena: in std_logic;
      douta: out std_logic_vector(c_width - 1 downto 0)
    );
  end component;

  attribute syn_black_box of bmg_72_f55ad1fbb330c587:
    component is true;
  attribute fpga_dont_touch of bmg_72_f55ad1fbb330c587:
    component is "true";
  attribute box_type of bmg_72_f55ad1fbb330c587:
    component  is "black_box";
  component bmg_72_8ed993a9a42f84a8
    port (
                              addra: in std_logic_vector(c_address_width - 1 downto 0);
      clka: in std_logic;
      ena: in std_logic;
      douta: out std_logic_vector(c_width - 1 downto 0)
    );
  end component;

  attribute syn_black_box of bmg_72_8ed993a9a42f84a8:
    component is true;
  attribute fpga_dont_touch of bmg_72_8ed993a9a42f84a8:
    component is "true";
  attribute box_type of bmg_72_8ed993a9a42f84a8:
    component  is "black_box";
  component bmg_72_7884e23b5c653602
    port (
                              addra: in std_logic_vector(c_address_width - 1 downto 0);
      clka: in std_logic;
      ena: in std_logic;
      douta: out std_logic_vector(c_width - 1 downto 0)
    );
  end component;

  attribute syn_black_box of bmg_72_7884e23b5c653602:
    component is true;
  attribute fpga_dont_touch of bmg_72_7884e23b5c653602:
    component is "true";
  attribute box_type of bmg_72_7884e23b5c653602:
    component  is "black_box";
  component bmg_72_f27fe95e91d868c0
    port (
                              addra: in std_logic_vector(c_address_width - 1 downto 0);
      clka: in std_logic;
      ena: in std_logic;
      douta: out std_logic_vector(c_width - 1 downto 0)
    );
  end component;

  attribute syn_black_box of bmg_72_f27fe95e91d868c0:
    component is true;
  attribute fpga_dont_touch of bmg_72_f27fe95e91d868c0:
    component is "true";
  attribute box_type of bmg_72_f27fe95e91d868c0:
    component  is "black_box";
  component bmg_72_7923a80e2a3186d3
    port (
                              addra: in std_logic_vector(c_address_width - 1 downto 0);
      clka: in std_logic;
      ena: in std_logic;
      douta: out std_logic_vector(c_width - 1 downto 0)
    );
  end component;

  attribute syn_black_box of bmg_72_7923a80e2a3186d3:
    component is true;
  attribute fpga_dont_touch of bmg_72_7923a80e2a3186d3:
    component is "true";
  attribute box_type of bmg_72_7923a80e2a3186d3:
    component  is "black_box";
  component bmg_72_22ecfdf9c708a18d
    port (
                              addra: in std_logic_vector(c_address_width - 1 downto 0);
      clka: in std_logic;
      ena: in std_logic;
      douta: out std_logic_vector(c_width - 1 downto 0)
    );
  end component;

  attribute syn_black_box of bmg_72_22ecfdf9c708a18d:
    component is true;
  attribute fpga_dont_touch of bmg_72_22ecfdf9c708a18d:
    component is "true";
  attribute box_type of bmg_72_22ecfdf9c708a18d:
    component  is "black_box";
  component bmg_72_def2631b070914b0
    port (
                              addra: in std_logic_vector(c_address_width - 1 downto 0);
      clka: in std_logic;
      ena: in std_logic;
      douta: out std_logic_vector(c_width - 1 downto 0)
    );
  end component;

  attribute syn_black_box of bmg_72_def2631b070914b0:
    component is true;
  attribute fpga_dont_touch of bmg_72_def2631b070914b0:
    component is "true";
  attribute box_type of bmg_72_def2631b070914b0:
    component  is "black_box";
  component bmg_72_bf7d8227d376109b
    port (
                              addra: in std_logic_vector(c_address_width - 1 downto 0);
      clka: in std_logic;
      ena: in std_logic;
      douta: out std_logic_vector(c_width - 1 downto 0)
    );
  end component;

  attribute syn_black_box of bmg_72_bf7d8227d376109b:
    component is true;
  attribute fpga_dont_touch of bmg_72_bf7d8227d376109b:
    component is "true";
  attribute box_type of bmg_72_bf7d8227d376109b:
    component  is "black_box";
  component bmg_72_82d7e698d6cd5771
    port (
                              addra: in std_logic_vector(c_address_width - 1 downto 0);
      clka: in std_logic;
      ena: in std_logic;
      douta: out std_logic_vector(c_width - 1 downto 0)
    );
  end component;

  attribute syn_black_box of bmg_72_82d7e698d6cd5771:
    component is true;
  attribute fpga_dont_touch of bmg_72_82d7e698d6cd5771:
    component is "true";
  attribute box_type of bmg_72_82d7e698d6cd5771:
    component  is "black_box";
  component bmg_72_4394a065975be75e
    port (
                              addra: in std_logic_vector(c_address_width - 1 downto 0);
      clka: in std_logic;
      ena: in std_logic;
      douta: out std_logic_vector(c_width - 1 downto 0)
    );
  end component;

  attribute syn_black_box of bmg_72_4394a065975be75e:
    component is true;
  attribute fpga_dont_touch of bmg_72_4394a065975be75e:
    component is "true";
  attribute box_type of bmg_72_4394a065975be75e:
    component  is "black_box";
  component bmg_72_35957677be9347c5
    port (
                              addra: in std_logic_vector(c_address_width - 1 downto 0);
      clka: in std_logic;
      ena: in std_logic;
      douta: out std_logic_vector(c_width - 1 downto 0)
    );
  end component;

  attribute syn_black_box of bmg_72_35957677be9347c5:
    component is true;
  attribute fpga_dont_touch of bmg_72_35957677be9347c5:
    component is "true";
  attribute box_type of bmg_72_35957677be9347c5:
    component  is "black_box";
  component bmg_72_48d0f511ba241493
    port (
                              addra: in std_logic_vector(c_address_width - 1 downto 0);
      clka: in std_logic;
      ena: in std_logic;
      douta: out std_logic_vector(c_width - 1 downto 0)
    );
  end component;

  attribute syn_black_box of bmg_72_48d0f511ba241493:
    component is true;
  attribute fpga_dont_touch of bmg_72_48d0f511ba241493:
    component is "true";
  attribute box_type of bmg_72_48d0f511ba241493:
    component  is "black_box";
  component bmg_72_321d886e2c47e239
    port (
                              addra: in std_logic_vector(c_address_width - 1 downto 0);
      clka: in std_logic;
      ena: in std_logic;
      douta: out std_logic_vector(c_width - 1 downto 0)
    );
  end component;

  attribute syn_black_box of bmg_72_321d886e2c47e239:
    component is true;
  attribute fpga_dont_touch of bmg_72_321d886e2c47e239:
    component is "true";
  attribute box_type of bmg_72_321d886e2c47e239:
    component  is "black_box";
  component bmg_72_dc97d51467d52108
    port (
                              addra: in std_logic_vector(c_address_width - 1 downto 0);
      clka: in std_logic;
      ena: in std_logic;
      douta: out std_logic_vector(c_width - 1 downto 0)
    );
  end component;

  attribute syn_black_box of bmg_72_dc97d51467d52108:
    component is true;
  attribute fpga_dont_touch of bmg_72_dc97d51467d52108:
    component is "true";
  attribute box_type of bmg_72_dc97d51467d52108:
    component  is "black_box";
  component bmg_72_804e79c102c84f5c
    port (
                              addra: in std_logic_vector(c_address_width - 1 downto 0);
      clka: in std_logic;
      ena: in std_logic;
      douta: out std_logic_vector(c_width - 1 downto 0)
    );
  end component;

  attribute syn_black_box of bmg_72_804e79c102c84f5c:
    component is true;
  attribute fpga_dont_touch of bmg_72_804e79c102c84f5c:
    component is "true";
  attribute box_type of bmg_72_804e79c102c84f5c:
    component  is "black_box";
  component bmg_72_043bb11b7d009cca
    port (
                              addra: in std_logic_vector(c_address_width - 1 downto 0);
      clka: in std_logic;
      ena: in std_logic;
      douta: out std_logic_vector(c_width - 1 downto 0)
    );
  end component;

  attribute syn_black_box of bmg_72_043bb11b7d009cca:
    component is true;
  attribute fpga_dont_touch of bmg_72_043bb11b7d009cca:
    component is "true";
  attribute box_type of bmg_72_043bb11b7d009cca:
    component  is "black_box";
  component bmg_72_4f929f931e999067
    port (
                              addra: in std_logic_vector(c_address_width - 1 downto 0);
      clka: in std_logic;
      ena: in std_logic;
      douta: out std_logic_vector(c_width - 1 downto 0)
    );
  end component;

  attribute syn_black_box of bmg_72_4f929f931e999067:
    component is true;
  attribute fpga_dont_touch of bmg_72_4f929f931e999067:
    component is "true";
  attribute box_type of bmg_72_4f929f931e999067:
    component  is "black_box";
  component bmg_72_ba30712f7b147c00
    port (
                              addra: in std_logic_vector(c_address_width - 1 downto 0);
      clka: in std_logic;
      ena: in std_logic;
      douta: out std_logic_vector(c_width - 1 downto 0)
    );
  end component;

  attribute syn_black_box of bmg_72_ba30712f7b147c00:
    component is true;
  attribute fpga_dont_touch of bmg_72_ba30712f7b147c00:
    component is "true";
  attribute box_type of bmg_72_ba30712f7b147c00:
    component  is "black_box";
  component bmg_72_b3ad50e1afdb9e3d
    port (
                              addra: in std_logic_vector(c_address_width - 1 downto 0);
      clka: in std_logic;
      ena: in std_logic;
      douta: out std_logic_vector(c_width - 1 downto 0)
    );
  end component;

  attribute syn_black_box of bmg_72_b3ad50e1afdb9e3d:
    component is true;
  attribute fpga_dont_touch of bmg_72_b3ad50e1afdb9e3d:
    component is "true";
  attribute box_type of bmg_72_b3ad50e1afdb9e3d:
    component  is "black_box";
begin
  core_addr <= addr;
  core_ce <= ce and en(0);
  sinit <= rst(0) and ce;
  comp0: if ((core_name0 = "bmg_72_031b3366e458494d")) generate
    core_instance0: bmg_72_031b3366e458494d
      port map (
        addra => core_addr,
        clka => clk,
        ena => core_ce,
        douta => core_data_out
                        );
  end generate;
  comp1: if ((core_name0 = "bmg_72_5eb14d6795836fe0")) generate
    core_instance1: bmg_72_5eb14d6795836fe0
      port map (
        addra => core_addr,
        clka => clk,
        ena => core_ce,
        douta => core_data_out
                        );
  end generate;
  comp2: if ((core_name0 = "bmg_72_763f056d1756d515")) generate
    core_instance2: bmg_72_763f056d1756d515
      port map (
        addra => core_addr,
        clka => clk,
        ena => core_ce,
        douta => core_data_out
                        );
  end generate;
  comp3: if ((core_name0 = "bmg_72_59f0d912b26aa159")) generate
    core_instance3: bmg_72_59f0d912b26aa159
      port map (
        addra => core_addr,
        clka => clk,
        ena => core_ce,
        douta => core_data_out
                        );
  end generate;
  comp4: if ((core_name0 = "bmg_72_765e7ee20c0385ac")) generate
    core_instance4: bmg_72_765e7ee20c0385ac
      port map (
        addra => core_addr,
        clka => clk,
        ena => core_ce,
        douta => core_data_out
                        );
  end generate;
  comp5: if ((core_name0 = "bmg_72_b50899b30d5ca737")) generate
    core_instance5: bmg_72_b50899b30d5ca737
      port map (
        addra => core_addr,
        clka => clk,
        ena => core_ce,
        douta => core_data_out
                        );
  end generate;
  comp6: if ((core_name0 = "bmg_72_05b952b0e97b2a0d")) generate
    core_instance6: bmg_72_05b952b0e97b2a0d
      port map (
        addra => core_addr,
        clka => clk,
        ena => core_ce,
        douta => core_data_out
                        );
  end generate;
  comp7: if ((core_name0 = "bmg_72_04e0d9cde0f49a3d")) generate
    core_instance7: bmg_72_04e0d9cde0f49a3d
      port map (
        addra => core_addr,
        clka => clk,
        ena => core_ce,
        douta => core_data_out
                        );
  end generate;
  comp8: if ((core_name0 = "bmg_72_76e1be4e7480a75f")) generate
    core_instance8: bmg_72_76e1be4e7480a75f
      port map (
        addra => core_addr,
        clka => clk,
        ena => core_ce,
        douta => core_data_out
                        );
  end generate;
  comp9: if ((core_name0 = "bmg_72_f55ad1fbb330c587")) generate
    core_instance9: bmg_72_f55ad1fbb330c587
      port map (
        addra => core_addr,
        clka => clk,
        ena => core_ce,
        douta => core_data_out
                        );
  end generate;
  comp10: if ((core_name0 = "bmg_72_8ed993a9a42f84a8")) generate
    core_instance10: bmg_72_8ed993a9a42f84a8
      port map (
        addra => core_addr,
        clka => clk,
        ena => core_ce,
        douta => core_data_out
                        );
  end generate;
  comp11: if ((core_name0 = "bmg_72_7884e23b5c653602")) generate
    core_instance11: bmg_72_7884e23b5c653602
      port map (
        addra => core_addr,
        clka => clk,
        ena => core_ce,
        douta => core_data_out
                        );
  end generate;
  comp12: if ((core_name0 = "bmg_72_f27fe95e91d868c0")) generate
    core_instance12: bmg_72_f27fe95e91d868c0
      port map (
        addra => core_addr,
        clka => clk,
        ena => core_ce,
        douta => core_data_out
                        );
  end generate;
  comp13: if ((core_name0 = "bmg_72_7923a80e2a3186d3")) generate
    core_instance13: bmg_72_7923a80e2a3186d3
      port map (
        addra => core_addr,
        clka => clk,
        ena => core_ce,
        douta => core_data_out
                        );
  end generate;
  comp14: if ((core_name0 = "bmg_72_22ecfdf9c708a18d")) generate
    core_instance14: bmg_72_22ecfdf9c708a18d
      port map (
        addra => core_addr,
        clka => clk,
        ena => core_ce,
        douta => core_data_out
                        );
  end generate;
  comp15: if ((core_name0 = "bmg_72_def2631b070914b0")) generate
    core_instance15: bmg_72_def2631b070914b0
      port map (
        addra => core_addr,
        clka => clk,
        ena => core_ce,
        douta => core_data_out
                        );
  end generate;
  comp16: if ((core_name0 = "bmg_72_bf7d8227d376109b")) generate
    core_instance16: bmg_72_bf7d8227d376109b
      port map (
        addra => core_addr,
        clka => clk,
        ena => core_ce,
        douta => core_data_out
                        );
  end generate;
  comp17: if ((core_name0 = "bmg_72_82d7e698d6cd5771")) generate
    core_instance17: bmg_72_82d7e698d6cd5771
      port map (
        addra => core_addr,
        clka => clk,
        ena => core_ce,
        douta => core_data_out
                        );
  end generate;
  comp18: if ((core_name0 = "bmg_72_4394a065975be75e")) generate
    core_instance18: bmg_72_4394a065975be75e
      port map (
        addra => core_addr,
        clka => clk,
        ena => core_ce,
        douta => core_data_out
                        );
  end generate;
  comp19: if ((core_name0 = "bmg_72_35957677be9347c5")) generate
    core_instance19: bmg_72_35957677be9347c5
      port map (
        addra => core_addr,
        clka => clk,
        ena => core_ce,
        douta => core_data_out
                        );
  end generate;
  comp20: if ((core_name0 = "bmg_72_48d0f511ba241493")) generate
    core_instance20: bmg_72_48d0f511ba241493
      port map (
        addra => core_addr,
        clka => clk,
        ena => core_ce,
        douta => core_data_out
                        );
  end generate;
  comp21: if ((core_name0 = "bmg_72_321d886e2c47e239")) generate
    core_instance21: bmg_72_321d886e2c47e239
      port map (
        addra => core_addr,
        clka => clk,
        ena => core_ce,
        douta => core_data_out
                        );
  end generate;
  comp22: if ((core_name0 = "bmg_72_dc97d51467d52108")) generate
    core_instance22: bmg_72_dc97d51467d52108
      port map (
        addra => core_addr,
        clka => clk,
        ena => core_ce,
        douta => core_data_out
                        );
  end generate;
  comp23: if ((core_name0 = "bmg_72_804e79c102c84f5c")) generate
    core_instance23: bmg_72_804e79c102c84f5c
      port map (
        addra => core_addr,
        clka => clk,
        ena => core_ce,
        douta => core_data_out
                        );
  end generate;
  comp24: if ((core_name0 = "bmg_72_043bb11b7d009cca")) generate
    core_instance24: bmg_72_043bb11b7d009cca
      port map (
        addra => core_addr,
        clka => clk,
        ena => core_ce,
        douta => core_data_out
                        );
  end generate;
  comp25: if ((core_name0 = "bmg_72_4f929f931e999067")) generate
    core_instance25: bmg_72_4f929f931e999067
      port map (
        addra => core_addr,
        clka => clk,
        ena => core_ce,
        douta => core_data_out
                        );
  end generate;
  comp26: if ((core_name0 = "bmg_72_ba30712f7b147c00")) generate
    core_instance26: bmg_72_ba30712f7b147c00
      port map (
        addra => core_addr,
        clka => clk,
        ena => core_ce,
        douta => core_data_out
                        );
  end generate;
  comp27: if ((core_name0 = "bmg_72_b3ad50e1afdb9e3d")) generate
    core_instance27: bmg_72_b3ad50e1afdb9e3d
      port map (
        addra => core_addr,
        clka => clk,
        ena => core_ce,
        douta => core_data_out
                        );
  end generate;
  latency_test: if (latency > 1) generate
    reg: synth_reg
      generic map (
        width => c_width,
        latency => latency - 1
      )
      port map (
        i => core_data_out,
        ce => core_ce,
        clr => '0',
        clk => clk,
        o => data
      );
  end generate;
  latency_1: if (latency <= 1) generate
    data <= core_data_out;
  end generate;
end  behavior;
library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity constant_67ad97ca70 is
  port (
    op : out std_logic_vector((4 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end constant_67ad97ca70;


architecture behavior of constant_67ad97ca70 is
begin
  op <= "0001";
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity constant_145086465d is
  port (
    op : out std_logic_vector((4 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end constant_145086465d;


architecture behavior of constant_145086465d is
begin
  op <= "1000";
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity relational_4d3cfceaf4 is
  port (
    a : in std_logic_vector((4 - 1) downto 0);
    b : in std_logic_vector((4 - 1) downto 0);
    op : out std_logic_vector((1 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end relational_4d3cfceaf4;


architecture behavior of relational_4d3cfceaf4 is
  signal a_1_31: unsigned((4 - 1) downto 0);
  signal b_1_34: unsigned((4 - 1) downto 0);
  signal result_12_3_rel: boolean;
begin
  a_1_31 <= std_logic_vector_to_unsigned(a);
  b_1_34 <= std_logic_vector_to_unsigned(b);
  result_12_3_rel <= a_1_31 = b_1_34;
  op <= boolean_to_vector(result_12_3_rel);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity relational_d930162434 is
  port (
    a : in std_logic_vector((4 - 1) downto 0);
    b : in std_logic_vector((4 - 1) downto 0);
    op : out std_logic_vector((1 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end relational_d930162434;


architecture behavior of relational_d930162434 is
  signal a_1_31: unsigned((4 - 1) downto 0);
  signal b_1_34: unsigned((4 - 1) downto 0);
  signal result_14_3_rel: boolean;
begin
  a_1_31 <= std_logic_vector_to_unsigned(a);
  b_1_34 <= std_logic_vector_to_unsigned(b);
  result_14_3_rel <= a_1_31 /= b_1_34;
  op <= boolean_to_vector(result_14_3_rel);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity constant_a1c496ea88 is
  port (
    op : out std_logic_vector((3 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end constant_a1c496ea88;


architecture behavior of constant_a1c496ea88 is
begin
  op <= "001";
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity constant_469094441c is
  port (
    op : out std_logic_vector((3 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end constant_469094441c;


architecture behavior of constant_469094441c is
begin
  op <= "100";
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity relational_8fc7f5539b is
  port (
    a : in std_logic_vector((3 - 1) downto 0);
    b : in std_logic_vector((3 - 1) downto 0);
    op : out std_logic_vector((1 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end relational_8fc7f5539b;


architecture behavior of relational_8fc7f5539b is
  signal a_1_31: unsigned((3 - 1) downto 0);
  signal b_1_34: unsigned((3 - 1) downto 0);
  signal result_12_3_rel: boolean;
begin
  a_1_31 <= std_logic_vector_to_unsigned(a);
  b_1_34 <= std_logic_vector_to_unsigned(b);
  result_12_3_rel <= a_1_31 = b_1_34;
  op <= boolean_to_vector(result_12_3_rel);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity relational_47b317dab6 is
  port (
    a : in std_logic_vector((3 - 1) downto 0);
    b : in std_logic_vector((3 - 1) downto 0);
    op : out std_logic_vector((1 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end relational_47b317dab6;


architecture behavior of relational_47b317dab6 is
  signal a_1_31: unsigned((3 - 1) downto 0);
  signal b_1_34: unsigned((3 - 1) downto 0);
  signal result_14_3_rel: boolean;
begin
  a_1_31 <= std_logic_vector_to_unsigned(a);
  b_1_34 <= std_logic_vector_to_unsigned(b);
  result_14_3_rel <= a_1_31 /= b_1_34;
  op <= boolean_to_vector(result_14_3_rel);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity relational_f9928864ea is
  port (
    a : in std_logic_vector((2 - 1) downto 0);
    b : in std_logic_vector((2 - 1) downto 0);
    op : out std_logic_vector((1 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end relational_f9928864ea;


architecture behavior of relational_f9928864ea is
  signal a_1_31: unsigned((2 - 1) downto 0);
  signal b_1_34: unsigned((2 - 1) downto 0);
  signal result_14_3_rel: boolean;
begin
  a_1_31 <= std_logic_vector_to_unsigned(a);
  b_1_34 <= std_logic_vector_to_unsigned(b);
  result_14_3_rel <= a_1_31 /= b_1_34;
  op <= boolean_to_vector(result_14_3_rel);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity counter_223a0f3237 is
  port (
    rst : in std_logic_vector((1 - 1) downto 0);
    op : out std_logic_vector((1 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end counter_223a0f3237;


architecture behavior of counter_223a0f3237 is
  signal rst_1_40: boolean;
  signal count_reg_20_23: unsigned((1 - 1) downto 0) := "0";
  signal count_reg_20_23_rst: std_logic;
  signal bool_44_4: boolean;
  signal count_reg_join_44_1: unsigned((2 - 1) downto 0);
  signal count_reg_join_44_1_rst: std_logic;
  signal rst_limit_join_44_1: boolean;
begin
  rst_1_40 <= ((rst) = "1");
  proc_count_reg_20_23: process (clk)
  is
  begin
    if (clk'event and (clk = '1')) then
      if ((ce = '1') and (count_reg_20_23_rst = '1')) then
        count_reg_20_23 <= "0";
      elsif (ce = '1') then 
        count_reg_20_23 <= count_reg_20_23 + std_logic_vector_to_unsigned("1");
      end if;
    end if;
  end process proc_count_reg_20_23;
  bool_44_4 <= rst_1_40 or false;
  proc_if_44_1: process (bool_44_4, count_reg_20_23)
  is
  begin
    if bool_44_4 then
      count_reg_join_44_1_rst <= '1';
    else 
      count_reg_join_44_1_rst <= '0';
    end if;
    if bool_44_4 then
      rst_limit_join_44_1 <= false;
    else 
      rst_limit_join_44_1 <= false;
    end if;
  end process proc_if_44_1;
  count_reg_20_23_rst <= count_reg_join_44_1_rst;
  op <= unsigned_to_std_logic_vector(count_reg_20_23);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity delay_0c0a0420a6 is
  port (
    d : in std_logic_vector((36 - 1) downto 0);
    q : out std_logic_vector((36 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end delay_0c0a0420a6;


architecture behavior of delay_0c0a0420a6 is
  signal d_1_22: std_logic_vector((36 - 1) downto 0);
begin
  d_1_22 <= d;
  q <= d_1_22;
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity constant_b437b02512 is
  port (
    op : out std_logic_vector((8 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end constant_b437b02512;


architecture behavior of constant_b437b02512 is
begin
  op <= "00000001";
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity constant_e8aae5d3bb is
  port (
    op : out std_logic_vector((8 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end constant_e8aae5d3bb;


architecture behavior of constant_e8aae5d3bb is
begin
  op <= "10000000";
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity relational_54048c8b02 is
  port (
    a : in std_logic_vector((8 - 1) downto 0);
    b : in std_logic_vector((8 - 1) downto 0);
    op : out std_logic_vector((1 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end relational_54048c8b02;


architecture behavior of relational_54048c8b02 is
  signal a_1_31: unsigned((8 - 1) downto 0);
  signal b_1_34: unsigned((8 - 1) downto 0);
  signal result_12_3_rel: boolean;
begin
  a_1_31 <= std_logic_vector_to_unsigned(a);
  b_1_34 <= std_logic_vector_to_unsigned(b);
  result_12_3_rel <= a_1_31 = b_1_34;
  op <= boolean_to_vector(result_12_3_rel);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity relational_16235eb2bf is
  port (
    a : in std_logic_vector((8 - 1) downto 0);
    b : in std_logic_vector((8 - 1) downto 0);
    op : out std_logic_vector((1 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end relational_16235eb2bf;


architecture behavior of relational_16235eb2bf is
  signal a_1_31: unsigned((8 - 1) downto 0);
  signal b_1_34: unsigned((8 - 1) downto 0);
  signal result_14_3_rel: boolean;
begin
  a_1_31 <= std_logic_vector_to_unsigned(a);
  b_1_34 <= std_logic_vector_to_unsigned(b);
  result_14_3_rel <= a_1_31 /= b_1_34;
  op <= boolean_to_vector(result_14_3_rel);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity mux_f3852fb470 is
  port (
    sel : in std_logic_vector((3 - 1) downto 0);
    d0 : in std_logic_vector((7 - 1) downto 0);
    d1 : in std_logic_vector((7 - 1) downto 0);
    d2 : in std_logic_vector((7 - 1) downto 0);
    d3 : in std_logic_vector((7 - 1) downto 0);
    d4 : in std_logic_vector((7 - 1) downto 0);
    d5 : in std_logic_vector((7 - 1) downto 0);
    d6 : in std_logic_vector((7 - 1) downto 0);
    y : out std_logic_vector((7 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end mux_f3852fb470;


architecture behavior of mux_f3852fb470 is
  signal sel_1_20: std_logic_vector((3 - 1) downto 0);
  signal d0_1_24: std_logic_vector((7 - 1) downto 0);
  signal d1_1_27: std_logic_vector((7 - 1) downto 0);
  signal d2_1_30: std_logic_vector((7 - 1) downto 0);
  signal d3_1_33: std_logic_vector((7 - 1) downto 0);
  signal d4_1_36: std_logic_vector((7 - 1) downto 0);
  signal d5_1_39: std_logic_vector((7 - 1) downto 0);
  signal d6_1_42: std_logic_vector((7 - 1) downto 0);
  type array_type_pipe_26_22 is array (0 to (1 - 1)) of std_logic_vector((7 - 1) downto 0);
  signal pipe_26_22: array_type_pipe_26_22 := (
    0 => "0000000");
  signal pipe_26_22_front_din: std_logic_vector((7 - 1) downto 0);
  signal pipe_26_22_back: std_logic_vector((7 - 1) downto 0);
  signal pipe_26_22_push_front_pop_back_en: std_logic;
  signal unregy_join_6_1: std_logic_vector((7 - 1) downto 0);
begin
  sel_1_20 <= sel;
  d0_1_24 <= d0;
  d1_1_27 <= d1;
  d2_1_30 <= d2;
  d3_1_33 <= d3;
  d4_1_36 <= d4;
  d5_1_39 <= d5;
  d6_1_42 <= d6;
  pipe_26_22_back <= pipe_26_22(0);
  proc_pipe_26_22: process (clk)
  is
    variable i: integer;
  begin
    if (clk'event and (clk = '1')) then
      if ((ce = '1') and (pipe_26_22_push_front_pop_back_en = '1')) then
        pipe_26_22(0) <= pipe_26_22_front_din;
      end if;
    end if;
  end process proc_pipe_26_22;
  proc_switch_6_1: process (d0_1_24, d1_1_27, d2_1_30, d3_1_33, d4_1_36, d5_1_39, d6_1_42, sel_1_20)
  is
  begin
    case sel_1_20 is 
      when "000" =>
        unregy_join_6_1 <= d0_1_24;
      when "001" =>
        unregy_join_6_1 <= d1_1_27;
      when "010" =>
        unregy_join_6_1 <= d2_1_30;
      when "011" =>
        unregy_join_6_1 <= d3_1_33;
      when "100" =>
        unregy_join_6_1 <= d4_1_36;
      when "101" =>
        unregy_join_6_1 <= d5_1_39;
      when others =>
        unregy_join_6_1 <= d6_1_42;
    end case;
  end process proc_switch_6_1;
  pipe_26_22_front_din <= unregy_join_6_1;
  pipe_26_22_push_front_pop_back_en <= '1';
  y <= pipe_26_22_back;
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity delay_092ab65ed6 is
  port (
    d : in std_logic_vector((7 - 1) downto 0);
    q : out std_logic_vector((7 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end delay_092ab65ed6;


architecture behavior of delay_092ab65ed6 is
  signal d_1_22: std_logic_vector((7 - 1) downto 0);
begin
  d_1_22 <= d;
  q <= d_1_22;
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity counter_0009e314f5 is
  port (
    rst : in std_logic_vector((1 - 1) downto 0);
    op : out std_logic_vector((1 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end counter_0009e314f5;


architecture behavior of counter_0009e314f5 is
  signal rst_1_40: boolean;
  signal count_reg_20_23: unsigned((1 - 1) downto 0) := "0";
  signal count_reg_20_23_rst: std_logic;
  signal bool_44_4: boolean;
  signal rst_limit_join_44_1: boolean;
  signal count_reg_join_44_1: signed((3 - 1) downto 0);
  signal count_reg_join_44_1_rst: std_logic;
begin
  rst_1_40 <= ((rst) = "1");
  proc_count_reg_20_23: process (clk)
  is
  begin
    if (clk'event and (clk = '1')) then
      if ((ce = '1') and (count_reg_20_23_rst = '1')) then
        count_reg_20_23 <= "0";
      elsif (ce = '1') then 
        count_reg_20_23 <= count_reg_20_23 - std_logic_vector_to_unsigned("1");
      end if;
    end if;
  end process proc_count_reg_20_23;
  bool_44_4 <= rst_1_40 or false;
  proc_if_44_1: process (bool_44_4, count_reg_20_23)
  is
  begin
    if bool_44_4 then
      count_reg_join_44_1_rst <= '1';
    else 
      count_reg_join_44_1_rst <= '0';
    end if;
    if bool_44_4 then
      rst_limit_join_44_1 <= false;
    else 
      rst_limit_join_44_1 <= false;
    end if;
  end process proc_if_44_1;
  count_reg_20_23_rst <= count_reg_join_44_1_rst;
  op <= unsigned_to_std_logic_vector(count_reg_20_23);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity addsub_43a374a7af is
  port (
    a : in std_logic_vector((26 - 1) downto 0);
    b : in std_logic_vector((26 - 1) downto 0);
    s : out std_logic_vector((26 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end addsub_43a374a7af;


architecture behavior of addsub_43a374a7af is
  signal a_17_32: signed((26 - 1) downto 0);
  signal b_17_35: signed((26 - 1) downto 0);
  type array_type_op_mem_91_20 is array (0 to (2 - 1)) of signed((26 - 1) downto 0);
  signal op_mem_91_20: array_type_op_mem_91_20 := (
    "00000000000000000000000000",
    "00000000000000000000000000");
  signal op_mem_91_20_front_din: signed((26 - 1) downto 0);
  signal op_mem_91_20_back: signed((26 - 1) downto 0);
  signal op_mem_91_20_push_front_pop_back_en: std_logic;
  type array_type_cout_mem_92_22 is array (0 to (2 - 1)) of unsigned((1 - 1) downto 0);
  signal cout_mem_92_22: array_type_cout_mem_92_22 := (
    "0",
    "0");
  signal cout_mem_92_22_front_din: unsigned((1 - 1) downto 0);
  signal cout_mem_92_22_back: unsigned((1 - 1) downto 0);
  signal cout_mem_92_22_push_front_pop_back_en: std_logic;
  signal prev_mode_93_22_next: unsigned((3 - 1) downto 0);
  signal prev_mode_93_22: unsigned((3 - 1) downto 0);
  signal prev_mode_93_22_reg_i: std_logic_vector((3 - 1) downto 0);
  signal prev_mode_93_22_reg_o: std_logic_vector((3 - 1) downto 0);
  signal cast_69_18: signed((27 - 1) downto 0);
  signal cast_69_22: signed((27 - 1) downto 0);
  signal internal_s_69_5_addsub: signed((27 - 1) downto 0);
  signal cast_internal_s_83_3_convert: signed((26 - 1) downto 0);
begin
  a_17_32 <= std_logic_vector_to_signed(a);
  b_17_35 <= std_logic_vector_to_signed(b);
  op_mem_91_20_back <= op_mem_91_20(1);
  proc_op_mem_91_20: process (clk)
  is
    variable i: integer;
  begin
    if (clk'event and (clk = '1')) then
      if ((ce = '1') and (op_mem_91_20_push_front_pop_back_en = '1')) then
        for i in 1 downto 1 loop 
          op_mem_91_20(i) <= op_mem_91_20(i-1);
        end loop;
        op_mem_91_20(0) <= op_mem_91_20_front_din;
      end if;
    end if;
  end process proc_op_mem_91_20;
  cout_mem_92_22_back <= cout_mem_92_22(1);
  proc_cout_mem_92_22: process (clk)
  is
    variable i_x_000000: integer;
  begin
    if (clk'event and (clk = '1')) then
      if ((ce = '1') and (cout_mem_92_22_push_front_pop_back_en = '1')) then
        for i_x_000000 in 1 downto 1 loop 
          cout_mem_92_22(i_x_000000) <= cout_mem_92_22(i_x_000000-1);
        end loop;
        cout_mem_92_22(0) <= cout_mem_92_22_front_din;
      end if;
    end if;
  end process proc_cout_mem_92_22;
  prev_mode_93_22_reg_i <= unsigned_to_std_logic_vector(prev_mode_93_22_next);
  prev_mode_93_22 <= std_logic_vector_to_unsigned(prev_mode_93_22_reg_o);
  prev_mode_93_22_reg_inst: entity work.synth_reg_w_init
    generic map (
      init_index => 2, 
      init_value => b"010", 
      latency => 1, 
      width => 3)
    port map (
      ce => ce, 
      clk => clk, 
      clr => clr, 
      i => prev_mode_93_22_reg_i, 
      o => prev_mode_93_22_reg_o);
  cast_69_18 <= s2s_cast(a_17_32, 24, 27, 24);
  cast_69_22 <= s2s_cast(b_17_35, 24, 27, 24);
  internal_s_69_5_addsub <= cast_69_18 + cast_69_22;
  cast_internal_s_83_3_convert <= s2s_cast(internal_s_69_5_addsub, 24, 26, 24);
  op_mem_91_20_front_din <= cast_internal_s_83_3_convert;
  op_mem_91_20_push_front_pop_back_en <= '1';
  cout_mem_92_22_front_din <= std_logic_vector_to_unsigned("0");
  cout_mem_92_22_push_front_pop_back_en <= '1';
  prev_mode_93_22_next <= std_logic_vector_to_unsigned("000");
  s <= signed_to_std_logic_vector(op_mem_91_20_back);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity mult_4fae336f61 is
  port (
    a : in std_logic_vector((8 - 1) downto 0);
    b : in std_logic_vector((18 - 1) downto 0);
    p : out std_logic_vector((26 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end mult_4fae336f61;


architecture behavior of mult_4fae336f61 is
  signal a_1_22: signed((8 - 1) downto 0);
  signal b_1_25: signed((18 - 1) downto 0);
  type array_type_op_mem_65_20 is array (0 to (3 - 1)) of signed((26 - 1) downto 0);
  signal op_mem_65_20: array_type_op_mem_65_20 := (
    "00000000000000000000000000",
    "00000000000000000000000000",
    "00000000000000000000000000");
  signal op_mem_65_20_front_din: signed((26 - 1) downto 0);
  signal op_mem_65_20_back: signed((26 - 1) downto 0);
  signal op_mem_65_20_push_front_pop_back_en: std_logic;
  signal mult_46_56: signed((26 - 1) downto 0);
begin
  a_1_22 <= std_logic_vector_to_signed(a);
  b_1_25 <= std_logic_vector_to_signed(b);
  op_mem_65_20_back <= op_mem_65_20(2);
  proc_op_mem_65_20: process (clk)
  is
    variable i: integer;
  begin
    if (clk'event and (clk = '1')) then
      if ((ce = '1') and (op_mem_65_20_push_front_pop_back_en = '1')) then
        for i in 2 downto 1 loop 
          op_mem_65_20(i) <= op_mem_65_20(i-1);
        end loop;
        op_mem_65_20(0) <= op_mem_65_20_front_din;
      end if;
    end if;
  end process proc_op_mem_65_20;
  mult_46_56 <= (a_1_22 * b_1_25);
  op_mem_65_20_front_din <= mult_46_56;
  op_mem_65_20_push_front_pop_back_en <= '1';
  p <= signed_to_std_logic_vector(op_mem_65_20_back);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity reinterpret_4389dc89bf is
  port (
    input_port : in std_logic_vector((8 - 1) downto 0);
    output_port : out std_logic_vector((8 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end reinterpret_4389dc89bf;


architecture behavior of reinterpret_4389dc89bf is
  signal input_port_1_40: unsigned((8 - 1) downto 0);
  signal output_port_5_5_force: signed((8 - 1) downto 0);
begin
  input_port_1_40 <= std_logic_vector_to_unsigned(input_port);
  output_port_5_5_force <= unsigned_to_signed(input_port_1_40);
  output_port <= signed_to_std_logic_vector(output_port_5_5_force);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity scale_f01f7ce486 is
  port (
    ip : in std_logic_vector((26 - 1) downto 0);
    op : out std_logic_vector((26 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end scale_f01f7ce486;


architecture behavior of scale_f01f7ce486 is
  signal ip_17_23: signed((26 - 1) downto 0);
begin
  ip_17_23 <= std_logic_vector_to_signed(ip);
  op <= signed_to_std_logic_vector(ip_17_23);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity concat_b3936f83fc is
  port (
    in0 : in std_logic_vector((1 - 1) downto 0);
    in1 : in std_logic_vector((32 - 1) downto 0);
    y : out std_logic_vector((33 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end concat_b3936f83fc;


architecture behavior of concat_b3936f83fc is
  signal in0_1_23: unsigned((1 - 1) downto 0);
  signal in1_1_27: unsigned((32 - 1) downto 0);
  signal y_2_1_concat: unsigned((33 - 1) downto 0);
begin
  in0_1_23 <= std_logic_vector_to_unsigned(in0);
  in1_1_27 <= std_logic_vector_to_unsigned(in1);
  y_2_1_concat <= std_logic_vector_to_unsigned(unsigned_to_std_logic_vector(in0_1_23) & unsigned_to_std_logic_vector(in1_1_27));
  y <= unsigned_to_std_logic_vector(y_2_1_concat);
end behavior;


-------------------------------------------------------------------
-- System Generator version 14.6 VHDL source file.
--
-- Copyright(C) 2013 by Xilinx, Inc.  All rights reserved.  This
-- text/file contains proprietary, confidential information of Xilinx,
-- Inc., is distributed under license from Xilinx, Inc., and may be used,
-- copied and/or disclosed only pursuant to the terms of a valid license
-- agreement with Xilinx, Inc.  Xilinx hereby grants you a license to use
-- this text/file solely for design, simulation, implementation and
-- creation of design files limited to Xilinx devices or technologies.
-- Use with non-Xilinx devices or technologies is expressly prohibited
-- and immediately terminates your license unless covered by a separate
-- agreement.
--
-- Xilinx is providing this design, code, or information "as is" solely
-- for use in developing programs and solutions for Xilinx devices.  By
-- providing this design, code, or information as one possible
-- implementation of this feature, application or standard, Xilinx is
-- making no representation that this implementation is free from any
-- claims of infringement.  You are responsible for obtaining any rights
-- you may require for your implementation.  Xilinx expressly disclaims
-- any warranty whatsoever with respect to the adequacy of the
-- implementation, including but not limited to warranties of
-- merchantability or fitness for a particular purpose.
--
-- Xilinx products are not intended for use in life support appliances,
-- devices, or systems.  Use in such applications is expressly prohibited.
--
-- Any modifications that are made to the source code are done at the user's
-- sole risk and will be unsupported.
--
-- This copyright and support notice must be retained as part of this
-- text at all times.  (c) Copyright 1995-2013 Xilinx, Inc.  All rights
-- reserved.
-------------------------------------------------------------------
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;
entity xlpassthrough is
    generic (
        din_width    : integer := 16;
        dout_width   : integer := 16
        );
    port (
        din : in std_logic_vector (din_width-1 downto 0);
        dout : out std_logic_vector (dout_width-1 downto 0));
end xlpassthrough;
architecture passthrough_arch of xlpassthrough is
begin
  dout <= din;
end passthrough_arch;
library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity delay_f78bae76bd is
  port (
    d : in std_logic_vector((33 - 1) downto 0);
    q : out std_logic_vector((33 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end delay_f78bae76bd;


architecture behavior of delay_f78bae76bd is
  signal d_1_22: std_logic_vector((33 - 1) downto 0);
  type array_type_op_mem_20_24 is array (0 to (2 - 1)) of std_logic_vector((33 - 1) downto 0);
  signal op_mem_20_24: array_type_op_mem_20_24 := (
    "000000000000000000000000000000000",
    "000000000000000000000000000000000");
  signal op_mem_20_24_front_din: std_logic_vector((33 - 1) downto 0);
  signal op_mem_20_24_back: std_logic_vector((33 - 1) downto 0);
  signal op_mem_20_24_push_front_pop_back_en: std_logic;
begin
  d_1_22 <= d;
  op_mem_20_24_back <= op_mem_20_24(1);
  proc_op_mem_20_24: process (clk)
  is
    variable i: integer;
  begin
    if (clk'event and (clk = '1')) then
      if ((ce = '1') and (op_mem_20_24_push_front_pop_back_en = '1')) then
        for i in 1 downto 1 loop 
          op_mem_20_24(i) <= op_mem_20_24(i-1);
        end loop;
        op_mem_20_24(0) <= op_mem_20_24_front_din;
      end if;
    end if;
  end process proc_op_mem_20_24;
  op_mem_20_24_front_din <= d_1_22;
  op_mem_20_24_push_front_pop_back_en <= '1';
  q <= op_mem_20_24_back;
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity relational_e885809f2f is
  port (
    a : in std_logic_vector((48 - 1) downto 0);
    b : in std_logic_vector((48 - 1) downto 0);
    op : out std_logic_vector((1 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end relational_e885809f2f;


architecture behavior of relational_e885809f2f is
  signal a_1_31: unsigned((48 - 1) downto 0);
  signal b_1_34: unsigned((48 - 1) downto 0);
  type array_type_op_mem_32_22 is array (0 to (1 - 1)) of boolean;
  signal op_mem_32_22: array_type_op_mem_32_22 := (
    0 => false);
  signal op_mem_32_22_front_din: boolean;
  signal op_mem_32_22_back: boolean;
  signal op_mem_32_22_push_front_pop_back_en: std_logic;
  signal result_12_3_rel: boolean;
begin
  a_1_31 <= std_logic_vector_to_unsigned(a);
  b_1_34 <= std_logic_vector_to_unsigned(b);
  op_mem_32_22_back <= op_mem_32_22(0);
  proc_op_mem_32_22: process (clk)
  is
    variable i: integer;
  begin
    if (clk'event and (clk = '1')) then
      if ((ce = '1') and (op_mem_32_22_push_front_pop_back_en = '1')) then
        op_mem_32_22(0) <= op_mem_32_22_front_din;
      end if;
    end if;
  end process proc_op_mem_32_22;
  result_12_3_rel <= a_1_31 = b_1_34;
  op_mem_32_22_front_din <= result_12_3_rel;
  op_mem_32_22_push_front_pop_back_en <= '1';
  op <= boolean_to_vector(op_mem_32_22_back);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity delay_3f5b23b538 is
  port (
    d : in std_logic_vector((32 - 1) downto 0);
    q : out std_logic_vector((32 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end delay_3f5b23b538;


architecture behavior of delay_3f5b23b538 is
  signal d_1_22: std_logic_vector((32 - 1) downto 0);
  type array_type_op_mem_20_24 is array (0 to (2 - 1)) of std_logic_vector((32 - 1) downto 0);
  signal op_mem_20_24: array_type_op_mem_20_24 := (
    "00000000000000000000000000000000",
    "00000000000000000000000000000000");
  signal op_mem_20_24_front_din: std_logic_vector((32 - 1) downto 0);
  signal op_mem_20_24_back: std_logic_vector((32 - 1) downto 0);
  signal op_mem_20_24_push_front_pop_back_en: std_logic;
begin
  d_1_22 <= d;
  op_mem_20_24_back <= op_mem_20_24(1);
  proc_op_mem_20_24: process (clk)
  is
    variable i: integer;
  begin
    if (clk'event and (clk = '1')) then
      if ((ce = '1') and (op_mem_20_24_push_front_pop_back_en = '1')) then
        for i in 1 downto 1 loop 
          op_mem_20_24(i) <= op_mem_20_24(i-1);
        end loop;
        op_mem_20_24(0) <= op_mem_20_24_front_din;
      end if;
    end if;
  end process proc_op_mem_20_24;
  op_mem_20_24_front_din <= d_1_22;
  op_mem_20_24_push_front_pop_back_en <= '1';
  q <= op_mem_20_24_back;
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity mux_7f6b7da686 is
  port (
    sel : in std_logic_vector((1 - 1) downto 0);
    d0 : in std_logic_vector((8 - 1) downto 0);
    d1 : in std_logic_vector((8 - 1) downto 0);
    y : out std_logic_vector((8 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end mux_7f6b7da686;


architecture behavior of mux_7f6b7da686 is
  signal sel_1_20: std_logic_vector((1 - 1) downto 0);
  signal d0_1_24: std_logic_vector((8 - 1) downto 0);
  signal d1_1_27: std_logic_vector((8 - 1) downto 0);
  type array_type_pipe_16_22 is array (0 to (1 - 1)) of std_logic_vector((8 - 1) downto 0);
  signal pipe_16_22: array_type_pipe_16_22 := (
    0 => "00000000");
  signal pipe_16_22_front_din: std_logic_vector((8 - 1) downto 0);
  signal pipe_16_22_back: std_logic_vector((8 - 1) downto 0);
  signal pipe_16_22_push_front_pop_back_en: std_logic;
  signal unregy_join_6_1: std_logic_vector((8 - 1) downto 0);
begin
  sel_1_20 <= sel;
  d0_1_24 <= d0;
  d1_1_27 <= d1;
  pipe_16_22_back <= pipe_16_22(0);
  proc_pipe_16_22: process (clk)
  is
    variable i: integer;
  begin
    if (clk'event and (clk = '1')) then
      if ((ce = '1') and (pipe_16_22_push_front_pop_back_en = '1')) then
        pipe_16_22(0) <= pipe_16_22_front_din;
      end if;
    end if;
  end process proc_pipe_16_22;
  proc_switch_6_1: process (d0_1_24, d1_1_27, sel_1_20)
  is
  begin
    case sel_1_20 is 
      when "0" =>
        unregy_join_6_1 <= d0_1_24;
      when others =>
        unregy_join_6_1 <= d1_1_27;
    end case;
  end process proc_switch_6_1;
  pipe_16_22_front_din <= unregy_join_6_1;
  pipe_16_22_push_front_pop_back_en <= '1';
  y <= pipe_16_22_back;
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity addsub_fb71f56222 is
  port (
    a : in std_logic_vector((11 - 1) downto 0);
    b : in std_logic_vector((11 - 1) downto 0);
    s : out std_logic_vector((11 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end addsub_fb71f56222;


architecture behavior of addsub_fb71f56222 is
  signal a_17_32: unsigned((11 - 1) downto 0);
  signal b_17_35: unsigned((11 - 1) downto 0);
  type array_type_op_mem_91_20 is array (0 to (1 - 1)) of unsigned((11 - 1) downto 0);
  signal op_mem_91_20: array_type_op_mem_91_20 := (
    0 => "00000000000");
  signal op_mem_91_20_front_din: unsigned((11 - 1) downto 0);
  signal op_mem_91_20_back: unsigned((11 - 1) downto 0);
  signal op_mem_91_20_push_front_pop_back_en: std_logic;
  type array_type_cout_mem_92_22 is array (0 to (1 - 1)) of unsigned((1 - 1) downto 0);
  signal cout_mem_92_22: array_type_cout_mem_92_22 := (
    0 => "0");
  signal cout_mem_92_22_front_din: unsigned((1 - 1) downto 0);
  signal cout_mem_92_22_back: unsigned((1 - 1) downto 0);
  signal cout_mem_92_22_push_front_pop_back_en: std_logic;
  signal prev_mode_93_22_next: unsigned((3 - 1) downto 0);
  signal prev_mode_93_22: unsigned((3 - 1) downto 0);
  signal prev_mode_93_22_reg_i: std_logic_vector((3 - 1) downto 0);
  signal prev_mode_93_22_reg_o: std_logic_vector((3 - 1) downto 0);
  signal cast_71_18: signed((13 - 1) downto 0);
  signal cast_71_22: signed((13 - 1) downto 0);
  signal internal_s_71_5_addsub: signed((13 - 1) downto 0);
  signal cast_internal_s_83_3_convert: unsigned((11 - 1) downto 0);
begin
  a_17_32 <= std_logic_vector_to_unsigned(a);
  b_17_35 <= std_logic_vector_to_unsigned(b);
  op_mem_91_20_back <= op_mem_91_20(0);
  proc_op_mem_91_20: process (clk)
  is
    variable i: integer;
  begin
    if (clk'event and (clk = '1')) then
      if ((ce = '1') and (op_mem_91_20_push_front_pop_back_en = '1')) then
        op_mem_91_20(0) <= op_mem_91_20_front_din;
      end if;
    end if;
  end process proc_op_mem_91_20;
  cout_mem_92_22_back <= cout_mem_92_22(0);
  proc_cout_mem_92_22: process (clk)
  is
    variable i_x_000000: integer;
  begin
    if (clk'event and (clk = '1')) then
      if ((ce = '1') and (cout_mem_92_22_push_front_pop_back_en = '1')) then
        cout_mem_92_22(0) <= cout_mem_92_22_front_din;
      end if;
    end if;
  end process proc_cout_mem_92_22;
  prev_mode_93_22_reg_i <= unsigned_to_std_logic_vector(prev_mode_93_22_next);
  prev_mode_93_22 <= std_logic_vector_to_unsigned(prev_mode_93_22_reg_o);
  prev_mode_93_22_reg_inst: entity work.synth_reg_w_init
    generic map (
      init_index => 2, 
      init_value => b"010", 
      latency => 1, 
      width => 3)
    port map (
      ce => ce, 
      clk => clk, 
      clr => clr, 
      i => prev_mode_93_22_reg_i, 
      o => prev_mode_93_22_reg_o);
  cast_71_18 <= u2s_cast(a_17_32, 0, 13, 0);
  cast_71_22 <= u2s_cast(b_17_35, 0, 13, 0);
  internal_s_71_5_addsub <= cast_71_18 - cast_71_22;
  cast_internal_s_83_3_convert <= s2u_cast(internal_s_71_5_addsub, 0, 11, 0);
  op_mem_91_20_front_din <= cast_internal_s_83_3_convert;
  op_mem_91_20_push_front_pop_back_en <= '1';
  cout_mem_92_22_front_din <= std_logic_vector_to_unsigned("0");
  cout_mem_92_22_push_front_pop_back_en <= '1';
  prev_mode_93_22_next <= std_logic_vector_to_unsigned("000");
  s <= unsigned_to_std_logic_vector(op_mem_91_20_back);
end behavior;


-------------------------------------------------------------------
-- System Generator version 14.6 VHDL source file.
--
-- Copyright(C) 2013 by Xilinx, Inc.  All rights reserved.  This
-- text/file contains proprietary, confidential information of Xilinx,
-- Inc., is distributed under license from Xilinx, Inc., and may be used,
-- copied and/or disclosed only pursuant to the terms of a valid license
-- agreement with Xilinx, Inc.  Xilinx hereby grants you a license to use
-- this text/file solely for design, simulation, implementation and
-- creation of design files limited to Xilinx devices or technologies.
-- Use with non-Xilinx devices or technologies is expressly prohibited
-- and immediately terminates your license unless covered by a separate
-- agreement.
--
-- Xilinx is providing this design, code, or information "as is" solely
-- for use in developing programs and solutions for Xilinx devices.  By
-- providing this design, code, or information as one possible
-- implementation of this feature, application or standard, Xilinx is
-- making no representation that this implementation is free from any
-- claims of infringement.  You are responsible for obtaining any rights
-- you may require for your implementation.  Xilinx expressly disclaims
-- any warranty whatsoever with respect to the adequacy of the
-- implementation, including but not limited to warranties of
-- merchantability or fitness for a particular purpose.
--
-- Xilinx products are not intended for use in life support appliances,
-- devices, or systems.  Use in such applications is expressly prohibited.
--
-- Any modifications that are made to the source code are done at the user's
-- sole risk and will be unsupported.
--
-- This copyright and support notice must be retained as part of this
-- text at all times.  (c) Copyright 1995-2013 Xilinx, Inc.  All rights
-- reserved.
-------------------------------------------------------------------
-- synopsys translate_off
library XilinxCoreLib;
-- synopsys translate_on
library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.std_logic_arith.all;
use work.conv_pkg.all;
entity xldpram_c09f12_01 is
  generic (
    core_name0: string := "";
    c_width_a: integer := 13;
    c_address_width_a: integer := 4;
    c_width_b: integer := 13;
    c_address_width_b: integer := 4;
    c_has_sinita: integer := 0;
    c_has_sinitb: integer := 0;
    latency: integer := 1
  );
  port (
    dina: in std_logic_vector(c_width_a - 1 downto 0);
    addra: in std_logic_vector(c_address_width_a - 1 downto 0);
    wea: in std_logic_vector(0 downto 0);
    a_ce: in std_logic;
    a_clk: in std_logic;
    rsta: in std_logic_vector(0 downto 0) := (others => '0');
    ena: in std_logic_vector(0 downto 0) := (others => '1');
    douta: out std_logic_vector(c_width_a - 1 downto 0);
    dinb: in std_logic_vector(c_width_b - 1 downto 0);
    addrb: in std_logic_vector(c_address_width_b - 1 downto 0);
    web: in std_logic_vector(0 downto 0);
    b_ce: in std_logic;
    b_clk: in std_logic;
    rstb: in std_logic_vector(0 downto 0) := (others => '0');
    enb: in std_logic_vector(0 downto 0) := (others => '1');
    doutb: out std_logic_vector(c_width_b - 1 downto 0)
  );
end xldpram_c09f12_01;
architecture behavior of xldpram_c09f12_01 is
  component synth_reg
    generic (
      width: integer;
      latency: integer
    );
    port (
      i: in std_logic_vector(width - 1 downto 0);
      ce: in std_logic;
      clr: in std_logic;
      clk: in std_logic;
      o: out std_logic_vector(width - 1 downto 0)
    );
  end component;

  signal core_addra: std_logic_vector(c_address_width_a - 1 downto 0);
  signal core_addrb: std_logic_vector(c_address_width_b - 1 downto 0);
  signal core_dina, core_douta, dly_douta:
    std_logic_vector(c_width_a - 1 downto 0);
  signal core_dinb, core_doutb, dly_doutb:
    std_logic_vector(c_width_b - 1 downto 0);
  signal core_wea, core_web: std_logic;
  signal core_a_ce, core_b_ce: std_logic;
  signal sinita, sinitb: std_logic;

  component bmg_72_a613d001e124acbe
    port (
        addra: in std_logic_vector(c_address_width_a - 1 downto 0);
      addrb: in std_logic_vector(c_address_width_b - 1 downto 0);
      dina: in std_logic_vector(c_width_a - 1 downto 0);
      dinb: in std_logic_vector(c_width_b - 1 downto 0);
      clka: in std_logic;
      clkb: in std_logic;
      wea: in std_logic_vector(0 downto 0);
      web: in std_logic_vector(0 downto 0);
      ena: in std_logic;
      enb: in std_logic;
      douta: out std_logic_vector(c_width_a - 1 downto 0);
      doutb: out std_logic_vector(c_width_b - 1 downto 0)
     );
  end component;

  attribute syn_black_box of bmg_72_a613d001e124acbe:
    component is true;
  attribute fpga_dont_touch of bmg_72_a613d001e124acbe:
    component is "true";
  attribute box_type of bmg_72_a613d001e124acbe:
    component  is "black_box";
  component bmg_72_3bc6d5a32af9b138
    port (
        addra: in std_logic_vector(c_address_width_a - 1 downto 0);
      addrb: in std_logic_vector(c_address_width_b - 1 downto 0);
      dina: in std_logic_vector(c_width_a - 1 downto 0);
      dinb: in std_logic_vector(c_width_b - 1 downto 0);
      clka: in std_logic;
      clkb: in std_logic;
      wea: in std_logic_vector(0 downto 0);
      web: in std_logic_vector(0 downto 0);
      ena: in std_logic;
      enb: in std_logic;
      douta: out std_logic_vector(c_width_a - 1 downto 0);
      doutb: out std_logic_vector(c_width_b - 1 downto 0)
     );
  end component;

  attribute syn_black_box of bmg_72_3bc6d5a32af9b138:
    component is true;
  attribute fpga_dont_touch of bmg_72_3bc6d5a32af9b138:
    component is "true";
  attribute box_type of bmg_72_3bc6d5a32af9b138:
    component  is "black_box";
begin
  core_addra <= addra;
  core_dina <= dina;
  douta <= dly_douta;
  core_wea <= wea(0);
  core_a_ce <= a_ce and ena(0);
  sinita <= rsta(0) and a_ce;

  core_addrb <= addrb;
  core_dinb <= dinb;
  doutb <= dly_doutb;
  core_web <= web(0);
  core_b_ce <= b_ce and enb(0);
  sinitb <= rstb(0) and b_ce;
  comp0: if ((core_name0 = "bmg_72_a613d001e124acbe")) generate
    core_instance0: bmg_72_a613d001e124acbe
      port map (
          addra => core_addra,
        clka => a_clk,
        addrb => core_addrb,
        clkb => b_clk,
        dina => core_dina,
        wea(0) => core_wea,
        dinb => core_dinb,
        web(0) => core_web,
        ena => core_a_ce,
        enb => core_b_ce,
        douta => core_douta,
        doutb => core_doutb
      );
  end generate;
  comp1: if ((core_name0 = "bmg_72_3bc6d5a32af9b138")) generate
    core_instance1: bmg_72_3bc6d5a32af9b138
      port map (
          addra => core_addra,
        clka => a_clk,
        addrb => core_addrb,
        clkb => b_clk,
        dina => core_dina,
        wea(0) => core_wea,
        dinb => core_dinb,
        web(0) => core_web,
        ena => core_a_ce,
        enb => core_b_ce,
        douta => core_douta,
        doutb => core_doutb
      );
  end generate;
  latency_test: if (latency > 2) generate
    regA: synth_reg
      generic map (
        width => c_width_a,
        latency => latency - 2
      )
      port map (
        i => core_douta,
        ce => core_a_ce,
        clr => '0',
        clk => a_clk,
        o => dly_douta
      );
    regB: synth_reg
      generic map (
        width => c_width_b,
        latency => latency - 2
      )
      port map (
        i => core_doutb,
        ce => core_b_ce,
        clr => '0',
        clk => b_clk,
        o => dly_doutb
      );
  end generate;
  latency1: if (latency <= 2) generate
    dly_douta <= core_douta;
    dly_doutb <= core_doutb;
  end generate;
end  behavior;
library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity counter_e4b8f9ed4e is
  port (
    op : out std_logic_vector((11 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end counter_e4b8f9ed4e;


architecture behavior of counter_e4b8f9ed4e is
  signal count_reg_20_23: unsigned((11 - 1) downto 0) := "00000000000";
begin
  proc_count_reg_20_23: process (clk)
  is
  begin
    if (clk'event and (clk = '1')) then
      if (ce = '1') then
        count_reg_20_23 <= count_reg_20_23 + std_logic_vector_to_unsigned("00000000001");
      end if;
    end if;
  end process proc_count_reg_20_23;
  op <= unsigned_to_std_logic_vector(count_reg_20_23);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity addsub_cba407adc0 is
  port (
    a : in std_logic_vector((11 - 1) downto 0);
    b : in std_logic_vector((12 - 1) downto 0);
    s : out std_logic_vector((11 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end addsub_cba407adc0;


architecture behavior of addsub_cba407adc0 is
  signal a_17_32: unsigned((11 - 1) downto 0);
  signal b_17_35: unsigned((12 - 1) downto 0);
  type array_type_op_mem_91_20 is array (0 to (1 - 1)) of unsigned((11 - 1) downto 0);
  signal op_mem_91_20: array_type_op_mem_91_20 := (
    0 => "00000000000");
  signal op_mem_91_20_front_din: unsigned((11 - 1) downto 0);
  signal op_mem_91_20_back: unsigned((11 - 1) downto 0);
  signal op_mem_91_20_push_front_pop_back_en: std_logic;
  type array_type_cout_mem_92_22 is array (0 to (1 - 1)) of unsigned((1 - 1) downto 0);
  signal cout_mem_92_22: array_type_cout_mem_92_22 := (
    0 => "0");
  signal cout_mem_92_22_front_din: unsigned((1 - 1) downto 0);
  signal cout_mem_92_22_back: unsigned((1 - 1) downto 0);
  signal cout_mem_92_22_push_front_pop_back_en: std_logic;
  signal prev_mode_93_22_next: unsigned((3 - 1) downto 0);
  signal prev_mode_93_22: unsigned((3 - 1) downto 0);
  signal prev_mode_93_22_reg_i: std_logic_vector((3 - 1) downto 0);
  signal prev_mode_93_22_reg_o: std_logic_vector((3 - 1) downto 0);
  signal cast_71_18: signed((14 - 1) downto 0);
  signal cast_71_22: signed((14 - 1) downto 0);
  signal internal_s_71_5_addsub: signed((14 - 1) downto 0);
  signal cast_internal_s_83_3_convert: unsigned((11 - 1) downto 0);
begin
  a_17_32 <= std_logic_vector_to_unsigned(a);
  b_17_35 <= std_logic_vector_to_unsigned(b);
  op_mem_91_20_back <= op_mem_91_20(0);
  proc_op_mem_91_20: process (clk)
  is
    variable i: integer;
  begin
    if (clk'event and (clk = '1')) then
      if ((ce = '1') and (op_mem_91_20_push_front_pop_back_en = '1')) then
        op_mem_91_20(0) <= op_mem_91_20_front_din;
      end if;
    end if;
  end process proc_op_mem_91_20;
  cout_mem_92_22_back <= cout_mem_92_22(0);
  proc_cout_mem_92_22: process (clk)
  is
    variable i_x_000000: integer;
  begin
    if (clk'event and (clk = '1')) then
      if ((ce = '1') and (cout_mem_92_22_push_front_pop_back_en = '1')) then
        cout_mem_92_22(0) <= cout_mem_92_22_front_din;
      end if;
    end if;
  end process proc_cout_mem_92_22;
  prev_mode_93_22_reg_i <= unsigned_to_std_logic_vector(prev_mode_93_22_next);
  prev_mode_93_22 <= std_logic_vector_to_unsigned(prev_mode_93_22_reg_o);
  prev_mode_93_22_reg_inst: entity work.synth_reg_w_init
    generic map (
      init_index => 2, 
      init_value => b"010", 
      latency => 1, 
      width => 3)
    port map (
      ce => ce, 
      clk => clk, 
      clr => clr, 
      i => prev_mode_93_22_reg_i, 
      o => prev_mode_93_22_reg_o);
  cast_71_18 <= u2s_cast(a_17_32, 0, 14, 0);
  cast_71_22 <= u2s_cast(b_17_35, 0, 14, 0);
  internal_s_71_5_addsub <= cast_71_18 - cast_71_22;
  cast_internal_s_83_3_convert <= s2u_cast(internal_s_71_5_addsub, 0, 11, 0);
  op_mem_91_20_front_din <= cast_internal_s_83_3_convert;
  op_mem_91_20_push_front_pop_back_en <= '1';
  cout_mem_92_22_front_din <= std_logic_vector_to_unsigned("0");
  cout_mem_92_22_push_front_pop_back_en <= '1';
  prev_mode_93_22_next <= std_logic_vector_to_unsigned("000");
  s <= unsigned_to_std_logic_vector(op_mem_91_20_back);
end behavior;


-------------------------------------------------------------------
-- System Generator version 14.6 VHDL source file.
--
-- Copyright(C) 2013 by Xilinx, Inc.  All rights reserved.  This
-- text/file contains proprietary, confidential information of Xilinx,
-- Inc., is distributed under license from Xilinx, Inc., and may be used,
-- copied and/or disclosed only pursuant to the terms of a valid license
-- agreement with Xilinx, Inc.  Xilinx hereby grants you a license to use
-- this text/file solely for design, simulation, implementation and
-- creation of design files limited to Xilinx devices or technologies.
-- Use with non-Xilinx devices or technologies is expressly prohibited
-- and immediately terminates your license unless covered by a separate
-- agreement.
--
-- Xilinx is providing this design, code, or information "as is" solely
-- for use in developing programs and solutions for Xilinx devices.  By
-- providing this design, code, or information as one possible
-- implementation of this feature, application or standard, Xilinx is
-- making no representation that this implementation is free from any
-- claims of infringement.  You are responsible for obtaining any rights
-- you may require for your implementation.  Xilinx expressly disclaims
-- any warranty whatsoever with respect to the adequacy of the
-- implementation, including but not limited to warranties of
-- merchantability or fitness for a particular purpose.
--
-- Xilinx products are not intended for use in life support appliances,
-- devices, or systems.  Use in such applications is expressly prohibited.
--
-- Any modifications that are made to the source code are done at the user's
-- sole risk and will be unsupported.
--
-- This copyright and support notice must be retained as part of this
-- text at all times.  (c) Copyright 1995-2013 Xilinx, Inc.  All rights
-- reserved.
-------------------------------------------------------------------
-- synopsys translate_off
library XilinxCoreLib;
-- synopsys translate_on
library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.std_logic_arith.all;
use work.conv_pkg.all;
entity xladdsub_c09f12_01 is
  generic (
    core_name0: string := "";
    a_width: integer := 16;
    a_bin_pt: integer := 4;
    a_arith: integer := xlUnsigned;
    c_in_width: integer := 16;
    c_in_bin_pt: integer := 4;
    c_in_arith: integer := xlUnsigned;
    c_out_width: integer := 16;
    c_out_bin_pt: integer := 4;
    c_out_arith: integer := xlUnsigned;
    b_width: integer := 8;
    b_bin_pt: integer := 2;
    b_arith: integer := xlUnsigned;
    s_width: integer := 17;
    s_bin_pt: integer := 4;
    s_arith: integer := xlUnsigned;
    rst_width: integer := 1;
    rst_bin_pt: integer := 0;
    rst_arith: integer := xlUnsigned;
    en_width: integer := 1;
    en_bin_pt: integer := 0;
    en_arith: integer := xlUnsigned;
    full_s_width: integer := 17;
    full_s_arith: integer := xlUnsigned;
    mode: integer := xlAddMode;
    extra_registers: integer := 0;
    latency: integer := 0;
    quantization: integer := xlTruncate;
    overflow: integer := xlWrap;
    c_latency: integer := 0;
    c_output_width: integer := 17;
    c_has_c_in : integer := 0;
    c_has_c_out : integer := 0
  );
  port (
    a: in std_logic_vector(a_width - 1 downto 0);
    b: in std_logic_vector(b_width - 1 downto 0);
    c_in : in std_logic_vector (0 downto 0) := "0";
    ce: in std_logic;
    clr: in std_logic := '0';
    clk: in std_logic;
    rst: in std_logic_vector(rst_width - 1 downto 0) := "0";
    en: in std_logic_vector(en_width - 1 downto 0) := "1";
    c_out : out std_logic_vector (0 downto 0);
    s: out std_logic_vector(s_width - 1 downto 0)
  );
end xladdsub_c09f12_01;
architecture behavior of xladdsub_c09f12_01 is
  component synth_reg
    generic (
      width: integer := 16;
      latency: integer := 5
    );
    port (
      i: in std_logic_vector(width - 1 downto 0);
      ce: in std_logic;
      clr: in std_logic;
      clk: in std_logic;
      o: out std_logic_vector(width - 1 downto 0)
    );
  end component;
  function format_input(inp: std_logic_vector; old_width, delta, new_arith,
                        new_width: integer)
    return std_logic_vector
  is
    variable vec: std_logic_vector(old_width-1 downto 0);
    variable padded_inp: std_logic_vector((old_width + delta)-1  downto 0);
    variable result: std_logic_vector(new_width-1 downto 0);
  begin
    vec := inp;
    if (delta > 0) then
      padded_inp := pad_LSB(vec, old_width+delta);
      result := extend_MSB(padded_inp, new_width, new_arith);
    else
      result := extend_MSB(vec, new_width, new_arith);
    end if;
    return result;
  end;
  constant full_s_bin_pt: integer := fractional_bits(a_bin_pt, b_bin_pt);
  constant full_a_width: integer := full_s_width;
  constant full_b_width: integer := full_s_width;
  signal full_a: std_logic_vector(full_a_width - 1 downto 0);
  signal full_b: std_logic_vector(full_b_width - 1 downto 0);
  signal core_s: std_logic_vector(full_s_width - 1 downto 0);
  signal conv_s: std_logic_vector(s_width - 1 downto 0);
  signal temp_cout : std_logic;
  signal internal_clr: std_logic;
  signal internal_ce: std_logic;
  signal extra_reg_ce: std_logic;
  signal override: std_logic;
  signal logic1: std_logic_vector(0 downto 0);
  component addsb_11_0_967e0ec2eea991a6
    port (
          a: in std_logic_vector(12 - 1 downto 0);
    s: out std_logic_vector(c_output_width - 1 downto 0);
    b: in std_logic_vector(12 - 1 downto 0)
    );
  end component;
  component addsb_11_0_defe95552cb97446
    port (
          a: in std_logic_vector(35 - 1 downto 0);
    clk: in std_logic:= '0';
    ce: in std_logic:= '0';
    s: out std_logic_vector(c_output_width - 1 downto 0);
    b: in std_logic_vector(35 - 1 downto 0)
    );
  end component;
  component addsb_11_0_b5c2f0e20381feb6
    port (
          a: in std_logic_vector(20 - 1 downto 0);
    clk: in std_logic:= '0';
    ce: in std_logic:= '0';
    s: out std_logic_vector(c_output_width - 1 downto 0);
    b: in std_logic_vector(20 - 1 downto 0)
    );
  end component;
  component addsb_11_0_6c8b791c8b797704
    port (
          a: in std_logic_vector(21 - 1 downto 0);
    clk: in std_logic:= '0';
    ce: in std_logic:= '0';
    s: out std_logic_vector(c_output_width - 1 downto 0);
    b: in std_logic_vector(21 - 1 downto 0)
    );
  end component;
  component addsb_11_0_607fe0700100c715
    port (
          a: in std_logic_vector(22 - 1 downto 0);
    s: out std_logic_vector(c_output_width - 1 downto 0);
    b: in std_logic_vector(22 - 1 downto 0)
    );
  end component;
  component addsb_11_0_cdd18bba176b5e77
    port (
          a: in std_logic_vector(23 - 1 downto 0);
    s: out std_logic_vector(c_output_width - 1 downto 0);
    b: in std_logic_vector(23 - 1 downto 0)
    );
  end component;
  component addsb_11_0_0b9b6e1cbccbb2be
    port (
          a: in std_logic_vector(17 - 1 downto 0);
    clk: in std_logic:= '0';
    ce: in std_logic:= '0';
    s: out std_logic_vector(c_output_width - 1 downto 0);
    b: in std_logic_vector(17 - 1 downto 0)
    );
  end component;
  component addsb_11_0_6791698c7be255e7
    port (
          a: in std_logic_vector(50 - 1 downto 0);
    clk: in std_logic:= '0';
    ce: in std_logic:= '0';
    s: out std_logic_vector(c_output_width - 1 downto 0);
    b: in std_logic_vector(50 - 1 downto 0)
    );
  end component;
  component addsb_11_0_a37a2abb0bb82ab2
    port (
          a: in std_logic_vector(16 - 1 downto 0);
    clk: in std_logic:= '0';
    ce: in std_logic:= '0';
    s: out std_logic_vector(c_output_width - 1 downto 0);
    b: in std_logic_vector(16 - 1 downto 0)
    );
  end component;
begin
  internal_clr <= (clr or (rst(0))) and ce;
  internal_ce <= ce and en(0);
  logic1(0) <= '1';
  addsub_process: process (a, b, core_s)
  begin
    full_a <= format_input (a, a_width, b_bin_pt - a_bin_pt, a_arith,
                            full_a_width);
    full_b <= format_input (b, b_width, a_bin_pt - b_bin_pt, b_arith,
                            full_b_width);
    conv_s <= convert_type (core_s, full_s_width, full_s_bin_pt, full_s_arith,
                            s_width, s_bin_pt, s_arith, quantization, overflow);
  end process addsub_process;

  comp0: if ((core_name0 = "addsb_11_0_967e0ec2eea991a6")) generate
    core_instance0: addsb_11_0_967e0ec2eea991a6
      port map (
         a => full_a,
         s => core_s,
         b => full_b
      );
  end generate;
  comp1: if ((core_name0 = "addsb_11_0_defe95552cb97446")) generate
    core_instance1: addsb_11_0_defe95552cb97446
      port map (
         a => full_a,
         clk => clk,
         ce => internal_ce,
         s => core_s,
         b => full_b
      );
  end generate;
  comp2: if ((core_name0 = "addsb_11_0_b5c2f0e20381feb6")) generate
    core_instance2: addsb_11_0_b5c2f0e20381feb6
      port map (
         a => full_a,
         clk => clk,
         ce => internal_ce,
         s => core_s,
         b => full_b
      );
  end generate;
  comp3: if ((core_name0 = "addsb_11_0_6c8b791c8b797704")) generate
    core_instance3: addsb_11_0_6c8b791c8b797704
      port map (
         a => full_a,
         clk => clk,
         ce => internal_ce,
         s => core_s,
         b => full_b
      );
  end generate;
  comp4: if ((core_name0 = "addsb_11_0_607fe0700100c715")) generate
    core_instance4: addsb_11_0_607fe0700100c715
      port map (
         a => full_a,
         s => core_s,
         b => full_b
      );
  end generate;
  comp6: if ((core_name0 = "addsb_11_0_cdd18bba176b5e77")) generate
    core_instance6: addsb_11_0_cdd18bba176b5e77
      port map (
         a => full_a,
         s => core_s,
         b => full_b
      );
  end generate;
  comp7: if ((core_name0 = "addsb_11_0_0b9b6e1cbccbb2be")) generate
    core_instance7: addsb_11_0_0b9b6e1cbccbb2be
      port map (
         a => full_a,
         clk => clk,
         ce => internal_ce,
         s => core_s,
         b => full_b
      );
  end generate;
  comp8: if ((core_name0 = "addsb_11_0_6791698c7be255e7")) generate
    core_instance8: addsb_11_0_6791698c7be255e7
      port map (
         a => full_a,
         clk => clk,
         ce => internal_ce,
         s => core_s,
         b => full_b
      );
  end generate;
  comp9: if ((core_name0 = "addsb_11_0_a37a2abb0bb82ab2")) generate
    core_instance9: addsb_11_0_a37a2abb0bb82ab2
      port map (
         a => full_a,
         clk => clk,
         ce => internal_ce,
         s => core_s,
         b => full_b
      );
  end generate;
  latency_test: if (extra_registers > 0) generate
      override_test: if (c_latency > 1) generate
       override_pipe: synth_reg
          generic map (
            width => 1,
            latency => c_latency
          )
          port map (
            i => logic1,
            ce => internal_ce,
            clr => internal_clr,
            clk => clk,
            o(0) => override);
       extra_reg_ce <= ce and en(0) and override;
      end generate override_test;
      no_override: if ((c_latency = 0) or (c_latency = 1)) generate
       extra_reg_ce <= ce and en(0);
      end generate no_override;
      extra_reg: synth_reg
        generic map (
          width => s_width,
          latency => extra_registers
        )
        port map (
          i => conv_s,
          ce => extra_reg_ce,
          clr => internal_clr,
          clk => clk,
          o => s
        );
      cout_test: if (c_has_c_out = 1) generate
      c_out_extra_reg: synth_reg
        generic map (
          width => 1,
          latency => extra_registers
        )
        port map (
          i(0) => temp_cout,
          ce => extra_reg_ce,
          clr => internal_clr,
          clk => clk,
          o => c_out
        );
      end generate cout_test;
  end generate;
  latency_s: if ((latency = 0) or (extra_registers = 0)) generate
    s <= conv_s;
  end generate latency_s;
  latency0: if (((latency = 0) or (extra_registers = 0)) and
                 (c_has_c_out = 1)) generate
    c_out(0) <= temp_cout;
  end generate latency0;
  tie_dangling_cout: if (c_has_c_out = 0) generate
    c_out <= "0";
  end generate tie_dangling_cout;
end architecture behavior;
library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity relational_9b3c9652f3 is
  port (
    a : in std_logic_vector((2 - 1) downto 0);
    b : in std_logic_vector((2 - 1) downto 0);
    op : out std_logic_vector((1 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end relational_9b3c9652f3;


architecture behavior of relational_9b3c9652f3 is
  signal a_1_31: unsigned((2 - 1) downto 0);
  signal b_1_34: unsigned((2 - 1) downto 0);
  signal result_18_3_rel: boolean;
begin
  a_1_31 <= std_logic_vector_to_unsigned(a);
  b_1_34 <= std_logic_vector_to_unsigned(b);
  result_18_3_rel <= a_1_31 > b_1_34;
  op <= boolean_to_vector(result_18_3_rel);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity constant_5478175279 is
  port (
    op : out std_logic_vector((7 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end constant_5478175279;


architecture behavior of constant_5478175279 is
begin
  op <= "0111011";
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity relational_1497de3985 is
  port (
    a : in std_logic_vector((7 - 1) downto 0);
    b : in std_logic_vector((7 - 1) downto 0);
    op : out std_logic_vector((1 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end relational_1497de3985;


architecture behavior of relational_1497de3985 is
  signal a_1_31: signed((7 - 1) downto 0);
  signal b_1_34: signed((7 - 1) downto 0);
  type array_type_op_mem_32_22 is array (0 to (1 - 1)) of boolean;
  signal op_mem_32_22: array_type_op_mem_32_22 := (
    0 => false);
  signal op_mem_32_22_front_din: boolean;
  signal op_mem_32_22_back: boolean;
  signal op_mem_32_22_push_front_pop_back_en: std_logic;
  signal result_12_3_rel: boolean;
begin
  a_1_31 <= std_logic_vector_to_signed(a);
  b_1_34 <= std_logic_vector_to_signed(b);
  op_mem_32_22_back <= op_mem_32_22(0);
  proc_op_mem_32_22: process (clk)
  is
    variable i: integer;
  begin
    if (clk'event and (clk = '1')) then
      if ((ce = '1') and (op_mem_32_22_push_front_pop_back_en = '1')) then
        op_mem_32_22(0) <= op_mem_32_22_front_din;
      end if;
    end if;
  end process proc_op_mem_32_22;
  result_12_3_rel <= a_1_31 = b_1_34;
  op_mem_32_22_front_din <= result_12_3_rel;
  op_mem_32_22_push_front_pop_back_en <= '1';
  op <= boolean_to_vector(op_mem_32_22_back);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity addsub_ebbe1ebacf is
  port (
    a : in std_logic_vector((45 - 1) downto 0);
    b : in std_logic_vector((31 - 1) downto 0);
    s : out std_logic_vector((43 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end addsub_ebbe1ebacf;


architecture behavior of addsub_ebbe1ebacf is
  signal a_17_32: unsigned((45 - 1) downto 0);
  signal b_17_35: signed((31 - 1) downto 0);
  type array_type_op_mem_91_20 is array (0 to (2 - 1)) of unsigned((43 - 1) downto 0);
  signal op_mem_91_20: array_type_op_mem_91_20 := (
    "0000000000000000000000000000000000000000000",
    "0000000000000000000000000000000000000000000");
  signal op_mem_91_20_front_din: unsigned((43 - 1) downto 0);
  signal op_mem_91_20_back: unsigned((43 - 1) downto 0);
  signal op_mem_91_20_push_front_pop_back_en: std_logic;
  type array_type_cout_mem_92_22 is array (0 to (2 - 1)) of unsigned((1 - 1) downto 0);
  signal cout_mem_92_22: array_type_cout_mem_92_22 := (
    "0",
    "0");
  signal cout_mem_92_22_front_din: unsigned((1 - 1) downto 0);
  signal cout_mem_92_22_back: unsigned((1 - 1) downto 0);
  signal cout_mem_92_22_push_front_pop_back_en: std_logic;
  signal prev_mode_93_22_next: unsigned((3 - 1) downto 0);
  signal prev_mode_93_22: unsigned((3 - 1) downto 0);
  signal prev_mode_93_22_reg_i: std_logic_vector((3 - 1) downto 0);
  signal prev_mode_93_22_reg_o: std_logic_vector((3 - 1) downto 0);
  signal cast_69_18: signed((47 - 1) downto 0);
  signal cast_69_22: signed((47 - 1) downto 0);
  signal internal_s_69_5_addsub: signed((47 - 1) downto 0);
  signal internal_s_83_3_convert: unsigned((43 - 1) downto 0);
begin
  a_17_32 <= std_logic_vector_to_unsigned(a);
  b_17_35 <= std_logic_vector_to_signed(b);
  op_mem_91_20_back <= op_mem_91_20(1);
  proc_op_mem_91_20: process (clk)
  is
    variable i: integer;
  begin
    if (clk'event and (clk = '1')) then
      if ((ce = '1') and (op_mem_91_20_push_front_pop_back_en = '1')) then
        for i in 1 downto 1 loop 
          op_mem_91_20(i) <= op_mem_91_20(i-1);
        end loop;
        op_mem_91_20(0) <= op_mem_91_20_front_din;
      end if;
    end if;
  end process proc_op_mem_91_20;
  cout_mem_92_22_back <= cout_mem_92_22(1);
  proc_cout_mem_92_22: process (clk)
  is
    variable i_x_000000: integer;
  begin
    if (clk'event and (clk = '1')) then
      if ((ce = '1') and (cout_mem_92_22_push_front_pop_back_en = '1')) then
        for i_x_000000 in 1 downto 1 loop 
          cout_mem_92_22(i_x_000000) <= cout_mem_92_22(i_x_000000-1);
        end loop;
        cout_mem_92_22(0) <= cout_mem_92_22_front_din;
      end if;
    end if;
  end process proc_cout_mem_92_22;
  prev_mode_93_22_reg_i <= unsigned_to_std_logic_vector(prev_mode_93_22_next);
  prev_mode_93_22 <= std_logic_vector_to_unsigned(prev_mode_93_22_reg_o);
  prev_mode_93_22_reg_inst: entity work.synth_reg_w_init
    generic map (
      init_index => 2, 
      init_value => b"010", 
      latency => 1, 
      width => 3)
    port map (
      ce => ce, 
      clk => clk, 
      clr => clr, 
      i => prev_mode_93_22_reg_i, 
      o => prev_mode_93_22_reg_o);
  cast_69_18 <= u2s_cast(a_17_32, 30, 47, 30);
  cast_69_22 <= s2s_cast(b_17_35, 30, 47, 30);
  internal_s_69_5_addsub <= cast_69_18 + cast_69_22;
  internal_s_83_3_convert <= std_logic_vector_to_unsigned(convert_type(signed_to_std_logic_vector(internal_s_69_5_addsub), 47, 30, xlSigned, 43, 30, xlUnsigned, xlTruncate, xlSaturate));
  op_mem_91_20_front_din <= internal_s_83_3_convert;
  op_mem_91_20_push_front_pop_back_en <= '1';
  cout_mem_92_22_front_din <= std_logic_vector_to_unsigned("0");
  cout_mem_92_22_push_front_pop_back_en <= '1';
  prev_mode_93_22_next <= std_logic_vector_to_unsigned("000");
  s <= unsigned_to_std_logic_vector(op_mem_91_20_back);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity mux_e38ddc7597 is
  port (
    sel : in std_logic_vector((1 - 1) downto 0);
    d0 : in std_logic_vector((43 - 1) downto 0);
    d1 : in std_logic_vector((31 - 1) downto 0);
    y : out std_logic_vector((45 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end mux_e38ddc7597;


architecture behavior of mux_e38ddc7597 is
  signal sel_1_20: std_logic;
  signal d0_1_24: std_logic_vector((43 - 1) downto 0);
  signal d1_1_27: std_logic_vector((31 - 1) downto 0);
  type array_type_pipe_16_22 is array (0 to (1 - 1)) of std_logic_vector((45 - 1) downto 0);
  signal pipe_16_22: array_type_pipe_16_22 := (
    0 => "000000000000000000000000000000000000000000000");
  signal pipe_16_22_front_din: std_logic_vector((45 - 1) downto 0);
  signal pipe_16_22_back: std_logic_vector((45 - 1) downto 0);
  signal pipe_16_22_push_front_pop_back_en: std_logic;
  signal sel_internal_2_1_convert: std_logic_vector((1 - 1) downto 0);
  signal unregy_join_6_1: std_logic_vector((45 - 1) downto 0);
begin
  sel_1_20 <= sel(0);
  d0_1_24 <= d0;
  d1_1_27 <= d1;
  pipe_16_22_back <= pipe_16_22(0);
  proc_pipe_16_22: process (clk)
  is
    variable i: integer;
  begin
    if (clk'event and (clk = '1')) then
      if ((ce = '1') and (pipe_16_22_push_front_pop_back_en = '1')) then
        pipe_16_22(0) <= pipe_16_22_front_din;
      end if;
    end if;
  end process proc_pipe_16_22;
  sel_internal_2_1_convert <= cast(std_logic_to_vector(sel_1_20), 0, 1, 0, xlUnsigned);
  proc_switch_6_1: process (d0_1_24, d1_1_27, sel_internal_2_1_convert)
  is
  begin
    case sel_internal_2_1_convert is 
      when "0" =>
        unregy_join_6_1 <= cast(d0_1_24, 30, 45, 30, xlUnsigned);
      when others =>
        unregy_join_6_1 <= cast(d1_1_27, 16, 45, 30, xlUnsigned);
    end case;
  end process proc_switch_6_1;
  pipe_16_22_front_din <= unregy_join_6_1;
  pipe_16_22_push_front_pop_back_en <= '1';
  y <= pipe_16_22_back;
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity delay_67ef71f6b4 is
  port (
    d : in std_logic_vector((13 - 1) downto 0);
    q : out std_logic_vector((13 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end delay_67ef71f6b4;


architecture behavior of delay_67ef71f6b4 is
  signal d_1_22: std_logic_vector((13 - 1) downto 0);
  type array_type_op_mem_20_24 is array (0 to (1 - 1)) of std_logic_vector((13 - 1) downto 0);
  signal op_mem_20_24: array_type_op_mem_20_24 := (
    0 => "0000000000000");
  signal op_mem_20_24_front_din: std_logic_vector((13 - 1) downto 0);
  signal op_mem_20_24_back: std_logic_vector((13 - 1) downto 0);
  signal op_mem_20_24_push_front_pop_back_en: std_logic;
begin
  d_1_22 <= d;
  op_mem_20_24_back <= op_mem_20_24(0);
  proc_op_mem_20_24: process (clk)
  is
    variable i: integer;
  begin
    if (clk'event and (clk = '1')) then
      if ((ce = '1') and (op_mem_20_24_push_front_pop_back_en = '1')) then
        op_mem_20_24(0) <= op_mem_20_24_front_din;
      end if;
    end if;
  end process proc_op_mem_20_24;
  op_mem_20_24_front_din <= d_1_22;
  op_mem_20_24_push_front_pop_back_en <= '1';
  q <= op_mem_20_24_back;
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity reinterpret_4ddae7a67c is
  port (
    input_port : in std_logic_vector((31 - 1) downto 0);
    output_port : out std_logic_vector((31 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end reinterpret_4ddae7a67c;


architecture behavior of reinterpret_4ddae7a67c is
  signal input_port_1_40: unsigned((31 - 1) downto 0);
begin
  input_port_1_40 <= std_logic_vector_to_unsigned(input_port);
  output_port <= unsigned_to_std_logic_vector(input_port_1_40);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity reinterpret_151459306d is
  port (
    input_port : in std_logic_vector((16 - 1) downto 0);
    output_port : out std_logic_vector((16 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end reinterpret_151459306d;


architecture behavior of reinterpret_151459306d is
  signal input_port_1_40: unsigned((16 - 1) downto 0);
  signal output_port_5_5_force: signed((16 - 1) downto 0);
begin
  input_port_1_40 <= std_logic_vector_to_unsigned(input_port);
  output_port_5_5_force <= unsigned_to_signed(input_port_1_40);
  output_port <= signed_to_std_logic_vector(output_port_5_5_force);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity shift_d09007e5f5 is
  port (
    ip : in std_logic_vector((31 - 1) downto 0);
    op : out std_logic_vector((31 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end shift_d09007e5f5;


architecture behavior of shift_d09007e5f5 is
  signal ip_1_23: signed((31 - 1) downto 0);
  type array_type_op_mem_46_20 is array (0 to (1 - 1)) of signed((31 - 1) downto 0);
  signal op_mem_46_20: array_type_op_mem_46_20 := (
    0 => "0000000000000000000000000000000");
  signal op_mem_46_20_front_din: signed((31 - 1) downto 0);
  signal op_mem_46_20_back: signed((31 - 1) downto 0);
  signal op_mem_46_20_push_front_pop_back_en: std_logic;
  signal cast_internal_ip_27_3_rsh: signed((45 - 1) downto 0);
  signal cast_internal_ip_36_3_convert: signed((31 - 1) downto 0);
begin
  ip_1_23 <= std_logic_vector_to_signed(ip);
  op_mem_46_20_back <= op_mem_46_20(0);
  proc_op_mem_46_20: process (clk)
  is
    variable i: integer;
  begin
    if (clk'event and (clk = '1')) then
      if ((ce = '1') and (op_mem_46_20_push_front_pop_back_en = '1')) then
        op_mem_46_20(0) <= op_mem_46_20_front_din;
      end if;
    end if;
  end process proc_op_mem_46_20;
  cast_internal_ip_27_3_rsh <= s2s_cast(ip_1_23, 30, 45, 30);
  cast_internal_ip_36_3_convert <= s2s_cast(cast_internal_ip_27_3_rsh, 45, 31, 30);
  op_mem_46_20_push_front_pop_back_en <= '0';
  op <= signed_to_std_logic_vector(cast_internal_ip_36_3_convert);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity concat_c588c5101d is
  port (
    in0 : in std_logic_vector((15 - 1) downto 0);
    in1 : in std_logic_vector((16 - 1) downto 0);
    y : out std_logic_vector((31 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end concat_c588c5101d;


architecture behavior of concat_c588c5101d is
  signal in0_1_23: unsigned((15 - 1) downto 0);
  signal in1_1_27: unsigned((16 - 1) downto 0);
  signal y_2_1_concat: unsigned((31 - 1) downto 0);
begin
  in0_1_23 <= std_logic_vector_to_unsigned(in0);
  in1_1_27 <= std_logic_vector_to_unsigned(in1);
  y_2_1_concat <= std_logic_vector_to_unsigned(unsigned_to_std_logic_vector(in0_1_23) & unsigned_to_std_logic_vector(in1_1_27));
  y <= unsigned_to_std_logic_vector(y_2_1_concat);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity mux_cc70926354 is
  port (
    sel : in std_logic_vector((4 - 1) downto 0);
    d0 : in std_logic_vector((2 - 1) downto 0);
    d1 : in std_logic_vector((2 - 1) downto 0);
    d2 : in std_logic_vector((2 - 1) downto 0);
    d3 : in std_logic_vector((2 - 1) downto 0);
    d4 : in std_logic_vector((2 - 1) downto 0);
    d5 : in std_logic_vector((2 - 1) downto 0);
    d6 : in std_logic_vector((2 - 1) downto 0);
    d7 : in std_logic_vector((2 - 1) downto 0);
    d8 : in std_logic_vector((2 - 1) downto 0);
    d9 : in std_logic_vector((2 - 1) downto 0);
    d10 : in std_logic_vector((2 - 1) downto 0);
    d11 : in std_logic_vector((2 - 1) downto 0);
    d12 : in std_logic_vector((2 - 1) downto 0);
    d13 : in std_logic_vector((2 - 1) downto 0);
    d14 : in std_logic_vector((2 - 1) downto 0);
    d15 : in std_logic_vector((2 - 1) downto 0);
    y : out std_logic_vector((2 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end mux_cc70926354;


architecture behavior of mux_cc70926354 is
  signal sel_1_20: std_logic_vector((4 - 1) downto 0);
  signal d0_1_24: std_logic_vector((2 - 1) downto 0);
  signal d1_1_27: std_logic_vector((2 - 1) downto 0);
  signal d2_1_30: std_logic_vector((2 - 1) downto 0);
  signal d3_1_33: std_logic_vector((2 - 1) downto 0);
  signal d4_1_36: std_logic_vector((2 - 1) downto 0);
  signal d5_1_39: std_logic_vector((2 - 1) downto 0);
  signal d6_1_42: std_logic_vector((2 - 1) downto 0);
  signal d7_1_45: std_logic_vector((2 - 1) downto 0);
  signal d8_1_48: std_logic_vector((2 - 1) downto 0);
  signal d9_1_51: std_logic_vector((2 - 1) downto 0);
  signal d10_1_54: std_logic_vector((2 - 1) downto 0);
  signal d11_1_58: std_logic_vector((2 - 1) downto 0);
  signal d12_1_62: std_logic_vector((2 - 1) downto 0);
  signal d13_1_66: std_logic_vector((2 - 1) downto 0);
  signal d14_1_70: std_logic_vector((2 - 1) downto 0);
  signal d15_1_74: std_logic_vector((2 - 1) downto 0);
  type array_type_pipe_44_22 is array (0 to (1 - 1)) of std_logic_vector((2 - 1) downto 0);
  signal pipe_44_22: array_type_pipe_44_22 := (
    0 => "00");
  signal pipe_44_22_front_din: std_logic_vector((2 - 1) downto 0);
  signal pipe_44_22_back: std_logic_vector((2 - 1) downto 0);
  signal pipe_44_22_push_front_pop_back_en: std_logic;
  signal unregy_join_6_1: std_logic_vector((2 - 1) downto 0);
begin
  sel_1_20 <= sel;
  d0_1_24 <= d0;
  d1_1_27 <= d1;
  d2_1_30 <= d2;
  d3_1_33 <= d3;
  d4_1_36 <= d4;
  d5_1_39 <= d5;
  d6_1_42 <= d6;
  d7_1_45 <= d7;
  d8_1_48 <= d8;
  d9_1_51 <= d9;
  d10_1_54 <= d10;
  d11_1_58 <= d11;
  d12_1_62 <= d12;
  d13_1_66 <= d13;
  d14_1_70 <= d14;
  d15_1_74 <= d15;
  pipe_44_22_back <= pipe_44_22(0);
  proc_pipe_44_22: process (clk)
  is
    variable i: integer;
  begin
    if (clk'event and (clk = '1')) then
      if ((ce = '1') and (pipe_44_22_push_front_pop_back_en = '1')) then
        pipe_44_22(0) <= pipe_44_22_front_din;
      end if;
    end if;
  end process proc_pipe_44_22;
  proc_switch_6_1: process (d0_1_24, d10_1_54, d11_1_58, d12_1_62, d13_1_66, d14_1_70, d15_1_74, d1_1_27, d2_1_30, d3_1_33, d4_1_36, d5_1_39, d6_1_42, d7_1_45, d8_1_48, d9_1_51, sel_1_20)
  is
  begin
    case sel_1_20 is 
      when "0000" =>
        unregy_join_6_1 <= d0_1_24;
      when "0001" =>
        unregy_join_6_1 <= d1_1_27;
      when "0010" =>
        unregy_join_6_1 <= d2_1_30;
      when "0011" =>
        unregy_join_6_1 <= d3_1_33;
      when "0100" =>
        unregy_join_6_1 <= d4_1_36;
      when "0101" =>
        unregy_join_6_1 <= d5_1_39;
      when "0110" =>
        unregy_join_6_1 <= d6_1_42;
      when "0111" =>
        unregy_join_6_1 <= d7_1_45;
      when "1000" =>
        unregy_join_6_1 <= d8_1_48;
      when "1001" =>
        unregy_join_6_1 <= d9_1_51;
      when "1010" =>
        unregy_join_6_1 <= d10_1_54;
      when "1011" =>
        unregy_join_6_1 <= d11_1_58;
      when "1100" =>
        unregy_join_6_1 <= d12_1_62;
      when "1101" =>
        unregy_join_6_1 <= d13_1_66;
      when "1110" =>
        unregy_join_6_1 <= d14_1_70;
      when others =>
        unregy_join_6_1 <= d15_1_74;
    end case;
  end process proc_switch_6_1;
  pipe_44_22_front_din <= unregy_join_6_1;
  pipe_44_22_push_front_pop_back_en <= '1';
  y <= pipe_44_22_back;
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity mux_0aaa3afba6 is
  port (
    sel : in std_logic_vector((1 - 1) downto 0);
    d0 : in std_logic_vector((16 - 1) downto 0);
    d1 : in std_logic_vector((16 - 1) downto 0);
    y : out std_logic_vector((16 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end mux_0aaa3afba6;


architecture behavior of mux_0aaa3afba6 is
  signal sel_1_20: std_logic;
  signal d0_1_24: std_logic_vector((16 - 1) downto 0);
  signal d1_1_27: std_logic_vector((16 - 1) downto 0);
  type array_type_pipe_16_22 is array (0 to (2 - 1)) of std_logic_vector((16 - 1) downto 0);
  signal pipe_16_22: array_type_pipe_16_22 := (
    "0000000000000000",
    "0000000000000000");
  signal pipe_16_22_front_din: std_logic_vector((16 - 1) downto 0);
  signal pipe_16_22_back: std_logic_vector((16 - 1) downto 0);
  signal pipe_16_22_push_front_pop_back_en: std_logic;
  signal sel_internal_2_1_convert: std_logic_vector((1 - 1) downto 0);
  signal unregy_join_6_1: std_logic_vector((16 - 1) downto 0);
begin
  sel_1_20 <= sel(0);
  d0_1_24 <= d0;
  d1_1_27 <= d1;
  pipe_16_22_back <= pipe_16_22(1);
  proc_pipe_16_22: process (clk)
  is
    variable i: integer;
  begin
    if (clk'event and (clk = '1')) then
      if ((ce = '1') and (pipe_16_22_push_front_pop_back_en = '1')) then
        for i in 1 downto 1 loop 
          pipe_16_22(i) <= pipe_16_22(i-1);
        end loop;
        pipe_16_22(0) <= pipe_16_22_front_din;
      end if;
    end if;
  end process proc_pipe_16_22;
  sel_internal_2_1_convert <= cast(std_logic_to_vector(sel_1_20), 0, 1, 0, xlUnsigned);
  proc_switch_6_1: process (d0_1_24, d1_1_27, sel_internal_2_1_convert)
  is
  begin
    case sel_internal_2_1_convert is 
      when "0" =>
        unregy_join_6_1 <= d0_1_24;
      when others =>
        unregy_join_6_1 <= d1_1_27;
    end case;
  end process proc_switch_6_1;
  pipe_16_22_front_din <= unregy_join_6_1;
  pipe_16_22_push_front_pop_back_en <= '1';
  y <= pipe_16_22_back;
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity concat_e2aa47955c is
  port (
    in0 : in std_logic_vector((11 - 1) downto 0);
    in1 : in std_logic_vector((1 - 1) downto 0);
    y : out std_logic_vector((12 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end concat_e2aa47955c;


architecture behavior of concat_e2aa47955c is
  signal in0_1_23: unsigned((11 - 1) downto 0);
  signal in1_1_27: unsigned((1 - 1) downto 0);
  signal y_2_1_concat: unsigned((12 - 1) downto 0);
begin
  in0_1_23 <= std_logic_vector_to_unsigned(in0);
  in1_1_27 <= std_logic_vector_to_unsigned(in1);
  y_2_1_concat <= std_logic_vector_to_unsigned(unsigned_to_std_logic_vector(in0_1_23) & unsigned_to_std_logic_vector(in1_1_27));
  y <= unsigned_to_std_logic_vector(y_2_1_concat);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity mux_c3e1ddb86e is
  port (
    sel : in std_logic_vector((1 - 1) downto 0);
    d0 : in std_logic_vector((12 - 1) downto 0);
    d1 : in std_logic_vector((12 - 1) downto 0);
    y : out std_logic_vector((12 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end mux_c3e1ddb86e;


architecture behavior of mux_c3e1ddb86e is
  signal sel_1_20: std_logic_vector((1 - 1) downto 0);
  signal d0_1_24: std_logic_vector((12 - 1) downto 0);
  signal d1_1_27: std_logic_vector((12 - 1) downto 0);
  signal unregy_join_6_1: std_logic_vector((12 - 1) downto 0);
begin
  sel_1_20 <= sel;
  d0_1_24 <= d0;
  d1_1_27 <= d1;
  proc_switch_6_1: process (d0_1_24, d1_1_27, sel_1_20)
  is
  begin
    case sel_1_20 is 
      when "0" =>
        unregy_join_6_1 <= d0_1_24;
      when others =>
        unregy_join_6_1 <= d1_1_27;
    end case;
  end process proc_switch_6_1;
  y <= unregy_join_6_1;
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity concat_b8ac94cae7 is
  port (
    in0 : in std_logic_vector((1 - 1) downto 0);
    in1 : in std_logic_vector((84 - 1) downto 0);
    y : out std_logic_vector((85 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end concat_b8ac94cae7;


architecture behavior of concat_b8ac94cae7 is
  signal in0_1_23: unsigned((1 - 1) downto 0);
  signal in1_1_27: unsigned((84 - 1) downto 0);
  signal y_2_1_concat: unsigned((85 - 1) downto 0);
begin
  in0_1_23 <= std_logic_vector_to_unsigned(in0);
  in1_1_27 <= std_logic_vector_to_unsigned(in1);
  y_2_1_concat <= std_logic_vector_to_unsigned(unsigned_to_std_logic_vector(in0_1_23) & unsigned_to_std_logic_vector(in1_1_27));
  y <= unsigned_to_std_logic_vector(y_2_1_concat);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity reinterpret_2b04cd795d is
  port (
    input_port : in std_logic_vector((84 - 1) downto 0);
    output_port : out std_logic_vector((84 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end reinterpret_2b04cd795d;


architecture behavior of reinterpret_2b04cd795d is
  signal input_port_1_40: unsigned((84 - 1) downto 0);
begin
  input_port_1_40 <= std_logic_vector_to_unsigned(input_port);
  output_port <= unsigned_to_std_logic_vector(input_port_1_40);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity concat_3cc25f9a26 is
  port (
    in0 : in std_logic_vector((62 - 1) downto 0);
    in1 : in std_logic_vector((62 - 1) downto 0);
    y : out std_logic_vector((124 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end concat_3cc25f9a26;


architecture behavior of concat_3cc25f9a26 is
  signal in0_1_23: unsigned((62 - 1) downto 0);
  signal in1_1_27: unsigned((62 - 1) downto 0);
  signal y_2_1_concat: unsigned((124 - 1) downto 0);
begin
  in0_1_23 <= std_logic_vector_to_unsigned(in0);
  in1_1_27 <= std_logic_vector_to_unsigned(in1);
  y_2_1_concat <= std_logic_vector_to_unsigned(unsigned_to_std_logic_vector(in0_1_23) & unsigned_to_std_logic_vector(in1_1_27));
  y <= unsigned_to_std_logic_vector(y_2_1_concat);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity reinterpret_aa522dcdd3 is
  port (
    input_port : in std_logic_vector((62 - 1) downto 0);
    output_port : out std_logic_vector((62 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end reinterpret_aa522dcdd3;


architecture behavior of reinterpret_aa522dcdd3 is
  signal input_port_1_40: unsigned((62 - 1) downto 0);
begin
  input_port_1_40 <= std_logic_vector_to_unsigned(input_port);
  output_port <= unsigned_to_std_logic_vector(input_port_1_40);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity concat_4a40e578d7 is
  port (
    in0 : in std_logic_vector((62 - 1) downto 0);
    in1 : in std_logic_vector((1 - 1) downto 0);
    in2 : in std_logic_vector((1 - 1) downto 0);
    in3 : in std_logic_vector((20 - 1) downto 0);
    y : out std_logic_vector((84 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end concat_4a40e578d7;


architecture behavior of concat_4a40e578d7 is
  signal in0_1_23: unsigned((62 - 1) downto 0);
  signal in1_1_27: unsigned((1 - 1) downto 0);
  signal in2_1_31: unsigned((1 - 1) downto 0);
  signal in3_1_35: unsigned((20 - 1) downto 0);
  signal y_2_1_concat: unsigned((84 - 1) downto 0);
begin
  in0_1_23 <= std_logic_vector_to_unsigned(in0);
  in1_1_27 <= std_logic_vector_to_unsigned(in1);
  in2_1_31 <= std_logic_vector_to_unsigned(in2);
  in3_1_35 <= std_logic_vector_to_unsigned(in3);
  y_2_1_concat <= std_logic_vector_to_unsigned(unsigned_to_std_logic_vector(in0_1_23) & unsigned_to_std_logic_vector(in1_1_27) & unsigned_to_std_logic_vector(in2_1_31) & unsigned_to_std_logic_vector(in3_1_35));
  y <= unsigned_to_std_logic_vector(y_2_1_concat);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity mux_b6870799b4 is
  port (
    sel : in std_logic_vector((1 - 1) downto 0);
    d0 : in std_logic_vector((31 - 1) downto 0);
    d1 : in std_logic_vector((31 - 1) downto 0);
    y : out std_logic_vector((33 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end mux_b6870799b4;


architecture behavior of mux_b6870799b4 is
  signal sel_1_20: std_logic;
  signal d0_1_24: std_logic_vector((31 - 1) downto 0);
  signal d1_1_27: std_logic_vector((31 - 1) downto 0);
  type array_type_pipe_16_22 is array (0 to (1 - 1)) of std_logic_vector((33 - 1) downto 0);
  signal pipe_16_22: array_type_pipe_16_22 := (
    0 => "000000000000000000000000000000000");
  signal pipe_16_22_front_din: std_logic_vector((33 - 1) downto 0);
  signal pipe_16_22_back: std_logic_vector((33 - 1) downto 0);
  signal pipe_16_22_push_front_pop_back_en: std_logic;
  signal sel_internal_2_1_convert: std_logic_vector((1 - 1) downto 0);
  signal unregy_join_6_1: std_logic_vector((33 - 1) downto 0);
begin
  sel_1_20 <= sel(0);
  d0_1_24 <= d0;
  d1_1_27 <= d1;
  pipe_16_22_back <= pipe_16_22(0);
  proc_pipe_16_22: process (clk)
  is
    variable i: integer;
  begin
    if (clk'event and (clk = '1')) then
      if ((ce = '1') and (pipe_16_22_push_front_pop_back_en = '1')) then
        pipe_16_22(0) <= pipe_16_22_front_din;
      end if;
    end if;
  end process proc_pipe_16_22;
  sel_internal_2_1_convert <= cast(std_logic_to_vector(sel_1_20), 0, 1, 0, xlUnsigned);
  proc_switch_6_1: process (d0_1_24, d1_1_27, sel_internal_2_1_convert)
  is
  begin
    case sel_internal_2_1_convert is 
      when "0" =>
        unregy_join_6_1 <= cast(d0_1_24, 18, 33, 18, xlUnsigned);
      when others =>
        unregy_join_6_1 <= cast(d1_1_27, 16, 33, 18, xlUnsigned);
    end case;
  end process proc_switch_6_1;
  pipe_16_22_front_din <= unregy_join_6_1;
  pipe_16_22_push_front_pop_back_en <= '1';
  y <= pipe_16_22_back;
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity delay_3f880447cf is
  port (
    d : in std_logic_vector((84 - 1) downto 0);
    q : out std_logic_vector((84 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end delay_3f880447cf;


architecture behavior of delay_3f880447cf is
  signal d_1_22: std_logic_vector((84 - 1) downto 0);
  type array_type_op_mem_20_24 is array (0 to (1 - 1)) of std_logic_vector((84 - 1) downto 0);
  signal op_mem_20_24: array_type_op_mem_20_24 := (
    0 => "000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
  signal op_mem_20_24_front_din: std_logic_vector((84 - 1) downto 0);
  signal op_mem_20_24_back: std_logic_vector((84 - 1) downto 0);
  signal op_mem_20_24_push_front_pop_back_en: std_logic;
begin
  d_1_22 <= d;
  op_mem_20_24_back <= op_mem_20_24(0);
  proc_op_mem_20_24: process (clk)
  is
    variable i: integer;
  begin
    if (clk'event and (clk = '1')) then
      if ((ce = '1') and (op_mem_20_24_push_front_pop_back_en = '1')) then
        op_mem_20_24(0) <= op_mem_20_24_front_din;
      end if;
    end if;
  end process proc_op_mem_20_24;
  op_mem_20_24_front_din <= d_1_22;
  op_mem_20_24_push_front_pop_back_en <= '1';
  q <= op_mem_20_24_back;
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity mux_9d74770856 is
  port (
    sel : in std_logic_vector((1 - 1) downto 0);
    d0 : in std_logic_vector((19 - 1) downto 0);
    d1 : in std_logic_vector((16 - 1) downto 0);
    y : out std_logic_vector((19 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end mux_9d74770856;


architecture behavior of mux_9d74770856 is
  signal sel_1_20: std_logic;
  signal d0_1_24: std_logic_vector((19 - 1) downto 0);
  signal d1_1_27: std_logic_vector((16 - 1) downto 0);
  type array_type_pipe_16_22 is array (0 to (1 - 1)) of std_logic_vector((19 - 1) downto 0);
  signal pipe_16_22: array_type_pipe_16_22 := (
    0 => "0000000000000000000");
  signal pipe_16_22_front_din: std_logic_vector((19 - 1) downto 0);
  signal pipe_16_22_back: std_logic_vector((19 - 1) downto 0);
  signal pipe_16_22_push_front_pop_back_en: std_logic;
  signal sel_internal_2_1_convert: std_logic_vector((1 - 1) downto 0);
  signal unregy_join_6_1: std_logic_vector((19 - 1) downto 0);
begin
  sel_1_20 <= sel(0);
  d0_1_24 <= d0;
  d1_1_27 <= d1;
  pipe_16_22_back <= pipe_16_22(0);
  proc_pipe_16_22: process (clk)
  is
    variable i: integer;
  begin
    if (clk'event and (clk = '1')) then
      if ((ce = '1') and (pipe_16_22_push_front_pop_back_en = '1')) then
        pipe_16_22(0) <= pipe_16_22_front_din;
      end if;
    end if;
  end process proc_pipe_16_22;
  sel_internal_2_1_convert <= cast(std_logic_to_vector(sel_1_20), 0, 1, 0, xlUnsigned);
  proc_switch_6_1: process (d0_1_24, d1_1_27, sel_internal_2_1_convert)
  is
  begin
    case sel_internal_2_1_convert is 
      when "0" =>
        unregy_join_6_1 <= d0_1_24;
      when others =>
        unregy_join_6_1 <= cast(d1_1_27, 15, 19, 18, xlSigned);
    end case;
  end process proc_switch_6_1;
  pipe_16_22_front_din <= unregy_join_6_1;
  pipe_16_22_push_front_pop_back_en <= '1';
  y <= pipe_16_22_back;
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity concat_526ac5b437 is
  port (
    in0 : in std_logic_vector((1 - 1) downto 0);
    in1 : in std_logic_vector((62 - 1) downto 0);
    in2 : in std_logic_vector((20 - 1) downto 0);
    in3 : in std_logic_vector((1 - 1) downto 0);
    y : out std_logic_vector((84 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end concat_526ac5b437;


architecture behavior of concat_526ac5b437 is
  signal in0_1_23: boolean;
  signal in1_1_27: unsigned((62 - 1) downto 0);
  signal in2_1_31: unsigned((20 - 1) downto 0);
  signal in3_1_35: boolean;
  signal y_2_1_concat: unsigned((84 - 1) downto 0);
begin
  in0_1_23 <= ((in0) = "1");
  in1_1_27 <= std_logic_vector_to_unsigned(in1);
  in2_1_31 <= std_logic_vector_to_unsigned(in2);
  in3_1_35 <= ((in3) = "1");
  y_2_1_concat <= std_logic_vector_to_unsigned(boolean_to_vector(in0_1_23) & unsigned_to_std_logic_vector(in1_1_27) & unsigned_to_std_logic_vector(in2_1_31) & boolean_to_vector(in3_1_35));
  y <= unsigned_to_std_logic_vector(y_2_1_concat);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity delay_a72614a86a is
  port (
    d : in std_logic_vector((62 - 1) downto 0);
    q : out std_logic_vector((62 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end delay_a72614a86a;


architecture behavior of delay_a72614a86a is
  signal d_1_22: std_logic_vector((62 - 1) downto 0);
  type array_type_op_mem_20_24 is array (0 to (1 - 1)) of std_logic_vector((62 - 1) downto 0);
  signal op_mem_20_24: array_type_op_mem_20_24 := (
    0 => "00000000000000000000000000000000000000000000000000000000000000");
  signal op_mem_20_24_front_din: std_logic_vector((62 - 1) downto 0);
  signal op_mem_20_24_back: std_logic_vector((62 - 1) downto 0);
  signal op_mem_20_24_push_front_pop_back_en: std_logic;
begin
  d_1_22 <= d;
  op_mem_20_24_back <= op_mem_20_24(0);
  proc_op_mem_20_24: process (clk)
  is
    variable i: integer;
  begin
    if (clk'event and (clk = '1')) then
      if ((ce = '1') and (op_mem_20_24_push_front_pop_back_en = '1')) then
        op_mem_20_24(0) <= op_mem_20_24_front_din;
      end if;
    end if;
  end process proc_op_mem_20_24;
  op_mem_20_24_front_din <= d_1_22;
  op_mem_20_24_push_front_pop_back_en <= '1';
  q <= op_mem_20_24_back;
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity delay_a5c036284d is
  port (
    d : in std_logic_vector((20 - 1) downto 0);
    q : out std_logic_vector((20 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end delay_a5c036284d;


architecture behavior of delay_a5c036284d is
  signal d_1_22: std_logic_vector((20 - 1) downto 0);
  type array_type_op_mem_20_24 is array (0 to (1 - 1)) of std_logic_vector((20 - 1) downto 0);
  signal op_mem_20_24: array_type_op_mem_20_24 := (
    0 => "00000000000000000000");
  signal op_mem_20_24_front_din: std_logic_vector((20 - 1) downto 0);
  signal op_mem_20_24_back: std_logic_vector((20 - 1) downto 0);
  signal op_mem_20_24_push_front_pop_back_en: std_logic;
begin
  d_1_22 <= d;
  op_mem_20_24_back <= op_mem_20_24(0);
  proc_op_mem_20_24: process (clk)
  is
    variable i: integer;
  begin
    if (clk'event and (clk = '1')) then
      if ((ce = '1') and (op_mem_20_24_push_front_pop_back_en = '1')) then
        op_mem_20_24(0) <= op_mem_20_24_front_din;
      end if;
    end if;
  end process proc_op_mem_20_24;
  op_mem_20_24_front_din <= d_1_22;
  op_mem_20_24_push_front_pop_back_en <= '1';
  q <= op_mem_20_24_back;
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity mux_b17283bd96 is
  port (
    sel : in std_logic_vector((1 - 1) downto 0);
    d0 : in std_logic_vector((31 - 1) downto 0);
    d1 : in std_logic_vector((31 - 1) downto 0);
    y : out std_logic_vector((31 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end mux_b17283bd96;


architecture behavior of mux_b17283bd96 is
  signal sel_1_20: std_logic;
  signal d0_1_24: std_logic_vector((31 - 1) downto 0);
  signal d1_1_27: std_logic_vector((31 - 1) downto 0);
  signal sel_internal_2_1_convert: std_logic_vector((1 - 1) downto 0);
  signal unregy_join_6_1: std_logic_vector((31 - 1) downto 0);
begin
  sel_1_20 <= sel(0);
  d0_1_24 <= d0;
  d1_1_27 <= d1;
  sel_internal_2_1_convert <= cast(std_logic_to_vector(sel_1_20), 0, 1, 0, xlUnsigned);
  proc_switch_6_1: process (d0_1_24, d1_1_27, sel_internal_2_1_convert)
  is
  begin
    case sel_internal_2_1_convert is 
      when "0" =>
        unregy_join_6_1 <= d0_1_24;
      when others =>
        unregy_join_6_1 <= d1_1_27;
    end case;
  end process proc_switch_6_1;
  y <= unregy_join_6_1;
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity negate_f54e9c0929 is
  port (
    ip : in std_logic_vector((31 - 1) downto 0);
    op : out std_logic_vector((31 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end negate_f54e9c0929;


architecture behavior of negate_f54e9c0929 is
  signal ip_18_25: signed((31 - 1) downto 0);
  type array_type_op_mem_48_20 is array (0 to (1 - 1)) of signed((31 - 1) downto 0);
  signal op_mem_48_20: array_type_op_mem_48_20 := (
    0 => "0000000000000000000000000000000");
  signal op_mem_48_20_front_din: signed((31 - 1) downto 0);
  signal op_mem_48_20_back: signed((31 - 1) downto 0);
  signal op_mem_48_20_push_front_pop_back_en: std_logic;
  signal cast_35_24: signed((32 - 1) downto 0);
  signal internal_ip_35_9_neg: signed((32 - 1) downto 0);
  signal internal_ip_join_30_1: signed((32 - 1) downto 0);
  signal cast_internal_ip_40_3_convert: signed((31 - 1) downto 0);
begin
  ip_18_25 <= std_logic_vector_to_signed(ip);
  op_mem_48_20_back <= op_mem_48_20(0);
  proc_op_mem_48_20: process (clk)
  is
    variable i: integer;
  begin
    if (clk'event and (clk = '1')) then
      if ((ce = '1') and (op_mem_48_20_push_front_pop_back_en = '1')) then
        op_mem_48_20(0) <= op_mem_48_20_front_din;
      end if;
    end if;
  end process proc_op_mem_48_20;
  cast_35_24 <= s2s_cast(ip_18_25, 30, 32, 30);
  internal_ip_35_9_neg <=  -cast_35_24;
  proc_if_30_1: process (internal_ip_35_9_neg)
  is
  begin
    if false then
      internal_ip_join_30_1 <= std_logic_vector_to_signed("00000000000000000000000000000000");
    else 
      internal_ip_join_30_1 <= internal_ip_35_9_neg;
    end if;
  end process proc_if_30_1;
  cast_internal_ip_40_3_convert <= s2s_cast(internal_ip_join_30_1, 30, 31, 30);
  op_mem_48_20_front_din <= cast_internal_ip_40_3_convert;
  op_mem_48_20_push_front_pop_back_en <= '1';
  op <= signed_to_std_logic_vector(op_mem_48_20_back);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity shift_3d704f15bd is
  port (
    ip : in std_logic_vector((2 - 1) downto 0);
    op : out std_logic_vector((2 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end shift_3d704f15bd;


architecture behavior of shift_3d704f15bd is
  signal ip_1_23: unsigned((2 - 1) downto 0);
  type array_type_op_mem_46_20 is array (0 to (1 - 1)) of unsigned((2 - 1) downto 0);
  signal op_mem_46_20: array_type_op_mem_46_20 := (
    0 => "00");
  signal op_mem_46_20_front_din: unsigned((2 - 1) downto 0);
  signal op_mem_46_20_back: unsigned((2 - 1) downto 0);
  signal op_mem_46_20_push_front_pop_back_en: std_logic;
begin
  ip_1_23 <= std_logic_vector_to_unsigned(ip);
  op_mem_46_20_back <= op_mem_46_20(0);
  proc_op_mem_46_20: process (clk)
  is
    variable i: integer;
  begin
    if (clk'event and (clk = '1')) then
      if ((ce = '1') and (op_mem_46_20_push_front_pop_back_en = '1')) then
        op_mem_46_20(0) <= op_mem_46_20_front_din;
      end if;
    end if;
  end process proc_op_mem_46_20;
  op_mem_46_20_push_front_pop_back_en <= '0';
  op <= unsigned_to_std_logic_vector(ip_1_23);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity shift_6a984f7b1f is
  port (
    ip : in std_logic_vector((31 - 1) downto 0);
    op : out std_logic_vector((31 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end shift_6a984f7b1f;


architecture behavior of shift_6a984f7b1f is
  signal ip_1_23: signed((31 - 1) downto 0);
  type array_type_op_mem_46_20 is array (0 to (1 - 1)) of signed((31 - 1) downto 0);
  signal op_mem_46_20: array_type_op_mem_46_20 := (
    0 => "0000000000000000000000000000000");
  signal op_mem_46_20_front_din: signed((31 - 1) downto 0);
  signal op_mem_46_20_back: signed((31 - 1) downto 0);
  signal op_mem_46_20_push_front_pop_back_en: std_logic;
  signal cast_internal_ip_27_3_rsh: signed((50 - 1) downto 0);
  signal cast_internal_ip_36_3_convert: signed((31 - 1) downto 0);
begin
  ip_1_23 <= std_logic_vector_to_signed(ip);
  op_mem_46_20_back <= op_mem_46_20(0);
  proc_op_mem_46_20: process (clk)
  is
    variable i: integer;
  begin
    if (clk'event and (clk = '1')) then
      if ((ce = '1') and (op_mem_46_20_push_front_pop_back_en = '1')) then
        op_mem_46_20(0) <= op_mem_46_20_front_din;
      end if;
    end if;
  end process proc_op_mem_46_20;
  cast_internal_ip_27_3_rsh <= s2s_cast(ip_1_23, 30, 50, 30);
  cast_internal_ip_36_3_convert <= s2s_cast(cast_internal_ip_27_3_rsh, 50, 31, 30);
  op_mem_46_20_push_front_pop_back_en <= '0';
  op <= signed_to_std_logic_vector(cast_internal_ip_36_3_convert);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity shift_23cc8d0234 is
  port (
    ip : in std_logic_vector((19 - 1) downto 0);
    op : out std_logic_vector((19 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end shift_23cc8d0234;


architecture behavior of shift_23cc8d0234 is
  signal ip_1_23: signed((19 - 1) downto 0);
  type array_type_op_mem_46_20 is array (0 to (1 - 1)) of signed((19 - 1) downto 0);
  signal op_mem_46_20: array_type_op_mem_46_20 := (
    0 => "0000000000000000000");
  signal op_mem_46_20_front_din: signed((19 - 1) downto 0);
  signal op_mem_46_20_back: signed((19 - 1) downto 0);
  signal op_mem_46_20_push_front_pop_back_en: std_logic;
  signal cast_internal_ip_27_3_rsh: signed((21 - 1) downto 0);
  signal cast_internal_ip_36_3_convert: signed((19 - 1) downto 0);
begin
  ip_1_23 <= std_logic_vector_to_signed(ip);
  op_mem_46_20_back <= op_mem_46_20(0);
  proc_op_mem_46_20: process (clk)
  is
    variable i: integer;
  begin
    if (clk'event and (clk = '1')) then
      if ((ce = '1') and (op_mem_46_20_push_front_pop_back_en = '1')) then
        op_mem_46_20(0) <= op_mem_46_20_front_din;
      end if;
    end if;
  end process proc_op_mem_46_20;
  cast_internal_ip_27_3_rsh <= s2s_cast(ip_1_23, 18, 21, 18);
  cast_internal_ip_36_3_convert <= s2s_cast(cast_internal_ip_27_3_rsh, 21, 19, 18);
  op_mem_46_20_push_front_pop_back_en <= '0';
  op <= signed_to_std_logic_vector(cast_internal_ip_36_3_convert);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity reinterpret_713b6c5d29 is
  port (
    input_port : in std_logic_vector((20 - 1) downto 0);
    output_port : out std_logic_vector((20 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end reinterpret_713b6c5d29;


architecture behavior of reinterpret_713b6c5d29 is
  signal input_port_1_40: unsigned((20 - 1) downto 0);
begin
  input_port_1_40 <= std_logic_vector_to_unsigned(input_port);
  output_port <= unsigned_to_std_logic_vector(input_port_1_40);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity reinterpret_76541f1bde is
  port (
    input_port : in std_logic_vector((31 - 1) downto 0);
    output_port : out std_logic_vector((31 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end reinterpret_76541f1bde;


architecture behavior of reinterpret_76541f1bde is
  signal input_port_1_40: unsigned((31 - 1) downto 0);
  signal output_port_5_5_force: signed((31 - 1) downto 0);
begin
  input_port_1_40 <= std_logic_vector_to_unsigned(input_port);
  output_port_5_5_force <= unsigned_to_signed(input_port_1_40);
  output_port <= signed_to_std_logic_vector(output_port_5_5_force);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity mult_7b9bb0537a is
  port (
    a : in std_logic_vector((18 - 1) downto 0);
    b : in std_logic_vector((31 - 1) downto 0);
    p : out std_logic_vector((49 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end mult_7b9bb0537a;


architecture behavior of mult_7b9bb0537a is
  signal a_1_22: signed((18 - 1) downto 0);
  signal b_1_25: signed((31 - 1) downto 0);
  type array_type_op_mem_65_20 is array (0 to (3 - 1)) of signed((49 - 1) downto 0);
  signal op_mem_65_20: array_type_op_mem_65_20 := (
    "0000000000000000000000000000000000000000000000000",
    "0000000000000000000000000000000000000000000000000",
    "0000000000000000000000000000000000000000000000000");
  signal op_mem_65_20_front_din: signed((49 - 1) downto 0);
  signal op_mem_65_20_back: signed((49 - 1) downto 0);
  signal op_mem_65_20_push_front_pop_back_en: std_logic;
  signal mult_46_56: signed((49 - 1) downto 0);
begin
  a_1_22 <= std_logic_vector_to_signed(a);
  b_1_25 <= std_logic_vector_to_signed(b);
  op_mem_65_20_back <= op_mem_65_20(2);
  proc_op_mem_65_20: process (clk)
  is
    variable i: integer;
  begin
    if (clk'event and (clk = '1')) then
      if ((ce = '1') and (op_mem_65_20_push_front_pop_back_en = '1')) then
        for i in 2 downto 1 loop 
          op_mem_65_20(i) <= op_mem_65_20(i-1);
        end loop;
        op_mem_65_20(0) <= op_mem_65_20_front_din;
      end if;
    end if;
  end process proc_op_mem_65_20;
  mult_46_56 <= (a_1_22 * b_1_25);
  op_mem_65_20_front_din <= mult_46_56;
  op_mem_65_20_push_front_pop_back_en <= '1';
  p <= signed_to_std_logic_vector(op_mem_65_20_back);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity addsub_477aaa5f1a is
  port (
    a : in std_logic_vector((49 - 1) downto 0);
    b : in std_logic_vector((49 - 1) downto 0);
    s : out std_logic_vector((50 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end addsub_477aaa5f1a;


architecture behavior of addsub_477aaa5f1a is
  signal a_17_32: signed((49 - 1) downto 0);
  signal b_17_35: signed((49 - 1) downto 0);
  type array_type_op_mem_91_20 is array (0 to (2 - 1)) of signed((50 - 1) downto 0);
  signal op_mem_91_20: array_type_op_mem_91_20 := (
    "00000000000000000000000000000000000000000000000000",
    "00000000000000000000000000000000000000000000000000");
  signal op_mem_91_20_front_din: signed((50 - 1) downto 0);
  signal op_mem_91_20_back: signed((50 - 1) downto 0);
  signal op_mem_91_20_push_front_pop_back_en: std_logic;
  type array_type_cout_mem_92_22 is array (0 to (2 - 1)) of unsigned((1 - 1) downto 0);
  signal cout_mem_92_22: array_type_cout_mem_92_22 := (
    "0",
    "0");
  signal cout_mem_92_22_front_din: unsigned((1 - 1) downto 0);
  signal cout_mem_92_22_back: unsigned((1 - 1) downto 0);
  signal cout_mem_92_22_push_front_pop_back_en: std_logic;
  signal prev_mode_93_22_next: unsigned((3 - 1) downto 0);
  signal prev_mode_93_22: unsigned((3 - 1) downto 0);
  signal prev_mode_93_22_reg_i: std_logic_vector((3 - 1) downto 0);
  signal prev_mode_93_22_reg_o: std_logic_vector((3 - 1) downto 0);
  signal cast_69_18: signed((50 - 1) downto 0);
  signal cast_69_22: signed((50 - 1) downto 0);
  signal internal_s_69_5_addsub: signed((50 - 1) downto 0);
begin
  a_17_32 <= std_logic_vector_to_signed(a);
  b_17_35 <= std_logic_vector_to_signed(b);
  op_mem_91_20_back <= op_mem_91_20(1);
  proc_op_mem_91_20: process (clk)
  is
    variable i: integer;
  begin
    if (clk'event and (clk = '1')) then
      if ((ce = '1') and (op_mem_91_20_push_front_pop_back_en = '1')) then
        for i in 1 downto 1 loop 
          op_mem_91_20(i) <= op_mem_91_20(i-1);
        end loop;
        op_mem_91_20(0) <= op_mem_91_20_front_din;
      end if;
    end if;
  end process proc_op_mem_91_20;
  cout_mem_92_22_back <= cout_mem_92_22(1);
  proc_cout_mem_92_22: process (clk)
  is
    variable i_x_000000: integer;
  begin
    if (clk'event and (clk = '1')) then
      if ((ce = '1') and (cout_mem_92_22_push_front_pop_back_en = '1')) then
        for i_x_000000 in 1 downto 1 loop 
          cout_mem_92_22(i_x_000000) <= cout_mem_92_22(i_x_000000-1);
        end loop;
        cout_mem_92_22(0) <= cout_mem_92_22_front_din;
      end if;
    end if;
  end process proc_cout_mem_92_22;
  prev_mode_93_22_reg_i <= unsigned_to_std_logic_vector(prev_mode_93_22_next);
  prev_mode_93_22 <= std_logic_vector_to_unsigned(prev_mode_93_22_reg_o);
  prev_mode_93_22_reg_inst: entity work.synth_reg_w_init
    generic map (
      init_index => 2, 
      init_value => b"010", 
      latency => 1, 
      width => 3)
    port map (
      ce => ce, 
      clk => clk, 
      clr => clr, 
      i => prev_mode_93_22_reg_i, 
      o => prev_mode_93_22_reg_o);
  cast_69_18 <= s2s_cast(a_17_32, 34, 50, 34);
  cast_69_22 <= s2s_cast(b_17_35, 34, 50, 34);
  internal_s_69_5_addsub <= cast_69_18 + cast_69_22;
  op_mem_91_20_front_din <= internal_s_69_5_addsub;
  op_mem_91_20_push_front_pop_back_en <= '1';
  cout_mem_92_22_front_din <= std_logic_vector_to_unsigned("0");
  cout_mem_92_22_push_front_pop_back_en <= '1';
  prev_mode_93_22_next <= std_logic_vector_to_unsigned("000");
  s <= signed_to_std_logic_vector(op_mem_91_20_back);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity addsub_c7967a888a is
  port (
    a : in std_logic_vector((49 - 1) downto 0);
    b : in std_logic_vector((49 - 1) downto 0);
    s : out std_logic_vector((50 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end addsub_c7967a888a;


architecture behavior of addsub_c7967a888a is
  signal a_17_32: signed((49 - 1) downto 0);
  signal b_17_35: signed((49 - 1) downto 0);
  type array_type_op_mem_91_20 is array (0 to (2 - 1)) of signed((50 - 1) downto 0);
  signal op_mem_91_20: array_type_op_mem_91_20 := (
    "00000000000000000000000000000000000000000000000000",
    "00000000000000000000000000000000000000000000000000");
  signal op_mem_91_20_front_din: signed((50 - 1) downto 0);
  signal op_mem_91_20_back: signed((50 - 1) downto 0);
  signal op_mem_91_20_push_front_pop_back_en: std_logic;
  type array_type_cout_mem_92_22 is array (0 to (2 - 1)) of unsigned((1 - 1) downto 0);
  signal cout_mem_92_22: array_type_cout_mem_92_22 := (
    "0",
    "0");
  signal cout_mem_92_22_front_din: unsigned((1 - 1) downto 0);
  signal cout_mem_92_22_back: unsigned((1 - 1) downto 0);
  signal cout_mem_92_22_push_front_pop_back_en: std_logic;
  signal prev_mode_93_22_next: unsigned((3 - 1) downto 0);
  signal prev_mode_93_22: unsigned((3 - 1) downto 0);
  signal prev_mode_93_22_reg_i: std_logic_vector((3 - 1) downto 0);
  signal prev_mode_93_22_reg_o: std_logic_vector((3 - 1) downto 0);
  signal cast_71_18: signed((50 - 1) downto 0);
  signal cast_71_22: signed((50 - 1) downto 0);
  signal internal_s_71_5_addsub: signed((50 - 1) downto 0);
begin
  a_17_32 <= std_logic_vector_to_signed(a);
  b_17_35 <= std_logic_vector_to_signed(b);
  op_mem_91_20_back <= op_mem_91_20(1);
  proc_op_mem_91_20: process (clk)
  is
    variable i: integer;
  begin
    if (clk'event and (clk = '1')) then
      if ((ce = '1') and (op_mem_91_20_push_front_pop_back_en = '1')) then
        for i in 1 downto 1 loop 
          op_mem_91_20(i) <= op_mem_91_20(i-1);
        end loop;
        op_mem_91_20(0) <= op_mem_91_20_front_din;
      end if;
    end if;
  end process proc_op_mem_91_20;
  cout_mem_92_22_back <= cout_mem_92_22(1);
  proc_cout_mem_92_22: process (clk)
  is
    variable i_x_000000: integer;
  begin
    if (clk'event and (clk = '1')) then
      if ((ce = '1') and (cout_mem_92_22_push_front_pop_back_en = '1')) then
        for i_x_000000 in 1 downto 1 loop 
          cout_mem_92_22(i_x_000000) <= cout_mem_92_22(i_x_000000-1);
        end loop;
        cout_mem_92_22(0) <= cout_mem_92_22_front_din;
      end if;
    end if;
  end process proc_cout_mem_92_22;
  prev_mode_93_22_reg_i <= unsigned_to_std_logic_vector(prev_mode_93_22_next);
  prev_mode_93_22 <= std_logic_vector_to_unsigned(prev_mode_93_22_reg_o);
  prev_mode_93_22_reg_inst: entity work.synth_reg_w_init
    generic map (
      init_index => 2, 
      init_value => b"010", 
      latency => 1, 
      width => 3)
    port map (
      ce => ce, 
      clk => clk, 
      clr => clr, 
      i => prev_mode_93_22_reg_i, 
      o => prev_mode_93_22_reg_o);
  cast_71_18 <= s2s_cast(a_17_32, 34, 50, 34);
  cast_71_22 <= s2s_cast(b_17_35, 34, 50, 34);
  internal_s_71_5_addsub <= cast_71_18 - cast_71_22;
  op_mem_91_20_front_din <= internal_s_71_5_addsub;
  op_mem_91_20_push_front_pop_back_en <= '1';
  cout_mem_92_22_front_din <= std_logic_vector_to_unsigned("0");
  cout_mem_92_22_push_front_pop_back_en <= '1';
  prev_mode_93_22_next <= std_logic_vector_to_unsigned("000");
  s <= signed_to_std_logic_vector(op_mem_91_20_back);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity addsub_09d6c96f59 is
  port (
    a : in std_logic_vector((19 - 1) downto 0);
    b : in std_logic_vector((51 - 1) downto 0);
    s : out std_logic_vector((52 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end addsub_09d6c96f59;


architecture behavior of addsub_09d6c96f59 is
  signal a_17_32: signed((19 - 1) downto 0);
  signal b_17_35: signed((51 - 1) downto 0);
  type array_type_op_mem_91_20 is array (0 to (2 - 1)) of signed((52 - 1) downto 0);
  signal op_mem_91_20: array_type_op_mem_91_20 := (
    "0000000000000000000000000000000000000000000000000000",
    "0000000000000000000000000000000000000000000000000000");
  signal op_mem_91_20_front_din: signed((52 - 1) downto 0);
  signal op_mem_91_20_back: signed((52 - 1) downto 0);
  signal op_mem_91_20_push_front_pop_back_en: std_logic;
  type array_type_cout_mem_92_22 is array (0 to (2 - 1)) of unsigned((1 - 1) downto 0);
  signal cout_mem_92_22: array_type_cout_mem_92_22 := (
    "0",
    "0");
  signal cout_mem_92_22_front_din: unsigned((1 - 1) downto 0);
  signal cout_mem_92_22_back: unsigned((1 - 1) downto 0);
  signal cout_mem_92_22_push_front_pop_back_en: std_logic;
  signal prev_mode_93_22_next: unsigned((3 - 1) downto 0);
  signal prev_mode_93_22: unsigned((3 - 1) downto 0);
  signal prev_mode_93_22_reg_i: std_logic_vector((3 - 1) downto 0);
  signal prev_mode_93_22_reg_o: std_logic_vector((3 - 1) downto 0);
  signal cast_69_18: signed((52 - 1) downto 0);
  signal cast_69_22: signed((52 - 1) downto 0);
  signal internal_s_69_5_addsub: signed((52 - 1) downto 0);
begin
  a_17_32 <= std_logic_vector_to_signed(a);
  b_17_35 <= std_logic_vector_to_signed(b);
  op_mem_91_20_back <= op_mem_91_20(1);
  proc_op_mem_91_20: process (clk)
  is
    variable i: integer;
  begin
    if (clk'event and (clk = '1')) then
      if ((ce = '1') and (op_mem_91_20_push_front_pop_back_en = '1')) then
        for i in 1 downto 1 loop 
          op_mem_91_20(i) <= op_mem_91_20(i-1);
        end loop;
        op_mem_91_20(0) <= op_mem_91_20_front_din;
      end if;
    end if;
  end process proc_op_mem_91_20;
  cout_mem_92_22_back <= cout_mem_92_22(1);
  proc_cout_mem_92_22: process (clk)
  is
    variable i_x_000000: integer;
  begin
    if (clk'event and (clk = '1')) then
      if ((ce = '1') and (cout_mem_92_22_push_front_pop_back_en = '1')) then
        for i_x_000000 in 1 downto 1 loop 
          cout_mem_92_22(i_x_000000) <= cout_mem_92_22(i_x_000000-1);
        end loop;
        cout_mem_92_22(0) <= cout_mem_92_22_front_din;
      end if;
    end if;
  end process proc_cout_mem_92_22;
  prev_mode_93_22_reg_i <= unsigned_to_std_logic_vector(prev_mode_93_22_next);
  prev_mode_93_22 <= std_logic_vector_to_unsigned(prev_mode_93_22_reg_o);
  prev_mode_93_22_reg_inst: entity work.synth_reg_w_init
    generic map (
      init_index => 2, 
      init_value => b"010", 
      latency => 1, 
      width => 3)
    port map (
      ce => ce, 
      clk => clk, 
      clr => clr, 
      i => prev_mode_93_22_reg_i, 
      o => prev_mode_93_22_reg_o);
  cast_69_18 <= s2s_cast(a_17_32, 18, 52, 30);
  cast_69_22 <= s2s_cast(b_17_35, 30, 52, 30);
  internal_s_69_5_addsub <= cast_69_18 + cast_69_22;
  op_mem_91_20_front_din <= internal_s_69_5_addsub;
  op_mem_91_20_push_front_pop_back_en <= '1';
  cout_mem_92_22_front_din <= std_logic_vector_to_unsigned("0");
  cout_mem_92_22_push_front_pop_back_en <= '1';
  prev_mode_93_22_next <= std_logic_vector_to_unsigned("000");
  s <= signed_to_std_logic_vector(op_mem_91_20_back);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity delay_ed64862f6f is
  port (
    d : in std_logic_vector((19 - 1) downto 0);
    q : out std_logic_vector((19 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end delay_ed64862f6f;


architecture behavior of delay_ed64862f6f is
  signal d_1_22: std_logic_vector((19 - 1) downto 0);
  type array_type_op_mem_20_24 is array (0 to (3 - 1)) of std_logic_vector((19 - 1) downto 0);
  signal op_mem_20_24: array_type_op_mem_20_24 := (
    "0000000000000000000",
    "0000000000000000000",
    "0000000000000000000");
  signal op_mem_20_24_front_din: std_logic_vector((19 - 1) downto 0);
  signal op_mem_20_24_back: std_logic_vector((19 - 1) downto 0);
  signal op_mem_20_24_push_front_pop_back_en: std_logic;
begin
  d_1_22 <= d;
  op_mem_20_24_back <= op_mem_20_24(2);
  proc_op_mem_20_24: process (clk)
  is
    variable i: integer;
  begin
    if (clk'event and (clk = '1')) then
      if ((ce = '1') and (op_mem_20_24_push_front_pop_back_en = '1')) then
        for i in 2 downto 1 loop 
          op_mem_20_24(i) <= op_mem_20_24(i-1);
        end loop;
        op_mem_20_24(0) <= op_mem_20_24_front_din;
      end if;
    end if;
  end process proc_op_mem_20_24;
  op_mem_20_24_front_din <= d_1_22;
  op_mem_20_24_push_front_pop_back_en <= '1';
  q <= op_mem_20_24_back;
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity mult_edcb97cd50 is
  port (
    a : in std_logic_vector((20 - 1) downto 0);
    b : in std_logic_vector((31 - 1) downto 0);
    p : out std_logic_vector((51 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end mult_edcb97cd50;


architecture behavior of mult_edcb97cd50 is
  signal a_1_22: unsigned((20 - 1) downto 0);
  signal b_1_25: signed((31 - 1) downto 0);
  type array_type_op_mem_65_20 is array (0 to (3 - 1)) of signed((51 - 1) downto 0);
  signal op_mem_65_20: array_type_op_mem_65_20 := (
    "000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000000");
  signal op_mem_65_20_front_din: signed((51 - 1) downto 0);
  signal op_mem_65_20_back: signed((51 - 1) downto 0);
  signal op_mem_65_20_push_front_pop_back_en: std_logic;
  signal cast_cast_48_56: signed((21 - 1) downto 0);
  signal mult_48_56: signed((52 - 1) downto 0);
  signal cast_product_48_3_convert: signed((51 - 1) downto 0);
begin
  a_1_22 <= std_logic_vector_to_unsigned(a);
  b_1_25 <= std_logic_vector_to_signed(b);
  op_mem_65_20_back <= op_mem_65_20(2);
  proc_op_mem_65_20: process (clk)
  is
    variable i: integer;
  begin
    if (clk'event and (clk = '1')) then
      if ((ce = '1') and (op_mem_65_20_push_front_pop_back_en = '1')) then
        for i in 2 downto 1 loop 
          op_mem_65_20(i) <= op_mem_65_20(i-1);
        end loop;
        op_mem_65_20(0) <= op_mem_65_20_front_din;
      end if;
    end if;
  end process proc_op_mem_65_20;
  cast_cast_48_56 <= u2s_cast(a_1_22, 0, 21, 0);
  mult_48_56 <= (cast_cast_48_56 * b_1_25);
  cast_product_48_3_convert <= s2s_cast(mult_48_56, 30, 51, 30);
  op_mem_65_20_front_din <= cast_product_48_3_convert;
  op_mem_65_20_push_front_pop_back_en <= '1';
  p <= signed_to_std_logic_vector(op_mem_65_20_back);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity delay_8826f087e1 is
  port (
    d : in std_logic_vector((2 - 1) downto 0);
    q : out std_logic_vector((2 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end delay_8826f087e1;


architecture behavior of delay_8826f087e1 is
  signal d_1_22: std_logic_vector((2 - 1) downto 0);
  type array_type_op_mem_20_24 is array (0 to (5 - 1)) of std_logic_vector((2 - 1) downto 0);
  signal op_mem_20_24: array_type_op_mem_20_24 := (
    "00",
    "00",
    "00",
    "00",
    "00");
  signal op_mem_20_24_front_din: std_logic_vector((2 - 1) downto 0);
  signal op_mem_20_24_back: std_logic_vector((2 - 1) downto 0);
  signal op_mem_20_24_push_front_pop_back_en: std_logic;
begin
  d_1_22 <= d;
  op_mem_20_24_back <= op_mem_20_24(4);
  proc_op_mem_20_24: process (clk)
  is
    variable i: integer;
  begin
    if (clk'event and (clk = '1')) then
      if ((ce = '1') and (op_mem_20_24_push_front_pop_back_en = '1')) then
        for i in 4 downto 1 loop 
          op_mem_20_24(i) <= op_mem_20_24(i-1);
        end loop;
        op_mem_20_24(0) <= op_mem_20_24_front_din;
      end if;
    end if;
  end process proc_op_mem_20_24;
  op_mem_20_24_front_din <= d_1_22;
  op_mem_20_24_push_front_pop_back_en <= '1';
  q <= op_mem_20_24_back;
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity concat_94729ef7e0 is
  port (
    in0 : in std_logic_vector((31 - 1) downto 0);
    in1 : in std_logic_vector((31 - 1) downto 0);
    y : out std_logic_vector((62 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end concat_94729ef7e0;


architecture behavior of concat_94729ef7e0 is
  signal in0_1_23: unsigned((31 - 1) downto 0);
  signal in1_1_27: unsigned((31 - 1) downto 0);
  signal y_2_1_concat: unsigned((62 - 1) downto 0);
begin
  in0_1_23 <= std_logic_vector_to_unsigned(in0);
  in1_1_27 <= std_logic_vector_to_unsigned(in1);
  y_2_1_concat <= std_logic_vector_to_unsigned(unsigned_to_std_logic_vector(in0_1_23) & unsigned_to_std_logic_vector(in1_1_27));
  y <= unsigned_to_std_logic_vector(y_2_1_concat);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity reinterpret_64ddc4af5e is
  port (
    input_port : in std_logic_vector((31 - 1) downto 0);
    output_port : out std_logic_vector((31 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end reinterpret_64ddc4af5e;


architecture behavior of reinterpret_64ddc4af5e is
  signal input_port_1_40: signed((31 - 1) downto 0);
  signal output_port_5_5_force: unsigned((31 - 1) downto 0);
begin
  input_port_1_40 <= std_logic_vector_to_signed(input_port);
  output_port_5_5_force <= signed_to_unsigned(input_port_1_40);
  output_port <= unsigned_to_std_logic_vector(output_port_5_5_force);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity concat_32afb77cd2 is
  port (
    in0 : in std_logic_vector((1 - 1) downto 0);
    in1 : in std_logic_vector((1 - 1) downto 0);
    y : out std_logic_vector((2 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end concat_32afb77cd2;


architecture behavior of concat_32afb77cd2 is
  signal in0_1_23: boolean;
  signal in1_1_27: boolean;
  signal y_2_1_concat: unsigned((2 - 1) downto 0);
begin
  in0_1_23 <= ((in0) = "1");
  in1_1_27 <= ((in1) = "1");
  y_2_1_concat <= std_logic_vector_to_unsigned(boolean_to_vector(in0_1_23) & boolean_to_vector(in1_1_27));
  y <= unsigned_to_std_logic_vector(y_2_1_concat);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity delay_ca228dec41 is
  port (
    d : in std_logic_vector((31 - 1) downto 0);
    q : out std_logic_vector((31 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end delay_ca228dec41;


architecture behavior of delay_ca228dec41 is
  signal d_1_22: std_logic_vector((31 - 1) downto 0);
  type array_type_op_mem_20_24 is array (0 to (3 - 1)) of std_logic_vector((31 - 1) downto 0);
  signal op_mem_20_24: array_type_op_mem_20_24 := (
    "0000000000000000000000000000000",
    "0000000000000000000000000000000",
    "0000000000000000000000000000000");
  signal op_mem_20_24_front_din: std_logic_vector((31 - 1) downto 0);
  signal op_mem_20_24_back: std_logic_vector((31 - 1) downto 0);
  signal op_mem_20_24_push_front_pop_back_en: std_logic;
begin
  d_1_22 <= d;
  op_mem_20_24_back <= op_mem_20_24(2);
  proc_op_mem_20_24: process (clk)
  is
    variable i: integer;
  begin
    if (clk'event and (clk = '1')) then
      if ((ce = '1') and (op_mem_20_24_push_front_pop_back_en = '1')) then
        for i in 2 downto 1 loop 
          op_mem_20_24(i) <= op_mem_20_24(i-1);
        end loop;
        op_mem_20_24(0) <= op_mem_20_24_front_din;
      end if;
    end if;
  end process proc_op_mem_20_24;
  op_mem_20_24_front_din <= d_1_22;
  op_mem_20_24_push_front_pop_back_en <= '1';
  q <= op_mem_20_24_back;
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity delay_4ce33ca7e7 is
  port (
    d : in std_logic_vector((2 - 1) downto 0);
    q : out std_logic_vector((2 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end delay_4ce33ca7e7;


architecture behavior of delay_4ce33ca7e7 is
  signal d_1_22: std_logic_vector((2 - 1) downto 0);
  type array_type_op_mem_20_24 is array (0 to (1 - 1)) of std_logic_vector((2 - 1) downto 0);
  signal op_mem_20_24: array_type_op_mem_20_24 := (
    0 => "00");
  signal op_mem_20_24_front_din: std_logic_vector((2 - 1) downto 0);
  signal op_mem_20_24_back: std_logic_vector((2 - 1) downto 0);
  signal op_mem_20_24_push_front_pop_back_en: std_logic;
begin
  d_1_22 <= d;
  op_mem_20_24_back <= op_mem_20_24(0);
  proc_op_mem_20_24: process (clk)
  is
    variable i: integer;
  begin
    if (clk'event and (clk = '1')) then
      if ((ce = '1') and (op_mem_20_24_push_front_pop_back_en = '1')) then
        op_mem_20_24(0) <= op_mem_20_24_front_din;
      end if;
    end if;
  end process proc_op_mem_20_24;
  op_mem_20_24_front_din <= d_1_22;
  op_mem_20_24_push_front_pop_back_en <= '1';
  q <= op_mem_20_24_back;
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity delay_ef6ec19213 is
  port (
    d : in std_logic_vector((2 - 1) downto 0);
    q : out std_logic_vector((2 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end delay_ef6ec19213;


architecture behavior of delay_ef6ec19213 is
  signal d_1_22: std_logic_vector((2 - 1) downto 0);
  type array_type_op_mem_20_24 is array (0 to (7 - 1)) of std_logic_vector((2 - 1) downto 0);
  signal op_mem_20_24: array_type_op_mem_20_24 := (
    "00",
    "00",
    "00",
    "00",
    "00",
    "00",
    "00");
  signal op_mem_20_24_front_din: std_logic_vector((2 - 1) downto 0);
  signal op_mem_20_24_back: std_logic_vector((2 - 1) downto 0);
  signal op_mem_20_24_push_front_pop_back_en: std_logic;
begin
  d_1_22 <= d;
  op_mem_20_24_back <= op_mem_20_24(6);
  proc_op_mem_20_24: process (clk)
  is
    variable i: integer;
  begin
    if (clk'event and (clk = '1')) then
      if ((ce = '1') and (op_mem_20_24_push_front_pop_back_en = '1')) then
        for i in 6 downto 1 loop 
          op_mem_20_24(i) <= op_mem_20_24(i-1);
        end loop;
        op_mem_20_24(0) <= op_mem_20_24_front_din;
      end if;
    end if;
  end process proc_op_mem_20_24;
  op_mem_20_24_front_din <= d_1_22;
  op_mem_20_24_push_front_pop_back_en <= '1';
  q <= op_mem_20_24_back;
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity delay_46b7175e0f is
  port (
    d : in std_logic_vector((62 - 1) downto 0);
    q : out std_logic_vector((62 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end delay_46b7175e0f;


architecture behavior of delay_46b7175e0f is
  signal d_1_22: std_logic_vector((62 - 1) downto 0);
  type array_type_op_mem_20_24 is array (0 to (6 - 1)) of std_logic_vector((62 - 1) downto 0);
  signal op_mem_20_24: array_type_op_mem_20_24 := (
    "00000000000000000000000000000000000000000000000000000000000000",
    "00000000000000000000000000000000000000000000000000000000000000",
    "00000000000000000000000000000000000000000000000000000000000000",
    "00000000000000000000000000000000000000000000000000000000000000",
    "00000000000000000000000000000000000000000000000000000000000000",
    "00000000000000000000000000000000000000000000000000000000000000");
  signal op_mem_20_24_front_din: std_logic_vector((62 - 1) downto 0);
  signal op_mem_20_24_back: std_logic_vector((62 - 1) downto 0);
  signal op_mem_20_24_push_front_pop_back_en: std_logic;
begin
  d_1_22 <= d;
  op_mem_20_24_back <= op_mem_20_24(5);
  proc_op_mem_20_24: process (clk)
  is
    variable i: integer;
  begin
    if (clk'event and (clk = '1')) then
      if ((ce = '1') and (op_mem_20_24_push_front_pop_back_en = '1')) then
        for i in 5 downto 1 loop 
          op_mem_20_24(i) <= op_mem_20_24(i-1);
        end loop;
        op_mem_20_24(0) <= op_mem_20_24_front_din;
      end if;
    end if;
  end process proc_op_mem_20_24;
  op_mem_20_24_front_din <= d_1_22;
  op_mem_20_24_push_front_pop_back_en <= '1';
  q <= op_mem_20_24_back;
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity reinterpret_e2e786e1ed is
  port (
    input_port : in std_logic_vector((10 - 1) downto 0);
    output_port : out std_logic_vector((10 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end reinterpret_e2e786e1ed;


architecture behavior of reinterpret_e2e786e1ed is
  signal input_port_1_40: signed((10 - 1) downto 0);
  signal output_port_5_5_force: unsigned((10 - 1) downto 0);
begin
  input_port_1_40 <= std_logic_vector_to_signed(input_port);
  output_port_5_5_force <= signed_to_unsigned(input_port_1_40);
  output_port <= unsigned_to_std_logic_vector(output_port_5_5_force);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity concat_24b7d1333f is
  port (
    in0 : in std_logic_vector((62 - 1) downto 0);
    in1 : in std_logic_vector((22 - 1) downto 0);
    y : out std_logic_vector((84 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end concat_24b7d1333f;


architecture behavior of concat_24b7d1333f is
  signal in0_1_23: unsigned((62 - 1) downto 0);
  signal in1_1_27: unsigned((22 - 1) downto 0);
  signal y_2_1_concat: unsigned((84 - 1) downto 0);
begin
  in0_1_23 <= std_logic_vector_to_unsigned(in0);
  in1_1_27 <= std_logic_vector_to_unsigned(in1);
  y_2_1_concat <= std_logic_vector_to_unsigned(unsigned_to_std_logic_vector(in0_1_23) & unsigned_to_std_logic_vector(in1_1_27));
  y <= unsigned_to_std_logic_vector(y_2_1_concat);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity reinterpret_3cfe81c7ab is
  port (
    input_port : in std_logic_vector((22 - 1) downto 0);
    output_port : out std_logic_vector((22 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end reinterpret_3cfe81c7ab;


architecture behavior of reinterpret_3cfe81c7ab is
  signal input_port_1_40: unsigned((22 - 1) downto 0);
begin
  input_port_1_40 <= std_logic_vector_to_unsigned(input_port);
  output_port <= unsigned_to_std_logic_vector(input_port_1_40);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity constant_e89402c81f is
  port (
    op : out std_logic_vector((31 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end constant_e89402c81f;


architecture behavior of constant_e89402c81f is
begin
  op <= "0000000000000000010000000000000";
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity constant_bc7a810978 is
  port (
    op : out std_logic_vector((31 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end constant_bc7a810978;


architecture behavior of constant_bc7a810978 is
begin
  op <= "0000000000000000000000000000000";
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity mux_66ff556d13 is
  port (
    sel : in std_logic_vector((1 - 1) downto 0);
    d0 : in std_logic_vector((84 - 1) downto 0);
    d1 : in std_logic_vector((84 - 1) downto 0);
    y : out std_logic_vector((84 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end mux_66ff556d13;


architecture behavior of mux_66ff556d13 is
  signal sel_1_20: std_logic;
  signal d0_1_24: std_logic_vector((84 - 1) downto 0);
  signal d1_1_27: std_logic_vector((84 - 1) downto 0);
  type array_type_pipe_16_22 is array (0 to (1 - 1)) of std_logic_vector((84 - 1) downto 0);
  signal pipe_16_22: array_type_pipe_16_22 := (
    0 => "000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
  signal pipe_16_22_front_din: std_logic_vector((84 - 1) downto 0);
  signal pipe_16_22_back: std_logic_vector((84 - 1) downto 0);
  signal pipe_16_22_push_front_pop_back_en: std_logic;
  signal sel_internal_2_1_convert: std_logic_vector((1 - 1) downto 0);
  signal unregy_join_6_1: std_logic_vector((84 - 1) downto 0);
begin
  sel_1_20 <= sel(0);
  d0_1_24 <= d0;
  d1_1_27 <= d1;
  pipe_16_22_back <= pipe_16_22(0);
  proc_pipe_16_22: process (clk)
  is
    variable i: integer;
  begin
    if (clk'event and (clk = '1')) then
      if ((ce = '1') and (pipe_16_22_push_front_pop_back_en = '1')) then
        pipe_16_22(0) <= pipe_16_22_front_din;
      end if;
    end if;
  end process proc_pipe_16_22;
  sel_internal_2_1_convert <= cast(std_logic_to_vector(sel_1_20), 0, 1, 0, xlUnsigned);
  proc_switch_6_1: process (d0_1_24, d1_1_27, sel_internal_2_1_convert)
  is
  begin
    case sel_internal_2_1_convert is 
      when "0" =>
        unregy_join_6_1 <= d0_1_24;
      when others =>
        unregy_join_6_1 <= d1_1_27;
    end case;
  end process proc_switch_6_1;
  pipe_16_22_front_din <= unregy_join_6_1;
  pipe_16_22_push_front_pop_back_en <= '1';
  y <= pipe_16_22_back;
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity mux_e5741dcde9 is
  port (
    sel : in std_logic_vector((1 - 1) downto 0);
    d0 : in std_logic_vector((62 - 1) downto 0);
    d1 : in std_logic_vector((62 - 1) downto 0);
    y : out std_logic_vector((62 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end mux_e5741dcde9;


architecture behavior of mux_e5741dcde9 is
  signal sel_1_20: std_logic;
  signal d0_1_24: std_logic_vector((62 - 1) downto 0);
  signal d1_1_27: std_logic_vector((62 - 1) downto 0);
  type array_type_pipe_16_22 is array (0 to (1 - 1)) of std_logic_vector((62 - 1) downto 0);
  signal pipe_16_22: array_type_pipe_16_22 := (
    0 => "00000000000000000000000000000000000000000000000000000000000000");
  signal pipe_16_22_front_din: std_logic_vector((62 - 1) downto 0);
  signal pipe_16_22_back: std_logic_vector((62 - 1) downto 0);
  signal pipe_16_22_push_front_pop_back_en: std_logic;
  signal sel_internal_2_1_convert: std_logic_vector((1 - 1) downto 0);
  signal unregy_join_6_1: std_logic_vector((62 - 1) downto 0);
begin
  sel_1_20 <= sel(0);
  d0_1_24 <= d0;
  d1_1_27 <= d1;
  pipe_16_22_back <= pipe_16_22(0);
  proc_pipe_16_22: process (clk)
  is
    variable i: integer;
  begin
    if (clk'event and (clk = '1')) then
      if ((ce = '1') and (pipe_16_22_push_front_pop_back_en = '1')) then
        pipe_16_22(0) <= pipe_16_22_front_din;
      end if;
    end if;
  end process proc_pipe_16_22;
  sel_internal_2_1_convert <= cast(std_logic_to_vector(sel_1_20), 0, 1, 0, xlUnsigned);
  proc_switch_6_1: process (d0_1_24, d1_1_27, sel_internal_2_1_convert)
  is
  begin
    case sel_internal_2_1_convert is 
      when "0" =>
        unregy_join_6_1 <= d0_1_24;
      when others =>
        unregy_join_6_1 <= d1_1_27;
    end case;
  end process proc_switch_6_1;
  pipe_16_22_front_din <= unregy_join_6_1;
  pipe_16_22_push_front_pop_back_en <= '1';
  y <= pipe_16_22_back;
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity delay_3e300ae6bb is
  port (
    d : in std_logic_vector((85 - 1) downto 0);
    q : out std_logic_vector((85 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end delay_3e300ae6bb;


architecture behavior of delay_3e300ae6bb is
  signal d_1_22: std_logic_vector((85 - 1) downto 0);
  type array_type_op_mem_20_24 is array (0 to (2 - 1)) of std_logic_vector((85 - 1) downto 0);
  signal op_mem_20_24: array_type_op_mem_20_24 := (
    "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
  signal op_mem_20_24_front_din: std_logic_vector((85 - 1) downto 0);
  signal op_mem_20_24_back: std_logic_vector((85 - 1) downto 0);
  signal op_mem_20_24_push_front_pop_back_en: std_logic;
begin
  d_1_22 <= d;
  op_mem_20_24_back <= op_mem_20_24(1);
  proc_op_mem_20_24: process (clk)
  is
    variable i: integer;
  begin
    if (clk'event and (clk = '1')) then
      if ((ce = '1') and (op_mem_20_24_push_front_pop_back_en = '1')) then
        for i in 1 downto 1 loop 
          op_mem_20_24(i) <= op_mem_20_24(i-1);
        end loop;
        op_mem_20_24(0) <= op_mem_20_24_front_din;
      end if;
    end if;
  end process proc_op_mem_20_24;
  op_mem_20_24_front_din <= d_1_22;
  op_mem_20_24_push_front_pop_back_en <= '1';
  q <= op_mem_20_24_back;
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity delay_8aef8ddb97 is
  port (
    d : in std_logic_vector((62 - 1) downto 0);
    q : out std_logic_vector((62 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end delay_8aef8ddb97;


architecture behavior of delay_8aef8ddb97 is
  signal d_1_22: std_logic_vector((62 - 1) downto 0);
  type array_type_op_mem_20_24 is array (0 to (2 - 1)) of std_logic_vector((62 - 1) downto 0);
  signal op_mem_20_24: array_type_op_mem_20_24 := (
    "00000000000000000000000000000000000000000000000000000000000000",
    "00000000000000000000000000000000000000000000000000000000000000");
  signal op_mem_20_24_front_din: std_logic_vector((62 - 1) downto 0);
  signal op_mem_20_24_back: std_logic_vector((62 - 1) downto 0);
  signal op_mem_20_24_push_front_pop_back_en: std_logic;
begin
  d_1_22 <= d;
  op_mem_20_24_back <= op_mem_20_24(1);
  proc_op_mem_20_24: process (clk)
  is
    variable i: integer;
  begin
    if (clk'event and (clk = '1')) then
      if ((ce = '1') and (op_mem_20_24_push_front_pop_back_en = '1')) then
        for i in 1 downto 1 loop 
          op_mem_20_24(i) <= op_mem_20_24(i-1);
        end loop;
        op_mem_20_24(0) <= op_mem_20_24_front_din;
      end if;
    end if;
  end process proc_op_mem_20_24;
  op_mem_20_24_front_din <= d_1_22;
  op_mem_20_24_push_front_pop_back_en <= '1';
  q <= op_mem_20_24_back;
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity concat_a369e00c6b is
  port (
    in0 : in std_logic_vector((16 - 1) downto 0);
    in1 : in std_logic_vector((16 - 1) downto 0);
    y : out std_logic_vector((32 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end concat_a369e00c6b;


architecture behavior of concat_a369e00c6b is
  signal in0_1_23: unsigned((16 - 1) downto 0);
  signal in1_1_27: unsigned((16 - 1) downto 0);
  signal y_2_1_concat: unsigned((32 - 1) downto 0);
begin
  in0_1_23 <= std_logic_vector_to_unsigned(in0);
  in1_1_27 <= std_logic_vector_to_unsigned(in1);
  y_2_1_concat <= std_logic_vector_to_unsigned(unsigned_to_std_logic_vector(in0_1_23) & unsigned_to_std_logic_vector(in1_1_27));
  y <= unsigned_to_std_logic_vector(y_2_1_concat);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity constant_9b805894ff is
  port (
    op : out std_logic_vector((12 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end constant_9b805894ff;


architecture behavior of constant_9b805894ff is
begin
  op <= "111111111111";
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity constant_6d93c28b86 is
  port (
    op : out std_logic_vector((12 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end constant_6d93c28b86;


architecture behavior of constant_6d93c28b86 is
begin
  op <= "111111111110";
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity constant_68d110842c is
  port (
    op : out std_logic_vector((72 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end constant_68d110842c;


architecture behavior of constant_68d110842c is
begin
  op <= "000000000000000000000000000000000000000000000000000000000000000000000000";
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity relational_a0c795533c is
  port (
    a : in std_logic_vector((15 - 1) downto 0);
    b : in std_logic_vector((7 - 1) downto 0);
    op : out std_logic_vector((1 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end relational_a0c795533c;


architecture behavior of relational_a0c795533c is
  signal a_1_31: unsigned((15 - 1) downto 0);
  signal b_1_34: unsigned((7 - 1) downto 0);
  signal cast_12_17: unsigned((15 - 1) downto 0);
  signal result_12_3_rel: boolean;
begin
  a_1_31 <= std_logic_vector_to_unsigned(a);
  b_1_34 <= std_logic_vector_to_unsigned(b);
  cast_12_17 <= u2u_cast(b_1_34, 0, 15, 0);
  result_12_3_rel <= a_1_31 = cast_12_17;
  op <= boolean_to_vector(result_12_3_rel);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity relational_36ed515732 is
  port (
    a : in std_logic_vector((12 - 1) downto 0);
    b : in std_logic_vector((12 - 1) downto 0);
    op : out std_logic_vector((1 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end relational_36ed515732;


architecture behavior of relational_36ed515732 is
  signal a_1_31: unsigned((12 - 1) downto 0);
  signal b_1_34: unsigned((12 - 1) downto 0);
  type array_type_op_mem_32_22 is array (0 to (1 - 1)) of boolean;
  signal op_mem_32_22: array_type_op_mem_32_22 := (
    0 => false);
  signal op_mem_32_22_front_din: boolean;
  signal op_mem_32_22_back: boolean;
  signal op_mem_32_22_push_front_pop_back_en: std_logic;
  signal result_12_3_rel: boolean;
begin
  a_1_31 <= std_logic_vector_to_unsigned(a);
  b_1_34 <= std_logic_vector_to_unsigned(b);
  op_mem_32_22_back <= op_mem_32_22(0);
  proc_op_mem_32_22: process (clk)
  is
    variable i: integer;
  begin
    if (clk'event and (clk = '1')) then
      if ((ce = '1') and (op_mem_32_22_push_front_pop_back_en = '1')) then
        op_mem_32_22(0) <= op_mem_32_22_front_din;
      end if;
    end if;
  end process proc_op_mem_32_22;
  result_12_3_rel <= a_1_31 = b_1_34;
  op_mem_32_22_front_din <= result_12_3_rel;
  op_mem_32_22_push_front_pop_back_en <= '1';
  op <= boolean_to_vector(op_mem_32_22_back);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity counter_e63924e4e7 is
  port (
    rst : in std_logic_vector((1 - 1) downto 0);
    op : out std_logic_vector((7 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end counter_e63924e4e7;


architecture behavior of counter_e63924e4e7 is
  signal rst_1_40: boolean;
  signal count_reg_20_23: unsigned((7 - 1) downto 0) := "0000000";
  signal count_reg_20_23_rst: std_logic;
  signal bool_44_4: boolean;
  signal count_reg_join_44_1: unsigned((8 - 1) downto 0);
  signal count_reg_join_44_1_rst: std_logic;
  signal rst_limit_join_44_1: boolean;
begin
  rst_1_40 <= ((rst) = "1");
  proc_count_reg_20_23: process (clk)
  is
  begin
    if (clk'event and (clk = '1')) then
      if ((ce = '1') and (count_reg_20_23_rst = '1')) then
        count_reg_20_23 <= "0000000";
      elsif (ce = '1') then 
        count_reg_20_23 <= count_reg_20_23 + std_logic_vector_to_unsigned("0000001");
      end if;
    end if;
  end process proc_count_reg_20_23;
  bool_44_4 <= rst_1_40 or false;
  proc_if_44_1: process (bool_44_4, count_reg_20_23)
  is
  begin
    if bool_44_4 then
      count_reg_join_44_1_rst <= '1';
    else 
      count_reg_join_44_1_rst <= '0';
    end if;
    if bool_44_4 then
      rst_limit_join_44_1 <= false;
    else 
      rst_limit_join_44_1 <= false;
    end if;
  end process proc_if_44_1;
  count_reg_20_23_rst <= count_reg_join_44_1_rst;
  op <= unsigned_to_std_logic_vector(count_reg_20_23);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity counter_779ff41485 is
  port (
    rst : in std_logic_vector((1 - 1) downto 0);
    en : in std_logic_vector((1 - 1) downto 0);
    op : out std_logic_vector((12 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end counter_779ff41485;


architecture behavior of counter_779ff41485 is
  signal rst_1_40: boolean;
  signal en_1_45: boolean;
  signal count_reg_20_23: unsigned((12 - 1) downto 0) := "000000000000";
  signal count_reg_20_23_rst: std_logic;
  signal count_reg_20_23_en: std_logic;
  signal bool_44_4: boolean;
  signal rst_limit_join_44_1: boolean;
  signal count_reg_join_44_1: unsigned((13 - 1) downto 0);
  signal count_reg_join_44_1_en: std_logic;
  signal count_reg_join_44_1_rst: std_logic;
begin
  rst_1_40 <= ((rst) = "1");
  en_1_45 <= ((en) = "1");
  proc_count_reg_20_23: process (clk)
  is
  begin
    if (clk'event and (clk = '1')) then
      if ((ce = '1') and (count_reg_20_23_rst = '1')) then
        count_reg_20_23 <= "000000000000";
      elsif ((ce = '1') and (count_reg_20_23_en = '1')) then 
        count_reg_20_23 <= count_reg_20_23 + std_logic_vector_to_unsigned("000000000001");
      end if;
    end if;
  end process proc_count_reg_20_23;
  bool_44_4 <= rst_1_40 or false;
  proc_if_44_1: process (bool_44_4, count_reg_20_23, en_1_45)
  is
  begin
    if bool_44_4 then
      count_reg_join_44_1_rst <= '1';
    elsif en_1_45 then
      count_reg_join_44_1_rst <= '0';
    else 
      count_reg_join_44_1_rst <= '0';
    end if;
    if en_1_45 then
      count_reg_join_44_1_en <= '1';
    else 
      count_reg_join_44_1_en <= '0';
    end if;
    if bool_44_4 then
      rst_limit_join_44_1 <= false;
    elsif en_1_45 then
      rst_limit_join_44_1 <= false;
    else 
      rst_limit_join_44_1 <= false;
    end if;
  end process proc_if_44_1;
  count_reg_20_23_rst <= count_reg_join_44_1_rst;
  count_reg_20_23_en <= count_reg_join_44_1_en;
  op <= unsigned_to_std_logic_vector(count_reg_20_23);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity concat_db62c09dea is
  port (
    in0 : in std_logic_vector((8 - 1) downto 0);
    in1 : in std_logic_vector((12 - 1) downto 0);
    y : out std_logic_vector((20 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end concat_db62c09dea;


architecture behavior of concat_db62c09dea is
  signal in0_1_23: unsigned((8 - 1) downto 0);
  signal in1_1_27: unsigned((12 - 1) downto 0);
  signal y_2_1_concat: unsigned((20 - 1) downto 0);
begin
  in0_1_23 <= std_logic_vector_to_unsigned(in0);
  in1_1_27 <= std_logic_vector_to_unsigned(in1);
  y_2_1_concat <= std_logic_vector_to_unsigned(unsigned_to_std_logic_vector(in0_1_23) & unsigned_to_std_logic_vector(in1_1_27));
  y <= unsigned_to_std_logic_vector(y_2_1_concat);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity constant_5df6a9ace6 is
  port (
    op : out std_logic_vector((21 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end constant_5df6a9ace6;


architecture behavior of constant_5df6a9ace6 is
begin
  op <= "100000000000000000000";
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity constant_fd28b32bf8 is
  port (
    op : out std_logic_vector((12 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end constant_fd28b32bf8;


architecture behavior of constant_fd28b32bf8 is
begin
  op <= "000000000000";
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity constant_ac675e5b18 is
  port (
    op : out std_logic_vector((20 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end constant_ac675e5b18;


architecture behavior of constant_ac675e5b18 is
begin
  op <= "10000000000000000000";
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity constant_03e4098635 is
  port (
    op : out std_logic_vector((21 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end constant_03e4098635;


architecture behavior of constant_03e4098635 is
begin
  op <= "101111111100000000000";
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity delay_2dc2e1c046 is
  port (
    d : in std_logic_vector((21 - 1) downto 0);
    q : out std_logic_vector((21 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end delay_2dc2e1c046;


architecture behavior of delay_2dc2e1c046 is
  signal d_1_22: std_logic_vector((21 - 1) downto 0);
  type array_type_op_mem_20_24 is array (0 to (1 - 1)) of std_logic_vector((21 - 1) downto 0);
  signal op_mem_20_24: array_type_op_mem_20_24 := (
    0 => "000000000000000000000");
  signal op_mem_20_24_front_din: std_logic_vector((21 - 1) downto 0);
  signal op_mem_20_24_back: std_logic_vector((21 - 1) downto 0);
  signal op_mem_20_24_push_front_pop_back_en: std_logic;
begin
  d_1_22 <= d;
  op_mem_20_24_back <= op_mem_20_24(0);
  proc_op_mem_20_24: process (clk)
  is
    variable i: integer;
  begin
    if (clk'event and (clk = '1')) then
      if ((ce = '1') and (op_mem_20_24_push_front_pop_back_en = '1')) then
        op_mem_20_24(0) <= op_mem_20_24_front_din;
      end if;
    end if;
  end process proc_op_mem_20_24;
  op_mem_20_24_front_din <= d_1_22;
  op_mem_20_24_push_front_pop_back_en <= '1';
  q <= op_mem_20_24_back;
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity mux_5b0d4156a2 is
  port (
    sel : in std_logic_vector((1 - 1) downto 0);
    d0 : in std_logic_vector((20 - 1) downto 0);
    d1 : in std_logic_vector((20 - 1) downto 0);
    y : out std_logic_vector((20 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end mux_5b0d4156a2;


architecture behavior of mux_5b0d4156a2 is
  signal sel_1_20: std_logic;
  signal d0_1_24: std_logic_vector((20 - 1) downto 0);
  signal d1_1_27: std_logic_vector((20 - 1) downto 0);
  type array_type_pipe_16_22 is array (0 to (1 - 1)) of std_logic_vector((20 - 1) downto 0);
  signal pipe_16_22: array_type_pipe_16_22 := (
    0 => "00000000000000000000");
  signal pipe_16_22_front_din: std_logic_vector((20 - 1) downto 0);
  signal pipe_16_22_back: std_logic_vector((20 - 1) downto 0);
  signal pipe_16_22_push_front_pop_back_en: std_logic;
  signal sel_internal_2_1_convert: std_logic_vector((1 - 1) downto 0);
  signal unregy_join_6_1: std_logic_vector((20 - 1) downto 0);
begin
  sel_1_20 <= sel(0);
  d0_1_24 <= d0;
  d1_1_27 <= d1;
  pipe_16_22_back <= pipe_16_22(0);
  proc_pipe_16_22: process (clk)
  is
    variable i: integer;
  begin
    if (clk'event and (clk = '1')) then
      if ((ce = '1') and (pipe_16_22_push_front_pop_back_en = '1')) then
        pipe_16_22(0) <= pipe_16_22_front_din;
      end if;
    end if;
  end process proc_pipe_16_22;
  sel_internal_2_1_convert <= cast(std_logic_to_vector(sel_1_20), 0, 1, 0, xlUnsigned);
  proc_switch_6_1: process (d0_1_24, d1_1_27, sel_internal_2_1_convert)
  is
  begin
    case sel_internal_2_1_convert is 
      when "0" =>
        unregy_join_6_1 <= d0_1_24;
      when others =>
        unregy_join_6_1 <= d1_1_27;
    end case;
  end process proc_switch_6_1;
  pipe_16_22_front_din <= unregy_join_6_1;
  pipe_16_22_push_front_pop_back_en <= '1';
  y <= pipe_16_22_back;
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity relational_72dd42448d is
  port (
    a : in std_logic_vector((21 - 1) downto 0);
    b : in std_logic_vector((20 - 1) downto 0);
    op : out std_logic_vector((1 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end relational_72dd42448d;


architecture behavior of relational_72dd42448d is
  signal a_1_31: signed((21 - 1) downto 0);
  signal b_1_34: signed((20 - 1) downto 0);
  signal cast_16_16: signed((21 - 1) downto 0);
  signal result_16_3_rel: boolean;
begin
  a_1_31 <= std_logic_vector_to_signed(a);
  b_1_34 <= std_logic_vector_to_signed(b);
  cast_16_16 <= s2s_cast(b_1_34, 0, 21, 0);
  result_16_3_rel <= a_1_31 < cast_16_16;
  op <= boolean_to_vector(result_16_3_rel);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity concat_8e53793314 is
  port (
    in0 : in std_logic_vector((8 - 1) downto 0);
    in1 : in std_logic_vector((8 - 1) downto 0);
    y : out std_logic_vector((16 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end concat_8e53793314;


architecture behavior of concat_8e53793314 is
  signal in0_1_23: unsigned((8 - 1) downto 0);
  signal in1_1_27: unsigned((8 - 1) downto 0);
  signal y_2_1_concat: unsigned((16 - 1) downto 0);
begin
  in0_1_23 <= std_logic_vector_to_unsigned(in0);
  in1_1_27 <= std_logic_vector_to_unsigned(in1);
  y_2_1_concat <= std_logic_vector_to_unsigned(unsigned_to_std_logic_vector(in0_1_23) & unsigned_to_std_logic_vector(in1_1_27));
  y <= unsigned_to_std_logic_vector(y_2_1_concat);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity scale_fa7c2ab9f6 is
  port (
    ip : in std_logic_vector((16 - 1) downto 0);
    op : out std_logic_vector((16 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end scale_fa7c2ab9f6;


architecture behavior of scale_fa7c2ab9f6 is
  signal ip_17_23: signed((16 - 1) downto 0);
begin
  ip_17_23 <= std_logic_vector_to_signed(ip);
  op <= signed_to_std_logic_vector(ip_17_23);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity reinterpret_7025463ea8 is
  port (
    input_port : in std_logic_vector((16 - 1) downto 0);
    output_port : out std_logic_vector((16 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end reinterpret_7025463ea8;


architecture behavior of reinterpret_7025463ea8 is
  signal input_port_1_40: signed((16 - 1) downto 0);
  signal output_port_5_5_force: unsigned((16 - 1) downto 0);
begin
  input_port_1_40 <= std_logic_vector_to_signed(input_port);
  output_port_5_5_force <= signed_to_unsigned(input_port_1_40);
  output_port <= unsigned_to_std_logic_vector(output_port_5_5_force);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity mult_1f4d330bcc is
  port (
    a : in std_logic_vector((8 - 1) downto 0);
    b : in std_logic_vector((8 - 1) downto 0);
    p : out std_logic_vector((16 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end mult_1f4d330bcc;


architecture behavior of mult_1f4d330bcc is
  signal a_1_22: signed((8 - 1) downto 0);
  signal b_1_25: signed((8 - 1) downto 0);
  type array_type_op_mem_65_20 is array (0 to (3 - 1)) of signed((16 - 1) downto 0);
  signal op_mem_65_20: array_type_op_mem_65_20 := (
    "0000000000000000",
    "0000000000000000",
    "0000000000000000");
  signal op_mem_65_20_front_din: signed((16 - 1) downto 0);
  signal op_mem_65_20_back: signed((16 - 1) downto 0);
  signal op_mem_65_20_push_front_pop_back_en: std_logic;
  signal mult_46_56: signed((16 - 1) downto 0);
begin
  a_1_22 <= std_logic_vector_to_signed(a);
  b_1_25 <= std_logic_vector_to_signed(b);
  op_mem_65_20_back <= op_mem_65_20(2);
  proc_op_mem_65_20: process (clk)
  is
    variable i: integer;
  begin
    if (clk'event and (clk = '1')) then
      if ((ce = '1') and (op_mem_65_20_push_front_pop_back_en = '1')) then
        for i in 2 downto 1 loop 
          op_mem_65_20(i) <= op_mem_65_20(i-1);
        end loop;
        op_mem_65_20(0) <= op_mem_65_20_front_din;
      end if;
    end if;
  end process proc_op_mem_65_20;
  mult_46_56 <= (a_1_22 * b_1_25);
  op_mem_65_20_front_din <= mult_46_56;
  op_mem_65_20_push_front_pop_back_en <= '1';
  p <= signed_to_std_logic_vector(op_mem_65_20_back);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity constant_c11787fdd1 is
  port (
    op : out std_logic_vector((32 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end constant_c11787fdd1;


architecture behavior of constant_c11787fdd1 is
begin
  op <= "00000000000000000000100000000001";
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity relational_770e12e4ab is
  port (
    a : in std_logic_vector((32 - 1) downto 0);
    b : in std_logic_vector((32 - 1) downto 0);
    op : out std_logic_vector((1 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end relational_770e12e4ab;


architecture behavior of relational_770e12e4ab is
  signal a_1_31: unsigned((32 - 1) downto 0);
  signal b_1_34: unsigned((32 - 1) downto 0);
  type array_type_op_mem_32_22 is array (0 to (1 - 1)) of boolean;
  signal op_mem_32_22: array_type_op_mem_32_22 := (
    0 => false);
  signal op_mem_32_22_front_din: boolean;
  signal op_mem_32_22_back: boolean;
  signal op_mem_32_22_push_front_pop_back_en: std_logic;
  signal result_12_3_rel: boolean;
begin
  a_1_31 <= std_logic_vector_to_unsigned(a);
  b_1_34 <= std_logic_vector_to_unsigned(b);
  op_mem_32_22_back <= op_mem_32_22(0);
  proc_op_mem_32_22: process (clk)
  is
    variable i: integer;
  begin
    if (clk'event and (clk = '1')) then
      if ((ce = '1') and (op_mem_32_22_push_front_pop_back_en = '1')) then
        op_mem_32_22(0) <= op_mem_32_22_front_din;
      end if;
    end if;
  end process proc_op_mem_32_22;
  result_12_3_rel <= a_1_31 = b_1_34;
  op_mem_32_22_front_din <= result_12_3_rel;
  op_mem_32_22_push_front_pop_back_en <= '1';
  op <= boolean_to_vector(op_mem_32_22_back);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity delay_2940aaa0cf is
  port (
    d : in std_logic_vector((124 - 1) downto 0);
    q : out std_logic_vector((124 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end delay_2940aaa0cf;


architecture behavior of delay_2940aaa0cf is
  signal d_1_22: std_logic_vector((124 - 1) downto 0);
  type array_type_op_mem_20_24 is array (0 to (1 - 1)) of std_logic_vector((124 - 1) downto 0);
  signal op_mem_20_24: array_type_op_mem_20_24 := (
    0 => "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
  signal op_mem_20_24_front_din: std_logic_vector((124 - 1) downto 0);
  signal op_mem_20_24_back: std_logic_vector((124 - 1) downto 0);
  signal op_mem_20_24_push_front_pop_back_en: std_logic;
begin
  d_1_22 <= d;
  op_mem_20_24_back <= op_mem_20_24(0);
  proc_op_mem_20_24: process (clk)
  is
    variable i: integer;
  begin
    if (clk'event and (clk = '1')) then
      if ((ce = '1') and (op_mem_20_24_push_front_pop_back_en = '1')) then
        op_mem_20_24(0) <= op_mem_20_24_front_din;
      end if;
    end if;
  end process proc_op_mem_20_24;
  op_mem_20_24_front_din <= d_1_22;
  op_mem_20_24_push_front_pop_back_en <= '1';
  q <= op_mem_20_24_back;
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity constant_b366689086 is
  port (
    op : out std_logic_vector((19 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end constant_b366689086;


architecture behavior of constant_b366689086 is
begin
  op <= "0000000000000000000";
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity relational_6e0a4878aa is
  port (
    a : in std_logic_vector((19 - 1) downto 0);
    b : in std_logic_vector((19 - 1) downto 0);
    op : out std_logic_vector((1 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end relational_6e0a4878aa;


architecture behavior of relational_6e0a4878aa is
  signal a_1_31: unsigned((19 - 1) downto 0);
  signal b_1_34: unsigned((19 - 1) downto 0);
  type array_type_op_mem_32_22 is array (0 to (1 - 1)) of boolean;
  signal op_mem_32_22: array_type_op_mem_32_22 := (
    0 => false);
  signal op_mem_32_22_front_din: boolean;
  signal op_mem_32_22_back: boolean;
  signal op_mem_32_22_push_front_pop_back_en: std_logic;
  signal result_12_3_rel: boolean;
begin
  a_1_31 <= std_logic_vector_to_unsigned(a);
  b_1_34 <= std_logic_vector_to_unsigned(b);
  op_mem_32_22_back <= op_mem_32_22(0);
  proc_op_mem_32_22: process (clk)
  is
    variable i: integer;
  begin
    if (clk'event and (clk = '1')) then
      if ((ce = '1') and (op_mem_32_22_push_front_pop_back_en = '1')) then
        op_mem_32_22(0) <= op_mem_32_22_front_din;
      end if;
    end if;
  end process proc_op_mem_32_22;
  result_12_3_rel <= a_1_31 = b_1_34;
  op_mem_32_22_front_din <= result_12_3_rel;
  op_mem_32_22_push_front_pop_back_en <= '1';
  op <= boolean_to_vector(op_mem_32_22_back);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity delay_55777e5be4 is
  port (
    d : in std_logic_vector((12 - 1) downto 0);
    q : out std_logic_vector((12 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end delay_55777e5be4;


architecture behavior of delay_55777e5be4 is
  signal d_1_22: std_logic_vector((12 - 1) downto 0);
  type array_type_op_mem_20_24 is array (0 to (2 - 1)) of std_logic_vector((12 - 1) downto 0);
  signal op_mem_20_24: array_type_op_mem_20_24 := (
    "000000000000",
    "000000000000");
  signal op_mem_20_24_front_din: std_logic_vector((12 - 1) downto 0);
  signal op_mem_20_24_back: std_logic_vector((12 - 1) downto 0);
  signal op_mem_20_24_push_front_pop_back_en: std_logic;
begin
  d_1_22 <= d;
  op_mem_20_24_back <= op_mem_20_24(1);
  proc_op_mem_20_24: process (clk)
  is
    variable i: integer;
  begin
    if (clk'event and (clk = '1')) then
      if ((ce = '1') and (op_mem_20_24_push_front_pop_back_en = '1')) then
        for i in 1 downto 1 loop 
          op_mem_20_24(i) <= op_mem_20_24(i-1);
        end loop;
        op_mem_20_24(0) <= op_mem_20_24_front_din;
      end if;
    end if;
  end process proc_op_mem_20_24;
  op_mem_20_24_front_din <= d_1_22;
  op_mem_20_24_push_front_pop_back_en <= '1';
  q <= op_mem_20_24_back;
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity xlfast_fourier_transform_a4ad93cf9e09abed368f778cd25f8340 is 
  port(
    busy:out std_logic;
    ce:in std_logic;
    clk:in std_logic;
    done:out std_logic;
    dv:out std_logic;
    edone:out std_logic;
    en:in std_logic;
    fwd_inv:in std_logic;
    fwd_inv_we:in std_logic;
    rfd:out std_logic;
    rst:in std_logic;
    start:in std_logic;
    unload:in std_logic;
    xk_im:out std_logic_vector(30 downto 0);
    xk_index:out std_logic_vector(11 downto 0);
    xk_re:out std_logic_vector(30 downto 0);
    xn_im:in std_logic_vector(17 downto 0);
    xn_index:out std_logic_vector(11 downto 0);
    xn_re:in std_logic_vector(17 downto 0)
  );
end xlfast_fourier_transform_a4ad93cf9e09abed368f778cd25f8340;


architecture behavior of xlfast_fourier_transform_a4ad93cf9e09abed368f778cd25f8340  is
  component xfft_v7_0_8bfb05e20d13daa5
    port(
      busy:out std_logic;
      ce:in std_logic;
      clk:in std_logic;
      done:out std_logic;
      dv:out std_logic;
      edone:out std_logic;
      fwd_inv:in std_logic;
      fwd_inv_we:in std_logic;
      rfd:out std_logic;
      sclr:in std_logic;
      start:in std_logic;
      unload:in std_logic;
      xk_im:out std_logic_vector(30 downto 0);
      xk_index:out std_logic_vector(11 downto 0);
      xk_re:out std_logic_vector(30 downto 0);
      xn_im:in std_logic_vector(17 downto 0);
      xn_index:out std_logic_vector(11 downto 0);
      xn_re:in std_logic_vector(17 downto 0)
    );
end component;
signal ce_net: std_logic := '0';
signal sclr_net: std_logic := '0';
begin
  ce_net <= en and ce;
  sclr_net <= rst and ce;
  xfft_v7_0_8bfb05e20d13daa5_instance : xfft_v7_0_8bfb05e20d13daa5
    port map(
      busy=>busy,
      ce=>ce_net,
      clk=>clk,
      done=>done,
      dv=>dv,
      edone=>edone,
      fwd_inv=>fwd_inv,
      fwd_inv_we=>fwd_inv_we,
      rfd=>rfd,
      sclr=>sclr_net,
      start=>start,
      unload=>unload,
      xk_im=>xk_im,
      xk_index=>xk_index,
      xk_re=>xk_re,
      xn_im=>xn_im,
      xn_index=>xn_index,
      xn_re=>xn_re
    );
end  behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity concat_17f3248be4 is
  port (
    in0 : in std_logic_vector((64 - 1) downto 0);
    in1 : in std_logic_vector((64 - 1) downto 0);
    y : out std_logic_vector((128 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end concat_17f3248be4;


architecture behavior of concat_17f3248be4 is
  signal in0_1_23: unsigned((64 - 1) downto 0);
  signal in1_1_27: unsigned((64 - 1) downto 0);
  signal y_2_1_concat: unsigned((128 - 1) downto 0);
begin
  in0_1_23 <= std_logic_vector_to_unsigned(in0);
  in1_1_27 <= std_logic_vector_to_unsigned(in1);
  y_2_1_concat <= std_logic_vector_to_unsigned(unsigned_to_std_logic_vector(in0_1_23) & unsigned_to_std_logic_vector(in1_1_27));
  y <= unsigned_to_std_logic_vector(y_2_1_concat);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity delay_bbdca7d4e2 is
  port (
    d : in std_logic_vector((124 - 1) downto 0);
    q : out std_logic_vector((124 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end delay_bbdca7d4e2;


architecture behavior of delay_bbdca7d4e2 is
  signal d_1_22: std_logic_vector((124 - 1) downto 0);
  type array_type_op_mem_20_24 is array (0 to (2 - 1)) of std_logic_vector((124 - 1) downto 0);
  signal op_mem_20_24: array_type_op_mem_20_24 := (
    "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
  signal op_mem_20_24_front_din: std_logic_vector((124 - 1) downto 0);
  signal op_mem_20_24_back: std_logic_vector((124 - 1) downto 0);
  signal op_mem_20_24_push_front_pop_back_en: std_logic;
begin
  d_1_22 <= d;
  op_mem_20_24_back <= op_mem_20_24(1);
  proc_op_mem_20_24: process (clk)
  is
    variable i: integer;
  begin
    if (clk'event and (clk = '1')) then
      if ((ce = '1') and (op_mem_20_24_push_front_pop_back_en = '1')) then
        for i in 1 downto 1 loop 
          op_mem_20_24(i) <= op_mem_20_24(i-1);
        end loop;
        op_mem_20_24(0) <= op_mem_20_24_front_din;
      end if;
    end if;
  end process proc_op_mem_20_24;
  op_mem_20_24_front_din <= d_1_22;
  op_mem_20_24_push_front_pop_back_en <= '1';
  q <= op_mem_20_24_back;
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity mux_6203b36850 is
  port (
    sel : in std_logic_vector((1 - 1) downto 0);
    d0 : in std_logic_vector((128 - 1) downto 0);
    d1 : in std_logic_vector((128 - 1) downto 0);
    y : out std_logic_vector((128 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end mux_6203b36850;


architecture behavior of mux_6203b36850 is
  signal sel_1_20: std_logic;
  signal d0_1_24: std_logic_vector((128 - 1) downto 0);
  signal d1_1_27: std_logic_vector((128 - 1) downto 0);
  type array_type_pipe_16_22 is array (0 to (1 - 1)) of std_logic_vector((128 - 1) downto 0);
  signal pipe_16_22: array_type_pipe_16_22 := (
    0 => "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
  signal pipe_16_22_front_din: std_logic_vector((128 - 1) downto 0);
  signal pipe_16_22_back: std_logic_vector((128 - 1) downto 0);
  signal pipe_16_22_push_front_pop_back_en: std_logic;
  signal sel_internal_2_1_convert: std_logic_vector((1 - 1) downto 0);
  signal unregy_join_6_1: std_logic_vector((128 - 1) downto 0);
begin
  sel_1_20 <= sel(0);
  d0_1_24 <= d0;
  d1_1_27 <= d1;
  pipe_16_22_back <= pipe_16_22(0);
  proc_pipe_16_22: process (clk)
  is
    variable i: integer;
  begin
    if (clk'event and (clk = '1')) then
      if ((ce = '1') and (pipe_16_22_push_front_pop_back_en = '1')) then
        pipe_16_22(0) <= pipe_16_22_front_din;
      end if;
    end if;
  end process proc_pipe_16_22;
  sel_internal_2_1_convert <= cast(std_logic_to_vector(sel_1_20), 0, 1, 0, xlUnsigned);
  proc_switch_6_1: process (d0_1_24, d1_1_27, sel_internal_2_1_convert)
  is
  begin
    case sel_internal_2_1_convert is 
      when "0" =>
        unregy_join_6_1 <= d0_1_24;
      when others =>
        unregy_join_6_1 <= d1_1_27;
    end case;
  end process proc_switch_6_1;
  pipe_16_22_front_din <= unregy_join_6_1;
  pipe_16_22_push_front_pop_back_en <= '1';
  y <= pipe_16_22_back;
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity constant_473db002f8 is
  port (
    op : out std_logic_vector((7 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end constant_473db002f8;


architecture behavior of constant_473db002f8 is
begin
  op <= "0100000";
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity logical_954ee29728 is
  port (
    d0 : in std_logic_vector((1 - 1) downto 0);
    d1 : in std_logic_vector((1 - 1) downto 0);
    d2 : in std_logic_vector((1 - 1) downto 0);
    y : out std_logic_vector((1 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end logical_954ee29728;


architecture behavior of logical_954ee29728 is
  signal d0_1_24: std_logic;
  signal d1_1_27: std_logic;
  signal d2_1_30: std_logic;
  signal fully_2_1_bit: std_logic;
begin
  d0_1_24 <= d0(0);
  d1_1_27 <= d1(0);
  d2_1_30 <= d2(0);
  fully_2_1_bit <= d0_1_24 and d1_1_27 and d2_1_30;
  y <= std_logic_to_vector(fully_2_1_bit);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity relational_5d2bc997de is
  port (
    a : in std_logic_vector((15 - 1) downto 0);
    b : in std_logic_vector((15 - 1) downto 0);
    op : out std_logic_vector((1 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end relational_5d2bc997de;


architecture behavior of relational_5d2bc997de is
  signal a_1_31: unsigned((15 - 1) downto 0);
  signal b_1_34: unsigned((15 - 1) downto 0);
  type array_type_op_mem_32_22 is array (0 to (1 - 1)) of boolean;
  signal op_mem_32_22: array_type_op_mem_32_22 := (
    0 => false);
  signal op_mem_32_22_front_din: boolean;
  signal op_mem_32_22_back: boolean;
  signal op_mem_32_22_push_front_pop_back_en: std_logic;
  signal result_14_3_rel: boolean;
begin
  a_1_31 <= std_logic_vector_to_unsigned(a);
  b_1_34 <= std_logic_vector_to_unsigned(b);
  op_mem_32_22_back <= op_mem_32_22(0);
  proc_op_mem_32_22: process (clk)
  is
    variable i: integer;
  begin
    if (clk'event and (clk = '1')) then
      if ((ce = '1') and (op_mem_32_22_push_front_pop_back_en = '1')) then
        op_mem_32_22(0) <= op_mem_32_22_front_din;
      end if;
    end if;
  end process proc_op_mem_32_22;
  result_14_3_rel <= a_1_31 /= b_1_34;
  op_mem_32_22_front_din <= result_14_3_rel;
  op_mem_32_22_push_front_pop_back_en <= '1';
  op <= boolean_to_vector(op_mem_32_22_back);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity concat_e3f217b04f is
  port (
    in0 : in std_logic_vector((1 - 1) downto 0);
    in1 : in std_logic_vector((1 - 1) downto 0);
    in2 : in std_logic_vector((6 - 1) downto 0);
    in3 : in std_logic_vector((1 - 1) downto 0);
    in4 : in std_logic_vector((6 - 1) downto 0);
    y : out std_logic_vector((15 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end concat_e3f217b04f;


architecture behavior of concat_e3f217b04f is
  signal in0_1_23: unsigned((1 - 1) downto 0);
  signal in1_1_27: unsigned((1 - 1) downto 0);
  signal in2_1_31: unsigned((6 - 1) downto 0);
  signal in3_1_35: unsigned((1 - 1) downto 0);
  signal in4_1_39: unsigned((6 - 1) downto 0);
  signal y_2_1_concat: unsigned((15 - 1) downto 0);
begin
  in0_1_23 <= std_logic_vector_to_unsigned(in0);
  in1_1_27 <= std_logic_vector_to_unsigned(in1);
  in2_1_31 <= std_logic_vector_to_unsigned(in2);
  in3_1_35 <= std_logic_vector_to_unsigned(in3);
  in4_1_39 <= std_logic_vector_to_unsigned(in4);
  y_2_1_concat <= std_logic_vector_to_unsigned(unsigned_to_std_logic_vector(in0_1_23) & unsigned_to_std_logic_vector(in1_1_27) & unsigned_to_std_logic_vector(in2_1_31) & unsigned_to_std_logic_vector(in3_1_35) & unsigned_to_std_logic_vector(in4_1_39));
  y <= unsigned_to_std_logic_vector(y_2_1_concat);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity concat_83e473517e is
  port (
    in0 : in std_logic_vector((1 - 1) downto 0);
    in1 : in std_logic_vector((7 - 1) downto 0);
    y : out std_logic_vector((8 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end concat_83e473517e;


architecture behavior of concat_83e473517e is
  signal in0_1_23: unsigned((1 - 1) downto 0);
  signal in1_1_27: unsigned((7 - 1) downto 0);
  signal y_2_1_concat: unsigned((8 - 1) downto 0);
begin
  in0_1_23 <= std_logic_vector_to_unsigned(in0);
  in1_1_27 <= std_logic_vector_to_unsigned(in1);
  y_2_1_concat <= std_logic_vector_to_unsigned(unsigned_to_std_logic_vector(in0_1_23) & unsigned_to_std_logic_vector(in1_1_27));
  y <= unsigned_to_std_logic_vector(y_2_1_concat);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity inverter_62c5f03117 is
  port (
    ip : in std_logic_vector((6 - 1) downto 0);
    op : out std_logic_vector((6 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end inverter_62c5f03117;


architecture behavior of inverter_62c5f03117 is
  signal ip_1_26: unsigned((6 - 1) downto 0);
  type array_type_op_mem_22_20 is array (0 to (1 - 1)) of unsigned((6 - 1) downto 0);
  signal op_mem_22_20: array_type_op_mem_22_20 := (
    0 => "000000");
  signal op_mem_22_20_front_din: unsigned((6 - 1) downto 0);
  signal op_mem_22_20_back: unsigned((6 - 1) downto 0);
  signal op_mem_22_20_push_front_pop_back_en: std_logic;
  signal internal_ip_12_1_bitnot: unsigned((6 - 1) downto 0);
begin
  ip_1_26 <= std_logic_vector_to_unsigned(ip);
  op_mem_22_20_back <= op_mem_22_20(0);
  proc_op_mem_22_20: process (clk)
  is
    variable i: integer;
  begin
    if (clk'event and (clk = '1')) then
      if ((ce = '1') and (op_mem_22_20_push_front_pop_back_en = '1')) then
        op_mem_22_20(0) <= op_mem_22_20_front_din;
      end if;
    end if;
  end process proc_op_mem_22_20;
  internal_ip_12_1_bitnot <= std_logic_vector_to_unsigned(not unsigned_to_std_logic_vector(ip_1_26));
  op_mem_22_20_push_front_pop_back_en <= '0';
  op <= unsigned_to_std_logic_vector(internal_ip_12_1_bitnot);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity inverter_e2b989a05e is
  port (
    ip : in std_logic_vector((1 - 1) downto 0);
    op : out std_logic_vector((1 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end inverter_e2b989a05e;


architecture behavior of inverter_e2b989a05e is
  signal ip_1_26: unsigned((1 - 1) downto 0);
  type array_type_op_mem_22_20 is array (0 to (1 - 1)) of unsigned((1 - 1) downto 0);
  signal op_mem_22_20: array_type_op_mem_22_20 := (
    0 => "0");
  signal op_mem_22_20_front_din: unsigned((1 - 1) downto 0);
  signal op_mem_22_20_back: unsigned((1 - 1) downto 0);
  signal op_mem_22_20_push_front_pop_back_en: std_logic;
  signal internal_ip_12_1_bitnot: unsigned((1 - 1) downto 0);
begin
  ip_1_26 <= std_logic_vector_to_unsigned(ip);
  op_mem_22_20_back <= op_mem_22_20(0);
  proc_op_mem_22_20: process (clk)
  is
    variable i: integer;
  begin
    if (clk'event and (clk = '1')) then
      if ((ce = '1') and (op_mem_22_20_push_front_pop_back_en = '1')) then
        op_mem_22_20(0) <= op_mem_22_20_front_din;
      end if;
    end if;
  end process proc_op_mem_22_20;
  internal_ip_12_1_bitnot <= std_logic_vector_to_unsigned(not unsigned_to_std_logic_vector(ip_1_26));
  op_mem_22_20_push_front_pop_back_en <= '0';
  op <= unsigned_to_std_logic_vector(internal_ip_12_1_bitnot);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity relational_ba5c6f1dfc is
  port (
    a : in std_logic_vector((8 - 1) downto 0);
    b : in std_logic_vector((8 - 1) downto 0);
    op : out std_logic_vector((1 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end relational_ba5c6f1dfc;


architecture behavior of relational_ba5c6f1dfc is
  signal a_1_31: unsigned((8 - 1) downto 0);
  signal b_1_34: unsigned((8 - 1) downto 0);
  type array_type_op_mem_32_22 is array (0 to (1 - 1)) of boolean;
  signal op_mem_32_22: array_type_op_mem_32_22 := (
    0 => false);
  signal op_mem_32_22_front_din: boolean;
  signal op_mem_32_22_back: boolean;
  signal op_mem_32_22_push_front_pop_back_en: std_logic;
  signal result_16_3_rel: boolean;
begin
  a_1_31 <= std_logic_vector_to_unsigned(a);
  b_1_34 <= std_logic_vector_to_unsigned(b);
  op_mem_32_22_back <= op_mem_32_22(0);
  proc_op_mem_32_22: process (clk)
  is
    variable i: integer;
  begin
    if (clk'event and (clk = '1')) then
      if ((ce = '1') and (op_mem_32_22_push_front_pop_back_en = '1')) then
        op_mem_32_22(0) <= op_mem_32_22_front_din;
      end if;
    end if;
  end process proc_op_mem_32_22;
  result_16_3_rel <= a_1_31 < b_1_34;
  op_mem_32_22_front_din <= result_16_3_rel;
  op_mem_32_22_push_front_pop_back_en <= '1';
  op <= boolean_to_vector(op_mem_32_22_back);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity constant_2ae71e3b73 is
  port (
    op : out std_logic_vector((25 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end constant_2ae71e3b73;


architecture behavior of constant_2ae71e3b73 is
begin
  op <= "1000000000000000000000000";
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity relational_487ac75be9 is
  port (
    a : in std_logic_vector((25 - 1) downto 0);
    b : in std_logic_vector((25 - 1) downto 0);
    op : out std_logic_vector((1 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end relational_487ac75be9;


architecture behavior of relational_487ac75be9 is
  signal a_1_31: unsigned((25 - 1) downto 0);
  signal b_1_34: unsigned((25 - 1) downto 0);
  signal result_14_3_rel: boolean;
begin
  a_1_31 <= std_logic_vector_to_unsigned(a);
  b_1_34 <= std_logic_vector_to_unsigned(b);
  result_14_3_rel <= a_1_31 /= b_1_34;
  op <= boolean_to_vector(result_14_3_rel);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity constant_33835d3375 is
  port (
    op : out std_logic_vector((31 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end constant_33835d3375;


architecture behavior of constant_33835d3375 is
begin
  op <= "1000000000000000000000000000000";
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity relational_d3a37482f6 is
  port (
    a : in std_logic_vector((31 - 1) downto 0);
    b : in std_logic_vector((31 - 1) downto 0);
    op : out std_logic_vector((1 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end relational_d3a37482f6;


architecture behavior of relational_d3a37482f6 is
  signal a_1_31: unsigned((31 - 1) downto 0);
  signal b_1_34: unsigned((31 - 1) downto 0);
  signal result_14_3_rel: boolean;
begin
  a_1_31 <= std_logic_vector_to_unsigned(a);
  b_1_34 <= std_logic_vector_to_unsigned(b);
  result_14_3_rel <= a_1_31 /= b_1_34;
  op <= boolean_to_vector(result_14_3_rel);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity inverter_e4a281cf78 is
  port (
    ip : in std_logic_vector((1 - 1) downto 0);
    op : out std_logic_vector((1 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end inverter_e4a281cf78;


architecture behavior of inverter_e4a281cf78 is
  signal ip_1_26: unsigned((1 - 1) downto 0);
  type array_type_op_mem_22_20 is array (0 to (1 - 1)) of unsigned((1 - 1) downto 0);
  signal op_mem_22_20: array_type_op_mem_22_20 := (
    0 => "0");
  signal op_mem_22_20_front_din: unsigned((1 - 1) downto 0);
  signal op_mem_22_20_back: unsigned((1 - 1) downto 0);
  signal op_mem_22_20_push_front_pop_back_en: std_logic;
  signal internal_ip_12_1_bitnot: unsigned((1 - 1) downto 0);
begin
  ip_1_26 <= std_logic_vector_to_unsigned(ip);
  op_mem_22_20_back <= op_mem_22_20(0);
  proc_op_mem_22_20: process (clk)
  is
    variable i: integer;
  begin
    if (clk'event and (clk = '1')) then
      if ((ce = '1') and (op_mem_22_20_push_front_pop_back_en = '1')) then
        op_mem_22_20(0) <= op_mem_22_20_front_din;
      end if;
    end if;
  end process proc_op_mem_22_20;
  internal_ip_12_1_bitnot <= std_logic_vector_to_unsigned(not unsigned_to_std_logic_vector(ip_1_26));
  op_mem_22_20_front_din <= internal_ip_12_1_bitnot;
  op_mem_22_20_push_front_pop_back_en <= '1';
  op <= unsigned_to_std_logic_vector(op_mem_22_20_back);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity inverter_6844eee868 is
  port (
    ip : in std_logic_vector((1 - 1) downto 0);
    op : out std_logic_vector((1 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end inverter_6844eee868;


architecture behavior of inverter_6844eee868 is
  signal ip_1_26: boolean;
  type array_type_op_mem_22_20 is array (0 to (1 - 1)) of boolean;
  signal op_mem_22_20: array_type_op_mem_22_20 := (
    0 => false);
  signal op_mem_22_20_front_din: boolean;
  signal op_mem_22_20_back: boolean;
  signal op_mem_22_20_push_front_pop_back_en: std_logic;
  signal internal_ip_12_1_bitnot: boolean;
begin
  ip_1_26 <= ((ip) = "1");
  op_mem_22_20_back <= op_mem_22_20(0);
  proc_op_mem_22_20: process (clk)
  is
    variable i: integer;
  begin
    if (clk'event and (clk = '1')) then
      if ((ce = '1') and (op_mem_22_20_push_front_pop_back_en = '1')) then
        op_mem_22_20(0) <= op_mem_22_20_front_din;
      end if;
    end if;
  end process proc_op_mem_22_20;
  internal_ip_12_1_bitnot <= ((not boolean_to_vector(ip_1_26)) = "1");
  op_mem_22_20_front_din <= internal_ip_12_1_bitnot;
  op_mem_22_20_push_front_pop_back_en <= '1';
  op <= boolean_to_vector(op_mem_22_20_back);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity logical_5773759131 is
  port (
    d0 : in std_logic_vector((1 - 1) downto 0);
    d1 : in std_logic_vector((1 - 1) downto 0);
    d2 : in std_logic_vector((1 - 1) downto 0);
    y : out std_logic_vector((1 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end logical_5773759131;


architecture behavior of logical_5773759131 is
  signal d0_1_24: std_logic;
  signal d1_1_27: std_logic;
  signal d2_1_30: std_logic;
  type array_type_latency_pipe_5_26 is array (0 to (1 - 1)) of std_logic;
  signal latency_pipe_5_26: array_type_latency_pipe_5_26 := (
    0 => '0');
  signal latency_pipe_5_26_front_din: std_logic;
  signal latency_pipe_5_26_back: std_logic;
  signal latency_pipe_5_26_push_front_pop_back_en: std_logic;
  signal fully_2_1_bit: std_logic;
begin
  d0_1_24 <= d0(0);
  d1_1_27 <= d1(0);
  d2_1_30 <= d2(0);
  latency_pipe_5_26_back <= latency_pipe_5_26(0);
  proc_latency_pipe_5_26: process (clk)
  is
    variable i: integer;
  begin
    if (clk'event and (clk = '1')) then
      if ((ce = '1') and (latency_pipe_5_26_push_front_pop_back_en = '1')) then
        latency_pipe_5_26(0) <= latency_pipe_5_26_front_din;
      end if;
    end if;
  end process proc_latency_pipe_5_26;
  fully_2_1_bit <= d0_1_24 or d1_1_27 or d2_1_30;
  latency_pipe_5_26_front_din <= fully_2_1_bit;
  latency_pipe_5_26_push_front_pop_back_en <= '1';
  y <= std_logic_to_vector(latency_pipe_5_26_back);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity mux_1e22c21d05 is
  port (
    sel : in std_logic_vector((1 - 1) downto 0);
    d0 : in std_logic_vector((1 - 1) downto 0);
    d1 : in std_logic_vector((1 - 1) downto 0);
    y : out std_logic_vector((1 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end mux_1e22c21d05;


architecture behavior of mux_1e22c21d05 is
  signal sel_1_20: std_logic;
  signal d0_1_24: std_logic;
  signal d1_1_27: std_logic;
  type array_type_pipe_16_22 is array (0 to (1 - 1)) of std_logic;
  signal pipe_16_22: array_type_pipe_16_22 := (
    0 => '0');
  signal pipe_16_22_front_din: std_logic;
  signal pipe_16_22_back: std_logic;
  signal pipe_16_22_push_front_pop_back_en: std_logic;
  signal sel_internal_2_1_convert: std_logic_vector((1 - 1) downto 0);
  signal unregy_join_6_1: std_logic;
begin
  sel_1_20 <= sel(0);
  d0_1_24 <= d0(0);
  d1_1_27 <= d1(0);
  pipe_16_22_back <= pipe_16_22(0);
  proc_pipe_16_22: process (clk)
  is
    variable i: integer;
  begin
    if (clk'event and (clk = '1')) then
      if ((ce = '1') and (pipe_16_22_push_front_pop_back_en = '1')) then
        pipe_16_22(0) <= pipe_16_22_front_din;
      end if;
    end if;
  end process proc_pipe_16_22;
  sel_internal_2_1_convert <= cast(std_logic_to_vector(sel_1_20), 0, 1, 0, xlUnsigned);
  proc_switch_6_1: process (d0_1_24, d1_1_27, sel_internal_2_1_convert)
  is
  begin
    case sel_internal_2_1_convert is 
      when "0" =>
        unregy_join_6_1 <= d0_1_24;
      when others =>
        unregy_join_6_1 <= d1_1_27;
    end case;
  end process proc_switch_6_1;
  pipe_16_22_front_din <= unregy_join_6_1;
  pipe_16_22_push_front_pop_back_en <= '1';
  y <= std_logic_to_vector(pipe_16_22_back);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity concat_eb40f005cd is
  port (
    in0 : in std_logic_vector((36 - 1) downto 0);
    in1 : in std_logic_vector((12 - 1) downto 0);
    in2 : in std_logic_vector((16 - 1) downto 0);
    y : out std_logic_vector((64 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end concat_eb40f005cd;


architecture behavior of concat_eb40f005cd is
  signal in0_1_23: unsigned((36 - 1) downto 0);
  signal in1_1_27: unsigned((12 - 1) downto 0);
  signal in2_1_31: unsigned((16 - 1) downto 0);
  signal y_2_1_concat: unsigned((64 - 1) downto 0);
begin
  in0_1_23 <= std_logic_vector_to_unsigned(in0);
  in1_1_27 <= std_logic_vector_to_unsigned(in1);
  in2_1_31 <= std_logic_vector_to_unsigned(in2);
  y_2_1_concat <= std_logic_vector_to_unsigned(unsigned_to_std_logic_vector(in0_1_23) & unsigned_to_std_logic_vector(in1_1_27) & unsigned_to_std_logic_vector(in2_1_31));
  y <= unsigned_to_std_logic_vector(y_2_1_concat);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity concat_f4ce182b0d is
  port (
    in0 : in std_logic_vector((3 - 1) downto 0);
    in1 : in std_logic_vector((1 - 1) downto 0);
    in2 : in std_logic_vector((1 - 1) downto 0);
    in3 : in std_logic_vector((1 - 1) downto 0);
    in4 : in std_logic_vector((1 - 1) downto 0);
    in5 : in std_logic_vector((1 - 1) downto 0);
    y : out std_logic_vector((8 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end concat_f4ce182b0d;


architecture behavior of concat_f4ce182b0d is
  signal in0_1_23: unsigned((3 - 1) downto 0);
  signal in1_1_27: boolean;
  signal in2_1_31: unsigned((1 - 1) downto 0);
  signal in3_1_35: boolean;
  signal in4_1_39: boolean;
  signal in5_1_43: boolean;
  signal y_2_1_concat: unsigned((8 - 1) downto 0);
begin
  in0_1_23 <= std_logic_vector_to_unsigned(in0);
  in1_1_27 <= ((in1) = "1");
  in2_1_31 <= std_logic_vector_to_unsigned(in2);
  in3_1_35 <= ((in3) = "1");
  in4_1_39 <= ((in4) = "1");
  in5_1_43 <= ((in5) = "1");
  y_2_1_concat <= std_logic_vector_to_unsigned(unsigned_to_std_logic_vector(in0_1_23) & boolean_to_vector(in1_1_27) & unsigned_to_std_logic_vector(in2_1_31) & boolean_to_vector(in3_1_35) & boolean_to_vector(in4_1_39) & boolean_to_vector(in5_1_43));
  y <= unsigned_to_std_logic_vector(y_2_1_concat);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity concat_114a1e1663 is
  port (
    in0 : in std_logic_vector((4 - 1) downto 0);
    in1 : in std_logic_vector((8 - 1) downto 0);
    y : out std_logic_vector((12 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end concat_114a1e1663;


architecture behavior of concat_114a1e1663 is
  signal in0_1_23: unsigned((4 - 1) downto 0);
  signal in1_1_27: unsigned((8 - 1) downto 0);
  signal y_2_1_concat: unsigned((12 - 1) downto 0);
begin
  in0_1_23 <= std_logic_vector_to_unsigned(in0);
  in1_1_27 <= std_logic_vector_to_unsigned(in1);
  y_2_1_concat <= std_logic_vector_to_unsigned(unsigned_to_std_logic_vector(in0_1_23) & unsigned_to_std_logic_vector(in1_1_27));
  y <= unsigned_to_std_logic_vector(y_2_1_concat);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity constant_578dda96c6 is
  port (
    op : out std_logic_vector((5 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end constant_578dda96c6;


architecture behavior of constant_578dda96c6 is
begin
  op <= "11111";
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity mux_6054a14682 is
  port (
    sel : in std_logic_vector((1 - 1) downto 0);
    d0 : in std_logic_vector((64 - 1) downto 0);
    d1 : in std_logic_vector((64 - 1) downto 0);
    y : out std_logic_vector((64 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end mux_6054a14682;


architecture behavior of mux_6054a14682 is
  signal sel_1_20: std_logic;
  signal d0_1_24: std_logic_vector((64 - 1) downto 0);
  signal d1_1_27: std_logic_vector((64 - 1) downto 0);
  type array_type_pipe_16_22 is array (0 to (2 - 1)) of std_logic_vector((64 - 1) downto 0);
  signal pipe_16_22: array_type_pipe_16_22 := (
    "0000000000000000000000000000000000000000000000000000000000000000",
    "0000000000000000000000000000000000000000000000000000000000000000");
  signal pipe_16_22_front_din: std_logic_vector((64 - 1) downto 0);
  signal pipe_16_22_back: std_logic_vector((64 - 1) downto 0);
  signal pipe_16_22_push_front_pop_back_en: std_logic;
  signal sel_internal_2_1_convert: std_logic_vector((1 - 1) downto 0);
  signal unregy_join_6_1: std_logic_vector((64 - 1) downto 0);
begin
  sel_1_20 <= sel(0);
  d0_1_24 <= d0;
  d1_1_27 <= d1;
  pipe_16_22_back <= pipe_16_22(1);
  proc_pipe_16_22: process (clk)
  is
    variable i: integer;
  begin
    if (clk'event and (clk = '1')) then
      if ((ce = '1') and (pipe_16_22_push_front_pop_back_en = '1')) then
        for i in 1 downto 1 loop 
          pipe_16_22(i) <= pipe_16_22(i-1);
        end loop;
        pipe_16_22(0) <= pipe_16_22_front_din;
      end if;
    end if;
  end process proc_pipe_16_22;
  sel_internal_2_1_convert <= cast(std_logic_to_vector(sel_1_20), 0, 1, 0, xlUnsigned);
  proc_switch_6_1: process (d0_1_24, d1_1_27, sel_internal_2_1_convert)
  is
  begin
    case sel_internal_2_1_convert is 
      when "0" =>
        unregy_join_6_1 <= d0_1_24;
      when others =>
        unregy_join_6_1 <= d1_1_27;
    end case;
  end process proc_switch_6_1;
  pipe_16_22_front_din <= unregy_join_6_1;
  pipe_16_22_push_front_pop_back_en <= '1';
  y <= pipe_16_22_back;
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity delay_e2d047c154 is
  port (
    d : in std_logic_vector((64 - 1) downto 0);
    q : out std_logic_vector((64 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end delay_e2d047c154;


architecture behavior of delay_e2d047c154 is
  signal d_1_22: std_logic_vector((64 - 1) downto 0);
  type array_type_op_mem_20_24 is array (0 to (1 - 1)) of std_logic_vector((64 - 1) downto 0);
  signal op_mem_20_24: array_type_op_mem_20_24 := (
    0 => "0000000000000000000000000000000000000000000000000000000000000000");
  signal op_mem_20_24_front_din: std_logic_vector((64 - 1) downto 0);
  signal op_mem_20_24_back: std_logic_vector((64 - 1) downto 0);
  signal op_mem_20_24_push_front_pop_back_en: std_logic;
begin
  d_1_22 <= d;
  op_mem_20_24_back <= op_mem_20_24(0);
  proc_op_mem_20_24: process (clk)
  is
    variable i: integer;
  begin
    if (clk'event and (clk = '1')) then
      if ((ce = '1') and (op_mem_20_24_push_front_pop_back_en = '1')) then
        op_mem_20_24(0) <= op_mem_20_24_front_din;
      end if;
    end if;
  end process proc_op_mem_20_24;
  op_mem_20_24_front_din <= d_1_22;
  op_mem_20_24_push_front_pop_back_en <= '1';
  q <= op_mem_20_24_back;
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity delay_23f848c85b is
  port (
    d : in std_logic_vector((8 - 1) downto 0);
    q : out std_logic_vector((8 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end delay_23f848c85b;


architecture behavior of delay_23f848c85b is
  signal d_1_22: std_logic_vector((8 - 1) downto 0);
  type array_type_op_mem_20_24 is array (0 to (2 - 1)) of std_logic_vector((8 - 1) downto 0);
  signal op_mem_20_24: array_type_op_mem_20_24 := (
    "00000000",
    "00000000");
  signal op_mem_20_24_front_din: std_logic_vector((8 - 1) downto 0);
  signal op_mem_20_24_back: std_logic_vector((8 - 1) downto 0);
  signal op_mem_20_24_push_front_pop_back_en: std_logic;
begin
  d_1_22 <= d;
  op_mem_20_24_back <= op_mem_20_24(1);
  proc_op_mem_20_24: process (clk)
  is
    variable i: integer;
  begin
    if (clk'event and (clk = '1')) then
      if ((ce = '1') and (op_mem_20_24_push_front_pop_back_en = '1')) then
        for i in 1 downto 1 loop 
          op_mem_20_24(i) <= op_mem_20_24(i-1);
        end loop;
        op_mem_20_24(0) <= op_mem_20_24_front_din;
      end if;
    end if;
  end process proc_op_mem_20_24;
  op_mem_20_24_front_din <= d_1_22;
  op_mem_20_24_push_front_pop_back_en <= '1';
  q <= op_mem_20_24_back;
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity counter_7f1bcfc849 is
  port (
    rst : in std_logic_vector((1 - 1) downto 0);
    en : in std_logic_vector((1 - 1) downto 0);
    op : out std_logic_vector((53 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end counter_7f1bcfc849;


architecture behavior of counter_7f1bcfc849 is
  signal rst_1_40: boolean;
  signal en_1_45: boolean;
  signal count_reg_20_23: unsigned((53 - 1) downto 0) := "00000000000000000000000000000000000000000000000000000";
  signal count_reg_20_23_rst: std_logic;
  signal count_reg_20_23_en: std_logic;
  signal bool_44_4: boolean;
  signal count_reg_join_44_1: unsigned((54 - 1) downto 0);
  signal count_reg_join_44_1_en: std_logic;
  signal count_reg_join_44_1_rst: std_logic;
  signal rst_limit_join_44_1: boolean;
begin
  rst_1_40 <= ((rst) = "1");
  en_1_45 <= ((en) = "1");
  proc_count_reg_20_23: process (clk)
  is
  begin
    if (clk'event and (clk = '1')) then
      if ((ce = '1') and (count_reg_20_23_rst = '1')) then
        count_reg_20_23 <= "00000000000000000000000000000000000000000000000000000";
      elsif ((ce = '1') and (count_reg_20_23_en = '1')) then 
        count_reg_20_23 <= count_reg_20_23 + std_logic_vector_to_unsigned("00000000000000000000000000000000000000000000000000001");
      end if;
    end if;
  end process proc_count_reg_20_23;
  bool_44_4 <= rst_1_40 or false;
  proc_if_44_1: process (bool_44_4, count_reg_20_23, en_1_45)
  is
  begin
    if bool_44_4 then
      count_reg_join_44_1_rst <= '1';
    elsif en_1_45 then
      count_reg_join_44_1_rst <= '0';
    else 
      count_reg_join_44_1_rst <= '0';
    end if;
    if en_1_45 then
      count_reg_join_44_1_en <= '1';
    else 
      count_reg_join_44_1_en <= '0';
    end if;
    if bool_44_4 then
      rst_limit_join_44_1 <= false;
    elsif en_1_45 then
      rst_limit_join_44_1 <= false;
    else 
      rst_limit_join_44_1 <= false;
    end if;
  end process proc_if_44_1;
  count_reg_20_23_rst <= count_reg_join_44_1_rst;
  count_reg_20_23_en <= count_reg_join_44_1_en;
  op <= unsigned_to_std_logic_vector(count_reg_20_23);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity concat_8ed7cb66cd is
  port (
    in0 : in std_logic_vector((16 - 1) downto 0);
    in1 : in std_logic_vector((16 - 1) downto 0);
    in2 : in std_logic_vector((32 - 1) downto 0);
    y : out std_logic_vector((64 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end concat_8ed7cb66cd;


architecture behavior of concat_8ed7cb66cd is
  signal in0_1_23: unsigned((16 - 1) downto 0);
  signal in1_1_27: unsigned((16 - 1) downto 0);
  signal in2_1_31: unsigned((32 - 1) downto 0);
  signal y_2_1_concat: unsigned((64 - 1) downto 0);
begin
  in0_1_23 <= std_logic_vector_to_unsigned(in0);
  in1_1_27 <= std_logic_vector_to_unsigned(in1);
  in2_1_31 <= std_logic_vector_to_unsigned(in2);
  y_2_1_concat <= std_logic_vector_to_unsigned(unsigned_to_std_logic_vector(in0_1_23) & unsigned_to_std_logic_vector(in1_1_27) & unsigned_to_std_logic_vector(in2_1_31));
  y <= unsigned_to_std_logic_vector(y_2_1_concat);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity mux_fd01d62b53 is
  port (
    sel : in std_logic_vector((1 - 1) downto 0);
    d0 : in std_logic_vector((64 - 1) downto 0);
    d1 : in std_logic_vector((64 - 1) downto 0);
    y : out std_logic_vector((64 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end mux_fd01d62b53;


architecture behavior of mux_fd01d62b53 is
  signal sel_1_20: std_logic;
  signal d0_1_24: std_logic_vector((64 - 1) downto 0);
  signal d1_1_27: std_logic_vector((64 - 1) downto 0);
  type array_type_pipe_16_22 is array (0 to (1 - 1)) of std_logic_vector((64 - 1) downto 0);
  signal pipe_16_22: array_type_pipe_16_22 := (
    0 => "0000000000000000000000000000000000000000000000000000000000000000");
  signal pipe_16_22_front_din: std_logic_vector((64 - 1) downto 0);
  signal pipe_16_22_back: std_logic_vector((64 - 1) downto 0);
  signal pipe_16_22_push_front_pop_back_en: std_logic;
  signal sel_internal_2_1_convert: std_logic_vector((1 - 1) downto 0);
  signal unregy_join_6_1: std_logic_vector((64 - 1) downto 0);
begin
  sel_1_20 <= sel(0);
  d0_1_24 <= d0;
  d1_1_27 <= d1;
  pipe_16_22_back <= pipe_16_22(0);
  proc_pipe_16_22: process (clk)
  is
    variable i: integer;
  begin
    if (clk'event and (clk = '1')) then
      if ((ce = '1') and (pipe_16_22_push_front_pop_back_en = '1')) then
        pipe_16_22(0) <= pipe_16_22_front_din;
      end if;
    end if;
  end process proc_pipe_16_22;
  sel_internal_2_1_convert <= cast(std_logic_to_vector(sel_1_20), 0, 1, 0, xlUnsigned);
  proc_switch_6_1: process (d0_1_24, d1_1_27, sel_internal_2_1_convert)
  is
  begin
    case sel_internal_2_1_convert is 
      when "0" =>
        unregy_join_6_1 <= d0_1_24;
      when others =>
        unregy_join_6_1 <= d1_1_27;
    end case;
  end process proc_switch_6_1;
  pipe_16_22_front_din <= unregy_join_6_1;
  pipe_16_22_push_front_pop_back_en <= '1';
  y <= pipe_16_22_back;
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity concat_8b51f4067b is
  port (
    in0 : in std_logic_vector((16 - 1) downto 0);
    in1 : in std_logic_vector((16 - 1) downto 0);
    in2 : in std_logic_vector((16 - 1) downto 0);
    in3 : in std_logic_vector((16 - 1) downto 0);
    y : out std_logic_vector((64 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end concat_8b51f4067b;


architecture behavior of concat_8b51f4067b is
  signal in0_1_23: unsigned((16 - 1) downto 0);
  signal in1_1_27: unsigned((16 - 1) downto 0);
  signal in2_1_31: unsigned((16 - 1) downto 0);
  signal in3_1_35: unsigned((16 - 1) downto 0);
  signal y_2_1_concat: unsigned((64 - 1) downto 0);
begin
  in0_1_23 <= std_logic_vector_to_unsigned(in0);
  in1_1_27 <= std_logic_vector_to_unsigned(in1);
  in2_1_31 <= std_logic_vector_to_unsigned(in2);
  in3_1_35 <= std_logic_vector_to_unsigned(in3);
  y_2_1_concat <= std_logic_vector_to_unsigned(unsigned_to_std_logic_vector(in0_1_23) & unsigned_to_std_logic_vector(in1_1_27) & unsigned_to_std_logic_vector(in2_1_31) & unsigned_to_std_logic_vector(in3_1_35));
  y <= unsigned_to_std_logic_vector(y_2_1_concat);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity constant_7ef2258ec8 is
  port (
    op : out std_logic_vector((64 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end constant_7ef2258ec8;


architecture behavior of constant_7ef2258ec8 is
begin
  op <= "0000000100100011010001010110011110001001101010111100110111110000";
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity delay_9bb25f1d93 is
  port (
    d : in std_logic_vector((16 - 1) downto 0);
    q : out std_logic_vector((16 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end delay_9bb25f1d93;


architecture behavior of delay_9bb25f1d93 is
  signal d_1_22: std_logic_vector((16 - 1) downto 0);
begin
  d_1_22 <= d;
  q <= d_1_22;
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity mux_66e06093b2 is
  port (
    sel : in std_logic_vector((1 - 1) downto 0);
    d0 : in std_logic_vector((64 - 1) downto 0);
    d1 : in std_logic_vector((64 - 1) downto 0);
    y : out std_logic_vector((64 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end mux_66e06093b2;


architecture behavior of mux_66e06093b2 is
  signal sel_1_20: std_logic;
  signal d0_1_24: std_logic_vector((64 - 1) downto 0);
  signal d1_1_27: std_logic_vector((64 - 1) downto 0);
  signal sel_internal_2_1_convert: std_logic_vector((1 - 1) downto 0);
  signal unregy_join_6_1: std_logic_vector((64 - 1) downto 0);
begin
  sel_1_20 <= sel(0);
  d0_1_24 <= d0;
  d1_1_27 <= d1;
  sel_internal_2_1_convert <= cast(std_logic_to_vector(sel_1_20), 0, 1, 0, xlUnsigned);
  proc_switch_6_1: process (d0_1_24, d1_1_27, sel_internal_2_1_convert)
  is
  begin
    case sel_internal_2_1_convert is 
      when "0" =>
        unregy_join_6_1 <= d0_1_24;
      when others =>
        unregy_join_6_1 <= d1_1_27;
    end case;
  end process proc_switch_6_1;
  y <= unregy_join_6_1;
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity concat_4564aa4c8b is
  port (
    in0 : in std_logic_vector((1 - 1) downto 0);
    in1 : in std_logic_vector((64 - 1) downto 0);
    in2 : in std_logic_vector((1 - 1) downto 0);
    y : out std_logic_vector((66 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end concat_4564aa4c8b;


architecture behavior of concat_4564aa4c8b is
  signal in0_1_23: unsigned((1 - 1) downto 0);
  signal in1_1_27: unsigned((64 - 1) downto 0);
  signal in2_1_31: unsigned((1 - 1) downto 0);
  signal y_2_1_concat: unsigned((66 - 1) downto 0);
begin
  in0_1_23 <= std_logic_vector_to_unsigned(in0);
  in1_1_27 <= std_logic_vector_to_unsigned(in1);
  in2_1_31 <= std_logic_vector_to_unsigned(in2);
  y_2_1_concat <= std_logic_vector_to_unsigned(unsigned_to_std_logic_vector(in0_1_23) & unsigned_to_std_logic_vector(in1_1_27) & unsigned_to_std_logic_vector(in2_1_31));
  y <= unsigned_to_std_logic_vector(y_2_1_concat);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity bitbasher_28534cf16d is
  port (
    a : in std_logic_vector((36 - 1) downto 0);
    b : out std_logic_vector((36 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end bitbasher_28534cf16d;


architecture behavior of bitbasher_28534cf16d is
  signal a_1_26: unsigned((36 - 1) downto 0);
  signal slice_5_38: unsigned((1 - 1) downto 0);
  signal concat_5_29: unsigned((1 - 1) downto 0);
  signal slice_5_67: unsigned((1 - 1) downto 0);
  signal concat_5_58: unsigned((1 - 1) downto 0);
  signal slice_5_96: unsigned((1 - 1) downto 0);
  signal concat_5_87: unsigned((1 - 1) downto 0);
  signal slice_5_125: unsigned((1 - 1) downto 0);
  signal concat_5_116: unsigned((1 - 1) downto 0);
  signal slice_5_142: unsigned((8 - 1) downto 0);
  signal slice_5_160: unsigned((8 - 1) downto 0);
  signal slice_5_178: unsigned((8 - 1) downto 0);
  signal slice_5_195: unsigned((8 - 1) downto 0);
  signal fullb_5_1_concat: unsigned((36 - 1) downto 0);
begin
  a_1_26 <= std_logic_vector_to_unsigned(a);
  slice_5_38 <= u2u_slice(a_1_26, 35, 35);
  concat_5_29 <= std_logic_vector_to_unsigned(unsigned_to_std_logic_vector(slice_5_38));
  slice_5_67 <= u2u_slice(a_1_26, 26, 26);
  concat_5_58 <= std_logic_vector_to_unsigned(unsigned_to_std_logic_vector(slice_5_67));
  slice_5_96 <= u2u_slice(a_1_26, 17, 17);
  concat_5_87 <= std_logic_vector_to_unsigned(unsigned_to_std_logic_vector(slice_5_96));
  slice_5_125 <= u2u_slice(a_1_26, 8, 8);
  concat_5_116 <= std_logic_vector_to_unsigned(unsigned_to_std_logic_vector(slice_5_125));
  slice_5_142 <= u2u_slice(a_1_26, 34, 27);
  slice_5_160 <= u2u_slice(a_1_26, 25, 18);
  slice_5_178 <= u2u_slice(a_1_26, 16, 9);
  slice_5_195 <= u2u_slice(a_1_26, 7, 0);
  fullb_5_1_concat <= std_logic_vector_to_unsigned(unsigned_to_std_logic_vector(concat_5_29) & unsigned_to_std_logic_vector(concat_5_58) & unsigned_to_std_logic_vector(concat_5_87) & unsigned_to_std_logic_vector(concat_5_116) & unsigned_to_std_logic_vector(slice_5_142) & unsigned_to_std_logic_vector(slice_5_160) & unsigned_to_std_logic_vector(slice_5_178) & unsigned_to_std_logic_vector(slice_5_195));
  b <= unsigned_to_std_logic_vector(fullb_5_1_concat);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity bitbasher_bb056d7e90 is
  port (
    a : in std_logic_vector((36 - 1) downto 0);
    b : out std_logic_vector((36 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end bitbasher_bb056d7e90;


architecture behavior of bitbasher_bb056d7e90 is
  signal a_1_26: unsigned((36 - 1) downto 0);
  signal slice_5_38: unsigned((1 - 1) downto 0);
  signal concat_5_29: unsigned((1 - 1) downto 0);
  signal slice_5_57: unsigned((8 - 1) downto 0);
  signal slice_5_85: unsigned((1 - 1) downto 0);
  signal concat_5_76: unsigned((1 - 1) downto 0);
  signal slice_5_104: unsigned((8 - 1) downto 0);
  signal slice_5_132: unsigned((1 - 1) downto 0);
  signal concat_5_123: unsigned((1 - 1) downto 0);
  signal slice_5_151: unsigned((8 - 1) downto 0);
  signal slice_5_178: unsigned((1 - 1) downto 0);
  signal concat_5_169: unsigned((1 - 1) downto 0);
  signal slice_5_197: unsigned((8 - 1) downto 0);
  signal fullb_5_1_concat: unsigned((36 - 1) downto 0);
begin
  a_1_26 <= std_logic_vector_to_unsigned(a);
  slice_5_38 <= u2u_slice(a_1_26, 35, 35);
  concat_5_29 <= std_logic_vector_to_unsigned(unsigned_to_std_logic_vector(slice_5_38));
  slice_5_57 <= u2u_slice(a_1_26, 31, 24);
  slice_5_85 <= u2u_slice(a_1_26, 34, 34);
  concat_5_76 <= std_logic_vector_to_unsigned(unsigned_to_std_logic_vector(slice_5_85));
  slice_5_104 <= u2u_slice(a_1_26, 23, 16);
  slice_5_132 <= u2u_slice(a_1_26, 33, 33);
  concat_5_123 <= std_logic_vector_to_unsigned(unsigned_to_std_logic_vector(slice_5_132));
  slice_5_151 <= u2u_slice(a_1_26, 15, 8);
  slice_5_178 <= u2u_slice(a_1_26, 32, 32);
  concat_5_169 <= std_logic_vector_to_unsigned(unsigned_to_std_logic_vector(slice_5_178));
  slice_5_197 <= u2u_slice(a_1_26, 7, 0);
  fullb_5_1_concat <= std_logic_vector_to_unsigned(unsigned_to_std_logic_vector(concat_5_29) & unsigned_to_std_logic_vector(slice_5_57) & unsigned_to_std_logic_vector(concat_5_76) & unsigned_to_std_logic_vector(slice_5_104) & unsigned_to_std_logic_vector(concat_5_123) & unsigned_to_std_logic_vector(slice_5_151) & unsigned_to_std_logic_vector(concat_5_169) & unsigned_to_std_logic_vector(slice_5_197));
  b <= unsigned_to_std_logic_vector(fullb_5_1_concat);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity mux_112578e8da is
  port (
    sel : in std_logic_vector((1 - 1) downto 0);
    d0 : in std_logic_vector((13 - 1) downto 0);
    d1 : in std_logic_vector((13 - 1) downto 0);
    y : out std_logic_vector((13 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end mux_112578e8da;


architecture behavior of mux_112578e8da is
  signal sel_1_20: std_logic_vector((1 - 1) downto 0);
  signal d0_1_24: std_logic_vector((13 - 1) downto 0);
  signal d1_1_27: std_logic_vector((13 - 1) downto 0);
  type array_type_pipe_16_22 is array (0 to (1 - 1)) of std_logic_vector((13 - 1) downto 0);
  signal pipe_16_22: array_type_pipe_16_22 := (
    0 => "0000000000000");
  signal pipe_16_22_front_din: std_logic_vector((13 - 1) downto 0);
  signal pipe_16_22_back: std_logic_vector((13 - 1) downto 0);
  signal pipe_16_22_push_front_pop_back_en: std_logic;
  signal unregy_join_6_1: std_logic_vector((13 - 1) downto 0);
begin
  sel_1_20 <= sel;
  d0_1_24 <= d0;
  d1_1_27 <= d1;
  pipe_16_22_back <= pipe_16_22(0);
  proc_pipe_16_22: process (clk)
  is
    variable i: integer;
  begin
    if (clk'event and (clk = '1')) then
      if ((ce = '1') and (pipe_16_22_push_front_pop_back_en = '1')) then
        pipe_16_22(0) <= pipe_16_22_front_din;
      end if;
    end if;
  end process proc_pipe_16_22;
  proc_switch_6_1: process (d0_1_24, d1_1_27, sel_1_20)
  is
  begin
    case sel_1_20 is 
      when "0" =>
        unregy_join_6_1 <= d0_1_24;
      when others =>
        unregy_join_6_1 <= d1_1_27;
    end case;
  end process proc_switch_6_1;
  pipe_16_22_front_din <= unregy_join_6_1;
  pipe_16_22_push_front_pop_back_en <= '1';
  y <= pipe_16_22_back;
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity mux_2aa09bfea3 is
  port (
    sel : in std_logic_vector((1 - 1) downto 0);
    d0 : in std_logic_vector((1 - 1) downto 0);
    d1 : in std_logic_vector((1 - 1) downto 0);
    y : out std_logic_vector((1 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end mux_2aa09bfea3;


architecture behavior of mux_2aa09bfea3 is
  signal sel_1_20: std_logic_vector((1 - 1) downto 0);
  signal d0_1_24: std_logic;
  signal d1_1_27: std_logic;
  type array_type_pipe_16_22 is array (0 to (1 - 1)) of std_logic;
  signal pipe_16_22: array_type_pipe_16_22 := (
    0 => '0');
  signal pipe_16_22_front_din: std_logic;
  signal pipe_16_22_back: std_logic;
  signal pipe_16_22_push_front_pop_back_en: std_logic;
  signal unregy_join_6_1: std_logic;
begin
  sel_1_20 <= sel;
  d0_1_24 <= d0(0);
  d1_1_27 <= d1(0);
  pipe_16_22_back <= pipe_16_22(0);
  proc_pipe_16_22: process (clk)
  is
    variable i: integer;
  begin
    if (clk'event and (clk = '1')) then
      if ((ce = '1') and (pipe_16_22_push_front_pop_back_en = '1')) then
        pipe_16_22(0) <= pipe_16_22_front_din;
      end if;
    end if;
  end process proc_pipe_16_22;
  proc_switch_6_1: process (d0_1_24, d1_1_27, sel_1_20)
  is
  begin
    case sel_1_20 is 
      when "0" =>
        unregy_join_6_1 <= d0_1_24;
      when others =>
        unregy_join_6_1 <= d1_1_27;
    end case;
  end process proc_switch_6_1;
  pipe_16_22_front_din <= unregy_join_6_1;
  pipe_16_22_push_front_pop_back_en <= '1';
  y <= std_logic_to_vector(pipe_16_22_back);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity mux_bfb8dadb36 is
  port (
    sel : in std_logic_vector((1 - 1) downto 0);
    d0 : in std_logic_vector((16 - 1) downto 0);
    d1 : in std_logic_vector((16 - 1) downto 0);
    y : out std_logic_vector((16 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end mux_bfb8dadb36;


architecture behavior of mux_bfb8dadb36 is
  signal sel_1_20: std_logic_vector((1 - 1) downto 0);
  signal d0_1_24: std_logic_vector((16 - 1) downto 0);
  signal d1_1_27: std_logic_vector((16 - 1) downto 0);
  type array_type_pipe_16_22 is array (0 to (1 - 1)) of std_logic_vector((16 - 1) downto 0);
  signal pipe_16_22: array_type_pipe_16_22 := (
    0 => "0000000000000000");
  signal pipe_16_22_front_din: std_logic_vector((16 - 1) downto 0);
  signal pipe_16_22_back: std_logic_vector((16 - 1) downto 0);
  signal pipe_16_22_push_front_pop_back_en: std_logic;
  signal unregy_join_6_1: std_logic_vector((16 - 1) downto 0);
begin
  sel_1_20 <= sel;
  d0_1_24 <= d0;
  d1_1_27 <= d1;
  pipe_16_22_back <= pipe_16_22(0);
  proc_pipe_16_22: process (clk)
  is
    variable i: integer;
  begin
    if (clk'event and (clk = '1')) then
      if ((ce = '1') and (pipe_16_22_push_front_pop_back_en = '1')) then
        pipe_16_22(0) <= pipe_16_22_front_din;
      end if;
    end if;
  end process proc_pipe_16_22;
  proc_switch_6_1: process (d0_1_24, d1_1_27, sel_1_20)
  is
  begin
    case sel_1_20 is 
      when "0" =>
        unregy_join_6_1 <= d0_1_24;
      when others =>
        unregy_join_6_1 <= d1_1_27;
    end case;
  end process proc_switch_6_1;
  pipe_16_22_front_din <= unregy_join_6_1;
  pipe_16_22_push_front_pop_back_en <= '1';
  y <= pipe_16_22_back;
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity constant_60de7cd9a7 is
  port (
    op : out std_logic_vector((14 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end constant_60de7cd9a7;


architecture behavior of constant_60de7cd9a7 is
begin
  op <= "00000000000001";
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity constant_068ec526a0 is
  port (
    op : out std_logic_vector((14 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end constant_068ec526a0;


architecture behavior of constant_068ec526a0 is
begin
  op <= "00000000000000";
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity constant_24fe963a89 is
  port (
    op : out std_logic_vector((14 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end constant_24fe963a89;


architecture behavior of constant_24fe963a89 is
begin
  op <= "10000000000000";
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity relational_d500ab1630 is
  port (
    a : in std_logic_vector((14 - 1) downto 0);
    b : in std_logic_vector((14 - 1) downto 0);
    op : out std_logic_vector((1 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end relational_d500ab1630;


architecture behavior of relational_d500ab1630 is
  signal a_1_31: unsigned((14 - 1) downto 0);
  signal b_1_34: unsigned((14 - 1) downto 0);
  signal result_12_3_rel: boolean;
begin
  a_1_31 <= std_logic_vector_to_unsigned(a);
  b_1_34 <= std_logic_vector_to_unsigned(b);
  result_12_3_rel <= a_1_31 = b_1_34;
  op <= boolean_to_vector(result_12_3_rel);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity relational_7f67627fe4 is
  port (
    a : in std_logic_vector((14 - 1) downto 0);
    b : in std_logic_vector((14 - 1) downto 0);
    op : out std_logic_vector((1 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end relational_7f67627fe4;


architecture behavior of relational_7f67627fe4 is
  signal a_1_31: unsigned((14 - 1) downto 0);
  signal b_1_34: unsigned((14 - 1) downto 0);
  signal result_14_3_rel: boolean;
begin
  a_1_31 <= std_logic_vector_to_unsigned(a);
  b_1_34 <= std_logic_vector_to_unsigned(b);
  result_14_3_rel <= a_1_31 /= b_1_34;
  op <= boolean_to_vector(result_14_3_rel);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity constant_a629aefb53 is
  port (
    op : out std_logic_vector((4 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end constant_a629aefb53;


architecture behavior of constant_a629aefb53 is
begin
  op <= "1001";
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity concat_566f280c69 is
  port (
    in0 : in std_logic_vector((1 - 1) downto 0);
    in1 : in std_logic_vector((6 - 1) downto 0);
    in2 : in std_logic_vector((12 - 1) downto 0);
    y : out std_logic_vector((19 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end concat_566f280c69;


architecture behavior of concat_566f280c69 is
  signal in0_1_23: boolean;
  signal in1_1_27: unsigned((6 - 1) downto 0);
  signal in2_1_31: unsigned((12 - 1) downto 0);
  signal y_2_1_concat: unsigned((19 - 1) downto 0);
begin
  in0_1_23 <= ((in0) = "1");
  in1_1_27 <= std_logic_vector_to_unsigned(in1);
  in2_1_31 <= std_logic_vector_to_unsigned(in2);
  y_2_1_concat <= std_logic_vector_to_unsigned(boolean_to_vector(in0_1_23) & unsigned_to_std_logic_vector(in1_1_27) & unsigned_to_std_logic_vector(in2_1_31));
  y <= unsigned_to_std_logic_vector(y_2_1_concat);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity constant_06590e4008 is
  port (
    op : out std_logic_vector((4 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end constant_06590e4008;


architecture behavior of constant_06590e4008 is
begin
  op <= "1111";
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity mux_bfe1d4f686 is
  port (
    sel : in std_logic_vector((1 - 1) downto 0);
    d0 : in std_logic_vector((16 - 1) downto 0);
    d1 : in std_logic_vector((16 - 1) downto 0);
    y : out std_logic_vector((16 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end mux_bfe1d4f686;


architecture behavior of mux_bfe1d4f686 is
  signal sel_1_20: std_logic;
  signal d0_1_24: std_logic_vector((16 - 1) downto 0);
  signal d1_1_27: std_logic_vector((16 - 1) downto 0);
  type array_type_pipe_16_22 is array (0 to (1 - 1)) of std_logic_vector((16 - 1) downto 0);
  signal pipe_16_22: array_type_pipe_16_22 := (
    0 => "0000000000000000");
  signal pipe_16_22_front_din: std_logic_vector((16 - 1) downto 0);
  signal pipe_16_22_back: std_logic_vector((16 - 1) downto 0);
  signal pipe_16_22_push_front_pop_back_en: std_logic;
  signal sel_internal_2_1_convert: std_logic_vector((1 - 1) downto 0);
  signal unregy_join_6_1: std_logic_vector((16 - 1) downto 0);
begin
  sel_1_20 <= sel(0);
  d0_1_24 <= d0;
  d1_1_27 <= d1;
  pipe_16_22_back <= pipe_16_22(0);
  proc_pipe_16_22: process (clk)
  is
    variable i: integer;
  begin
    if (clk'event and (clk = '1')) then
      if ((ce = '1') and (pipe_16_22_push_front_pop_back_en = '1')) then
        pipe_16_22(0) <= pipe_16_22_front_din;
      end if;
    end if;
  end process proc_pipe_16_22;
  sel_internal_2_1_convert <= cast(std_logic_to_vector(sel_1_20), 0, 1, 0, xlUnsigned);
  proc_switch_6_1: process (d0_1_24, d1_1_27, sel_internal_2_1_convert)
  is
  begin
    case sel_internal_2_1_convert is 
      when "0" =>
        unregy_join_6_1 <= d0_1_24;
      when others =>
        unregy_join_6_1 <= d1_1_27;
    end case;
  end process proc_switch_6_1;
  pipe_16_22_front_din <= unregy_join_6_1;
  pipe_16_22_push_front_pop_back_en <= '1';
  y <= pipe_16_22_back;
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity mux_58c87f2f80 is
  port (
    sel : in std_logic_vector((1 - 1) downto 0);
    d0 : in std_logic_vector((19 - 1) downto 0);
    d1 : in std_logic_vector((19 - 1) downto 0);
    y : out std_logic_vector((19 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end mux_58c87f2f80;


architecture behavior of mux_58c87f2f80 is
  signal sel_1_20: std_logic;
  signal d0_1_24: std_logic_vector((19 - 1) downto 0);
  signal d1_1_27: std_logic_vector((19 - 1) downto 0);
  type array_type_pipe_16_22 is array (0 to (1 - 1)) of std_logic_vector((19 - 1) downto 0);
  signal pipe_16_22: array_type_pipe_16_22 := (
    0 => "0000000000000000000");
  signal pipe_16_22_front_din: std_logic_vector((19 - 1) downto 0);
  signal pipe_16_22_back: std_logic_vector((19 - 1) downto 0);
  signal pipe_16_22_push_front_pop_back_en: std_logic;
  signal sel_internal_2_1_convert: std_logic_vector((1 - 1) downto 0);
  signal unregy_join_6_1: std_logic_vector((19 - 1) downto 0);
begin
  sel_1_20 <= sel(0);
  d0_1_24 <= d0;
  d1_1_27 <= d1;
  pipe_16_22_back <= pipe_16_22(0);
  proc_pipe_16_22: process (clk)
  is
    variable i: integer;
  begin
    if (clk'event and (clk = '1')) then
      if ((ce = '1') and (pipe_16_22_push_front_pop_back_en = '1')) then
        pipe_16_22(0) <= pipe_16_22_front_din;
      end if;
    end if;
  end process proc_pipe_16_22;
  sel_internal_2_1_convert <= cast(std_logic_to_vector(sel_1_20), 0, 1, 0, xlUnsigned);
  proc_switch_6_1: process (d0_1_24, d1_1_27, sel_internal_2_1_convert)
  is
  begin
    case sel_internal_2_1_convert is 
      when "0" =>
        unregy_join_6_1 <= d0_1_24;
      when others =>
        unregy_join_6_1 <= d1_1_27;
    end case;
  end process proc_switch_6_1;
  pipe_16_22_front_din <= unregy_join_6_1;
  pipe_16_22_push_front_pop_back_en <= '1';
  y <= pipe_16_22_back;
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity mult_08763981bc is
  port (
    a : in std_logic_vector((16 - 1) downto 0);
    b : in std_logic_vector((31 - 1) downto 0);
    p : out std_logic_vector((47 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end mult_08763981bc;


architecture behavior of mult_08763981bc is
  signal a_1_22: signed((16 - 1) downto 0);
  signal b_1_25: signed((31 - 1) downto 0);
  type array_type_op_mem_65_20 is array (0 to (4 - 1)) of signed((47 - 1) downto 0);
  signal op_mem_65_20: array_type_op_mem_65_20 := (
    "00000000000000000000000000000000000000000000000",
    "00000000000000000000000000000000000000000000000",
    "00000000000000000000000000000000000000000000000",
    "00000000000000000000000000000000000000000000000");
  signal op_mem_65_20_front_din: signed((47 - 1) downto 0);
  signal op_mem_65_20_back: signed((47 - 1) downto 0);
  signal op_mem_65_20_push_front_pop_back_en: std_logic;
  signal mult_46_56: signed((47 - 1) downto 0);
begin
  a_1_22 <= std_logic_vector_to_signed(a);
  b_1_25 <= std_logic_vector_to_signed(b);
  op_mem_65_20_back <= op_mem_65_20(3);
  proc_op_mem_65_20: process (clk)
  is
    variable i: integer;
  begin
    if (clk'event and (clk = '1')) then
      if ((ce = '1') and (op_mem_65_20_push_front_pop_back_en = '1')) then
        for i in 3 downto 1 loop 
          op_mem_65_20(i) <= op_mem_65_20(i-1);
        end loop;
        op_mem_65_20(0) <= op_mem_65_20_front_din;
      end if;
    end if;
  end process proc_op_mem_65_20;
  mult_46_56 <= (a_1_22 * b_1_25);
  op_mem_65_20_front_din <= mult_46_56;
  op_mem_65_20_push_front_pop_back_en <= '1';
  p <= signed_to_std_logic_vector(op_mem_65_20_back);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity addsub_c1a1687803 is
  port (
    a : in std_logic_vector((47 - 1) downto 0);
    b : in std_logic_vector((47 - 1) downto 0);
    s : out std_logic_vector((48 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end addsub_c1a1687803;


architecture behavior of addsub_c1a1687803 is
  signal a_17_32: signed((47 - 1) downto 0);
  signal b_17_35: signed((47 - 1) downto 0);
  type array_type_op_mem_91_20 is array (0 to (4 - 1)) of signed((48 - 1) downto 0);
  signal op_mem_91_20: array_type_op_mem_91_20 := (
    "000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000");
  signal op_mem_91_20_front_din: signed((48 - 1) downto 0);
  signal op_mem_91_20_back: signed((48 - 1) downto 0);
  signal op_mem_91_20_push_front_pop_back_en: std_logic;
  type array_type_cout_mem_92_22 is array (0 to (4 - 1)) of unsigned((1 - 1) downto 0);
  signal cout_mem_92_22: array_type_cout_mem_92_22 := (
    "0",
    "0",
    "0",
    "0");
  signal cout_mem_92_22_front_din: unsigned((1 - 1) downto 0);
  signal cout_mem_92_22_back: unsigned((1 - 1) downto 0);
  signal cout_mem_92_22_push_front_pop_back_en: std_logic;
  signal prev_mode_93_22_next: unsigned((3 - 1) downto 0);
  signal prev_mode_93_22: unsigned((3 - 1) downto 0);
  signal prev_mode_93_22_reg_i: std_logic_vector((3 - 1) downto 0);
  signal prev_mode_93_22_reg_o: std_logic_vector((3 - 1) downto 0);
  signal cast_69_18: signed((48 - 1) downto 0);
  signal cast_69_22: signed((48 - 1) downto 0);
  signal internal_s_69_5_addsub: signed((48 - 1) downto 0);
begin
  a_17_32 <= std_logic_vector_to_signed(a);
  b_17_35 <= std_logic_vector_to_signed(b);
  op_mem_91_20_back <= op_mem_91_20(3);
  proc_op_mem_91_20: process (clk)
  is
    variable i: integer;
  begin
    if (clk'event and (clk = '1')) then
      if ((ce = '1') and (op_mem_91_20_push_front_pop_back_en = '1')) then
        for i in 3 downto 1 loop 
          op_mem_91_20(i) <= op_mem_91_20(i-1);
        end loop;
        op_mem_91_20(0) <= op_mem_91_20_front_din;
      end if;
    end if;
  end process proc_op_mem_91_20;
  cout_mem_92_22_back <= cout_mem_92_22(3);
  proc_cout_mem_92_22: process (clk)
  is
    variable i_x_000000: integer;
  begin
    if (clk'event and (clk = '1')) then
      if ((ce = '1') and (cout_mem_92_22_push_front_pop_back_en = '1')) then
        for i_x_000000 in 3 downto 1 loop 
          cout_mem_92_22(i_x_000000) <= cout_mem_92_22(i_x_000000-1);
        end loop;
        cout_mem_92_22(0) <= cout_mem_92_22_front_din;
      end if;
    end if;
  end process proc_cout_mem_92_22;
  prev_mode_93_22_reg_i <= unsigned_to_std_logic_vector(prev_mode_93_22_next);
  prev_mode_93_22 <= std_logic_vector_to_unsigned(prev_mode_93_22_reg_o);
  prev_mode_93_22_reg_inst: entity work.synth_reg_w_init
    generic map (
      init_index => 2, 
      init_value => b"010", 
      latency => 1, 
      width => 3)
    port map (
      ce => ce, 
      clk => clk, 
      clr => clr, 
      i => prev_mode_93_22_reg_i, 
      o => prev_mode_93_22_reg_o);
  cast_69_18 <= s2s_cast(a_17_32, 18, 48, 18);
  cast_69_22 <= s2s_cast(b_17_35, 18, 48, 18);
  internal_s_69_5_addsub <= cast_69_18 + cast_69_22;
  op_mem_91_20_front_din <= internal_s_69_5_addsub;
  op_mem_91_20_push_front_pop_back_en <= '1';
  cout_mem_92_22_front_din <= std_logic_vector_to_unsigned("0");
  cout_mem_92_22_push_front_pop_back_en <= '1';
  prev_mode_93_22_next <= std_logic_vector_to_unsigned("000");
  s <= signed_to_std_logic_vector(op_mem_91_20_back);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity addsub_31c0c7c8b5 is
  port (
    a : in std_logic_vector((47 - 1) downto 0);
    b : in std_logic_vector((47 - 1) downto 0);
    s : out std_logic_vector((48 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end addsub_31c0c7c8b5;


architecture behavior of addsub_31c0c7c8b5 is
  signal a_17_32: signed((47 - 1) downto 0);
  signal b_17_35: signed((47 - 1) downto 0);
  type array_type_op_mem_91_20 is array (0 to (4 - 1)) of signed((48 - 1) downto 0);
  signal op_mem_91_20: array_type_op_mem_91_20 := (
    "000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000",
    "000000000000000000000000000000000000000000000000");
  signal op_mem_91_20_front_din: signed((48 - 1) downto 0);
  signal op_mem_91_20_back: signed((48 - 1) downto 0);
  signal op_mem_91_20_push_front_pop_back_en: std_logic;
  type array_type_cout_mem_92_22 is array (0 to (4 - 1)) of unsigned((1 - 1) downto 0);
  signal cout_mem_92_22: array_type_cout_mem_92_22 := (
    "0",
    "0",
    "0",
    "0");
  signal cout_mem_92_22_front_din: unsigned((1 - 1) downto 0);
  signal cout_mem_92_22_back: unsigned((1 - 1) downto 0);
  signal cout_mem_92_22_push_front_pop_back_en: std_logic;
  signal prev_mode_93_22_next: unsigned((3 - 1) downto 0);
  signal prev_mode_93_22: unsigned((3 - 1) downto 0);
  signal prev_mode_93_22_reg_i: std_logic_vector((3 - 1) downto 0);
  signal prev_mode_93_22_reg_o: std_logic_vector((3 - 1) downto 0);
  signal cast_71_18: signed((48 - 1) downto 0);
  signal cast_71_22: signed((48 - 1) downto 0);
  signal internal_s_71_5_addsub: signed((48 - 1) downto 0);
begin
  a_17_32 <= std_logic_vector_to_signed(a);
  b_17_35 <= std_logic_vector_to_signed(b);
  op_mem_91_20_back <= op_mem_91_20(3);
  proc_op_mem_91_20: process (clk)
  is
    variable i: integer;
  begin
    if (clk'event and (clk = '1')) then
      if ((ce = '1') and (op_mem_91_20_push_front_pop_back_en = '1')) then
        for i in 3 downto 1 loop 
          op_mem_91_20(i) <= op_mem_91_20(i-1);
        end loop;
        op_mem_91_20(0) <= op_mem_91_20_front_din;
      end if;
    end if;
  end process proc_op_mem_91_20;
  cout_mem_92_22_back <= cout_mem_92_22(3);
  proc_cout_mem_92_22: process (clk)
  is
    variable i_x_000000: integer;
  begin
    if (clk'event and (clk = '1')) then
      if ((ce = '1') and (cout_mem_92_22_push_front_pop_back_en = '1')) then
        for i_x_000000 in 3 downto 1 loop 
          cout_mem_92_22(i_x_000000) <= cout_mem_92_22(i_x_000000-1);
        end loop;
        cout_mem_92_22(0) <= cout_mem_92_22_front_din;
      end if;
    end if;
  end process proc_cout_mem_92_22;
  prev_mode_93_22_reg_i <= unsigned_to_std_logic_vector(prev_mode_93_22_next);
  prev_mode_93_22 <= std_logic_vector_to_unsigned(prev_mode_93_22_reg_o);
  prev_mode_93_22_reg_inst: entity work.synth_reg_w_init
    generic map (
      init_index => 2, 
      init_value => b"010", 
      latency => 1, 
      width => 3)
    port map (
      ce => ce, 
      clk => clk, 
      clr => clr, 
      i => prev_mode_93_22_reg_i, 
      o => prev_mode_93_22_reg_o);
  cast_71_18 <= s2s_cast(a_17_32, 18, 48, 18);
  cast_71_22 <= s2s_cast(b_17_35, 18, 48, 18);
  internal_s_71_5_addsub <= cast_71_18 - cast_71_22;
  op_mem_91_20_front_din <= internal_s_71_5_addsub;
  op_mem_91_20_push_front_pop_back_en <= '1';
  cout_mem_92_22_front_din <= std_logic_vector_to_unsigned("0");
  cout_mem_92_22_push_front_pop_back_en <= '1';
  prev_mode_93_22_next <= std_logic_vector_to_unsigned("000");
  s <= signed_to_std_logic_vector(op_mem_91_20_back);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity concat_b6b0f55f17 is
  port (
    in0 : in std_logic_vector((48 - 1) downto 0);
    in1 : in std_logic_vector((1 - 1) downto 0);
    y : out std_logic_vector((49 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end concat_b6b0f55f17;


architecture behavior of concat_b6b0f55f17 is
  signal in0_1_23: unsigned((48 - 1) downto 0);
  signal in1_1_27: unsigned((1 - 1) downto 0);
  signal y_2_1_concat: unsigned((49 - 1) downto 0);
begin
  in0_1_23 <= std_logic_vector_to_unsigned(in0);
  in1_1_27 <= std_logic_vector_to_unsigned(in1);
  y_2_1_concat <= std_logic_vector_to_unsigned(unsigned_to_std_logic_vector(in0_1_23) & unsigned_to_std_logic_vector(in1_1_27));
  y <= unsigned_to_std_logic_vector(y_2_1_concat);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity reinterpret_72d35fae55 is
  port (
    input_port : in std_logic_vector((48 - 1) downto 0);
    output_port : out std_logic_vector((48 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end reinterpret_72d35fae55;


architecture behavior of reinterpret_72d35fae55 is
  signal input_port_1_40: signed((48 - 1) downto 0);
  signal output_port_5_5_force: unsigned((48 - 1) downto 0);
begin
  input_port_1_40 <= std_logic_vector_to_signed(input_port);
  output_port_5_5_force <= signed_to_unsigned(input_port_1_40);
  output_port <= unsigned_to_std_logic_vector(output_port_5_5_force);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity constant_b6bf25629b is
  port (
    op : out std_logic_vector((19 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end constant_b6bf25629b;


architecture behavior of constant_b6bf25629b is
begin
  op <= "0000111111111111111";
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity reinterpret_e155c4bb93 is
  port (
    input_port : in std_logic_vector((49 - 1) downto 0);
    output_port : out std_logic_vector((49 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end reinterpret_e155c4bb93;


architecture behavior of reinterpret_e155c4bb93 is
  signal input_port_1_40: unsigned((49 - 1) downto 0);
  signal output_port_5_5_force: signed((49 - 1) downto 0);
begin
  input_port_1_40 <= std_logic_vector_to_unsigned(input_port);
  output_port_5_5_force <= unsigned_to_signed(input_port_1_40);
  output_port <= signed_to_std_logic_vector(output_port_5_5_force);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity logical_b2983b6154 is
  port (
    d0 : in std_logic_vector((1 - 1) downto 0);
    d1 : in std_logic_vector((1 - 1) downto 0);
    d2 : in std_logic_vector((1 - 1) downto 0);
    d3 : in std_logic_vector((1 - 1) downto 0);
    d4 : in std_logic_vector((1 - 1) downto 0);
    d5 : in std_logic_vector((1 - 1) downto 0);
    d6 : in std_logic_vector((1 - 1) downto 0);
    d7 : in std_logic_vector((1 - 1) downto 0);
    d8 : in std_logic_vector((1 - 1) downto 0);
    d9 : in std_logic_vector((1 - 1) downto 0);
    d10 : in std_logic_vector((1 - 1) downto 0);
    d11 : in std_logic_vector((1 - 1) downto 0);
    d12 : in std_logic_vector((1 - 1) downto 0);
    d13 : in std_logic_vector((1 - 1) downto 0);
    d14 : in std_logic_vector((1 - 1) downto 0);
    d15 : in std_logic_vector((1 - 1) downto 0);
    d16 : in std_logic_vector((1 - 1) downto 0);
    d17 : in std_logic_vector((1 - 1) downto 0);
    d18 : in std_logic_vector((1 - 1) downto 0);
    d19 : in std_logic_vector((1 - 1) downto 0);
    d20 : in std_logic_vector((1 - 1) downto 0);
    d21 : in std_logic_vector((1 - 1) downto 0);
    d22 : in std_logic_vector((1 - 1) downto 0);
    d23 : in std_logic_vector((1 - 1) downto 0);
    d24 : in std_logic_vector((1 - 1) downto 0);
    d25 : in std_logic_vector((1 - 1) downto 0);
    d26 : in std_logic_vector((1 - 1) downto 0);
    d27 : in std_logic_vector((1 - 1) downto 0);
    d28 : in std_logic_vector((1 - 1) downto 0);
    d29 : in std_logic_vector((1 - 1) downto 0);
    d30 : in std_logic_vector((1 - 1) downto 0);
    y : out std_logic_vector((1 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end logical_b2983b6154;


architecture behavior of logical_b2983b6154 is
  signal d0_1_24: std_logic;
  signal d1_1_27: std_logic;
  signal d2_1_30: std_logic;
  signal d3_1_33: std_logic;
  signal d4_1_36: std_logic;
  signal d5_1_39: std_logic;
  signal d6_1_42: std_logic;
  signal d7_1_45: std_logic;
  signal d8_1_48: std_logic;
  signal d9_1_51: std_logic;
  signal d10_1_54: std_logic;
  signal d11_1_58: std_logic;
  signal d12_1_62: std_logic;
  signal d13_1_66: std_logic;
  signal d14_1_70: std_logic;
  signal d15_1_74: std_logic;
  signal d16_1_78: std_logic;
  signal d17_1_82: std_logic;
  signal d18_1_86: std_logic;
  signal d19_1_90: std_logic;
  signal d20_1_94: std_logic;
  signal d21_1_98: std_logic;
  signal d22_1_102: std_logic;
  signal d23_1_106: std_logic;
  signal d24_1_110: std_logic;
  signal d25_1_114: std_logic;
  signal d26_1_118: std_logic;
  signal d27_1_122: std_logic;
  signal d28_1_126: std_logic;
  signal d29_1_130: std_logic;
  signal d30_1_134: std_logic;
  type array_type_latency_pipe_5_26 is array (0 to (2 - 1)) of std_logic;
  signal latency_pipe_5_26: array_type_latency_pipe_5_26 := (
    '0',
    '0');
  signal latency_pipe_5_26_front_din: std_logic;
  signal latency_pipe_5_26_back: std_logic;
  signal latency_pipe_5_26_push_front_pop_back_en: std_logic;
  signal bit_2_27: std_logic;
  signal fully_2_1_bitnot: std_logic;
begin
  d0_1_24 <= d0(0);
  d1_1_27 <= d1(0);
  d2_1_30 <= d2(0);
  d3_1_33 <= d3(0);
  d4_1_36 <= d4(0);
  d5_1_39 <= d5(0);
  d6_1_42 <= d6(0);
  d7_1_45 <= d7(0);
  d8_1_48 <= d8(0);
  d9_1_51 <= d9(0);
  d10_1_54 <= d10(0);
  d11_1_58 <= d11(0);
  d12_1_62 <= d12(0);
  d13_1_66 <= d13(0);
  d14_1_70 <= d14(0);
  d15_1_74 <= d15(0);
  d16_1_78 <= d16(0);
  d17_1_82 <= d17(0);
  d18_1_86 <= d18(0);
  d19_1_90 <= d19(0);
  d20_1_94 <= d20(0);
  d21_1_98 <= d21(0);
  d22_1_102 <= d22(0);
  d23_1_106 <= d23(0);
  d24_1_110 <= d24(0);
  d25_1_114 <= d25(0);
  d26_1_118 <= d26(0);
  d27_1_122 <= d27(0);
  d28_1_126 <= d28(0);
  d29_1_130 <= d29(0);
  d30_1_134 <= d30(0);
  latency_pipe_5_26_back <= latency_pipe_5_26(1);
  proc_latency_pipe_5_26: process (clk)
  is
    variable i: integer;
  begin
    if (clk'event and (clk = '1')) then
      if ((ce = '1') and (latency_pipe_5_26_push_front_pop_back_en = '1')) then
        for i in 1 downto 1 loop 
          latency_pipe_5_26(i) <= latency_pipe_5_26(i-1);
        end loop;
        latency_pipe_5_26(0) <= latency_pipe_5_26_front_din;
      end if;
    end if;
  end process proc_latency_pipe_5_26;
  bit_2_27 <= d0_1_24 and d1_1_27 and d2_1_30 and d3_1_33 and d4_1_36 and d5_1_39 and d6_1_42 and d7_1_45 and d8_1_48 and d9_1_51 and d10_1_54 and d11_1_58 and d12_1_62 and d13_1_66 and d14_1_70 and d15_1_74 and d16_1_78 and d17_1_82 and d18_1_86 and d19_1_90 and d20_1_94 and d21_1_98 and d22_1_102 and d23_1_106 and d24_1_110 and d25_1_114 and d26_1_118 and d27_1_122 and d28_1_126 and d29_1_130 and d30_1_134;
  fully_2_1_bitnot <= not bit_2_27;
  latency_pipe_5_26_front_din <= fully_2_1_bitnot;
  latency_pipe_5_26_push_front_pop_back_en <= '1';
  y <= std_logic_to_vector(latency_pipe_5_26_back);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity concat_1a070f1f35 is
  port (
    in0 : in std_logic_vector((4 - 1) downto 0);
    in1 : in std_logic_vector((4 - 1) downto 0);
    y : out std_logic_vector((8 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end concat_1a070f1f35;


architecture behavior of concat_1a070f1f35 is
  signal in0_1_23: unsigned((4 - 1) downto 0);
  signal in1_1_27: unsigned((4 - 1) downto 0);
  signal y_2_1_concat: unsigned((8 - 1) downto 0);
begin
  in0_1_23 <= std_logic_vector_to_unsigned(in0);
  in1_1_27 <= std_logic_vector_to_unsigned(in1);
  y_2_1_concat <= std_logic_vector_to_unsigned(unsigned_to_std_logic_vector(in0_1_23) & unsigned_to_std_logic_vector(in1_1_27));
  y <= unsigned_to_std_logic_vector(y_2_1_concat);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity reinterpret_df53fd8fe7 is
  port (
    input_port : in std_logic_vector((4 - 1) downto 0);
    output_port : out std_logic_vector((4 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end reinterpret_df53fd8fe7;


architecture behavior of reinterpret_df53fd8fe7 is
  signal input_port_1_40: signed((4 - 1) downto 0);
  signal output_port_5_5_force: unsigned((4 - 1) downto 0);
begin
  input_port_1_40 <= std_logic_vector_to_signed(input_port);
  output_port_5_5_force <= signed_to_unsigned(input_port_1_40);
  output_port <= unsigned_to_std_logic_vector(output_port_5_5_force);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity delay_14a6a51cbc is
  port (
    d : in std_logic_vector((1 - 1) downto 0);
    q : out std_logic_vector((1 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end delay_14a6a51cbc;


architecture behavior of delay_14a6a51cbc is
  signal d_1_22: std_logic;
  type array_type_op_mem_20_24 is array (0 to (8 - 1)) of std_logic;
  signal op_mem_20_24: array_type_op_mem_20_24 := (
    '0',
    '0',
    '0',
    '0',
    '0',
    '0',
    '0',
    '0');
  signal op_mem_20_24_front_din: std_logic;
  signal op_mem_20_24_back: std_logic;
  signal op_mem_20_24_push_front_pop_back_en: std_logic;
begin
  d_1_22 <= d(0);
  op_mem_20_24_back <= op_mem_20_24(7);
  proc_op_mem_20_24: process (clk)
  is
    variable i: integer;
  begin
    if (clk'event and (clk = '1')) then
      if ((ce = '1') and (op_mem_20_24_push_front_pop_back_en = '1')) then
        for i in 7 downto 1 loop 
          op_mem_20_24(i) <= op_mem_20_24(i-1);
        end loop;
        op_mem_20_24(0) <= op_mem_20_24_front_din;
      end if;
    end if;
  end process proc_op_mem_20_24;
  op_mem_20_24_front_din <= d_1_22;
  op_mem_20_24_push_front_pop_back_en <= '1';
  q <= std_logic_to_vector(op_mem_20_24_back);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity mux_ec62f2b06a is
  port (
    sel : in std_logic_vector((1 - 1) downto 0);
    d0 : in std_logic_vector((4 - 1) downto 0);
    d1 : in std_logic_vector((4 - 1) downto 0);
    y : out std_logic_vector((4 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end mux_ec62f2b06a;


architecture behavior of mux_ec62f2b06a is
  signal sel_1_20: std_logic;
  signal d0_1_24: std_logic_vector((4 - 1) downto 0);
  signal d1_1_27: std_logic_vector((4 - 1) downto 0);
  type array_type_pipe_16_22 is array (0 to (1 - 1)) of std_logic_vector((4 - 1) downto 0);
  signal pipe_16_22: array_type_pipe_16_22 := (
    0 => "0000");
  signal pipe_16_22_front_din: std_logic_vector((4 - 1) downto 0);
  signal pipe_16_22_back: std_logic_vector((4 - 1) downto 0);
  signal pipe_16_22_push_front_pop_back_en: std_logic;
  signal sel_internal_2_1_convert: std_logic_vector((1 - 1) downto 0);
  signal unregy_join_6_1: std_logic_vector((4 - 1) downto 0);
begin
  sel_1_20 <= sel(0);
  d0_1_24 <= d0;
  d1_1_27 <= d1;
  pipe_16_22_back <= pipe_16_22(0);
  proc_pipe_16_22: process (clk)
  is
    variable i: integer;
  begin
    if (clk'event and (clk = '1')) then
      if ((ce = '1') and (pipe_16_22_push_front_pop_back_en = '1')) then
        pipe_16_22(0) <= pipe_16_22_front_din;
      end if;
    end if;
  end process proc_pipe_16_22;
  sel_internal_2_1_convert <= cast(std_logic_to_vector(sel_1_20), 0, 1, 0, xlUnsigned);
  proc_switch_6_1: process (d0_1_24, d1_1_27, sel_internal_2_1_convert)
  is
  begin
    case sel_internal_2_1_convert is 
      when "0" =>
        unregy_join_6_1 <= d0_1_24;
      when others =>
        unregy_join_6_1 <= d1_1_27;
    end case;
  end process proc_switch_6_1;
  pipe_16_22_front_din <= unregy_join_6_1;
  pipe_16_22_push_front_pop_back_en <= '1';
  y <= pipe_16_22_back;
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity relational_ada779c3b0 is
  port (
    a : in std_logic_vector((48 - 1) downto 0);
    b : in std_logic_vector((48 - 1) downto 0);
    op : out std_logic_vector((1 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end relational_ada779c3b0;


architecture behavior of relational_ada779c3b0 is
  signal a_1_31: signed((48 - 1) downto 0);
  signal b_1_34: signed((48 - 1) downto 0);
  type array_type_op_mem_32_22 is array (0 to (2 - 1)) of boolean;
  signal op_mem_32_22: array_type_op_mem_32_22 := (
    false,
    false);
  signal op_mem_32_22_front_din: boolean;
  signal op_mem_32_22_back: boolean;
  signal op_mem_32_22_push_front_pop_back_en: std_logic;
  signal result_16_3_rel: boolean;
begin
  a_1_31 <= std_logic_vector_to_signed(a);
  b_1_34 <= std_logic_vector_to_signed(b);
  op_mem_32_22_back <= op_mem_32_22(1);
  proc_op_mem_32_22: process (clk)
  is
    variable i: integer;
  begin
    if (clk'event and (clk = '1')) then
      if ((ce = '1') and (op_mem_32_22_push_front_pop_back_en = '1')) then
        for i in 1 downto 1 loop 
          op_mem_32_22(i) <= op_mem_32_22(i-1);
        end loop;
        op_mem_32_22(0) <= op_mem_32_22_front_din;
      end if;
    end if;
  end process proc_op_mem_32_22;
  result_16_3_rel <= a_1_31 < b_1_34;
  op_mem_32_22_front_din <= result_16_3_rel;
  op_mem_32_22_push_front_pop_back_en <= '1';
  op <= boolean_to_vector(op_mem_32_22_back);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity constant_e99b17db38 is
  port (
    op : out std_logic_vector((48 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end constant_e99b17db38;


architecture behavior of constant_e99b17db38 is
begin
  op <= "111111111111111111111111111111001000000000000000";
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity concat_c24e4e888e is
  port (
    in0 : in std_logic_vector((1 - 1) downto 0);
    in1 : in std_logic_vector((31 - 1) downto 0);
    y : out std_logic_vector((32 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end concat_c24e4e888e;


architecture behavior of concat_c24e4e888e is
  signal in0_1_23: unsigned((1 - 1) downto 0);
  signal in1_1_27: unsigned((31 - 1) downto 0);
  signal y_2_1_concat: unsigned((32 - 1) downto 0);
begin
  in0_1_23 <= std_logic_vector_to_unsigned(in0);
  in1_1_27 <= std_logic_vector_to_unsigned(in1);
  y_2_1_concat <= std_logic_vector_to_unsigned(unsigned_to_std_logic_vector(in0_1_23) & unsigned_to_std_logic_vector(in1_1_27));
  y <= unsigned_to_std_logic_vector(y_2_1_concat);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity mux_7448b060f4 is
  port (
    sel : in std_logic_vector((1 - 1) downto 0);
    d0 : in std_logic_vector((31 - 1) downto 0);
    d1 : in std_logic_vector((31 - 1) downto 0);
    y : out std_logic_vector((31 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end mux_7448b060f4;


architecture behavior of mux_7448b060f4 is
  signal sel_1_20: std_logic_vector((1 - 1) downto 0);
  signal d0_1_24: std_logic_vector((31 - 1) downto 0);
  signal d1_1_27: std_logic_vector((31 - 1) downto 0);
  signal unregy_join_6_1: std_logic_vector((31 - 1) downto 0);
begin
  sel_1_20 <= sel;
  d0_1_24 <= d0;
  d1_1_27 <= d1;
  proc_switch_6_1: process (d0_1_24, d1_1_27, sel_1_20)
  is
  begin
    case sel_1_20 is 
      when "0" =>
        unregy_join_6_1 <= d0_1_24;
      when others =>
        unregy_join_6_1 <= d1_1_27;
    end case;
  end process proc_switch_6_1;
  y <= unregy_join_6_1;
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity concat_09ca9faec0 is
  port (
    in0 : in std_logic_vector((1 - 1) downto 0);
    in1 : in std_logic_vector((1 - 1) downto 0);
    in2 : in std_logic_vector((1 - 1) downto 0);
    in3 : in std_logic_vector((28 - 1) downto 0);
    y : out std_logic_vector((31 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end concat_09ca9faec0;


architecture behavior of concat_09ca9faec0 is
  signal in0_1_23: unsigned((1 - 1) downto 0);
  signal in1_1_27: unsigned((1 - 1) downto 0);
  signal in2_1_31: unsigned((1 - 1) downto 0);
  signal in3_1_35: unsigned((28 - 1) downto 0);
  signal y_2_1_concat: unsigned((31 - 1) downto 0);
begin
  in0_1_23 <= std_logic_vector_to_unsigned(in0);
  in1_1_27 <= std_logic_vector_to_unsigned(in1);
  in2_1_31 <= std_logic_vector_to_unsigned(in2);
  in3_1_35 <= std_logic_vector_to_unsigned(in3);
  y_2_1_concat <= std_logic_vector_to_unsigned(unsigned_to_std_logic_vector(in0_1_23) & unsigned_to_std_logic_vector(in1_1_27) & unsigned_to_std_logic_vector(in2_1_31) & unsigned_to_std_logic_vector(in3_1_35));
  y <= unsigned_to_std_logic_vector(y_2_1_concat);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity constant_98b461a391 is
  port (
    op : out std_logic_vector((28 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end constant_98b461a391;


architecture behavior of constant_98b461a391 is
begin
  op <= "0000000000000000000000000000";
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity constant_e82da56f1e is
  port (
    op : out std_logic_vector((31 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end constant_e82da56f1e;


architecture behavior of constant_e82da56f1e is
begin
  op <= "1010011111001001110001000110111";
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity constant_1e1ea8370a is
  port (
    op : out std_logic_vector((31 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end constant_1e1ea8370a;


architecture behavior of constant_1e1ea8370a is
begin
  op <= "1010011111001010000000000001000";
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity constant_ebdfb0074f is
  port (
    op : out std_logic_vector((32 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end constant_ebdfb0074f;


architecture behavior of constant_ebdfb0074f is
begin
  op <= "00000000000000000000000000000001";
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity concat_7d415c13b1 is
  port (
    in0 : in std_logic_vector((1 - 1) downto 0);
    in1 : in std_logic_vector((16 - 1) downto 0);
    in2 : in std_logic_vector((1 - 1) downto 0);
    y : out std_logic_vector((18 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end concat_7d415c13b1;


architecture behavior of concat_7d415c13b1 is
  signal in0_1_23: unsigned((1 - 1) downto 0);
  signal in1_1_27: unsigned((16 - 1) downto 0);
  signal in2_1_31: unsigned((1 - 1) downto 0);
  signal y_2_1_concat: unsigned((18 - 1) downto 0);
begin
  in0_1_23 <= std_logic_vector_to_unsigned(in0);
  in1_1_27 <= std_logic_vector_to_unsigned(in1);
  in2_1_31 <= std_logic_vector_to_unsigned(in2);
  y_2_1_concat <= std_logic_vector_to_unsigned(unsigned_to_std_logic_vector(in0_1_23) & unsigned_to_std_logic_vector(in1_1_27) & unsigned_to_std_logic_vector(in2_1_31));
  y <= unsigned_to_std_logic_vector(y_2_1_concat);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity concat_83d07cc341 is
  port (
    in0 : in std_logic_vector((10 - 1) downto 0);
    in1 : in std_logic_vector((1 - 1) downto 0);
    y : out std_logic_vector((11 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end concat_83d07cc341;


architecture behavior of concat_83d07cc341 is
  signal in0_1_23: unsigned((10 - 1) downto 0);
  signal in1_1_27: unsigned((1 - 1) downto 0);
  signal y_2_1_concat: unsigned((11 - 1) downto 0);
begin
  in0_1_23 <= std_logic_vector_to_unsigned(in0);
  in1_1_27 <= std_logic_vector_to_unsigned(in1);
  y_2_1_concat <= std_logic_vector_to_unsigned(unsigned_to_std_logic_vector(in0_1_23) & unsigned_to_std_logic_vector(in1_1_27));
  y <= unsigned_to_std_logic_vector(y_2_1_concat);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity mux_eb6266ebdd is
  port (
    sel : in std_logic_vector((1 - 1) downto 0);
    d0 : in std_logic_vector((11 - 1) downto 0);
    d1 : in std_logic_vector((11 - 1) downto 0);
    y : out std_logic_vector((11 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end mux_eb6266ebdd;


architecture behavior of mux_eb6266ebdd is
  signal sel_1_20: std_logic_vector((1 - 1) downto 0);
  signal d0_1_24: std_logic_vector((11 - 1) downto 0);
  signal d1_1_27: std_logic_vector((11 - 1) downto 0);
  signal unregy_join_6_1: std_logic_vector((11 - 1) downto 0);
begin
  sel_1_20 <= sel;
  d0_1_24 <= d0;
  d1_1_27 <= d1;
  proc_switch_6_1: process (d0_1_24, d1_1_27, sel_1_20)
  is
  begin
    case sel_1_20 is 
      when "0" =>
        unregy_join_6_1 <= d0_1_24;
      when others =>
        unregy_join_6_1 <= d1_1_27;
    end case;
  end process proc_switch_6_1;
  y <= unregy_join_6_1;
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity delay_15f5a81b1f is
  port (
    d : in std_logic_vector((65 - 1) downto 0);
    q : out std_logic_vector((65 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end delay_15f5a81b1f;


architecture behavior of delay_15f5a81b1f is
  signal d_1_22: std_logic_vector((65 - 1) downto 0);
  type array_type_op_mem_20_24 is array (0 to (1 - 1)) of std_logic_vector((65 - 1) downto 0);
  signal op_mem_20_24: array_type_op_mem_20_24 := (
    0 => "00000000000000000000000000000000000000000000000000000000000000000");
  signal op_mem_20_24_front_din: std_logic_vector((65 - 1) downto 0);
  signal op_mem_20_24_back: std_logic_vector((65 - 1) downto 0);
  signal op_mem_20_24_push_front_pop_back_en: std_logic;
begin
  d_1_22 <= d;
  op_mem_20_24_back <= op_mem_20_24(0);
  proc_op_mem_20_24: process (clk)
  is
    variable i: integer;
  begin
    if (clk'event and (clk = '1')) then
      if ((ce = '1') and (op_mem_20_24_push_front_pop_back_en = '1')) then
        op_mem_20_24(0) <= op_mem_20_24_front_din;
      end if;
    end if;
  end process proc_op_mem_20_24;
  op_mem_20_24_front_din <= d_1_22;
  op_mem_20_24_push_front_pop_back_en <= '1';
  q <= op_mem_20_24_back;
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity relational_297b184c8e is
  port (
    a : in std_logic_vector((4 - 1) downto 0);
    b : in std_logic_vector((4 - 1) downto 0);
    op : out std_logic_vector((1 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end relational_297b184c8e;


architecture behavior of relational_297b184c8e is
  signal a_1_31: unsigned((4 - 1) downto 0);
  signal b_1_34: unsigned((4 - 1) downto 0);
  signal result_18_3_rel: boolean;
begin
  a_1_31 <= std_logic_vector_to_unsigned(a);
  b_1_34 <= std_logic_vector_to_unsigned(b);
  result_18_3_rel <= a_1_31 > b_1_34;
  op <= boolean_to_vector(result_18_3_rel);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity relational_a0704033ef is
  port (
    a : in std_logic_vector((31 - 1) downto 0);
    b : in std_logic_vector((31 - 1) downto 0);
    op : out std_logic_vector((1 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end relational_a0704033ef;


architecture behavior of relational_a0704033ef is
  signal a_1_31: unsigned((31 - 1) downto 0);
  signal b_1_34: unsigned((31 - 1) downto 0);
  type array_type_op_mem_32_22 is array (0 to (1 - 1)) of boolean;
  signal op_mem_32_22: array_type_op_mem_32_22 := (
    0 => false);
  signal op_mem_32_22_front_din: boolean;
  signal op_mem_32_22_back: boolean;
  signal op_mem_32_22_push_front_pop_back_en: std_logic;
  signal result_22_3_rel: boolean;
begin
  a_1_31 <= std_logic_vector_to_unsigned(a);
  b_1_34 <= std_logic_vector_to_unsigned(b);
  op_mem_32_22_back <= op_mem_32_22(0);
  proc_op_mem_32_22: process (clk)
  is
    variable i: integer;
  begin
    if (clk'event and (clk = '1')) then
      if ((ce = '1') and (op_mem_32_22_push_front_pop_back_en = '1')) then
        op_mem_32_22(0) <= op_mem_32_22_front_din;
      end if;
    end if;
  end process proc_op_mem_32_22;
  result_22_3_rel <= a_1_31 >= b_1_34;
  op_mem_32_22_front_din <= result_22_3_rel;
  op_mem_32_22_push_front_pop_back_en <= '1';
  op <= boolean_to_vector(op_mem_32_22_back);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity relational_6e942c7926 is
  port (
    a : in std_logic_vector((16 - 1) downto 0);
    b : in std_logic_vector((16 - 1) downto 0);
    op : out std_logic_vector((1 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end relational_6e942c7926;


architecture behavior of relational_6e942c7926 is
  signal a_1_31: signed((16 - 1) downto 0);
  signal b_1_34: signed((16 - 1) downto 0);
  type array_type_op_mem_32_22 is array (0 to (1 - 1)) of boolean;
  signal op_mem_32_22: array_type_op_mem_32_22 := (
    0 => false);
  signal op_mem_32_22_front_din: boolean;
  signal op_mem_32_22_back: boolean;
  signal op_mem_32_22_push_front_pop_back_en: std_logic;
  signal result_22_3_rel: boolean;
begin
  a_1_31 <= std_logic_vector_to_signed(a);
  b_1_34 <= std_logic_vector_to_signed(b);
  op_mem_32_22_back <= op_mem_32_22(0);
  proc_op_mem_32_22: process (clk)
  is
    variable i: integer;
  begin
    if (clk'event and (clk = '1')) then
      if ((ce = '1') and (op_mem_32_22_push_front_pop_back_en = '1')) then
        op_mem_32_22(0) <= op_mem_32_22_front_din;
      end if;
    end if;
  end process proc_op_mem_32_22;
  result_22_3_rel <= a_1_31 >= b_1_34;
  op_mem_32_22_front_din <= result_22_3_rel;
  op_mem_32_22_push_front_pop_back_en <= '1';
  op <= boolean_to_vector(op_mem_32_22_back);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity logical_1cef476837 is
  port (
    d0 : in std_logic_vector((1 - 1) downto 0);
    d1 : in std_logic_vector((1 - 1) downto 0);
    d2 : in std_logic_vector((1 - 1) downto 0);
    d3 : in std_logic_vector((1 - 1) downto 0);
    y : out std_logic_vector((1 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end logical_1cef476837;


architecture behavior of logical_1cef476837 is
  signal d0_1_24: std_logic;
  signal d1_1_27: std_logic;
  signal d2_1_30: std_logic;
  signal d3_1_33: std_logic;
  type array_type_latency_pipe_5_26 is array (0 to (1 - 1)) of std_logic;
  signal latency_pipe_5_26: array_type_latency_pipe_5_26 := (
    0 => '0');
  signal latency_pipe_5_26_front_din: std_logic;
  signal latency_pipe_5_26_back: std_logic;
  signal latency_pipe_5_26_push_front_pop_back_en: std_logic;
  signal fully_2_1_bit: std_logic;
begin
  d0_1_24 <= d0(0);
  d1_1_27 <= d1(0);
  d2_1_30 <= d2(0);
  d3_1_33 <= d3(0);
  latency_pipe_5_26_back <= latency_pipe_5_26(0);
  proc_latency_pipe_5_26: process (clk)
  is
    variable i: integer;
  begin
    if (clk'event and (clk = '1')) then
      if ((ce = '1') and (latency_pipe_5_26_push_front_pop_back_en = '1')) then
        latency_pipe_5_26(0) <= latency_pipe_5_26_front_din;
      end if;
    end if;
  end process proc_latency_pipe_5_26;
  fully_2_1_bit <= d0_1_24 or d1_1_27 or d2_1_30 or d3_1_33;
  latency_pipe_5_26_front_din <= fully_2_1_bit;
  latency_pipe_5_26_push_front_pop_back_en <= '1';
  y <= std_logic_to_vector(latency_pipe_5_26_back);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity constant_4e64dfaf34 is
  port (
    op : out std_logic_vector((3 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end constant_4e64dfaf34;


architecture behavior of constant_4e64dfaf34 is
begin
  op <= "101";
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity concat_397b8dc5c3 is
  port (
    in0 : in std_logic_vector((29 - 1) downto 0);
    in1 : in std_logic_vector((3 - 1) downto 0);
    y : out std_logic_vector((32 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end concat_397b8dc5c3;


architecture behavior of concat_397b8dc5c3 is
  signal in0_1_23: unsigned((29 - 1) downto 0);
  signal in1_1_27: unsigned((3 - 1) downto 0);
  signal y_2_1_concat: unsigned((32 - 1) downto 0);
begin
  in0_1_23 <= std_logic_vector_to_unsigned(in0);
  in1_1_27 <= std_logic_vector_to_unsigned(in1);
  y_2_1_concat <= std_logic_vector_to_unsigned(unsigned_to_std_logic_vector(in0_1_23) & unsigned_to_std_logic_vector(in1_1_27));
  y <= unsigned_to_std_logic_vector(y_2_1_concat);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity mux_dc8b84fd59 is
  port (
    sel : in std_logic_vector((1 - 1) downto 0);
    d0 : in std_logic_vector((64 - 1) downto 0);
    d1 : in std_logic_vector((64 - 1) downto 0);
    y : out std_logic_vector((64 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end mux_dc8b84fd59;


architecture behavior of mux_dc8b84fd59 is
  signal sel_1_20: std_logic_vector((1 - 1) downto 0);
  signal d0_1_24: std_logic_vector((64 - 1) downto 0);
  signal d1_1_27: std_logic_vector((64 - 1) downto 0);
  signal unregy_join_6_1: std_logic_vector((64 - 1) downto 0);
begin
  sel_1_20 <= sel;
  d0_1_24 <= d0;
  d1_1_27 <= d1;
  proc_switch_6_1: process (d0_1_24, d1_1_27, sel_1_20)
  is
  begin
    case sel_1_20 is 
      when "0" =>
        unregy_join_6_1 <= d0_1_24;
      when others =>
        unregy_join_6_1 <= d1_1_27;
    end case;
  end process proc_switch_6_1;
  y <= unregy_join_6_1;
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity concat_cab3ba8c97 is
  port (
    in0 : in std_logic_vector((1 - 1) downto 0);
    in1 : in std_logic_vector((32 - 1) downto 0);
    in2 : in std_logic_vector((32 - 1) downto 0);
    y : out std_logic_vector((65 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end concat_cab3ba8c97;


architecture behavior of concat_cab3ba8c97 is
  signal in0_1_23: boolean;
  signal in1_1_27: unsigned((32 - 1) downto 0);
  signal in2_1_31: unsigned((32 - 1) downto 0);
  signal y_2_1_concat: unsigned((65 - 1) downto 0);
begin
  in0_1_23 <= ((in0) = "1");
  in1_1_27 <= std_logic_vector_to_unsigned(in1);
  in2_1_31 <= std_logic_vector_to_unsigned(in2);
  y_2_1_concat <= std_logic_vector_to_unsigned(boolean_to_vector(in0_1_23) & unsigned_to_std_logic_vector(in1_1_27) & unsigned_to_std_logic_vector(in2_1_31));
  y <= unsigned_to_std_logic_vector(y_2_1_concat);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity concat_d01593648d is
  port (
    in0 : in std_logic_vector((16 - 1) downto 0);
    in1 : in std_logic_vector((16 - 1) downto 0);
    in2 : in std_logic_vector((15 - 1) downto 0);
    in3 : in std_logic_vector((16 - 1) downto 0);
    in4 : in std_logic_vector((16 - 1) downto 0);
    y : out std_logic_vector((79 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end concat_d01593648d;


architecture behavior of concat_d01593648d is
  signal in0_1_23: unsigned((16 - 1) downto 0);
  signal in1_1_27: unsigned((16 - 1) downto 0);
  signal in2_1_31: unsigned((15 - 1) downto 0);
  signal in3_1_35: unsigned((16 - 1) downto 0);
  signal in4_1_39: unsigned((16 - 1) downto 0);
  signal y_2_1_concat: unsigned((79 - 1) downto 0);
begin
  in0_1_23 <= std_logic_vector_to_unsigned(in0);
  in1_1_27 <= std_logic_vector_to_unsigned(in1);
  in2_1_31 <= std_logic_vector_to_unsigned(in2);
  in3_1_35 <= std_logic_vector_to_unsigned(in3);
  in4_1_39 <= std_logic_vector_to_unsigned(in4);
  y_2_1_concat <= std_logic_vector_to_unsigned(unsigned_to_std_logic_vector(in0_1_23) & unsigned_to_std_logic_vector(in1_1_27) & unsigned_to_std_logic_vector(in2_1_31) & unsigned_to_std_logic_vector(in3_1_35) & unsigned_to_std_logic_vector(in4_1_39));
  y <= unsigned_to_std_logic_vector(y_2_1_concat);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity concat_6964870821 is
  port (
    in0 : in std_logic_vector((16 - 1) downto 0);
    in1 : in std_logic_vector((32 - 1) downto 0);
    y : out std_logic_vector((48 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end concat_6964870821;


architecture behavior of concat_6964870821 is
  signal in0_1_23: unsigned((16 - 1) downto 0);
  signal in1_1_27: unsigned((32 - 1) downto 0);
  signal y_2_1_concat: unsigned((48 - 1) downto 0);
begin
  in0_1_23 <= std_logic_vector_to_unsigned(in0);
  in1_1_27 <= std_logic_vector_to_unsigned(in1);
  y_2_1_concat <= std_logic_vector_to_unsigned(unsigned_to_std_logic_vector(in0_1_23) & unsigned_to_std_logic_vector(in1_1_27));
  y <= unsigned_to_std_logic_vector(y_2_1_concat);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity concat_55c7ba900f is
  port (
    in0 : in std_logic_vector((1 - 1) downto 0);
    in1 : in std_logic_vector((31 - 1) downto 0);
    y : out std_logic_vector((32 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end concat_55c7ba900f;


architecture behavior of concat_55c7ba900f is
  signal in0_1_23: boolean;
  signal in1_1_27: unsigned((31 - 1) downto 0);
  signal y_2_1_concat: unsigned((32 - 1) downto 0);
begin
  in0_1_23 <= ((in0) = "1");
  in1_1_27 <= std_logic_vector_to_unsigned(in1);
  y_2_1_concat <= std_logic_vector_to_unsigned(boolean_to_vector(in0_1_23) & unsigned_to_std_logic_vector(in1_1_27));
  y <= unsigned_to_std_logic_vector(y_2_1_concat);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity concat_7d5080ab25 is
  port (
    in0 : in std_logic_vector((1 - 1) downto 0);
    in1 : in std_logic_vector((32 - 1) downto 0);
    y : out std_logic_vector((33 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end concat_7d5080ab25;


architecture behavior of concat_7d5080ab25 is
  signal in0_1_23: boolean;
  signal in1_1_27: unsigned((32 - 1) downto 0);
  signal y_2_1_concat: unsigned((33 - 1) downto 0);
begin
  in0_1_23 <= ((in0) = "1");
  in1_1_27 <= std_logic_vector_to_unsigned(in1);
  y_2_1_concat <= std_logic_vector_to_unsigned(boolean_to_vector(in0_1_23) & unsigned_to_std_logic_vector(in1_1_27));
  y <= unsigned_to_std_logic_vector(y_2_1_concat);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity constant_a1d3429a21 is
  port (
    op : out std_logic_vector((32 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end constant_a1d3429a21;


architecture behavior of constant_a1d3429a21 is
begin
  op <= "00001011111010111100000111111111";
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity constant_37567836aa is
  port (
    op : out std_logic_vector((32 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end constant_37567836aa;


architecture behavior of constant_37567836aa is
begin
  op <= "00000000000000000000000000000000";
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity constant_61027e1056 is
  port (
    op : out std_logic_vector((32 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end constant_61027e1056;


architecture behavior of constant_61027e1056 is
begin
  op <= "00001011111010111100001000000001";
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity delay_672d2b8d1e is
  port (
    d : in std_logic_vector((32 - 1) downto 0);
    q : out std_logic_vector((32 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end delay_672d2b8d1e;


architecture behavior of delay_672d2b8d1e is
  signal d_1_22: std_logic_vector((32 - 1) downto 0);
  type array_type_op_mem_20_24 is array (0 to (1 - 1)) of std_logic_vector((32 - 1) downto 0);
  signal op_mem_20_24: array_type_op_mem_20_24 := (
    0 => "00000000000000000000000000000000");
  signal op_mem_20_24_front_din: std_logic_vector((32 - 1) downto 0);
  signal op_mem_20_24_back: std_logic_vector((32 - 1) downto 0);
  signal op_mem_20_24_push_front_pop_back_en: std_logic;
begin
  d_1_22 <= d;
  op_mem_20_24_back <= op_mem_20_24(0);
  proc_op_mem_20_24: process (clk)
  is
    variable i: integer;
  begin
    if (clk'event and (clk = '1')) then
      if ((ce = '1') and (op_mem_20_24_push_front_pop_back_en = '1')) then
        op_mem_20_24(0) <= op_mem_20_24_front_din;
      end if;
    end if;
  end process proc_op_mem_20_24;
  op_mem_20_24_front_din <= d_1_22;
  op_mem_20_24_push_front_pop_back_en <= '1';
  q <= op_mem_20_24_back;
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity logical_1df98b5f16 is
  port (
    d0 : in std_logic_vector((1 - 1) downto 0);
    d1 : in std_logic_vector((1 - 1) downto 0);
    d2 : in std_logic_vector((1 - 1) downto 0);
    d3 : in std_logic_vector((1 - 1) downto 0);
    d4 : in std_logic_vector((1 - 1) downto 0);
    d5 : in std_logic_vector((1 - 1) downto 0);
    y : out std_logic_vector((1 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end logical_1df98b5f16;


architecture behavior of logical_1df98b5f16 is
  signal d0_1_24: std_logic;
  signal d1_1_27: std_logic;
  signal d2_1_30: std_logic;
  signal d3_1_33: std_logic;
  signal d4_1_36: std_logic;
  signal d5_1_39: std_logic;
  type array_type_latency_pipe_5_26 is array (0 to (1 - 1)) of std_logic;
  signal latency_pipe_5_26: array_type_latency_pipe_5_26 := (
    0 => '0');
  signal latency_pipe_5_26_front_din: std_logic;
  signal latency_pipe_5_26_back: std_logic;
  signal latency_pipe_5_26_push_front_pop_back_en: std_logic;
  signal fully_2_1_bit: std_logic;
begin
  d0_1_24 <= d0(0);
  d1_1_27 <= d1(0);
  d2_1_30 <= d2(0);
  d3_1_33 <= d3(0);
  d4_1_36 <= d4(0);
  d5_1_39 <= d5(0);
  latency_pipe_5_26_back <= latency_pipe_5_26(0);
  proc_latency_pipe_5_26: process (clk)
  is
    variable i: integer;
  begin
    if (clk'event and (clk = '1')) then
      if ((ce = '1') and (latency_pipe_5_26_push_front_pop_back_en = '1')) then
        latency_pipe_5_26(0) <= latency_pipe_5_26_front_din;
      end if;
    end if;
  end process proc_latency_pipe_5_26;
  fully_2_1_bit <= d0_1_24 or d1_1_27 or d2_1_30 or d3_1_33 or d4_1_36 or d5_1_39;
  latency_pipe_5_26_front_din <= fully_2_1_bit;
  latency_pipe_5_26_push_front_pop_back_en <= '1';
  y <= std_logic_to_vector(latency_pipe_5_26_back);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity relational_f5d1a8e480 is
  port (
    a : in std_logic_vector((32 - 1) downto 0);
    b : in std_logic_vector((32 - 1) downto 0);
    op : out std_logic_vector((1 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end relational_f5d1a8e480;


architecture behavior of relational_f5d1a8e480 is
  signal a_1_31: unsigned((32 - 1) downto 0);
  signal b_1_34: unsigned((32 - 1) downto 0);
  type array_type_op_mem_32_22 is array (0 to (1 - 1)) of boolean;
  signal op_mem_32_22: array_type_op_mem_32_22 := (
    0 => false);
  signal op_mem_32_22_front_din: boolean;
  signal op_mem_32_22_back: boolean;
  signal op_mem_32_22_push_front_pop_back_en: std_logic;
  signal result_16_3_rel: boolean;
begin
  a_1_31 <= std_logic_vector_to_unsigned(a);
  b_1_34 <= std_logic_vector_to_unsigned(b);
  op_mem_32_22_back <= op_mem_32_22(0);
  proc_op_mem_32_22: process (clk)
  is
    variable i: integer;
  begin
    if (clk'event and (clk = '1')) then
      if ((ce = '1') and (op_mem_32_22_push_front_pop_back_en = '1')) then
        op_mem_32_22(0) <= op_mem_32_22_front_din;
      end if;
    end if;
  end process proc_op_mem_32_22;
  result_16_3_rel <= a_1_31 < b_1_34;
  op_mem_32_22_front_din <= result_16_3_rel;
  op_mem_32_22_push_front_pop_back_en <= '1';
  op <= boolean_to_vector(op_mem_32_22_back);
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity constant_e3e2bf8850 is
  port (
    op : out std_logic_vector((5 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end constant_e3e2bf8850;


architecture behavior of constant_e3e2bf8850 is
begin
  op <= "01001";
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity constant_7770c5583c is
  port (
    op : out std_logic_vector((5 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end constant_7770c5583c;


architecture behavior of constant_7770c5583c is
begin
  op <= "01100";
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use work.conv_pkg.all;

entity constant_0904137f94 is
  port (
    op : out std_logic_vector((31 - 1) downto 0);
    clk : in std_logic;
    ce : in std_logic;
    clr : in std_logic);
end constant_0904137f94;


architecture behavior of constant_0904137f94 is
begin
  op <= "0100000000000000000000000000000";
end behavior;

library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/Delay10"

entity delay10_entity_8181a66134 is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    d: in std_logic_vector(31 downto 0); 
    q: out std_logic_vector(31 downto 0)
  );
end delay10_entity_8181a66134;

architecture structural of delay10_entity_8181a66134 is
  signal ce_1_sg_x0: std_logic;
  signal clk_1_sg_x0: std_logic;
  signal register0_q_net_x1: std_logic_vector(31 downto 0);
  signal register0_q_net_x2: std_logic_vector(31 downto 0);

begin
  ce_1_sg_x0 <= ce_1;
  clk_1_sg_x0 <= clk_1;
  register0_q_net_x1 <= d;
  q <= register0_q_net_x2;

  register0: entity work.xlregister
    generic map (
      d_width => 32,
      init_value => b"00000000000000000000000000000000"
    )
    port map (
      ce => ce_1_sg_x0,
      clk => clk_1_sg_x0,
      d => register0_q_net_x1,
      en => "1",
      rst => "0",
      q => register0_q_net_x2
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/Delay100"

entity delay100_entity_f5402d4afa is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    d: in std_logic; 
    q: out std_logic
  );
end delay100_entity_f5402d4afa;

architecture structural of delay100_entity_f5402d4afa is
  signal arm8_y_net_x0: std_logic;
  signal ce_1_sg_x1: std_logic;
  signal clk_1_sg_x1: std_logic;
  signal register0_q_net: std_logic;
  signal register1_q_net_x0: std_logic;

begin
  ce_1_sg_x1 <= ce_1;
  clk_1_sg_x1 <= clk_1;
  arm8_y_net_x0 <= d;
  q <= register1_q_net_x0;

  register0: entity work.xlregister
    generic map (
      d_width => 1,
      init_value => b"0"
    )
    port map (
      ce => ce_1_sg_x1,
      clk => clk_1_sg_x1,
      d(0) => arm8_y_net_x0,
      en => "1",
      rst => "0",
      q(0) => register0_q_net
    );

  register1: entity work.xlregister
    generic map (
      d_width => 1,
      init_value => b"0"
    )
    port map (
      ce => ce_1_sg_x1,
      clk => clk_1_sg_x1,
      d(0) => register0_q_net,
      en => "1",
      rst => "0",
      q(0) => register1_q_net_x0
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/Delay11"

entity delay11_entity_c2a06abd76 is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    d: in std_logic; 
    q: out std_logic
  );
end delay11_entity_c2a06abd76;

architecture structural of delay11_entity_c2a06abd76 is
  signal ce_1_sg_x2: std_logic;
  signal clk_1_sg_x2: std_logic;
  signal logical1_y_net_x0: std_logic;
  signal register0_q_net_x0: std_logic;

begin
  ce_1_sg_x2 <= ce_1;
  clk_1_sg_x2 <= clk_1;
  logical1_y_net_x0 <= d;
  q <= register0_q_net_x0;

  register0: entity work.xlregister
    generic map (
      d_width => 1,
      init_value => b"0"
    )
    port map (
      ce => ce_1_sg_x2,
      clk => clk_1_sg_x2,
      d(0) => logical1_y_net_x0,
      en => "1",
      rst => "0",
      q(0) => register0_q_net_x0
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/Delay3"

entity delay3_entity_1a1c4e6264 is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    d: in std_logic_vector(63 downto 0); 
    q: out std_logic_vector(63 downto 0)
  );
end delay3_entity_1a1c4e6264;

architecture structural of delay3_entity_1a1c4e6264 is
  signal ce_1_sg_x5: std_logic;
  signal clk_1_sg_x5: std_logic;
  signal pkt_out_x0: std_logic_vector(63 downto 0);
  signal register0_q_net_x0: std_logic_vector(63 downto 0);

begin
  ce_1_sg_x5 <= ce_1;
  clk_1_sg_x5 <= clk_1;
  pkt_out_x0 <= d;
  q <= register0_q_net_x0;

  register0: entity work.xlregister
    generic map (
      d_width => 64,
      init_value => b"0000000000000000000000000000000000000000000000000000000000000000"
    )
    port map (
      ce => ce_1_sg_x5,
      clk => clk_1_sg_x5,
      d => pkt_out_x0,
      en => "1",
      rst => "0",
      q => register0_q_net_x0
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/Delay4"

entity delay4_entity_dd35b94c7d is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    d: in std_logic_vector(7 downto 0); 
    q: out std_logic_vector(7 downto 0)
  );
end delay4_entity_dd35b94c7d;

architecture structural of delay4_entity_dd35b94c7d is
  signal ce_1_sg_x7: std_logic;
  signal clk_1_sg_x7: std_logic;
  signal oob_out_x0: std_logic_vector(7 downto 0);
  signal register0_q_net_x0: std_logic_vector(7 downto 0);

begin
  ce_1_sg_x7 <= ce_1;
  clk_1_sg_x7 <= clk_1;
  oob_out_x0 <= d;
  q <= register0_q_net_x0;

  register0: entity work.xlregister
    generic map (
      d_width => 8,
      init_value => b"00000000"
    )
    port map (
      ce => ce_1_sg_x7,
      clk => clk_1_sg_x7,
      d => oob_out_x0,
      en => "1",
      rst => "0",
      q => register0_q_net_x0
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/Subsystem"

entity subsystem_entity_2a44c7d8dc is
  port (
    adc_disabled: in std_logic; 
    adcor: in std_logic; 
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    clk_err: in std_logic; 
    clr: in std_logic; 
    coarse_bits: in std_logic_vector(4 downto 0); 
    coarsefftor: in std_logic; 
    ct_err: in std_logic; 
    fine_bits: in std_logic_vector(4 downto 0); 
    finefftor: in std_logic; 
    quantor: in std_logic; 
    sync_val: in std_logic_vector(1 downto 0); 
    xaui_of: in std_logic; 
    xuai_ldn: in std_logic; 
    adc0_bad_latch: out std_logic; 
    status: out std_logic_vector(31 downto 0)
  );
end subsystem_entity_2a44c7d8dc;

architecture structural of subsystem_entity_2a44c7d8dc is
  signal c09f12_01_gbe0_tx_overflow_net_x0: std_logic;
  signal c09f12_01_katadc0_user_outofrange0_net_x0: std_logic;
  signal ce_1_sg_x11: std_logic;
  signal clk_1_sg_x11: std_logic;
  signal concat13_y_net_x0: std_logic_vector(31 downto 0);
  signal constant1_op_net: std_logic_vector(8 downto 0);
  signal constant3_op_net_x0: std_logic;
  signal constant_op_net: std_logic_vector(1 downto 0);
  signal delay2_q_net_x0: std_logic;
  signal edge_op_y_net_x0: std_logic;
  signal fstatcbits0_op_net_x0: std_logic_vector(4 downto 0);
  signal fstatfbits0_op_net_x0: std_logic_vector(4 downto 0);
  signal inverter5_op_net_x0: std_logic;
  signal inverter_op_net_x0: std_logic;
  signal logical12_y_net_x0: std_logic;
  signal logical21_y_net_x0: std_logic;
  signal logical_y_net_x0: std_logic;
  signal mux_y_net_x0: std_logic_vector(1 downto 0);
  signal register10_q_net: std_logic;
  signal register1_q_net: std_logic;
  signal register2_q_net: std_logic;
  signal register3_q_net: std_logic;
  signal register4_q_net: std_logic;
  signal register6_q_net: std_logic;
  signal register7_q_net_x0: std_logic;
  signal register8_q_net: std_logic;
  signal register9_q_net: std_logic;
  signal slice1_y_net: std_logic_vector(4 downto 0);
  signal slice9_y_net: std_logic_vector(4 downto 0);

begin
  inverter5_op_net_x0 <= adc_disabled;
  c09f12_01_katadc0_user_outofrange0_net_x0 <= adcor;
  ce_1_sg_x11 <= ce_1;
  clk_1_sg_x11 <= clk_1;
  logical21_y_net_x0 <= clk_err;
  edge_op_y_net_x0 <= clr;
  fstatcbits0_op_net_x0 <= coarse_bits;
  delay2_q_net_x0 <= coarsefftor;
  logical12_y_net_x0 <= ct_err;
  fstatfbits0_op_net_x0 <= fine_bits;
  constant3_op_net_x0 <= finefftor;
  logical_y_net_x0 <= quantor;
  mux_y_net_x0 <= sync_val;
  c09f12_01_gbe0_tx_overflow_net_x0 <= xaui_of;
  inverter_op_net_x0 <= xuai_ldn;
  adc0_bad_latch <= register7_q_net_x0;
  status <= concat13_y_net_x0;

  concat13: entity work.concat_7ad576a6fc
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      in0 => slice9_y_net,
      in1 => slice1_y_net,
      in10(0) => register4_q_net,
      in11(0) => register8_q_net,
      in12(0) => register6_q_net,
      in13(0) => register9_q_net,
      in2 => mux_y_net_x0,
      in3 => constant_op_net,
      in4(0) => register2_q_net,
      in5(0) => register1_q_net,
      in6 => constant1_op_net,
      in7(0) => register10_q_net,
      in8(0) => register7_q_net_x0,
      in9(0) => register3_q_net,
      y => concat13_y_net_x0
    );

  constant1: entity work.constant_fd85eb7067
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op => constant1_op_net
    );

  constant_x0: entity work.constant_cda50df78a
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op => constant_op_net
    );

  register1: entity work.xlregister
    generic map (
      d_width => 1,
      init_value => b"0"
    )
    port map (
      ce => ce_1_sg_x11,
      clk => clk_1_sg_x11,
      d(0) => c09f12_01_gbe0_tx_overflow_net_x0,
      en(0) => c09f12_01_gbe0_tx_overflow_net_x0,
      rst(0) => edge_op_y_net_x0,
      q(0) => register1_q_net
    );

  register10: entity work.xlregister
    generic map (
      d_width => 1,
      init_value => b"0"
    )
    port map (
      ce => ce_1_sg_x11,
      clk => clk_1_sg_x11,
      d(0) => logical21_y_net_x0,
      en(0) => logical21_y_net_x0,
      rst(0) => edge_op_y_net_x0,
      q(0) => register10_q_net
    );

  register2: entity work.xlregister
    generic map (
      d_width => 1,
      init_value => b"0"
    )
    port map (
      ce => ce_1_sg_x11,
      clk => clk_1_sg_x11,
      d(0) => inverter_op_net_x0,
      en(0) => inverter_op_net_x0,
      rst(0) => edge_op_y_net_x0,
      q(0) => register2_q_net
    );

  register3: entity work.xlregister
    generic map (
      d_width => 1,
      init_value => b"0"
    )
    port map (
      ce => ce_1_sg_x11,
      clk => clk_1_sg_x11,
      d(0) => logical12_y_net_x0,
      en(0) => logical12_y_net_x0,
      rst(0) => edge_op_y_net_x0,
      q(0) => register3_q_net
    );

  register4: entity work.xlregister
    generic map (
      d_width => 1,
      init_value => b"0"
    )
    port map (
      ce => ce_1_sg_x11,
      clk => clk_1_sg_x11,
      d(0) => c09f12_01_katadc0_user_outofrange0_net_x0,
      en(0) => c09f12_01_katadc0_user_outofrange0_net_x0,
      rst(0) => edge_op_y_net_x0,
      q(0) => register4_q_net
    );

  register6: entity work.xlregister
    generic map (
      d_width => 1,
      init_value => b"0"
    )
    port map (
      ce => ce_1_sg_x11,
      clk => clk_1_sg_x11,
      d(0) => delay2_q_net_x0,
      en(0) => delay2_q_net_x0,
      rst(0) => edge_op_y_net_x0,
      q(0) => register6_q_net
    );

  register7: entity work.xlregister
    generic map (
      d_width => 1,
      init_value => b"0"
    )
    port map (
      ce => ce_1_sg_x11,
      clk => clk_1_sg_x11,
      d(0) => inverter5_op_net_x0,
      en(0) => inverter5_op_net_x0,
      rst(0) => edge_op_y_net_x0,
      q(0) => register7_q_net_x0
    );

  register8: entity work.xlregister
    generic map (
      d_width => 1,
      init_value => b"0"
    )
    port map (
      ce => ce_1_sg_x11,
      clk => clk_1_sg_x11,
      d(0) => constant3_op_net_x0,
      en(0) => constant3_op_net_x0,
      rst(0) => edge_op_y_net_x0,
      q(0) => register8_q_net
    );

  register9: entity work.xlregister
    generic map (
      d_width => 1,
      init_value => b"0"
    )
    port map (
      ce => ce_1_sg_x11,
      clk => clk_1_sg_x11,
      d(0) => logical_y_net_x0,
      en(0) => logical_y_net_x0,
      rst(0) => edge_op_y_net_x0,
      q(0) => register9_q_net
    );

  slice1: entity work.xlslice
    generic map (
      new_lsb => 0,
      new_msb => 4,
      x_width => 5,
      y_width => 5
    )
    port map (
      x => fstatfbits0_op_net_x0,
      y => slice1_y_net
    );

  slice9: entity work.xlslice
    generic map (
      new_lsb => 0,
      new_msb => 4,
      x_width => 5,
      y_width => 5
    )
    port map (
      x => fstatcbits0_op_net_x0,
      y => slice9_y_net
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/Subsystem1/bus_create11"

entity bus_create11_entity_ed14098eb6 is
  port (
    in1: in std_logic; 
    in2: in std_logic_vector(127 downto 0); 
    in3: in std_logic; 
    bus_out: out std_logic_vector(129 downto 0)
  );
end bus_create11_entity_ed14098eb6;

architecture structural of bus_create11_entity_ed14098eb6 is
  signal concatenate_y_net_x0: std_logic_vector(129 downto 0);
  signal convert7_dout_net_x0: std_logic_vector(127 downto 0);
  signal logical2_y_net_x0: std_logic;
  signal logical4_y_net_x0: std_logic;
  signal reinterpret1_output_port_net: std_logic;
  signal reinterpret2_output_port_net: std_logic_vector(127 downto 0);
  signal reinterpret3_output_port_net: std_logic;

begin
  logical4_y_net_x0 <= in1;
  convert7_dout_net_x0 <= in2;
  logical2_y_net_x0 <= in3;
  bus_out <= concatenate_y_net_x0;

  concatenate: entity work.concat_12f835c970
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      in0(0) => reinterpret1_output_port_net,
      in1 => reinterpret2_output_port_net,
      in2(0) => reinterpret3_output_port_net,
      y => concatenate_y_net_x0
    );

  reinterpret1: entity work.reinterpret_112d91c147
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port(0) => logical4_y_net_x0,
      output_port(0) => reinterpret1_output_port_net
    );

  reinterpret2: entity work.reinterpret_28b9ecc6fc
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => convert7_dout_net_x0,
      output_port => reinterpret2_output_port_net
    );

  reinterpret3: entity work.reinterpret_112d91c147
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port(0) => logical2_y_net_x0,
      output_port(0) => reinterpret3_output_port_net
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/Subsystem1"

entity subsystem1_entity_1d30495a1f is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    data_in: in std_logic_vector(63 downto 0); 
    eof_in: in std_logic; 
    ip_in: in std_logic_vector(31 downto 0); 
    led_tx: in std_logic; 
    link_up: in std_logic; 
    tx_full: in std_logic; 
    tx_over: in std_logic; 
    valid_in: in std_logic; 
    debug_out: out std_logic_vector(129 downto 0)
  );
end subsystem1_entity_1d30495a1f;

architecture structural of subsystem1_entity_1d30495a1f is
  signal c09f12_01_gbe0_led_tx_net_x0: std_logic;
  signal c09f12_01_gbe0_led_up_net_x0: std_logic;
  signal c09f12_01_gbe0_tx_afull_net_x0: std_logic;
  signal c09f12_01_gbe0_tx_overflow_net_x1: std_logic;
  signal ce_1_sg_x12: std_logic;
  signal clk_1_sg_x12: std_logic;
  signal concat1_y_net: std_logic_vector(101 downto 0);
  signal concatenate_y_net_x1: std_logic_vector(129 downto 0);
  signal convert1_dout_net: std_logic;
  signal convert2_dout_net: std_logic;
  signal convert3_dout_net: std_logic;
  signal convert4_dout_net: std_logic;
  signal convert5_dout_net: std_logic;
  signal convert6_dout_net: std_logic;
  signal convert7_dout_net_x0: std_logic_vector(127 downto 0);
  signal logical2_y_net_x1: std_logic;
  signal logical4_y_net_x0: std_logic;
  signal register0_q_net_x4: std_logic_vector(31 downto 0);
  signal register0_q_net_x5: std_logic;
  signal register0_q_net_x6: std_logic_vector(63 downto 0);

begin
  ce_1_sg_x12 <= ce_1;
  clk_1_sg_x12 <= clk_1;
  register0_q_net_x6 <= data_in;
  register0_q_net_x5 <= eof_in;
  register0_q_net_x4 <= ip_in;
  c09f12_01_gbe0_led_tx_net_x0 <= led_tx;
  c09f12_01_gbe0_led_up_net_x0 <= link_up;
  c09f12_01_gbe0_tx_afull_net_x0 <= tx_full;
  c09f12_01_gbe0_tx_overflow_net_x1 <= tx_over;
  logical2_y_net_x1 <= valid_in;
  debug_out <= concatenate_y_net_x1;

  bus_create11_ed14098eb6: entity work.bus_create11_entity_ed14098eb6
    port map (
      in1 => logical4_y_net_x0,
      in2 => convert7_dout_net_x0,
      in3 => logical2_y_net_x1,
      bus_out => concatenate_y_net_x1
    );

  concat1: entity work.concat_8d83147763
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      in0(0) => convert3_dout_net,
      in1(0) => convert1_dout_net,
      in2(0) => convert2_dout_net,
      in3(0) => convert4_dout_net,
      in4(0) => convert5_dout_net,
      in5(0) => convert6_dout_net,
      in6 => register0_q_net_x4,
      in7 => register0_q_net_x6,
      y => concat1_y_net
    );

  convert1: entity work.xlconvert
    generic map (
      bool_conversion => 0,
      din_arith => 1,
      din_bin_pt => 0,
      din_width => 1,
      dout_arith => 1,
      dout_bin_pt => 0,
      dout_width => 1,
      latency => 0,
      overflow => xlWrap,
      quantization => xlTruncate
    )
    port map (
      ce => ce_1_sg_x12,
      clk => clk_1_sg_x12,
      clr => '0',
      din(0) => c09f12_01_gbe0_led_up_net_x0,
      en => "1",
      dout(0) => convert1_dout_net
    );

  convert2: entity work.xlconvert
    generic map (
      bool_conversion => 0,
      din_arith => 1,
      din_bin_pt => 0,
      din_width => 1,
      dout_arith => 1,
      dout_bin_pt => 0,
      dout_width => 1,
      latency => 0,
      overflow => xlWrap,
      quantization => xlTruncate
    )
    port map (
      ce => ce_1_sg_x12,
      clk => clk_1_sg_x12,
      clr => '0',
      din(0) => c09f12_01_gbe0_led_tx_net_x0,
      en => "1",
      dout(0) => convert2_dout_net
    );

  convert3: entity work.xlconvert
    generic map (
      bool_conversion => 0,
      din_arith => 1,
      din_bin_pt => 0,
      din_width => 1,
      dout_arith => 1,
      dout_bin_pt => 0,
      dout_width => 1,
      latency => 0,
      overflow => xlWrap,
      quantization => xlTruncate
    )
    port map (
      ce => ce_1_sg_x12,
      clk => clk_1_sg_x12,
      clr => '0',
      din(0) => register0_q_net_x5,
      en => "1",
      dout(0) => convert3_dout_net
    );

  convert4: entity work.xlconvert
    generic map (
      bool_conversion => 0,
      din_arith => 1,
      din_bin_pt => 0,
      din_width => 1,
      dout_arith => 1,
      dout_bin_pt => 0,
      dout_width => 1,
      latency => 0,
      overflow => xlWrap,
      quantization => xlTruncate
    )
    port map (
      ce => ce_1_sg_x12,
      clk => clk_1_sg_x12,
      clr => '0',
      din(0) => c09f12_01_gbe0_tx_afull_net_x0,
      en => "1",
      dout(0) => convert4_dout_net
    );

  convert5: entity work.xlconvert
    generic map (
      bool_conversion => 0,
      din_arith => 1,
      din_bin_pt => 0,
      din_width => 1,
      dout_arith => 1,
      dout_bin_pt => 0,
      dout_width => 1,
      latency => 0,
      overflow => xlWrap,
      quantization => xlTruncate
    )
    port map (
      ce => ce_1_sg_x12,
      clk => clk_1_sg_x12,
      clr => '0',
      din(0) => c09f12_01_gbe0_tx_overflow_net_x1,
      en => "1",
      dout(0) => convert5_dout_net
    );

  convert6: entity work.xlconvert
    generic map (
      bool_conversion => 0,
      din_arith => 1,
      din_bin_pt => 0,
      din_width => 1,
      dout_arith => 1,
      dout_bin_pt => 0,
      dout_width => 1,
      latency => 0,
      overflow => xlWrap,
      quantization => xlTruncate
    )
    port map (
      ce => ce_1_sg_x12,
      clk => clk_1_sg_x12,
      clr => '0',
      din(0) => logical2_y_net_x1,
      en => "1",
      dout(0) => convert6_dout_net
    );

  convert7: entity work.xlconvert
    generic map (
      bool_conversion => 0,
      din_arith => 1,
      din_bin_pt => 0,
      din_width => 102,
      dout_arith => 1,
      dout_bin_pt => 0,
      dout_width => 128,
      latency => 0,
      overflow => xlWrap,
      quantization => xlTruncate
    )
    port map (
      ce => ce_1_sg_x12,
      clk => clk_1_sg_x12,
      clr => '0',
      din => concat1_y_net,
      en => "1",
      dout => convert7_dout_net_x0
    );

  logical4: entity work.logical_80f90b97d0
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0(0) => register0_q_net_x5,
      d1(0) => logical2_y_net_x1,
      y(0) => logical4_y_net_x0
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/Subsystem2"

entity subsystem2_entity_c612b0eca6 is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    data_in: in std_logic_vector(63 downto 0); 
    link_down: in std_logic; 
    oob_in: in std_logic_vector(7 downto 0); 
    we_in: in std_logic; 
    debug_out: out std_logic_vector(129 downto 0)
  );
end subsystem2_entity_c612b0eca6;

architecture structural of subsystem2_entity_c612b0eca6 is
  signal ce_1_sg_x13: std_logic;
  signal clk_1_sg_x13: std_logic;
  signal concat1_y_net: std_logic_vector(95 downto 0);
  signal concat2_y_net: std_logic_vector(8 downto 0);
  signal concatenate_y_net_x1: std_logic_vector(129 downto 0);
  signal constant17_op_net_x1: std_logic;
  signal convert1_dout_net: std_logic;
  signal convert2_dout_net_x0: std_logic_vector(127 downto 0);
  signal convert_dout_net: std_logic_vector(31 downto 0);
  signal oob_out_x1: std_logic_vector(7 downto 0);
  signal pkt_out_x1: std_logic_vector(63 downto 0);
  signal slice3_y_net_x0: std_logic;
  signal valid_out_x2: std_logic;

begin
  ce_1_sg_x13 <= ce_1;
  clk_1_sg_x13 <= clk_1;
  pkt_out_x1 <= data_in;
  constant17_op_net_x1 <= link_down;
  oob_out_x1 <= oob_in;
  valid_out_x2 <= we_in;
  debug_out <= concatenate_y_net_x1;

  bus_create11_efa304fab7: entity work.bus_create11_entity_ed14098eb6
    port map (
      in1 => slice3_y_net_x0,
      in2 => convert2_dout_net_x0,
      in3 => valid_out_x2,
      bus_out => concatenate_y_net_x1
    );

  concat1: entity work.concat_0e2072f8e1
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      in0 => convert_dout_net,
      in1 => pkt_out_x1,
      y => concat1_y_net
    );

  concat2: entity work.concat_1ece14600f
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      in0(0) => convert1_dout_net,
      in1 => oob_out_x1,
      y => concat2_y_net
    );

  convert: entity work.xlconvert
    generic map (
      bool_conversion => 0,
      din_arith => 1,
      din_bin_pt => 0,
      din_width => 9,
      dout_arith => 1,
      dout_bin_pt => 0,
      dout_width => 32,
      latency => 0,
      overflow => xlWrap,
      quantization => xlTruncate
    )
    port map (
      ce => ce_1_sg_x13,
      clk => clk_1_sg_x13,
      clr => '0',
      din => concat2_y_net,
      en => "1",
      dout => convert_dout_net
    );

  convert1: entity work.xlconvert
    generic map (
      bool_conversion => 0,
      din_arith => 1,
      din_bin_pt => 0,
      din_width => 1,
      dout_arith => 1,
      dout_bin_pt => 0,
      dout_width => 1,
      latency => 0,
      overflow => xlWrap,
      quantization => xlTruncate
    )
    port map (
      ce => ce_1_sg_x13,
      clk => clk_1_sg_x13,
      clr => '0',
      din(0) => constant17_op_net_x1,
      en => "1",
      dout(0) => convert1_dout_net
    );

  convert2: entity work.xlconvert
    generic map (
      bool_conversion => 0,
      din_arith => 1,
      din_bin_pt => 0,
      din_width => 96,
      dout_arith => 1,
      dout_bin_pt => 0,
      dout_width => 128,
      latency => 0,
      overflow => xlWrap,
      quantization => xlTruncate
    )
    port map (
      ce => ce_1_sg_x13,
      clk => clk_1_sg_x13,
      clr => '0',
      din => concat1_y_net,
      en => "1",
      dout => convert2_dout_net_x0
    );

  slice3: entity work.xlslice
    generic map (
      new_lsb => 1,
      new_msb => 1,
      x_width => 8,
      y_width => 1
    )
    port map (
      x => oob_out_x1,
      y(0) => slice3_y_net_x0
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/Subsystem4/bus_expand1"

entity bus_expand1_entity_33d7318597 is
  port (
    bus_in: in std_logic_vector(73 downto 0); 
    lsb_out1: out std_logic; 
    msb_out3: out std_logic; 
    out2: out std_logic_vector(71 downto 0)
  );
end bus_expand1_entity_33d7318597;

architecture structural of bus_expand1_entity_33d7318597 is
  signal concatenate_y_net_x0: std_logic_vector(73 downto 0);
  signal reinterpret2_output_port_net_x0: std_logic_vector(71 downto 0);
  signal slice1_y_net_x1: std_logic;
  signal slice2_y_net: std_logic_vector(71 downto 0);
  signal slice3_y_net_x1: std_logic;

begin
  concatenate_y_net_x0 <= bus_in;
  lsb_out1 <= slice1_y_net_x1;
  msb_out3 <= slice3_y_net_x1;
  out2 <= reinterpret2_output_port_net_x0;

  reinterpret2: entity work.reinterpret_8b4279cdc5
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => slice2_y_net,
      output_port => reinterpret2_output_port_net_x0
    );

  slice1: entity work.xlslice
    generic map (
      new_lsb => 0,
      new_msb => 0,
      x_width => 74,
      y_width => 1
    )
    port map (
      x => concatenate_y_net_x0,
      y(0) => slice1_y_net_x1
    );

  slice2: entity work.xlslice
    generic map (
      new_lsb => 1,
      new_msb => 72,
      x_width => 74,
      y_width => 72
    )
    port map (
      x => concatenate_y_net_x0,
      y => slice2_y_net
    );

  slice3: entity work.xlslice
    generic map (
      new_lsb => 73,
      new_msb => 73,
      x_width => 74,
      y_width => 1
    )
    port map (
      x => concatenate_y_net_x0,
      y(0) => slice3_y_net_x1
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/Subsystem4/bus_expand2"

entity bus_expand2_entity_5a9cb2578d is
  port (
    bus_in: in std_logic_vector(129 downto 0); 
    lsb_out1: out std_logic; 
    msb_out3: out std_logic; 
    out2: out std_logic_vector(127 downto 0)
  );
end bus_expand2_entity_5a9cb2578d;

architecture structural of bus_expand2_entity_5a9cb2578d is
  signal mux2_y_net_x0: std_logic_vector(129 downto 0);
  signal reinterpret2_output_port_net_x0: std_logic_vector(127 downto 0);
  signal slice1_y_net_x0: std_logic;
  signal slice2_y_net: std_logic_vector(127 downto 0);
  signal slice3_y_net_x0: std_logic;

begin
  mux2_y_net_x0 <= bus_in;
  lsb_out1 <= slice1_y_net_x0;
  msb_out3 <= slice3_y_net_x0;
  out2 <= reinterpret2_output_port_net_x0;

  reinterpret2: entity work.reinterpret_28b9ecc6fc
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => slice2_y_net,
      output_port => reinterpret2_output_port_net_x0
    );

  slice1: entity work.xlslice
    generic map (
      new_lsb => 0,
      new_msb => 0,
      x_width => 130,
      y_width => 1
    )
    port map (
      x => mux2_y_net_x0,
      y(0) => slice1_y_net_x0
    );

  slice2: entity work.xlslice
    generic map (
      new_lsb => 1,
      new_msb => 128,
      x_width => 130,
      y_width => 128
    )
    port map (
      x => mux2_y_net_x0,
      y => slice2_y_net
    );

  slice3: entity work.xlslice
    generic map (
      new_lsb => 129,
      new_msb => 129,
      x_width => 130,
      y_width => 1
    )
    port map (
      x => mux2_y_net_x0,
      y(0) => slice3_y_net_x0
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/Subsystem4/bus_expand3"

entity bus_expand3_entity_a1c48a8f8e is
  port (
    bus_in: in std_logic_vector(17 downto 0); 
    lsb_out1: out std_logic; 
    msb_out3: out std_logic; 
    out2: out std_logic_vector(15 downto 0)
  );
end bus_expand3_entity_a1c48a8f8e;

architecture structural of bus_expand3_entity_a1c48a8f8e is
  signal concatenate_y_net_x0: std_logic_vector(17 downto 0);
  signal reinterpret2_output_port_net_x0: std_logic_vector(15 downto 0);
  signal slice1_y_net_x1: std_logic;
  signal slice2_y_net: std_logic_vector(15 downto 0);
  signal slice3_y_net_x1: std_logic;

begin
  concatenate_y_net_x0 <= bus_in;
  lsb_out1 <= slice1_y_net_x1;
  msb_out3 <= slice3_y_net_x1;
  out2 <= reinterpret2_output_port_net_x0;

  reinterpret2: entity work.reinterpret_ddc3ebdd7c
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => slice2_y_net,
      output_port => reinterpret2_output_port_net_x0
    );

  slice1: entity work.xlslice
    generic map (
      new_lsb => 0,
      new_msb => 0,
      x_width => 18,
      y_width => 1
    )
    port map (
      x => concatenate_y_net_x0,
      y(0) => slice1_y_net_x1
    );

  slice2: entity work.xlslice
    generic map (
      new_lsb => 1,
      new_msb => 16,
      x_width => 18,
      y_width => 16
    )
    port map (
      x => concatenate_y_net_x0,
      y => slice2_y_net
    );

  slice3: entity work.xlslice
    generic map (
      new_lsb => 17,
      new_msb => 17,
      x_width => 18,
      y_width => 1
    )
    port map (
      x => concatenate_y_net_x0,
      y(0) => slice3_y_net_x1
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/Subsystem4/bus_expand4"

entity bus_expand4_entity_a97abe62cc is
  port (
    bus_in: in std_logic_vector(65 downto 0); 
    lsb_out1: out std_logic; 
    msb_out3: out std_logic; 
    out2: out std_logic_vector(63 downto 0)
  );
end bus_expand4_entity_a97abe62cc;

architecture structural of bus_expand4_entity_a97abe62cc is
  signal concatenate_y_net_x0: std_logic_vector(65 downto 0);
  signal reinterpret2_output_port_net_x0: std_logic_vector(63 downto 0);
  signal slice1_y_net_x1: std_logic;
  signal slice2_y_net: std_logic_vector(63 downto 0);
  signal slice3_y_net_x1: std_logic;

begin
  concatenate_y_net_x0 <= bus_in;
  lsb_out1 <= slice1_y_net_x1;
  msb_out3 <= slice3_y_net_x1;
  out2 <= reinterpret2_output_port_net_x0;

  reinterpret2: entity work.reinterpret_9a13f6a2a0
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => slice2_y_net,
      output_port => reinterpret2_output_port_net_x0
    );

  slice1: entity work.xlslice
    generic map (
      new_lsb => 0,
      new_msb => 0,
      x_width => 66,
      y_width => 1
    )
    port map (
      x => concatenate_y_net_x0,
      y(0) => slice1_y_net_x1
    );

  slice2: entity work.xlslice
    generic map (
      new_lsb => 1,
      new_msb => 64,
      x_width => 66,
      y_width => 64
    )
    port map (
      x => concatenate_y_net_x0,
      y => slice2_y_net
    );

  slice3: entity work.xlslice
    generic map (
      new_lsb => 65,
      new_msb => 65,
      x_width => 66,
      y_width => 1
    )
    port map (
      x => concatenate_y_net_x0,
      y(0) => slice3_y_net_x1
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/Subsystem4"

entity subsystem4_entity_878b3c265c is
  port (
    buffer_72: in std_logic_vector(73 downto 0); 
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    coarse_72: in std_logic_vector(73 downto 0); 
    ct_64: in std_logic_vector(65 downto 0); 
    fine_128: in std_logic_vector(129 downto 0); 
    finepfb_72: in std_logic_vector(73 downto 0); 
    gbetx0_128: in std_logic_vector(129 downto 0); 
    quant_16: in std_logic_vector(17 downto 0); 
    select_x0: in std_logic_vector(2 downto 0); 
    xaui_128: in std_logic_vector(129 downto 0); 
    data: out std_logic_vector(127 downto 0); 
    sync: out std_logic; 
    valid: out std_logic
  );
end subsystem4_entity_878b3c265c;

architecture structural of subsystem4_entity_878b3c265c is
  signal arm14_y_net_x0: std_logic_vector(2 downto 0);
  signal ce_1_sg_x15: std_logic;
  signal clk_1_sg_x15: std_logic;
  signal concatenate_y_net_x0: std_logic_vector(129 downto 0);
  signal concatenate_y_net_x12: std_logic_vector(129 downto 0);
  signal concatenate_y_net_x13: std_logic_vector(129 downto 0);
  signal concatenate_y_net_x14: std_logic_vector(73 downto 0);
  signal concatenate_y_net_x15: std_logic_vector(73 downto 0);
  signal concatenate_y_net_x16: std_logic_vector(73 downto 0);
  signal concatenate_y_net_x17: std_logic_vector(129 downto 0);
  signal concatenate_y_net_x18: std_logic_vector(65 downto 0);
  signal concatenate_y_net_x19: std_logic_vector(17 downto 0);
  signal concatenate_y_net_x3: std_logic_vector(129 downto 0);
  signal concatenate_y_net_x4: std_logic_vector(129 downto 0);
  signal concatenate_y_net_x5: std_logic_vector(129 downto 0);
  signal concatenate_y_net_x6: std_logic_vector(129 downto 0);
  signal convert1_dout_net_x0: std_logic_vector(127 downto 0);
  signal convert2_dout_net_x0: std_logic_vector(127 downto 0);
  signal convert3_dout_net_x0: std_logic_vector(127 downto 0);
  signal convert4_dout_net_x0: std_logic_vector(127 downto 0);
  signal convert5_dout_net_x0: std_logic_vector(127 downto 0);
  signal mux2_y_net_x0: std_logic_vector(129 downto 0);
  signal reinterpret2_output_port_net_x0: std_logic_vector(71 downto 0);
  signal reinterpret2_output_port_net_x2: std_logic_vector(15 downto 0);
  signal reinterpret2_output_port_net_x3: std_logic_vector(63 downto 0);
  signal reinterpret2_output_port_net_x4: std_logic_vector(71 downto 0);
  signal reinterpret2_output_port_net_x5: std_logic_vector(71 downto 0);
  signal reinterpret2_output_port_net_x6: std_logic_vector(127 downto 0);
  signal slice1_y_net_x1: std_logic;
  signal slice1_y_net_x2: std_logic;
  signal slice1_y_net_x3: std_logic;
  signal slice1_y_net_x4: std_logic;
  signal slice1_y_net_x5: std_logic;
  signal slice1_y_net_x6: std_logic;
  signal slice3_y_net_x1: std_logic;
  signal slice3_y_net_x2: std_logic;
  signal slice3_y_net_x3: std_logic;
  signal slice3_y_net_x4: std_logic;
  signal slice3_y_net_x5: std_logic;
  signal slice3_y_net_x6: std_logic;

begin
  concatenate_y_net_x15 <= buffer_72;
  ce_1_sg_x15 <= ce_1;
  clk_1_sg_x15 <= clk_1;
  concatenate_y_net_x14 <= coarse_72;
  concatenate_y_net_x18 <= ct_64;
  concatenate_y_net_x17 <= fine_128;
  concatenate_y_net_x16 <= finepfb_72;
  concatenate_y_net_x12 <= gbetx0_128;
  concatenate_y_net_x19 <= quant_16;
  arm14_y_net_x0 <= select_x0;
  concatenate_y_net_x13 <= xaui_128;
  data <= reinterpret2_output_port_net_x6;
  sync <= slice3_y_net_x6;
  valid <= slice1_y_net_x6;

  bus_create1_f4b521561d: entity work.bus_create11_entity_ed14098eb6
    port map (
      in1 => slice3_y_net_x2,
      in2 => convert1_dout_net_x0,
      in3 => slice1_y_net_x2,
      bus_out => concatenate_y_net_x0
    );

  bus_create2_3e4973ce35: entity work.bus_create11_entity_ed14098eb6
    port map (
      in1 => slice3_y_net_x3,
      in2 => convert2_dout_net_x0,
      in3 => slice1_y_net_x3,
      bus_out => concatenate_y_net_x3
    );

  bus_create3_8efa364422: entity work.bus_create11_entity_ed14098eb6
    port map (
      in1 => slice3_y_net_x1,
      in2 => convert3_dout_net_x0,
      in3 => slice1_y_net_x1,
      bus_out => concatenate_y_net_x4
    );

  bus_create4_4c9de69d41: entity work.bus_create11_entity_ed14098eb6
    port map (
      in1 => slice3_y_net_x4,
      in2 => convert4_dout_net_x0,
      in3 => slice1_y_net_x4,
      bus_out => concatenate_y_net_x5
    );

  bus_create5_5d7bb20f26: entity work.bus_create11_entity_ed14098eb6
    port map (
      in1 => slice3_y_net_x5,
      in2 => convert5_dout_net_x0,
      in3 => slice1_y_net_x5,
      bus_out => concatenate_y_net_x6
    );

  bus_expand1_33d7318597: entity work.bus_expand1_entity_33d7318597
    port map (
      bus_in => concatenate_y_net_x14,
      lsb_out1 => slice1_y_net_x1,
      msb_out3 => slice3_y_net_x1,
      out2 => reinterpret2_output_port_net_x0
    );

  bus_expand2_5a9cb2578d: entity work.bus_expand2_entity_5a9cb2578d
    port map (
      bus_in => mux2_y_net_x0,
      lsb_out1 => slice1_y_net_x6,
      msb_out3 => slice3_y_net_x6,
      out2 => reinterpret2_output_port_net_x6
    );

  bus_expand3_a1c48a8f8e: entity work.bus_expand3_entity_a1c48a8f8e
    port map (
      bus_in => concatenate_y_net_x19,
      lsb_out1 => slice1_y_net_x2,
      msb_out3 => slice3_y_net_x2,
      out2 => reinterpret2_output_port_net_x2
    );

  bus_expand4_a97abe62cc: entity work.bus_expand4_entity_a97abe62cc
    port map (
      bus_in => concatenate_y_net_x18,
      lsb_out1 => slice1_y_net_x3,
      msb_out3 => slice3_y_net_x3,
      out2 => reinterpret2_output_port_net_x3
    );

  bus_expand5_43932c57c9: entity work.bus_expand1_entity_33d7318597
    port map (
      bus_in => concatenate_y_net_x15,
      lsb_out1 => slice1_y_net_x4,
      msb_out3 => slice3_y_net_x4,
      out2 => reinterpret2_output_port_net_x4
    );

  bus_expand6_e60898021a: entity work.bus_expand1_entity_33d7318597
    port map (
      bus_in => concatenate_y_net_x16,
      lsb_out1 => slice1_y_net_x5,
      msb_out3 => slice3_y_net_x5,
      out2 => reinterpret2_output_port_net_x5
    );

  convert1: entity work.xlconvert
    generic map (
      bool_conversion => 0,
      din_arith => 1,
      din_bin_pt => 0,
      din_width => 16,
      dout_arith => 1,
      dout_bin_pt => 0,
      dout_width => 128,
      latency => 0,
      overflow => xlWrap,
      quantization => xlTruncate
    )
    port map (
      ce => ce_1_sg_x15,
      clk => clk_1_sg_x15,
      clr => '0',
      din => reinterpret2_output_port_net_x2,
      en => "1",
      dout => convert1_dout_net_x0
    );

  convert2: entity work.xlconvert
    generic map (
      bool_conversion => 0,
      din_arith => 1,
      din_bin_pt => 0,
      din_width => 64,
      dout_arith => 1,
      dout_bin_pt => 0,
      dout_width => 128,
      latency => 0,
      overflow => xlWrap,
      quantization => xlTruncate
    )
    port map (
      ce => ce_1_sg_x15,
      clk => clk_1_sg_x15,
      clr => '0',
      din => reinterpret2_output_port_net_x3,
      en => "1",
      dout => convert2_dout_net_x0
    );

  convert3: entity work.xlconvert
    generic map (
      bool_conversion => 0,
      din_arith => 1,
      din_bin_pt => 0,
      din_width => 72,
      dout_arith => 1,
      dout_bin_pt => 0,
      dout_width => 128,
      latency => 0,
      overflow => xlWrap,
      quantization => xlTruncate
    )
    port map (
      ce => ce_1_sg_x15,
      clk => clk_1_sg_x15,
      clr => '0',
      din => reinterpret2_output_port_net_x0,
      en => "1",
      dout => convert3_dout_net_x0
    );

  convert4: entity work.xlconvert
    generic map (
      bool_conversion => 0,
      din_arith => 1,
      din_bin_pt => 0,
      din_width => 72,
      dout_arith => 1,
      dout_bin_pt => 0,
      dout_width => 128,
      latency => 0,
      overflow => xlWrap,
      quantization => xlTruncate
    )
    port map (
      ce => ce_1_sg_x15,
      clk => clk_1_sg_x15,
      clr => '0',
      din => reinterpret2_output_port_net_x4,
      en => "1",
      dout => convert4_dout_net_x0
    );

  convert5: entity work.xlconvert
    generic map (
      bool_conversion => 0,
      din_arith => 1,
      din_bin_pt => 0,
      din_width => 72,
      dout_arith => 1,
      dout_bin_pt => 0,
      dout_width => 128,
      latency => 0,
      overflow => xlWrap,
      quantization => xlTruncate
    )
    port map (
      ce => ce_1_sg_x15,
      clk => clk_1_sg_x15,
      clr => '0',
      din => reinterpret2_output_port_net_x5,
      en => "1",
      dout => convert5_dout_net_x0
    );

  mux2: entity work.mux_c42b9c1ff1
    port map (
      ce => ce_1_sg_x15,
      clk => clk_1_sg_x15,
      clr => '0',
      d0 => concatenate_y_net_x4,
      d1 => concatenate_y_net_x17,
      d2 => concatenate_y_net_x0,
      d3 => concatenate_y_net_x3,
      d4 => concatenate_y_net_x13,
      d5 => concatenate_y_net_x12,
      d6 => concatenate_y_net_x5,
      d7 => concatenate_y_net_x6,
      sel => arm14_y_net_x0,
      y => mux2_y_net_x0
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/adc_snap0/add_gen/edge_detect"

entity edge_detect_entity_773f207806 is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    in_x0: in std_logic; 
    out_x0: out std_logic
  );
end edge_detect_entity_773f207806;

architecture structural of edge_detect_entity_773f207806 is
  signal ce_1_sg_x16: std_logic;
  signal clk_1_sg_x16: std_logic;
  signal delay_q_net: std_logic;
  signal edge_op_y_net_x0: std_logic;
  signal inverter_op_net: std_logic;
  signal slice3_y_net_x0: std_logic;

begin
  ce_1_sg_x16 <= ce_1;
  clk_1_sg_x16 <= clk_1;
  slice3_y_net_x0 <= in_x0;
  out_x0 <= edge_op_y_net_x0;

  delay: entity work.xldelay
    generic map (
      latency => 1,
      reg_retiming => 0,
      reset => 0,
      width => 1
    )
    port map (
      ce => ce_1_sg_x16,
      clk => clk_1_sg_x16,
      d(0) => slice3_y_net_x0,
      en => '1',
      rst => '1',
      q(0) => delay_q_net
    );

  edge_op: entity work.logical_f6397bdee1
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0(0) => inverter_op_net,
      d1(0) => delay_q_net,
      y(0) => edge_op_y_net_x0
    );

  inverter: entity work.inverter_e5b38cca3b
    port map (
      ce => ce_1_sg_x16,
      clk => clk_1_sg_x16,
      clr => '0',
      ip(0) => slice3_y_net_x0,
      op(0) => inverter_op_net
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/adc_snap0/add_gen"

entity add_gen_entity_dd9e933c0e is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    cont: in std_logic; 
    go: in std_logic; 
    init: in std_logic; 
    vin: in std_logic_vector(31 downto 0); 
    we: in std_logic; 
    add: out std_logic_vector(9 downto 0); 
    en_cnt: out std_logic_vector(31 downto 0); 
    status: out std_logic_vector(31 downto 0); 
    vout: out std_logic_vector(31 downto 0); 
    we_o: out std_logic
  );
end add_gen_entity_dd9e933c0e;

architecture structural of add_gen_entity_dd9e933c0e is
  signal add_gen_op_net: std_logic_vector(31 downto 0);
  signal ce_1_sg_x17: std_logic;
  signal clk_1_sg_x17: std_logic;
  signal concat_y_net_x0: std_logic_vector(31 downto 0);
  signal convert_dout_net: std_logic_vector(18 downto 0);
  signal delay1_q_net: std_logic_vector(11 downto 0);
  signal delay1_q_net_x1: std_logic;
  signal delay2_q_net_x0: std_logic_vector(31 downto 0);
  signal delay3_q_net_x0: std_logic_vector(31 downto 0);
  signal delay4_q_net_x0: std_logic;
  signal delay_q_net: std_logic;
  signal delay_q_net_x1: std_logic;
  signal edge_op_y_net_x0: std_logic;
  signal inverter1_op_net: std_logic;
  signal inverter_op_net: std_logic;
  signal logical2_y_net: std_logic;
  signal logical4_y_net: std_logic;
  signal logical4_y_net_x1: std_logic;
  signal logical6_y_net_x0: std_logic;
  signal register3_q_net: std_logic;
  signal register4_q_net_x0: std_logic_vector(31 downto 0);
  signal register5_q_net: std_logic;
  signal shift_op_net: std_logic_vector(18 downto 0);
  signal slice1_y_net: std_logic_vector(11 downto 0);
  signal slice2_y_net_x0: std_logic_vector(9 downto 0);
  signal slice3_y_net_x0: std_logic;

begin
  ce_1_sg_x17 <= ce_1;
  clk_1_sg_x17 <= clk_1;
  logical4_y_net_x1 <= cont;
  delay_q_net_x1 <= go;
  delay4_q_net_x0 <= init;
  delay3_q_net_x0 <= vin;
  delay1_q_net_x1 <= we;
  add <= slice2_y_net_x0;
  en_cnt <= delay2_q_net_x0;
  status <= concat_y_net_x0;
  vout <= register4_q_net_x0;
  we_o <= logical6_y_net_x0;

  add_gen: entity work.xlcounter_free_c09f12_01
    generic map (
      core_name0 => "cntr_11_0_047d617e0a3da9e0",
      op_arith => xlUnsigned,
      op_width => 32
    )
    port map (
      ce => ce_1_sg_x17,
      clk => clk_1_sg_x17,
      clr => '0',
      en(0) => logical6_y_net_x0,
      rst(0) => delay4_q_net_x0,
      op => add_gen_op_net
    );

  concat: entity work.concat_1d665a7331
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      in0 => shift_op_net,
      in1(0) => inverter_op_net,
      in2 => delay1_q_net,
      y => concat_y_net_x0
    );

  convert: entity work.xlconvert
    generic map (
      bool_conversion => 0,
      din_arith => 1,
      din_bin_pt => 0,
      din_width => 1,
      dout_arith => 1,
      dout_bin_pt => 0,
      dout_width => 19,
      latency => 0,
      overflow => xlWrap,
      quantization => xlTruncate
    )
    port map (
      ce => ce_1_sg_x17,
      clk => clk_1_sg_x17,
      clr => '0',
      din(0) => register5_q_net,
      en => "1",
      dout => convert_dout_net
    );

  delay: entity work.xldelay
    generic map (
      latency => 1,
      reg_retiming => 0,
      reset => 0,
      width => 1
    )
    port map (
      ce => ce_1_sg_x17,
      clk => clk_1_sg_x17,
      d(0) => delay4_q_net_x0,
      en => '1',
      rst => '1',
      q(0) => delay_q_net
    );

  delay1: entity work.xldelay
    generic map (
      latency => 1,
      reg_retiming => 0,
      reset => 0,
      width => 12
    )
    port map (
      ce => ce_1_sg_x17,
      clk => clk_1_sg_x17,
      d => slice1_y_net,
      en => '1',
      rst => '1',
      q => delay1_q_net
    );

  delay2: entity work.xldelay
    generic map (
      latency => 1,
      reg_retiming => 0,
      reset => 0,
      width => 32
    )
    port map (
      ce => ce_1_sg_x17,
      clk => clk_1_sg_x17,
      d => add_gen_op_net,
      en => '1',
      rst => '1',
      q => delay2_q_net_x0
    );

  edge_detect_773f207806: entity work.edge_detect_entity_773f207806
    port map (
      ce_1 => ce_1_sg_x17,
      clk_1 => clk_1_sg_x17,
      in_x0 => slice3_y_net_x0,
      out_x0 => edge_op_y_net_x0
    );

  inverter: entity work.inverter_e5b38cca3b
    port map (
      ce => ce_1_sg_x17,
      clk => clk_1_sg_x17,
      clr => '0',
      ip(0) => register5_q_net,
      op(0) => inverter_op_net
    );

  inverter1: entity work.inverter_e5b38cca3b
    port map (
      ce => ce_1_sg_x17,
      clk => clk_1_sg_x17,
      clr => '0',
      ip(0) => edge_op_y_net_x0,
      op(0) => inverter1_op_net
    );

  logical2: entity work.logical_80f90b97d0
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0(0) => logical6_y_net_x0,
      d1(0) => register3_q_net,
      y(0) => logical2_y_net
    );

  logical4: entity work.logical_aacf6e1b0e
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0(0) => logical4_y_net_x1,
      d1(0) => inverter1_op_net,
      y(0) => logical4_y_net
    );

  logical6: entity work.logical_3640e86e6c
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0(0) => delay1_q_net_x1,
      d1(0) => delay_q_net_x1,
      d2(0) => register5_q_net,
      d3(0) => logical4_y_net,
      y(0) => logical6_y_net_x0
    );

  register3: entity work.xlregister
    generic map (
      d_width => 1,
      init_value => b"0"
    )
    port map (
      ce => ce_1_sg_x17,
      clk => clk_1_sg_x17,
      d(0) => delay4_q_net_x0,
      en(0) => delay4_q_net_x0,
      rst(0) => logical6_y_net_x0,
      q(0) => register3_q_net
    );

  register4: entity work.xlregister
    generic map (
      d_width => 32,
      init_value => b"00000000000000000000000000000000"
    )
    port map (
      ce => ce_1_sg_x17,
      clk => clk_1_sg_x17,
      d => delay3_q_net_x0,
      en(0) => logical2_y_net,
      rst => "0",
      q => register4_q_net_x0
    );

  register5: entity work.xlregister
    generic map (
      d_width => 1,
      init_value => b"1"
    )
    port map (
      ce => ce_1_sg_x17,
      clk => clk_1_sg_x17,
      d(0) => logical4_y_net_x1,
      en(0) => edge_op_y_net_x0,
      rst(0) => delay_q_net,
      q(0) => register5_q_net
    );

  shift: entity work.shift_892c2104f7
    port map (
      ce => ce_1_sg_x17,
      clk => clk_1_sg_x17,
      clr => '0',
      ip => convert_dout_net,
      op => shift_op_net
    );

  slice1: entity work.xlslice
    generic map (
      new_lsb => 0,
      new_msb => 11,
      x_width => 32,
      y_width => 12
    )
    port map (
      x => add_gen_op_net,
      y => slice1_y_net
    );

  slice2: entity work.xlslice
    generic map (
      new_lsb => 2,
      new_msb => 11,
      x_width => 32,
      y_width => 10
    )
    port map (
      x => add_gen_op_net,
      y => slice2_y_net_x0
    );

  slice3: entity work.xlslice
    generic map (
      new_lsb => 12,
      new_msb => 12,
      x_width => 32,
      y_width => 1
    )
    port map (
      x => add_gen_op_net,
      y(0) => slice3_y_net_x0
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/adc_snap0/basic_ctrl/dram_munge"

entity dram_munge_entity_d55c467a7c is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    din: in std_logic_vector(31 downto 0); 
    init: in std_logic; 
    vin: in std_logic_vector(31 downto 0); 
    we: in std_logic; 
    dout: out std_logic_vector(31 downto 0); 
    vout: out std_logic_vector(31 downto 0); 
    we_o: out std_logic
  );
end dram_munge_entity_d55c467a7c;

architecture structural of dram_munge_entity_d55c467a7c is
  signal cast_dout_net_x0: std_logic_vector(31 downto 0);
  signal ce_1_sg_x18: std_logic;
  signal clk_1_sg_x18: std_logic;
  signal con0_op_net: std_logic_vector(1 downto 0);
  signal con1_op_net: std_logic_vector(1 downto 0);
  signal con2_op_net: std_logic_vector(1 downto 0);
  signal con3_op_net: std_logic_vector(1 downto 0);
  signal concat1_y_net: std_logic_vector(79 downto 0);
  signal concat_y_net: std_logic_vector(79 downto 0);
  signal constant_op_net: std_logic_vector(7 downto 0);
  signal data_choice_y_net_x0: std_logic_vector(31 downto 0);
  signal delay1_q_net: std_logic;
  signal delay_q_net: std_logic;
  signal dout_count_op_net: std_logic;
  signal dram_op_net: std_logic;
  signal edge_op_y_net_x0: std_logic;
  signal input_count_op_net: std_logic_vector(1 downto 0);
  signal logical1_y_net: std_logic;
  signal logical2_y_net: std_logic;
  signal logical_y_net: std_logic;
  signal mux1_y_net_x0: std_logic_vector(79 downto 0);
  signal mux1_y_net_x1: std_logic;
  signal register1_q_net: std_logic_vector(31 downto 0);
  signal register2_q_net: std_logic_vector(31 downto 0);
  signal register3_q_net: std_logic_vector(31 downto 0);
  signal register4_q_net: std_logic;
  signal register5_q_net: std_logic_vector(31 downto 0);
  signal register_q_net: std_logic_vector(31 downto 0);
  signal reinterpret1_output_port_net_x0: std_logic_vector(31 downto 0);
  signal relational1_op_net: std_logic;
  signal relational2_op_net: std_logic;
  signal relational3_op_net: std_logic;
  signal relational_op_net: std_logic;
  signal vout_choice_y_net_x0: std_logic_vector(31 downto 0);
  signal we_choice_y_net_x0: std_logic;

begin
  ce_1_sg_x18 <= ce_1;
  clk_1_sg_x18 <= clk_1;
  cast_dout_net_x0 <= din;
  edge_op_y_net_x0 <= init;
  reinterpret1_output_port_net_x0 <= vin;
  mux1_y_net_x1 <= we;
  dout <= data_choice_y_net_x0;
  vout <= vout_choice_y_net_x0;
  we_o <= we_choice_y_net_x0;

  con0: entity work.constant_cda50df78a
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op => con0_op_net
    );

  con1: entity work.constant_a7e2bb9e12
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op => con1_op_net
    );

  con2: entity work.constant_e8ddc079e9
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op => con2_op_net
    );

  con3: entity work.constant_3a9a3daeb9
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op => con3_op_net
    );

  concat: entity work.concat_762608f33d
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      in0 => constant_op_net,
      in1 => register_q_net,
      in2 => constant_op_net,
      in3 => register1_q_net,
      y => concat_y_net
    );

  concat1: entity work.concat_762608f33d
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      in0 => constant_op_net,
      in1 => register2_q_net,
      in2 => constant_op_net,
      in3 => register3_q_net,
      y => concat1_y_net
    );

  constant_x0: entity work.constant_91ef1678ca
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op => constant_op_net
    );

  data_choice: entity work.mux_b4a3823c60
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0 => cast_dout_net_x0,
      d1 => mux1_y_net_x0,
      sel(0) => dram_op_net,
      y => data_choice_y_net_x0
    );

  delay: entity work.xldelay
    generic map (
      latency => 1,
      reg_retiming => 0,
      reset => 0,
      width => 1
    )
    port map (
      ce => ce_1_sg_x18,
      clk => clk_1_sg_x18,
      d(0) => logical_y_net,
      en => '1',
      rst => '1',
      q(0) => delay_q_net
    );

  delay1: entity work.xldelay
    generic map (
      latency => 1,
      reg_retiming => 0,
      reset => 0,
      width => 1
    )
    port map (
      ce => ce_1_sg_x18,
      clk => clk_1_sg_x18,
      d(0) => logical1_y_net,
      en => '1',
      rst => '1',
      q(0) => delay1_q_net
    );

  dout_count: entity work.counter_41314d726b
    port map (
      ce => ce_1_sg_x18,
      clk => clk_1_sg_x18,
      clr => '0',
      en(0) => logical1_y_net,
      rst(0) => edge_op_y_net_x0,
      op(0) => dout_count_op_net
    );

  dram: entity work.constant_963ed6358a
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op(0) => dram_op_net
    );

  input_count: entity work.xlcounter_free_c09f12_01
    generic map (
      core_name0 => "cntr_11_0_263175d139d7ac6d",
      op_arith => xlUnsigned,
      op_width => 2
    )
    port map (
      ce => ce_1_sg_x18,
      clk => clk_1_sg_x18,
      clr => '0',
      en(0) => mux1_y_net_x1,
      rst(0) => edge_op_y_net_x0,
      op => input_count_op_net
    );

  logical: entity work.logical_799f62af22
    port map (
      ce => ce_1_sg_x18,
      clk => clk_1_sg_x18,
      clr => '0',
      d0(0) => relational3_op_net,
      d1(0) => mux1_y_net_x1,
      y(0) => logical_y_net
    );

  logical1: entity work.logical_aacf6e1b0e
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0(0) => logical_y_net,
      d1(0) => delay_q_net,
      y(0) => logical1_y_net
    );

  logical2: entity work.logical_80f90b97d0
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0(0) => register4_q_net,
      d1(0) => mux1_y_net_x1,
      y(0) => logical2_y_net
    );

  mux1: entity work.mux_a575c74b27
    port map (
      ce => ce_1_sg_x18,
      clk => clk_1_sg_x18,
      clr => '0',
      d0 => concat_y_net,
      d1 => concat1_y_net,
      sel(0) => dout_count_op_net,
      y => mux1_y_net_x0
    );

  register1: entity work.xlregister
    generic map (
      d_width => 32,
      init_value => b"00000000000000000000000000000000"
    )
    port map (
      ce => ce_1_sg_x18,
      clk => clk_1_sg_x18,
      d => cast_dout_net_x0,
      en(0) => relational1_op_net,
      rst => "0",
      q => register1_q_net
    );

  register2: entity work.xlregister
    generic map (
      d_width => 32,
      init_value => b"00000000000000000000000000000000"
    )
    port map (
      ce => ce_1_sg_x18,
      clk => clk_1_sg_x18,
      d => cast_dout_net_x0,
      en(0) => relational2_op_net,
      rst => "0",
      q => register2_q_net
    );

  register3: entity work.xlregister
    generic map (
      d_width => 32,
      init_value => b"00000000000000000000000000000000"
    )
    port map (
      ce => ce_1_sg_x18,
      clk => clk_1_sg_x18,
      d => cast_dout_net_x0,
      en(0) => relational3_op_net,
      rst => "0",
      q => register3_q_net
    );

  register4: entity work.xlregister
    generic map (
      d_width => 1,
      init_value => b"0"
    )
    port map (
      ce => ce_1_sg_x18,
      clk => clk_1_sg_x18,
      d(0) => edge_op_y_net_x0,
      en(0) => edge_op_y_net_x0,
      rst(0) => mux1_y_net_x1,
      q(0) => register4_q_net
    );

  register5: entity work.xlregister
    generic map (
      d_width => 32,
      init_value => b"00000000000000000000000000000000"
    )
    port map (
      ce => ce_1_sg_x18,
      clk => clk_1_sg_x18,
      d => reinterpret1_output_port_net_x0,
      en(0) => logical2_y_net,
      rst => "0",
      q => register5_q_net
    );

  register_x0: entity work.xlregister
    generic map (
      d_width => 32,
      init_value => b"00000000000000000000000000000000"
    )
    port map (
      ce => ce_1_sg_x18,
      clk => clk_1_sg_x18,
      d => cast_dout_net_x0,
      en(0) => relational_op_net,
      rst => "0",
      q => register_q_net
    );

  relational: entity work.relational_5f1eb17108
    port map (
      a => input_count_op_net,
      b => con0_op_net,
      ce => '0',
      clk => '0',
      clr => '0',
      op(0) => relational_op_net
    );

  relational1: entity work.relational_5f1eb17108
    port map (
      a => input_count_op_net,
      b => con1_op_net,
      ce => '0',
      clk => '0',
      clr => '0',
      op(0) => relational1_op_net
    );

  relational2: entity work.relational_5f1eb17108
    port map (
      a => input_count_op_net,
      b => con2_op_net,
      ce => '0',
      clk => '0',
      clr => '0',
      op(0) => relational2_op_net
    );

  relational3: entity work.relational_5f1eb17108
    port map (
      a => input_count_op_net,
      b => con3_op_net,
      ce => '0',
      clk => '0',
      clr => '0',
      op(0) => relational3_op_net
    );

  vout_choice: entity work.mux_286b77e019
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0 => reinterpret1_output_port_net_x0,
      d1 => register5_q_net,
      sel(0) => dram_op_net,
      y => vout_choice_y_net_x0
    );

  we_choice: entity work.mux_d99e59b6d4
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0(0) => mux1_y_net_x1,
      d1(0) => delay1_q_net,
      sel(0) => dram_op_net,
      y(0) => we_choice_y_net_x0
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/adc_snap0/basic_ctrl/edge_detect"

entity edge_detect_entity_cb656284f4 is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    in_x0: in std_logic; 
    out_x0: out std_logic
  );
end edge_detect_entity_cb656284f4;

architecture structural of edge_detect_entity_cb656284f4 is
  signal ce_1_sg_x19: std_logic;
  signal clk_1_sg_x19: std_logic;
  signal delay_q_net: std_logic;
  signal edge_op_y_net_x1: std_logic;
  signal enable_y_net_x0: std_logic;
  signal inverter_op_net: std_logic;

begin
  ce_1_sg_x19 <= ce_1;
  clk_1_sg_x19 <= clk_1;
  enable_y_net_x0 <= in_x0;
  out_x0 <= edge_op_y_net_x1;

  delay: entity work.xldelay
    generic map (
      latency => 1,
      reg_retiming => 0,
      reset => 0,
      width => 1
    )
    port map (
      ce => ce_1_sg_x19,
      clk => clk_1_sg_x19,
      d(0) => enable_y_net_x0,
      en => '1',
      rst => '1',
      q(0) => delay_q_net
    );

  edge_op: entity work.logical_dfe2dded7f
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0(0) => inverter_op_net,
      d1(0) => delay_q_net,
      y(0) => edge_op_y_net_x1
    );

  inverter: entity work.inverter_e5b38cca3b
    port map (
      ce => ce_1_sg_x19,
      clk => clk_1_sg_x19,
      clr => '0',
      ip(0) => enable_y_net_x0,
      op(0) => inverter_op_net
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/adc_snap0/basic_ctrl"

entity basic_ctrl_entity_6742ed5eb1 is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    ctrl: in std_logic_vector(31 downto 0); 
    din: in std_logic_vector(31 downto 0); 
    trig: in std_logic; 
    vin: in std_logic_vector(31 downto 0); 
    we: in std_logic; 
    dout: out std_logic_vector(31 downto 0); 
    go: out std_logic; 
    init: out std_logic; 
    vout: out std_logic_vector(31 downto 0); 
    we_o: out std_logic
  );
end basic_ctrl_entity_6742ed5eb1;

architecture structural of basic_ctrl_entity_6742ed5eb1 is
  signal c09f12_01_adc_snap0_ctrl_user_data_out_net_x0: std_logic_vector(31 downto 0);
  signal cast_dout_net_x1: std_logic_vector(31 downto 0);
  signal ce_1_sg_x20: std_logic;
  signal clk_1_sg_x20: std_logic;
  signal constant1_op_net: std_logic;
  signal constant23_op_net_x0: std_logic;
  signal constant2_op_net: std_logic;
  signal constant_op_net: std_logic;
  signal data_choice_y_net_x1: std_logic_vector(31 downto 0);
  signal edge_op_y_net_x2: std_logic;
  signal enable_y_net_x0: std_logic;
  signal inverter_op_net: std_logic;
  signal logical_y_net: std_logic;
  signal mux1_y_net_x1: std_logic;
  signal mux2_y_net: std_logic;
  signal register1_q_net: std_logic;
  signal register6_q_net_x0: std_logic;
  signal reinterpret1_output_port_net_x1: std_logic_vector(31 downto 0);
  signal slice2_y_net_x0: std_logic;
  signal trig_src_y_net: std_logic;
  signal valid_src_y_net: std_logic;
  signal vout_choice_y_net_x1: std_logic_vector(31 downto 0);
  signal we_choice_y_net_x1: std_logic;

begin
  ce_1_sg_x20 <= ce_1;
  clk_1_sg_x20 <= clk_1;
  c09f12_01_adc_snap0_ctrl_user_data_out_net_x0 <= ctrl;
  cast_dout_net_x1 <= din;
  slice2_y_net_x0 <= trig;
  reinterpret1_output_port_net_x1 <= vin;
  constant23_op_net_x0 <= we;
  dout <= data_choice_y_net_x1;
  go <= register6_q_net_x0;
  init <= edge_op_y_net_x2;
  vout <= vout_choice_y_net_x1;
  we_o <= we_choice_y_net_x1;

  constant1: entity work.constant_6293007044
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op(0) => constant1_op_net
    );

  constant2: entity work.constant_6293007044
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op(0) => constant2_op_net
    );

  constant_x0: entity work.constant_6293007044
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op(0) => constant_op_net
    );

  dram_munge_d55c467a7c: entity work.dram_munge_entity_d55c467a7c
    port map (
      ce_1 => ce_1_sg_x20,
      clk_1 => clk_1_sg_x20,
      din => cast_dout_net_x1,
      init => edge_op_y_net_x2,
      vin => reinterpret1_output_port_net_x1,
      we => mux1_y_net_x1,
      dout => data_choice_y_net_x1,
      vout => vout_choice_y_net_x1,
      we_o => we_choice_y_net_x1
    );

  edge_detect_cb656284f4: entity work.edge_detect_entity_cb656284f4
    port map (
      ce_1 => ce_1_sg_x20,
      clk_1 => clk_1_sg_x20,
      in_x0 => enable_y_net_x0,
      out_x0 => edge_op_y_net_x2
    );

  enable: entity work.xlslice
    generic map (
      new_lsb => 0,
      new_msb => 0,
      x_width => 32,
      y_width => 1
    )
    port map (
      x => c09f12_01_adc_snap0_ctrl_user_data_out_net_x0,
      y(0) => enable_y_net_x0
    );

  inverter: entity work.inverter_e5b38cca3b
    port map (
      ce => ce_1_sg_x20,
      clk => clk_1_sg_x20,
      clr => '0',
      ip(0) => edge_op_y_net_x2,
      op(0) => inverter_op_net
    );

  logical: entity work.logical_80f90b97d0
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0(0) => mux2_y_net,
      d1(0) => inverter_op_net,
      y(0) => logical_y_net
    );

  mux1: entity work.mux_d99e59b6d4
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0(0) => constant23_op_net_x0,
      d1(0) => constant2_op_net,
      sel(0) => valid_src_y_net,
      y(0) => mux1_y_net_x1
    );

  mux2: entity work.mux_d99e59b6d4
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0(0) => slice2_y_net_x0,
      d1(0) => constant1_op_net,
      sel(0) => trig_src_y_net,
      y(0) => mux2_y_net
    );

  register1: entity work.xlregister
    generic map (
      d_width => 1,
      init_value => b"0"
    )
    port map (
      ce => ce_1_sg_x20,
      clk => clk_1_sg_x20,
      d(0) => constant_op_net,
      en(0) => edge_op_y_net_x2,
      rst(0) => logical_y_net,
      q(0) => register1_q_net
    );

  register6: entity work.xlregister
    generic map (
      d_width => 1,
      init_value => b"0"
    )
    port map (
      ce => ce_1_sg_x20,
      clk => clk_1_sg_x20,
      d(0) => mux2_y_net,
      en(0) => register1_q_net,
      rst(0) => edge_op_y_net_x2,
      q(0) => register6_q_net_x0
    );

  trig_src: entity work.xlslice
    generic map (
      new_lsb => 1,
      new_msb => 1,
      x_width => 32,
      y_width => 1
    )
    port map (
      x => c09f12_01_adc_snap0_ctrl_user_data_out_net_x0,
      y(0) => trig_src_y_net
    );

  valid_src: entity work.xlslice
    generic map (
      new_lsb => 2,
      new_msb => 2,
      x_width => 32,
      y_width => 1
    )
    port map (
      x => c09f12_01_adc_snap0_ctrl_user_data_out_net_x0,
      y(0) => valid_src_y_net
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/adc_snap0/bram/calc_add"

entity calc_add_entity_3e925ff36b is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    in_x0: in std_logic_vector(9 downto 0); 
    out_x0: out std_logic_vector(9 downto 0)
  );
end calc_add_entity_3e925ff36b;

architecture structural of calc_add_entity_3e925ff36b is
  signal add_del_q_net_x0: std_logic_vector(9 downto 0);
  signal add_sub_s_net: std_logic;
  signal ce_1_sg_x21: std_logic;
  signal clk_1_sg_x21: std_logic;
  signal concat_y_net: std_logic_vector(9 downto 0);
  signal const_op_net: std_logic;
  signal convert_addr_dout_net: std_logic_vector(9 downto 0);
  signal lsw_y_net: std_logic;
  signal manipulate_op_net: std_logic;
  signal msw_y_net: std_logic_vector(8 downto 0);
  signal mux_y_net_x0: std_logic_vector(9 downto 0);

begin
  ce_1_sg_x21 <= ce_1;
  clk_1_sg_x21 <= clk_1;
  add_del_q_net_x0 <= in_x0;
  out_x0 <= mux_y_net_x0;

  add_sub: entity work.addsub_c13097e33e
    port map (
      a(0) => const_op_net,
      b(0) => lsw_y_net,
      ce => ce_1_sg_x21,
      clk => clk_1_sg_x21,
      clr => '0',
      s(0) => add_sub_s_net
    );

  concat: entity work.concat_1d98d96b58
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      in0 => msw_y_net,
      in1(0) => add_sub_s_net,
      y => concat_y_net
    );

  const: entity work.constant_963ed6358a
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op(0) => const_op_net
    );

  convert_addr: entity work.xlconvert
    generic map (
      bool_conversion => 0,
      din_arith => 1,
      din_bin_pt => 0,
      din_width => 10,
      dout_arith => 1,
      dout_bin_pt => 0,
      dout_width => 10,
      latency => 0,
      overflow => xlWrap,
      quantization => xlTruncate
    )
    port map (
      ce => ce_1_sg_x21,
      clk => clk_1_sg_x21,
      clr => '0',
      din => add_del_q_net_x0,
      en => "1",
      dout => convert_addr_dout_net
    );

  lsw: entity work.xlslice
    generic map (
      new_lsb => 0,
      new_msb => 0,
      x_width => 10,
      y_width => 1
    )
    port map (
      x => convert_addr_dout_net,
      y(0) => lsw_y_net
    );

  manipulate: entity work.constant_963ed6358a
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op(0) => manipulate_op_net
    );

  msw: entity work.xlslice
    generic map (
      new_lsb => 1,
      new_msb => 9,
      x_width => 10,
      y_width => 9
    )
    port map (
      x => convert_addr_dout_net,
      y => msw_y_net
    );

  mux: entity work.mux_4fe5face7f
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0 => convert_addr_dout_net,
      d1 => concat_y_net,
      sel(0) => manipulate_op_net,
      y => mux_y_net_x0
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/adc_snap0/bram"

entity bram_entity_6f024610ff is
  port (
    addr: in std_logic_vector(9 downto 0); 
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    data_in: in std_logic_vector(31 downto 0); 
    we: in std_logic; 
    convert_addr_x0: out std_logic_vector(9 downto 0); 
    convert_din1_x0: out std_logic_vector(31 downto 0); 
    convert_we_x0: out std_logic
  );
end bram_entity_6f024610ff;

architecture structural of bram_entity_6f024610ff is
  signal add_del_q_net_x1: std_logic_vector(9 downto 0);
  signal ce_1_sg_x22: std_logic;
  signal clk_1_sg_x22: std_logic;
  signal convert_addr_dout_net_x0: std_logic_vector(9 downto 0);
  signal convert_din1_dout_net_x0: std_logic_vector(31 downto 0);
  signal convert_din_dout_net: std_logic_vector(31 downto 0);
  signal convert_we_dout_net_x0: std_logic;
  signal dat_del_q_net_x0: std_logic_vector(31 downto 0);
  signal mux_y_net_x0: std_logic_vector(9 downto 0);
  signal we_del_q_net_x0: std_logic;

begin
  add_del_q_net_x1 <= addr;
  ce_1_sg_x22 <= ce_1;
  clk_1_sg_x22 <= clk_1;
  dat_del_q_net_x0 <= data_in;
  we_del_q_net_x0 <= we;
  convert_addr_x0 <= convert_addr_dout_net_x0;
  convert_din1_x0 <= convert_din1_dout_net_x0;
  convert_we_x0 <= convert_we_dout_net_x0;

  calc_add_3e925ff36b: entity work.calc_add_entity_3e925ff36b
    port map (
      ce_1 => ce_1_sg_x22,
      clk_1 => clk_1_sg_x22,
      in_x0 => add_del_q_net_x1,
      out_x0 => mux_y_net_x0
    );

  convert_addr: entity work.xlconvert
    generic map (
      bool_conversion => 0,
      din_arith => 1,
      din_bin_pt => 0,
      din_width => 10,
      dout_arith => 1,
      dout_bin_pt => 0,
      dout_width => 10,
      latency => 0,
      overflow => xlWrap,
      quantization => xlTruncate
    )
    port map (
      ce => ce_1_sg_x22,
      clk => clk_1_sg_x22,
      clr => '0',
      din => mux_y_net_x0,
      en => "1",
      dout => convert_addr_dout_net_x0
    );

  convert_din: entity work.xlconvert
    generic map (
      bool_conversion => 0,
      din_arith => 1,
      din_bin_pt => 0,
      din_width => 32,
      dout_arith => 1,
      dout_bin_pt => 0,
      dout_width => 32,
      latency => 0,
      overflow => xlWrap,
      quantization => xlTruncate
    )
    port map (
      ce => ce_1_sg_x22,
      clk => clk_1_sg_x22,
      clr => '0',
      din => dat_del_q_net_x0,
      en => "1",
      dout => convert_din_dout_net
    );

  convert_din1: entity work.xlconvert
    generic map (
      bool_conversion => 0,
      din_arith => 1,
      din_bin_pt => 0,
      din_width => 32,
      dout_arith => 1,
      dout_bin_pt => 0,
      dout_width => 32,
      latency => 0,
      overflow => xlWrap,
      quantization => xlTruncate
    )
    port map (
      ce => ce_1_sg_x22,
      clk => clk_1_sg_x22,
      clr => '0',
      din => convert_din_dout_net,
      en => "1",
      dout => convert_din1_dout_net_x0
    );

  convert_we: entity work.xlconvert
    generic map (
      bool_conversion => 0,
      din_arith => 1,
      din_bin_pt => 0,
      din_width => 1,
      dout_arith => 1,
      dout_bin_pt => 0,
      dout_width => 1,
      latency => 0,
      overflow => xlWrap,
      quantization => xlTruncate
    )
    port map (
      ce => ce_1_sg_x22,
      clk => clk_1_sg_x22,
      clr => '0',
      din(0) => we_del_q_net_x0,
      en => "1",
      dout(0) => convert_we_dout_net_x0
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/adc_snap0/delay"

entity delay_entity_61fe49f948 is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    delay: in std_logic_vector(31 downto 0); 
    din: in std_logic_vector(31 downto 0); 
    go: in std_logic; 
    init: in std_logic; 
    stopi: in std_logic; 
    vin: in std_logic_vector(31 downto 0); 
    we: in std_logic; 
    del_go: out std_logic; 
    del_init: out std_logic; 
    dout: out std_logic_vector(31 downto 0); 
    stop: out std_logic; 
    vout: out std_logic_vector(31 downto 0); 
    we_o: out std_logic
  );
end delay_entity_61fe49f948;

architecture structural of delay_entity_61fe49f948 is
  signal c09f12_01_adc_snap0_trig_offset_user_data_out_net_x0: std_logic_vector(31 downto 0);
  signal ce_1_sg_x23: std_logic;
  signal clk_1_sg_x23: std_logic;
  signal constant_op_net: std_logic;
  signal counter_op_net: std_logic_vector(31 downto 0);
  signal data_choice_y_net_x2: std_logic_vector(31 downto 0);
  signal delay10_q_net_x0: std_logic;
  signal delay16_q_net_x0: std_logic;
  signal delay1_q_net_x0: std_logic_vector(31 downto 0);
  signal delay2_q_net: std_logic;
  signal delay3_q_net_x0: std_logic;
  signal delay9_q_net_x0: std_logic_vector(31 downto 0);
  signal edge_op_y_net_x3: std_logic;
  signal logical1_y_net_x0: std_logic;
  signal logical5_y_net: std_logic;
  signal register6_q_net_x1: std_logic;
  signal register_q_net_x0: std_logic;
  signal relational_op_net: std_logic;
  signal vout_choice_y_net_x2: std_logic_vector(31 downto 0);
  signal we_choice_y_net_x2: std_logic;

begin
  ce_1_sg_x23 <= ce_1;
  clk_1_sg_x23 <= clk_1;
  c09f12_01_adc_snap0_trig_offset_user_data_out_net_x0 <= delay;
  data_choice_y_net_x2 <= din;
  register6_q_net_x1 <= go;
  edge_op_y_net_x3 <= init;
  logical1_y_net_x0 <= stopi;
  vout_choice_y_net_x2 <= vin;
  we_choice_y_net_x2 <= we;
  del_go <= register_q_net_x0;
  del_init <= delay3_q_net_x0;
  dout <= delay9_q_net_x0;
  stop <= delay10_q_net_x0;
  vout <= delay1_q_net_x0;
  we_o <= delay16_q_net_x0;

  constant_x0: entity work.constant_6293007044
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op(0) => constant_op_net
    );

  counter: entity work.xlcounter_free_c09f12_01
    generic map (
      core_name0 => "cntr_11_0_047d617e0a3da9e0",
      op_arith => xlUnsigned,
      op_width => 32
    )
    port map (
      ce => ce_1_sg_x23,
      clk => clk_1_sg_x23,
      clr => '0',
      en(0) => logical5_y_net,
      rst(0) => edge_op_y_net_x3,
      op => counter_op_net
    );

  delay1: entity work.delay_920dce5cac
    port map (
      ce => ce_1_sg_x23,
      clk => clk_1_sg_x23,
      clr => '0',
      d => vout_choice_y_net_x2,
      q => delay1_q_net_x0
    );

  delay10: entity work.delay_23d71a76f2
    port map (
      ce => ce_1_sg_x23,
      clk => clk_1_sg_x23,
      clr => '0',
      d(0) => logical1_y_net_x0,
      q(0) => delay10_q_net_x0
    );

  delay16: entity work.delay_23d71a76f2
    port map (
      ce => ce_1_sg_x23,
      clk => clk_1_sg_x23,
      clr => '0',
      d(0) => we_choice_y_net_x2,
      q(0) => delay16_q_net_x0
    );

  delay2: entity work.delay_e18fb31a3d
    port map (
      ce => ce_1_sg_x23,
      clk => clk_1_sg_x23,
      clr => '0',
      d(0) => edge_op_y_net_x3,
      q(0) => delay2_q_net
    );

  delay3: entity work.delay_9f02caa990
    port map (
      ce => ce_1_sg_x23,
      clk => clk_1_sg_x23,
      clr => '0',
      d(0) => delay2_q_net,
      q(0) => delay3_q_net_x0
    );

  delay9: entity work.delay_920dce5cac
    port map (
      ce => ce_1_sg_x23,
      clk => clk_1_sg_x23,
      clr => '0',
      d => data_choice_y_net_x2,
      q => delay9_q_net_x0
    );

  logical5: entity work.logical_80f90b97d0
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0(0) => register6_q_net_x1,
      d1(0) => we_choice_y_net_x2,
      y(0) => logical5_y_net
    );

  register_x0: entity work.xlregister
    generic map (
      d_width => 1,
      init_value => b"0"
    )
    port map (
      ce => ce_1_sg_x23,
      clk => clk_1_sg_x23,
      d(0) => constant_op_net,
      en(0) => relational_op_net,
      rst(0) => delay2_q_net,
      q(0) => register_q_net_x0
    );

  relational: entity work.relational_34fc311f5b
    port map (
      a => counter_op_net,
      b => c09f12_01_adc_snap0_trig_offset_user_data_out_net_x0,
      ce => ce_1_sg_x23,
      clk => clk_1_sg_x23,
      clr => '0',
      op(0) => relational_op_net
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/adc_snap0/status"

entity status_entity_7b6169195a is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    reg_out: in std_logic_vector(31 downto 0); 
    convert_x0: out std_logic_vector(31 downto 0)
  );
end status_entity_7b6169195a;

architecture structural of status_entity_7b6169195a is
  signal ce_1_sg_x24: std_logic;
  signal clk_1_sg_x24: std_logic;
  signal concat_y_net_x1: std_logic_vector(31 downto 0);
  signal convert_dout_net_x0: std_logic_vector(31 downto 0);

begin
  ce_1_sg_x24 <= ce_1;
  clk_1_sg_x24 <= clk_1;
  concat_y_net_x1 <= reg_out;
  convert_x0 <= convert_dout_net_x0;

  convert: entity work.xlconvert
    generic map (
      bool_conversion => 0,
      din_arith => 1,
      din_bin_pt => 0,
      din_width => 32,
      dout_arith => 1,
      dout_bin_pt => 0,
      dout_width => 32,
      latency => 0,
      overflow => xlWrap,
      quantization => xlTruncate
    )
    port map (
      ce => ce_1_sg_x24,
      clk => clk_1_sg_x24,
      clr => '0',
      din => concat_y_net_x1,
      en => "1",
      dout => convert_dout_net_x0
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/adc_snap0/stop_gen"

entity stop_gen_entity_cb472c065b is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    ctrl: in std_logic_vector(31 downto 0); 
    din: in std_logic_vector(31 downto 0); 
    goi: in std_logic; 
    init: in std_logic; 
    stop: in std_logic; 
    vin: in std_logic_vector(31 downto 0); 
    wei: in std_logic; 
    cont: out std_logic; 
    dout: out std_logic_vector(31 downto 0); 
    go: out std_logic; 
    inito: out std_logic; 
    vout: out std_logic_vector(31 downto 0); 
    weo: out std_logic
  );
end stop_gen_entity_cb472c065b;

architecture structural of stop_gen_entity_cb472c065b is
  signal c09f12_01_adc_snap0_ctrl_user_data_out_net_x1: std_logic_vector(31 downto 0);
  signal ce_1_sg_x25: std_logic;
  signal circ_cap_y_net: std_logic;
  signal clk_1_sg_x25: std_logic;
  signal constant_op_net: std_logic;
  signal delay10_q_net_x1: std_logic;
  signal delay16_q_net_x1: std_logic;
  signal delay1_q_net_x2: std_logic_vector(31 downto 0);
  signal delay1_q_net_x3: std_logic;
  signal delay2_q_net_x0: std_logic_vector(31 downto 0);
  signal delay3_q_net_x2: std_logic;
  signal delay3_q_net_x3: std_logic_vector(31 downto 0);
  signal delay4_q_net_x1: std_logic;
  signal delay9_q_net_x1: std_logic_vector(31 downto 0);
  signal delay_q_net_x2: std_logic;
  signal inverter4_op_net: std_logic;
  signal logical1_y_net: std_logic;
  signal logical4_y_net_x2: std_logic;
  signal register2_q_net: std_logic;
  signal register3_q_net: std_logic;
  signal register_q_net_x1: std_logic;

begin
  ce_1_sg_x25 <= ce_1;
  clk_1_sg_x25 <= clk_1;
  c09f12_01_adc_snap0_ctrl_user_data_out_net_x1 <= ctrl;
  delay9_q_net_x1 <= din;
  register_q_net_x1 <= goi;
  delay3_q_net_x2 <= init;
  delay10_q_net_x1 <= stop;
  delay1_q_net_x2 <= vin;
  delay16_q_net_x1 <= wei;
  cont <= logical4_y_net_x2;
  dout <= delay2_q_net_x0;
  go <= delay_q_net_x2;
  inito <= delay4_q_net_x1;
  vout <= delay3_q_net_x3;
  weo <= delay1_q_net_x3;

  circ_cap: entity work.xlslice
    generic map (
      new_lsb => 3,
      new_msb => 3,
      x_width => 32,
      y_width => 1
    )
    port map (
      x => c09f12_01_adc_snap0_ctrl_user_data_out_net_x1,
      y(0) => circ_cap_y_net
    );

  constant_x0: entity work.constant_6293007044
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op(0) => constant_op_net
    );

  delay: entity work.xldelay
    generic map (
      latency => 1,
      reg_retiming => 0,
      reset => 0,
      width => 1
    )
    port map (
      ce => ce_1_sg_x25,
      clk => clk_1_sg_x25,
      d(0) => register_q_net_x1,
      en => '1',
      rst => '1',
      q(0) => delay_q_net_x2
    );

  delay1: entity work.xldelay
    generic map (
      latency => 1,
      reg_retiming => 0,
      reset => 0,
      width => 1
    )
    port map (
      ce => ce_1_sg_x25,
      clk => clk_1_sg_x25,
      d(0) => delay16_q_net_x1,
      en => '1',
      rst => '1',
      q(0) => delay1_q_net_x3
    );

  delay2: entity work.xldelay
    generic map (
      latency => 1,
      reg_retiming => 0,
      reset => 0,
      width => 32
    )
    port map (
      ce => ce_1_sg_x25,
      clk => clk_1_sg_x25,
      d => delay9_q_net_x1,
      en => '1',
      rst => '1',
      q => delay2_q_net_x0
    );

  delay3: entity work.xldelay
    generic map (
      latency => 1,
      reg_retiming => 0,
      reset => 0,
      width => 32
    )
    port map (
      ce => ce_1_sg_x25,
      clk => clk_1_sg_x25,
      d => delay1_q_net_x2,
      en => '1',
      rst => '1',
      q => delay3_q_net_x3
    );

  delay4: entity work.xldelay
    generic map (
      latency => 1,
      reg_retiming => 0,
      reset => 0,
      width => 1
    )
    port map (
      ce => ce_1_sg_x25,
      clk => clk_1_sg_x25,
      d(0) => delay3_q_net_x2,
      en => '1',
      rst => '1',
      q(0) => delay4_q_net_x1
    );

  inverter4: entity work.inverter_e5b38cca3b
    port map (
      ce => ce_1_sg_x25,
      clk => clk_1_sg_x25,
      clr => '0',
      ip(0) => register3_q_net,
      op(0) => inverter4_op_net
    );

  logical1: entity work.logical_80f90b97d0
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0(0) => register_q_net_x1,
      d1(0) => delay10_q_net_x1,
      y(0) => logical1_y_net
    );

  logical4: entity work.logical_80f90b97d0
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0(0) => inverter4_op_net,
      d1(0) => register2_q_net,
      y(0) => logical4_y_net_x2
    );

  register2: entity work.xlregister
    generic map (
      d_width => 1,
      init_value => b"0"
    )
    port map (
      ce => ce_1_sg_x25,
      clk => clk_1_sg_x25,
      d(0) => circ_cap_y_net,
      en(0) => delay3_q_net_x2,
      rst => "0",
      q(0) => register2_q_net
    );

  register3: entity work.xlregister
    generic map (
      d_width => 1,
      init_value => b"0"
    )
    port map (
      ce => ce_1_sg_x25,
      clk => clk_1_sg_x25,
      d(0) => constant_op_net,
      en(0) => logical1_y_net,
      rst(0) => delay3_q_net_x2,
      q(0) => register3_q_net
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/adc_snap0"

entity adc_snap0_entity_e5d722f3d9 is
  port (
    c09f12_01_adc_snap0_ctrl_user_data_out: in std_logic_vector(31 downto 0); 
    c09f12_01_adc_snap0_trig_offset_user_data_out: in std_logic_vector(31 downto 0); 
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    din: in std_logic_vector(31 downto 0); 
    stop: in std_logic; 
    trig: in std_logic; 
    vin: in std_logic_vector(31 downto 0); 
    we: in std_logic; 
    bram: out std_logic_vector(9 downto 0); 
    bram_x0: out std_logic_vector(31 downto 0); 
    bram_x1: out std_logic; 
    status: out std_logic_vector(31 downto 0); 
    tr_en_cnt: out std_logic_vector(31 downto 0); 
    val: out std_logic_vector(31 downto 0)
  );
end adc_snap0_entity_e5d722f3d9;

architecture structural of adc_snap0_entity_e5d722f3d9 is
  signal add_del_q_net_x1: std_logic_vector(9 downto 0);
  signal c09f12_01_adc_snap0_ctrl_user_data_out_net_x2: std_logic_vector(31 downto 0);
  signal c09f12_01_adc_snap0_trig_offset_user_data_out_net_x1: std_logic_vector(31 downto 0);
  signal cast_dout_net_x1: std_logic_vector(31 downto 0);
  signal ce_1_sg_x28: std_logic;
  signal clk_1_sg_x28: std_logic;
  signal concat_y_net_x1: std_logic_vector(31 downto 0);
  signal constant23_op_net_x1: std_logic;
  signal convert_addr_dout_net_x1: std_logic_vector(9 downto 0);
  signal convert_din1_dout_net_x1: std_logic_vector(31 downto 0);
  signal convert_dout_net_x3: std_logic_vector(31 downto 0);
  signal convert_dout_net_x4: std_logic_vector(31 downto 0);
  signal convert_dout_net_x5: std_logic_vector(31 downto 0);
  signal convert_we_dout_net_x1: std_logic;
  signal dat_del_q_net_x0: std_logic_vector(31 downto 0);
  signal data_choice_y_net_x2: std_logic_vector(31 downto 0);
  signal delay10_q_net_x1: std_logic;
  signal delay16_q_net_x1: std_logic;
  signal delay1_q_net_x0: std_logic_vector(31 downto 0);
  signal delay1_q_net_x2: std_logic_vector(31 downto 0);
  signal delay1_q_net_x3: std_logic;
  signal delay2_q_net_x0: std_logic_vector(31 downto 0);
  signal delay2_q_net_x1: std_logic_vector(31 downto 0);
  signal delay3_q_net_x2: std_logic;
  signal delay3_q_net_x3: std_logic_vector(31 downto 0);
  signal delay4_q_net_x1: std_logic;
  signal delay9_q_net_x1: std_logic_vector(31 downto 0);
  signal delay_q_net_x2: std_logic;
  signal edge_op_y_net_x3: std_logic;
  signal logical1_y_net_x1: std_logic;
  signal logical4_y_net_x2: std_logic;
  signal logical6_y_net_x0: std_logic;
  signal register4_q_net_x1: std_logic_vector(31 downto 0);
  signal register6_q_net_x1: std_logic;
  signal register_q_net_x1: std_logic;
  signal reinterpret1_output_port_net_x2: std_logic_vector(31 downto 0);
  signal ri_output_port_net: std_logic_vector(31 downto 0);
  signal slice2_y_net_x0: std_logic_vector(9 downto 0);
  signal slice2_y_net_x2: std_logic;
  signal vout_choice_y_net_x2: std_logic_vector(31 downto 0);
  signal we_choice_y_net_x2: std_logic;
  signal we_del_q_net_x0: std_logic;

begin
  c09f12_01_adc_snap0_ctrl_user_data_out_net_x2 <= c09f12_01_adc_snap0_ctrl_user_data_out;
  c09f12_01_adc_snap0_trig_offset_user_data_out_net_x1 <= c09f12_01_adc_snap0_trig_offset_user_data_out;
  ce_1_sg_x28 <= ce_1;
  clk_1_sg_x28 <= clk_1;
  delay1_q_net_x0 <= din;
  logical1_y_net_x1 <= stop;
  slice2_y_net_x2 <= trig;
  reinterpret1_output_port_net_x2 <= vin;
  constant23_op_net_x1 <= we;
  bram <= convert_addr_dout_net_x1;
  bram_x0 <= convert_din1_dout_net_x1;
  bram_x1 <= convert_we_dout_net_x1;
  status <= convert_dout_net_x3;
  tr_en_cnt <= convert_dout_net_x4;
  val <= convert_dout_net_x5;

  add_del: entity work.xldelay
    generic map (
      latency => 1,
      reg_retiming => 0,
      reset => 0,
      width => 10
    )
    port map (
      ce => ce_1_sg_x28,
      clk => clk_1_sg_x28,
      d => slice2_y_net_x0,
      en => '1',
      rst => '1',
      q => add_del_q_net_x1
    );

  add_gen_dd9e933c0e: entity work.add_gen_entity_dd9e933c0e
    port map (
      ce_1 => ce_1_sg_x28,
      clk_1 => clk_1_sg_x28,
      cont => logical4_y_net_x2,
      go => delay_q_net_x2,
      init => delay4_q_net_x1,
      vin => delay3_q_net_x3,
      we => delay1_q_net_x3,
      add => slice2_y_net_x0,
      en_cnt => delay2_q_net_x1,
      status => concat_y_net_x1,
      vout => register4_q_net_x1,
      we_o => logical6_y_net_x0
    );

  basic_ctrl_6742ed5eb1: entity work.basic_ctrl_entity_6742ed5eb1
    port map (
      ce_1 => ce_1_sg_x28,
      clk_1 => clk_1_sg_x28,
      ctrl => c09f12_01_adc_snap0_ctrl_user_data_out_net_x2,
      din => cast_dout_net_x1,
      trig => slice2_y_net_x2,
      vin => reinterpret1_output_port_net_x2,
      we => constant23_op_net_x1,
      dout => data_choice_y_net_x2,
      go => register6_q_net_x1,
      init => edge_op_y_net_x3,
      vout => vout_choice_y_net_x2,
      we_o => we_choice_y_net_x2
    );

  bram_6f024610ff: entity work.bram_entity_6f024610ff
    port map (
      addr => add_del_q_net_x1,
      ce_1 => ce_1_sg_x28,
      clk_1 => clk_1_sg_x28,
      data_in => dat_del_q_net_x0,
      we => we_del_q_net_x0,
      convert_addr_x0 => convert_addr_dout_net_x1,
      convert_din1_x0 => convert_din1_dout_net_x1,
      convert_we_x0 => convert_we_dout_net_x1
    );

  cast: entity work.xlconvert
    generic map (
      bool_conversion => 0,
      din_arith => 1,
      din_bin_pt => 0,
      din_width => 32,
      dout_arith => 1,
      dout_bin_pt => 0,
      dout_width => 32,
      latency => 0,
      overflow => xlWrap,
      quantization => xlTruncate
    )
    port map (
      ce => ce_1_sg_x28,
      clk => clk_1_sg_x28,
      clr => '0',
      din => ri_output_port_net,
      en => "1",
      dout => cast_dout_net_x1
    );

  dat_del: entity work.xldelay
    generic map (
      latency => 1,
      reg_retiming => 0,
      reset => 0,
      width => 32
    )
    port map (
      ce => ce_1_sg_x28,
      clk => clk_1_sg_x28,
      d => delay2_q_net_x0,
      en => '1',
      rst => '1',
      q => dat_del_q_net_x0
    );

  delay_61fe49f948: entity work.delay_entity_61fe49f948
    port map (
      ce_1 => ce_1_sg_x28,
      clk_1 => clk_1_sg_x28,
      delay => c09f12_01_adc_snap0_trig_offset_user_data_out_net_x1,
      din => data_choice_y_net_x2,
      go => register6_q_net_x1,
      init => edge_op_y_net_x3,
      stopi => logical1_y_net_x1,
      vin => vout_choice_y_net_x2,
      we => we_choice_y_net_x2,
      del_go => register_q_net_x1,
      del_init => delay3_q_net_x2,
      dout => delay9_q_net_x1,
      stop => delay10_q_net_x1,
      vout => delay1_q_net_x2,
      we_o => delay16_q_net_x1
    );

  ri: entity work.reinterpret_c5d4d59b73
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => delay1_q_net_x0,
      output_port => ri_output_port_net
    );

  status_7b6169195a: entity work.status_entity_7b6169195a
    port map (
      ce_1 => ce_1_sg_x28,
      clk_1 => clk_1_sg_x28,
      reg_out => concat_y_net_x1,
      convert_x0 => convert_dout_net_x3
    );

  stop_gen_cb472c065b: entity work.stop_gen_entity_cb472c065b
    port map (
      ce_1 => ce_1_sg_x28,
      clk_1 => clk_1_sg_x28,
      ctrl => c09f12_01_adc_snap0_ctrl_user_data_out_net_x2,
      din => delay9_q_net_x1,
      goi => register_q_net_x1,
      init => delay3_q_net_x2,
      stop => delay10_q_net_x1,
      vin => delay1_q_net_x2,
      wei => delay16_q_net_x1,
      cont => logical4_y_net_x2,
      dout => delay2_q_net_x0,
      go => delay_q_net_x2,
      inito => delay4_q_net_x1,
      vout => delay3_q_net_x3,
      weo => delay1_q_net_x3
    );

  tr_en_cnt_45084595e6: entity work.status_entity_7b6169195a
    port map (
      ce_1 => ce_1_sg_x28,
      clk_1 => clk_1_sg_x28,
      reg_out => delay2_q_net_x1,
      convert_x0 => convert_dout_net_x4
    );

  val_26ca39bb83: entity work.status_entity_7b6169195a
    port map (
      ce_1 => ce_1_sg_x28,
      clk_1 => clk_1_sg_x28,
      reg_out => register4_q_net_x1,
      convert_x0 => convert_dout_net_x5
    );

  we_del: entity work.xldelay
    generic map (
      latency => 1,
      reg_retiming => 0,
      reset => 0,
      width => 1
    )
    port map (
      ce => ce_1_sg_x28,
      clk => clk_1_sg_x28,
      d(0) => logical6_y_net_x0,
      en => '1',
      rst => '1',
      q(0) => we_del_q_net_x0
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/adc_snap1"

entity adc_snap1_entity_3fff712eed is
  port (
    c09f12_01_adc_snap1_ctrl_user_data_out: in std_logic_vector(31 downto 0); 
    c09f12_01_adc_snap1_trig_offset_user_data_out: in std_logic_vector(31 downto 0); 
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    din: in std_logic_vector(31 downto 0); 
    stop: in std_logic; 
    trig: in std_logic; 
    vin: in std_logic_vector(31 downto 0); 
    we: in std_logic; 
    bram: out std_logic_vector(9 downto 0); 
    bram_x0: out std_logic_vector(31 downto 0); 
    bram_x1: out std_logic; 
    status: out std_logic_vector(31 downto 0); 
    tr_en_cnt: out std_logic_vector(31 downto 0); 
    val: out std_logic_vector(31 downto 0)
  );
end adc_snap1_entity_3fff712eed;

architecture structural of adc_snap1_entity_3fff712eed is
  signal add_del_q_net_x1: std_logic_vector(9 downto 0);
  signal c09f12_01_adc_snap1_ctrl_user_data_out_net_x2: std_logic_vector(31 downto 0);
  signal c09f12_01_adc_snap1_trig_offset_user_data_out_net_x1: std_logic_vector(31 downto 0);
  signal cast_dout_net_x1: std_logic_vector(31 downto 0);
  signal ce_1_sg_x41: std_logic;
  signal clk_1_sg_x41: std_logic;
  signal concat_y_net_x1: std_logic_vector(31 downto 0);
  signal constant15_op_net_x1: std_logic;
  signal convert_addr_dout_net_x1: std_logic_vector(9 downto 0);
  signal convert_din1_dout_net_x1: std_logic_vector(31 downto 0);
  signal convert_dout_net_x3: std_logic_vector(31 downto 0);
  signal convert_dout_net_x4: std_logic_vector(31 downto 0);
  signal convert_dout_net_x5: std_logic_vector(31 downto 0);
  signal convert_we_dout_net_x1: std_logic;
  signal dat_del_q_net_x0: std_logic_vector(31 downto 0);
  signal data_choice_y_net_x2: std_logic_vector(31 downto 0);
  signal delay10_q_net_x1: std_logic;
  signal delay16_q_net_x1: std_logic;
  signal delay1_q_net_x0: std_logic_vector(31 downto 0);
  signal delay1_q_net_x2: std_logic_vector(31 downto 0);
  signal delay1_q_net_x3: std_logic;
  signal delay2_q_net_x0: std_logic_vector(31 downto 0);
  signal delay2_q_net_x1: std_logic_vector(31 downto 0);
  signal delay3_q_net_x2: std_logic;
  signal delay3_q_net_x3: std_logic_vector(31 downto 0);
  signal delay4_q_net_x1: std_logic;
  signal delay9_q_net_x1: std_logic_vector(31 downto 0);
  signal delay_q_net_x2: std_logic;
  signal edge_op_y_net_x3: std_logic;
  signal logical1_y_net_x1: std_logic;
  signal logical4_y_net_x2: std_logic;
  signal logical6_y_net_x0: std_logic;
  signal register4_q_net_x1: std_logic_vector(31 downto 0);
  signal register6_q_net_x1: std_logic;
  signal register_q_net_x1: std_logic;
  signal reinterpret1_output_port_net_x5: std_logic_vector(31 downto 0);
  signal ri_output_port_net: std_logic_vector(31 downto 0);
  signal slice2_y_net_x0: std_logic_vector(9 downto 0);
  signal slice2_y_net_x4: std_logic;
  signal vout_choice_y_net_x2: std_logic_vector(31 downto 0);
  signal we_choice_y_net_x2: std_logic;
  signal we_del_q_net_x0: std_logic;

begin
  c09f12_01_adc_snap1_ctrl_user_data_out_net_x2 <= c09f12_01_adc_snap1_ctrl_user_data_out;
  c09f12_01_adc_snap1_trig_offset_user_data_out_net_x1 <= c09f12_01_adc_snap1_trig_offset_user_data_out;
  ce_1_sg_x41 <= ce_1;
  clk_1_sg_x41 <= clk_1;
  delay1_q_net_x0 <= din;
  logical1_y_net_x1 <= stop;
  slice2_y_net_x4 <= trig;
  reinterpret1_output_port_net_x5 <= vin;
  constant15_op_net_x1 <= we;
  bram <= convert_addr_dout_net_x1;
  bram_x0 <= convert_din1_dout_net_x1;
  bram_x1 <= convert_we_dout_net_x1;
  status <= convert_dout_net_x3;
  tr_en_cnt <= convert_dout_net_x4;
  val <= convert_dout_net_x5;

  add_del: entity work.xldelay
    generic map (
      latency => 1,
      reg_retiming => 0,
      reset => 0,
      width => 10
    )
    port map (
      ce => ce_1_sg_x41,
      clk => clk_1_sg_x41,
      d => slice2_y_net_x0,
      en => '1',
      rst => '1',
      q => add_del_q_net_x1
    );

  add_gen_cec6911516: entity work.add_gen_entity_dd9e933c0e
    port map (
      ce_1 => ce_1_sg_x41,
      clk_1 => clk_1_sg_x41,
      cont => logical4_y_net_x2,
      go => delay_q_net_x2,
      init => delay4_q_net_x1,
      vin => delay3_q_net_x3,
      we => delay1_q_net_x3,
      add => slice2_y_net_x0,
      en_cnt => delay2_q_net_x1,
      status => concat_y_net_x1,
      vout => register4_q_net_x1,
      we_o => logical6_y_net_x0
    );

  basic_ctrl_109868d05a: entity work.basic_ctrl_entity_6742ed5eb1
    port map (
      ce_1 => ce_1_sg_x41,
      clk_1 => clk_1_sg_x41,
      ctrl => c09f12_01_adc_snap1_ctrl_user_data_out_net_x2,
      din => cast_dout_net_x1,
      trig => slice2_y_net_x4,
      vin => reinterpret1_output_port_net_x5,
      we => constant15_op_net_x1,
      dout => data_choice_y_net_x2,
      go => register6_q_net_x1,
      init => edge_op_y_net_x3,
      vout => vout_choice_y_net_x2,
      we_o => we_choice_y_net_x2
    );

  bram_7b373dc0dd: entity work.bram_entity_6f024610ff
    port map (
      addr => add_del_q_net_x1,
      ce_1 => ce_1_sg_x41,
      clk_1 => clk_1_sg_x41,
      data_in => dat_del_q_net_x0,
      we => we_del_q_net_x0,
      convert_addr_x0 => convert_addr_dout_net_x1,
      convert_din1_x0 => convert_din1_dout_net_x1,
      convert_we_x0 => convert_we_dout_net_x1
    );

  cast: entity work.xlconvert
    generic map (
      bool_conversion => 0,
      din_arith => 1,
      din_bin_pt => 0,
      din_width => 32,
      dout_arith => 1,
      dout_bin_pt => 0,
      dout_width => 32,
      latency => 0,
      overflow => xlWrap,
      quantization => xlTruncate
    )
    port map (
      ce => ce_1_sg_x41,
      clk => clk_1_sg_x41,
      clr => '0',
      din => ri_output_port_net,
      en => "1",
      dout => cast_dout_net_x1
    );

  dat_del: entity work.xldelay
    generic map (
      latency => 1,
      reg_retiming => 0,
      reset => 0,
      width => 32
    )
    port map (
      ce => ce_1_sg_x41,
      clk => clk_1_sg_x41,
      d => delay2_q_net_x0,
      en => '1',
      rst => '1',
      q => dat_del_q_net_x0
    );

  delay_80f9baa744: entity work.delay_entity_61fe49f948
    port map (
      ce_1 => ce_1_sg_x41,
      clk_1 => clk_1_sg_x41,
      delay => c09f12_01_adc_snap1_trig_offset_user_data_out_net_x1,
      din => data_choice_y_net_x2,
      go => register6_q_net_x1,
      init => edge_op_y_net_x3,
      stopi => logical1_y_net_x1,
      vin => vout_choice_y_net_x2,
      we => we_choice_y_net_x2,
      del_go => register_q_net_x1,
      del_init => delay3_q_net_x2,
      dout => delay9_q_net_x1,
      stop => delay10_q_net_x1,
      vout => delay1_q_net_x2,
      we_o => delay16_q_net_x1
    );

  ri: entity work.reinterpret_c5d4d59b73
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => delay1_q_net_x0,
      output_port => ri_output_port_net
    );

  status_5eabf837e7: entity work.status_entity_7b6169195a
    port map (
      ce_1 => ce_1_sg_x41,
      clk_1 => clk_1_sg_x41,
      reg_out => concat_y_net_x1,
      convert_x0 => convert_dout_net_x3
    );

  stop_gen_cd7e6ae51a: entity work.stop_gen_entity_cb472c065b
    port map (
      ce_1 => ce_1_sg_x41,
      clk_1 => clk_1_sg_x41,
      ctrl => c09f12_01_adc_snap1_ctrl_user_data_out_net_x2,
      din => delay9_q_net_x1,
      goi => register_q_net_x1,
      init => delay3_q_net_x2,
      stop => delay10_q_net_x1,
      vin => delay1_q_net_x2,
      wei => delay16_q_net_x1,
      cont => logical4_y_net_x2,
      dout => delay2_q_net_x0,
      go => delay_q_net_x2,
      inito => delay4_q_net_x1,
      vout => delay3_q_net_x3,
      weo => delay1_q_net_x3
    );

  tr_en_cnt_5a7cf047ee: entity work.status_entity_7b6169195a
    port map (
      ce_1 => ce_1_sg_x41,
      clk_1 => clk_1_sg_x41,
      reg_out => delay2_q_net_x1,
      convert_x0 => convert_dout_net_x4
    );

  val_462f2ebf27: entity work.status_entity_7b6169195a
    port map (
      ce_1 => ce_1_sg_x41,
      clk_1 => clk_1_sg_x41,
      reg_out => register4_q_net_x1,
      convert_x0 => convert_dout_net_x5
    );

  we_del: entity work.xldelay
    generic map (
      latency => 1,
      reg_retiming => 0,
      reset => 0,
      width => 1
    )
    port map (
      ce => ce_1_sg_x41,
      clk => clk_1_sg_x41,
      d(0) => logical6_y_net_x0,
      en => '1',
      rst => '1',
      q(0) => we_del_q_net_x0
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/bus_create11"

entity bus_create11_entity_ca7f9dbf2e is
  port (
    in1: in std_logic_vector(31 downto 0); 
    in2: in std_logic_vector(31 downto 0); 
    bus_out: out std_logic_vector(63 downto 0)
  );
end bus_create11_entity_ca7f9dbf2e;

architecture structural of bus_create11_entity_ca7f9dbf2e is
  signal c09f12_01_eq0_data_out_net_x0: std_logic_vector(31 downto 0);
  signal c09f12_01_eq1_data_out_net_x0: std_logic_vector(31 downto 0);
  signal concatenate_y_net_x0: std_logic_vector(63 downto 0);
  signal reinterpret1_output_port_net: std_logic_vector(31 downto 0);
  signal reinterpret2_output_port_net: std_logic_vector(31 downto 0);

begin
  c09f12_01_eq0_data_out_net_x0 <= in1;
  c09f12_01_eq1_data_out_net_x0 <= in2;
  bus_out <= concatenate_y_net_x0;

  concatenate: entity work.concat_62c4475a80
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      in0 => reinterpret1_output_port_net,
      in1 => reinterpret2_output_port_net,
      y => concatenate_y_net_x0
    );

  reinterpret1: entity work.reinterpret_c5d4d59b73
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => c09f12_01_eq0_data_out_net_x0,
      output_port => reinterpret1_output_port_net
    );

  reinterpret2: entity work.reinterpret_c5d4d59b73
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => c09f12_01_eq1_data_out_net_x0,
      output_port => reinterpret2_output_port_net
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/bus_create2"

entity bus_create2_entity_26f43c2bb1 is
  port (
    in1: in std_logic_vector(7 downto 0); 
    in2: in std_logic_vector(7 downto 0); 
    in3: in std_logic_vector(7 downto 0); 
    in4: in std_logic_vector(7 downto 0); 
    bus_out: out std_logic_vector(31 downto 0)
  );
end bus_create2_entity_26f43c2bb1;

architecture structural of bus_create2_entity_26f43c2bb1 is
  signal concatenate_y_net_x0: std_logic_vector(31 downto 0);
  signal reinterpret1_0_output_port_net_x0: std_logic_vector(7 downto 0);
  signal reinterpret1_1_output_port_net_x0: std_logic_vector(7 downto 0);
  signal reinterpret1_2_output_port_net_x0: std_logic_vector(7 downto 0);
  signal reinterpret1_3_output_port_net_x0: std_logic_vector(7 downto 0);
  signal reinterpret1_output_port_net: std_logic_vector(7 downto 0);
  signal reinterpret2_output_port_net: std_logic_vector(7 downto 0);
  signal reinterpret3_output_port_net: std_logic_vector(7 downto 0);
  signal reinterpret4_output_port_net: std_logic_vector(7 downto 0);

begin
  reinterpret1_0_output_port_net_x0 <= in1;
  reinterpret1_1_output_port_net_x0 <= in2;
  reinterpret1_2_output_port_net_x0 <= in3;
  reinterpret1_3_output_port_net_x0 <= in4;
  bus_out <= concatenate_y_net_x0;

  concatenate: entity work.concat_a1e126f11c
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      in0 => reinterpret1_output_port_net,
      in1 => reinterpret2_output_port_net,
      in2 => reinterpret3_output_port_net,
      in3 => reinterpret4_output_port_net,
      y => concatenate_y_net_x0
    );

  reinterpret1: entity work.reinterpret_d51df7ac30
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => reinterpret1_0_output_port_net_x0,
      output_port => reinterpret1_output_port_net
    );

  reinterpret2: entity work.reinterpret_d51df7ac30
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => reinterpret1_1_output_port_net_x0,
      output_port => reinterpret2_output_port_net
    );

  reinterpret3: entity work.reinterpret_d51df7ac30
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => reinterpret1_2_output_port_net_x0,
      output_port => reinterpret3_output_port_net
    );

  reinterpret4: entity work.reinterpret_d51df7ac30
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => reinterpret1_3_output_port_net_x0,
      output_port => reinterpret4_output_port_net
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/bus_create7"

entity bus_create7_entity_57af54f9e5 is
  port (
    in1: in std_logic; 
    in2: in std_logic; 
    in3: in std_logic; 
    in4: in std_logic; 
    bus_out: out std_logic_vector(3 downto 0)
  );
end bus_create7_entity_57af54f9e5;

architecture structural of bus_create7_entity_57af54f9e5 is
  signal c09f12_01_katadc0_user_sync0_net_x0: std_logic;
  signal c09f12_01_katadc0_user_sync1_net_x0: std_logic;
  signal c09f12_01_katadc0_user_sync2_net_x0: std_logic;
  signal c09f12_01_katadc0_user_sync3_net_x0: std_logic;
  signal concatenate_y_net_x0: std_logic_vector(3 downto 0);
  signal reinterpret1_output_port_net: std_logic;
  signal reinterpret2_output_port_net: std_logic;
  signal reinterpret3_output_port_net: std_logic;
  signal reinterpret4_output_port_net: std_logic;

begin
  c09f12_01_katadc0_user_sync0_net_x0 <= in1;
  c09f12_01_katadc0_user_sync1_net_x0 <= in2;
  c09f12_01_katadc0_user_sync2_net_x0 <= in3;
  c09f12_01_katadc0_user_sync3_net_x0 <= in4;
  bus_out <= concatenate_y_net_x0;

  concatenate: entity work.concat_a0c7cd7a34
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      in0(0) => reinterpret1_output_port_net,
      in1(0) => reinterpret2_output_port_net,
      in2(0) => reinterpret3_output_port_net,
      in3(0) => reinterpret4_output_port_net,
      y => concatenate_y_net_x0
    );

  reinterpret1: entity work.reinterpret_112d91c147
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port(0) => c09f12_01_katadc0_user_sync0_net_x0,
      output_port(0) => reinterpret1_output_port_net
    );

  reinterpret2: entity work.reinterpret_112d91c147
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port(0) => c09f12_01_katadc0_user_sync1_net_x0,
      output_port(0) => reinterpret2_output_port_net
    );

  reinterpret3: entity work.reinterpret_112d91c147
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port(0) => c09f12_01_katadc0_user_sync2_net_x0,
      output_port(0) => reinterpret3_output_port_net
    );

  reinterpret4: entity work.reinterpret_112d91c147
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port(0) => c09f12_01_katadc0_user_sync3_net_x0,
      output_port(0) => reinterpret4_output_port_net
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/bus_expand"

entity bus_expand_entity_42329a104d is
  port (
    bus_in: in std_logic_vector(32 downto 0); 
    lsb_out1: out std_logic_vector(31 downto 0); 
    msb_out2: out std_logic
  );
end bus_expand_entity_42329a104d;

architecture structural of bus_expand_entity_42329a104d is
  signal delay2_q_net_x0: std_logic_vector(32 downto 0);
  signal reinterpret1_output_port_net_x6: std_logic_vector(31 downto 0);
  signal slice1_y_net: std_logic_vector(31 downto 0);
  signal slice2_y_net_x5: std_logic;

begin
  delay2_q_net_x0 <= bus_in;
  lsb_out1 <= reinterpret1_output_port_net_x6;
  msb_out2 <= slice2_y_net_x5;

  reinterpret1: entity work.reinterpret_c5d4d59b73
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => slice1_y_net,
      output_port => reinterpret1_output_port_net_x6
    );

  slice1: entity work.xlslice
    generic map (
      new_lsb => 0,
      new_msb => 31,
      x_width => 33,
      y_width => 32
    )
    port map (
      x => delay2_q_net_x0,
      y => slice1_y_net
    );

  slice2: entity work.xlslice
    generic map (
      new_lsb => 32,
      new_msb => 32,
      x_width => 33,
      y_width => 1
    )
    port map (
      x => delay2_q_net_x0,
      y(0) => slice2_y_net_x5
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/bus_expand6"

entity bus_expand6_entity_289d91e26d is
  port (
    bus_in: in std_logic_vector(64 downto 0); 
    lsb_out1: out std_logic_vector(31 downto 0); 
    msb_out3: out std_logic; 
    out2: out std_logic_vector(31 downto 0)
  );
end bus_expand6_entity_289d91e26d;

architecture structural of bus_expand6_entity_289d91e26d is
  signal delay2_q_net_x0: std_logic_vector(64 downto 0);
  signal reinterpret1_output_port_net_x0: std_logic_vector(31 downto 0);
  signal reinterpret2_output_port_net_x0: std_logic_vector(31 downto 0);
  signal slice1_y_net: std_logic_vector(31 downto 0);
  signal slice2_y_net: std_logic_vector(31 downto 0);
  signal slice3_y_net_x0: std_logic;

begin
  delay2_q_net_x0 <= bus_in;
  lsb_out1 <= reinterpret1_output_port_net_x0;
  msb_out3 <= slice3_y_net_x0;
  out2 <= reinterpret2_output_port_net_x0;

  reinterpret1: entity work.reinterpret_c5d4d59b73
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => slice1_y_net,
      output_port => reinterpret1_output_port_net_x0
    );

  reinterpret2: entity work.reinterpret_c5d4d59b73
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => slice2_y_net,
      output_port => reinterpret2_output_port_net_x0
    );

  slice1: entity work.xlslice
    generic map (
      new_lsb => 0,
      new_msb => 31,
      x_width => 65,
      y_width => 32
    )
    port map (
      x => delay2_q_net_x0,
      y => slice1_y_net
    );

  slice2: entity work.xlslice
    generic map (
      new_lsb => 32,
      new_msb => 63,
      x_width => 65,
      y_width => 32
    )
    port map (
      x => delay2_q_net_x0,
      y => slice2_y_net
    );

  slice3: entity work.xlslice
    generic map (
      new_lsb => 64,
      new_msb => 64,
      x_width => 65,
      y_width => 1
    )
    port map (
      x => delay2_q_net_x0,
      y(0) => slice3_y_net_x0
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/calc_adc_sum_sq/edge_detect1"

entity edge_detect1_entity_75cedd2450 is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    in_x0: in std_logic; 
    out_x0: out std_logic
  );
end edge_detect1_entity_75cedd2450;

architecture structural of edge_detect1_entity_75cedd2450 is
  signal ce_1_sg_x44: std_logic;
  signal clk_1_sg_x44: std_logic;
  signal delay_q_net: std_logic;
  signal edge_op_y_net_x0: std_logic;
  signal inverter_op_net: std_logic;
  signal slice_y_net_x0: std_logic;

begin
  ce_1_sg_x44 <= ce_1;
  clk_1_sg_x44 <= clk_1;
  slice_y_net_x0 <= in_x0;
  out_x0 <= edge_op_y_net_x0;

  delay: entity work.xldelay
    generic map (
      latency => 1,
      reg_retiming => 0,
      reset => 0,
      width => 1
    )
    port map (
      ce => ce_1_sg_x44,
      clk => clk_1_sg_x44,
      d(0) => slice_y_net_x0,
      en => '1',
      rst => '1',
      q(0) => delay_q_net
    );

  edge_op: entity work.logical_80f90b97d0
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0(0) => inverter_op_net,
      d1(0) => delay_q_net,
      y(0) => edge_op_y_net_x0
    );

  inverter: entity work.inverter_e5b38cca3b
    port map (
      ce => ce_1_sg_x44,
      clk => clk_1_sg_x44,
      clr => '0',
      ip(0) => slice_y_net_x0,
      op(0) => inverter_op_net
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/calc_adc_sum_sq"

entity calc_adc_sum_sq_entity_6e70db58e3 is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    in1: in std_logic_vector(7 downto 0); 
    in2: in std_logic_vector(7 downto 0); 
    in3: in std_logic_vector(7 downto 0); 
    in4: in std_logic_vector(7 downto 0); 
    sum_sq: out std_logic_vector(31 downto 0)
  );
end calc_adc_sum_sq_entity_6e70db58e3;

architecture structural of calc_adc_sum_sq_entity_6e70db58e3 is
  signal accumulator_q_net: std_logic_vector(31 downto 0);
  signal ce_1_sg_x45: std_logic;
  signal clk_1_sg_x45: std_logic;
  signal convert1_dout_net_x1: std_logic_vector(31 downto 0);
  signal counter1_op_net: std_logic_vector(15 downto 0);
  signal counter_op_net: std_logic_vector(1 downto 0);
  signal delay1_q_net: std_logic;
  signal delay_q_net: std_logic_vector(15 downto 0);
  signal edge_op_y_net_x0: std_logic;
  signal mult_p_net: std_logic_vector(15 downto 0);
  signal mux_y_net: std_logic_vector(7 downto 0);
  signal register_q_net: std_logic_vector(31 downto 0);
  signal reinterpret1_output_port_net_x0: std_logic_vector(7 downto 0);
  signal reinterpret2_output_port_net_x0: std_logic_vector(7 downto 0);
  signal reinterpret3_output_port_net_x0: std_logic_vector(7 downto 0);
  signal reinterpret4_output_port_net_x0: std_logic_vector(7 downto 0);
  signal slice_y_net_x0: std_logic;

begin
  ce_1_sg_x45 <= ce_1;
  clk_1_sg_x45 <= clk_1;
  reinterpret2_output_port_net_x0 <= in1;
  reinterpret1_output_port_net_x0 <= in2;
  reinterpret3_output_port_net_x0 <= in3;
  reinterpret4_output_port_net_x0 <= in4;
  sum_sq <= convert1_dout_net_x1;

  accumulator: entity work.xlaccum_c09f12_01
    generic map (
      b_arith => xlSigned,
      b_bin_pt => 0,
      b_width => 16,
      core_name0 => "accm_11_0_8f8edad76401ddd0",
      q_arith => xlSigned,
      q_bin_pt => 0,
      q_width => 32
    )
    port map (
      b => delay_q_net,
      ce => ce_1_sg_x45,
      clk => clk_1_sg_x45,
      clr => '0',
      en => "1",
      rst(0) => delay1_q_net,
      q => accumulator_q_net
    );

  convert1: entity work.xlconvert
    generic map (
      bool_conversion => 0,
      din_arith => 2,
      din_bin_pt => 0,
      din_width => 32,
      dout_arith => 1,
      dout_bin_pt => 0,
      dout_width => 32,
      latency => 0,
      overflow => xlWrap,
      quantization => xlTruncate
    )
    port map (
      ce => ce_1_sg_x45,
      clk => clk_1_sg_x45,
      clr => '0',
      din => register_q_net,
      en => "1",
      dout => convert1_dout_net_x1
    );

  counter: entity work.xlcounter_free_c09f12_01
    generic map (
      core_name0 => "cntr_11_0_263175d139d7ac6d",
      op_arith => xlUnsigned,
      op_width => 2
    )
    port map (
      ce => ce_1_sg_x45,
      clk => clk_1_sg_x45,
      clr => '0',
      en => "1",
      rst => "0",
      op => counter_op_net
    );

  counter1: entity work.xlcounter_free_c09f12_01
    generic map (
      core_name0 => "cntr_11_0_e22be57ef6aab3d8",
      op_arith => xlUnsigned,
      op_width => 16
    )
    port map (
      ce => ce_1_sg_x45,
      clk => clk_1_sg_x45,
      clr => '0',
      en => "1",
      rst => "0",
      op => counter1_op_net
    );

  delay: entity work.delay_4246ea65a9
    port map (
      ce => ce_1_sg_x45,
      clk => clk_1_sg_x45,
      clr => '0',
      d => mult_p_net,
      q => delay_q_net
    );

  delay1: entity work.delay_9f02caa990
    port map (
      ce => ce_1_sg_x45,
      clk => clk_1_sg_x45,
      clr => '0',
      d(0) => edge_op_y_net_x0,
      q(0) => delay1_q_net
    );

  edge_detect1_75cedd2450: entity work.edge_detect1_entity_75cedd2450
    port map (
      ce_1 => ce_1_sg_x45,
      clk_1 => clk_1_sg_x45,
      in_x0 => slice_y_net_x0,
      out_x0 => edge_op_y_net_x0
    );

  mult: entity work.mult_98e3c7048f
    port map (
      a => mux_y_net,
      b => mux_y_net,
      ce => ce_1_sg_x45,
      clk => clk_1_sg_x45,
      clr => '0',
      p => mult_p_net
    );

  mux: entity work.mux_81f00cece7
    port map (
      ce => ce_1_sg_x45,
      clk => clk_1_sg_x45,
      clr => '0',
      d0 => reinterpret2_output_port_net_x0,
      d1 => reinterpret3_output_port_net_x0,
      d2 => reinterpret1_output_port_net_x0,
      d3 => reinterpret4_output_port_net_x0,
      sel => counter_op_net,
      y => mux_y_net
    );

  register_x0: entity work.xlregister
    generic map (
      d_width => 32,
      init_value => b"00000000000000000000000000000000"
    )
    port map (
      ce => ce_1_sg_x45,
      clk => clk_1_sg_x45,
      d => accumulator_q_net,
      en(0) => delay1_q_net,
      rst => "0",
      q => register_q_net
    );

  slice: entity work.xlslice
    generic map (
      new_lsb => 15,
      new_msb => 15,
      x_width => 16,
      y_width => 1
    )
    port map (
      x => counter1_op_net,
      y(0) => slice_y_net_x0
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/cd_local_time"

entity cd_local_time_entity_9ff6e19688 is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    reset: in std_logic; 
    sync: in std_logic; 
    time_x0: out std_logic_vector(63 downto 0)
  );
end cd_local_time_entity_9ff6e19688;

architecture structural of cd_local_time_entity_9ff6e19688 is
  signal ce_1_sg_x49: std_logic;
  signal clk_1_sg_x49: std_logic;
  signal clock_op_net_x0: std_logic_vector(63 downto 0);
  signal delay1_q_net_x0: std_logic;
  signal delay_q_net: std_logic;
  signal edge_op_y_net_x0: std_logic;
  signal logical14_y_net_x1: std_logic;
  signal register_q_net: std_logic;

begin
  ce_1_sg_x49 <= ce_1;
  clk_1_sg_x49 <= clk_1;
  logical14_y_net_x1 <= reset;
  delay1_q_net_x0 <= sync;
  time_x0 <= clock_op_net_x0;

  clock: entity work.xlcounter_free_c09f12_01
    generic map (
      core_name0 => "cntr_11_0_68c512538c59954a",
      op_arith => xlUnsigned,
      op_width => 64
    )
    port map (
      ce => ce_1_sg_x49,
      clk => clk_1_sg_x49,
      clr => '0',
      en(0) => register_q_net,
      rst(0) => delay_q_net,
      op => clock_op_net_x0
    );

  delay: entity work.delay_9f02caa990
    port map (
      ce => ce_1_sg_x49,
      clk => clk_1_sg_x49,
      clr => '0',
      d(0) => edge_op_y_net_x0,
      q(0) => delay_q_net
    );

  edge_detect1_5ab3eb1478: entity work.edge_detect_entity_cb656284f4
    port map (
      ce_1 => ce_1_sg_x49,
      clk_1 => clk_1_sg_x49,
      in_x0 => logical14_y_net_x1,
      out_x0 => edge_op_y_net_x0
    );

  register_x0: entity work.xlregister
    generic map (
      d_width => 1,
      init_value => b"0"
    )
    port map (
      ce => ce_1_sg_x49,
      clk => clk_1_sg_x49,
      d(0) => delay1_q_net_x0,
      en(0) => delay1_q_net_x0,
      rst(0) => logical14_y_net_x1,
      q(0) => register_q_net
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/coarse/1st_shift"

entity x1st_shift_entity_9909f3ebcd is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    din1: in std_logic_vector(17 downto 0); 
    din2: in std_logic_vector(17 downto 0); 
    din3: in std_logic_vector(17 downto 0); 
    din4: in std_logic_vector(17 downto 0); 
    sync_in: in std_logic; 
    dout1: out std_logic_vector(17 downto 0); 
    dout2: out std_logic_vector(17 downto 0); 
    dout3: out std_logic_vector(17 downto 0); 
    dout4: out std_logic_vector(17 downto 0); 
    sync_out: out std_logic
  );
end x1st_shift_entity_9909f3ebcd;

architecture structural of x1st_shift_entity_9909f3ebcd is
  signal ce_1_sg_x51: std_logic;
  signal clk_1_sg_x51: std_logic;
  signal convert_1_1_dout_net_x0: std_logic_vector(17 downto 0);
  signal convert_1_2_dout_net_x0: std_logic_vector(17 downto 0);
  signal convert_1_3_dout_net_x0: std_logic_vector(17 downto 0);
  signal convert_1_4_dout_net_x0: std_logic_vector(17 downto 0);
  signal delay1_q_net_x0: std_logic;
  signal delay_q_net_x0: std_logic;
  signal shift1_op_net_x0: std_logic_vector(17 downto 0);
  signal shift2_op_net_x0: std_logic_vector(17 downto 0);
  signal shift3_op_net_x0: std_logic_vector(17 downto 0);
  signal shift4_op_net_x0: std_logic_vector(17 downto 0);

begin
  ce_1_sg_x51 <= ce_1;
  clk_1_sg_x51 <= clk_1;
  convert_1_1_dout_net_x0 <= din1;
  convert_1_2_dout_net_x0 <= din2;
  convert_1_3_dout_net_x0 <= din3;
  convert_1_4_dout_net_x0 <= din4;
  delay1_q_net_x0 <= sync_in;
  dout1 <= shift3_op_net_x0;
  dout2 <= shift1_op_net_x0;
  dout3 <= shift2_op_net_x0;
  dout4 <= shift4_op_net_x0;
  sync_out <= delay_q_net_x0;

  delay: entity work.delay_0341f7be44
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d(0) => delay1_q_net_x0,
      q(0) => delay_q_net_x0
    );

  shift1: entity work.shift_01a2ba5449
    port map (
      ce => ce_1_sg_x51,
      clk => clk_1_sg_x51,
      clr => '0',
      ip => convert_1_2_dout_net_x0,
      op => shift1_op_net_x0
    );

  shift2: entity work.shift_01a2ba5449
    port map (
      ce => ce_1_sg_x51,
      clk => clk_1_sg_x51,
      clr => '0',
      ip => convert_1_3_dout_net_x0,
      op => shift2_op_net_x0
    );

  shift3: entity work.shift_01a2ba5449
    port map (
      ce => ce_1_sg_x51,
      clk => clk_1_sg_x51,
      clr => '0',
      ip => convert_1_1_dout_net_x0,
      op => shift3_op_net_x0
    );

  shift4: entity work.shift_01a2ba5449
    port map (
      ce => ce_1_sg_x51,
      clk => clk_1_sg_x51,
      clr => '0',
      ip => convert_1_4_dout_net_x0,
      op => shift4_op_net_x0
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/coarse/bus_create1"

entity bus_create1_entity_3f464d45e8 is
  port (
    in1: in std_logic_vector(35 downto 0); 
    in2: in std_logic_vector(35 downto 0); 
    bus_out: out std_logic_vector(71 downto 0)
  );
end bus_create1_entity_3f464d45e8;

architecture structural of bus_create1_entity_3f464d45e8 is
  signal bram0_data_out_net_x0: std_logic_vector(35 downto 0);
  signal bram1_data_out_net_x0: std_logic_vector(35 downto 0);
  signal concatenate_y_net_x0: std_logic_vector(71 downto 0);
  signal reinterpret1_output_port_net: std_logic_vector(35 downto 0);
  signal reinterpret2_output_port_net: std_logic_vector(35 downto 0);

begin
  bram0_data_out_net_x0 <= in1;
  bram1_data_out_net_x0 <= in2;
  bus_out <= concatenate_y_net_x0;

  concatenate: entity work.concat_c3ccc04d1a
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      in0 => reinterpret1_output_port_net,
      in1 => reinterpret2_output_port_net,
      y => concatenate_y_net_x0
    );

  reinterpret1: entity work.reinterpret_86b044698f
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => bram0_data_out_net_x0,
      output_port => reinterpret1_output_port_net
    );

  reinterpret2: entity work.reinterpret_86b044698f
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => bram1_data_out_net_x0,
      output_port => reinterpret2_output_port_net
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/coarse/bus_expand1"

entity bus_expand1_entity_4a80f53028 is
  port (
    bus_in: in std_logic_vector(31 downto 0); 
    lsb_out1: out std_logic_vector(7 downto 0); 
    msb_out4: out std_logic_vector(7 downto 0); 
    out2: out std_logic_vector(7 downto 0); 
    out3: out std_logic_vector(7 downto 0)
  );
end bus_expand1_entity_4a80f53028;

architecture structural of bus_expand1_entity_4a80f53028 is
  signal concatenate_y_net_x0: std_logic_vector(31 downto 0);
  signal reinterpret1_output_port_net_x0: std_logic_vector(7 downto 0);
  signal reinterpret2_output_port_net_x0: std_logic_vector(7 downto 0);
  signal reinterpret3_output_port_net_x0: std_logic_vector(7 downto 0);
  signal reinterpret4_output_port_net_x0: std_logic_vector(7 downto 0);
  signal slice1_y_net: std_logic_vector(7 downto 0);
  signal slice2_y_net: std_logic_vector(7 downto 0);
  signal slice3_y_net: std_logic_vector(7 downto 0);
  signal slice4_y_net: std_logic_vector(7 downto 0);

begin
  concatenate_y_net_x0 <= bus_in;
  lsb_out1 <= reinterpret1_output_port_net_x0;
  msb_out4 <= reinterpret4_output_port_net_x0;
  out2 <= reinterpret2_output_port_net_x0;
  out3 <= reinterpret3_output_port_net_x0;

  reinterpret1: entity work.reinterpret_f21e7f2ddf
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => slice1_y_net,
      output_port => reinterpret1_output_port_net_x0
    );

  reinterpret2: entity work.reinterpret_f21e7f2ddf
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => slice2_y_net,
      output_port => reinterpret2_output_port_net_x0
    );

  reinterpret3: entity work.reinterpret_f21e7f2ddf
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => slice3_y_net,
      output_port => reinterpret3_output_port_net_x0
    );

  reinterpret4: entity work.reinterpret_f21e7f2ddf
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => slice4_y_net,
      output_port => reinterpret4_output_port_net_x0
    );

  slice1: entity work.xlslice
    generic map (
      new_lsb => 0,
      new_msb => 7,
      x_width => 32,
      y_width => 8
    )
    port map (
      x => concatenate_y_net_x0,
      y => slice1_y_net
    );

  slice2: entity work.xlslice
    generic map (
      new_lsb => 8,
      new_msb => 15,
      x_width => 32,
      y_width => 8
    )
    port map (
      x => concatenate_y_net_x0,
      y => slice2_y_net
    );

  slice3: entity work.xlslice
    generic map (
      new_lsb => 16,
      new_msb => 23,
      x_width => 32,
      y_width => 8
    )
    port map (
      x => concatenate_y_net_x0,
      y => slice3_y_net
    );

  slice4: entity work.xlslice
    generic map (
      new_lsb => 24,
      new_msb => 31,
      x_width => 32,
      y_width => 8
    )
    port map (
      x => concatenate_y_net_x0,
      y => slice4_y_net
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/coarse/crs_snap/bus_create2"

entity bus_create2_entity_4e455bb1b3 is
  port (
    in1: in std_logic; 
    in2: in std_logic_vector(71 downto 0); 
    in3: in std_logic; 
    bus_out: out std_logic_vector(73 downto 0)
  );
end bus_create2_entity_4e455bb1b3;

architecture structural of bus_create2_entity_4e455bb1b3 is
  signal concatenate_y_net_x15: std_logic_vector(73 downto 0);
  signal delay1_q_net_x0: std_logic;
  signal delay2_q_net_x0: std_logic_vector(71 downto 0);
  signal mux_y_net_x0: std_logic;
  signal reinterpret1_output_port_net: std_logic;
  signal reinterpret2_output_port_net: std_logic_vector(71 downto 0);
  signal reinterpret3_output_port_net: std_logic;

begin
  delay1_q_net_x0 <= in1;
  delay2_q_net_x0 <= in2;
  mux_y_net_x0 <= in3;
  bus_out <= concatenate_y_net_x15;

  concatenate: entity work.concat_7995541f2a
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      in0(0) => reinterpret1_output_port_net,
      in1 => reinterpret2_output_port_net,
      in2(0) => reinterpret3_output_port_net,
      y => concatenate_y_net_x15
    );

  reinterpret1: entity work.reinterpret_112d91c147
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port(0) => delay1_q_net_x0,
      output_port(0) => reinterpret1_output_port_net
    );

  reinterpret2: entity work.reinterpret_8b4279cdc5
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => delay2_q_net_x0,
      output_port => reinterpret2_output_port_net
    );

  reinterpret3: entity work.reinterpret_112d91c147
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port(0) => mux_y_net_x0,
      output_port(0) => reinterpret3_output_port_net
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/coarse/crs_snap"

entity crs_snap_entity_70bbc1e976 is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    data_pol0: in std_logic_vector(71 downto 0); 
    data_pol1: in std_logic_vector(71 downto 0); 
    pol_select: in std_logic; 
    select_chan: in std_logic; 
    selected_chan: in std_logic_vector(5 downto 0); 
    sync: in std_logic; 
    coarse_debug: out std_logic_vector(73 downto 0)
  );
end crs_snap_entity_70bbc1e976;

architecture structural of crs_snap_entity_70bbc1e976 is
  signal ce_1_sg_x53: std_logic;
  signal chan_ctr_op_net: std_logic_vector(5 downto 0);
  signal clk_1_sg_x53: std_logic;
  signal concatenate_y_net_x16: std_logic_vector(71 downto 0);
  signal concatenate_y_net_x17: std_logic_vector(71 downto 0);
  signal concatenate_y_net_x18: std_logic_vector(73 downto 0);
  signal constant2_op_net: std_logic;
  signal delay1_q_net_x0: std_logic;
  signal delay27_q_net: std_logic;
  signal delay2_q_net_x0: std_logic_vector(71 downto 0);
  signal mux2_y_net: std_logic_vector(71 downto 0);
  signal mux_y_net_x0: std_logic;
  signal post_sync_delay_q_net_x0: std_logic;
  signal relational_op_net: std_logic;
  signal slice17_y_net_x0: std_logic;
  signal slice18_y_net_x0: std_logic;
  signal slice19_y_net_x0: std_logic_vector(5 downto 0);

begin
  ce_1_sg_x53 <= ce_1;
  clk_1_sg_x53 <= clk_1;
  concatenate_y_net_x17 <= data_pol0;
  concatenate_y_net_x16 <= data_pol1;
  slice17_y_net_x0 <= pol_select;
  slice18_y_net_x0 <= select_chan;
  slice19_y_net_x0 <= selected_chan;
  post_sync_delay_q_net_x0 <= sync;
  coarse_debug <= concatenate_y_net_x18;

  bus_create2_4e455bb1b3: entity work.bus_create2_entity_4e455bb1b3
    port map (
      in1 => delay1_q_net_x0,
      in2 => delay2_q_net_x0,
      in3 => mux_y_net_x0,
      bus_out => concatenate_y_net_x18
    );

  chan_ctr: entity work.xlcounter_free_c09f12_01
    generic map (
      core_name0 => "cntr_11_0_50ef766046ea9bf4",
      op_arith => xlUnsigned,
      op_width => 6
    )
    port map (
      ce => ce_1_sg_x53,
      clk => clk_1_sg_x53,
      clr => '0',
      en => "1",
      rst(0) => delay27_q_net,
      op => chan_ctr_op_net
    );

  constant2: entity work.constant_6293007044
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op(0) => constant2_op_net
    );

  delay1: entity work.delay_9f02caa990
    port map (
      ce => ce_1_sg_x53,
      clk => clk_1_sg_x53,
      clr => '0',
      d(0) => delay27_q_net,
      q(0) => delay1_q_net_x0
    );

  delay2: entity work.delay_a8953e790b
    port map (
      ce => ce_1_sg_x53,
      clk => clk_1_sg_x53,
      clr => '0',
      d => mux2_y_net,
      q => delay2_q_net_x0
    );

  delay27: entity work.delay_e18fb31a3d
    port map (
      ce => ce_1_sg_x53,
      clk => clk_1_sg_x53,
      clr => '0',
      d(0) => post_sync_delay_q_net_x0,
      q(0) => delay27_q_net
    );

  mux: entity work.mux_d99e59b6d4
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0(0) => constant2_op_net,
      d1(0) => relational_op_net,
      sel(0) => slice18_y_net_x0,
      y(0) => mux_y_net_x0
    );

  mux2: entity work.mux_c9cee7d6bf
    port map (
      ce => ce_1_sg_x53,
      clk => clk_1_sg_x53,
      clr => '0',
      d0 => concatenate_y_net_x17,
      d1 => concatenate_y_net_x16,
      sel(0) => slice17_y_net_x0,
      y => mux2_y_net
    );

  relational: entity work.relational_db6796afe7
    port map (
      a => chan_ctr_op_net,
      b => slice19_y_net_x0,
      ce => ce_1_sg_x53,
      clk => clk_1_sg_x53,
      clr => '0',
      op(0) => relational_op_net
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/coarse/fft_wideband_real0/del_4x0_pol1"

entity del_4x0_pol1_entity_49de411777 is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    d: in std_logic_vector(35 downto 0); 
    q: out std_logic_vector(35 downto 0)
  );
end del_4x0_pol1_entity_49de411777;

architecture structural of del_4x0_pol1_entity_49de411777 is
  signal ce_1_sg_x54: std_logic;
  signal clk_1_sg_x54: std_logic;
  signal mux_y_net_x0: std_logic_vector(35 downto 0);
  signal register0_q_net_x0: std_logic_vector(35 downto 0);

begin
  ce_1_sg_x54 <= ce_1;
  clk_1_sg_x54 <= clk_1;
  mux_y_net_x0 <= d;
  q <= register0_q_net_x0;

  register0: entity work.xlregister
    generic map (
      d_width => 36,
      init_value => b"000000000000000000000000000000000000"
    )
    port map (
      ce => ce_1_sg_x54,
      clk => clk_1_sg_x54,
      d => mux_y_net_x0,
      en => "1",
      rst => "0",
      q => register0_q_net_x0
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/coarse/fft_wideband_real0/fft_biplex_real_4x0/bi_real_unscr_4x/delay_bram0"

entity delay_bram0_entity_132f1fc19a is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    in1: in std_logic_vector(35 downto 0); 
    out1: out std_logic_vector(35 downto 0)
  );
end delay_bram0_entity_132f1fc19a;

architecture structural of delay_bram0_entity_132f1fc19a is
  signal ce_1_sg_x59: std_logic;
  signal clk_1_sg_x59: std_logic;
  signal concat_y_net_x0: std_logic_vector(35 downto 0);
  signal constant2_op_net: std_logic;
  signal counter_op_net: std_logic_vector(5 downto 0);
  signal single_port_ram_data_out_net_x0: std_logic_vector(35 downto 0);

begin
  ce_1_sg_x59 <= ce_1;
  clk_1_sg_x59 <= clk_1;
  concat_y_net_x0 <= in1;
  out1 <= single_port_ram_data_out_net_x0;

  constant2: entity work.constant_6293007044
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op(0) => constant2_op_net
    );

  counter: entity work.xlcounter_limit_c09f12_01
    generic map (
      cnt_15_0 => 60,
      cnt_31_16 => 0,
      cnt_47_32 => 0,
      cnt_63_48 => 0,
      core_name0 => "cntr_11_0_50ef766046ea9bf4",
      count_limited => 1,
      op_arith => xlUnsigned,
      op_width => 6
    )
    port map (
      ce => ce_1_sg_x59,
      clk => clk_1_sg_x59,
      clr => '0',
      en => "1",
      rst => "0",
      op => counter_op_net
    );

  single_port_ram: entity work.xlspram_c09f12_01
    generic map (
      c_address_width => 6,
      c_width => 36,
      core_name0 => "bmg_72_47e00fa602868a13",
      latency => 2
    )
    port map (
      addr => counter_op_net,
      ce => ce_1_sg_x59,
      clk => clk_1_sg_x59,
      data_in => concat_y_net_x0,
      en => "1",
      rst => "0",
      we(0) => constant2_op_net,
      data_out => single_port_ram_data_out_net_x0
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/coarse/fft_wideband_real0/fft_biplex_real_4x0/bi_real_unscr_4x/hilbert_dsp48e0/c_to_ri0"

entity c_to_ri0_entity_ac3e6eb705 is
  port (
    c: in std_logic_vector(35 downto 0); 
    im: out std_logic_vector(17 downto 0); 
    re: out std_logic_vector(17 downto 0)
  );
end c_to_ri0_entity_ac3e6eb705;

architecture structural of c_to_ri0_entity_ac3e6eb705 is
  signal force_im_output_port_net_x0: std_logic_vector(17 downto 0);
  signal force_re_output_port_net_x0: std_logic_vector(17 downto 0);
  signal mux0_y_net_x0: std_logic_vector(35 downto 0);
  signal slice_im_y_net: std_logic_vector(17 downto 0);
  signal slice_re_y_net: std_logic_vector(17 downto 0);

begin
  mux0_y_net_x0 <= c;
  im <= force_im_output_port_net_x0;
  re <= force_re_output_port_net_x0;

  force_im: entity work.reinterpret_9a0fa0f632
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => slice_im_y_net,
      output_port => force_im_output_port_net_x0
    );

  force_re: entity work.reinterpret_9a0fa0f632
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => slice_re_y_net,
      output_port => force_re_output_port_net_x0
    );

  slice_im: entity work.xlslice
    generic map (
      new_lsb => 0,
      new_msb => 17,
      x_width => 36,
      y_width => 18
    )
    port map (
      x => mux0_y_net_x0,
      y => slice_im_y_net
    );

  slice_re: entity work.xlslice
    generic map (
      new_lsb => 18,
      new_msb => 35,
      x_width => 36,
      y_width => 18
    )
    port map (
      x => mux0_y_net_x0,
      y => slice_re_y_net
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/coarse/fft_wideband_real0/fft_biplex_real_4x0/bi_real_unscr_4x/hilbert_dsp48e0/cadd"

entity cadd_entity_af6191b102 is
  port (
    a_im: in std_logic_vector(17 downto 0); 
    a_re: in std_logic_vector(17 downto 0); 
    b_im: in std_logic_vector(17 downto 0); 
    b_re: in std_logic_vector(17 downto 0); 
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    c_im: out std_logic_vector(18 downto 0); 
    c_re: out std_logic_vector(18 downto 0)
  );
end cadd_entity_af6191b102;

architecture structural of cadd_entity_af6191b102 is
  signal alumode_op_net: std_logic_vector(3 downto 0);
  signal carryin_op_net: std_logic;
  signal carryinsel_op_net: std_logic_vector(2 downto 0);
  signal cast_c_im_dout_net_x0: std_logic_vector(18 downto 0);
  signal cast_c_re_dout_net_x0: std_logic_vector(18 downto 0);
  signal ce_1_sg_x61: std_logic;
  signal clk_1_sg_x61: std_logic;
  signal concat_a_y_net: std_logic_vector(47 downto 0);
  signal concat_b_y_net: std_logic_vector(47 downto 0);
  signal dsp48e_p_net: std_logic_vector(47 downto 0);
  signal force_im_output_port_net_x2: std_logic_vector(17 downto 0);
  signal force_im_output_port_net_x3: std_logic_vector(17 downto 0);
  signal force_re_output_port_net_x2: std_logic_vector(17 downto 0);
  signal force_re_output_port_net_x3: std_logic_vector(17 downto 0);
  signal opmode_op_net: std_logic_vector(6 downto 0);
  signal realign_a_im_dout_net: std_logic_vector(23 downto 0);
  signal realign_a_re_dout_net: std_logic_vector(23 downto 0);
  signal realign_b_im_dout_net: std_logic_vector(23 downto 0);
  signal realign_b_re_dout_net: std_logic_vector(23 downto 0);
  signal reinterp_a_im_output_port_net: std_logic_vector(23 downto 0);
  signal reinterp_a_re_output_port_net: std_logic_vector(23 downto 0);
  signal reinterp_b_im_output_port_net: std_logic_vector(23 downto 0);
  signal reinterp_b_re_output_port_net: std_logic_vector(23 downto 0);
  signal reinterp_c_im_output_port_net: std_logic_vector(23 downto 0);
  signal reinterp_c_re_output_port_net: std_logic_vector(23 downto 0);
  signal reinterpret_a_output_port_net: std_logic_vector(29 downto 0);
  signal reinterpret_b_output_port_net: std_logic_vector(17 downto 0);
  signal reinterpret_c_output_port_net: std_logic_vector(47 downto 0);
  signal slice_a_y_net: std_logic_vector(29 downto 0);
  signal slice_b_y_net: std_logic_vector(17 downto 0);
  signal slice_c_im_y_net: std_logic_vector(23 downto 0);
  signal slice_c_re_y_net: std_logic_vector(23 downto 0);

begin
  force_im_output_port_net_x2 <= a_im;
  force_re_output_port_net_x2 <= a_re;
  force_im_output_port_net_x3 <= b_im;
  force_re_output_port_net_x3 <= b_re;
  ce_1_sg_x61 <= ce_1;
  clk_1_sg_x61 <= clk_1;
  c_im <= cast_c_im_dout_net_x0;
  c_re <= cast_c_re_dout_net_x0;

  alumode: entity work.constant_4c449dd556
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op => alumode_op_net
    );

  carryin: entity work.constant_963ed6358a
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op(0) => carryin_op_net
    );

  carryinsel: entity work.constant_822933f89b
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op => carryinsel_op_net
    );

  cast_c_im: entity work.xlconvert
    generic map (
      bool_conversion => 0,
      din_arith => 2,
      din_bin_pt => 22,
      din_width => 24,
      dout_arith => 2,
      dout_bin_pt => 17,
      dout_width => 19,
      latency => 0,
      overflow => xlWrap,
      quantization => xlTruncate
    )
    port map (
      ce => ce_1_sg_x61,
      clk => clk_1_sg_x61,
      clr => '0',
      din => reinterp_c_im_output_port_net,
      en => "1",
      dout => cast_c_im_dout_net_x0
    );

  cast_c_re: entity work.xlconvert
    generic map (
      bool_conversion => 0,
      din_arith => 2,
      din_bin_pt => 22,
      din_width => 24,
      dout_arith => 2,
      dout_bin_pt => 17,
      dout_width => 19,
      latency => 0,
      overflow => xlWrap,
      quantization => xlTruncate
    )
    port map (
      ce => ce_1_sg_x61,
      clk => clk_1_sg_x61,
      clr => '0',
      din => reinterp_c_re_output_port_net,
      en => "1",
      dout => cast_c_re_dout_net_x0
    );

  concat_a: entity work.concat_b57c4be2de
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      in0 => reinterp_a_re_output_port_net,
      in1 => reinterp_a_im_output_port_net,
      y => concat_a_y_net
    );

  concat_b: entity work.concat_b57c4be2de
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      in0 => reinterp_b_re_output_port_net,
      in1 => reinterp_b_im_output_port_net,
      y => concat_b_y_net
    );

  dsp48e: entity work.xldsp48e
    generic map (
      a_input => "DIRECT",
      acascreg => 1,
      alumodereg => 1,
      areg => 1,
      autoreset_pattern_detect => FALSE,
      autoreset_pattern_detect_optinv => "MATCH",
      b_input => "DIRECT",
      bcascreg => 1,
      breg => 1,
      carryinreg => 1,
      carryinselreg => 1,
      carryout_width => 4,
      creg => 1,
      mreg => 1,
      opmodereg => 1,
      preg => 1,
      sel_mask => "MASK",
      sel_pattern => "PATTERN",
      use_c_port => 1,
      use_mult => "MULT_S",
      use_op => 0,
      use_pattern_detect => "NO_PATDET",
      use_simd => "TWO24"
    )
    port map (
      a => reinterpret_a_output_port_net,
      alumode => alumode_op_net,
      b => reinterpret_b_output_port_net,
      c => reinterpret_c_output_port_net,
      carryin(0) => carryin_op_net,
      carryinsel => carryinsel_op_net,
      ce => ce_1_sg_x61,
      cea1 => "1",
      cea2 => "1",
      cealumode => "1",
      ceb1 => "1",
      ceb2 => "1",
      cec => "1",
      cecarryin => "1",
      cectrl => "1",
      cem => "1",
      cemultcarryin => "1",
      cep => "1",
      clk => clk_1_sg_x61,
      en => "1",
      opmode => opmode_op_net,
      rst => "0",
      rsta => "0",
      rstalumode => "0",
      rstb => "0",
      rstc => "0",
      rstcarryin => "0",
      rstctrl => "0",
      rstm => "0",
      rstp => "0",
      p => dsp48e_p_net
    );

  opmode: entity work.constant_270746ab47
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op => opmode_op_net
    );

  realign_a_im: entity work.xlconvert
    generic map (
      bool_conversion => 0,
      din_arith => 2,
      din_bin_pt => 17,
      din_width => 18,
      dout_arith => 2,
      dout_bin_pt => 22,
      dout_width => 24,
      latency => 0,
      overflow => xlWrap,
      quantization => xlTruncate
    )
    port map (
      ce => ce_1_sg_x61,
      clk => clk_1_sg_x61,
      clr => '0',
      din => force_im_output_port_net_x2,
      en => "1",
      dout => realign_a_im_dout_net
    );

  realign_a_re: entity work.xlconvert
    generic map (
      bool_conversion => 0,
      din_arith => 2,
      din_bin_pt => 17,
      din_width => 18,
      dout_arith => 2,
      dout_bin_pt => 22,
      dout_width => 24,
      latency => 0,
      overflow => xlWrap,
      quantization => xlTruncate
    )
    port map (
      ce => ce_1_sg_x61,
      clk => clk_1_sg_x61,
      clr => '0',
      din => force_re_output_port_net_x2,
      en => "1",
      dout => realign_a_re_dout_net
    );

  realign_b_im: entity work.xlconvert
    generic map (
      bool_conversion => 0,
      din_arith => 2,
      din_bin_pt => 17,
      din_width => 18,
      dout_arith => 2,
      dout_bin_pt => 22,
      dout_width => 24,
      latency => 0,
      overflow => xlWrap,
      quantization => xlTruncate
    )
    port map (
      ce => ce_1_sg_x61,
      clk => clk_1_sg_x61,
      clr => '0',
      din => force_im_output_port_net_x3,
      en => "1",
      dout => realign_b_im_dout_net
    );

  realign_b_re: entity work.xlconvert
    generic map (
      bool_conversion => 0,
      din_arith => 2,
      din_bin_pt => 17,
      din_width => 18,
      dout_arith => 2,
      dout_bin_pt => 22,
      dout_width => 24,
      latency => 0,
      overflow => xlWrap,
      quantization => xlTruncate
    )
    port map (
      ce => ce_1_sg_x61,
      clk => clk_1_sg_x61,
      clr => '0',
      din => force_re_output_port_net_x3,
      en => "1",
      dout => realign_b_re_dout_net
    );

  reinterp_a_im: entity work.reinterpret_3fb4604c01
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => realign_a_im_dout_net,
      output_port => reinterp_a_im_output_port_net
    );

  reinterp_a_re: entity work.reinterpret_3fb4604c01
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => realign_a_re_dout_net,
      output_port => reinterp_a_re_output_port_net
    );

  reinterp_b_im: entity work.reinterpret_3fb4604c01
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => realign_b_im_dout_net,
      output_port => reinterp_b_im_output_port_net
    );

  reinterp_b_re: entity work.reinterpret_3fb4604c01
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => realign_b_re_dout_net,
      output_port => reinterp_b_re_output_port_net
    );

  reinterp_c_im: entity work.reinterpret_4bf1ad328a
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => slice_c_im_y_net,
      output_port => reinterp_c_im_output_port_net
    );

  reinterp_c_re: entity work.reinterpret_4bf1ad328a
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => slice_c_re_y_net,
      output_port => reinterp_c_re_output_port_net
    );

  reinterpret_a: entity work.reinterpret_eb03bc3377
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => slice_a_y_net,
      output_port => reinterpret_a_output_port_net
    );

  reinterpret_b: entity work.reinterpret_9a0fa0f632
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => slice_b_y_net,
      output_port => reinterpret_b_output_port_net
    );

  reinterpret_c: entity work.reinterpret_7ea107432a
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => concat_a_y_net,
      output_port => reinterpret_c_output_port_net
    );

  slice_a: entity work.xlslice
    generic map (
      new_lsb => 18,
      new_msb => 47,
      x_width => 48,
      y_width => 30
    )
    port map (
      x => concat_b_y_net,
      y => slice_a_y_net
    );

  slice_b: entity work.xlslice
    generic map (
      new_lsb => 0,
      new_msb => 17,
      x_width => 48,
      y_width => 18
    )
    port map (
      x => concat_b_y_net,
      y => slice_b_y_net
    );

  slice_c_im: entity work.xlslice
    generic map (
      new_lsb => 0,
      new_msb => 23,
      x_width => 48,
      y_width => 24
    )
    port map (
      x => dsp48e_p_net,
      y => slice_c_im_y_net
    );

  slice_c_re: entity work.xlslice
    generic map (
      new_lsb => 24,
      new_msb => 47,
      x_width => 48,
      y_width => 24
    )
    port map (
      x => dsp48e_p_net,
      y => slice_c_re_y_net
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/coarse/fft_wideband_real0/fft_biplex_real_4x0/bi_real_unscr_4x/hilbert_dsp48e0/csub"

entity csub_entity_c8fe90de98 is
  port (
    a_im: in std_logic_vector(17 downto 0); 
    a_re: in std_logic_vector(17 downto 0); 
    b_im: in std_logic_vector(17 downto 0); 
    b_re: in std_logic_vector(17 downto 0); 
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    c_im: out std_logic_vector(18 downto 0); 
    c_re: out std_logic_vector(18 downto 0)
  );
end csub_entity_c8fe90de98;

architecture structural of csub_entity_c8fe90de98 is
  signal alumode_op_net: std_logic_vector(3 downto 0);
  signal carryin_op_net: std_logic;
  signal carryinsel_op_net: std_logic_vector(2 downto 0);
  signal cast_c_im_dout_net_x0: std_logic_vector(18 downto 0);
  signal cast_c_re_dout_net_x0: std_logic_vector(18 downto 0);
  signal ce_1_sg_x62: std_logic;
  signal clk_1_sg_x62: std_logic;
  signal concat_a_y_net: std_logic_vector(47 downto 0);
  signal concat_b_y_net: std_logic_vector(47 downto 0);
  signal dsp48e_p_net: std_logic_vector(47 downto 0);
  signal force_im_output_port_net_x4: std_logic_vector(17 downto 0);
  signal force_im_output_port_net_x5: std_logic_vector(17 downto 0);
  signal force_re_output_port_net_x4: std_logic_vector(17 downto 0);
  signal force_re_output_port_net_x5: std_logic_vector(17 downto 0);
  signal opmode_op_net: std_logic_vector(6 downto 0);
  signal realign_a_im_dout_net: std_logic_vector(23 downto 0);
  signal realign_a_re_dout_net: std_logic_vector(23 downto 0);
  signal realign_b_im_dout_net: std_logic_vector(23 downto 0);
  signal realign_b_re_dout_net: std_logic_vector(23 downto 0);
  signal reinterp_a_im_output_port_net: std_logic_vector(23 downto 0);
  signal reinterp_a_re_output_port_net: std_logic_vector(23 downto 0);
  signal reinterp_b_im_output_port_net: std_logic_vector(23 downto 0);
  signal reinterp_b_re_output_port_net: std_logic_vector(23 downto 0);
  signal reinterp_c_im_output_port_net: std_logic_vector(23 downto 0);
  signal reinterp_c_re_output_port_net: std_logic_vector(23 downto 0);
  signal reinterpret_a_output_port_net: std_logic_vector(29 downto 0);
  signal reinterpret_b_output_port_net: std_logic_vector(17 downto 0);
  signal reinterpret_c_output_port_net: std_logic_vector(47 downto 0);
  signal slice_a_y_net: std_logic_vector(29 downto 0);
  signal slice_b_y_net: std_logic_vector(17 downto 0);
  signal slice_c_im_y_net: std_logic_vector(23 downto 0);
  signal slice_c_re_y_net: std_logic_vector(23 downto 0);

begin
  force_re_output_port_net_x5 <= a_im;
  force_im_output_port_net_x4 <= a_re;
  force_re_output_port_net_x4 <= b_im;
  force_im_output_port_net_x5 <= b_re;
  ce_1_sg_x62 <= ce_1;
  clk_1_sg_x62 <= clk_1;
  c_im <= cast_c_im_dout_net_x0;
  c_re <= cast_c_re_dout_net_x0;

  alumode: entity work.constant_8038205d89
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op => alumode_op_net
    );

  carryin: entity work.constant_963ed6358a
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op(0) => carryin_op_net
    );

  carryinsel: entity work.constant_822933f89b
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op => carryinsel_op_net
    );

  cast_c_im: entity work.xlconvert
    generic map (
      bool_conversion => 0,
      din_arith => 2,
      din_bin_pt => 22,
      din_width => 24,
      dout_arith => 2,
      dout_bin_pt => 17,
      dout_width => 19,
      latency => 0,
      overflow => xlWrap,
      quantization => xlTruncate
    )
    port map (
      ce => ce_1_sg_x62,
      clk => clk_1_sg_x62,
      clr => '0',
      din => reinterp_c_im_output_port_net,
      en => "1",
      dout => cast_c_im_dout_net_x0
    );

  cast_c_re: entity work.xlconvert
    generic map (
      bool_conversion => 0,
      din_arith => 2,
      din_bin_pt => 22,
      din_width => 24,
      dout_arith => 2,
      dout_bin_pt => 17,
      dout_width => 19,
      latency => 0,
      overflow => xlWrap,
      quantization => xlTruncate
    )
    port map (
      ce => ce_1_sg_x62,
      clk => clk_1_sg_x62,
      clr => '0',
      din => reinterp_c_re_output_port_net,
      en => "1",
      dout => cast_c_re_dout_net_x0
    );

  concat_a: entity work.concat_b57c4be2de
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      in0 => reinterp_a_re_output_port_net,
      in1 => reinterp_a_im_output_port_net,
      y => concat_a_y_net
    );

  concat_b: entity work.concat_b57c4be2de
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      in0 => reinterp_b_re_output_port_net,
      in1 => reinterp_b_im_output_port_net,
      y => concat_b_y_net
    );

  dsp48e: entity work.xldsp48e
    generic map (
      a_input => "DIRECT",
      acascreg => 1,
      alumodereg => 1,
      areg => 1,
      autoreset_pattern_detect => FALSE,
      autoreset_pattern_detect_optinv => "MATCH",
      b_input => "DIRECT",
      bcascreg => 1,
      breg => 1,
      carryinreg => 1,
      carryinselreg => 1,
      carryout_width => 4,
      creg => 1,
      mreg => 1,
      opmodereg => 1,
      preg => 1,
      sel_mask => "MASK",
      sel_pattern => "PATTERN",
      use_c_port => 1,
      use_mult => "MULT_S",
      use_op => 0,
      use_pattern_detect => "NO_PATDET",
      use_simd => "TWO24"
    )
    port map (
      a => reinterpret_a_output_port_net,
      alumode => alumode_op_net,
      b => reinterpret_b_output_port_net,
      c => reinterpret_c_output_port_net,
      carryin(0) => carryin_op_net,
      carryinsel => carryinsel_op_net,
      ce => ce_1_sg_x62,
      cea1 => "1",
      cea2 => "1",
      cealumode => "1",
      ceb1 => "1",
      ceb2 => "1",
      cec => "1",
      cecarryin => "1",
      cectrl => "1",
      cem => "1",
      cemultcarryin => "1",
      cep => "1",
      clk => clk_1_sg_x62,
      en => "1",
      opmode => opmode_op_net,
      rst => "0",
      rsta => "0",
      rstalumode => "0",
      rstb => "0",
      rstc => "0",
      rstcarryin => "0",
      rstctrl => "0",
      rstm => "0",
      rstp => "0",
      p => dsp48e_p_net
    );

  opmode: entity work.constant_270746ab47
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op => opmode_op_net
    );

  realign_a_im: entity work.xlconvert
    generic map (
      bool_conversion => 0,
      din_arith => 2,
      din_bin_pt => 17,
      din_width => 18,
      dout_arith => 2,
      dout_bin_pt => 22,
      dout_width => 24,
      latency => 0,
      overflow => xlWrap,
      quantization => xlTruncate
    )
    port map (
      ce => ce_1_sg_x62,
      clk => clk_1_sg_x62,
      clr => '0',
      din => force_re_output_port_net_x5,
      en => "1",
      dout => realign_a_im_dout_net
    );

  realign_a_re: entity work.xlconvert
    generic map (
      bool_conversion => 0,
      din_arith => 2,
      din_bin_pt => 17,
      din_width => 18,
      dout_arith => 2,
      dout_bin_pt => 22,
      dout_width => 24,
      latency => 0,
      overflow => xlWrap,
      quantization => xlTruncate
    )
    port map (
      ce => ce_1_sg_x62,
      clk => clk_1_sg_x62,
      clr => '0',
      din => force_im_output_port_net_x4,
      en => "1",
      dout => realign_a_re_dout_net
    );

  realign_b_im: entity work.xlconvert
    generic map (
      bool_conversion => 0,
      din_arith => 2,
      din_bin_pt => 17,
      din_width => 18,
      dout_arith => 2,
      dout_bin_pt => 22,
      dout_width => 24,
      latency => 0,
      overflow => xlWrap,
      quantization => xlTruncate
    )
    port map (
      ce => ce_1_sg_x62,
      clk => clk_1_sg_x62,
      clr => '0',
      din => force_re_output_port_net_x4,
      en => "1",
      dout => realign_b_im_dout_net
    );

  realign_b_re: entity work.xlconvert
    generic map (
      bool_conversion => 0,
      din_arith => 2,
      din_bin_pt => 17,
      din_width => 18,
      dout_arith => 2,
      dout_bin_pt => 22,
      dout_width => 24,
      latency => 0,
      overflow => xlWrap,
      quantization => xlTruncate
    )
    port map (
      ce => ce_1_sg_x62,
      clk => clk_1_sg_x62,
      clr => '0',
      din => force_im_output_port_net_x5,
      en => "1",
      dout => realign_b_re_dout_net
    );

  reinterp_a_im: entity work.reinterpret_3fb4604c01
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => realign_a_im_dout_net,
      output_port => reinterp_a_im_output_port_net
    );

  reinterp_a_re: entity work.reinterpret_3fb4604c01
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => realign_a_re_dout_net,
      output_port => reinterp_a_re_output_port_net
    );

  reinterp_b_im: entity work.reinterpret_3fb4604c01
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => realign_b_im_dout_net,
      output_port => reinterp_b_im_output_port_net
    );

  reinterp_b_re: entity work.reinterpret_3fb4604c01
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => realign_b_re_dout_net,
      output_port => reinterp_b_re_output_port_net
    );

  reinterp_c_im: entity work.reinterpret_4bf1ad328a
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => slice_c_im_y_net,
      output_port => reinterp_c_im_output_port_net
    );

  reinterp_c_re: entity work.reinterpret_4bf1ad328a
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => slice_c_re_y_net,
      output_port => reinterp_c_re_output_port_net
    );

  reinterpret_a: entity work.reinterpret_eb03bc3377
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => slice_a_y_net,
      output_port => reinterpret_a_output_port_net
    );

  reinterpret_b: entity work.reinterpret_9a0fa0f632
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => slice_b_y_net,
      output_port => reinterpret_b_output_port_net
    );

  reinterpret_c: entity work.reinterpret_7ea107432a
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => concat_a_y_net,
      output_port => reinterpret_c_output_port_net
    );

  slice_a: entity work.xlslice
    generic map (
      new_lsb => 18,
      new_msb => 47,
      x_width => 48,
      y_width => 30
    )
    port map (
      x => concat_b_y_net,
      y => slice_a_y_net
    );

  slice_b: entity work.xlslice
    generic map (
      new_lsb => 0,
      new_msb => 17,
      x_width => 48,
      y_width => 18
    )
    port map (
      x => concat_b_y_net,
      y => slice_b_y_net
    );

  slice_c_im: entity work.xlslice
    generic map (
      new_lsb => 0,
      new_msb => 23,
      x_width => 48,
      y_width => 24
    )
    port map (
      x => dsp48e_p_net,
      y => slice_c_im_y_net
    );

  slice_c_re: entity work.xlslice
    generic map (
      new_lsb => 24,
      new_msb => 47,
      x_width => 48,
      y_width => 24
    )
    port map (
      x => dsp48e_p_net,
      y => slice_c_re_y_net
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/coarse/fft_wideband_real0/fft_biplex_real_4x0/bi_real_unscr_4x/hilbert_dsp48e0/ri_to_c0"

entity ri_to_c0_entity_724b130d6e is
  port (
    im: in std_logic_vector(17 downto 0); 
    re: in std_logic_vector(17 downto 0); 
    c: out std_logic_vector(35 downto 0)
  );
end ri_to_c0_entity_724b130d6e;

architecture structural of ri_to_c0_entity_724b130d6e is
  signal concat_y_net_x1: std_logic_vector(35 downto 0);
  signal convert0_dout_net_x0: std_logic_vector(17 downto 0);
  signal convert2_dout_net_x0: std_logic_vector(17 downto 0);
  signal force_im_output_port_net: std_logic_vector(17 downto 0);
  signal force_re_output_port_net: std_logic_vector(17 downto 0);

begin
  convert2_dout_net_x0 <= im;
  convert0_dout_net_x0 <= re;
  c <= concat_y_net_x1;

  concat: entity work.concat_b198bd62b0
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      in0 => force_re_output_port_net,
      in1 => force_im_output_port_net,
      y => concat_y_net_x1
    );

  force_im: entity work.reinterpret_580feec131
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => convert2_dout_net_x0,
      output_port => force_im_output_port_net
    );

  force_re: entity work.reinterpret_580feec131
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => convert0_dout_net_x0,
      output_port => force_re_output_port_net
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/coarse/fft_wideband_real0/fft_biplex_real_4x0/bi_real_unscr_4x/hilbert_dsp48e0"

entity hilbert_dsp48e0_entity_06dac88fd7 is
  port (
    a: in std_logic_vector(35 downto 0); 
    b: in std_logic_vector(35 downto 0); 
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    even: out std_logic_vector(35 downto 0); 
    odd: out std_logic_vector(35 downto 0)
  );
end hilbert_dsp48e0_entity_06dac88fd7;

architecture structural of hilbert_dsp48e0_entity_06dac88fd7 is
  signal cast_c_im_dout_net_x0: std_logic_vector(18 downto 0);
  signal cast_c_im_dout_net_x1: std_logic_vector(18 downto 0);
  signal cast_c_re_dout_net_x0: std_logic_vector(18 downto 0);
  signal cast_c_re_dout_net_x1: std_logic_vector(18 downto 0);
  signal ce_1_sg_x63: std_logic;
  signal clk_1_sg_x63: std_logic;
  signal concat_y_net_x3: std_logic_vector(35 downto 0);
  signal concat_y_net_x4: std_logic_vector(35 downto 0);
  signal convert0_dout_net_x0: std_logic_vector(17 downto 0);
  signal convert1_dout_net_x0: std_logic_vector(17 downto 0);
  signal convert2_dout_net_x0: std_logic_vector(17 downto 0);
  signal convert3_dout_net_x0: std_logic_vector(17 downto 0);
  signal force_im_output_port_net_x4: std_logic_vector(17 downto 0);
  signal force_im_output_port_net_x5: std_logic_vector(17 downto 0);
  signal force_re_output_port_net_x4: std_logic_vector(17 downto 0);
  signal force_re_output_port_net_x5: std_logic_vector(17 downto 0);
  signal mux0_y_net_x1: std_logic_vector(35 downto 0);
  signal mux1_y_net_x1: std_logic_vector(35 downto 0);
  signal scale0_op_net: std_logic_vector(18 downto 0);
  signal scale1_op_net: std_logic_vector(18 downto 0);
  signal scale2_op_net: std_logic_vector(18 downto 0);
  signal scale3_op_net: std_logic_vector(18 downto 0);

begin
  mux0_y_net_x1 <= a;
  mux1_y_net_x1 <= b;
  ce_1_sg_x63 <= ce_1;
  clk_1_sg_x63 <= clk_1;
  even <= concat_y_net_x3;
  odd <= concat_y_net_x4;

  c_to_ri0_ac3e6eb705: entity work.c_to_ri0_entity_ac3e6eb705
    port map (
      c => mux0_y_net_x1,
      im => force_im_output_port_net_x4,
      re => force_re_output_port_net_x4
    );

  c_to_ri1_942149d935: entity work.c_to_ri0_entity_ac3e6eb705
    port map (
      c => mux1_y_net_x1,
      im => force_im_output_port_net_x5,
      re => force_re_output_port_net_x5
    );

  cadd_af6191b102: entity work.cadd_entity_af6191b102
    port map (
      a_im => force_im_output_port_net_x4,
      a_re => force_re_output_port_net_x4,
      b_im => force_im_output_port_net_x5,
      b_re => force_re_output_port_net_x5,
      ce_1 => ce_1_sg_x63,
      clk_1 => clk_1_sg_x63,
      c_im => cast_c_im_dout_net_x0,
      c_re => cast_c_re_dout_net_x0
    );

  convert0: entity work.xlconvert_pipeline
    generic map (
      bool_conversion => 0,
      din_arith => 2,
      din_bin_pt => 18,
      din_width => 19,
      dout_arith => 2,
      dout_bin_pt => 17,
      dout_width => 18,
      latency => 2,
      overflow => xlWrap,
      quantization => xlRoundBanker
    )
    port map (
      ce => ce_1_sg_x63,
      clk => clk_1_sg_x63,
      clr => '0',
      din => scale0_op_net,
      en => "1",
      dout => convert0_dout_net_x0
    );

  convert1: entity work.xlconvert_pipeline
    generic map (
      bool_conversion => 0,
      din_arith => 2,
      din_bin_pt => 18,
      din_width => 19,
      dout_arith => 2,
      dout_bin_pt => 17,
      dout_width => 18,
      latency => 2,
      overflow => xlWrap,
      quantization => xlRoundBanker
    )
    port map (
      ce => ce_1_sg_x63,
      clk => clk_1_sg_x63,
      clr => '0',
      din => scale1_op_net,
      en => "1",
      dout => convert1_dout_net_x0
    );

  convert2: entity work.xlconvert_pipeline
    generic map (
      bool_conversion => 0,
      din_arith => 2,
      din_bin_pt => 18,
      din_width => 19,
      dout_arith => 2,
      dout_bin_pt => 17,
      dout_width => 18,
      latency => 2,
      overflow => xlWrap,
      quantization => xlRoundBanker
    )
    port map (
      ce => ce_1_sg_x63,
      clk => clk_1_sg_x63,
      clr => '0',
      din => scale2_op_net,
      en => "1",
      dout => convert2_dout_net_x0
    );

  convert3: entity work.xlconvert_pipeline
    generic map (
      bool_conversion => 0,
      din_arith => 2,
      din_bin_pt => 18,
      din_width => 19,
      dout_arith => 2,
      dout_bin_pt => 17,
      dout_width => 18,
      latency => 2,
      overflow => xlWrap,
      quantization => xlRoundBanker
    )
    port map (
      ce => ce_1_sg_x63,
      clk => clk_1_sg_x63,
      clr => '0',
      din => scale3_op_net,
      en => "1",
      dout => convert3_dout_net_x0
    );

  csub_c8fe90de98: entity work.csub_entity_c8fe90de98
    port map (
      a_im => force_re_output_port_net_x5,
      a_re => force_im_output_port_net_x4,
      b_im => force_re_output_port_net_x4,
      b_re => force_im_output_port_net_x5,
      ce_1 => ce_1_sg_x63,
      clk_1 => clk_1_sg_x63,
      c_im => cast_c_im_dout_net_x1,
      c_re => cast_c_re_dout_net_x1
    );

  ri_to_c0_724b130d6e: entity work.ri_to_c0_entity_724b130d6e
    port map (
      im => convert2_dout_net_x0,
      re => convert0_dout_net_x0,
      c => concat_y_net_x3
    );

  ri_to_c1_d9fb3dc167: entity work.ri_to_c0_entity_724b130d6e
    port map (
      im => convert3_dout_net_x0,
      re => convert1_dout_net_x0,
      c => concat_y_net_x4
    );

  scale0: entity work.scale_9f61027ba4
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      ip => cast_c_re_dout_net_x0,
      op => scale0_op_net
    );

  scale1: entity work.scale_9f61027ba4
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      ip => cast_c_im_dout_net_x0,
      op => scale1_op_net
    );

  scale2: entity work.scale_9f61027ba4
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      ip => cast_c_re_dout_net_x1,
      op => scale2_op_net
    );

  scale3: entity work.scale_9f61027ba4
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      ip => cast_c_im_dout_net_x1,
      op => scale3_op_net
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/coarse/fft_wideband_real0/fft_biplex_real_4x0/bi_real_unscr_4x/mirror_spectrum/ri_to_c0"

entity ri_to_c0_entity_e8c0051634 is
  port (
    im: in std_logic_vector(17 downto 0); 
    re: in std_logic_vector(17 downto 0); 
    c: out std_logic_vector(35 downto 0)
  );
end ri_to_c0_entity_e8c0051634;

architecture structural of ri_to_c0_entity_e8c0051634 is
  signal concat_y_net_x0: std_logic_vector(35 downto 0);
  signal force_im_output_port_net: std_logic_vector(17 downto 0);
  signal force_re_output_port_net: std_logic_vector(17 downto 0);
  signal neg_delay0_q_net_x0: std_logic_vector(17 downto 0);
  signal negate0_op_net_x0: std_logic_vector(17 downto 0);

begin
  negate0_op_net_x0 <= im;
  neg_delay0_q_net_x0 <= re;
  c <= concat_y_net_x0;

  concat: entity work.concat_b198bd62b0
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      in0 => force_re_output_port_net,
      in1 => force_im_output_port_net,
      y => concat_y_net_x0
    );

  force_im: entity work.reinterpret_9306b5127f
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => negate0_op_net_x0,
      output_port => force_im_output_port_net
    );

  force_re: entity work.reinterpret_580feec131
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => neg_delay0_q_net_x0,
      output_port => force_re_output_port_net
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/coarse/fft_wideband_real0/fft_biplex_real_4x0/bi_real_unscr_4x/mirror_spectrum"

entity mirror_spectrum_entity_42d1e77f31 is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    din0: in std_logic_vector(35 downto 0); 
    din1: in std_logic_vector(35 downto 0); 
    din2: in std_logic_vector(35 downto 0); 
    din3: in std_logic_vector(35 downto 0); 
    reo_in0: in std_logic_vector(35 downto 0); 
    reo_in1: in std_logic_vector(35 downto 0); 
    reo_in2: in std_logic_vector(35 downto 0); 
    reo_in3: in std_logic_vector(35 downto 0); 
    sync: in std_logic; 
    dout0: out std_logic_vector(35 downto 0); 
    dout1: out std_logic_vector(35 downto 0); 
    dout2: out std_logic_vector(35 downto 0); 
    dout3: out std_logic_vector(35 downto 0); 
    sync_out: out std_logic
  );
end mirror_spectrum_entity_42d1e77f31;

architecture structural of mirror_spectrum_entity_42d1e77f31 is
  signal ce_1_sg_x67: std_logic;
  signal clk_1_sg_x67: std_logic;
  signal concat_y_net_x0: std_logic_vector(35 downto 0);
  signal concat_y_net_x1: std_logic_vector(35 downto 0);
  signal concat_y_net_x2: std_logic_vector(35 downto 0);
  signal concat_y_net_x3: std_logic_vector(35 downto 0);
  signal constant3_op_net: std_logic_vector(6 downto 0);
  signal counter_op_net: std_logic_vector(6 downto 0);
  signal delay1_q_net: std_logic;
  signal delay2_q_net_x1: std_logic;
  signal delay3_q_net: std_logic_vector(35 downto 0);
  signal delay4_q_net: std_logic_vector(35 downto 0);
  signal delay5_q_net: std_logic_vector(35 downto 0);
  signal delay6_q_net: std_logic_vector(35 downto 0);
  signal delay_ms1_q_net_x0: std_logic;
  signal delay_ms2_q_net_x0: std_logic_vector(35 downto 0);
  signal delay_ms3_q_net_x1: std_logic_vector(35 downto 0);
  signal delay_ms4_q_net_x0: std_logic_vector(35 downto 0);
  signal delay_ms5_q_net_x1: std_logic_vector(35 downto 0);
  signal delay_ms6_q_net_x0: std_logic_vector(35 downto 0);
  signal delay_ms7_q_net_x1: std_logic_vector(35 downto 0);
  signal delay_ms8_q_net_x0: std_logic_vector(35 downto 0);
  signal delay_ms9_q_net_x1: std_logic_vector(35 downto 0);
  signal force_im_output_port_net_x0: std_logic_vector(17 downto 0);
  signal force_im_output_port_net_x1: std_logic_vector(17 downto 0);
  signal force_im_output_port_net_x2: std_logic_vector(17 downto 0);
  signal force_im_output_port_net_x3: std_logic_vector(17 downto 0);
  signal force_re_output_port_net_x0: std_logic_vector(17 downto 0);
  signal force_re_output_port_net_x1: std_logic_vector(17 downto 0);
  signal force_re_output_port_net_x2: std_logic_vector(17 downto 0);
  signal force_re_output_port_net_x3: std_logic_vector(17 downto 0);
  signal mux1_y_net_x1: std_logic_vector(35 downto 0);
  signal mux2_y_net_x1: std_logic_vector(35 downto 0);
  signal mux3_y_net_x1: std_logic_vector(35 downto 0);
  signal mux_y_net_x1: std_logic_vector(35 downto 0);
  signal neg_delay0_q_net_x0: std_logic_vector(17 downto 0);
  signal neg_delay1_q_net_x0: std_logic_vector(17 downto 0);
  signal neg_delay2_q_net_x0: std_logic_vector(17 downto 0);
  signal neg_delay3_q_net_x0: std_logic_vector(17 downto 0);
  signal negate0_op_net_x0: std_logic_vector(17 downto 0);
  signal negate1_op_net_x0: std_logic_vector(17 downto 0);
  signal negate2_op_net_x0: std_logic_vector(17 downto 0);
  signal negate3_op_net_x0: std_logic_vector(17 downto 0);
  signal relational_op_net: std_logic;

begin
  ce_1_sg_x67 <= ce_1;
  clk_1_sg_x67 <= clk_1;
  delay_ms2_q_net_x0 <= din0;
  delay_ms4_q_net_x0 <= din1;
  delay_ms6_q_net_x0 <= din2;
  delay_ms8_q_net_x0 <= din3;
  delay_ms3_q_net_x1 <= reo_in0;
  delay_ms5_q_net_x1 <= reo_in1;
  delay_ms7_q_net_x1 <= reo_in2;
  delay_ms9_q_net_x1 <= reo_in3;
  delay_ms1_q_net_x0 <= sync;
  dout0 <= mux_y_net_x1;
  dout1 <= mux1_y_net_x1;
  dout2 <= mux2_y_net_x1;
  dout3 <= mux3_y_net_x1;
  sync_out <= delay2_q_net_x1;

  c_to_ri0_5173760d5c: entity work.c_to_ri0_entity_ac3e6eb705
    port map (
      c => delay_ms3_q_net_x1,
      im => force_im_output_port_net_x0,
      re => force_re_output_port_net_x0
    );

  c_to_ri1_743e7943f3: entity work.c_to_ri0_entity_ac3e6eb705
    port map (
      c => delay_ms5_q_net_x1,
      im => force_im_output_port_net_x1,
      re => force_re_output_port_net_x1
    );

  c_to_ri2_5911909418: entity work.c_to_ri0_entity_ac3e6eb705
    port map (
      c => delay_ms7_q_net_x1,
      im => force_im_output_port_net_x2,
      re => force_re_output_port_net_x2
    );

  c_to_ri3_641779e326: entity work.c_to_ri0_entity_ac3e6eb705
    port map (
      c => delay_ms9_q_net_x1,
      im => force_im_output_port_net_x3,
      re => force_re_output_port_net_x3
    );

  constant3: entity work.constant_7b07120b87
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op => constant3_op_net
    );

  counter: entity work.xlcounter_free_c09f12_01
    generic map (
      core_name0 => "cntr_11_0_aeada998ec385fcd",
      op_arith => xlUnsigned,
      op_width => 7
    )
    port map (
      ce => ce_1_sg_x67,
      clk => clk_1_sg_x67,
      clr => '0',
      en => "1",
      rst(0) => delay1_q_net,
      op => counter_op_net
    );

  delay1: entity work.xldelay
    generic map (
      latency => 3,
      reg_retiming => 0,
      reset => 0,
      width => 1
    )
    port map (
      ce => ce_1_sg_x67,
      clk => clk_1_sg_x67,
      d(0) => delay_ms1_q_net_x0,
      en => '1',
      rst => '1',
      q(0) => delay1_q_net
    );

  delay2: entity work.xldelay
    generic map (
      latency => 2,
      reg_retiming => 0,
      reset => 0,
      width => 1
    )
    port map (
      ce => ce_1_sg_x67,
      clk => clk_1_sg_x67,
      d(0) => delay1_q_net,
      en => '1',
      rst => '1',
      q(0) => delay2_q_net_x1
    );

  delay3: entity work.xldelay
    generic map (
      latency => 4,
      reg_retiming => 0,
      reset => 0,
      width => 36
    )
    port map (
      ce => ce_1_sg_x67,
      clk => clk_1_sg_x67,
      d => delay_ms2_q_net_x0,
      en => '1',
      rst => '1',
      q => delay3_q_net
    );

  delay4: entity work.xldelay
    generic map (
      latency => 4,
      reg_retiming => 0,
      reset => 0,
      width => 36
    )
    port map (
      ce => ce_1_sg_x67,
      clk => clk_1_sg_x67,
      d => delay_ms4_q_net_x0,
      en => '1',
      rst => '1',
      q => delay4_q_net
    );

  delay5: entity work.xldelay
    generic map (
      latency => 4,
      reg_retiming => 0,
      reset => 0,
      width => 36
    )
    port map (
      ce => ce_1_sg_x67,
      clk => clk_1_sg_x67,
      d => delay_ms6_q_net_x0,
      en => '1',
      rst => '1',
      q => delay5_q_net
    );

  delay6: entity work.xldelay
    generic map (
      latency => 4,
      reg_retiming => 0,
      reset => 0,
      width => 36
    )
    port map (
      ce => ce_1_sg_x67,
      clk => clk_1_sg_x67,
      d => delay_ms8_q_net_x0,
      en => '1',
      rst => '1',
      q => delay6_q_net
    );

  mux: entity work.mux_fca786f2ff
    port map (
      ce => ce_1_sg_x67,
      clk => clk_1_sg_x67,
      clr => '0',
      d0 => delay3_q_net,
      d1 => concat_y_net_x0,
      sel(0) => relational_op_net,
      y => mux_y_net_x1
    );

  mux1: entity work.mux_fca786f2ff
    port map (
      ce => ce_1_sg_x67,
      clk => clk_1_sg_x67,
      clr => '0',
      d0 => delay4_q_net,
      d1 => concat_y_net_x1,
      sel(0) => relational_op_net,
      y => mux1_y_net_x1
    );

  mux2: entity work.mux_fca786f2ff
    port map (
      ce => ce_1_sg_x67,
      clk => clk_1_sg_x67,
      clr => '0',
      d0 => delay5_q_net,
      d1 => concat_y_net_x2,
      sel(0) => relational_op_net,
      y => mux2_y_net_x1
    );

  mux3: entity work.mux_fca786f2ff
    port map (
      ce => ce_1_sg_x67,
      clk => clk_1_sg_x67,
      clr => '0',
      d0 => delay6_q_net,
      d1 => concat_y_net_x3,
      sel(0) => relational_op_net,
      y => mux3_y_net_x1
    );

  neg_delay0: entity work.xldelay
    generic map (
      latency => 1,
      reg_retiming => 0,
      reset => 0,
      width => 18
    )
    port map (
      ce => ce_1_sg_x67,
      clk => clk_1_sg_x67,
      d => force_re_output_port_net_x0,
      en => '1',
      rst => '1',
      q => neg_delay0_q_net_x0
    );

  neg_delay1: entity work.xldelay
    generic map (
      latency => 1,
      reg_retiming => 0,
      reset => 0,
      width => 18
    )
    port map (
      ce => ce_1_sg_x67,
      clk => clk_1_sg_x67,
      d => force_re_output_port_net_x1,
      en => '1',
      rst => '1',
      q => neg_delay1_q_net_x0
    );

  neg_delay2: entity work.xldelay
    generic map (
      latency => 1,
      reg_retiming => 0,
      reset => 0,
      width => 18
    )
    port map (
      ce => ce_1_sg_x67,
      clk => clk_1_sg_x67,
      d => force_re_output_port_net_x2,
      en => '1',
      rst => '1',
      q => neg_delay2_q_net_x0
    );

  neg_delay3: entity work.xldelay
    generic map (
      latency => 1,
      reg_retiming => 0,
      reset => 0,
      width => 18
    )
    port map (
      ce => ce_1_sg_x67,
      clk => clk_1_sg_x67,
      d => force_re_output_port_net_x3,
      en => '1',
      rst => '1',
      q => neg_delay3_q_net_x0
    );

  negate0: entity work.negate_06f4d445bc
    port map (
      ce => ce_1_sg_x67,
      clk => clk_1_sg_x67,
      clr => '0',
      ip => force_im_output_port_net_x0,
      op => negate0_op_net_x0
    );

  negate1: entity work.negate_06f4d445bc
    port map (
      ce => ce_1_sg_x67,
      clk => clk_1_sg_x67,
      clr => '0',
      ip => force_im_output_port_net_x1,
      op => negate1_op_net_x0
    );

  negate2: entity work.negate_06f4d445bc
    port map (
      ce => ce_1_sg_x67,
      clk => clk_1_sg_x67,
      clr => '0',
      ip => force_im_output_port_net_x2,
      op => negate2_op_net_x0
    );

  negate3: entity work.negate_06f4d445bc
    port map (
      ce => ce_1_sg_x67,
      clk => clk_1_sg_x67,
      clr => '0',
      ip => force_im_output_port_net_x3,
      op => negate3_op_net_x0
    );

  relational: entity work.relational_cd73dde7d1
    port map (
      a => counter_op_net,
      b => constant3_op_net,
      ce => ce_1_sg_x67,
      clk => clk_1_sg_x67,
      clr => '0',
      op(0) => relational_op_net
    );

  ri_to_c0_e8c0051634: entity work.ri_to_c0_entity_e8c0051634
    port map (
      im => negate0_op_net_x0,
      re => neg_delay0_q_net_x0,
      c => concat_y_net_x0
    );

  ri_to_c1_a819e4f5f3: entity work.ri_to_c0_entity_e8c0051634
    port map (
      im => negate1_op_net_x0,
      re => neg_delay1_q_net_x0,
      c => concat_y_net_x1
    );

  ri_to_c2_1de08b59ab: entity work.ri_to_c0_entity_e8c0051634
    port map (
      im => negate2_op_net_x0,
      re => neg_delay2_q_net_x0,
      c => concat_y_net_x2
    );

  ri_to_c3_476d0cbf51: entity work.ri_to_c0_entity_e8c0051634
    port map (
      im => negate3_op_net_x0,
      re => neg_delay3_q_net_x0,
      c => concat_y_net_x3
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/coarse/fft_wideband_real0/fft_biplex_real_4x0/bi_real_unscr_4x/reorder_even/sync_delay_en"

entity sync_delay_en_entity_71ca922226 is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    en: in std_logic; 
    in_x0: in std_logic; 
    out_x0: out std_logic
  );
end sync_delay_en_entity_71ca922226;

architecture structural of sync_delay_en_entity_71ca922226 is
  signal ce_1_sg_x68: std_logic;
  signal clk_1_sg_x68: std_logic;
  signal constant1_op_net: std_logic_vector(6 downto 0);
  signal constant2_op_net: std_logic_vector(6 downto 0);
  signal constant3_op_net: std_logic;
  signal constant_op_net: std_logic_vector(6 downto 0);
  signal counter_op_net: std_logic_vector(6 downto 0);
  signal logical1_y_net: std_logic;
  signal logical_y_net: std_logic;
  signal mux_y_net_x0: std_logic;
  signal or_y_net_x0: std_logic;
  signal pre_sync_delay_q_net_x0: std_logic;
  signal relational1_op_net: std_logic;
  signal relational_op_net: std_logic;

begin
  ce_1_sg_x68 <= ce_1;
  clk_1_sg_x68 <= clk_1;
  or_y_net_x0 <= en;
  pre_sync_delay_q_net_x0 <= in_x0;
  out_x0 <= mux_y_net_x0;

  constant1: entity work.constant_7244cd602b
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op => constant1_op_net
    );

  constant2: entity work.constant_7b07120b87
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op => constant2_op_net
    );

  constant3: entity work.constant_6293007044
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op(0) => constant3_op_net
    );

  constant_x0: entity work.constant_180df391de
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op => constant_op_net
    );

  counter: entity work.xlcounter_free_c09f12_01
    generic map (
      core_name0 => "cntr_11_0_3ad9dc21603f5ae0",
      op_arith => xlUnsigned,
      op_width => 7
    )
    port map (
      ce => ce_1_sg_x68,
      clk => clk_1_sg_x68,
      clr => '0',
      din => constant2_op_net,
      en(0) => logical1_y_net,
      load(0) => pre_sync_delay_q_net_x0,
      rst => "0",
      op => counter_op_net
    );

  logical: entity work.logical_aacf6e1b0e
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0(0) => pre_sync_delay_q_net_x0,
      d1(0) => relational1_op_net,
      y(0) => logical_y_net
    );

  logical1: entity work.logical_80f90b97d0
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0(0) => logical_y_net,
      d1(0) => or_y_net_x0,
      y(0) => logical1_y_net
    );

  mux: entity work.mux_1bef4ba0e4
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0(0) => pre_sync_delay_q_net_x0,
      d1(0) => relational_op_net,
      sel(0) => constant3_op_net,
      y(0) => mux_y_net_x0
    );

  relational: entity work.relational_9a3978c602
    port map (
      a => constant_op_net,
      b => counter_op_net,
      ce => '0',
      clk => '0',
      clr => '0',
      op(0) => relational_op_net
    );

  relational1: entity work.relational_23065a6aa3
    port map (
      a => counter_op_net,
      b => constant1_op_net,
      ce => '0',
      clk => '0',
      clr => '0',
      op(0) => relational1_op_net
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/coarse/fft_wideband_real0/fft_biplex_real_4x0/bi_real_unscr_4x/reorder_even"

entity reorder_even_entity_358a71e958 is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    din0: in std_logic_vector(35 downto 0); 
    en: in std_logic; 
    sync: in std_logic; 
    dout0: out std_logic_vector(35 downto 0); 
    sync_out: out std_logic
  );
end reorder_even_entity_358a71e958;

architecture structural of reorder_even_entity_358a71e958 is
  signal bram0_data_out_net_x0: std_logic_vector(35 downto 0);
  signal ce_1_sg_x69: std_logic;
  signal clk_1_sg_x69: std_logic;
  signal concat_y_net_x0: std_logic_vector(35 downto 0);
  signal counter_op_net: std_logic_vector(6 downto 0);
  signal delay_d0_q_net: std_logic_vector(5 downto 0);
  signal delay_din0_q_net: std_logic_vector(35 downto 0);
  signal delay_map1_q_net: std_logic_vector(5 downto 0);
  signal delay_sel_q_net: std_logic;
  signal delay_we_q_net: std_logic;
  signal en_even_op_net_x0: std_logic;
  signal map1_data_net: std_logic_vector(5 downto 0);
  signal mux_y_net: std_logic_vector(5 downto 0);
  signal mux_y_net_x0: std_logic;
  signal or_y_net_x0: std_logic;
  signal post_sync_delay_q_net_x0: std_logic;
  signal pre_sync_delay_q_net_x0: std_logic;
  signal slice1_y_net: std_logic;
  signal slice2_y_net: std_logic_vector(5 downto 0);
  signal sync_delay_q_net_x0: std_logic;

begin
  ce_1_sg_x69 <= ce_1;
  clk_1_sg_x69 <= clk_1;
  concat_y_net_x0 <= din0;
  en_even_op_net_x0 <= en;
  sync_delay_q_net_x0 <= sync;
  dout0 <= bram0_data_out_net_x0;
  sync_out <= post_sync_delay_q_net_x0;

  bram0: entity work.xlspram_c09f12_01
    generic map (
      c_address_width => 6,
      c_width => 36,
      core_name0 => "bmg_72_1853928182002eb1",
      latency => 2
    )
    port map (
      addr => mux_y_net,
      ce => ce_1_sg_x69,
      clk => clk_1_sg_x69,
      data_in => delay_din0_q_net,
      en => "1",
      rst => "0",
      we(0) => delay_we_q_net,
      data_out => bram0_data_out_net_x0
    );

  counter: entity work.xlcounter_limit_c09f12_01
    generic map (
      cnt_15_0 => 127,
      cnt_31_16 => 0,
      cnt_47_32 => 0,
      cnt_63_48 => 0,
      core_name0 => "cntr_11_0_aeada998ec385fcd",
      count_limited => 0,
      op_arith => xlUnsigned,
      op_width => 7
    )
    port map (
      ce => ce_1_sg_x69,
      clk => clk_1_sg_x69,
      clr => '0',
      en(0) => en_even_op_net_x0,
      rst(0) => sync_delay_q_net_x0,
      op => counter_op_net
    );

  delay_d0: entity work.delay_0abb1eedfd
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d => slice2_y_net,
      q => delay_d0_q_net
    );

  delay_din0: entity work.xldelay
    generic map (
      latency => 1,
      reg_retiming => 0,
      reset => 0,
      width => 36
    )
    port map (
      ce => ce_1_sg_x69,
      clk => clk_1_sg_x69,
      d => concat_y_net_x0,
      en => '1',
      rst => '1',
      q => delay_din0_q_net
    );

  delay_map1: entity work.delay_0abb1eedfd
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d => map1_data_net,
      q => delay_map1_q_net
    );

  delay_sel: entity work.delay_21355083c1
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d(0) => slice1_y_net,
      q(0) => delay_sel_q_net
    );

  delay_we: entity work.xldelay
    generic map (
      latency => 1,
      reg_retiming => 0,
      reset => 0,
      width => 1
    )
    port map (
      ce => ce_1_sg_x69,
      clk => clk_1_sg_x69,
      d(0) => en_even_op_net_x0,
      en => '1',
      rst => '1',
      q(0) => delay_we_q_net
    );

  map1: entity work.xlsprom_dist_c09f12_01
    generic map (
      addr_width => 6,
      c_address_width => 6,
      c_width => 6,
      core_name0 => "dmg_72_9ddb0dccfe86828e",
      latency => 0
    )
    port map (
      addr => slice2_y_net,
      ce => ce_1_sg_x69,
      clk => clk_1_sg_x69,
      en => "1",
      data => map1_data_net
    );

  mux: entity work.mux_6f25c73c33
    port map (
      ce => ce_1_sg_x69,
      clk => clk_1_sg_x69,
      clr => '0',
      d0 => delay_d0_q_net,
      d1 => delay_map1_q_net,
      sel(0) => delay_sel_q_net,
      y => mux_y_net
    );

  or_x0: entity work.logical_aacf6e1b0e
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0(0) => pre_sync_delay_q_net_x0,
      d1(0) => delay_we_q_net,
      y(0) => or_y_net_x0
    );

  post_sync_delay: entity work.xldelay
    generic map (
      latency => 3,
      reg_retiming => 0,
      reset => 0,
      width => 1
    )
    port map (
      ce => ce_1_sg_x69,
      clk => clk_1_sg_x69,
      d(0) => mux_y_net_x0,
      en => '1',
      rst => '1',
      q(0) => post_sync_delay_q_net_x0
    );

  pre_sync_delay: entity work.xldelay
    generic map (
      latency => 1,
      reg_retiming => 0,
      reset => 0,
      width => 1
    )
    port map (
      ce => ce_1_sg_x69,
      clk => clk_1_sg_x69,
      d(0) => sync_delay_q_net_x0,
      en => '1',
      rst => '1',
      q(0) => pre_sync_delay_q_net_x0
    );

  slice1: entity work.xlslice
    generic map (
      new_lsb => 6,
      new_msb => 6,
      x_width => 7,
      y_width => 1
    )
    port map (
      x => counter_op_net,
      y(0) => slice1_y_net
    );

  slice2: entity work.xlslice
    generic map (
      new_lsb => 0,
      new_msb => 5,
      x_width => 7,
      y_width => 6
    )
    port map (
      x => counter_op_net,
      y => slice2_y_net
    );

  sync_delay_en_71ca922226: entity work.sync_delay_en_entity_71ca922226
    port map (
      ce_1 => ce_1_sg_x69,
      clk_1 => clk_1_sg_x69,
      en => or_y_net_x0,
      in_x0 => pre_sync_delay_q_net_x0,
      out_x0 => mux_y_net_x0
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/coarse/fft_wideband_real0/fft_biplex_real_4x0/bi_real_unscr_4x/reorder_odd"

entity reorder_odd_entity_b977752d33 is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    din0: in std_logic_vector(35 downto 0); 
    en: in std_logic; 
    sync: in std_logic; 
    dout0: out std_logic_vector(35 downto 0)
  );
end reorder_odd_entity_b977752d33;

architecture structural of reorder_odd_entity_b977752d33 is
  signal bram0_data_out_net_x0: std_logic_vector(35 downto 0);
  signal ce_1_sg_x70: std_logic;
  signal clk_1_sg_x70: std_logic;
  signal concat_y_net_x0: std_logic_vector(35 downto 0);
  signal counter_op_net: std_logic_vector(6 downto 0);
  signal delay_d0_q_net: std_logic_vector(5 downto 0);
  signal delay_din0_q_net: std_logic_vector(35 downto 0);
  signal delay_map1_q_net: std_logic_vector(5 downto 0);
  signal delay_sel_q_net: std_logic;
  signal delay_we_q_net: std_logic;
  signal en_odd_op_net_x0: std_logic;
  signal map1_data_net: std_logic_vector(5 downto 0);
  signal mux_y_net: std_logic_vector(5 downto 0);
  signal slice1_y_net: std_logic;
  signal slice2_y_net: std_logic_vector(5 downto 0);
  signal sync_delay_q_net_x1: std_logic;

begin
  ce_1_sg_x70 <= ce_1;
  clk_1_sg_x70 <= clk_1;
  concat_y_net_x0 <= din0;
  en_odd_op_net_x0 <= en;
  sync_delay_q_net_x1 <= sync;
  dout0 <= bram0_data_out_net_x0;

  bram0: entity work.xlspram_c09f12_01
    generic map (
      c_address_width => 6,
      c_width => 36,
      core_name0 => "bmg_72_1853928182002eb1",
      latency => 2
    )
    port map (
      addr => mux_y_net,
      ce => ce_1_sg_x70,
      clk => clk_1_sg_x70,
      data_in => delay_din0_q_net,
      en => "1",
      rst => "0",
      we(0) => delay_we_q_net,
      data_out => bram0_data_out_net_x0
    );

  counter: entity work.xlcounter_limit_c09f12_01
    generic map (
      cnt_15_0 => 127,
      cnt_31_16 => 0,
      cnt_47_32 => 0,
      cnt_63_48 => 0,
      core_name0 => "cntr_11_0_aeada998ec385fcd",
      count_limited => 0,
      op_arith => xlUnsigned,
      op_width => 7
    )
    port map (
      ce => ce_1_sg_x70,
      clk => clk_1_sg_x70,
      clr => '0',
      en(0) => en_odd_op_net_x0,
      rst(0) => sync_delay_q_net_x1,
      op => counter_op_net
    );

  delay_d0: entity work.delay_0abb1eedfd
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d => slice2_y_net,
      q => delay_d0_q_net
    );

  delay_din0: entity work.xldelay
    generic map (
      latency => 1,
      reg_retiming => 0,
      reset => 0,
      width => 36
    )
    port map (
      ce => ce_1_sg_x70,
      clk => clk_1_sg_x70,
      d => concat_y_net_x0,
      en => '1',
      rst => '1',
      q => delay_din0_q_net
    );

  delay_map1: entity work.delay_0abb1eedfd
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d => map1_data_net,
      q => delay_map1_q_net
    );

  delay_sel: entity work.delay_21355083c1
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d(0) => slice1_y_net,
      q(0) => delay_sel_q_net
    );

  delay_we: entity work.xldelay
    generic map (
      latency => 1,
      reg_retiming => 0,
      reset => 0,
      width => 1
    )
    port map (
      ce => ce_1_sg_x70,
      clk => clk_1_sg_x70,
      d(0) => en_odd_op_net_x0,
      en => '1',
      rst => '1',
      q(0) => delay_we_q_net
    );

  map1: entity work.xlsprom_dist_c09f12_01
    generic map (
      addr_width => 6,
      c_address_width => 6,
      c_width => 6,
      core_name0 => "dmg_72_60b1d930b1392bee",
      latency => 0
    )
    port map (
      addr => slice2_y_net,
      ce => ce_1_sg_x70,
      clk => clk_1_sg_x70,
      en => "1",
      data => map1_data_net
    );

  mux: entity work.mux_6f25c73c33
    port map (
      ce => ce_1_sg_x70,
      clk => clk_1_sg_x70,
      clr => '0',
      d0 => delay_d0_q_net,
      d1 => delay_map1_q_net,
      sel(0) => delay_sel_q_net,
      y => mux_y_net
    );

  slice1: entity work.xlslice
    generic map (
      new_lsb => 6,
      new_msb => 6,
      x_width => 7,
      y_width => 1
    )
    port map (
      x => counter_op_net,
      y(0) => slice1_y_net
    );

  slice2: entity work.xlslice
    generic map (
      new_lsb => 0,
      new_msb => 5,
      x_width => 7,
      y_width => 6
    )
    port map (
      x => counter_op_net,
      y => slice2_y_net
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/coarse/fft_wideband_real0/fft_biplex_real_4x0/bi_real_unscr_4x/reorder_out"

entity reorder_out_entity_bd82154bca is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    din0: in std_logic_vector(35 downto 0); 
    din1: in std_logic_vector(35 downto 0); 
    din2: in std_logic_vector(35 downto 0); 
    din3: in std_logic_vector(35 downto 0); 
    en: in std_logic; 
    sync: in std_logic; 
    dout0: out std_logic_vector(35 downto 0); 
    dout1: out std_logic_vector(35 downto 0); 
    dout2: out std_logic_vector(35 downto 0); 
    dout3: out std_logic_vector(35 downto 0)
  );
end reorder_out_entity_bd82154bca;

architecture structural of reorder_out_entity_bd82154bca is
  signal bram0_data_out_net_x0: std_logic_vector(35 downto 0);
  signal bram1_data_out_net_x0: std_logic_vector(35 downto 0);
  signal bram2_data_out_net_x0: std_logic_vector(35 downto 0);
  signal bram3_data_out_net_x0: std_logic_vector(35 downto 0);
  signal ce_1_sg_x71: std_logic;
  signal clk_1_sg_x71: std_logic;
  signal concat_y_net_x4: std_logic_vector(35 downto 0);
  signal concat_y_net_x5: std_logic_vector(35 downto 0);
  signal counter_op_net: std_logic_vector(6 downto 0);
  signal delay_d0_q_net: std_logic_vector(5 downto 0);
  signal delay_din0_q_net: std_logic_vector(35 downto 0);
  signal delay_din1_q_net: std_logic_vector(35 downto 0);
  signal delay_din2_q_net: std_logic_vector(35 downto 0);
  signal delay_din3_q_net: std_logic_vector(35 downto 0);
  signal delay_map1_q_net: std_logic_vector(5 downto 0);
  signal delay_sel_q_net: std_logic;
  signal delay_we_q_net: std_logic;
  signal en_out_op_net_x0: std_logic;
  signal map1_data_net: std_logic_vector(5 downto 0);
  signal mux_y_net: std_logic_vector(5 downto 0);
  signal mux_y_net_x1: std_logic;
  signal single_port_ram_data_out_net_x2: std_logic_vector(35 downto 0);
  signal single_port_ram_data_out_net_x3: std_logic_vector(35 downto 0);
  signal slice1_y_net: std_logic;
  signal slice2_y_net: std_logic_vector(5 downto 0);

begin
  ce_1_sg_x71 <= ce_1;
  clk_1_sg_x71 <= clk_1;
  single_port_ram_data_out_net_x2 <= din0;
  single_port_ram_data_out_net_x3 <= din1;
  concat_y_net_x4 <= din2;
  concat_y_net_x5 <= din3;
  en_out_op_net_x0 <= en;
  mux_y_net_x1 <= sync;
  dout0 <= bram0_data_out_net_x0;
  dout1 <= bram1_data_out_net_x0;
  dout2 <= bram2_data_out_net_x0;
  dout3 <= bram3_data_out_net_x0;

  bram0: entity work.xlspram_c09f12_01
    generic map (
      c_address_width => 6,
      c_width => 36,
      core_name0 => "bmg_72_1853928182002eb1",
      latency => 2
    )
    port map (
      addr => mux_y_net,
      ce => ce_1_sg_x71,
      clk => clk_1_sg_x71,
      data_in => delay_din0_q_net,
      en => "1",
      rst => "0",
      we(0) => delay_we_q_net,
      data_out => bram0_data_out_net_x0
    );

  bram1: entity work.xlspram_c09f12_01
    generic map (
      c_address_width => 6,
      c_width => 36,
      core_name0 => "bmg_72_1853928182002eb1",
      latency => 2
    )
    port map (
      addr => mux_y_net,
      ce => ce_1_sg_x71,
      clk => clk_1_sg_x71,
      data_in => delay_din1_q_net,
      en => "1",
      rst => "0",
      we(0) => delay_we_q_net,
      data_out => bram1_data_out_net_x0
    );

  bram2: entity work.xlspram_c09f12_01
    generic map (
      c_address_width => 6,
      c_width => 36,
      core_name0 => "bmg_72_1853928182002eb1",
      latency => 2
    )
    port map (
      addr => mux_y_net,
      ce => ce_1_sg_x71,
      clk => clk_1_sg_x71,
      data_in => delay_din2_q_net,
      en => "1",
      rst => "0",
      we(0) => delay_we_q_net,
      data_out => bram2_data_out_net_x0
    );

  bram3: entity work.xlspram_c09f12_01
    generic map (
      c_address_width => 6,
      c_width => 36,
      core_name0 => "bmg_72_1853928182002eb1",
      latency => 2
    )
    port map (
      addr => mux_y_net,
      ce => ce_1_sg_x71,
      clk => clk_1_sg_x71,
      data_in => delay_din3_q_net,
      en => "1",
      rst => "0",
      we(0) => delay_we_q_net,
      data_out => bram3_data_out_net_x0
    );

  counter: entity work.xlcounter_limit_c09f12_01
    generic map (
      cnt_15_0 => 127,
      cnt_31_16 => 0,
      cnt_47_32 => 0,
      cnt_63_48 => 0,
      core_name0 => "cntr_11_0_aeada998ec385fcd",
      count_limited => 0,
      op_arith => xlUnsigned,
      op_width => 7
    )
    port map (
      ce => ce_1_sg_x71,
      clk => clk_1_sg_x71,
      clr => '0',
      en(0) => en_out_op_net_x0,
      rst(0) => mux_y_net_x1,
      op => counter_op_net
    );

  delay_d0: entity work.delay_0abb1eedfd
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d => slice2_y_net,
      q => delay_d0_q_net
    );

  delay_din0: entity work.xldelay
    generic map (
      latency => 1,
      reg_retiming => 0,
      reset => 0,
      width => 36
    )
    port map (
      ce => ce_1_sg_x71,
      clk => clk_1_sg_x71,
      d => single_port_ram_data_out_net_x2,
      en => '1',
      rst => '1',
      q => delay_din0_q_net
    );

  delay_din1: entity work.xldelay
    generic map (
      latency => 1,
      reg_retiming => 0,
      reset => 0,
      width => 36
    )
    port map (
      ce => ce_1_sg_x71,
      clk => clk_1_sg_x71,
      d => single_port_ram_data_out_net_x3,
      en => '1',
      rst => '1',
      q => delay_din1_q_net
    );

  delay_din2: entity work.xldelay
    generic map (
      latency => 1,
      reg_retiming => 0,
      reset => 0,
      width => 36
    )
    port map (
      ce => ce_1_sg_x71,
      clk => clk_1_sg_x71,
      d => concat_y_net_x4,
      en => '1',
      rst => '1',
      q => delay_din2_q_net
    );

  delay_din3: entity work.xldelay
    generic map (
      latency => 1,
      reg_retiming => 0,
      reset => 0,
      width => 36
    )
    port map (
      ce => ce_1_sg_x71,
      clk => clk_1_sg_x71,
      d => concat_y_net_x5,
      en => '1',
      rst => '1',
      q => delay_din3_q_net
    );

  delay_map1: entity work.delay_0abb1eedfd
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d => map1_data_net,
      q => delay_map1_q_net
    );

  delay_sel: entity work.delay_21355083c1
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d(0) => slice1_y_net,
      q(0) => delay_sel_q_net
    );

  delay_we: entity work.xldelay
    generic map (
      latency => 1,
      reg_retiming => 0,
      reset => 0,
      width => 1
    )
    port map (
      ce => ce_1_sg_x71,
      clk => clk_1_sg_x71,
      d(0) => en_out_op_net_x0,
      en => '1',
      rst => '1',
      q(0) => delay_we_q_net
    );

  map1: entity work.xlsprom_dist_c09f12_01
    generic map (
      addr_width => 6,
      c_address_width => 6,
      c_width => 6,
      core_name0 => "dmg_72_8cacf5ca230175f7",
      latency => 0
    )
    port map (
      addr => slice2_y_net,
      ce => ce_1_sg_x71,
      clk => clk_1_sg_x71,
      en => "1",
      data => map1_data_net
    );

  mux: entity work.mux_6f25c73c33
    port map (
      ce => ce_1_sg_x71,
      clk => clk_1_sg_x71,
      clr => '0',
      d0 => delay_d0_q_net,
      d1 => delay_map1_q_net,
      sel(0) => delay_sel_q_net,
      y => mux_y_net
    );

  slice1: entity work.xlslice
    generic map (
      new_lsb => 6,
      new_msb => 6,
      x_width => 7,
      y_width => 1
    )
    port map (
      x => counter_op_net,
      y(0) => slice1_y_net
    );

  slice2: entity work.xlslice
    generic map (
      new_lsb => 0,
      new_msb => 5,
      x_width => 7,
      y_width => 6
    )
    port map (
      x => counter_op_net,
      y => slice2_y_net
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/coarse/fft_wideband_real0/fft_biplex_real_4x0/bi_real_unscr_4x/sync_delay_ctr"

entity sync_delay_ctr_entity_c266c51a66 is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    in_x0: in std_logic; 
    out_x0: out std_logic
  );
end sync_delay_ctr_entity_c266c51a66;

architecture structural of sync_delay_ctr_entity_c266c51a66 is
  signal ce_1_sg_x72: std_logic;
  signal clk_1_sg_x72: std_logic;
  signal constant1_op_net: std_logic_vector(6 downto 0);
  signal constant2_op_net: std_logic_vector(6 downto 0);
  signal constant3_op_net: std_logic;
  signal constant_op_net: std_logic_vector(6 downto 0);
  signal counter_op_net: std_logic_vector(6 downto 0);
  signal logical_y_net: std_logic;
  signal mux_y_net_x2: std_logic;
  signal post_sync_delay_q_net_x1: std_logic;
  signal relational1_op_net: std_logic;
  signal relational_op_net: std_logic;

begin
  ce_1_sg_x72 <= ce_1;
  clk_1_sg_x72 <= clk_1;
  post_sync_delay_q_net_x1 <= in_x0;
  out_x0 <= mux_y_net_x2;

  constant1: entity work.constant_7244cd602b
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op => constant1_op_net
    );

  constant2: entity work.constant_09b32c3b22
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op => constant2_op_net
    );

  constant3: entity work.constant_6293007044
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op(0) => constant3_op_net
    );

  constant_x0: entity work.constant_180df391de
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op => constant_op_net
    );

  counter: entity work.xlcounter_free_c09f12_01
    generic map (
      core_name0 => "cntr_11_0_3ad9dc21603f5ae0",
      op_arith => xlUnsigned,
      op_width => 7
    )
    port map (
      ce => ce_1_sg_x72,
      clk => clk_1_sg_x72,
      clr => '0',
      din => constant2_op_net,
      en(0) => logical_y_net,
      load(0) => post_sync_delay_q_net_x1,
      rst => "0",
      op => counter_op_net
    );

  logical: entity work.logical_aacf6e1b0e
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0(0) => post_sync_delay_q_net_x1,
      d1(0) => relational1_op_net,
      y(0) => logical_y_net
    );

  mux: entity work.mux_1bef4ba0e4
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0(0) => post_sync_delay_q_net_x1,
      d1(0) => relational_op_net,
      sel(0) => constant3_op_net,
      y(0) => mux_y_net_x2
    );

  relational: entity work.relational_9a3978c602
    port map (
      a => constant_op_net,
      b => counter_op_net,
      ce => '0',
      clk => '0',
      clr => '0',
      op(0) => relational_op_net
    );

  relational1: entity work.relational_23065a6aa3
    port map (
      a => counter_op_net,
      b => constant1_op_net,
      ce => '0',
      clk => '0',
      clr => '0',
      op(0) => relational1_op_net
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/coarse/fft_wideband_real0/fft_biplex_real_4x0/bi_real_unscr_4x"

entity bi_real_unscr_4x_entity_3b8b394f08 is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    even: in std_logic_vector(35 downto 0); 
    odd: in std_logic_vector(35 downto 0); 
    sync: in std_logic; 
    pol1_out: out std_logic_vector(35 downto 0); 
    pol2_out: out std_logic_vector(35 downto 0); 
    pol3_out: out std_logic_vector(35 downto 0); 
    pol4_out: out std_logic_vector(35 downto 0); 
    sync_out: out std_logic
  );
end bi_real_unscr_4x_entity_3b8b394f08;

architecture structural of bi_real_unscr_4x_entity_3b8b394f08 is
  signal bram0_data_out_net_x0: std_logic_vector(35 downto 0);
  signal bram0_data_out_net_x1: std_logic_vector(35 downto 0);
  signal bram0_data_out_net_x2: std_logic_vector(35 downto 0);
  signal bram1_data_out_net_x0: std_logic_vector(35 downto 0);
  signal bram2_data_out_net_x0: std_logic_vector(35 downto 0);
  signal bram3_data_out_net_x0: std_logic_vector(35 downto 0);
  signal ce_1_sg_x73: std_logic;
  signal clk_1_sg_x73: std_logic;
  signal concat_y_net_x3: std_logic_vector(35 downto 0);
  signal concat_y_net_x4: std_logic_vector(35 downto 0);
  signal concat_y_net_x5: std_logic_vector(35 downto 0);
  signal concat_y_net_x6: std_logic_vector(35 downto 0);
  signal concat_y_net_x8: std_logic_vector(35 downto 0);
  signal concat_y_net_x9: std_logic_vector(35 downto 0);
  signal constant0_op_net: std_logic_vector(6 downto 0);
  signal constant1_op_net: std_logic_vector(6 downto 0);
  signal counter0_op_net: std_logic_vector(6 downto 0);
  signal delay2_q_net_x2: std_logic;
  signal delay_ms1_q_net_x0: std_logic;
  signal delay_ms2_q_net_x0: std_logic_vector(35 downto 0);
  signal delay_ms3_q_net_x1: std_logic_vector(35 downto 0);
  signal delay_ms4_q_net_x0: std_logic_vector(35 downto 0);
  signal delay_ms5_q_net_x1: std_logic_vector(35 downto 0);
  signal delay_ms6_q_net_x0: std_logic_vector(35 downto 0);
  signal delay_ms7_q_net_x1: std_logic_vector(35 downto 0);
  signal delay_ms8_q_net_x0: std_logic_vector(35 downto 0);
  signal delay_ms9_q_net_x1: std_logic_vector(35 downto 0);
  signal delay_q_net: std_logic_vector(35 downto 0);
  signal en_even_op_net_x0: std_logic;
  signal en_odd_op_net_x0: std_logic;
  signal en_out_op_net_x0: std_logic;
  signal mux0_y_net_x1: std_logic_vector(35 downto 0);
  signal mux1_y_net_x1: std_logic_vector(35 downto 0);
  signal mux1_y_net_x3: std_logic_vector(35 downto 0);
  signal mux2_y_net_x1: std_logic_vector(35 downto 0);
  signal mux2_y_net_x3: std_logic_vector(35 downto 0);
  signal mux3_y_net_x1: std_logic_vector(35 downto 0);
  signal mux3_y_net_x3: std_logic_vector(35 downto 0);
  signal mux_y_net_x2: std_logic;
  signal mux_y_net_x3: std_logic_vector(35 downto 0);
  signal post_sync_delay_q_net_x1: std_logic;
  signal relational0_op_net: std_logic;
  signal relational1_op_net: std_logic;
  signal single_port_ram_data_out_net_x2: std_logic_vector(35 downto 0);
  signal single_port_ram_data_out_net_x3: std_logic_vector(35 downto 0);
  signal sync_delay_q_net_x2: std_logic;

begin
  ce_1_sg_x73 <= ce_1;
  clk_1_sg_x73 <= clk_1;
  concat_y_net_x8 <= even;
  concat_y_net_x9 <= odd;
  sync_delay_q_net_x2 <= sync;
  pol1_out <= mux_y_net_x3;
  pol2_out <= mux1_y_net_x3;
  pol3_out <= mux2_y_net_x3;
  pol4_out <= mux3_y_net_x3;
  sync_out <= delay2_q_net_x2;

  constant0: entity work.constant_7b07120b87
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op => constant0_op_net
    );

  constant1: entity work.constant_7244cd602b
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op => constant1_op_net
    );

  counter0: entity work.xlcounter_free_c09f12_01
    generic map (
      core_name0 => "cntr_11_0_aeada998ec385fcd",
      op_arith => xlUnsigned,
      op_width => 7
    )
    port map (
      ce => ce_1_sg_x73,
      clk => clk_1_sg_x73,
      clr => '0',
      en => "1",
      rst(0) => post_sync_delay_q_net_x1,
      op => counter0_op_net
    );

  delay: entity work.xldelay
    generic map (
      latency => 1,
      reg_retiming => 0,
      reset => 0,
      width => 36
    )
    port map (
      ce => ce_1_sg_x73,
      clk => clk_1_sg_x73,
      d => bram0_data_out_net_x1,
      en => '1',
      rst => '1',
      q => delay_q_net
    );

  delay_bram0_132f1fc19a: entity work.delay_bram0_entity_132f1fc19a
    port map (
      ce_1 => ce_1_sg_x73,
      clk_1 => clk_1_sg_x73,
      in1 => concat_y_net_x3,
      out1 => single_port_ram_data_out_net_x2
    );

  delay_bram1_d6ef33aa84: entity work.delay_bram0_entity_132f1fc19a
    port map (
      ce_1 => ce_1_sg_x73,
      clk_1 => clk_1_sg_x73,
      in1 => concat_y_net_x4,
      out1 => single_port_ram_data_out_net_x3
    );

  delay_ms1: entity work.xldelay
    generic map (
      latency => 1,
      reg_retiming => 0,
      reset => 0,
      width => 1
    )
    port map (
      ce => ce_1_sg_x73,
      clk => clk_1_sg_x73,
      d(0) => mux_y_net_x2,
      en => '1',
      rst => '1',
      q(0) => delay_ms1_q_net_x0
    );

  delay_ms2: entity work.xldelay
    generic map (
      latency => 1,
      reg_retiming => 0,
      reset => 0,
      width => 36
    )
    port map (
      ce => ce_1_sg_x73,
      clk => clk_1_sg_x73,
      d => single_port_ram_data_out_net_x2,
      en => '1',
      rst => '1',
      q => delay_ms2_q_net_x0
    );

  delay_ms3: entity work.xldelay
    generic map (
      latency => 1,
      reg_retiming => 0,
      reset => 0,
      width => 36
    )
    port map (
      ce => ce_1_sg_x73,
      clk => clk_1_sg_x73,
      d => bram0_data_out_net_x2,
      en => '1',
      rst => '1',
      q => delay_ms3_q_net_x1
    );

  delay_ms4: entity work.xldelay
    generic map (
      latency => 1,
      reg_retiming => 0,
      reset => 0,
      width => 36
    )
    port map (
      ce => ce_1_sg_x73,
      clk => clk_1_sg_x73,
      d => single_port_ram_data_out_net_x3,
      en => '1',
      rst => '1',
      q => delay_ms4_q_net_x0
    );

  delay_ms5: entity work.xldelay
    generic map (
      latency => 1,
      reg_retiming => 0,
      reset => 0,
      width => 36
    )
    port map (
      ce => ce_1_sg_x73,
      clk => clk_1_sg_x73,
      d => bram1_data_out_net_x0,
      en => '1',
      rst => '1',
      q => delay_ms5_q_net_x1
    );

  delay_ms6: entity work.xldelay
    generic map (
      latency => 1,
      reg_retiming => 0,
      reset => 0,
      width => 36
    )
    port map (
      ce => ce_1_sg_x73,
      clk => clk_1_sg_x73,
      d => concat_y_net_x5,
      en => '1',
      rst => '1',
      q => delay_ms6_q_net_x0
    );

  delay_ms7: entity work.xldelay
    generic map (
      latency => 1,
      reg_retiming => 0,
      reset => 0,
      width => 36
    )
    port map (
      ce => ce_1_sg_x73,
      clk => clk_1_sg_x73,
      d => bram2_data_out_net_x0,
      en => '1',
      rst => '1',
      q => delay_ms7_q_net_x1
    );

  delay_ms8: entity work.xldelay
    generic map (
      latency => 1,
      reg_retiming => 0,
      reset => 0,
      width => 36
    )
    port map (
      ce => ce_1_sg_x73,
      clk => clk_1_sg_x73,
      d => concat_y_net_x6,
      en => '1',
      rst => '1',
      q => delay_ms8_q_net_x0
    );

  delay_ms9: entity work.xldelay
    generic map (
      latency => 1,
      reg_retiming => 0,
      reset => 0,
      width => 36
    )
    port map (
      ce => ce_1_sg_x73,
      clk => clk_1_sg_x73,
      d => bram3_data_out_net_x0,
      en => '1',
      rst => '1',
      q => delay_ms9_q_net_x1
    );

  en_even: entity work.constant_6293007044
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op(0) => en_even_op_net_x0
    );

  en_odd: entity work.constant_6293007044
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op(0) => en_odd_op_net_x0
    );

  en_out: entity work.constant_6293007044
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op(0) => en_out_op_net_x0
    );

  hilbert_dsp48e0_06dac88fd7: entity work.hilbert_dsp48e0_entity_06dac88fd7
    port map (
      a => mux0_y_net_x1,
      b => mux1_y_net_x1,
      ce_1 => ce_1_sg_x73,
      clk_1 => clk_1_sg_x73,
      even => concat_y_net_x3,
      odd => concat_y_net_x4
    );

  hilbert_dsp48e1_806152ec77: entity work.hilbert_dsp48e0_entity_06dac88fd7
    port map (
      a => mux2_y_net_x1,
      b => mux3_y_net_x1,
      ce_1 => ce_1_sg_x73,
      clk_1 => clk_1_sg_x73,
      even => concat_y_net_x5,
      odd => concat_y_net_x6
    );

  mirror_spectrum_42d1e77f31: entity work.mirror_spectrum_entity_42d1e77f31
    port map (
      ce_1 => ce_1_sg_x73,
      clk_1 => clk_1_sg_x73,
      din0 => delay_ms2_q_net_x0,
      din1 => delay_ms4_q_net_x0,
      din2 => delay_ms6_q_net_x0,
      din3 => delay_ms8_q_net_x0,
      reo_in0 => delay_ms3_q_net_x1,
      reo_in1 => delay_ms5_q_net_x1,
      reo_in2 => delay_ms7_q_net_x1,
      reo_in3 => delay_ms9_q_net_x1,
      sync => delay_ms1_q_net_x0,
      dout0 => mux_y_net_x3,
      dout1 => mux1_y_net_x3,
      dout2 => mux2_y_net_x3,
      dout3 => mux3_y_net_x3,
      sync_out => delay2_q_net_x2
    );

  mux0: entity work.mux_fca786f2ff
    port map (
      ce => ce_1_sg_x73,
      clk => clk_1_sg_x73,
      clr => '0',
      d0 => bram0_data_out_net_x0,
      d1 => delay_q_net,
      sel(0) => relational0_op_net,
      y => mux0_y_net_x1
    );

  mux1: entity work.mux_fca786f2ff
    port map (
      ce => ce_1_sg_x73,
      clk => clk_1_sg_x73,
      clr => '0',
      d0 => delay_q_net,
      d1 => bram0_data_out_net_x0,
      sel(0) => relational1_op_net,
      y => mux1_y_net_x1
    );

  mux2: entity work.mux_fca786f2ff
    port map (
      ce => ce_1_sg_x73,
      clk => clk_1_sg_x73,
      clr => '0',
      d0 => bram0_data_out_net_x0,
      d1 => delay_q_net,
      sel(0) => relational1_op_net,
      y => mux2_y_net_x1
    );

  mux3: entity work.mux_fca786f2ff
    port map (
      ce => ce_1_sg_x73,
      clk => clk_1_sg_x73,
      clr => '0',
      d0 => delay_q_net,
      d1 => bram0_data_out_net_x0,
      sel(0) => relational0_op_net,
      y => mux3_y_net_x1
    );

  relational0: entity work.relational_9a3978c602
    port map (
      a => constant0_op_net,
      b => counter0_op_net,
      ce => '0',
      clk => '0',
      clr => '0',
      op(0) => relational0_op_net
    );

  relational1: entity work.relational_9a3978c602
    port map (
      a => counter0_op_net,
      b => constant1_op_net,
      ce => '0',
      clk => '0',
      clr => '0',
      op(0) => relational1_op_net
    );

  reorder_even_358a71e958: entity work.reorder_even_entity_358a71e958
    port map (
      ce_1 => ce_1_sg_x73,
      clk_1 => clk_1_sg_x73,
      din0 => concat_y_net_x8,
      en => en_even_op_net_x0,
      sync => sync_delay_q_net_x2,
      dout0 => bram0_data_out_net_x0,
      sync_out => post_sync_delay_q_net_x1
    );

  reorder_odd_b977752d33: entity work.reorder_odd_entity_b977752d33
    port map (
      ce_1 => ce_1_sg_x73,
      clk_1 => clk_1_sg_x73,
      din0 => concat_y_net_x9,
      en => en_odd_op_net_x0,
      sync => sync_delay_q_net_x2,
      dout0 => bram0_data_out_net_x1
    );

  reorder_out_bd82154bca: entity work.reorder_out_entity_bd82154bca
    port map (
      ce_1 => ce_1_sg_x73,
      clk_1 => clk_1_sg_x73,
      din0 => single_port_ram_data_out_net_x2,
      din1 => single_port_ram_data_out_net_x3,
      din2 => concat_y_net_x5,
      din3 => concat_y_net_x6,
      en => en_out_op_net_x0,
      sync => mux_y_net_x2,
      dout0 => bram0_data_out_net_x2,
      dout1 => bram1_data_out_net_x0,
      dout2 => bram2_data_out_net_x0,
      dout3 => bram3_data_out_net_x0
    );

  sync_delay_ctr_c266c51a66: entity work.sync_delay_ctr_entity_c266c51a66
    port map (
      ce_1 => ce_1_sg_x73,
      clk_1 => clk_1_sg_x73,
      in_x0 => post_sync_delay_q_net_x1,
      out_x0 => mux_y_net_x2
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/coarse/fft_wideband_real0/fft_biplex_real_4x0/biplex_core/fft_stage_1/butterfly_direct/cadd"

entity cadd_entity_517d36a131 is
  port (
    a_im: in std_logic_vector(17 downto 0); 
    a_re: in std_logic_vector(17 downto 0); 
    b_im: in std_logic_vector(17 downto 0); 
    b_re: in std_logic_vector(17 downto 0); 
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    c_im: out std_logic_vector(18 downto 0); 
    c_re: out std_logic_vector(18 downto 0)
  );
end cadd_entity_517d36a131;

architecture structural of cadd_entity_517d36a131 is
  signal alumode_op_net: std_logic_vector(3 downto 0);
  signal carryin_op_net: std_logic;
  signal carryinsel_op_net: std_logic_vector(2 downto 0);
  signal cast_c_im_dout_net_x0: std_logic_vector(18 downto 0);
  signal cast_c_re_dout_net_x0: std_logic_vector(18 downto 0);
  signal ce_1_sg_x74: std_logic;
  signal clk_1_sg_x74: std_logic;
  signal concat_a_y_net: std_logic_vector(47 downto 0);
  signal concat_b_y_net: std_logic_vector(47 downto 0);
  signal dsp48e_p_net: std_logic_vector(47 downto 0);
  signal force_im_output_port_net_x1: std_logic_vector(17 downto 0);
  signal force_im_output_port_net_x2: std_logic_vector(17 downto 0);
  signal force_re_output_port_net_x1: std_logic_vector(17 downto 0);
  signal force_re_output_port_net_x2: std_logic_vector(17 downto 0);
  signal opmode_op_net: std_logic_vector(6 downto 0);
  signal realign_a_im_dout_net: std_logic_vector(23 downto 0);
  signal realign_a_re_dout_net: std_logic_vector(23 downto 0);
  signal realign_b_im_dout_net: std_logic_vector(23 downto 0);
  signal realign_b_re_dout_net: std_logic_vector(23 downto 0);
  signal reinterp_a_im_output_port_net: std_logic_vector(23 downto 0);
  signal reinterp_a_re_output_port_net: std_logic_vector(23 downto 0);
  signal reinterp_b_im_output_port_net: std_logic_vector(23 downto 0);
  signal reinterp_b_re_output_port_net: std_logic_vector(23 downto 0);
  signal reinterp_c_im_output_port_net: std_logic_vector(23 downto 0);
  signal reinterp_c_re_output_port_net: std_logic_vector(23 downto 0);
  signal reinterpret_a_output_port_net: std_logic_vector(29 downto 0);
  signal reinterpret_b_output_port_net: std_logic_vector(17 downto 0);
  signal reinterpret_c_output_port_net: std_logic_vector(47 downto 0);
  signal slice_a_y_net: std_logic_vector(29 downto 0);
  signal slice_b_y_net: std_logic_vector(17 downto 0);
  signal slice_c_im_y_net: std_logic_vector(23 downto 0);
  signal slice_c_re_y_net: std_logic_vector(23 downto 0);

begin
  force_im_output_port_net_x1 <= a_im;
  force_re_output_port_net_x1 <= a_re;
  force_im_output_port_net_x2 <= b_im;
  force_re_output_port_net_x2 <= b_re;
  ce_1_sg_x74 <= ce_1;
  clk_1_sg_x74 <= clk_1;
  c_im <= cast_c_im_dout_net_x0;
  c_re <= cast_c_re_dout_net_x0;

  alumode: entity work.constant_4c449dd556
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op => alumode_op_net
    );

  carryin: entity work.constant_963ed6358a
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op(0) => carryin_op_net
    );

  carryinsel: entity work.constant_822933f89b
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op => carryinsel_op_net
    );

  cast_c_im: entity work.xlconvert
    generic map (
      bool_conversion => 0,
      din_arith => 2,
      din_bin_pt => 21,
      din_width => 24,
      dout_arith => 2,
      dout_bin_pt => 17,
      dout_width => 19,
      latency => 0,
      overflow => xlWrap,
      quantization => xlTruncate
    )
    port map (
      ce => ce_1_sg_x74,
      clk => clk_1_sg_x74,
      clr => '0',
      din => reinterp_c_im_output_port_net,
      en => "1",
      dout => cast_c_im_dout_net_x0
    );

  cast_c_re: entity work.xlconvert
    generic map (
      bool_conversion => 0,
      din_arith => 2,
      din_bin_pt => 21,
      din_width => 24,
      dout_arith => 2,
      dout_bin_pt => 17,
      dout_width => 19,
      latency => 0,
      overflow => xlWrap,
      quantization => xlTruncate
    )
    port map (
      ce => ce_1_sg_x74,
      clk => clk_1_sg_x74,
      clr => '0',
      din => reinterp_c_re_output_port_net,
      en => "1",
      dout => cast_c_re_dout_net_x0
    );

  concat_a: entity work.concat_b57c4be2de
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      in0 => reinterp_a_re_output_port_net,
      in1 => reinterp_a_im_output_port_net,
      y => concat_a_y_net
    );

  concat_b: entity work.concat_b57c4be2de
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      in0 => reinterp_b_re_output_port_net,
      in1 => reinterp_b_im_output_port_net,
      y => concat_b_y_net
    );

  dsp48e: entity work.xldsp48e
    generic map (
      a_input => "DIRECT",
      acascreg => 1,
      alumodereg => 1,
      areg => 1,
      autoreset_pattern_detect => FALSE,
      autoreset_pattern_detect_optinv => "MATCH",
      b_input => "DIRECT",
      bcascreg => 1,
      breg => 1,
      carryinreg => 1,
      carryinselreg => 1,
      carryout_width => 4,
      creg => 1,
      mreg => 1,
      opmodereg => 1,
      preg => 1,
      sel_mask => "MASK",
      sel_pattern => "PATTERN",
      use_c_port => 1,
      use_mult => "MULT_S",
      use_op => 0,
      use_pattern_detect => "NO_PATDET",
      use_simd => "TWO24"
    )
    port map (
      a => reinterpret_a_output_port_net,
      alumode => alumode_op_net,
      b => reinterpret_b_output_port_net,
      c => reinterpret_c_output_port_net,
      carryin(0) => carryin_op_net,
      carryinsel => carryinsel_op_net,
      ce => ce_1_sg_x74,
      cea1 => "1",
      cea2 => "1",
      cealumode => "1",
      ceb1 => "1",
      ceb2 => "1",
      cec => "1",
      cecarryin => "1",
      cectrl => "1",
      cem => "1",
      cemultcarryin => "1",
      cep => "1",
      clk => clk_1_sg_x74,
      en => "1",
      opmode => opmode_op_net,
      rst => "0",
      rsta => "0",
      rstalumode => "0",
      rstb => "0",
      rstc => "0",
      rstcarryin => "0",
      rstctrl => "0",
      rstm => "0",
      rstp => "0",
      p => dsp48e_p_net
    );

  opmode: entity work.constant_270746ab47
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op => opmode_op_net
    );

  realign_a_im: entity work.xlconvert
    generic map (
      bool_conversion => 0,
      din_arith => 2,
      din_bin_pt => 17,
      din_width => 18,
      dout_arith => 2,
      dout_bin_pt => 21,
      dout_width => 24,
      latency => 0,
      overflow => xlWrap,
      quantization => xlTruncate
    )
    port map (
      ce => ce_1_sg_x74,
      clk => clk_1_sg_x74,
      clr => '0',
      din => force_im_output_port_net_x1,
      en => "1",
      dout => realign_a_im_dout_net
    );

  realign_a_re: entity work.xlconvert
    generic map (
      bool_conversion => 0,
      din_arith => 2,
      din_bin_pt => 17,
      din_width => 18,
      dout_arith => 2,
      dout_bin_pt => 21,
      dout_width => 24,
      latency => 0,
      overflow => xlWrap,
      quantization => xlTruncate
    )
    port map (
      ce => ce_1_sg_x74,
      clk => clk_1_sg_x74,
      clr => '0',
      din => force_re_output_port_net_x1,
      en => "1",
      dout => realign_a_re_dout_net
    );

  realign_b_im: entity work.xlconvert
    generic map (
      bool_conversion => 0,
      din_arith => 2,
      din_bin_pt => 17,
      din_width => 18,
      dout_arith => 2,
      dout_bin_pt => 21,
      dout_width => 24,
      latency => 0,
      overflow => xlWrap,
      quantization => xlTruncate
    )
    port map (
      ce => ce_1_sg_x74,
      clk => clk_1_sg_x74,
      clr => '0',
      din => force_im_output_port_net_x2,
      en => "1",
      dout => realign_b_im_dout_net
    );

  realign_b_re: entity work.xlconvert
    generic map (
      bool_conversion => 0,
      din_arith => 2,
      din_bin_pt => 17,
      din_width => 18,
      dout_arith => 2,
      dout_bin_pt => 21,
      dout_width => 24,
      latency => 0,
      overflow => xlWrap,
      quantization => xlTruncate
    )
    port map (
      ce => ce_1_sg_x74,
      clk => clk_1_sg_x74,
      clr => '0',
      din => force_re_output_port_net_x2,
      en => "1",
      dout => realign_b_re_dout_net
    );

  reinterp_a_im: entity work.reinterpret_3fb4604c01
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => realign_a_im_dout_net,
      output_port => reinterp_a_im_output_port_net
    );

  reinterp_a_re: entity work.reinterpret_3fb4604c01
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => realign_a_re_dout_net,
      output_port => reinterp_a_re_output_port_net
    );

  reinterp_b_im: entity work.reinterpret_3fb4604c01
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => realign_b_im_dout_net,
      output_port => reinterp_b_im_output_port_net
    );

  reinterp_b_re: entity work.reinterpret_3fb4604c01
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => realign_b_re_dout_net,
      output_port => reinterp_b_re_output_port_net
    );

  reinterp_c_im: entity work.reinterpret_4bf1ad328a
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => slice_c_im_y_net,
      output_port => reinterp_c_im_output_port_net
    );

  reinterp_c_re: entity work.reinterpret_4bf1ad328a
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => slice_c_re_y_net,
      output_port => reinterp_c_re_output_port_net
    );

  reinterpret_a: entity work.reinterpret_eb03bc3377
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => slice_a_y_net,
      output_port => reinterpret_a_output_port_net
    );

  reinterpret_b: entity work.reinterpret_9a0fa0f632
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => slice_b_y_net,
      output_port => reinterpret_b_output_port_net
    );

  reinterpret_c: entity work.reinterpret_7ea107432a
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => concat_a_y_net,
      output_port => reinterpret_c_output_port_net
    );

  slice_a: entity work.xlslice
    generic map (
      new_lsb => 18,
      new_msb => 47,
      x_width => 48,
      y_width => 30
    )
    port map (
      x => concat_b_y_net,
      y => slice_a_y_net
    );

  slice_b: entity work.xlslice
    generic map (
      new_lsb => 0,
      new_msb => 17,
      x_width => 48,
      y_width => 18
    )
    port map (
      x => concat_b_y_net,
      y => slice_b_y_net
    );

  slice_c_im: entity work.xlslice
    generic map (
      new_lsb => 0,
      new_msb => 23,
      x_width => 48,
      y_width => 24
    )
    port map (
      x => dsp48e_p_net,
      y => slice_c_im_y_net
    );

  slice_c_re: entity work.xlslice
    generic map (
      new_lsb => 24,
      new_msb => 47,
      x_width => 48,
      y_width => 24
    )
    port map (
      x => dsp48e_p_net,
      y => slice_c_re_y_net
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/coarse/fft_wideband_real0/fft_biplex_real_4x0/biplex_core/fft_stage_1/butterfly_direct/convert_of0/convert"

entity convert_entity_70860c9991 is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    in_x0: in std_logic_vector(19 downto 0); 
    out_x0: out std_logic_vector(17 downto 0)
  );
end convert_entity_70860c9991;

architecture structural of convert_entity_70860c9991 is
  signal adder_s_net_x0: std_logic_vector(17 downto 0);
  signal almost_half_op_net: std_logic_vector(18 downto 0);
  signal bit_y_net: std_logic;
  signal ce_1_sg_x75: std_logic;
  signal clk_1_sg_x75: std_logic;
  signal concat_y_net: std_logic_vector(20 downto 0);
  signal constant_op_net: std_logic;
  signal force1_output_port_net: std_logic_vector(20 downto 0);
  signal force2_output_port_net: std_logic_vector(18 downto 0);
  signal mux0_y_net_x0: std_logic_vector(19 downto 0);
  signal reinterpret_output_port_net: std_logic_vector(19 downto 0);
  signal tweak_op_y_net: std_logic;

begin
  ce_1_sg_x75 <= ce_1;
  clk_1_sg_x75 <= clk_1;
  mux0_y_net_x0 <= in_x0;
  out_x0 <= adder_s_net_x0;

  adder: entity work.addsub_8ea27c0b26
    port map (
      a => force1_output_port_net,
      b => force2_output_port_net,
      ce => ce_1_sg_x75,
      clk => clk_1_sg_x75,
      clr => '0',
      s => adder_s_net_x0
    );

  almost_half: entity work.constant_4709ea49b5
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op => almost_half_op_net
    );

  bit: entity work.xlslice
    generic map (
      new_lsb => 1,
      new_msb => 1,
      x_width => 20,
      y_width => 1
    )
    port map (
      x => mux0_y_net_x0,
      y(0) => bit_y_net
    );

  concat: entity work.concat_c615d93998
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      in0 => reinterpret_output_port_net,
      in1(0) => tweak_op_y_net,
      y => concat_y_net
    );

  constant_x0: entity work.constant_6293007044
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op(0) => constant_op_net
    );

  force1: entity work.reinterpret_d357e69fa3
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => concat_y_net,
      output_port => force1_output_port_net
    );

  force2: entity work.reinterpret_d2180c9169
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => almost_half_op_net,
      output_port => force2_output_port_net
    );

  reinterpret: entity work.reinterpret_4a8cbc85ce
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => mux0_y_net_x0,
      output_port => reinterpret_output_port_net
    );

  tweak_op: entity work.logical_938d99ac11
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0(0) => bit_y_net,
      d1(0) => constant_op_net,
      y(0) => tweak_op_y_net
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/coarse/fft_wideband_real0/fft_biplex_real_4x0/biplex_core/fft_stage_1/butterfly_direct/convert_of0"

entity convert_of0_entity_269fb2de1a is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    din: in std_logic_vector(19 downto 0); 
    dout: out std_logic_vector(17 downto 0); 
    of_x0: out std_logic
  );
end convert_of0_entity_269fb2de1a;

architecture structural of convert_of0_entity_269fb2de1a is
  signal adder_s_net_x1: std_logic_vector(17 downto 0);
  signal all_0s_y_net: std_logic;
  signal all_1s_y_net: std_logic;
  signal and_y_net_x0: std_logic;
  signal ce_1_sg_x76: std_logic;
  signal clk_1_sg_x76: std_logic;
  signal invert1_op_net: std_logic;
  signal invert2_op_net: std_logic;
  signal mux0_y_net_x1: std_logic_vector(19 downto 0);
  signal slice1_y_net: std_logic;
  signal slice2_y_net: std_logic;

begin
  ce_1_sg_x76 <= ce_1;
  clk_1_sg_x76 <= clk_1;
  mux0_y_net_x1 <= din;
  dout <= adder_s_net_x1;
  of_x0 <= and_y_net_x0;

  all_0s: entity work.logical_89dc141487
    port map (
      ce => ce_1_sg_x76,
      clk => clk_1_sg_x76,
      clr => '0',
      d0(0) => invert1_op_net,
      d1(0) => invert2_op_net,
      y(0) => all_0s_y_net
    );

  all_1s: entity work.logical_89dc141487
    port map (
      ce => ce_1_sg_x76,
      clk => clk_1_sg_x76,
      clr => '0',
      d0(0) => slice1_y_net,
      d1(0) => slice2_y_net,
      y(0) => all_1s_y_net
    );

  and_x0: entity work.logical_80f90b97d0
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0(0) => all_0s_y_net,
      d1(0) => all_1s_y_net,
      y(0) => and_y_net_x0
    );

  convert_70860c9991: entity work.convert_entity_70860c9991
    port map (
      ce_1 => ce_1_sg_x76,
      clk_1 => clk_1_sg_x76,
      in_x0 => mux0_y_net_x1,
      out_x0 => adder_s_net_x1
    );

  invert1: entity work.inverter_e5b38cca3b
    port map (
      ce => ce_1_sg_x76,
      clk => clk_1_sg_x76,
      clr => '0',
      ip(0) => slice1_y_net,
      op(0) => invert1_op_net
    );

  invert2: entity work.inverter_e5b38cca3b
    port map (
      ce => ce_1_sg_x76,
      clk => clk_1_sg_x76,
      clr => '0',
      ip(0) => slice2_y_net,
      op(0) => invert2_op_net
    );

  slice1: entity work.xlslice
    generic map (
      new_lsb => 19,
      new_msb => 19,
      x_width => 20,
      y_width => 1
    )
    port map (
      x => mux0_y_net_x1,
      y(0) => slice1_y_net
    );

  slice2: entity work.xlslice
    generic map (
      new_lsb => 18,
      new_msb => 18,
      x_width => 20,
      y_width => 1
    )
    port map (
      x => mux0_y_net_x1,
      y(0) => slice2_y_net
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/coarse/fft_wideband_real0/fft_biplex_real_4x0/biplex_core/fft_stage_1/butterfly_direct/csub"

entity csub_entity_2ad7cf465d is
  port (
    a_im: in std_logic_vector(17 downto 0); 
    a_re: in std_logic_vector(17 downto 0); 
    b_im: in std_logic_vector(17 downto 0); 
    b_re: in std_logic_vector(17 downto 0); 
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    c_im: out std_logic_vector(18 downto 0); 
    c_re: out std_logic_vector(18 downto 0)
  );
end csub_entity_2ad7cf465d;

architecture structural of csub_entity_2ad7cf465d is
  signal alumode_op_net: std_logic_vector(3 downto 0);
  signal carryin_op_net: std_logic;
  signal carryinsel_op_net: std_logic_vector(2 downto 0);
  signal cast_c_im_dout_net_x0: std_logic_vector(18 downto 0);
  signal cast_c_re_dout_net_x0: std_logic_vector(18 downto 0);
  signal ce_1_sg_x83: std_logic;
  signal clk_1_sg_x83: std_logic;
  signal concat_a_y_net: std_logic_vector(47 downto 0);
  signal concat_b_y_net: std_logic_vector(47 downto 0);
  signal dsp48e_p_net: std_logic_vector(47 downto 0);
  signal force_im_output_port_net_x3: std_logic_vector(17 downto 0);
  signal force_im_output_port_net_x4: std_logic_vector(17 downto 0);
  signal force_re_output_port_net_x3: std_logic_vector(17 downto 0);
  signal force_re_output_port_net_x4: std_logic_vector(17 downto 0);
  signal opmode_op_net: std_logic_vector(6 downto 0);
  signal realign_a_im_dout_net: std_logic_vector(23 downto 0);
  signal realign_a_re_dout_net: std_logic_vector(23 downto 0);
  signal realign_b_im_dout_net: std_logic_vector(23 downto 0);
  signal realign_b_re_dout_net: std_logic_vector(23 downto 0);
  signal reinterp_a_im_output_port_net: std_logic_vector(23 downto 0);
  signal reinterp_a_re_output_port_net: std_logic_vector(23 downto 0);
  signal reinterp_b_im_output_port_net: std_logic_vector(23 downto 0);
  signal reinterp_b_re_output_port_net: std_logic_vector(23 downto 0);
  signal reinterp_c_im_output_port_net: std_logic_vector(23 downto 0);
  signal reinterp_c_re_output_port_net: std_logic_vector(23 downto 0);
  signal reinterpret_a_output_port_net: std_logic_vector(29 downto 0);
  signal reinterpret_b_output_port_net: std_logic_vector(17 downto 0);
  signal reinterpret_c_output_port_net: std_logic_vector(47 downto 0);
  signal slice_a_y_net: std_logic_vector(29 downto 0);
  signal slice_b_y_net: std_logic_vector(17 downto 0);
  signal slice_c_im_y_net: std_logic_vector(23 downto 0);
  signal slice_c_re_y_net: std_logic_vector(23 downto 0);

begin
  force_im_output_port_net_x3 <= a_im;
  force_re_output_port_net_x3 <= a_re;
  force_im_output_port_net_x4 <= b_im;
  force_re_output_port_net_x4 <= b_re;
  ce_1_sg_x83 <= ce_1;
  clk_1_sg_x83 <= clk_1;
  c_im <= cast_c_im_dout_net_x0;
  c_re <= cast_c_re_dout_net_x0;

  alumode: entity work.constant_8038205d89
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op => alumode_op_net
    );

  carryin: entity work.constant_963ed6358a
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op(0) => carryin_op_net
    );

  carryinsel: entity work.constant_822933f89b
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op => carryinsel_op_net
    );

  cast_c_im: entity work.xlconvert
    generic map (
      bool_conversion => 0,
      din_arith => 2,
      din_bin_pt => 21,
      din_width => 24,
      dout_arith => 2,
      dout_bin_pt => 17,
      dout_width => 19,
      latency => 0,
      overflow => xlWrap,
      quantization => xlTruncate
    )
    port map (
      ce => ce_1_sg_x83,
      clk => clk_1_sg_x83,
      clr => '0',
      din => reinterp_c_im_output_port_net,
      en => "1",
      dout => cast_c_im_dout_net_x0
    );

  cast_c_re: entity work.xlconvert
    generic map (
      bool_conversion => 0,
      din_arith => 2,
      din_bin_pt => 21,
      din_width => 24,
      dout_arith => 2,
      dout_bin_pt => 17,
      dout_width => 19,
      latency => 0,
      overflow => xlWrap,
      quantization => xlTruncate
    )
    port map (
      ce => ce_1_sg_x83,
      clk => clk_1_sg_x83,
      clr => '0',
      din => reinterp_c_re_output_port_net,
      en => "1",
      dout => cast_c_re_dout_net_x0
    );

  concat_a: entity work.concat_b57c4be2de
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      in0 => reinterp_a_re_output_port_net,
      in1 => reinterp_a_im_output_port_net,
      y => concat_a_y_net
    );

  concat_b: entity work.concat_b57c4be2de
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      in0 => reinterp_b_re_output_port_net,
      in1 => reinterp_b_im_output_port_net,
      y => concat_b_y_net
    );

  dsp48e: entity work.xldsp48e
    generic map (
      a_input => "DIRECT",
      acascreg => 1,
      alumodereg => 1,
      areg => 1,
      autoreset_pattern_detect => FALSE,
      autoreset_pattern_detect_optinv => "MATCH",
      b_input => "DIRECT",
      bcascreg => 1,
      breg => 1,
      carryinreg => 1,
      carryinselreg => 1,
      carryout_width => 4,
      creg => 1,
      mreg => 1,
      opmodereg => 1,
      preg => 1,
      sel_mask => "MASK",
      sel_pattern => "PATTERN",
      use_c_port => 1,
      use_mult => "MULT_S",
      use_op => 0,
      use_pattern_detect => "NO_PATDET",
      use_simd => "TWO24"
    )
    port map (
      a => reinterpret_a_output_port_net,
      alumode => alumode_op_net,
      b => reinterpret_b_output_port_net,
      c => reinterpret_c_output_port_net,
      carryin(0) => carryin_op_net,
      carryinsel => carryinsel_op_net,
      ce => ce_1_sg_x83,
      cea1 => "1",
      cea2 => "1",
      cealumode => "1",
      ceb1 => "1",
      ceb2 => "1",
      cec => "1",
      cecarryin => "1",
      cectrl => "1",
      cem => "1",
      cemultcarryin => "1",
      cep => "1",
      clk => clk_1_sg_x83,
      en => "1",
      opmode => opmode_op_net,
      rst => "0",
      rsta => "0",
      rstalumode => "0",
      rstb => "0",
      rstc => "0",
      rstcarryin => "0",
      rstctrl => "0",
      rstm => "0",
      rstp => "0",
      p => dsp48e_p_net
    );

  opmode: entity work.constant_270746ab47
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op => opmode_op_net
    );

  realign_a_im: entity work.xlconvert
    generic map (
      bool_conversion => 0,
      din_arith => 2,
      din_bin_pt => 17,
      din_width => 18,
      dout_arith => 2,
      dout_bin_pt => 21,
      dout_width => 24,
      latency => 0,
      overflow => xlWrap,
      quantization => xlTruncate
    )
    port map (
      ce => ce_1_sg_x83,
      clk => clk_1_sg_x83,
      clr => '0',
      din => force_im_output_port_net_x3,
      en => "1",
      dout => realign_a_im_dout_net
    );

  realign_a_re: entity work.xlconvert
    generic map (
      bool_conversion => 0,
      din_arith => 2,
      din_bin_pt => 17,
      din_width => 18,
      dout_arith => 2,
      dout_bin_pt => 21,
      dout_width => 24,
      latency => 0,
      overflow => xlWrap,
      quantization => xlTruncate
    )
    port map (
      ce => ce_1_sg_x83,
      clk => clk_1_sg_x83,
      clr => '0',
      din => force_re_output_port_net_x3,
      en => "1",
      dout => realign_a_re_dout_net
    );

  realign_b_im: entity work.xlconvert
    generic map (
      bool_conversion => 0,
      din_arith => 2,
      din_bin_pt => 17,
      din_width => 18,
      dout_arith => 2,
      dout_bin_pt => 21,
      dout_width => 24,
      latency => 0,
      overflow => xlWrap,
      quantization => xlTruncate
    )
    port map (
      ce => ce_1_sg_x83,
      clk => clk_1_sg_x83,
      clr => '0',
      din => force_im_output_port_net_x4,
      en => "1",
      dout => realign_b_im_dout_net
    );

  realign_b_re: entity work.xlconvert
    generic map (
      bool_conversion => 0,
      din_arith => 2,
      din_bin_pt => 17,
      din_width => 18,
      dout_arith => 2,
      dout_bin_pt => 21,
      dout_width => 24,
      latency => 0,
      overflow => xlWrap,
      quantization => xlTruncate
    )
    port map (
      ce => ce_1_sg_x83,
      clk => clk_1_sg_x83,
      clr => '0',
      din => force_re_output_port_net_x4,
      en => "1",
      dout => realign_b_re_dout_net
    );

  reinterp_a_im: entity work.reinterpret_3fb4604c01
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => realign_a_im_dout_net,
      output_port => reinterp_a_im_output_port_net
    );

  reinterp_a_re: entity work.reinterpret_3fb4604c01
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => realign_a_re_dout_net,
      output_port => reinterp_a_re_output_port_net
    );

  reinterp_b_im: entity work.reinterpret_3fb4604c01
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => realign_b_im_dout_net,
      output_port => reinterp_b_im_output_port_net
    );

  reinterp_b_re: entity work.reinterpret_3fb4604c01
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => realign_b_re_dout_net,
      output_port => reinterp_b_re_output_port_net
    );

  reinterp_c_im: entity work.reinterpret_4bf1ad328a
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => slice_c_im_y_net,
      output_port => reinterp_c_im_output_port_net
    );

  reinterp_c_re: entity work.reinterpret_4bf1ad328a
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => slice_c_re_y_net,
      output_port => reinterp_c_re_output_port_net
    );

  reinterpret_a: entity work.reinterpret_eb03bc3377
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => slice_a_y_net,
      output_port => reinterpret_a_output_port_net
    );

  reinterpret_b: entity work.reinterpret_9a0fa0f632
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => slice_b_y_net,
      output_port => reinterpret_b_output_port_net
    );

  reinterpret_c: entity work.reinterpret_7ea107432a
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => concat_a_y_net,
      output_port => reinterpret_c_output_port_net
    );

  slice_a: entity work.xlslice
    generic map (
      new_lsb => 18,
      new_msb => 47,
      x_width => 48,
      y_width => 30
    )
    port map (
      x => concat_b_y_net,
      y => slice_a_y_net
    );

  slice_b: entity work.xlslice
    generic map (
      new_lsb => 0,
      new_msb => 17,
      x_width => 48,
      y_width => 18
    )
    port map (
      x => concat_b_y_net,
      y => slice_b_y_net
    );

  slice_c_im: entity work.xlslice
    generic map (
      new_lsb => 0,
      new_msb => 23,
      x_width => 48,
      y_width => 24
    )
    port map (
      x => dsp48e_p_net,
      y => slice_c_im_y_net
    );

  slice_c_re: entity work.xlslice
    generic map (
      new_lsb => 24,
      new_msb => 47,
      x_width => 48,
      y_width => 24
    )
    port map (
      x => dsp48e_p_net,
      y => slice_c_re_y_net
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/coarse/fft_wideband_real0/fft_biplex_real_4x0/biplex_core/fft_stage_1/butterfly_direct/twiddle_pass_through"

entity twiddle_pass_through_entity_1612d5478f is
  port (
    a: in std_logic_vector(35 downto 0); 
    b: in std_logic_vector(35 downto 0); 
    a_im: out std_logic_vector(17 downto 0); 
    a_re: out std_logic_vector(17 downto 0); 
    bw_im: out std_logic_vector(17 downto 0); 
    bw_re: out std_logic_vector(17 downto 0)
  );
end twiddle_pass_through_entity_1612d5478f;

architecture structural of twiddle_pass_through_entity_1612d5478f is
  signal force_im_output_port_net_x6: std_logic_vector(17 downto 0);
  signal force_im_output_port_net_x7: std_logic_vector(17 downto 0);
  signal force_re_output_port_net_x6: std_logic_vector(17 downto 0);
  signal force_re_output_port_net_x7: std_logic_vector(17 downto 0);
  signal mux_y_net_x1: std_logic_vector(35 downto 0);
  signal single_port_ram_data_out_net_x1: std_logic_vector(35 downto 0);

begin
  single_port_ram_data_out_net_x1 <= a;
  mux_y_net_x1 <= b;
  a_im <= force_im_output_port_net_x6;
  a_re <= force_re_output_port_net_x6;
  bw_im <= force_im_output_port_net_x7;
  bw_re <= force_re_output_port_net_x7;

  c_to_ri1_ae0dfdafeb: entity work.c_to_ri0_entity_ac3e6eb705
    port map (
      c => mux_y_net_x1,
      im => force_im_output_port_net_x7,
      re => force_re_output_port_net_x7
    );

  c_to_ri_1536687b60: entity work.c_to_ri0_entity_ac3e6eb705
    port map (
      c => single_port_ram_data_out_net_x1,
      im => force_im_output_port_net_x6,
      re => force_re_output_port_net_x6
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/coarse/fft_wideband_real0/fft_biplex_real_4x0/biplex_core/fft_stage_1/butterfly_direct"

entity butterfly_direct_entity_669af7fe17 is
  port (
    a: in std_logic_vector(35 downto 0); 
    b: in std_logic_vector(35 downto 0); 
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    shift: in std_logic; 
    sync: in std_logic; 
    a_bw: out std_logic_vector(35 downto 0); 
    a_bw_x0: out std_logic_vector(35 downto 0); 
    of_x0: out std_logic; 
    sync_out: out std_logic
  );
end butterfly_direct_entity_669af7fe17;

architecture structural of butterfly_direct_entity_669af7fe17 is
  signal adder_s_net_x3: std_logic_vector(17 downto 0);
  signal adder_s_net_x4: std_logic_vector(17 downto 0);
  signal adder_s_net_x5: std_logic_vector(17 downto 0);
  signal adder_s_net_x6: std_logic_vector(17 downto 0);
  signal and_y_net_x0: std_logic;
  signal and_y_net_x1: std_logic;
  signal and_y_net_x2: std_logic;
  signal and_y_net_x3: std_logic;
  signal cast_c_im_dout_net_x0: std_logic_vector(18 downto 0);
  signal cast_c_im_dout_net_x1: std_logic_vector(18 downto 0);
  signal cast_c_re_dout_net_x0: std_logic_vector(18 downto 0);
  signal cast_c_re_dout_net_x1: std_logic_vector(18 downto 0);
  signal ce_1_sg_x84: std_logic;
  signal clk_1_sg_x84: std_logic;
  signal concat_y_net_x2: std_logic_vector(35 downto 0);
  signal concat_y_net_x3: std_logic_vector(35 downto 0);
  signal force_im_output_port_net_x6: std_logic_vector(17 downto 0);
  signal force_im_output_port_net_x7: std_logic_vector(17 downto 0);
  signal force_re_output_port_net_x6: std_logic_vector(17 downto 0);
  signal force_re_output_port_net_x7: std_logic_vector(17 downto 0);
  signal logical_y_net_x0: std_logic;
  signal mux0_y_net_x1: std_logic_vector(19 downto 0);
  signal mux1_y_net_x1: std_logic_vector(19 downto 0);
  signal mux2_y_net_x1: std_logic_vector(19 downto 0);
  signal mux3_y_net_x1: std_logic_vector(19 downto 0);
  signal mux_y_net_x0: std_logic;
  signal mux_y_net_x2: std_logic_vector(35 downto 0);
  signal scale0_op_net: std_logic_vector(18 downto 0);
  signal scale1_op_net: std_logic_vector(18 downto 0);
  signal scale2_op_net: std_logic_vector(18 downto 0);
  signal scale3_op_net: std_logic_vector(18 downto 0);
  signal shift_delay_q_net: std_logic;
  signal single_port_ram_data_out_net_x2: std_logic_vector(35 downto 0);
  signal slice_y_net_x0: std_logic;
  signal sync_delay_q_net_x0: std_logic;

begin
  single_port_ram_data_out_net_x2 <= a;
  mux_y_net_x2 <= b;
  ce_1_sg_x84 <= ce_1;
  clk_1_sg_x84 <= clk_1;
  slice_y_net_x0 <= shift;
  mux_y_net_x0 <= sync;
  a_bw <= concat_y_net_x2;
  a_bw_x0 <= concat_y_net_x3;
  of_x0 <= logical_y_net_x0;
  sync_out <= sync_delay_q_net_x0;

  cadd_517d36a131: entity work.cadd_entity_517d36a131
    port map (
      a_im => force_im_output_port_net_x6,
      a_re => force_re_output_port_net_x6,
      b_im => force_im_output_port_net_x7,
      b_re => force_re_output_port_net_x7,
      ce_1 => ce_1_sg_x84,
      clk_1 => clk_1_sg_x84,
      c_im => cast_c_im_dout_net_x0,
      c_re => cast_c_re_dout_net_x0
    );

  convert_of0_269fb2de1a: entity work.convert_of0_entity_269fb2de1a
    port map (
      ce_1 => ce_1_sg_x84,
      clk_1 => clk_1_sg_x84,
      din => mux0_y_net_x1,
      dout => adder_s_net_x3,
      of_x0 => and_y_net_x0
    );

  convert_of1_3539951cb2: entity work.convert_of0_entity_269fb2de1a
    port map (
      ce_1 => ce_1_sg_x84,
      clk_1 => clk_1_sg_x84,
      din => mux1_y_net_x1,
      dout => adder_s_net_x4,
      of_x0 => and_y_net_x1
    );

  convert_of2_92d3ecea0f: entity work.convert_of0_entity_269fb2de1a
    port map (
      ce_1 => ce_1_sg_x84,
      clk_1 => clk_1_sg_x84,
      din => mux2_y_net_x1,
      dout => adder_s_net_x5,
      of_x0 => and_y_net_x2
    );

  convert_of3_2bd07797de: entity work.convert_of0_entity_269fb2de1a
    port map (
      ce_1 => ce_1_sg_x84,
      clk_1 => clk_1_sg_x84,
      din => mux3_y_net_x1,
      dout => adder_s_net_x6,
      of_x0 => and_y_net_x3
    );

  csub_2ad7cf465d: entity work.csub_entity_2ad7cf465d
    port map (
      a_im => force_im_output_port_net_x6,
      a_re => force_re_output_port_net_x6,
      b_im => force_im_output_port_net_x7,
      b_re => force_re_output_port_net_x7,
      ce_1 => ce_1_sg_x84,
      clk_1 => clk_1_sg_x84,
      c_im => cast_c_im_dout_net_x1,
      c_re => cast_c_re_dout_net_x1
    );

  logical: entity work.logical_a6d07705dd
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0(0) => and_y_net_x0,
      d1(0) => and_y_net_x1,
      d2(0) => and_y_net_x2,
      d3(0) => and_y_net_x3,
      y(0) => logical_y_net_x0
    );

  mux0: entity work.mux_28159dbdb9
    port map (
      ce => ce_1_sg_x84,
      clk => clk_1_sg_x84,
      clr => '0',
      d0 => cast_c_re_dout_net_x0,
      d1 => scale0_op_net,
      sel(0) => shift_delay_q_net,
      y => mux0_y_net_x1
    );

  mux1: entity work.mux_28159dbdb9
    port map (
      ce => ce_1_sg_x84,
      clk => clk_1_sg_x84,
      clr => '0',
      d0 => cast_c_im_dout_net_x0,
      d1 => scale1_op_net,
      sel(0) => shift_delay_q_net,
      y => mux1_y_net_x1
    );

  mux2: entity work.mux_28159dbdb9
    port map (
      ce => ce_1_sg_x84,
      clk => clk_1_sg_x84,
      clr => '0',
      d0 => cast_c_re_dout_net_x1,
      d1 => scale2_op_net,
      sel(0) => shift_delay_q_net,
      y => mux2_y_net_x1
    );

  mux3: entity work.mux_28159dbdb9
    port map (
      ce => ce_1_sg_x84,
      clk => clk_1_sg_x84,
      clr => '0',
      d0 => cast_c_im_dout_net_x1,
      d1 => scale3_op_net,
      sel(0) => shift_delay_q_net,
      y => mux3_y_net_x1
    );

  ri_to_c01_ec6c9d9f20: entity work.ri_to_c0_entity_724b130d6e
    port map (
      im => adder_s_net_x4,
      re => adder_s_net_x3,
      c => concat_y_net_x2
    );

  ri_to_c23_36e090e7e0: entity work.ri_to_c0_entity_724b130d6e
    port map (
      im => adder_s_net_x6,
      re => adder_s_net_x5,
      c => concat_y_net_x3
    );

  scale0: entity work.scale_9f61027ba4
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      ip => cast_c_re_dout_net_x0,
      op => scale0_op_net
    );

  scale1: entity work.scale_9f61027ba4
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      ip => cast_c_im_dout_net_x0,
      op => scale1_op_net
    );

  scale2: entity work.scale_9f61027ba4
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      ip => cast_c_re_dout_net_x1,
      op => scale2_op_net
    );

  scale3: entity work.scale_9f61027ba4
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      ip => cast_c_im_dout_net_x1,
      op => scale3_op_net
    );

  shift_delay: entity work.xldelay
    generic map (
      latency => 2,
      reg_retiming => 0,
      reset => 0,
      width => 1
    )
    port map (
      ce => ce_1_sg_x84,
      clk => clk_1_sg_x84,
      d(0) => slice_y_net_x0,
      en => '1',
      rst => '1',
      q(0) => shift_delay_q_net
    );

  sync_delay: entity work.delay_aab7b18c27
    port map (
      ce => ce_1_sg_x84,
      clk => clk_1_sg_x84,
      clr => '0',
      d(0) => mux_y_net_x0,
      q(0) => sync_delay_q_net_x0
    );

  twiddle_pass_through_1612d5478f: entity work.twiddle_pass_through_entity_1612d5478f
    port map (
      a => single_port_ram_data_out_net_x2,
      b => mux_y_net_x2,
      a_im => force_im_output_port_net_x6,
      a_re => force_re_output_port_net_x6,
      bw_im => force_im_output_port_net_x7,
      bw_re => force_re_output_port_net_x7
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/coarse/fft_wideband_real0/fft_biplex_real_4x0/biplex_core/fft_stage_1/sync_delay"

entity sync_delay_entity_fd333a7782 is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    in_x0: in std_logic; 
    out_x0: out std_logic
  );
end sync_delay_entity_fd333a7782;

architecture structural of sync_delay_entity_fd333a7782 is
  signal ce_1_sg_x87: std_logic;
  signal clk_1_sg_x87: std_logic;
  signal constant1_op_net: std_logic_vector(6 downto 0);
  signal constant2_op_net: std_logic_vector(6 downto 0);
  signal constant3_op_net: std_logic;
  signal constant_op_net: std_logic_vector(6 downto 0);
  signal counter_op_net: std_logic_vector(6 downto 0);
  signal delay_q_net_x0: std_logic;
  signal logical_y_net: std_logic;
  signal mux_y_net_x1: std_logic;
  signal relational1_op_net: std_logic;
  signal relational_op_net: std_logic;

begin
  ce_1_sg_x87 <= ce_1;
  clk_1_sg_x87 <= clk_1;
  delay_q_net_x0 <= in_x0;
  out_x0 <= mux_y_net_x1;

  constant1: entity work.constant_7244cd602b
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op => constant1_op_net
    );

  constant2: entity work.constant_7b07120b87
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op => constant2_op_net
    );

  constant3: entity work.constant_6293007044
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op(0) => constant3_op_net
    );

  constant_x0: entity work.constant_180df391de
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op => constant_op_net
    );

  counter: entity work.xlcounter_free_c09f12_01
    generic map (
      core_name0 => "cntr_11_0_3ad9dc21603f5ae0",
      op_arith => xlUnsigned,
      op_width => 7
    )
    port map (
      ce => ce_1_sg_x87,
      clk => clk_1_sg_x87,
      clr => '0',
      din => constant2_op_net,
      en(0) => logical_y_net,
      load(0) => delay_q_net_x0,
      rst => "0",
      op => counter_op_net
    );

  logical: entity work.logical_aacf6e1b0e
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0(0) => delay_q_net_x0,
      d1(0) => relational1_op_net,
      y(0) => logical_y_net
    );

  mux: entity work.mux_1bef4ba0e4
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0(0) => delay_q_net_x0,
      d1(0) => relational_op_net,
      sel(0) => constant3_op_net,
      y(0) => mux_y_net_x1
    );

  relational: entity work.relational_9a3978c602
    port map (
      a => constant_op_net,
      b => counter_op_net,
      ce => '0',
      clk => '0',
      clr => '0',
      op(0) => relational_op_net
    );

  relational1: entity work.relational_23065a6aa3
    port map (
      a => counter_op_net,
      b => constant1_op_net,
      ce => '0',
      clk => '0',
      clr => '0',
      op(0) => relational1_op_net
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/coarse/fft_wideband_real0/fft_biplex_real_4x0/biplex_core/fft_stage_1"

entity fft_stage_1_entity_7a0acaf727 is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    in1: in std_logic_vector(35 downto 0); 
    in2: in std_logic_vector(35 downto 0); 
    of_in: in std_logic; 
    shift: in std_logic_vector(9 downto 0); 
    sync: in std_logic; 
    of_x0: out std_logic; 
    out1: out std_logic_vector(35 downto 0); 
    out2: out std_logic_vector(35 downto 0); 
    sync_out: out std_logic
  );
end fft_stage_1_entity_7a0acaf727;

architecture structural of fft_stage_1_entity_7a0acaf727 is
  signal ce_1_sg_x88: std_logic;
  signal clk_1_sg_x88: std_logic;
  signal concat_y_net_x4: std_logic_vector(35 downto 0);
  signal concat_y_net_x5: std_logic_vector(35 downto 0);
  signal concat_y_net_x6: std_logic_vector(35 downto 0);
  signal concat_y_net_x7: std_logic_vector(35 downto 0);
  signal constant_op_net_x0: std_logic;
  signal counter_op_net: std_logic_vector(6 downto 0);
  signal delay_q_net_x0: std_logic;
  signal logical1_y_net_x0: std_logic;
  signal logical_y_net_x0: std_logic;
  signal mux1_y_net_x0: std_logic_vector(35 downto 0);
  signal mux_y_net_x1: std_logic;
  signal mux_y_net_x2: std_logic_vector(35 downto 0);
  signal register0_q_net_x0: std_logic;
  signal single_port_ram_data_out_net_x0: std_logic_vector(35 downto 0);
  signal single_port_ram_data_out_net_x3: std_logic_vector(35 downto 0);
  signal slice1_y_net: std_logic;
  signal slice6_y_net_x0: std_logic_vector(9 downto 0);
  signal slice_y_net_x0: std_logic;
  signal sync_delay_q_net_x1: std_logic;

begin
  ce_1_sg_x88 <= ce_1;
  clk_1_sg_x88 <= clk_1;
  concat_y_net_x4 <= in1;
  concat_y_net_x5 <= in2;
  constant_op_net_x0 <= of_in;
  slice6_y_net_x0 <= shift;
  register0_q_net_x0 <= sync;
  of_x0 <= logical1_y_net_x0;
  out1 <= concat_y_net_x6;
  out2 <= concat_y_net_x7;
  sync_out <= sync_delay_q_net_x1;

  butterfly_direct_669af7fe17: entity work.butterfly_direct_entity_669af7fe17
    port map (
      a => single_port_ram_data_out_net_x3,
      b => mux_y_net_x2,
      ce_1 => ce_1_sg_x88,
      clk_1 => clk_1_sg_x88,
      shift => slice_y_net_x0,
      sync => mux_y_net_x1,
      a_bw => concat_y_net_x6,
      a_bw_x0 => concat_y_net_x7,
      of_x0 => logical_y_net_x0,
      sync_out => sync_delay_q_net_x1
    );

  counter: entity work.xlcounter_free_c09f12_01
    generic map (
      core_name0 => "cntr_11_0_aeada998ec385fcd",
      op_arith => xlUnsigned,
      op_width => 7
    )
    port map (
      ce => ce_1_sg_x88,
      clk => clk_1_sg_x88,
      clr => '0',
      en => "1",
      rst(0) => register0_q_net_x0,
      op => counter_op_net
    );

  delay: entity work.xldelay
    generic map (
      latency => 1,
      reg_retiming => 0,
      reset => 0,
      width => 1
    )
    port map (
      ce => ce_1_sg_x88,
      clk => clk_1_sg_x88,
      d(0) => register0_q_net_x0,
      en => '1',
      rst => '1',
      q(0) => delay_q_net_x0
    );

  delay_b_77376b4550: entity work.delay_bram0_entity_132f1fc19a
    port map (
      ce_1 => ce_1_sg_x88,
      clk_1 => clk_1_sg_x88,
      in1 => mux1_y_net_x0,
      out1 => single_port_ram_data_out_net_x3
    );

  delay_f_7eafabcb6a: entity work.delay_bram0_entity_132f1fc19a
    port map (
      ce_1 => ce_1_sg_x88,
      clk_1 => clk_1_sg_x88,
      in1 => concat_y_net_x5,
      out1 => single_port_ram_data_out_net_x0
    );

  logical1: entity work.logical_444d3f5046
    port map (
      ce => ce_1_sg_x88,
      clk => clk_1_sg_x88,
      clr => '0',
      d0(0) => logical_y_net_x0,
      d1(0) => constant_op_net_x0,
      y(0) => logical1_y_net_x0
    );

  mux: entity work.mux_4bb6f691f7
    port map (
      ce => ce_1_sg_x88,
      clk => clk_1_sg_x88,
      clr => '0',
      d0 => single_port_ram_data_out_net_x0,
      d1 => concat_y_net_x4,
      sel(0) => slice1_y_net,
      y => mux_y_net_x2
    );

  mux1: entity work.mux_4bb6f691f7
    port map (
      ce => ce_1_sg_x88,
      clk => clk_1_sg_x88,
      clr => '0',
      d0 => concat_y_net_x4,
      d1 => single_port_ram_data_out_net_x0,
      sel(0) => slice1_y_net,
      y => mux1_y_net_x0
    );

  slice: entity work.xlslice
    generic map (
      new_lsb => 0,
      new_msb => 0,
      x_width => 10,
      y_width => 1
    )
    port map (
      x => slice6_y_net_x0,
      y(0) => slice_y_net_x0
    );

  slice1: entity work.xlslice
    generic map (
      new_lsb => 6,
      new_msb => 6,
      x_width => 7,
      y_width => 1
    )
    port map (
      x => counter_op_net,
      y(0) => slice1_y_net
    );

  sync_delay_fd333a7782: entity work.sync_delay_entity_fd333a7782
    port map (
      ce_1 => ce_1_sg_x88,
      clk_1 => clk_1_sg_x88,
      in_x0 => delay_q_net_x0,
      out_x0 => mux_y_net_x1
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/coarse/fft_wideband_real0/fft_biplex_real_4x0/biplex_core/fft_stage_2/butterfly_direct/twiddle_stage_2"

entity twiddle_stage_2_entity_30c73c209f is
  port (
    a: in std_logic_vector(35 downto 0); 
    b: in std_logic_vector(35 downto 0); 
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    sync: in std_logic; 
    a_im: out std_logic_vector(17 downto 0); 
    a_re: out std_logic_vector(17 downto 0); 
    bw_im: out std_logic_vector(17 downto 0); 
    bw_re: out std_logic_vector(17 downto 0); 
    sync_out: out std_logic
  );
end twiddle_stage_2_entity_30c73c209f;

architecture structural of twiddle_stage_2_entity_30c73c209f is
  signal ce_1_sg_x99: std_logic;
  signal clk_1_sg_x99: std_logic;
  signal convert_dout_net: std_logic_vector(17 downto 0);
  signal counter_op_net: std_logic_vector(5 downto 0);
  signal delay0_q_net_x2: std_logic_vector(17 downto 0);
  signal delay1_q_net_x2: std_logic_vector(17 downto 0);
  signal delay2_q_net: std_logic;
  signal delay3_q_net: std_logic_vector(17 downto 0);
  signal delay4_q_net: std_logic_vector(17 downto 0);
  signal delay5_q_net: std_logic_vector(17 downto 0);
  signal delay6_q_net: std_logic_vector(17 downto 0);
  signal delay7_q_net: std_logic;
  signal delay8_q_net_x0: std_logic;
  signal force_im_output_port_net_x0: std_logic_vector(17 downto 0);
  signal force_im_output_port_net_x1: std_logic_vector(17 downto 0);
  signal force_re_output_port_net_x0: std_logic_vector(17 downto 0);
  signal force_re_output_port_net_x1: std_logic_vector(17 downto 0);
  signal mux0_y_net_x2: std_logic_vector(17 downto 0);
  signal mux1_y_net_x2: std_logic_vector(17 downto 0);
  signal mux_y_net_x1: std_logic_vector(35 downto 0);
  signal mux_y_net_x2: std_logic;
  signal negate_op_net: std_logic_vector(18 downto 0);
  signal single_port_ram_data_out_net_x1: std_logic_vector(35 downto 0);
  signal slice_y_net: std_logic;

begin
  single_port_ram_data_out_net_x1 <= a;
  mux_y_net_x1 <= b;
  ce_1_sg_x99 <= ce_1;
  clk_1_sg_x99 <= clk_1;
  mux_y_net_x2 <= sync;
  a_im <= delay1_q_net_x2;
  a_re <= delay0_q_net_x2;
  bw_im <= mux1_y_net_x2;
  bw_re <= mux0_y_net_x2;
  sync_out <= delay8_q_net_x0;

  c_to_ri1_71d9770184: entity work.c_to_ri0_entity_ac3e6eb705
    port map (
      c => mux_y_net_x1,
      im => force_im_output_port_net_x1,
      re => force_re_output_port_net_x1
    );

  c_to_ri_719ddee2e3: entity work.c_to_ri0_entity_ac3e6eb705
    port map (
      c => single_port_ram_data_out_net_x1,
      im => force_im_output_port_net_x0,
      re => force_re_output_port_net_x0
    );

  convert: entity work.xlconvert_pipeline
    generic map (
      bool_conversion => 0,
      din_arith => 2,
      din_bin_pt => 17,
      din_width => 19,
      dout_arith => 2,
      dout_bin_pt => 17,
      dout_width => 18,
      latency => 2,
      overflow => xlSaturate,
      quantization => xlTruncate
    )
    port map (
      ce => ce_1_sg_x99,
      clk => clk_1_sg_x99,
      clr => '0',
      din => negate_op_net,
      en => "1",
      dout => convert_dout_net
    );

  counter: entity work.counter_7888581f80
    port map (
      ce => ce_1_sg_x99,
      clk => clk_1_sg_x99,
      clr => '0',
      rst(0) => delay7_q_net,
      op => counter_op_net
    );

  delay0: entity work.delay_fa2be75f6e
    port map (
      ce => ce_1_sg_x99,
      clk => clk_1_sg_x99,
      clr => '0',
      d => force_re_output_port_net_x0,
      q => delay0_q_net_x2
    );

  delay1: entity work.delay_fa2be75f6e
    port map (
      ce => ce_1_sg_x99,
      clk => clk_1_sg_x99,
      clr => '0',
      d => force_im_output_port_net_x0,
      q => delay1_q_net_x2
    );

  delay2: entity work.delay_5b3ce5f2ae
    port map (
      ce => ce_1_sg_x99,
      clk => clk_1_sg_x99,
      clr => '0',
      d(0) => slice_y_net,
      q(0) => delay2_q_net
    );

  delay3: entity work.delay_4217913c13
    port map (
      ce => ce_1_sg_x99,
      clk => clk_1_sg_x99,
      clr => '0',
      d => delay6_q_net,
      q => delay3_q_net
    );

  delay4: entity work.delay_4217913c13
    port map (
      ce => ce_1_sg_x99,
      clk => clk_1_sg_x99,
      clr => '0',
      d => convert_dout_net,
      q => delay4_q_net
    );

  delay5: entity work.delay_328e8ebbb5
    port map (
      ce => ce_1_sg_x99,
      clk => clk_1_sg_x99,
      clr => '0',
      d => force_re_output_port_net_x1,
      q => delay5_q_net
    );

  delay6: entity work.delay_328e8ebbb5
    port map (
      ce => ce_1_sg_x99,
      clk => clk_1_sg_x99,
      clr => '0',
      d => force_im_output_port_net_x1,
      q => delay6_q_net
    );

  delay7: entity work.delay_23d71a76f2
    port map (
      ce => ce_1_sg_x99,
      clk => clk_1_sg_x99,
      clr => '0',
      d(0) => mux_y_net_x2,
      q(0) => delay7_q_net
    );

  delay8: entity work.delay_fa260f7d22
    port map (
      ce => ce_1_sg_x99,
      clk => clk_1_sg_x99,
      clr => '0',
      d(0) => delay7_q_net,
      q(0) => delay8_q_net_x0
    );

  mux0: entity work.mux_30e9ca90db
    port map (
      ce => ce_1_sg_x99,
      clk => clk_1_sg_x99,
      clr => '0',
      d0 => delay5_q_net,
      d1 => delay6_q_net,
      sel(0) => slice_y_net,
      y => mux0_y_net_x2
    );

  mux1: entity work.mux_181e58d842
    port map (
      ce => ce_1_sg_x99,
      clk => clk_1_sg_x99,
      clr => '0',
      d0 => delay3_q_net,
      d1 => delay4_q_net,
      sel(0) => delay2_q_net,
      y => mux1_y_net_x2
    );

  negate: entity work.negate_293ec41b50
    port map (
      ce => ce_1_sg_x99,
      clk => clk_1_sg_x99,
      clr => '0',
      ip => force_re_output_port_net_x1,
      op => negate_op_net
    );

  slice: entity work.xlslice
    generic map (
      new_lsb => 5,
      new_msb => 5,
      x_width => 6,
      y_width => 1
    )
    port map (
      x => counter_op_net,
      y(0) => slice_y_net
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/coarse/fft_wideband_real0/fft_biplex_real_4x0/biplex_core/fft_stage_2/butterfly_direct"

entity butterfly_direct_entity_57b07e077f is
  port (
    a: in std_logic_vector(35 downto 0); 
    b: in std_logic_vector(35 downto 0); 
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    shift: in std_logic; 
    sync: in std_logic; 
    a_bw: out std_logic_vector(35 downto 0); 
    a_bw_x0: out std_logic_vector(35 downto 0); 
    of_x0: out std_logic; 
    sync_out: out std_logic
  );
end butterfly_direct_entity_57b07e077f;

architecture structural of butterfly_direct_entity_57b07e077f is
  signal adder_s_net_x3: std_logic_vector(17 downto 0);
  signal adder_s_net_x4: std_logic_vector(17 downto 0);
  signal adder_s_net_x5: std_logic_vector(17 downto 0);
  signal adder_s_net_x6: std_logic_vector(17 downto 0);
  signal and_y_net_x0: std_logic;
  signal and_y_net_x1: std_logic;
  signal and_y_net_x2: std_logic;
  signal and_y_net_x3: std_logic;
  signal cast_c_im_dout_net_x0: std_logic_vector(18 downto 0);
  signal cast_c_im_dout_net_x1: std_logic_vector(18 downto 0);
  signal cast_c_re_dout_net_x0: std_logic_vector(18 downto 0);
  signal cast_c_re_dout_net_x1: std_logic_vector(18 downto 0);
  signal ce_1_sg_x100: std_logic;
  signal clk_1_sg_x100: std_logic;
  signal concat_y_net_x2: std_logic_vector(35 downto 0);
  signal concat_y_net_x3: std_logic_vector(35 downto 0);
  signal delay0_q_net_x2: std_logic_vector(17 downto 0);
  signal delay1_q_net_x2: std_logic_vector(17 downto 0);
  signal delay8_q_net_x0: std_logic;
  signal logical_y_net_x0: std_logic;
  signal mux0_y_net_x1: std_logic_vector(19 downto 0);
  signal mux0_y_net_x2: std_logic_vector(17 downto 0);
  signal mux1_y_net_x1: std_logic_vector(19 downto 0);
  signal mux1_y_net_x2: std_logic_vector(17 downto 0);
  signal mux2_y_net_x1: std_logic_vector(19 downto 0);
  signal mux3_y_net_x1: std_logic_vector(19 downto 0);
  signal mux_y_net_x3: std_logic_vector(35 downto 0);
  signal mux_y_net_x4: std_logic;
  signal scale0_op_net: std_logic_vector(18 downto 0);
  signal scale1_op_net: std_logic_vector(18 downto 0);
  signal scale2_op_net: std_logic_vector(18 downto 0);
  signal scale3_op_net: std_logic_vector(18 downto 0);
  signal shift_delay_q_net: std_logic;
  signal single_port_ram_data_out_net_x2: std_logic_vector(35 downto 0);
  signal slice_y_net_x0: std_logic;
  signal sync_delay_q_net_x0: std_logic;

begin
  single_port_ram_data_out_net_x2 <= a;
  mux_y_net_x3 <= b;
  ce_1_sg_x100 <= ce_1;
  clk_1_sg_x100 <= clk_1;
  slice_y_net_x0 <= shift;
  mux_y_net_x4 <= sync;
  a_bw <= concat_y_net_x2;
  a_bw_x0 <= concat_y_net_x3;
  of_x0 <= logical_y_net_x0;
  sync_out <= sync_delay_q_net_x0;

  cadd_2392e713d2: entity work.cadd_entity_517d36a131
    port map (
      a_im => delay1_q_net_x2,
      a_re => delay0_q_net_x2,
      b_im => mux1_y_net_x2,
      b_re => mux0_y_net_x2,
      ce_1 => ce_1_sg_x100,
      clk_1 => clk_1_sg_x100,
      c_im => cast_c_im_dout_net_x0,
      c_re => cast_c_re_dout_net_x0
    );

  convert_of0_d0083e437c: entity work.convert_of0_entity_269fb2de1a
    port map (
      ce_1 => ce_1_sg_x100,
      clk_1 => clk_1_sg_x100,
      din => mux0_y_net_x1,
      dout => adder_s_net_x3,
      of_x0 => and_y_net_x0
    );

  convert_of1_f07fd30aff: entity work.convert_of0_entity_269fb2de1a
    port map (
      ce_1 => ce_1_sg_x100,
      clk_1 => clk_1_sg_x100,
      din => mux1_y_net_x1,
      dout => adder_s_net_x4,
      of_x0 => and_y_net_x1
    );

  convert_of2_865850eeee: entity work.convert_of0_entity_269fb2de1a
    port map (
      ce_1 => ce_1_sg_x100,
      clk_1 => clk_1_sg_x100,
      din => mux2_y_net_x1,
      dout => adder_s_net_x5,
      of_x0 => and_y_net_x2
    );

  convert_of3_3590b7d17e: entity work.convert_of0_entity_269fb2de1a
    port map (
      ce_1 => ce_1_sg_x100,
      clk_1 => clk_1_sg_x100,
      din => mux3_y_net_x1,
      dout => adder_s_net_x6,
      of_x0 => and_y_net_x3
    );

  csub_66052e8c60: entity work.csub_entity_2ad7cf465d
    port map (
      a_im => delay1_q_net_x2,
      a_re => delay0_q_net_x2,
      b_im => mux1_y_net_x2,
      b_re => mux0_y_net_x2,
      ce_1 => ce_1_sg_x100,
      clk_1 => clk_1_sg_x100,
      c_im => cast_c_im_dout_net_x1,
      c_re => cast_c_re_dout_net_x1
    );

  logical: entity work.logical_a6d07705dd
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0(0) => and_y_net_x0,
      d1(0) => and_y_net_x1,
      d2(0) => and_y_net_x2,
      d3(0) => and_y_net_x3,
      y(0) => logical_y_net_x0
    );

  mux0: entity work.mux_28159dbdb9
    port map (
      ce => ce_1_sg_x100,
      clk => clk_1_sg_x100,
      clr => '0',
      d0 => cast_c_re_dout_net_x0,
      d1 => scale0_op_net,
      sel(0) => shift_delay_q_net,
      y => mux0_y_net_x1
    );

  mux1: entity work.mux_28159dbdb9
    port map (
      ce => ce_1_sg_x100,
      clk => clk_1_sg_x100,
      clr => '0',
      d0 => cast_c_im_dout_net_x0,
      d1 => scale1_op_net,
      sel(0) => shift_delay_q_net,
      y => mux1_y_net_x1
    );

  mux2: entity work.mux_28159dbdb9
    port map (
      ce => ce_1_sg_x100,
      clk => clk_1_sg_x100,
      clr => '0',
      d0 => cast_c_re_dout_net_x1,
      d1 => scale2_op_net,
      sel(0) => shift_delay_q_net,
      y => mux2_y_net_x1
    );

  mux3: entity work.mux_28159dbdb9
    port map (
      ce => ce_1_sg_x100,
      clk => clk_1_sg_x100,
      clr => '0',
      d0 => cast_c_im_dout_net_x1,
      d1 => scale3_op_net,
      sel(0) => shift_delay_q_net,
      y => mux3_y_net_x1
    );

  ri_to_c01_b1086b0364: entity work.ri_to_c0_entity_724b130d6e
    port map (
      im => adder_s_net_x4,
      re => adder_s_net_x3,
      c => concat_y_net_x2
    );

  ri_to_c23_18629a866c: entity work.ri_to_c0_entity_724b130d6e
    port map (
      im => adder_s_net_x6,
      re => adder_s_net_x5,
      c => concat_y_net_x3
    );

  scale0: entity work.scale_9f61027ba4
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      ip => cast_c_re_dout_net_x0,
      op => scale0_op_net
    );

  scale1: entity work.scale_9f61027ba4
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      ip => cast_c_im_dout_net_x0,
      op => scale1_op_net
    );

  scale2: entity work.scale_9f61027ba4
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      ip => cast_c_re_dout_net_x1,
      op => scale2_op_net
    );

  scale3: entity work.scale_9f61027ba4
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      ip => cast_c_im_dout_net_x1,
      op => scale3_op_net
    );

  shift_delay: entity work.xldelay
    generic map (
      latency => 2,
      reg_retiming => 0,
      reset => 0,
      width => 1
    )
    port map (
      ce => ce_1_sg_x100,
      clk => clk_1_sg_x100,
      d(0) => slice_y_net_x0,
      en => '1',
      rst => '1',
      q(0) => shift_delay_q_net
    );

  sync_delay: entity work.delay_aab7b18c27
    port map (
      ce => ce_1_sg_x100,
      clk => clk_1_sg_x100,
      clr => '0',
      d(0) => delay8_q_net_x0,
      q(0) => sync_delay_q_net_x0
    );

  twiddle_stage_2_30c73c209f: entity work.twiddle_stage_2_entity_30c73c209f
    port map (
      a => single_port_ram_data_out_net_x2,
      b => mux_y_net_x3,
      ce_1 => ce_1_sg_x100,
      clk_1 => clk_1_sg_x100,
      sync => mux_y_net_x4,
      a_im => delay1_q_net_x2,
      a_re => delay0_q_net_x2,
      bw_im => mux1_y_net_x2,
      bw_re => mux0_y_net_x2,
      sync_out => delay8_q_net_x0
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/coarse/fft_wideband_real0/fft_biplex_real_4x0/biplex_core/fft_stage_2/delay_b"

entity delay_b_entity_654034e28e is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    in1: in std_logic_vector(35 downto 0); 
    out1: out std_logic_vector(35 downto 0)
  );
end delay_b_entity_654034e28e;

architecture structural of delay_b_entity_654034e28e is
  signal ce_1_sg_x101: std_logic;
  signal clk_1_sg_x101: std_logic;
  signal constant2_op_net: std_logic;
  signal counter_op_net: std_logic_vector(4 downto 0);
  signal mux1_y_net_x0: std_logic_vector(35 downto 0);
  signal single_port_ram_data_out_net_x3: std_logic_vector(35 downto 0);

begin
  ce_1_sg_x101 <= ce_1;
  clk_1_sg_x101 <= clk_1;
  mux1_y_net_x0 <= in1;
  out1 <= single_port_ram_data_out_net_x3;

  constant2: entity work.constant_6293007044
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op(0) => constant2_op_net
    );

  counter: entity work.xlcounter_limit_c09f12_01
    generic map (
      cnt_15_0 => 28,
      cnt_31_16 => 0,
      cnt_47_32 => 0,
      cnt_63_48 => 0,
      core_name0 => "cntr_11_0_f2301c6681846b15",
      count_limited => 1,
      op_arith => xlUnsigned,
      op_width => 5
    )
    port map (
      ce => ce_1_sg_x101,
      clk => clk_1_sg_x101,
      clr => '0',
      en => "1",
      rst => "0",
      op => counter_op_net
    );

  single_port_ram: entity work.xlspram_c09f12_01
    generic map (
      c_address_width => 5,
      c_width => 36,
      core_name0 => "bmg_72_a6ba22940df932c0",
      latency => 2
    )
    port map (
      addr => counter_op_net,
      ce => ce_1_sg_x101,
      clk => clk_1_sg_x101,
      data_in => mux1_y_net_x0,
      en => "1",
      rst => "0",
      we(0) => constant2_op_net,
      data_out => single_port_ram_data_out_net_x3
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/coarse/fft_wideband_real0/fft_biplex_real_4x0/biplex_core/fft_stage_2/sync_delay"

entity sync_delay_entity_2f938a0c67 is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    in_x0: in std_logic; 
    out_x0: out std_logic
  );
end sync_delay_entity_2f938a0c67;

architecture structural of sync_delay_entity_2f938a0c67 is
  signal ce_1_sg_x103: std_logic;
  signal clk_1_sg_x103: std_logic;
  signal constant1_op_net: std_logic_vector(5 downto 0);
  signal constant2_op_net: std_logic_vector(5 downto 0);
  signal constant3_op_net: std_logic;
  signal constant_op_net: std_logic_vector(5 downto 0);
  signal counter_op_net: std_logic_vector(5 downto 0);
  signal delay_q_net_x0: std_logic;
  signal logical_y_net: std_logic;
  signal mux_y_net_x5: std_logic;
  signal relational1_op_net: std_logic;
  signal relational_op_net: std_logic;

begin
  ce_1_sg_x103 <= ce_1;
  clk_1_sg_x103 <= clk_1;
  delay_q_net_x0 <= in_x0;
  out_x0 <= mux_y_net_x5;

  constant1: entity work.constant_7ea0f2fff7
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op => constant1_op_net
    );

  constant2: entity work.constant_961b61f8a1
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op => constant2_op_net
    );

  constant3: entity work.constant_6293007044
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op(0) => constant3_op_net
    );

  constant_x0: entity work.constant_a267c870be
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op => constant_op_net
    );

  counter: entity work.xlcounter_free_c09f12_01
    generic map (
      core_name0 => "cntr_11_0_c0e9491a3fe88c1d",
      op_arith => xlUnsigned,
      op_width => 6
    )
    port map (
      ce => ce_1_sg_x103,
      clk => clk_1_sg_x103,
      clr => '0',
      din => constant2_op_net,
      en(0) => logical_y_net,
      load(0) => delay_q_net_x0,
      rst => "0",
      op => counter_op_net
    );

  logical: entity work.logical_aacf6e1b0e
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0(0) => delay_q_net_x0,
      d1(0) => relational1_op_net,
      y(0) => logical_y_net
    );

  mux: entity work.mux_1bef4ba0e4
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0(0) => delay_q_net_x0,
      d1(0) => relational_op_net,
      sel(0) => constant3_op_net,
      y(0) => mux_y_net_x5
    );

  relational: entity work.relational_931d61fb72
    port map (
      a => constant_op_net,
      b => counter_op_net,
      ce => '0',
      clk => '0',
      clr => '0',
      op(0) => relational_op_net
    );

  relational1: entity work.relational_fe487ce1c7
    port map (
      a => counter_op_net,
      b => constant1_op_net,
      ce => '0',
      clk => '0',
      clr => '0',
      op(0) => relational1_op_net
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/coarse/fft_wideband_real0/fft_biplex_real_4x0/biplex_core/fft_stage_2"

entity fft_stage_2_entity_3adc821d91 is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    in1: in std_logic_vector(35 downto 0); 
    in2: in std_logic_vector(35 downto 0); 
    of_in: in std_logic; 
    shift: in std_logic_vector(9 downto 0); 
    sync: in std_logic; 
    of_x0: out std_logic; 
    out1: out std_logic_vector(35 downto 0); 
    out2: out std_logic_vector(35 downto 0); 
    sync_out: out std_logic
  );
end fft_stage_2_entity_3adc821d91;

architecture structural of fft_stage_2_entity_3adc821d91 is
  signal ce_1_sg_x104: std_logic;
  signal clk_1_sg_x104: std_logic;
  signal concat_y_net_x10: std_logic_vector(35 downto 0);
  signal concat_y_net_x11: std_logic_vector(35 downto 0);
  signal concat_y_net_x7: std_logic_vector(35 downto 0);
  signal concat_y_net_x9: std_logic_vector(35 downto 0);
  signal counter_op_net: std_logic_vector(5 downto 0);
  signal delay_q_net_x0: std_logic;
  signal logical1_y_net_x1: std_logic;
  signal logical1_y_net_x2: std_logic;
  signal logical_y_net_x0: std_logic;
  signal mux1_y_net_x0: std_logic_vector(35 downto 0);
  signal mux_y_net_x3: std_logic_vector(35 downto 0);
  signal mux_y_net_x5: std_logic;
  signal single_port_ram_data_out_net_x0: std_logic_vector(35 downto 0);
  signal single_port_ram_data_out_net_x3: std_logic_vector(35 downto 0);
  signal slice1_y_net: std_logic;
  signal slice6_y_net_x1: std_logic_vector(9 downto 0);
  signal slice_y_net_x0: std_logic;
  signal sync_delay_q_net_x2: std_logic;
  signal sync_delay_q_net_x3: std_logic;

begin
  ce_1_sg_x104 <= ce_1;
  clk_1_sg_x104 <= clk_1;
  concat_y_net_x7 <= in1;
  concat_y_net_x9 <= in2;
  logical1_y_net_x1 <= of_in;
  slice6_y_net_x1 <= shift;
  sync_delay_q_net_x2 <= sync;
  of_x0 <= logical1_y_net_x2;
  out1 <= concat_y_net_x10;
  out2 <= concat_y_net_x11;
  sync_out <= sync_delay_q_net_x3;

  butterfly_direct_57b07e077f: entity work.butterfly_direct_entity_57b07e077f
    port map (
      a => single_port_ram_data_out_net_x3,
      b => mux_y_net_x3,
      ce_1 => ce_1_sg_x104,
      clk_1 => clk_1_sg_x104,
      shift => slice_y_net_x0,
      sync => mux_y_net_x5,
      a_bw => concat_y_net_x10,
      a_bw_x0 => concat_y_net_x11,
      of_x0 => logical_y_net_x0,
      sync_out => sync_delay_q_net_x3
    );

  counter: entity work.xlcounter_free_c09f12_01
    generic map (
      core_name0 => "cntr_11_0_50ef766046ea9bf4",
      op_arith => xlUnsigned,
      op_width => 6
    )
    port map (
      ce => ce_1_sg_x104,
      clk => clk_1_sg_x104,
      clr => '0',
      en => "1",
      rst(0) => sync_delay_q_net_x2,
      op => counter_op_net
    );

  delay: entity work.xldelay
    generic map (
      latency => 1,
      reg_retiming => 0,
      reset => 0,
      width => 1
    )
    port map (
      ce => ce_1_sg_x104,
      clk => clk_1_sg_x104,
      d(0) => sync_delay_q_net_x2,
      en => '1',
      rst => '1',
      q(0) => delay_q_net_x0
    );

  delay_b_654034e28e: entity work.delay_b_entity_654034e28e
    port map (
      ce_1 => ce_1_sg_x104,
      clk_1 => clk_1_sg_x104,
      in1 => mux1_y_net_x0,
      out1 => single_port_ram_data_out_net_x3
    );

  delay_f_7dc8005c30: entity work.delay_b_entity_654034e28e
    port map (
      ce_1 => ce_1_sg_x104,
      clk_1 => clk_1_sg_x104,
      in1 => concat_y_net_x9,
      out1 => single_port_ram_data_out_net_x0
    );

  logical1: entity work.logical_444d3f5046
    port map (
      ce => ce_1_sg_x104,
      clk => clk_1_sg_x104,
      clr => '0',
      d0(0) => logical_y_net_x0,
      d1(0) => logical1_y_net_x1,
      y(0) => logical1_y_net_x2
    );

  mux: entity work.mux_4bb6f691f7
    port map (
      ce => ce_1_sg_x104,
      clk => clk_1_sg_x104,
      clr => '0',
      d0 => single_port_ram_data_out_net_x0,
      d1 => concat_y_net_x7,
      sel(0) => slice1_y_net,
      y => mux_y_net_x3
    );

  mux1: entity work.mux_4bb6f691f7
    port map (
      ce => ce_1_sg_x104,
      clk => clk_1_sg_x104,
      clr => '0',
      d0 => concat_y_net_x7,
      d1 => single_port_ram_data_out_net_x0,
      sel(0) => slice1_y_net,
      y => mux1_y_net_x0
    );

  slice: entity work.xlslice
    generic map (
      new_lsb => 1,
      new_msb => 1,
      x_width => 10,
      y_width => 1
    )
    port map (
      x => slice6_y_net_x1,
      y(0) => slice_y_net_x0
    );

  slice1: entity work.xlslice
    generic map (
      new_lsb => 5,
      new_msb => 5,
      x_width => 6,
      y_width => 1
    )
    port map (
      x => counter_op_net,
      y(0) => slice1_y_net
    );

  sync_delay_2f938a0c67: entity work.sync_delay_entity_2f938a0c67
    port map (
      ce_1 => ce_1_sg_x104,
      clk_1 => clk_1_sg_x104,
      in_x0 => delay_q_net_x0,
      out_x0 => mux_y_net_x5
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/coarse/fft_wideband_real0/fft_biplex_real_4x0/biplex_core/fft_stage_3/butterfly_direct/cadd"

entity cadd_entity_bd220e7516 is
  port (
    a_im: in std_logic_vector(17 downto 0); 
    a_re: in std_logic_vector(17 downto 0); 
    b_im: in std_logic_vector(21 downto 0); 
    b_re: in std_logic_vector(21 downto 0); 
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    c_im: out std_logic_vector(22 downto 0); 
    c_re: out std_logic_vector(22 downto 0)
  );
end cadd_entity_bd220e7516;

architecture structural of cadd_entity_bd220e7516 is
  signal alumode_op_net: std_logic_vector(3 downto 0);
  signal carryin_op_net: std_logic;
  signal carryinsel_op_net: std_logic_vector(2 downto 0);
  signal cast_c_im_dout_net_x0: std_logic_vector(22 downto 0);
  signal cast_c_re_dout_net_x0: std_logic_vector(22 downto 0);
  signal ce_1_sg_x105: std_logic;
  signal clk_1_sg_x105: std_logic;
  signal concat_a_y_net: std_logic_vector(47 downto 0);
  signal concat_b_y_net: std_logic_vector(47 downto 0);
  signal convert0_dout_net_x0: std_logic_vector(21 downto 0);
  signal convert1_dout_net_x0: std_logic_vector(21 downto 0);
  signal dsp48e_p_net: std_logic_vector(47 downto 0);
  signal force_im_output_port_net_x0: std_logic_vector(17 downto 0);
  signal force_re_output_port_net_x0: std_logic_vector(17 downto 0);
  signal opmode_op_net: std_logic_vector(6 downto 0);
  signal realign_a_im_dout_net: std_logic_vector(23 downto 0);
  signal realign_a_re_dout_net: std_logic_vector(23 downto 0);
  signal realign_b_im_dout_net: std_logic_vector(23 downto 0);
  signal realign_b_re_dout_net: std_logic_vector(23 downto 0);
  signal reinterp_a_im_output_port_net: std_logic_vector(23 downto 0);
  signal reinterp_a_re_output_port_net: std_logic_vector(23 downto 0);
  signal reinterp_b_im_output_port_net: std_logic_vector(23 downto 0);
  signal reinterp_b_re_output_port_net: std_logic_vector(23 downto 0);
  signal reinterp_c_im_output_port_net: std_logic_vector(23 downto 0);
  signal reinterp_c_re_output_port_net: std_logic_vector(23 downto 0);
  signal reinterpret_a_output_port_net: std_logic_vector(29 downto 0);
  signal reinterpret_b_output_port_net: std_logic_vector(17 downto 0);
  signal reinterpret_c_output_port_net: std_logic_vector(47 downto 0);
  signal slice_a_y_net: std_logic_vector(29 downto 0);
  signal slice_b_y_net: std_logic_vector(17 downto 0);
  signal slice_c_im_y_net: std_logic_vector(23 downto 0);
  signal slice_c_re_y_net: std_logic_vector(23 downto 0);

begin
  force_im_output_port_net_x0 <= a_im;
  force_re_output_port_net_x0 <= a_re;
  convert1_dout_net_x0 <= b_im;
  convert0_dout_net_x0 <= b_re;
  ce_1_sg_x105 <= ce_1;
  clk_1_sg_x105 <= clk_1;
  c_im <= cast_c_im_dout_net_x0;
  c_re <= cast_c_re_dout_net_x0;

  alumode: entity work.constant_4c449dd556
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op => alumode_op_net
    );

  carryin: entity work.constant_963ed6358a
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op(0) => carryin_op_net
    );

  carryinsel: entity work.constant_822933f89b
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op => carryinsel_op_net
    );

  cast_c_im: entity work.xlconvert
    generic map (
      bool_conversion => 0,
      din_arith => 2,
      din_bin_pt => 19,
      din_width => 24,
      dout_arith => 2,
      dout_bin_pt => 19,
      dout_width => 23,
      latency => 0,
      overflow => xlWrap,
      quantization => xlTruncate
    )
    port map (
      ce => ce_1_sg_x105,
      clk => clk_1_sg_x105,
      clr => '0',
      din => reinterp_c_im_output_port_net,
      en => "1",
      dout => cast_c_im_dout_net_x0
    );

  cast_c_re: entity work.xlconvert
    generic map (
      bool_conversion => 0,
      din_arith => 2,
      din_bin_pt => 19,
      din_width => 24,
      dout_arith => 2,
      dout_bin_pt => 19,
      dout_width => 23,
      latency => 0,
      overflow => xlWrap,
      quantization => xlTruncate
    )
    port map (
      ce => ce_1_sg_x105,
      clk => clk_1_sg_x105,
      clr => '0',
      din => reinterp_c_re_output_port_net,
      en => "1",
      dout => cast_c_re_dout_net_x0
    );

  concat_a: entity work.concat_b57c4be2de
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      in0 => reinterp_a_re_output_port_net,
      in1 => reinterp_a_im_output_port_net,
      y => concat_a_y_net
    );

  concat_b: entity work.concat_b57c4be2de
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      in0 => reinterp_b_re_output_port_net,
      in1 => reinterp_b_im_output_port_net,
      y => concat_b_y_net
    );

  dsp48e: entity work.xldsp48e
    generic map (
      a_input => "DIRECT",
      acascreg => 1,
      alumodereg => 1,
      areg => 1,
      autoreset_pattern_detect => FALSE,
      autoreset_pattern_detect_optinv => "MATCH",
      b_input => "DIRECT",
      bcascreg => 1,
      breg => 1,
      carryinreg => 1,
      carryinselreg => 1,
      carryout_width => 4,
      creg => 1,
      mreg => 1,
      opmodereg => 1,
      preg => 1,
      sel_mask => "MASK",
      sel_pattern => "PATTERN",
      use_c_port => 1,
      use_mult => "MULT_S",
      use_op => 0,
      use_pattern_detect => "NO_PATDET",
      use_simd => "TWO24"
    )
    port map (
      a => reinterpret_a_output_port_net,
      alumode => alumode_op_net,
      b => reinterpret_b_output_port_net,
      c => reinterpret_c_output_port_net,
      carryin(0) => carryin_op_net,
      carryinsel => carryinsel_op_net,
      ce => ce_1_sg_x105,
      cea1 => "1",
      cea2 => "1",
      cealumode => "1",
      ceb1 => "1",
      ceb2 => "1",
      cec => "1",
      cecarryin => "1",
      cectrl => "1",
      cem => "1",
      cemultcarryin => "1",
      cep => "1",
      clk => clk_1_sg_x105,
      en => "1",
      opmode => opmode_op_net,
      rst => "0",
      rsta => "0",
      rstalumode => "0",
      rstb => "0",
      rstc => "0",
      rstcarryin => "0",
      rstctrl => "0",
      rstm => "0",
      rstp => "0",
      p => dsp48e_p_net
    );

  opmode: entity work.constant_270746ab47
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op => opmode_op_net
    );

  realign_a_im: entity work.xlconvert
    generic map (
      bool_conversion => 0,
      din_arith => 2,
      din_bin_pt => 17,
      din_width => 18,
      dout_arith => 2,
      dout_bin_pt => 19,
      dout_width => 24,
      latency => 0,
      overflow => xlWrap,
      quantization => xlTruncate
    )
    port map (
      ce => ce_1_sg_x105,
      clk => clk_1_sg_x105,
      clr => '0',
      din => force_im_output_port_net_x0,
      en => "1",
      dout => realign_a_im_dout_net
    );

  realign_a_re: entity work.xlconvert
    generic map (
      bool_conversion => 0,
      din_arith => 2,
      din_bin_pt => 17,
      din_width => 18,
      dout_arith => 2,
      dout_bin_pt => 19,
      dout_width => 24,
      latency => 0,
      overflow => xlWrap,
      quantization => xlTruncate
    )
    port map (
      ce => ce_1_sg_x105,
      clk => clk_1_sg_x105,
      clr => '0',
      din => force_re_output_port_net_x0,
      en => "1",
      dout => realign_a_re_dout_net
    );

  realign_b_im: entity work.xlconvert
    generic map (
      bool_conversion => 0,
      din_arith => 2,
      din_bin_pt => 19,
      din_width => 22,
      dout_arith => 2,
      dout_bin_pt => 19,
      dout_width => 24,
      latency => 0,
      overflow => xlWrap,
      quantization => xlTruncate
    )
    port map (
      ce => ce_1_sg_x105,
      clk => clk_1_sg_x105,
      clr => '0',
      din => convert1_dout_net_x0,
      en => "1",
      dout => realign_b_im_dout_net
    );

  realign_b_re: entity work.xlconvert
    generic map (
      bool_conversion => 0,
      din_arith => 2,
      din_bin_pt => 19,
      din_width => 22,
      dout_arith => 2,
      dout_bin_pt => 19,
      dout_width => 24,
      latency => 0,
      overflow => xlWrap,
      quantization => xlTruncate
    )
    port map (
      ce => ce_1_sg_x105,
      clk => clk_1_sg_x105,
      clr => '0',
      din => convert0_dout_net_x0,
      en => "1",
      dout => realign_b_re_dout_net
    );

  reinterp_a_im: entity work.reinterpret_3fb4604c01
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => realign_a_im_dout_net,
      output_port => reinterp_a_im_output_port_net
    );

  reinterp_a_re: entity work.reinterpret_3fb4604c01
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => realign_a_re_dout_net,
      output_port => reinterp_a_re_output_port_net
    );

  reinterp_b_im: entity work.reinterpret_3fb4604c01
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => realign_b_im_dout_net,
      output_port => reinterp_b_im_output_port_net
    );

  reinterp_b_re: entity work.reinterpret_3fb4604c01
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => realign_b_re_dout_net,
      output_port => reinterp_b_re_output_port_net
    );

  reinterp_c_im: entity work.reinterpret_4bf1ad328a
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => slice_c_im_y_net,
      output_port => reinterp_c_im_output_port_net
    );

  reinterp_c_re: entity work.reinterpret_4bf1ad328a
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => slice_c_re_y_net,
      output_port => reinterp_c_re_output_port_net
    );

  reinterpret_a: entity work.reinterpret_eb03bc3377
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => slice_a_y_net,
      output_port => reinterpret_a_output_port_net
    );

  reinterpret_b: entity work.reinterpret_9a0fa0f632
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => slice_b_y_net,
      output_port => reinterpret_b_output_port_net
    );

  reinterpret_c: entity work.reinterpret_7ea107432a
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => concat_a_y_net,
      output_port => reinterpret_c_output_port_net
    );

  slice_a: entity work.xlslice
    generic map (
      new_lsb => 18,
      new_msb => 47,
      x_width => 48,
      y_width => 30
    )
    port map (
      x => concat_b_y_net,
      y => slice_a_y_net
    );

  slice_b: entity work.xlslice
    generic map (
      new_lsb => 0,
      new_msb => 17,
      x_width => 48,
      y_width => 18
    )
    port map (
      x => concat_b_y_net,
      y => slice_b_y_net
    );

  slice_c_im: entity work.xlslice
    generic map (
      new_lsb => 0,
      new_msb => 23,
      x_width => 48,
      y_width => 24
    )
    port map (
      x => dsp48e_p_net,
      y => slice_c_im_y_net
    );

  slice_c_re: entity work.xlslice
    generic map (
      new_lsb => 24,
      new_msb => 47,
      x_width => 48,
      y_width => 24
    )
    port map (
      x => dsp48e_p_net,
      y => slice_c_re_y_net
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/coarse/fft_wideband_real0/fft_biplex_real_4x0/biplex_core/fft_stage_3/butterfly_direct/convert_of0/convert"

entity convert_entity_e184aba7ce is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    in_x0: in std_logic_vector(23 downto 0); 
    out_x0: out std_logic_vector(17 downto 0)
  );
end convert_entity_e184aba7ce;

architecture structural of convert_entity_e184aba7ce is
  signal adder_s_net_x0: std_logic_vector(17 downto 0);
  signal almost_half_op_net: std_logic_vector(20 downto 0);
  signal bit_y_net: std_logic;
  signal ce_1_sg_x106: std_logic;
  signal clk_1_sg_x106: std_logic;
  signal concat_y_net: std_logic_vector(24 downto 0);
  signal constant_op_net: std_logic;
  signal force1_output_port_net: std_logic_vector(24 downto 0);
  signal force2_output_port_net: std_logic_vector(20 downto 0);
  signal mux0_y_net_x0: std_logic_vector(23 downto 0);
  signal reinterpret_output_port_net: std_logic_vector(23 downto 0);
  signal tweak_op_y_net: std_logic;

begin
  ce_1_sg_x106 <= ce_1;
  clk_1_sg_x106 <= clk_1;
  mux0_y_net_x0 <= in_x0;
  out_x0 <= adder_s_net_x0;

  adder: entity work.addsub_580a0b011a
    port map (
      a => force1_output_port_net,
      b => force2_output_port_net,
      ce => ce_1_sg_x106,
      clk => clk_1_sg_x106,
      clr => '0',
      s => adder_s_net_x0
    );

  almost_half: entity work.constant_9a2c97cce5
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op => almost_half_op_net
    );

  bit: entity work.xlslice
    generic map (
      new_lsb => 3,
      new_msb => 3,
      x_width => 24,
      y_width => 1
    )
    port map (
      x => mux0_y_net_x0,
      y(0) => bit_y_net
    );

  concat: entity work.concat_f133931c1f
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      in0 => reinterpret_output_port_net,
      in1(0) => tweak_op_y_net,
      y => concat_y_net
    );

  constant_x0: entity work.constant_6293007044
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op(0) => constant_op_net
    );

  force1: entity work.reinterpret_60ea556961
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => concat_y_net,
      output_port => force1_output_port_net
    );

  force2: entity work.reinterpret_299ca43e25
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => almost_half_op_net,
      output_port => force2_output_port_net
    );

  reinterpret: entity work.reinterpret_3fb4604c01
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => mux0_y_net_x0,
      output_port => reinterpret_output_port_net
    );

  tweak_op: entity work.logical_938d99ac11
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0(0) => bit_y_net,
      d1(0) => constant_op_net,
      y(0) => tweak_op_y_net
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/coarse/fft_wideband_real0/fft_biplex_real_4x0/biplex_core/fft_stage_3/butterfly_direct/convert_of0"

entity convert_of0_entity_6501bdd0bd is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    din: in std_logic_vector(23 downto 0); 
    dout: out std_logic_vector(17 downto 0); 
    of_x0: out std_logic
  );
end convert_of0_entity_6501bdd0bd;

architecture structural of convert_of0_entity_6501bdd0bd is
  signal adder_s_net_x1: std_logic_vector(17 downto 0);
  signal all_0s_y_net: std_logic;
  signal all_1s_y_net: std_logic;
  signal and_y_net_x0: std_logic;
  signal ce_1_sg_x107: std_logic;
  signal clk_1_sg_x107: std_logic;
  signal invert1_op_net: std_logic;
  signal invert2_op_net: std_logic;
  signal invert3_op_net: std_logic;
  signal invert4_op_net: std_logic;
  signal mux0_y_net_x1: std_logic_vector(23 downto 0);
  signal slice1_y_net: std_logic;
  signal slice2_y_net: std_logic;
  signal slice3_y_net: std_logic;
  signal slice4_y_net: std_logic;

begin
  ce_1_sg_x107 <= ce_1;
  clk_1_sg_x107 <= clk_1;
  mux0_y_net_x1 <= din;
  dout <= adder_s_net_x1;
  of_x0 <= and_y_net_x0;

  all_0s: entity work.logical_f5b5b4645f
    port map (
      ce => ce_1_sg_x107,
      clk => clk_1_sg_x107,
      clr => '0',
      d0(0) => invert1_op_net,
      d1(0) => invert2_op_net,
      d2(0) => invert3_op_net,
      d3(0) => invert4_op_net,
      y(0) => all_0s_y_net
    );

  all_1s: entity work.logical_f5b5b4645f
    port map (
      ce => ce_1_sg_x107,
      clk => clk_1_sg_x107,
      clr => '0',
      d0(0) => slice1_y_net,
      d1(0) => slice2_y_net,
      d2(0) => slice3_y_net,
      d3(0) => slice4_y_net,
      y(0) => all_1s_y_net
    );

  and_x0: entity work.logical_80f90b97d0
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0(0) => all_0s_y_net,
      d1(0) => all_1s_y_net,
      y(0) => and_y_net_x0
    );

  convert_e184aba7ce: entity work.convert_entity_e184aba7ce
    port map (
      ce_1 => ce_1_sg_x107,
      clk_1 => clk_1_sg_x107,
      in_x0 => mux0_y_net_x1,
      out_x0 => adder_s_net_x1
    );

  invert1: entity work.inverter_e5b38cca3b
    port map (
      ce => ce_1_sg_x107,
      clk => clk_1_sg_x107,
      clr => '0',
      ip(0) => slice1_y_net,
      op(0) => invert1_op_net
    );

  invert2: entity work.inverter_e5b38cca3b
    port map (
      ce => ce_1_sg_x107,
      clk => clk_1_sg_x107,
      clr => '0',
      ip(0) => slice2_y_net,
      op(0) => invert2_op_net
    );

  invert3: entity work.inverter_e5b38cca3b
    port map (
      ce => ce_1_sg_x107,
      clk => clk_1_sg_x107,
      clr => '0',
      ip(0) => slice3_y_net,
      op(0) => invert3_op_net
    );

  invert4: entity work.inverter_e5b38cca3b
    port map (
      ce => ce_1_sg_x107,
      clk => clk_1_sg_x107,
      clr => '0',
      ip(0) => slice4_y_net,
      op(0) => invert4_op_net
    );

  slice1: entity work.xlslice
    generic map (
      new_lsb => 23,
      new_msb => 23,
      x_width => 24,
      y_width => 1
    )
    port map (
      x => mux0_y_net_x1,
      y(0) => slice1_y_net
    );

  slice2: entity work.xlslice
    generic map (
      new_lsb => 22,
      new_msb => 22,
      x_width => 24,
      y_width => 1
    )
    port map (
      x => mux0_y_net_x1,
      y(0) => slice2_y_net
    );

  slice3: entity work.xlslice
    generic map (
      new_lsb => 21,
      new_msb => 21,
      x_width => 24,
      y_width => 1
    )
    port map (
      x => mux0_y_net_x1,
      y(0) => slice3_y_net
    );

  slice4: entity work.xlslice
    generic map (
      new_lsb => 20,
      new_msb => 20,
      x_width => 24,
      y_width => 1
    )
    port map (
      x => mux0_y_net_x1,
      y(0) => slice4_y_net
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/coarse/fft_wideband_real0/fft_biplex_real_4x0/biplex_core/fft_stage_3/butterfly_direct/csub"

entity csub_entity_394eae4754 is
  port (
    a_im: in std_logic_vector(17 downto 0); 
    a_re: in std_logic_vector(17 downto 0); 
    b_im: in std_logic_vector(21 downto 0); 
    b_re: in std_logic_vector(21 downto 0); 
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    c_im: out std_logic_vector(22 downto 0); 
    c_re: out std_logic_vector(22 downto 0)
  );
end csub_entity_394eae4754;

architecture structural of csub_entity_394eae4754 is
  signal alumode_op_net: std_logic_vector(3 downto 0);
  signal carryin_op_net: std_logic;
  signal carryinsel_op_net: std_logic_vector(2 downto 0);
  signal cast_c_im_dout_net_x0: std_logic_vector(22 downto 0);
  signal cast_c_re_dout_net_x0: std_logic_vector(22 downto 0);
  signal ce_1_sg_x114: std_logic;
  signal clk_1_sg_x114: std_logic;
  signal concat_a_y_net: std_logic_vector(47 downto 0);
  signal concat_b_y_net: std_logic_vector(47 downto 0);
  signal convert0_dout_net_x1: std_logic_vector(21 downto 0);
  signal convert1_dout_net_x1: std_logic_vector(21 downto 0);
  signal dsp48e_p_net: std_logic_vector(47 downto 0);
  signal force_im_output_port_net_x1: std_logic_vector(17 downto 0);
  signal force_re_output_port_net_x1: std_logic_vector(17 downto 0);
  signal opmode_op_net: std_logic_vector(6 downto 0);
  signal realign_a_im_dout_net: std_logic_vector(23 downto 0);
  signal realign_a_re_dout_net: std_logic_vector(23 downto 0);
  signal realign_b_im_dout_net: std_logic_vector(23 downto 0);
  signal realign_b_re_dout_net: std_logic_vector(23 downto 0);
  signal reinterp_a_im_output_port_net: std_logic_vector(23 downto 0);
  signal reinterp_a_re_output_port_net: std_logic_vector(23 downto 0);
  signal reinterp_b_im_output_port_net: std_logic_vector(23 downto 0);
  signal reinterp_b_re_output_port_net: std_logic_vector(23 downto 0);
  signal reinterp_c_im_output_port_net: std_logic_vector(23 downto 0);
  signal reinterp_c_re_output_port_net: std_logic_vector(23 downto 0);
  signal reinterpret_a_output_port_net: std_logic_vector(29 downto 0);
  signal reinterpret_b_output_port_net: std_logic_vector(17 downto 0);
  signal reinterpret_c_output_port_net: std_logic_vector(47 downto 0);
  signal slice_a_y_net: std_logic_vector(29 downto 0);
  signal slice_b_y_net: std_logic_vector(17 downto 0);
  signal slice_c_im_y_net: std_logic_vector(23 downto 0);
  signal slice_c_re_y_net: std_logic_vector(23 downto 0);

begin
  force_im_output_port_net_x1 <= a_im;
  force_re_output_port_net_x1 <= a_re;
  convert1_dout_net_x1 <= b_im;
  convert0_dout_net_x1 <= b_re;
  ce_1_sg_x114 <= ce_1;
  clk_1_sg_x114 <= clk_1;
  c_im <= cast_c_im_dout_net_x0;
  c_re <= cast_c_re_dout_net_x0;

  alumode: entity work.constant_8038205d89
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op => alumode_op_net
    );

  carryin: entity work.constant_963ed6358a
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op(0) => carryin_op_net
    );

  carryinsel: entity work.constant_822933f89b
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op => carryinsel_op_net
    );

  cast_c_im: entity work.xlconvert
    generic map (
      bool_conversion => 0,
      din_arith => 2,
      din_bin_pt => 19,
      din_width => 24,
      dout_arith => 2,
      dout_bin_pt => 19,
      dout_width => 23,
      latency => 0,
      overflow => xlWrap,
      quantization => xlTruncate
    )
    port map (
      ce => ce_1_sg_x114,
      clk => clk_1_sg_x114,
      clr => '0',
      din => reinterp_c_im_output_port_net,
      en => "1",
      dout => cast_c_im_dout_net_x0
    );

  cast_c_re: entity work.xlconvert
    generic map (
      bool_conversion => 0,
      din_arith => 2,
      din_bin_pt => 19,
      din_width => 24,
      dout_arith => 2,
      dout_bin_pt => 19,
      dout_width => 23,
      latency => 0,
      overflow => xlWrap,
      quantization => xlTruncate
    )
    port map (
      ce => ce_1_sg_x114,
      clk => clk_1_sg_x114,
      clr => '0',
      din => reinterp_c_re_output_port_net,
      en => "1",
      dout => cast_c_re_dout_net_x0
    );

  concat_a: entity work.concat_b57c4be2de
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      in0 => reinterp_a_re_output_port_net,
      in1 => reinterp_a_im_output_port_net,
      y => concat_a_y_net
    );

  concat_b: entity work.concat_b57c4be2de
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      in0 => reinterp_b_re_output_port_net,
      in1 => reinterp_b_im_output_port_net,
      y => concat_b_y_net
    );

  dsp48e: entity work.xldsp48e
    generic map (
      a_input => "DIRECT",
      acascreg => 1,
      alumodereg => 1,
      areg => 1,
      autoreset_pattern_detect => FALSE,
      autoreset_pattern_detect_optinv => "MATCH",
      b_input => "DIRECT",
      bcascreg => 1,
      breg => 1,
      carryinreg => 1,
      carryinselreg => 1,
      carryout_width => 4,
      creg => 1,
      mreg => 1,
      opmodereg => 1,
      preg => 1,
      sel_mask => "MASK",
      sel_pattern => "PATTERN",
      use_c_port => 1,
      use_mult => "MULT_S",
      use_op => 0,
      use_pattern_detect => "NO_PATDET",
      use_simd => "TWO24"
    )
    port map (
      a => reinterpret_a_output_port_net,
      alumode => alumode_op_net,
      b => reinterpret_b_output_port_net,
      c => reinterpret_c_output_port_net,
      carryin(0) => carryin_op_net,
      carryinsel => carryinsel_op_net,
      ce => ce_1_sg_x114,
      cea1 => "1",
      cea2 => "1",
      cealumode => "1",
      ceb1 => "1",
      ceb2 => "1",
      cec => "1",
      cecarryin => "1",
      cectrl => "1",
      cem => "1",
      cemultcarryin => "1",
      cep => "1",
      clk => clk_1_sg_x114,
      en => "1",
      opmode => opmode_op_net,
      rst => "0",
      rsta => "0",
      rstalumode => "0",
      rstb => "0",
      rstc => "0",
      rstcarryin => "0",
      rstctrl => "0",
      rstm => "0",
      rstp => "0",
      p => dsp48e_p_net
    );

  opmode: entity work.constant_270746ab47
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op => opmode_op_net
    );

  realign_a_im: entity work.xlconvert
    generic map (
      bool_conversion => 0,
      din_arith => 2,
      din_bin_pt => 17,
      din_width => 18,
      dout_arith => 2,
      dout_bin_pt => 19,
      dout_width => 24,
      latency => 0,
      overflow => xlWrap,
      quantization => xlTruncate
    )
    port map (
      ce => ce_1_sg_x114,
      clk => clk_1_sg_x114,
      clr => '0',
      din => force_im_output_port_net_x1,
      en => "1",
      dout => realign_a_im_dout_net
    );

  realign_a_re: entity work.xlconvert
    generic map (
      bool_conversion => 0,
      din_arith => 2,
      din_bin_pt => 17,
      din_width => 18,
      dout_arith => 2,
      dout_bin_pt => 19,
      dout_width => 24,
      latency => 0,
      overflow => xlWrap,
      quantization => xlTruncate
    )
    port map (
      ce => ce_1_sg_x114,
      clk => clk_1_sg_x114,
      clr => '0',
      din => force_re_output_port_net_x1,
      en => "1",
      dout => realign_a_re_dout_net
    );

  realign_b_im: entity work.xlconvert
    generic map (
      bool_conversion => 0,
      din_arith => 2,
      din_bin_pt => 19,
      din_width => 22,
      dout_arith => 2,
      dout_bin_pt => 19,
      dout_width => 24,
      latency => 0,
      overflow => xlWrap,
      quantization => xlTruncate
    )
    port map (
      ce => ce_1_sg_x114,
      clk => clk_1_sg_x114,
      clr => '0',
      din => convert1_dout_net_x1,
      en => "1",
      dout => realign_b_im_dout_net
    );

  realign_b_re: entity work.xlconvert
    generic map (
      bool_conversion => 0,
      din_arith => 2,
      din_bin_pt => 19,
      din_width => 22,
      dout_arith => 2,
      dout_bin_pt => 19,
      dout_width => 24,
      latency => 0,
      overflow => xlWrap,
      quantization => xlTruncate
    )
    port map (
      ce => ce_1_sg_x114,
      clk => clk_1_sg_x114,
      clr => '0',
      din => convert0_dout_net_x1,
      en => "1",
      dout => realign_b_re_dout_net
    );

  reinterp_a_im: entity work.reinterpret_3fb4604c01
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => realign_a_im_dout_net,
      output_port => reinterp_a_im_output_port_net
    );

  reinterp_a_re: entity work.reinterpret_3fb4604c01
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => realign_a_re_dout_net,
      output_port => reinterp_a_re_output_port_net
    );

  reinterp_b_im: entity work.reinterpret_3fb4604c01
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => realign_b_im_dout_net,
      output_port => reinterp_b_im_output_port_net
    );

  reinterp_b_re: entity work.reinterpret_3fb4604c01
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => realign_b_re_dout_net,
      output_port => reinterp_b_re_output_port_net
    );

  reinterp_c_im: entity work.reinterpret_4bf1ad328a
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => slice_c_im_y_net,
      output_port => reinterp_c_im_output_port_net
    );

  reinterp_c_re: entity work.reinterpret_4bf1ad328a
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => slice_c_re_y_net,
      output_port => reinterp_c_re_output_port_net
    );

  reinterpret_a: entity work.reinterpret_eb03bc3377
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => slice_a_y_net,
      output_port => reinterpret_a_output_port_net
    );

  reinterpret_b: entity work.reinterpret_9a0fa0f632
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => slice_b_y_net,
      output_port => reinterpret_b_output_port_net
    );

  reinterpret_c: entity work.reinterpret_7ea107432a
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => concat_a_y_net,
      output_port => reinterpret_c_output_port_net
    );

  slice_a: entity work.xlslice
    generic map (
      new_lsb => 18,
      new_msb => 47,
      x_width => 48,
      y_width => 30
    )
    port map (
      x => concat_b_y_net,
      y => slice_a_y_net
    );

  slice_b: entity work.xlslice
    generic map (
      new_lsb => 0,
      new_msb => 17,
      x_width => 48,
      y_width => 18
    )
    port map (
      x => concat_b_y_net,
      y => slice_b_y_net
    );

  slice_c_im: entity work.xlslice
    generic map (
      new_lsb => 0,
      new_msb => 23,
      x_width => 48,
      y_width => 24
    )
    port map (
      x => dsp48e_p_net,
      y => slice_c_im_y_net
    );

  slice_c_re: entity work.xlslice
    generic map (
      new_lsb => 24,
      new_msb => 47,
      x_width => 48,
      y_width => 24
    )
    port map (
      x => dsp48e_p_net,
      y => slice_c_re_y_net
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/coarse/fft_wideband_real0/fft_biplex_real_4x0/biplex_core/fft_stage_3/butterfly_direct/twiddle_general_4mult/c_to_ri2"

entity c_to_ri2_entity_e1b86f6b2f is
  port (
    c: in std_logic_vector(35 downto 0); 
    im: out std_logic_vector(17 downto 0); 
    re: out std_logic_vector(17 downto 0)
  );
end c_to_ri2_entity_e1b86f6b2f;

architecture structural of c_to_ri2_entity_e1b86f6b2f is
  signal concat_y_net_x0: std_logic_vector(35 downto 0);
  signal force_im_output_port_net_x0: std_logic_vector(17 downto 0);
  signal force_re_output_port_net_x0: std_logic_vector(17 downto 0);
  signal slice_im_y_net: std_logic_vector(17 downto 0);
  signal slice_re_y_net: std_logic_vector(17 downto 0);

begin
  concat_y_net_x0 <= c;
  im <= force_im_output_port_net_x0;
  re <= force_re_output_port_net_x0;

  force_im: entity work.reinterpret_9a0fa0f632
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => slice_im_y_net,
      output_port => force_im_output_port_net_x0
    );

  force_re: entity work.reinterpret_9a0fa0f632
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => slice_re_y_net,
      output_port => force_re_output_port_net_x0
    );

  slice_im: entity work.xlslice
    generic map (
      new_lsb => 0,
      new_msb => 17,
      x_width => 36,
      y_width => 18
    )
    port map (
      x => concat_y_net_x0,
      y => slice_im_y_net
    );

  slice_re: entity work.xlslice
    generic map (
      new_lsb => 18,
      new_msb => 35,
      x_width => 36,
      y_width => 18
    )
    port map (
      x => concat_y_net_x0,
      y => slice_re_y_net
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/coarse/fft_wideband_real0/fft_biplex_real_4x0/biplex_core/fft_stage_3/butterfly_direct/twiddle_general_4mult/coeff_gen/ri_to_c"

entity ri_to_c_entity_2abbfa7cd7 is
  port (
    im: in std_logic_vector(17 downto 0); 
    re: in std_logic_vector(17 downto 0); 
    c: out std_logic_vector(35 downto 0)
  );
end ri_to_c_entity_2abbfa7cd7;

architecture structural of ri_to_c_entity_2abbfa7cd7 is
  signal concat_y_net_x1: std_logic_vector(35 downto 0);
  signal force_im_output_port_net: std_logic_vector(17 downto 0);
  signal force_re_output_port_net: std_logic_vector(17 downto 0);
  signal rom1_data_net_x0: std_logic_vector(17 downto 0);
  signal rom_data_net_x0: std_logic_vector(17 downto 0);

begin
  rom1_data_net_x0 <= im;
  rom_data_net_x0 <= re;
  c <= concat_y_net_x1;

  concat: entity work.concat_b198bd62b0
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      in0 => force_re_output_port_net,
      in1 => force_im_output_port_net,
      y => concat_y_net_x1
    );

  force_im: entity work.reinterpret_580feec131
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => rom1_data_net_x0,
      output_port => force_im_output_port_net
    );

  force_re: entity work.reinterpret_580feec131
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => rom_data_net_x0,
      output_port => force_re_output_port_net
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/coarse/fft_wideband_real0/fft_biplex_real_4x0/biplex_core/fft_stage_3/butterfly_direct/twiddle_general_4mult/coeff_gen"

entity coeff_gen_entity_1e1eba0bd0 is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    rst: in std_logic; 
    w: out std_logic_vector(35 downto 0)
  );
end coeff_gen_entity_1e1eba0bd0;

architecture structural of coeff_gen_entity_1e1eba0bd0 is
  signal ce_1_sg_x115: std_logic;
  signal clk_1_sg_x115: std_logic;
  signal concat_y_net_x2: std_logic_vector(35 downto 0);
  signal counter_op_net: std_logic_vector(5 downto 0);
  signal mux_y_net_x0: std_logic;
  signal rom1_data_net_x0: std_logic_vector(17 downto 0);
  signal rom_data_net_x0: std_logic_vector(17 downto 0);
  signal slice_y_net: std_logic_vector(1 downto 0);

begin
  ce_1_sg_x115 <= ce_1;
  clk_1_sg_x115 <= clk_1;
  mux_y_net_x0 <= rst;
  w <= concat_y_net_x2;

  counter: entity work.xlcounter_free_c09f12_01
    generic map (
      core_name0 => "cntr_11_0_50ef766046ea9bf4",
      op_arith => xlUnsigned,
      op_width => 6
    )
    port map (
      ce => ce_1_sg_x115,
      clk => clk_1_sg_x115,
      clr => '0',
      en => "1",
      rst(0) => mux_y_net_x0,
      op => counter_op_net
    );

  ri_to_c_2abbfa7cd7: entity work.ri_to_c_entity_2abbfa7cd7
    port map (
      im => rom1_data_net_x0,
      re => rom_data_net_x0,
      c => concat_y_net_x2
    );

  rom: entity work.xlsprom_dist_c09f12_01
    generic map (
      addr_width => 2,
      c_address_width => 4,
      c_width => 18,
      core_name0 => "dmg_72_31a1909e3929c7f7",
      latency => 3
    )
    port map (
      addr => slice_y_net,
      ce => ce_1_sg_x115,
      clk => clk_1_sg_x115,
      en => "1",
      data => rom_data_net_x0
    );

  rom1: entity work.xlsprom_dist_c09f12_01
    generic map (
      addr_width => 2,
      c_address_width => 4,
      c_width => 18,
      core_name0 => "dmg_72_c09662d4202cd49a",
      latency => 3
    )
    port map (
      addr => slice_y_net,
      ce => ce_1_sg_x115,
      clk => clk_1_sg_x115,
      en => "1",
      data => rom1_data_net_x0
    );

  slice: entity work.xlslice
    generic map (
      new_lsb => 4,
      new_msb => 5,
      x_width => 6,
      y_width => 2
    )
    port map (
      x => counter_op_net,
      y => slice_y_net
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/coarse/fft_wideband_real0/fft_biplex_real_4x0/biplex_core/fft_stage_3/butterfly_direct/twiddle_general_4mult"

entity twiddle_general_4mult_entity_fb04e7b04a is
  port (
    a: in std_logic_vector(35 downto 0); 
    b: in std_logic_vector(35 downto 0); 
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    sync: in std_logic; 
    a_im: out std_logic_vector(17 downto 0); 
    a_re: out std_logic_vector(17 downto 0); 
    bw_im: out std_logic_vector(21 downto 0); 
    bw_re: out std_logic_vector(21 downto 0); 
    sync_out: out std_logic
  );
end twiddle_general_4mult_entity_fb04e7b04a;

architecture structural of twiddle_general_4mult_entity_fb04e7b04a is
  signal addsub1_s_net: std_logic_vector(36 downto 0);
  signal addsub_s_net: std_logic_vector(36 downto 0);
  signal ce_1_sg_x116: std_logic;
  signal clk_1_sg_x116: std_logic;
  signal concat_y_net_x2: std_logic_vector(35 downto 0);
  signal convert0_dout_net_x2: std_logic_vector(21 downto 0);
  signal convert1_dout_net_x2: std_logic_vector(21 downto 0);
  signal delay0_q_net_x0: std_logic_vector(35 downto 0);
  signal delay1_q_net_x0: std_logic_vector(35 downto 0);
  signal delay2_q_net_x0: std_logic;
  signal force_im_output_port_net_x0: std_logic_vector(17 downto 0);
  signal force_im_output_port_net_x1: std_logic_vector(17 downto 0);
  signal force_im_output_port_net_x3: std_logic_vector(17 downto 0);
  signal force_re_output_port_net_x0: std_logic_vector(17 downto 0);
  signal force_re_output_port_net_x1: std_logic_vector(17 downto 0);
  signal force_re_output_port_net_x3: std_logic_vector(17 downto 0);
  signal mult1_p_net: std_logic_vector(35 downto 0);
  signal mult2_p_net: std_logic_vector(35 downto 0);
  signal mult3_p_net: std_logic_vector(35 downto 0);
  signal mult_p_net: std_logic_vector(35 downto 0);
  signal mux_y_net_x1: std_logic_vector(35 downto 0);
  signal mux_y_net_x2: std_logic;
  signal single_port_ram_data_out_net_x0: std_logic_vector(35 downto 0);

begin
  single_port_ram_data_out_net_x0 <= a;
  mux_y_net_x1 <= b;
  ce_1_sg_x116 <= ce_1;
  clk_1_sg_x116 <= clk_1;
  mux_y_net_x2 <= sync;
  a_im <= force_im_output_port_net_x3;
  a_re <= force_re_output_port_net_x3;
  bw_im <= convert1_dout_net_x2;
  bw_re <= convert0_dout_net_x2;
  sync_out <= delay2_q_net_x0;

  addsub: entity work.addsub_be8c56327e
    port map (
      a => mult_p_net,
      b => mult2_p_net,
      ce => ce_1_sg_x116,
      clk => clk_1_sg_x116,
      clr => '0',
      s => addsub_s_net
    );

  addsub1: entity work.addsub_eb2273ac28
    port map (
      a => mult1_p_net,
      b => mult3_p_net,
      ce => ce_1_sg_x116,
      clk => clk_1_sg_x116,
      clr => '0',
      s => addsub1_s_net
    );

  c_to_ri1_0fef39ce60: entity work.c_to_ri0_entity_ac3e6eb705
    port map (
      c => delay0_q_net_x0,
      im => force_im_output_port_net_x3,
      re => force_re_output_port_net_x3
    );

  c_to_ri2_e1b86f6b2f: entity work.c_to_ri2_entity_e1b86f6b2f
    port map (
      c => concat_y_net_x2,
      im => force_im_output_port_net_x0,
      re => force_re_output_port_net_x0
    );

  c_to_ri3_e88e2bdb99: entity work.c_to_ri0_entity_ac3e6eb705
    port map (
      c => delay1_q_net_x0,
      im => force_im_output_port_net_x1,
      re => force_re_output_port_net_x1
    );

  coeff_gen_1e1eba0bd0: entity work.coeff_gen_entity_1e1eba0bd0
    port map (
      ce_1 => ce_1_sg_x116,
      clk_1 => clk_1_sg_x116,
      rst => mux_y_net_x2,
      w => concat_y_net_x2
    );

  convert0: entity work.xlconvert_pipeline
    generic map (
      bool_conversion => 0,
      din_arith => 2,
      din_bin_pt => 33,
      din_width => 37,
      dout_arith => 2,
      dout_bin_pt => 19,
      dout_width => 22,
      latency => 2,
      overflow => xlWrap,
      quantization => xlRoundBanker
    )
    port map (
      ce => ce_1_sg_x116,
      clk => clk_1_sg_x116,
      clr => '0',
      din => addsub_s_net,
      en => "1",
      dout => convert0_dout_net_x2
    );

  convert1: entity work.xlconvert_pipeline
    generic map (
      bool_conversion => 0,
      din_arith => 2,
      din_bin_pt => 33,
      din_width => 37,
      dout_arith => 2,
      dout_bin_pt => 19,
      dout_width => 22,
      latency => 2,
      overflow => xlWrap,
      quantization => xlRoundBanker
    )
    port map (
      ce => ce_1_sg_x116,
      clk => clk_1_sg_x116,
      clr => '0',
      din => addsub1_s_net,
      en => "1",
      dout => convert1_dout_net_x2
    );

  delay0: entity work.xldelay
    generic map (
      latency => 10,
      reg_retiming => 0,
      reset => 0,
      width => 36
    )
    port map (
      ce => ce_1_sg_x116,
      clk => clk_1_sg_x116,
      d => single_port_ram_data_out_net_x0,
      en => '1',
      rst => '1',
      q => delay0_q_net_x0
    );

  delay1: entity work.delay_4b00a70dea
    port map (
      ce => ce_1_sg_x116,
      clk => clk_1_sg_x116,
      clr => '0',
      d => mux_y_net_x1,
      q => delay1_q_net_x0
    );

  delay2: entity work.xldelay
    generic map (
      latency => 10,
      reg_retiming => 0,
      reset => 0,
      width => 1
    )
    port map (
      ce => ce_1_sg_x116,
      clk => clk_1_sg_x116,
      d(0) => mux_y_net_x2,
      en => '1',
      rst => '1',
      q(0) => delay2_q_net_x0
    );

  mult: entity work.mult_cfc8c45902
    port map (
      a => force_re_output_port_net_x1,
      b => force_re_output_port_net_x0,
      ce => ce_1_sg_x116,
      clk => clk_1_sg_x116,
      clr => '0',
      p => mult_p_net
    );

  mult1: entity work.mult_cfc8c45902
    port map (
      a => force_im_output_port_net_x1,
      b => force_re_output_port_net_x0,
      ce => ce_1_sg_x116,
      clk => clk_1_sg_x116,
      clr => '0',
      p => mult1_p_net
    );

  mult2: entity work.mult_cfc8c45902
    port map (
      a => force_im_output_port_net_x1,
      b => force_im_output_port_net_x0,
      ce => ce_1_sg_x116,
      clk => clk_1_sg_x116,
      clr => '0',
      p => mult2_p_net
    );

  mult3: entity work.mult_cfc8c45902
    port map (
      a => force_re_output_port_net_x1,
      b => force_im_output_port_net_x0,
      ce => ce_1_sg_x116,
      clk => clk_1_sg_x116,
      clr => '0',
      p => mult3_p_net
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/coarse/fft_wideband_real0/fft_biplex_real_4x0/biplex_core/fft_stage_3/butterfly_direct"

entity butterfly_direct_entity_5c830c1bfc is
  port (
    a: in std_logic_vector(35 downto 0); 
    b: in std_logic_vector(35 downto 0); 
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    shift: in std_logic; 
    sync: in std_logic; 
    a_bw: out std_logic_vector(35 downto 0); 
    a_bw_x0: out std_logic_vector(35 downto 0); 
    of_x0: out std_logic; 
    sync_out: out std_logic
  );
end butterfly_direct_entity_5c830c1bfc;

architecture structural of butterfly_direct_entity_5c830c1bfc is
  signal adder_s_net_x3: std_logic_vector(17 downto 0);
  signal adder_s_net_x4: std_logic_vector(17 downto 0);
  signal adder_s_net_x5: std_logic_vector(17 downto 0);
  signal adder_s_net_x6: std_logic_vector(17 downto 0);
  signal and_y_net_x0: std_logic;
  signal and_y_net_x1: std_logic;
  signal and_y_net_x2: std_logic;
  signal and_y_net_x3: std_logic;
  signal cast_c_im_dout_net_x0: std_logic_vector(22 downto 0);
  signal cast_c_im_dout_net_x1: std_logic_vector(22 downto 0);
  signal cast_c_re_dout_net_x0: std_logic_vector(22 downto 0);
  signal cast_c_re_dout_net_x1: std_logic_vector(22 downto 0);
  signal ce_1_sg_x117: std_logic;
  signal clk_1_sg_x117: std_logic;
  signal concat_y_net_x2: std_logic_vector(35 downto 0);
  signal concat_y_net_x3: std_logic_vector(35 downto 0);
  signal convert0_dout_net_x2: std_logic_vector(21 downto 0);
  signal convert1_dout_net_x2: std_logic_vector(21 downto 0);
  signal delay2_q_net_x0: std_logic;
  signal force_im_output_port_net_x3: std_logic_vector(17 downto 0);
  signal force_re_output_port_net_x3: std_logic_vector(17 downto 0);
  signal logical_y_net_x0: std_logic;
  signal mux0_y_net_x1: std_logic_vector(23 downto 0);
  signal mux1_y_net_x1: std_logic_vector(23 downto 0);
  signal mux2_y_net_x1: std_logic_vector(23 downto 0);
  signal mux3_y_net_x1: std_logic_vector(23 downto 0);
  signal mux_y_net_x3: std_logic_vector(35 downto 0);
  signal mux_y_net_x4: std_logic;
  signal scale0_op_net: std_logic_vector(22 downto 0);
  signal scale1_op_net: std_logic_vector(22 downto 0);
  signal scale2_op_net: std_logic_vector(22 downto 0);
  signal scale3_op_net: std_logic_vector(22 downto 0);
  signal shift_delay_q_net: std_logic;
  signal single_port_ram_data_out_net_x1: std_logic_vector(35 downto 0);
  signal slice_y_net_x0: std_logic;
  signal sync_delay_q_net_x0: std_logic;

begin
  single_port_ram_data_out_net_x1 <= a;
  mux_y_net_x3 <= b;
  ce_1_sg_x117 <= ce_1;
  clk_1_sg_x117 <= clk_1;
  slice_y_net_x0 <= shift;
  mux_y_net_x4 <= sync;
  a_bw <= concat_y_net_x2;
  a_bw_x0 <= concat_y_net_x3;
  of_x0 <= logical_y_net_x0;
  sync_out <= sync_delay_q_net_x0;

  cadd_bd220e7516: entity work.cadd_entity_bd220e7516
    port map (
      a_im => force_im_output_port_net_x3,
      a_re => force_re_output_port_net_x3,
      b_im => convert1_dout_net_x2,
      b_re => convert0_dout_net_x2,
      ce_1 => ce_1_sg_x117,
      clk_1 => clk_1_sg_x117,
      c_im => cast_c_im_dout_net_x0,
      c_re => cast_c_re_dout_net_x0
    );

  convert_of0_6501bdd0bd: entity work.convert_of0_entity_6501bdd0bd
    port map (
      ce_1 => ce_1_sg_x117,
      clk_1 => clk_1_sg_x117,
      din => mux0_y_net_x1,
      dout => adder_s_net_x3,
      of_x0 => and_y_net_x0
    );

  convert_of1_5245e20218: entity work.convert_of0_entity_6501bdd0bd
    port map (
      ce_1 => ce_1_sg_x117,
      clk_1 => clk_1_sg_x117,
      din => mux1_y_net_x1,
      dout => adder_s_net_x4,
      of_x0 => and_y_net_x1
    );

  convert_of2_f22dbdeeea: entity work.convert_of0_entity_6501bdd0bd
    port map (
      ce_1 => ce_1_sg_x117,
      clk_1 => clk_1_sg_x117,
      din => mux2_y_net_x1,
      dout => adder_s_net_x5,
      of_x0 => and_y_net_x2
    );

  convert_of3_6dbdc3a10e: entity work.convert_of0_entity_6501bdd0bd
    port map (
      ce_1 => ce_1_sg_x117,
      clk_1 => clk_1_sg_x117,
      din => mux3_y_net_x1,
      dout => adder_s_net_x6,
      of_x0 => and_y_net_x3
    );

  csub_394eae4754: entity work.csub_entity_394eae4754
    port map (
      a_im => force_im_output_port_net_x3,
      a_re => force_re_output_port_net_x3,
      b_im => convert1_dout_net_x2,
      b_re => convert0_dout_net_x2,
      ce_1 => ce_1_sg_x117,
      clk_1 => clk_1_sg_x117,
      c_im => cast_c_im_dout_net_x1,
      c_re => cast_c_re_dout_net_x1
    );

  logical: entity work.logical_a6d07705dd
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0(0) => and_y_net_x0,
      d1(0) => and_y_net_x1,
      d2(0) => and_y_net_x2,
      d3(0) => and_y_net_x3,
      y(0) => logical_y_net_x0
    );

  mux0: entity work.mux_f1f44b96f0
    port map (
      ce => ce_1_sg_x117,
      clk => clk_1_sg_x117,
      clr => '0',
      d0 => cast_c_re_dout_net_x0,
      d1 => scale0_op_net,
      sel(0) => shift_delay_q_net,
      y => mux0_y_net_x1
    );

  mux1: entity work.mux_f1f44b96f0
    port map (
      ce => ce_1_sg_x117,
      clk => clk_1_sg_x117,
      clr => '0',
      d0 => cast_c_im_dout_net_x0,
      d1 => scale1_op_net,
      sel(0) => shift_delay_q_net,
      y => mux1_y_net_x1
    );

  mux2: entity work.mux_f1f44b96f0
    port map (
      ce => ce_1_sg_x117,
      clk => clk_1_sg_x117,
      clr => '0',
      d0 => cast_c_re_dout_net_x1,
      d1 => scale2_op_net,
      sel(0) => shift_delay_q_net,
      y => mux2_y_net_x1
    );

  mux3: entity work.mux_f1f44b96f0
    port map (
      ce => ce_1_sg_x117,
      clk => clk_1_sg_x117,
      clr => '0',
      d0 => cast_c_im_dout_net_x1,
      d1 => scale3_op_net,
      sel(0) => shift_delay_q_net,
      y => mux3_y_net_x1
    );

  ri_to_c01_50f4b01b45: entity work.ri_to_c0_entity_724b130d6e
    port map (
      im => adder_s_net_x4,
      re => adder_s_net_x3,
      c => concat_y_net_x2
    );

  ri_to_c23_9ee35f7cee: entity work.ri_to_c0_entity_724b130d6e
    port map (
      im => adder_s_net_x6,
      re => adder_s_net_x5,
      c => concat_y_net_x3
    );

  scale0: entity work.scale_e5d0b4a1ec
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      ip => cast_c_re_dout_net_x0,
      op => scale0_op_net
    );

  scale1: entity work.scale_e5d0b4a1ec
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      ip => cast_c_im_dout_net_x0,
      op => scale1_op_net
    );

  scale2: entity work.scale_e5d0b4a1ec
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      ip => cast_c_re_dout_net_x1,
      op => scale2_op_net
    );

  scale3: entity work.scale_e5d0b4a1ec
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      ip => cast_c_im_dout_net_x1,
      op => scale3_op_net
    );

  shift_delay: entity work.xldelay
    generic map (
      latency => 2,
      reg_retiming => 0,
      reset => 0,
      width => 1
    )
    port map (
      ce => ce_1_sg_x117,
      clk => clk_1_sg_x117,
      d(0) => slice_y_net_x0,
      en => '1',
      rst => '1',
      q(0) => shift_delay_q_net
    );

  sync_delay: entity work.delay_aab7b18c27
    port map (
      ce => ce_1_sg_x117,
      clk => clk_1_sg_x117,
      clr => '0',
      d(0) => delay2_q_net_x0,
      q(0) => sync_delay_q_net_x0
    );

  twiddle_general_4mult_fb04e7b04a: entity work.twiddle_general_4mult_entity_fb04e7b04a
    port map (
      a => single_port_ram_data_out_net_x1,
      b => mux_y_net_x3,
      ce_1 => ce_1_sg_x117,
      clk_1 => clk_1_sg_x117,
      sync => mux_y_net_x4,
      a_im => force_im_output_port_net_x3,
      a_re => force_re_output_port_net_x3,
      bw_im => convert1_dout_net_x2,
      bw_re => convert0_dout_net_x2,
      sync_out => delay2_q_net_x0
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/coarse/fft_wideband_real0/fft_biplex_real_4x0/biplex_core/fft_stage_3/delay_b"

entity delay_b_entity_5b814e1315 is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    in1: in std_logic_vector(35 downto 0); 
    out1: out std_logic_vector(35 downto 0)
  );
end delay_b_entity_5b814e1315;

architecture structural of delay_b_entity_5b814e1315 is
  signal ce_1_sg_x118: std_logic;
  signal clk_1_sg_x118: std_logic;
  signal constant2_op_net: std_logic;
  signal counter_op_net: std_logic_vector(3 downto 0);
  signal mux1_y_net_x0: std_logic_vector(35 downto 0);
  signal single_port_ram_data_out_net_x2: std_logic_vector(35 downto 0);

begin
  ce_1_sg_x118 <= ce_1;
  clk_1_sg_x118 <= clk_1;
  mux1_y_net_x0 <= in1;
  out1 <= single_port_ram_data_out_net_x2;

  constant2: entity work.constant_6293007044
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op(0) => constant2_op_net
    );

  counter: entity work.xlcounter_limit_c09f12_01
    generic map (
      cnt_15_0 => 12,
      cnt_31_16 => 0,
      cnt_47_32 => 0,
      cnt_63_48 => 0,
      core_name0 => "cntr_11_0_77d9d8bb324abfb9",
      count_limited => 1,
      op_arith => xlUnsigned,
      op_width => 4
    )
    port map (
      ce => ce_1_sg_x118,
      clk => clk_1_sg_x118,
      clr => '0',
      en => "1",
      rst => "0",
      op => counter_op_net
    );

  single_port_ram: entity work.xlspram_c09f12_01
    generic map (
      c_address_width => 4,
      c_width => 36,
      core_name0 => "bmg_72_3de7891ec729adb4",
      latency => 2
    )
    port map (
      addr => counter_op_net,
      ce => ce_1_sg_x118,
      clk => clk_1_sg_x118,
      data_in => mux1_y_net_x0,
      en => "1",
      rst => "0",
      we(0) => constant2_op_net,
      data_out => single_port_ram_data_out_net_x2
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/coarse/fft_wideband_real0/fft_biplex_real_4x0/biplex_core/fft_stage_3/sync_delay"

entity sync_delay_entity_a196797bd2 is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    in_x0: in std_logic; 
    out_x0: out std_logic
  );
end sync_delay_entity_a196797bd2;

architecture structural of sync_delay_entity_a196797bd2 is
  signal ce_1_sg_x120: std_logic;
  signal clk_1_sg_x120: std_logic;
  signal constant1_op_net: std_logic_vector(4 downto 0);
  signal constant2_op_net: std_logic_vector(4 downto 0);
  signal constant3_op_net: std_logic;
  signal constant_op_net: std_logic_vector(4 downto 0);
  signal counter_op_net: std_logic_vector(4 downto 0);
  signal delay_q_net_x0: std_logic;
  signal logical_y_net: std_logic;
  signal mux_y_net_x5: std_logic;
  signal relational1_op_net: std_logic;
  signal relational_op_net: std_logic;

begin
  ce_1_sg_x120 <= ce_1;
  clk_1_sg_x120 <= clk_1;
  delay_q_net_x0 <= in_x0;
  out_x0 <= mux_y_net_x5;

  constant1: entity work.constant_fe72737ca0
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op => constant1_op_net
    );

  constant2: entity work.constant_ef0e2e5fc6
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op => constant2_op_net
    );

  constant3: entity work.constant_6293007044
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op(0) => constant3_op_net
    );

  constant_x0: entity work.constant_582a3706dd
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op => constant_op_net
    );

  counter: entity work.xlcounter_free_c09f12_01
    generic map (
      core_name0 => "cntr_11_0_10284ba20859264d",
      op_arith => xlUnsigned,
      op_width => 5
    )
    port map (
      ce => ce_1_sg_x120,
      clk => clk_1_sg_x120,
      clr => '0',
      din => constant2_op_net,
      en(0) => logical_y_net,
      load(0) => delay_q_net_x0,
      rst => "0",
      op => counter_op_net
    );

  logical: entity work.logical_aacf6e1b0e
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0(0) => delay_q_net_x0,
      d1(0) => relational1_op_net,
      y(0) => logical_y_net
    );

  mux: entity work.mux_1bef4ba0e4
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0(0) => delay_q_net_x0,
      d1(0) => relational_op_net,
      sel(0) => constant3_op_net,
      y(0) => mux_y_net_x5
    );

  relational: entity work.relational_9ece3c8c4e
    port map (
      a => constant_op_net,
      b => counter_op_net,
      ce => '0',
      clk => '0',
      clr => '0',
      op(0) => relational_op_net
    );

  relational1: entity work.relational_dc5bc996c9
    port map (
      a => counter_op_net,
      b => constant1_op_net,
      ce => '0',
      clk => '0',
      clr => '0',
      op(0) => relational1_op_net
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/coarse/fft_wideband_real0/fft_biplex_real_4x0/biplex_core/fft_stage_3"

entity fft_stage_3_entity_aa15e84fae is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    in1: in std_logic_vector(35 downto 0); 
    in2: in std_logic_vector(35 downto 0); 
    of_in: in std_logic; 
    shift: in std_logic_vector(9 downto 0); 
    sync: in std_logic; 
    of_x0: out std_logic; 
    out1: out std_logic_vector(35 downto 0); 
    out2: out std_logic_vector(35 downto 0); 
    sync_out: out std_logic
  );
end fft_stage_3_entity_aa15e84fae;

architecture structural of fft_stage_3_entity_aa15e84fae is
  signal ce_1_sg_x121: std_logic;
  signal clk_1_sg_x121: std_logic;
  signal concat_y_net_x11: std_logic_vector(35 downto 0);
  signal concat_y_net_x13: std_logic_vector(35 downto 0);
  signal concat_y_net_x14: std_logic_vector(35 downto 0);
  signal concat_y_net_x4: std_logic_vector(35 downto 0);
  signal counter_op_net: std_logic_vector(4 downto 0);
  signal delay_q_net_x0: std_logic;
  signal logical1_y_net_x0: std_logic;
  signal logical1_y_net_x3: std_logic;
  signal logical_y_net_x0: std_logic;
  signal mux1_y_net_x0: std_logic_vector(35 downto 0);
  signal mux_y_net_x3: std_logic_vector(35 downto 0);
  signal mux_y_net_x5: std_logic;
  signal single_port_ram_data_out_net_x0: std_logic_vector(35 downto 0);
  signal single_port_ram_data_out_net_x2: std_logic_vector(35 downto 0);
  signal slice1_y_net: std_logic;
  signal slice6_y_net_x2: std_logic_vector(9 downto 0);
  signal slice_y_net_x0: std_logic;
  signal sync_delay_q_net_x4: std_logic;
  signal sync_delay_q_net_x5: std_logic;

begin
  ce_1_sg_x121 <= ce_1;
  clk_1_sg_x121 <= clk_1;
  concat_y_net_x11 <= in1;
  concat_y_net_x13 <= in2;
  logical1_y_net_x3 <= of_in;
  slice6_y_net_x2 <= shift;
  sync_delay_q_net_x4 <= sync;
  of_x0 <= logical1_y_net_x0;
  out1 <= concat_y_net_x4;
  out2 <= concat_y_net_x14;
  sync_out <= sync_delay_q_net_x5;

  butterfly_direct_5c830c1bfc: entity work.butterfly_direct_entity_5c830c1bfc
    port map (
      a => single_port_ram_data_out_net_x2,
      b => mux_y_net_x3,
      ce_1 => ce_1_sg_x121,
      clk_1 => clk_1_sg_x121,
      shift => slice_y_net_x0,
      sync => mux_y_net_x5,
      a_bw => concat_y_net_x4,
      a_bw_x0 => concat_y_net_x14,
      of_x0 => logical_y_net_x0,
      sync_out => sync_delay_q_net_x5
    );

  counter: entity work.xlcounter_free_c09f12_01
    generic map (
      core_name0 => "cntr_11_0_f2301c6681846b15",
      op_arith => xlUnsigned,
      op_width => 5
    )
    port map (
      ce => ce_1_sg_x121,
      clk => clk_1_sg_x121,
      clr => '0',
      en => "1",
      rst(0) => sync_delay_q_net_x4,
      op => counter_op_net
    );

  delay: entity work.xldelay
    generic map (
      latency => 1,
      reg_retiming => 0,
      reset => 0,
      width => 1
    )
    port map (
      ce => ce_1_sg_x121,
      clk => clk_1_sg_x121,
      d(0) => sync_delay_q_net_x4,
      en => '1',
      rst => '1',
      q(0) => delay_q_net_x0
    );

  delay_b_5b814e1315: entity work.delay_b_entity_5b814e1315
    port map (
      ce_1 => ce_1_sg_x121,
      clk_1 => clk_1_sg_x121,
      in1 => mux1_y_net_x0,
      out1 => single_port_ram_data_out_net_x2
    );

  delay_f_3eb7dbc15e: entity work.delay_b_entity_5b814e1315
    port map (
      ce_1 => ce_1_sg_x121,
      clk_1 => clk_1_sg_x121,
      in1 => concat_y_net_x13,
      out1 => single_port_ram_data_out_net_x0
    );

  logical1: entity work.logical_444d3f5046
    port map (
      ce => ce_1_sg_x121,
      clk => clk_1_sg_x121,
      clr => '0',
      d0(0) => logical_y_net_x0,
      d1(0) => logical1_y_net_x3,
      y(0) => logical1_y_net_x0
    );

  mux: entity work.mux_4bb6f691f7
    port map (
      ce => ce_1_sg_x121,
      clk => clk_1_sg_x121,
      clr => '0',
      d0 => single_port_ram_data_out_net_x0,
      d1 => concat_y_net_x11,
      sel(0) => slice1_y_net,
      y => mux_y_net_x3
    );

  mux1: entity work.mux_4bb6f691f7
    port map (
      ce => ce_1_sg_x121,
      clk => clk_1_sg_x121,
      clr => '0',
      d0 => concat_y_net_x11,
      d1 => single_port_ram_data_out_net_x0,
      sel(0) => slice1_y_net,
      y => mux1_y_net_x0
    );

  slice: entity work.xlslice
    generic map (
      new_lsb => 2,
      new_msb => 2,
      x_width => 10,
      y_width => 1
    )
    port map (
      x => slice6_y_net_x2,
      y(0) => slice_y_net_x0
    );

  slice1: entity work.xlslice
    generic map (
      new_lsb => 4,
      new_msb => 4,
      x_width => 5,
      y_width => 1
    )
    port map (
      x => counter_op_net,
      y(0) => slice1_y_net
    );

  sync_delay_a196797bd2: entity work.sync_delay_entity_a196797bd2
    port map (
      ce_1 => ce_1_sg_x121,
      clk_1 => clk_1_sg_x121,
      in_x0 => delay_q_net_x0,
      out_x0 => mux_y_net_x5
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/coarse/fft_wideband_real0/fft_biplex_real_4x0/biplex_core/fft_stage_4/butterfly_direct/twiddle_general_4mult/coeff_gen"

entity coeff_gen_entity_6adac1066c is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    rst: in std_logic; 
    w: out std_logic_vector(35 downto 0)
  );
end coeff_gen_entity_6adac1066c;

architecture structural of coeff_gen_entity_6adac1066c is
  signal ce_1_sg_x132: std_logic;
  signal clk_1_sg_x132: std_logic;
  signal concat_y_net_x2: std_logic_vector(35 downto 0);
  signal counter_op_net: std_logic_vector(5 downto 0);
  signal mux_y_net_x0: std_logic;
  signal rom1_data_net_x0: std_logic_vector(17 downto 0);
  signal rom_data_net_x0: std_logic_vector(17 downto 0);
  signal slice_y_net: std_logic_vector(2 downto 0);

begin
  ce_1_sg_x132 <= ce_1;
  clk_1_sg_x132 <= clk_1;
  mux_y_net_x0 <= rst;
  w <= concat_y_net_x2;

  counter: entity work.xlcounter_free_c09f12_01
    generic map (
      core_name0 => "cntr_11_0_50ef766046ea9bf4",
      op_arith => xlUnsigned,
      op_width => 6
    )
    port map (
      ce => ce_1_sg_x132,
      clk => clk_1_sg_x132,
      clr => '0',
      en => "1",
      rst(0) => mux_y_net_x0,
      op => counter_op_net
    );

  ri_to_c_ebfb9d4d98: entity work.ri_to_c_entity_2abbfa7cd7
    port map (
      im => rom1_data_net_x0,
      re => rom_data_net_x0,
      c => concat_y_net_x2
    );

  rom: entity work.xlsprom_c09f12_01
    generic map (
      c_address_width => 3,
      c_width => 18,
      core_name0 => "bmg_72_031b3366e458494d",
      latency => 2
    )
    port map (
      addr => slice_y_net,
      ce => ce_1_sg_x132,
      clk => clk_1_sg_x132,
      en => "1",
      rst => "0",
      data => rom_data_net_x0
    );

  rom1: entity work.xlsprom_c09f12_01
    generic map (
      c_address_width => 3,
      c_width => 18,
      core_name0 => "bmg_72_5eb14d6795836fe0",
      latency => 2
    )
    port map (
      addr => slice_y_net,
      ce => ce_1_sg_x132,
      clk => clk_1_sg_x132,
      en => "1",
      rst => "0",
      data => rom1_data_net_x0
    );

  slice: entity work.xlslice
    generic map (
      new_lsb => 3,
      new_msb => 5,
      x_width => 6,
      y_width => 3
    )
    port map (
      x => counter_op_net,
      y => slice_y_net
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/coarse/fft_wideband_real0/fft_biplex_real_4x0/biplex_core/fft_stage_4/butterfly_direct/twiddle_general_4mult"

entity twiddle_general_4mult_entity_6d46e04e47 is
  port (
    a: in std_logic_vector(35 downto 0); 
    b: in std_logic_vector(35 downto 0); 
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    sync: in std_logic; 
    a_im: out std_logic_vector(17 downto 0); 
    a_re: out std_logic_vector(17 downto 0); 
    bw_im: out std_logic_vector(21 downto 0); 
    bw_re: out std_logic_vector(21 downto 0); 
    sync_out: out std_logic
  );
end twiddle_general_4mult_entity_6d46e04e47;

architecture structural of twiddle_general_4mult_entity_6d46e04e47 is
  signal addsub1_s_net: std_logic_vector(36 downto 0);
  signal addsub_s_net: std_logic_vector(36 downto 0);
  signal ce_1_sg_x133: std_logic;
  signal clk_1_sg_x133: std_logic;
  signal concat_y_net_x2: std_logic_vector(35 downto 0);
  signal convert0_dout_net_x2: std_logic_vector(21 downto 0);
  signal convert1_dout_net_x2: std_logic_vector(21 downto 0);
  signal delay0_q_net_x0: std_logic_vector(35 downto 0);
  signal delay1_q_net_x0: std_logic_vector(35 downto 0);
  signal delay2_q_net_x0: std_logic;
  signal force_im_output_port_net_x0: std_logic_vector(17 downto 0);
  signal force_im_output_port_net_x1: std_logic_vector(17 downto 0);
  signal force_im_output_port_net_x3: std_logic_vector(17 downto 0);
  signal force_re_output_port_net_x0: std_logic_vector(17 downto 0);
  signal force_re_output_port_net_x1: std_logic_vector(17 downto 0);
  signal force_re_output_port_net_x3: std_logic_vector(17 downto 0);
  signal mult1_p_net: std_logic_vector(35 downto 0);
  signal mult2_p_net: std_logic_vector(35 downto 0);
  signal mult3_p_net: std_logic_vector(35 downto 0);
  signal mult_p_net: std_logic_vector(35 downto 0);
  signal mux_y_net_x1: std_logic_vector(35 downto 0);
  signal mux_y_net_x2: std_logic;
  signal single_port_ram_data_out_net_x0: std_logic_vector(35 downto 0);

begin
  single_port_ram_data_out_net_x0 <= a;
  mux_y_net_x1 <= b;
  ce_1_sg_x133 <= ce_1;
  clk_1_sg_x133 <= clk_1;
  mux_y_net_x2 <= sync;
  a_im <= force_im_output_port_net_x3;
  a_re <= force_re_output_port_net_x3;
  bw_im <= convert1_dout_net_x2;
  bw_re <= convert0_dout_net_x2;
  sync_out <= delay2_q_net_x0;

  addsub: entity work.addsub_be8c56327e
    port map (
      a => mult_p_net,
      b => mult2_p_net,
      ce => ce_1_sg_x133,
      clk => clk_1_sg_x133,
      clr => '0',
      s => addsub_s_net
    );

  addsub1: entity work.addsub_eb2273ac28
    port map (
      a => mult1_p_net,
      b => mult3_p_net,
      ce => ce_1_sg_x133,
      clk => clk_1_sg_x133,
      clr => '0',
      s => addsub1_s_net
    );

  c_to_ri1_4819b1ebef: entity work.c_to_ri0_entity_ac3e6eb705
    port map (
      c => delay0_q_net_x0,
      im => force_im_output_port_net_x3,
      re => force_re_output_port_net_x3
    );

  c_to_ri2_85317e4a84: entity work.c_to_ri2_entity_e1b86f6b2f
    port map (
      c => concat_y_net_x2,
      im => force_im_output_port_net_x0,
      re => force_re_output_port_net_x0
    );

  c_to_ri3_8c42c8f2e0: entity work.c_to_ri0_entity_ac3e6eb705
    port map (
      c => delay1_q_net_x0,
      im => force_im_output_port_net_x1,
      re => force_re_output_port_net_x1
    );

  coeff_gen_6adac1066c: entity work.coeff_gen_entity_6adac1066c
    port map (
      ce_1 => ce_1_sg_x133,
      clk_1 => clk_1_sg_x133,
      rst => mux_y_net_x2,
      w => concat_y_net_x2
    );

  convert0: entity work.xlconvert_pipeline
    generic map (
      bool_conversion => 0,
      din_arith => 2,
      din_bin_pt => 33,
      din_width => 37,
      dout_arith => 2,
      dout_bin_pt => 19,
      dout_width => 22,
      latency => 2,
      overflow => xlWrap,
      quantization => xlRoundBanker
    )
    port map (
      ce => ce_1_sg_x133,
      clk => clk_1_sg_x133,
      clr => '0',
      din => addsub_s_net,
      en => "1",
      dout => convert0_dout_net_x2
    );

  convert1: entity work.xlconvert_pipeline
    generic map (
      bool_conversion => 0,
      din_arith => 2,
      din_bin_pt => 33,
      din_width => 37,
      dout_arith => 2,
      dout_bin_pt => 19,
      dout_width => 22,
      latency => 2,
      overflow => xlWrap,
      quantization => xlRoundBanker
    )
    port map (
      ce => ce_1_sg_x133,
      clk => clk_1_sg_x133,
      clr => '0',
      din => addsub1_s_net,
      en => "1",
      dout => convert1_dout_net_x2
    );

  delay0: entity work.xldelay
    generic map (
      latency => 10,
      reg_retiming => 0,
      reset => 0,
      width => 36
    )
    port map (
      ce => ce_1_sg_x133,
      clk => clk_1_sg_x133,
      d => single_port_ram_data_out_net_x0,
      en => '1',
      rst => '1',
      q => delay0_q_net_x0
    );

  delay1: entity work.delay_4b00a70dea
    port map (
      ce => ce_1_sg_x133,
      clk => clk_1_sg_x133,
      clr => '0',
      d => mux_y_net_x1,
      q => delay1_q_net_x0
    );

  delay2: entity work.xldelay
    generic map (
      latency => 10,
      reg_retiming => 0,
      reset => 0,
      width => 1
    )
    port map (
      ce => ce_1_sg_x133,
      clk => clk_1_sg_x133,
      d(0) => mux_y_net_x2,
      en => '1',
      rst => '1',
      q(0) => delay2_q_net_x0
    );

  mult: entity work.mult_cfc8c45902
    port map (
      a => force_re_output_port_net_x1,
      b => force_re_output_port_net_x0,
      ce => ce_1_sg_x133,
      clk => clk_1_sg_x133,
      clr => '0',
      p => mult_p_net
    );

  mult1: entity work.mult_cfc8c45902
    port map (
      a => force_im_output_port_net_x1,
      b => force_re_output_port_net_x0,
      ce => ce_1_sg_x133,
      clk => clk_1_sg_x133,
      clr => '0',
      p => mult1_p_net
    );

  mult2: entity work.mult_cfc8c45902
    port map (
      a => force_im_output_port_net_x1,
      b => force_im_output_port_net_x0,
      ce => ce_1_sg_x133,
      clk => clk_1_sg_x133,
      clr => '0',
      p => mult2_p_net
    );

  mult3: entity work.mult_cfc8c45902
    port map (
      a => force_re_output_port_net_x1,
      b => force_im_output_port_net_x0,
      ce => ce_1_sg_x133,
      clk => clk_1_sg_x133,
      clr => '0',
      p => mult3_p_net
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/coarse/fft_wideband_real0/fft_biplex_real_4x0/biplex_core/fft_stage_4/butterfly_direct"

entity butterfly_direct_entity_89ddf7e694 is
  port (
    a: in std_logic_vector(35 downto 0); 
    b: in std_logic_vector(35 downto 0); 
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    shift: in std_logic; 
    sync: in std_logic; 
    a_bw: out std_logic_vector(35 downto 0); 
    a_bw_x0: out std_logic_vector(35 downto 0); 
    of_x0: out std_logic; 
    sync_out: out std_logic
  );
end butterfly_direct_entity_89ddf7e694;

architecture structural of butterfly_direct_entity_89ddf7e694 is
  signal adder_s_net_x3: std_logic_vector(17 downto 0);
  signal adder_s_net_x4: std_logic_vector(17 downto 0);
  signal adder_s_net_x5: std_logic_vector(17 downto 0);
  signal adder_s_net_x6: std_logic_vector(17 downto 0);
  signal and_y_net_x0: std_logic;
  signal and_y_net_x1: std_logic;
  signal and_y_net_x2: std_logic;
  signal and_y_net_x3: std_logic;
  signal cast_c_im_dout_net_x0: std_logic_vector(22 downto 0);
  signal cast_c_im_dout_net_x1: std_logic_vector(22 downto 0);
  signal cast_c_re_dout_net_x0: std_logic_vector(22 downto 0);
  signal cast_c_re_dout_net_x1: std_logic_vector(22 downto 0);
  signal ce_1_sg_x134: std_logic;
  signal clk_1_sg_x134: std_logic;
  signal concat_y_net_x2: std_logic_vector(35 downto 0);
  signal concat_y_net_x3: std_logic_vector(35 downto 0);
  signal convert0_dout_net_x2: std_logic_vector(21 downto 0);
  signal convert1_dout_net_x2: std_logic_vector(21 downto 0);
  signal delay2_q_net_x0: std_logic;
  signal force_im_output_port_net_x3: std_logic_vector(17 downto 0);
  signal force_re_output_port_net_x3: std_logic_vector(17 downto 0);
  signal logical_y_net_x0: std_logic;
  signal mux0_y_net_x1: std_logic_vector(23 downto 0);
  signal mux1_y_net_x1: std_logic_vector(23 downto 0);
  signal mux2_y_net_x1: std_logic_vector(23 downto 0);
  signal mux3_y_net_x1: std_logic_vector(23 downto 0);
  signal mux_y_net_x3: std_logic_vector(35 downto 0);
  signal mux_y_net_x4: std_logic;
  signal scale0_op_net: std_logic_vector(22 downto 0);
  signal scale1_op_net: std_logic_vector(22 downto 0);
  signal scale2_op_net: std_logic_vector(22 downto 0);
  signal scale3_op_net: std_logic_vector(22 downto 0);
  signal shift_delay_q_net: std_logic;
  signal single_port_ram_data_out_net_x1: std_logic_vector(35 downto 0);
  signal slice_y_net_x0: std_logic;
  signal sync_delay_q_net_x0: std_logic;

begin
  single_port_ram_data_out_net_x1 <= a;
  mux_y_net_x3 <= b;
  ce_1_sg_x134 <= ce_1;
  clk_1_sg_x134 <= clk_1;
  slice_y_net_x0 <= shift;
  mux_y_net_x4 <= sync;
  a_bw <= concat_y_net_x2;
  a_bw_x0 <= concat_y_net_x3;
  of_x0 <= logical_y_net_x0;
  sync_out <= sync_delay_q_net_x0;

  cadd_7759bd259b: entity work.cadd_entity_bd220e7516
    port map (
      a_im => force_im_output_port_net_x3,
      a_re => force_re_output_port_net_x3,
      b_im => convert1_dout_net_x2,
      b_re => convert0_dout_net_x2,
      ce_1 => ce_1_sg_x134,
      clk_1 => clk_1_sg_x134,
      c_im => cast_c_im_dout_net_x0,
      c_re => cast_c_re_dout_net_x0
    );

  convert_of0_dd85caa3b5: entity work.convert_of0_entity_6501bdd0bd
    port map (
      ce_1 => ce_1_sg_x134,
      clk_1 => clk_1_sg_x134,
      din => mux0_y_net_x1,
      dout => adder_s_net_x3,
      of_x0 => and_y_net_x0
    );

  convert_of1_bb17bcd31f: entity work.convert_of0_entity_6501bdd0bd
    port map (
      ce_1 => ce_1_sg_x134,
      clk_1 => clk_1_sg_x134,
      din => mux1_y_net_x1,
      dout => adder_s_net_x4,
      of_x0 => and_y_net_x1
    );

  convert_of2_47293d4647: entity work.convert_of0_entity_6501bdd0bd
    port map (
      ce_1 => ce_1_sg_x134,
      clk_1 => clk_1_sg_x134,
      din => mux2_y_net_x1,
      dout => adder_s_net_x5,
      of_x0 => and_y_net_x2
    );

  convert_of3_57aa62d09e: entity work.convert_of0_entity_6501bdd0bd
    port map (
      ce_1 => ce_1_sg_x134,
      clk_1 => clk_1_sg_x134,
      din => mux3_y_net_x1,
      dout => adder_s_net_x6,
      of_x0 => and_y_net_x3
    );

  csub_039871f7ea: entity work.csub_entity_394eae4754
    port map (
      a_im => force_im_output_port_net_x3,
      a_re => force_re_output_port_net_x3,
      b_im => convert1_dout_net_x2,
      b_re => convert0_dout_net_x2,
      ce_1 => ce_1_sg_x134,
      clk_1 => clk_1_sg_x134,
      c_im => cast_c_im_dout_net_x1,
      c_re => cast_c_re_dout_net_x1
    );

  logical: entity work.logical_a6d07705dd
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0(0) => and_y_net_x0,
      d1(0) => and_y_net_x1,
      d2(0) => and_y_net_x2,
      d3(0) => and_y_net_x3,
      y(0) => logical_y_net_x0
    );

  mux0: entity work.mux_f1f44b96f0
    port map (
      ce => ce_1_sg_x134,
      clk => clk_1_sg_x134,
      clr => '0',
      d0 => cast_c_re_dout_net_x0,
      d1 => scale0_op_net,
      sel(0) => shift_delay_q_net,
      y => mux0_y_net_x1
    );

  mux1: entity work.mux_f1f44b96f0
    port map (
      ce => ce_1_sg_x134,
      clk => clk_1_sg_x134,
      clr => '0',
      d0 => cast_c_im_dout_net_x0,
      d1 => scale1_op_net,
      sel(0) => shift_delay_q_net,
      y => mux1_y_net_x1
    );

  mux2: entity work.mux_f1f44b96f0
    port map (
      ce => ce_1_sg_x134,
      clk => clk_1_sg_x134,
      clr => '0',
      d0 => cast_c_re_dout_net_x1,
      d1 => scale2_op_net,
      sel(0) => shift_delay_q_net,
      y => mux2_y_net_x1
    );

  mux3: entity work.mux_f1f44b96f0
    port map (
      ce => ce_1_sg_x134,
      clk => clk_1_sg_x134,
      clr => '0',
      d0 => cast_c_im_dout_net_x1,
      d1 => scale3_op_net,
      sel(0) => shift_delay_q_net,
      y => mux3_y_net_x1
    );

  ri_to_c01_4942ae9381: entity work.ri_to_c0_entity_724b130d6e
    port map (
      im => adder_s_net_x4,
      re => adder_s_net_x3,
      c => concat_y_net_x2
    );

  ri_to_c23_453b1fef61: entity work.ri_to_c0_entity_724b130d6e
    port map (
      im => adder_s_net_x6,
      re => adder_s_net_x5,
      c => concat_y_net_x3
    );

  scale0: entity work.scale_e5d0b4a1ec
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      ip => cast_c_re_dout_net_x0,
      op => scale0_op_net
    );

  scale1: entity work.scale_e5d0b4a1ec
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      ip => cast_c_im_dout_net_x0,
      op => scale1_op_net
    );

  scale2: entity work.scale_e5d0b4a1ec
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      ip => cast_c_re_dout_net_x1,
      op => scale2_op_net
    );

  scale3: entity work.scale_e5d0b4a1ec
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      ip => cast_c_im_dout_net_x1,
      op => scale3_op_net
    );

  shift_delay: entity work.xldelay
    generic map (
      latency => 2,
      reg_retiming => 0,
      reset => 0,
      width => 1
    )
    port map (
      ce => ce_1_sg_x134,
      clk => clk_1_sg_x134,
      d(0) => slice_y_net_x0,
      en => '1',
      rst => '1',
      q(0) => shift_delay_q_net
    );

  sync_delay: entity work.delay_aab7b18c27
    port map (
      ce => ce_1_sg_x134,
      clk => clk_1_sg_x134,
      clr => '0',
      d(0) => delay2_q_net_x0,
      q(0) => sync_delay_q_net_x0
    );

  twiddle_general_4mult_6d46e04e47: entity work.twiddle_general_4mult_entity_6d46e04e47
    port map (
      a => single_port_ram_data_out_net_x1,
      b => mux_y_net_x3,
      ce_1 => ce_1_sg_x134,
      clk_1 => clk_1_sg_x134,
      sync => mux_y_net_x4,
      a_im => force_im_output_port_net_x3,
      a_re => force_re_output_port_net_x3,
      bw_im => convert1_dout_net_x2,
      bw_re => convert0_dout_net_x2,
      sync_out => delay2_q_net_x0
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/coarse/fft_wideband_real0/fft_biplex_real_4x0/biplex_core/fft_stage_4/delay_b"

entity delay_b_entity_8f5fb2d2a5 is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    in1: in std_logic_vector(35 downto 0); 
    out1: out std_logic_vector(35 downto 0)
  );
end delay_b_entity_8f5fb2d2a5;

architecture structural of delay_b_entity_8f5fb2d2a5 is
  signal ce_1_sg_x135: std_logic;
  signal clk_1_sg_x135: std_logic;
  signal constant2_op_net: std_logic;
  signal counter_op_net: std_logic_vector(2 downto 0);
  signal mux1_y_net_x0: std_logic_vector(35 downto 0);
  signal single_port_ram_data_out_net_x2: std_logic_vector(35 downto 0);

begin
  ce_1_sg_x135 <= ce_1;
  clk_1_sg_x135 <= clk_1;
  mux1_y_net_x0 <= in1;
  out1 <= single_port_ram_data_out_net_x2;

  constant2: entity work.constant_6293007044
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op(0) => constant2_op_net
    );

  counter: entity work.xlcounter_limit_c09f12_01
    generic map (
      cnt_15_0 => 4,
      cnt_31_16 => 0,
      cnt_47_32 => 0,
      cnt_63_48 => 0,
      core_name0 => "cntr_11_0_514048f9c72a30b1",
      count_limited => 1,
      op_arith => xlUnsigned,
      op_width => 3
    )
    port map (
      ce => ce_1_sg_x135,
      clk => clk_1_sg_x135,
      clr => '0',
      en => "1",
      rst => "0",
      op => counter_op_net
    );

  single_port_ram: entity work.xlspram_c09f12_01
    generic map (
      c_address_width => 3,
      c_width => 36,
      core_name0 => "bmg_72_37c9a3ecdc0c1393",
      latency => 2
    )
    port map (
      addr => counter_op_net,
      ce => ce_1_sg_x135,
      clk => clk_1_sg_x135,
      data_in => mux1_y_net_x0,
      en => "1",
      rst => "0",
      we(0) => constant2_op_net,
      data_out => single_port_ram_data_out_net_x2
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/coarse/fft_wideband_real0/fft_biplex_real_4x0/biplex_core/fft_stage_4/sync_delay"

entity sync_delay_entity_053eb37e18 is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    in_x0: in std_logic; 
    out_x0: out std_logic
  );
end sync_delay_entity_053eb37e18;

architecture structural of sync_delay_entity_053eb37e18 is
  signal ce_1_sg_x137: std_logic;
  signal clk_1_sg_x137: std_logic;
  signal constant1_op_net: std_logic_vector(3 downto 0);
  signal constant2_op_net: std_logic_vector(3 downto 0);
  signal constant3_op_net: std_logic;
  signal constant_op_net: std_logic_vector(3 downto 0);
  signal counter_op_net: std_logic_vector(3 downto 0);
  signal delay_q_net_x0: std_logic;
  signal logical_y_net: std_logic;
  signal mux_y_net_x5: std_logic;
  signal relational1_op_net: std_logic;
  signal relational_op_net: std_logic;

begin
  ce_1_sg_x137 <= ce_1;
  clk_1_sg_x137 <= clk_1;
  delay_q_net_x0 <= in_x0;
  out_x0 <= mux_y_net_x5;

  constant1: entity work.constant_4c449dd556
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op => constant1_op_net
    );

  constant2: entity work.constant_145086465d
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op => constant2_op_net
    );

  constant3: entity work.constant_6293007044
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op(0) => constant3_op_net
    );

  constant_x0: entity work.constant_67ad97ca70
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op => constant_op_net
    );

  counter: entity work.xlcounter_free_c09f12_01
    generic map (
      core_name0 => "cntr_11_0_81c610783c35b073",
      op_arith => xlUnsigned,
      op_width => 4
    )
    port map (
      ce => ce_1_sg_x137,
      clk => clk_1_sg_x137,
      clr => '0',
      din => constant2_op_net,
      en(0) => logical_y_net,
      load(0) => delay_q_net_x0,
      rst => "0",
      op => counter_op_net
    );

  logical: entity work.logical_aacf6e1b0e
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0(0) => delay_q_net_x0,
      d1(0) => relational1_op_net,
      y(0) => logical_y_net
    );

  mux: entity work.mux_1bef4ba0e4
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0(0) => delay_q_net_x0,
      d1(0) => relational_op_net,
      sel(0) => constant3_op_net,
      y(0) => mux_y_net_x5
    );

  relational: entity work.relational_4d3cfceaf4
    port map (
      a => constant_op_net,
      b => counter_op_net,
      ce => '0',
      clk => '0',
      clr => '0',
      op(0) => relational_op_net
    );

  relational1: entity work.relational_d930162434
    port map (
      a => counter_op_net,
      b => constant1_op_net,
      ce => '0',
      clk => '0',
      clr => '0',
      op(0) => relational1_op_net
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/coarse/fft_wideband_real0/fft_biplex_real_4x0/biplex_core/fft_stage_4"

entity fft_stage_4_entity_f91b655483 is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    in1: in std_logic_vector(35 downto 0); 
    in2: in std_logic_vector(35 downto 0); 
    of_in: in std_logic; 
    shift: in std_logic_vector(9 downto 0); 
    sync: in std_logic; 
    of_x0: out std_logic; 
    out1: out std_logic_vector(35 downto 0); 
    out2: out std_logic_vector(35 downto 0); 
    sync_out: out std_logic
  );
end fft_stage_4_entity_f91b655483;

architecture structural of fft_stage_4_entity_f91b655483 is
  signal ce_1_sg_x138: std_logic;
  signal clk_1_sg_x138: std_logic;
  signal concat_y_net_x16: std_logic_vector(35 downto 0);
  signal concat_y_net_x5: std_logic_vector(35 downto 0);
  signal concat_y_net_x6: std_logic_vector(35 downto 0);
  signal concat_y_net_x7: std_logic_vector(35 downto 0);
  signal counter_op_net: std_logic_vector(3 downto 0);
  signal delay_q_net_x0: std_logic;
  signal logical1_y_net_x1: std_logic;
  signal logical1_y_net_x2: std_logic;
  signal logical_y_net_x0: std_logic;
  signal mux1_y_net_x0: std_logic_vector(35 downto 0);
  signal mux_y_net_x3: std_logic_vector(35 downto 0);
  signal mux_y_net_x5: std_logic;
  signal single_port_ram_data_out_net_x0: std_logic_vector(35 downto 0);
  signal single_port_ram_data_out_net_x2: std_logic_vector(35 downto 0);
  signal slice1_y_net: std_logic;
  signal slice6_y_net_x3: std_logic_vector(9 downto 0);
  signal slice_y_net_x0: std_logic;
  signal sync_delay_q_net_x1: std_logic;
  signal sync_delay_q_net_x6: std_logic;

begin
  ce_1_sg_x138 <= ce_1;
  clk_1_sg_x138 <= clk_1;
  concat_y_net_x5 <= in1;
  concat_y_net_x16 <= in2;
  logical1_y_net_x1 <= of_in;
  slice6_y_net_x3 <= shift;
  sync_delay_q_net_x6 <= sync;
  of_x0 <= logical1_y_net_x2;
  out1 <= concat_y_net_x6;
  out2 <= concat_y_net_x7;
  sync_out <= sync_delay_q_net_x1;

  butterfly_direct_89ddf7e694: entity work.butterfly_direct_entity_89ddf7e694
    port map (
      a => single_port_ram_data_out_net_x2,
      b => mux_y_net_x3,
      ce_1 => ce_1_sg_x138,
      clk_1 => clk_1_sg_x138,
      shift => slice_y_net_x0,
      sync => mux_y_net_x5,
      a_bw => concat_y_net_x6,
      a_bw_x0 => concat_y_net_x7,
      of_x0 => logical_y_net_x0,
      sync_out => sync_delay_q_net_x1
    );

  counter: entity work.xlcounter_free_c09f12_01
    generic map (
      core_name0 => "cntr_11_0_77d9d8bb324abfb9",
      op_arith => xlUnsigned,
      op_width => 4
    )
    port map (
      ce => ce_1_sg_x138,
      clk => clk_1_sg_x138,
      clr => '0',
      en => "1",
      rst(0) => sync_delay_q_net_x6,
      op => counter_op_net
    );

  delay: entity work.xldelay
    generic map (
      latency => 1,
      reg_retiming => 0,
      reset => 0,
      width => 1
    )
    port map (
      ce => ce_1_sg_x138,
      clk => clk_1_sg_x138,
      d(0) => sync_delay_q_net_x6,
      en => '1',
      rst => '1',
      q(0) => delay_q_net_x0
    );

  delay_b_8f5fb2d2a5: entity work.delay_b_entity_8f5fb2d2a5
    port map (
      ce_1 => ce_1_sg_x138,
      clk_1 => clk_1_sg_x138,
      in1 => mux1_y_net_x0,
      out1 => single_port_ram_data_out_net_x2
    );

  delay_f_89daec93a6: entity work.delay_b_entity_8f5fb2d2a5
    port map (
      ce_1 => ce_1_sg_x138,
      clk_1 => clk_1_sg_x138,
      in1 => concat_y_net_x16,
      out1 => single_port_ram_data_out_net_x0
    );

  logical1: entity work.logical_444d3f5046
    port map (
      ce => ce_1_sg_x138,
      clk => clk_1_sg_x138,
      clr => '0',
      d0(0) => logical_y_net_x0,
      d1(0) => logical1_y_net_x1,
      y(0) => logical1_y_net_x2
    );

  mux: entity work.mux_4bb6f691f7
    port map (
      ce => ce_1_sg_x138,
      clk => clk_1_sg_x138,
      clr => '0',
      d0 => single_port_ram_data_out_net_x0,
      d1 => concat_y_net_x5,
      sel(0) => slice1_y_net,
      y => mux_y_net_x3
    );

  mux1: entity work.mux_4bb6f691f7
    port map (
      ce => ce_1_sg_x138,
      clk => clk_1_sg_x138,
      clr => '0',
      d0 => concat_y_net_x5,
      d1 => single_port_ram_data_out_net_x0,
      sel(0) => slice1_y_net,
      y => mux1_y_net_x0
    );

  slice: entity work.xlslice
    generic map (
      new_lsb => 3,
      new_msb => 3,
      x_width => 10,
      y_width => 1
    )
    port map (
      x => slice6_y_net_x3,
      y(0) => slice_y_net_x0
    );

  slice1: entity work.xlslice
    generic map (
      new_lsb => 3,
      new_msb => 3,
      x_width => 4,
      y_width => 1
    )
    port map (
      x => counter_op_net,
      y(0) => slice1_y_net
    );

  sync_delay_053eb37e18: entity work.sync_delay_entity_053eb37e18
    port map (
      ce_1 => ce_1_sg_x138,
      clk_1 => clk_1_sg_x138,
      in_x0 => delay_q_net_x0,
      out_x0 => mux_y_net_x5
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/coarse/fft_wideband_real0/fft_biplex_real_4x0/biplex_core/fft_stage_5/butterfly_direct/twiddle_general_4mult/coeff_gen"

entity coeff_gen_entity_9a31ca9433 is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    rst: in std_logic; 
    w: out std_logic_vector(35 downto 0)
  );
end coeff_gen_entity_9a31ca9433;

architecture structural of coeff_gen_entity_9a31ca9433 is
  signal ce_1_sg_x149: std_logic;
  signal clk_1_sg_x149: std_logic;
  signal concat_y_net_x2: std_logic_vector(35 downto 0);
  signal counter_op_net: std_logic_vector(5 downto 0);
  signal mux_y_net_x0: std_logic;
  signal rom1_data_net_x0: std_logic_vector(17 downto 0);
  signal rom_data_net_x0: std_logic_vector(17 downto 0);
  signal slice_y_net: std_logic_vector(3 downto 0);

begin
  ce_1_sg_x149 <= ce_1;
  clk_1_sg_x149 <= clk_1;
  mux_y_net_x0 <= rst;
  w <= concat_y_net_x2;

  counter: entity work.xlcounter_free_c09f12_01
    generic map (
      core_name0 => "cntr_11_0_50ef766046ea9bf4",
      op_arith => xlUnsigned,
      op_width => 6
    )
    port map (
      ce => ce_1_sg_x149,
      clk => clk_1_sg_x149,
      clr => '0',
      en => "1",
      rst(0) => mux_y_net_x0,
      op => counter_op_net
    );

  ri_to_c_2d7d87f6c0: entity work.ri_to_c_entity_2abbfa7cd7
    port map (
      im => rom1_data_net_x0,
      re => rom_data_net_x0,
      c => concat_y_net_x2
    );

  rom: entity work.xlsprom_c09f12_01
    generic map (
      c_address_width => 4,
      c_width => 18,
      core_name0 => "bmg_72_763f056d1756d515",
      latency => 2
    )
    port map (
      addr => slice_y_net,
      ce => ce_1_sg_x149,
      clk => clk_1_sg_x149,
      en => "1",
      rst => "0",
      data => rom_data_net_x0
    );

  rom1: entity work.xlsprom_c09f12_01
    generic map (
      c_address_width => 4,
      c_width => 18,
      core_name0 => "bmg_72_59f0d912b26aa159",
      latency => 2
    )
    port map (
      addr => slice_y_net,
      ce => ce_1_sg_x149,
      clk => clk_1_sg_x149,
      en => "1",
      rst => "0",
      data => rom1_data_net_x0
    );

  slice: entity work.xlslice
    generic map (
      new_lsb => 2,
      new_msb => 5,
      x_width => 6,
      y_width => 4
    )
    port map (
      x => counter_op_net,
      y => slice_y_net
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/coarse/fft_wideband_real0/fft_biplex_real_4x0/biplex_core/fft_stage_5/butterfly_direct/twiddle_general_4mult"

entity twiddle_general_4mult_entity_c1e8805b70 is
  port (
    a: in std_logic_vector(35 downto 0); 
    b: in std_logic_vector(35 downto 0); 
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    sync: in std_logic; 
    a_im: out std_logic_vector(17 downto 0); 
    a_re: out std_logic_vector(17 downto 0); 
    bw_im: out std_logic_vector(21 downto 0); 
    bw_re: out std_logic_vector(21 downto 0); 
    sync_out: out std_logic
  );
end twiddle_general_4mult_entity_c1e8805b70;

architecture structural of twiddle_general_4mult_entity_c1e8805b70 is
  signal addsub1_s_net: std_logic_vector(36 downto 0);
  signal addsub_s_net: std_logic_vector(36 downto 0);
  signal ce_1_sg_x150: std_logic;
  signal clk_1_sg_x150: std_logic;
  signal concat_y_net_x2: std_logic_vector(35 downto 0);
  signal convert0_dout_net_x2: std_logic_vector(21 downto 0);
  signal convert1_dout_net_x2: std_logic_vector(21 downto 0);
  signal delay0_q_net_x0: std_logic_vector(35 downto 0);
  signal delay1_q_net_x0: std_logic_vector(35 downto 0);
  signal delay2_q_net_x0: std_logic;
  signal delay_slr_q_net_x0: std_logic_vector(35 downto 0);
  signal force_im_output_port_net_x0: std_logic_vector(17 downto 0);
  signal force_im_output_port_net_x1: std_logic_vector(17 downto 0);
  signal force_im_output_port_net_x3: std_logic_vector(17 downto 0);
  signal force_re_output_port_net_x0: std_logic_vector(17 downto 0);
  signal force_re_output_port_net_x1: std_logic_vector(17 downto 0);
  signal force_re_output_port_net_x3: std_logic_vector(17 downto 0);
  signal mult1_p_net: std_logic_vector(35 downto 0);
  signal mult2_p_net: std_logic_vector(35 downto 0);
  signal mult3_p_net: std_logic_vector(35 downto 0);
  signal mult_p_net: std_logic_vector(35 downto 0);
  signal mux_y_net_x1: std_logic_vector(35 downto 0);
  signal mux_y_net_x2: std_logic;

begin
  delay_slr_q_net_x0 <= a;
  mux_y_net_x1 <= b;
  ce_1_sg_x150 <= ce_1;
  clk_1_sg_x150 <= clk_1;
  mux_y_net_x2 <= sync;
  a_im <= force_im_output_port_net_x3;
  a_re <= force_re_output_port_net_x3;
  bw_im <= convert1_dout_net_x2;
  bw_re <= convert0_dout_net_x2;
  sync_out <= delay2_q_net_x0;

  addsub: entity work.addsub_be8c56327e
    port map (
      a => mult_p_net,
      b => mult2_p_net,
      ce => ce_1_sg_x150,
      clk => clk_1_sg_x150,
      clr => '0',
      s => addsub_s_net
    );

  addsub1: entity work.addsub_eb2273ac28
    port map (
      a => mult1_p_net,
      b => mult3_p_net,
      ce => ce_1_sg_x150,
      clk => clk_1_sg_x150,
      clr => '0',
      s => addsub1_s_net
    );

  c_to_ri1_fe90477497: entity work.c_to_ri0_entity_ac3e6eb705
    port map (
      c => delay0_q_net_x0,
      im => force_im_output_port_net_x3,
      re => force_re_output_port_net_x3
    );

  c_to_ri2_28a6ca78e4: entity work.c_to_ri2_entity_e1b86f6b2f
    port map (
      c => concat_y_net_x2,
      im => force_im_output_port_net_x0,
      re => force_re_output_port_net_x0
    );

  c_to_ri3_9a0b184865: entity work.c_to_ri0_entity_ac3e6eb705
    port map (
      c => delay1_q_net_x0,
      im => force_im_output_port_net_x1,
      re => force_re_output_port_net_x1
    );

  coeff_gen_9a31ca9433: entity work.coeff_gen_entity_9a31ca9433
    port map (
      ce_1 => ce_1_sg_x150,
      clk_1 => clk_1_sg_x150,
      rst => mux_y_net_x2,
      w => concat_y_net_x2
    );

  convert0: entity work.xlconvert_pipeline
    generic map (
      bool_conversion => 0,
      din_arith => 2,
      din_bin_pt => 33,
      din_width => 37,
      dout_arith => 2,
      dout_bin_pt => 19,
      dout_width => 22,
      latency => 2,
      overflow => xlWrap,
      quantization => xlRoundBanker
    )
    port map (
      ce => ce_1_sg_x150,
      clk => clk_1_sg_x150,
      clr => '0',
      din => addsub_s_net,
      en => "1",
      dout => convert0_dout_net_x2
    );

  convert1: entity work.xlconvert_pipeline
    generic map (
      bool_conversion => 0,
      din_arith => 2,
      din_bin_pt => 33,
      din_width => 37,
      dout_arith => 2,
      dout_bin_pt => 19,
      dout_width => 22,
      latency => 2,
      overflow => xlWrap,
      quantization => xlRoundBanker
    )
    port map (
      ce => ce_1_sg_x150,
      clk => clk_1_sg_x150,
      clr => '0',
      din => addsub1_s_net,
      en => "1",
      dout => convert1_dout_net_x2
    );

  delay0: entity work.xldelay
    generic map (
      latency => 10,
      reg_retiming => 0,
      reset => 0,
      width => 36
    )
    port map (
      ce => ce_1_sg_x150,
      clk => clk_1_sg_x150,
      d => delay_slr_q_net_x0,
      en => '1',
      rst => '1',
      q => delay0_q_net_x0
    );

  delay1: entity work.delay_4b00a70dea
    port map (
      ce => ce_1_sg_x150,
      clk => clk_1_sg_x150,
      clr => '0',
      d => mux_y_net_x1,
      q => delay1_q_net_x0
    );

  delay2: entity work.xldelay
    generic map (
      latency => 10,
      reg_retiming => 0,
      reset => 0,
      width => 1
    )
    port map (
      ce => ce_1_sg_x150,
      clk => clk_1_sg_x150,
      d(0) => mux_y_net_x2,
      en => '1',
      rst => '1',
      q(0) => delay2_q_net_x0
    );

  mult: entity work.mult_cfc8c45902
    port map (
      a => force_re_output_port_net_x1,
      b => force_re_output_port_net_x0,
      ce => ce_1_sg_x150,
      clk => clk_1_sg_x150,
      clr => '0',
      p => mult_p_net
    );

  mult1: entity work.mult_cfc8c45902
    port map (
      a => force_im_output_port_net_x1,
      b => force_re_output_port_net_x0,
      ce => ce_1_sg_x150,
      clk => clk_1_sg_x150,
      clr => '0',
      p => mult1_p_net
    );

  mult2: entity work.mult_cfc8c45902
    port map (
      a => force_im_output_port_net_x1,
      b => force_im_output_port_net_x0,
      ce => ce_1_sg_x150,
      clk => clk_1_sg_x150,
      clr => '0',
      p => mult2_p_net
    );

  mult3: entity work.mult_cfc8c45902
    port map (
      a => force_re_output_port_net_x1,
      b => force_im_output_port_net_x0,
      ce => ce_1_sg_x150,
      clk => clk_1_sg_x150,
      clr => '0',
      p => mult3_p_net
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/coarse/fft_wideband_real0/fft_biplex_real_4x0/biplex_core/fft_stage_5/butterfly_direct"

entity butterfly_direct_entity_2f07c4f5b5 is
  port (
    a: in std_logic_vector(35 downto 0); 
    b: in std_logic_vector(35 downto 0); 
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    shift: in std_logic; 
    sync: in std_logic; 
    a_bw: out std_logic_vector(35 downto 0); 
    a_bw_x0: out std_logic_vector(35 downto 0); 
    of_x0: out std_logic; 
    sync_out: out std_logic
  );
end butterfly_direct_entity_2f07c4f5b5;

architecture structural of butterfly_direct_entity_2f07c4f5b5 is
  signal adder_s_net_x3: std_logic_vector(17 downto 0);
  signal adder_s_net_x4: std_logic_vector(17 downto 0);
  signal adder_s_net_x5: std_logic_vector(17 downto 0);
  signal adder_s_net_x6: std_logic_vector(17 downto 0);
  signal and_y_net_x0: std_logic;
  signal and_y_net_x1: std_logic;
  signal and_y_net_x2: std_logic;
  signal and_y_net_x3: std_logic;
  signal cast_c_im_dout_net_x0: std_logic_vector(22 downto 0);
  signal cast_c_im_dout_net_x1: std_logic_vector(22 downto 0);
  signal cast_c_re_dout_net_x0: std_logic_vector(22 downto 0);
  signal cast_c_re_dout_net_x1: std_logic_vector(22 downto 0);
  signal ce_1_sg_x151: std_logic;
  signal clk_1_sg_x151: std_logic;
  signal concat_y_net_x2: std_logic_vector(35 downto 0);
  signal concat_y_net_x3: std_logic_vector(35 downto 0);
  signal convert0_dout_net_x2: std_logic_vector(21 downto 0);
  signal convert1_dout_net_x2: std_logic_vector(21 downto 0);
  signal delay2_q_net_x0: std_logic;
  signal delay_slr_q_net_x1: std_logic_vector(35 downto 0);
  signal force_im_output_port_net_x3: std_logic_vector(17 downto 0);
  signal force_re_output_port_net_x3: std_logic_vector(17 downto 0);
  signal logical_y_net_x0: std_logic;
  signal mux0_y_net_x1: std_logic_vector(23 downto 0);
  signal mux1_y_net_x1: std_logic_vector(23 downto 0);
  signal mux2_y_net_x1: std_logic_vector(23 downto 0);
  signal mux3_y_net_x1: std_logic_vector(23 downto 0);
  signal mux_y_net_x3: std_logic_vector(35 downto 0);
  signal mux_y_net_x4: std_logic;
  signal scale0_op_net: std_logic_vector(22 downto 0);
  signal scale1_op_net: std_logic_vector(22 downto 0);
  signal scale2_op_net: std_logic_vector(22 downto 0);
  signal scale3_op_net: std_logic_vector(22 downto 0);
  signal shift_delay_q_net: std_logic;
  signal slice_y_net_x0: std_logic;
  signal sync_delay_q_net_x0: std_logic;

begin
  delay_slr_q_net_x1 <= a;
  mux_y_net_x3 <= b;
  ce_1_sg_x151 <= ce_1;
  clk_1_sg_x151 <= clk_1;
  slice_y_net_x0 <= shift;
  mux_y_net_x4 <= sync;
  a_bw <= concat_y_net_x2;
  a_bw_x0 <= concat_y_net_x3;
  of_x0 <= logical_y_net_x0;
  sync_out <= sync_delay_q_net_x0;

  cadd_3411eb0e93: entity work.cadd_entity_bd220e7516
    port map (
      a_im => force_im_output_port_net_x3,
      a_re => force_re_output_port_net_x3,
      b_im => convert1_dout_net_x2,
      b_re => convert0_dout_net_x2,
      ce_1 => ce_1_sg_x151,
      clk_1 => clk_1_sg_x151,
      c_im => cast_c_im_dout_net_x0,
      c_re => cast_c_re_dout_net_x0
    );

  convert_of0_bad1cc37b2: entity work.convert_of0_entity_6501bdd0bd
    port map (
      ce_1 => ce_1_sg_x151,
      clk_1 => clk_1_sg_x151,
      din => mux0_y_net_x1,
      dout => adder_s_net_x3,
      of_x0 => and_y_net_x0
    );

  convert_of1_8ce64af1d2: entity work.convert_of0_entity_6501bdd0bd
    port map (
      ce_1 => ce_1_sg_x151,
      clk_1 => clk_1_sg_x151,
      din => mux1_y_net_x1,
      dout => adder_s_net_x4,
      of_x0 => and_y_net_x1
    );

  convert_of2_92089e3b0e: entity work.convert_of0_entity_6501bdd0bd
    port map (
      ce_1 => ce_1_sg_x151,
      clk_1 => clk_1_sg_x151,
      din => mux2_y_net_x1,
      dout => adder_s_net_x5,
      of_x0 => and_y_net_x2
    );

  convert_of3_5b8494f95f: entity work.convert_of0_entity_6501bdd0bd
    port map (
      ce_1 => ce_1_sg_x151,
      clk_1 => clk_1_sg_x151,
      din => mux3_y_net_x1,
      dout => adder_s_net_x6,
      of_x0 => and_y_net_x3
    );

  csub_e0ab8779e9: entity work.csub_entity_394eae4754
    port map (
      a_im => force_im_output_port_net_x3,
      a_re => force_re_output_port_net_x3,
      b_im => convert1_dout_net_x2,
      b_re => convert0_dout_net_x2,
      ce_1 => ce_1_sg_x151,
      clk_1 => clk_1_sg_x151,
      c_im => cast_c_im_dout_net_x1,
      c_re => cast_c_re_dout_net_x1
    );

  logical: entity work.logical_a6d07705dd
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0(0) => and_y_net_x0,
      d1(0) => and_y_net_x1,
      d2(0) => and_y_net_x2,
      d3(0) => and_y_net_x3,
      y(0) => logical_y_net_x0
    );

  mux0: entity work.mux_f1f44b96f0
    port map (
      ce => ce_1_sg_x151,
      clk => clk_1_sg_x151,
      clr => '0',
      d0 => cast_c_re_dout_net_x0,
      d1 => scale0_op_net,
      sel(0) => shift_delay_q_net,
      y => mux0_y_net_x1
    );

  mux1: entity work.mux_f1f44b96f0
    port map (
      ce => ce_1_sg_x151,
      clk => clk_1_sg_x151,
      clr => '0',
      d0 => cast_c_im_dout_net_x0,
      d1 => scale1_op_net,
      sel(0) => shift_delay_q_net,
      y => mux1_y_net_x1
    );

  mux2: entity work.mux_f1f44b96f0
    port map (
      ce => ce_1_sg_x151,
      clk => clk_1_sg_x151,
      clr => '0',
      d0 => cast_c_re_dout_net_x1,
      d1 => scale2_op_net,
      sel(0) => shift_delay_q_net,
      y => mux2_y_net_x1
    );

  mux3: entity work.mux_f1f44b96f0
    port map (
      ce => ce_1_sg_x151,
      clk => clk_1_sg_x151,
      clr => '0',
      d0 => cast_c_im_dout_net_x1,
      d1 => scale3_op_net,
      sel(0) => shift_delay_q_net,
      y => mux3_y_net_x1
    );

  ri_to_c01_692d2cf4ee: entity work.ri_to_c0_entity_724b130d6e
    port map (
      im => adder_s_net_x4,
      re => adder_s_net_x3,
      c => concat_y_net_x2
    );

  ri_to_c23_cd7debe2e4: entity work.ri_to_c0_entity_724b130d6e
    port map (
      im => adder_s_net_x6,
      re => adder_s_net_x5,
      c => concat_y_net_x3
    );

  scale0: entity work.scale_e5d0b4a1ec
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      ip => cast_c_re_dout_net_x0,
      op => scale0_op_net
    );

  scale1: entity work.scale_e5d0b4a1ec
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      ip => cast_c_im_dout_net_x0,
      op => scale1_op_net
    );

  scale2: entity work.scale_e5d0b4a1ec
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      ip => cast_c_re_dout_net_x1,
      op => scale2_op_net
    );

  scale3: entity work.scale_e5d0b4a1ec
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      ip => cast_c_im_dout_net_x1,
      op => scale3_op_net
    );

  shift_delay: entity work.xldelay
    generic map (
      latency => 2,
      reg_retiming => 0,
      reset => 0,
      width => 1
    )
    port map (
      ce => ce_1_sg_x151,
      clk => clk_1_sg_x151,
      d(0) => slice_y_net_x0,
      en => '1',
      rst => '1',
      q(0) => shift_delay_q_net
    );

  sync_delay: entity work.delay_aab7b18c27
    port map (
      ce => ce_1_sg_x151,
      clk => clk_1_sg_x151,
      clr => '0',
      d(0) => delay2_q_net_x0,
      q(0) => sync_delay_q_net_x0
    );

  twiddle_general_4mult_c1e8805b70: entity work.twiddle_general_4mult_entity_c1e8805b70
    port map (
      a => delay_slr_q_net_x1,
      b => mux_y_net_x3,
      ce_1 => ce_1_sg_x151,
      clk_1 => clk_1_sg_x151,
      sync => mux_y_net_x4,
      a_im => force_im_output_port_net_x3,
      a_re => force_re_output_port_net_x3,
      bw_im => convert1_dout_net_x2,
      bw_re => convert0_dout_net_x2,
      sync_out => delay2_q_net_x0
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/coarse/fft_wideband_real0/fft_biplex_real_4x0/biplex_core/fft_stage_5/delay_b"

entity delay_b_entity_a07c0547cc is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    in1: in std_logic_vector(35 downto 0); 
    out1: out std_logic_vector(35 downto 0)
  );
end delay_b_entity_a07c0547cc;

architecture structural of delay_b_entity_a07c0547cc is
  signal ce_1_sg_x152: std_logic;
  signal clk_1_sg_x152: std_logic;
  signal delay_slr_q_net_x2: std_logic_vector(35 downto 0);
  signal mux1_y_net_x0: std_logic_vector(35 downto 0);

begin
  ce_1_sg_x152 <= ce_1;
  clk_1_sg_x152 <= clk_1;
  mux1_y_net_x0 <= in1;
  out1 <= delay_slr_q_net_x2;

  delay_slr: entity work.xldelay
    generic map (
      latency => 4,
      reg_retiming => 0,
      reset => 0,
      width => 36
    )
    port map (
      ce => ce_1_sg_x152,
      clk => clk_1_sg_x152,
      d => mux1_y_net_x0,
      en => '1',
      rst => '1',
      q => delay_slr_q_net_x2
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/coarse/fft_wideband_real0/fft_biplex_real_4x0/biplex_core/fft_stage_5/sync_delay"

entity sync_delay_entity_3371cbcaf5 is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    in_x0: in std_logic; 
    out_x0: out std_logic
  );
end sync_delay_entity_3371cbcaf5;

architecture structural of sync_delay_entity_3371cbcaf5 is
  signal ce_1_sg_x154: std_logic;
  signal clk_1_sg_x154: std_logic;
  signal constant1_op_net: std_logic_vector(2 downto 0);
  signal constant2_op_net: std_logic_vector(2 downto 0);
  signal constant3_op_net: std_logic;
  signal constant_op_net: std_logic_vector(2 downto 0);
  signal counter_op_net: std_logic_vector(2 downto 0);
  signal delay_q_net_x0: std_logic;
  signal logical_y_net: std_logic;
  signal mux_y_net_x5: std_logic;
  signal relational1_op_net: std_logic;
  signal relational_op_net: std_logic;

begin
  ce_1_sg_x154 <= ce_1;
  clk_1_sg_x154 <= clk_1;
  delay_q_net_x0 <= in_x0;
  out_x0 <= mux_y_net_x5;

  constant1: entity work.constant_822933f89b
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op => constant1_op_net
    );

  constant2: entity work.constant_469094441c
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op => constant2_op_net
    );

  constant3: entity work.constant_6293007044
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op(0) => constant3_op_net
    );

  constant_x0: entity work.constant_a1c496ea88
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op => constant_op_net
    );

  counter: entity work.xlcounter_free_c09f12_01
    generic map (
      core_name0 => "cntr_11_0_b502b5814ea90a92",
      op_arith => xlUnsigned,
      op_width => 3
    )
    port map (
      ce => ce_1_sg_x154,
      clk => clk_1_sg_x154,
      clr => '0',
      din => constant2_op_net,
      en(0) => logical_y_net,
      load(0) => delay_q_net_x0,
      rst => "0",
      op => counter_op_net
    );

  logical: entity work.logical_aacf6e1b0e
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0(0) => delay_q_net_x0,
      d1(0) => relational1_op_net,
      y(0) => logical_y_net
    );

  mux: entity work.mux_1bef4ba0e4
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0(0) => delay_q_net_x0,
      d1(0) => relational_op_net,
      sel(0) => constant3_op_net,
      y(0) => mux_y_net_x5
    );

  relational: entity work.relational_8fc7f5539b
    port map (
      a => constant_op_net,
      b => counter_op_net,
      ce => '0',
      clk => '0',
      clr => '0',
      op(0) => relational_op_net
    );

  relational1: entity work.relational_47b317dab6
    port map (
      a => counter_op_net,
      b => constant1_op_net,
      ce => '0',
      clk => '0',
      clr => '0',
      op(0) => relational1_op_net
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/coarse/fft_wideband_real0/fft_biplex_real_4x0/biplex_core/fft_stage_5"

entity fft_stage_5_entity_f0b8f37405 is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    in1: in std_logic_vector(35 downto 0); 
    in2: in std_logic_vector(35 downto 0); 
    of_in: in std_logic; 
    shift: in std_logic_vector(9 downto 0); 
    sync: in std_logic; 
    of_x0: out std_logic; 
    out1: out std_logic_vector(35 downto 0); 
    out2: out std_logic_vector(35 downto 0); 
    sync_out: out std_logic
  );
end fft_stage_5_entity_f0b8f37405;

architecture structural of fft_stage_5_entity_f0b8f37405 is
  signal ce_1_sg_x155: std_logic;
  signal clk_1_sg_x155: std_logic;
  signal concat_y_net_x10: std_logic_vector(35 downto 0);
  signal concat_y_net_x11: std_logic_vector(35 downto 0);
  signal concat_y_net_x7: std_logic_vector(35 downto 0);
  signal concat_y_net_x9: std_logic_vector(35 downto 0);
  signal counter_op_net: std_logic_vector(2 downto 0);
  signal delay_q_net_x0: std_logic;
  signal delay_slr_q_net_x0: std_logic_vector(35 downto 0);
  signal delay_slr_q_net_x2: std_logic_vector(35 downto 0);
  signal logical1_y_net_x0: std_logic;
  signal logical1_y_net_x3: std_logic;
  signal logical_y_net_x0: std_logic;
  signal mux1_y_net_x0: std_logic_vector(35 downto 0);
  signal mux_y_net_x3: std_logic_vector(35 downto 0);
  signal mux_y_net_x5: std_logic;
  signal slice1_y_net: std_logic;
  signal slice6_y_net_x4: std_logic_vector(9 downto 0);
  signal slice_y_net_x0: std_logic;
  signal sync_delay_q_net_x2: std_logic;
  signal sync_delay_q_net_x3: std_logic;

begin
  ce_1_sg_x155 <= ce_1;
  clk_1_sg_x155 <= clk_1;
  concat_y_net_x7 <= in1;
  concat_y_net_x9 <= in2;
  logical1_y_net_x3 <= of_in;
  slice6_y_net_x4 <= shift;
  sync_delay_q_net_x2 <= sync;
  of_x0 <= logical1_y_net_x0;
  out1 <= concat_y_net_x10;
  out2 <= concat_y_net_x11;
  sync_out <= sync_delay_q_net_x3;

  butterfly_direct_2f07c4f5b5: entity work.butterfly_direct_entity_2f07c4f5b5
    port map (
      a => delay_slr_q_net_x2,
      b => mux_y_net_x3,
      ce_1 => ce_1_sg_x155,
      clk_1 => clk_1_sg_x155,
      shift => slice_y_net_x0,
      sync => mux_y_net_x5,
      a_bw => concat_y_net_x10,
      a_bw_x0 => concat_y_net_x11,
      of_x0 => logical_y_net_x0,
      sync_out => sync_delay_q_net_x3
    );

  counter: entity work.xlcounter_free_c09f12_01
    generic map (
      core_name0 => "cntr_11_0_514048f9c72a30b1",
      op_arith => xlUnsigned,
      op_width => 3
    )
    port map (
      ce => ce_1_sg_x155,
      clk => clk_1_sg_x155,
      clr => '0',
      en => "1",
      rst(0) => sync_delay_q_net_x2,
      op => counter_op_net
    );

  delay: entity work.xldelay
    generic map (
      latency => 1,
      reg_retiming => 0,
      reset => 0,
      width => 1
    )
    port map (
      ce => ce_1_sg_x155,
      clk => clk_1_sg_x155,
      d(0) => sync_delay_q_net_x2,
      en => '1',
      rst => '1',
      q(0) => delay_q_net_x0
    );

  delay_b_a07c0547cc: entity work.delay_b_entity_a07c0547cc
    port map (
      ce_1 => ce_1_sg_x155,
      clk_1 => clk_1_sg_x155,
      in1 => mux1_y_net_x0,
      out1 => delay_slr_q_net_x2
    );

  delay_f_4669e0fa91: entity work.delay_b_entity_a07c0547cc
    port map (
      ce_1 => ce_1_sg_x155,
      clk_1 => clk_1_sg_x155,
      in1 => concat_y_net_x9,
      out1 => delay_slr_q_net_x0
    );

  logical1: entity work.logical_444d3f5046
    port map (
      ce => ce_1_sg_x155,
      clk => clk_1_sg_x155,
      clr => '0',
      d0(0) => logical_y_net_x0,
      d1(0) => logical1_y_net_x3,
      y(0) => logical1_y_net_x0
    );

  mux: entity work.mux_4bb6f691f7
    port map (
      ce => ce_1_sg_x155,
      clk => clk_1_sg_x155,
      clr => '0',
      d0 => delay_slr_q_net_x0,
      d1 => concat_y_net_x7,
      sel(0) => slice1_y_net,
      y => mux_y_net_x3
    );

  mux1: entity work.mux_4bb6f691f7
    port map (
      ce => ce_1_sg_x155,
      clk => clk_1_sg_x155,
      clr => '0',
      d0 => concat_y_net_x7,
      d1 => delay_slr_q_net_x0,
      sel(0) => slice1_y_net,
      y => mux1_y_net_x0
    );

  slice: entity work.xlslice
    generic map (
      new_lsb => 4,
      new_msb => 4,
      x_width => 10,
      y_width => 1
    )
    port map (
      x => slice6_y_net_x4,
      y(0) => slice_y_net_x0
    );

  slice1: entity work.xlslice
    generic map (
      new_lsb => 2,
      new_msb => 2,
      x_width => 3,
      y_width => 1
    )
    port map (
      x => counter_op_net,
      y(0) => slice1_y_net
    );

  sync_delay_3371cbcaf5: entity work.sync_delay_entity_3371cbcaf5
    port map (
      ce_1 => ce_1_sg_x155,
      clk_1 => clk_1_sg_x155,
      in_x0 => delay_q_net_x0,
      out_x0 => mux_y_net_x5
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/coarse/fft_wideband_real0/fft_biplex_real_4x0/biplex_core/fft_stage_6/butterfly_direct/twiddle_general_4mult/coeff_gen"

entity coeff_gen_entity_8e9682e162 is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    rst: in std_logic; 
    w: out std_logic_vector(35 downto 0)
  );
end coeff_gen_entity_8e9682e162;

architecture structural of coeff_gen_entity_8e9682e162 is
  signal ce_1_sg_x166: std_logic;
  signal clk_1_sg_x166: std_logic;
  signal concat_y_net_x2: std_logic_vector(35 downto 0);
  signal counter_op_net: std_logic_vector(5 downto 0);
  signal mux_y_net_x0: std_logic;
  signal rom1_data_net_x0: std_logic_vector(17 downto 0);
  signal rom_data_net_x0: std_logic_vector(17 downto 0);
  signal slice_y_net: std_logic_vector(4 downto 0);

begin
  ce_1_sg_x166 <= ce_1;
  clk_1_sg_x166 <= clk_1;
  mux_y_net_x0 <= rst;
  w <= concat_y_net_x2;

  counter: entity work.xlcounter_free_c09f12_01
    generic map (
      core_name0 => "cntr_11_0_50ef766046ea9bf4",
      op_arith => xlUnsigned,
      op_width => 6
    )
    port map (
      ce => ce_1_sg_x166,
      clk => clk_1_sg_x166,
      clr => '0',
      en => "1",
      rst(0) => mux_y_net_x0,
      op => counter_op_net
    );

  ri_to_c_11b303cb4b: entity work.ri_to_c_entity_2abbfa7cd7
    port map (
      im => rom1_data_net_x0,
      re => rom_data_net_x0,
      c => concat_y_net_x2
    );

  rom: entity work.xlsprom_c09f12_01
    generic map (
      c_address_width => 5,
      c_width => 18,
      core_name0 => "bmg_72_765e7ee20c0385ac",
      latency => 2
    )
    port map (
      addr => slice_y_net,
      ce => ce_1_sg_x166,
      clk => clk_1_sg_x166,
      en => "1",
      rst => "0",
      data => rom_data_net_x0
    );

  rom1: entity work.xlsprom_c09f12_01
    generic map (
      c_address_width => 5,
      c_width => 18,
      core_name0 => "bmg_72_b50899b30d5ca737",
      latency => 2
    )
    port map (
      addr => slice_y_net,
      ce => ce_1_sg_x166,
      clk => clk_1_sg_x166,
      en => "1",
      rst => "0",
      data => rom1_data_net_x0
    );

  slice: entity work.xlslice
    generic map (
      new_lsb => 1,
      new_msb => 5,
      x_width => 6,
      y_width => 5
    )
    port map (
      x => counter_op_net,
      y => slice_y_net
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/coarse/fft_wideband_real0/fft_biplex_real_4x0/biplex_core/fft_stage_6/butterfly_direct/twiddle_general_4mult"

entity twiddle_general_4mult_entity_de42a8054e is
  port (
    a: in std_logic_vector(35 downto 0); 
    b: in std_logic_vector(35 downto 0); 
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    sync: in std_logic; 
    a_im: out std_logic_vector(17 downto 0); 
    a_re: out std_logic_vector(17 downto 0); 
    bw_im: out std_logic_vector(21 downto 0); 
    bw_re: out std_logic_vector(21 downto 0); 
    sync_out: out std_logic
  );
end twiddle_general_4mult_entity_de42a8054e;

architecture structural of twiddle_general_4mult_entity_de42a8054e is
  signal addsub1_s_net: std_logic_vector(36 downto 0);
  signal addsub_s_net: std_logic_vector(36 downto 0);
  signal ce_1_sg_x167: std_logic;
  signal clk_1_sg_x167: std_logic;
  signal concat_y_net_x2: std_logic_vector(35 downto 0);
  signal convert0_dout_net_x2: std_logic_vector(21 downto 0);
  signal convert1_dout_net_x2: std_logic_vector(21 downto 0);
  signal delay0_q_net_x0: std_logic_vector(35 downto 0);
  signal delay1_q_net_x0: std_logic_vector(35 downto 0);
  signal delay2_q_net_x0: std_logic;
  signal delay_slr_q_net_x0: std_logic_vector(35 downto 0);
  signal force_im_output_port_net_x0: std_logic_vector(17 downto 0);
  signal force_im_output_port_net_x1: std_logic_vector(17 downto 0);
  signal force_im_output_port_net_x3: std_logic_vector(17 downto 0);
  signal force_re_output_port_net_x0: std_logic_vector(17 downto 0);
  signal force_re_output_port_net_x1: std_logic_vector(17 downto 0);
  signal force_re_output_port_net_x3: std_logic_vector(17 downto 0);
  signal mult1_p_net: std_logic_vector(35 downto 0);
  signal mult2_p_net: std_logic_vector(35 downto 0);
  signal mult3_p_net: std_logic_vector(35 downto 0);
  signal mult_p_net: std_logic_vector(35 downto 0);
  signal mux_y_net_x1: std_logic_vector(35 downto 0);
  signal mux_y_net_x2: std_logic;

begin
  delay_slr_q_net_x0 <= a;
  mux_y_net_x1 <= b;
  ce_1_sg_x167 <= ce_1;
  clk_1_sg_x167 <= clk_1;
  mux_y_net_x2 <= sync;
  a_im <= force_im_output_port_net_x3;
  a_re <= force_re_output_port_net_x3;
  bw_im <= convert1_dout_net_x2;
  bw_re <= convert0_dout_net_x2;
  sync_out <= delay2_q_net_x0;

  addsub: entity work.addsub_be8c56327e
    port map (
      a => mult_p_net,
      b => mult2_p_net,
      ce => ce_1_sg_x167,
      clk => clk_1_sg_x167,
      clr => '0',
      s => addsub_s_net
    );

  addsub1: entity work.addsub_eb2273ac28
    port map (
      a => mult1_p_net,
      b => mult3_p_net,
      ce => ce_1_sg_x167,
      clk => clk_1_sg_x167,
      clr => '0',
      s => addsub1_s_net
    );

  c_to_ri1_7c7524c094: entity work.c_to_ri0_entity_ac3e6eb705
    port map (
      c => delay0_q_net_x0,
      im => force_im_output_port_net_x3,
      re => force_re_output_port_net_x3
    );

  c_to_ri2_178bbcd90a: entity work.c_to_ri2_entity_e1b86f6b2f
    port map (
      c => concat_y_net_x2,
      im => force_im_output_port_net_x0,
      re => force_re_output_port_net_x0
    );

  c_to_ri3_81ea9f9976: entity work.c_to_ri0_entity_ac3e6eb705
    port map (
      c => delay1_q_net_x0,
      im => force_im_output_port_net_x1,
      re => force_re_output_port_net_x1
    );

  coeff_gen_8e9682e162: entity work.coeff_gen_entity_8e9682e162
    port map (
      ce_1 => ce_1_sg_x167,
      clk_1 => clk_1_sg_x167,
      rst => mux_y_net_x2,
      w => concat_y_net_x2
    );

  convert0: entity work.xlconvert_pipeline
    generic map (
      bool_conversion => 0,
      din_arith => 2,
      din_bin_pt => 33,
      din_width => 37,
      dout_arith => 2,
      dout_bin_pt => 19,
      dout_width => 22,
      latency => 2,
      overflow => xlWrap,
      quantization => xlRoundBanker
    )
    port map (
      ce => ce_1_sg_x167,
      clk => clk_1_sg_x167,
      clr => '0',
      din => addsub_s_net,
      en => "1",
      dout => convert0_dout_net_x2
    );

  convert1: entity work.xlconvert_pipeline
    generic map (
      bool_conversion => 0,
      din_arith => 2,
      din_bin_pt => 33,
      din_width => 37,
      dout_arith => 2,
      dout_bin_pt => 19,
      dout_width => 22,
      latency => 2,
      overflow => xlWrap,
      quantization => xlRoundBanker
    )
    port map (
      ce => ce_1_sg_x167,
      clk => clk_1_sg_x167,
      clr => '0',
      din => addsub1_s_net,
      en => "1",
      dout => convert1_dout_net_x2
    );

  delay0: entity work.xldelay
    generic map (
      latency => 10,
      reg_retiming => 0,
      reset => 0,
      width => 36
    )
    port map (
      ce => ce_1_sg_x167,
      clk => clk_1_sg_x167,
      d => delay_slr_q_net_x0,
      en => '1',
      rst => '1',
      q => delay0_q_net_x0
    );

  delay1: entity work.delay_4b00a70dea
    port map (
      ce => ce_1_sg_x167,
      clk => clk_1_sg_x167,
      clr => '0',
      d => mux_y_net_x1,
      q => delay1_q_net_x0
    );

  delay2: entity work.xldelay
    generic map (
      latency => 10,
      reg_retiming => 0,
      reset => 0,
      width => 1
    )
    port map (
      ce => ce_1_sg_x167,
      clk => clk_1_sg_x167,
      d(0) => mux_y_net_x2,
      en => '1',
      rst => '1',
      q(0) => delay2_q_net_x0
    );

  mult: entity work.mult_cfc8c45902
    port map (
      a => force_re_output_port_net_x1,
      b => force_re_output_port_net_x0,
      ce => ce_1_sg_x167,
      clk => clk_1_sg_x167,
      clr => '0',
      p => mult_p_net
    );

  mult1: entity work.mult_cfc8c45902
    port map (
      a => force_im_output_port_net_x1,
      b => force_re_output_port_net_x0,
      ce => ce_1_sg_x167,
      clk => clk_1_sg_x167,
      clr => '0',
      p => mult1_p_net
    );

  mult2: entity work.mult_cfc8c45902
    port map (
      a => force_im_output_port_net_x1,
      b => force_im_output_port_net_x0,
      ce => ce_1_sg_x167,
      clk => clk_1_sg_x167,
      clr => '0',
      p => mult2_p_net
    );

  mult3: entity work.mult_cfc8c45902
    port map (
      a => force_re_output_port_net_x1,
      b => force_im_output_port_net_x0,
      ce => ce_1_sg_x167,
      clk => clk_1_sg_x167,
      clr => '0',
      p => mult3_p_net
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/coarse/fft_wideband_real0/fft_biplex_real_4x0/biplex_core/fft_stage_6/butterfly_direct"

entity butterfly_direct_entity_42faa5a3b6 is
  port (
    a: in std_logic_vector(35 downto 0); 
    b: in std_logic_vector(35 downto 0); 
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    shift: in std_logic; 
    sync: in std_logic; 
    a_bw: out std_logic_vector(35 downto 0); 
    a_bw_x0: out std_logic_vector(35 downto 0); 
    of_x0: out std_logic; 
    sync_out: out std_logic
  );
end butterfly_direct_entity_42faa5a3b6;

architecture structural of butterfly_direct_entity_42faa5a3b6 is
  signal adder_s_net_x3: std_logic_vector(17 downto 0);
  signal adder_s_net_x4: std_logic_vector(17 downto 0);
  signal adder_s_net_x5: std_logic_vector(17 downto 0);
  signal adder_s_net_x6: std_logic_vector(17 downto 0);
  signal and_y_net_x0: std_logic;
  signal and_y_net_x1: std_logic;
  signal and_y_net_x2: std_logic;
  signal and_y_net_x3: std_logic;
  signal cast_c_im_dout_net_x0: std_logic_vector(22 downto 0);
  signal cast_c_im_dout_net_x1: std_logic_vector(22 downto 0);
  signal cast_c_re_dout_net_x0: std_logic_vector(22 downto 0);
  signal cast_c_re_dout_net_x1: std_logic_vector(22 downto 0);
  signal ce_1_sg_x168: std_logic;
  signal clk_1_sg_x168: std_logic;
  signal concat_y_net_x2: std_logic_vector(35 downto 0);
  signal concat_y_net_x3: std_logic_vector(35 downto 0);
  signal convert0_dout_net_x2: std_logic_vector(21 downto 0);
  signal convert1_dout_net_x2: std_logic_vector(21 downto 0);
  signal delay2_q_net_x0: std_logic;
  signal delay_slr_q_net_x1: std_logic_vector(35 downto 0);
  signal force_im_output_port_net_x3: std_logic_vector(17 downto 0);
  signal force_re_output_port_net_x3: std_logic_vector(17 downto 0);
  signal logical_y_net_x0: std_logic;
  signal mux0_y_net_x1: std_logic_vector(23 downto 0);
  signal mux1_y_net_x1: std_logic_vector(23 downto 0);
  signal mux2_y_net_x1: std_logic_vector(23 downto 0);
  signal mux3_y_net_x1: std_logic_vector(23 downto 0);
  signal mux_y_net_x3: std_logic_vector(35 downto 0);
  signal mux_y_net_x4: std_logic;
  signal scale0_op_net: std_logic_vector(22 downto 0);
  signal scale1_op_net: std_logic_vector(22 downto 0);
  signal scale2_op_net: std_logic_vector(22 downto 0);
  signal scale3_op_net: std_logic_vector(22 downto 0);
  signal shift_delay_q_net: std_logic;
  signal slice_y_net_x0: std_logic;
  signal sync_delay_q_net_x0: std_logic;

begin
  delay_slr_q_net_x1 <= a;
  mux_y_net_x3 <= b;
  ce_1_sg_x168 <= ce_1;
  clk_1_sg_x168 <= clk_1;
  slice_y_net_x0 <= shift;
  mux_y_net_x4 <= sync;
  a_bw <= concat_y_net_x2;
  a_bw_x0 <= concat_y_net_x3;
  of_x0 <= logical_y_net_x0;
  sync_out <= sync_delay_q_net_x0;

  cadd_3f04234e6d: entity work.cadd_entity_bd220e7516
    port map (
      a_im => force_im_output_port_net_x3,
      a_re => force_re_output_port_net_x3,
      b_im => convert1_dout_net_x2,
      b_re => convert0_dout_net_x2,
      ce_1 => ce_1_sg_x168,
      clk_1 => clk_1_sg_x168,
      c_im => cast_c_im_dout_net_x0,
      c_re => cast_c_re_dout_net_x0
    );

  convert_of0_0da5cbaf09: entity work.convert_of0_entity_6501bdd0bd
    port map (
      ce_1 => ce_1_sg_x168,
      clk_1 => clk_1_sg_x168,
      din => mux0_y_net_x1,
      dout => adder_s_net_x3,
      of_x0 => and_y_net_x0
    );

  convert_of1_1d7009331b: entity work.convert_of0_entity_6501bdd0bd
    port map (
      ce_1 => ce_1_sg_x168,
      clk_1 => clk_1_sg_x168,
      din => mux1_y_net_x1,
      dout => adder_s_net_x4,
      of_x0 => and_y_net_x1
    );

  convert_of2_9554dda80c: entity work.convert_of0_entity_6501bdd0bd
    port map (
      ce_1 => ce_1_sg_x168,
      clk_1 => clk_1_sg_x168,
      din => mux2_y_net_x1,
      dout => adder_s_net_x5,
      of_x0 => and_y_net_x2
    );

  convert_of3_b3497d44dc: entity work.convert_of0_entity_6501bdd0bd
    port map (
      ce_1 => ce_1_sg_x168,
      clk_1 => clk_1_sg_x168,
      din => mux3_y_net_x1,
      dout => adder_s_net_x6,
      of_x0 => and_y_net_x3
    );

  csub_4493c440dd: entity work.csub_entity_394eae4754
    port map (
      a_im => force_im_output_port_net_x3,
      a_re => force_re_output_port_net_x3,
      b_im => convert1_dout_net_x2,
      b_re => convert0_dout_net_x2,
      ce_1 => ce_1_sg_x168,
      clk_1 => clk_1_sg_x168,
      c_im => cast_c_im_dout_net_x1,
      c_re => cast_c_re_dout_net_x1
    );

  logical: entity work.logical_a6d07705dd
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0(0) => and_y_net_x0,
      d1(0) => and_y_net_x1,
      d2(0) => and_y_net_x2,
      d3(0) => and_y_net_x3,
      y(0) => logical_y_net_x0
    );

  mux0: entity work.mux_f1f44b96f0
    port map (
      ce => ce_1_sg_x168,
      clk => clk_1_sg_x168,
      clr => '0',
      d0 => cast_c_re_dout_net_x0,
      d1 => scale0_op_net,
      sel(0) => shift_delay_q_net,
      y => mux0_y_net_x1
    );

  mux1: entity work.mux_f1f44b96f0
    port map (
      ce => ce_1_sg_x168,
      clk => clk_1_sg_x168,
      clr => '0',
      d0 => cast_c_im_dout_net_x0,
      d1 => scale1_op_net,
      sel(0) => shift_delay_q_net,
      y => mux1_y_net_x1
    );

  mux2: entity work.mux_f1f44b96f0
    port map (
      ce => ce_1_sg_x168,
      clk => clk_1_sg_x168,
      clr => '0',
      d0 => cast_c_re_dout_net_x1,
      d1 => scale2_op_net,
      sel(0) => shift_delay_q_net,
      y => mux2_y_net_x1
    );

  mux3: entity work.mux_f1f44b96f0
    port map (
      ce => ce_1_sg_x168,
      clk => clk_1_sg_x168,
      clr => '0',
      d0 => cast_c_im_dout_net_x1,
      d1 => scale3_op_net,
      sel(0) => shift_delay_q_net,
      y => mux3_y_net_x1
    );

  ri_to_c01_f98320e85e: entity work.ri_to_c0_entity_724b130d6e
    port map (
      im => adder_s_net_x4,
      re => adder_s_net_x3,
      c => concat_y_net_x2
    );

  ri_to_c23_10015ecac3: entity work.ri_to_c0_entity_724b130d6e
    port map (
      im => adder_s_net_x6,
      re => adder_s_net_x5,
      c => concat_y_net_x3
    );

  scale0: entity work.scale_e5d0b4a1ec
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      ip => cast_c_re_dout_net_x0,
      op => scale0_op_net
    );

  scale1: entity work.scale_e5d0b4a1ec
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      ip => cast_c_im_dout_net_x0,
      op => scale1_op_net
    );

  scale2: entity work.scale_e5d0b4a1ec
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      ip => cast_c_re_dout_net_x1,
      op => scale2_op_net
    );

  scale3: entity work.scale_e5d0b4a1ec
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      ip => cast_c_im_dout_net_x1,
      op => scale3_op_net
    );

  shift_delay: entity work.xldelay
    generic map (
      latency => 2,
      reg_retiming => 0,
      reset => 0,
      width => 1
    )
    port map (
      ce => ce_1_sg_x168,
      clk => clk_1_sg_x168,
      d(0) => slice_y_net_x0,
      en => '1',
      rst => '1',
      q(0) => shift_delay_q_net
    );

  sync_delay: entity work.delay_aab7b18c27
    port map (
      ce => ce_1_sg_x168,
      clk => clk_1_sg_x168,
      clr => '0',
      d(0) => delay2_q_net_x0,
      q(0) => sync_delay_q_net_x0
    );

  twiddle_general_4mult_de42a8054e: entity work.twiddle_general_4mult_entity_de42a8054e
    port map (
      a => delay_slr_q_net_x1,
      b => mux_y_net_x3,
      ce_1 => ce_1_sg_x168,
      clk_1 => clk_1_sg_x168,
      sync => mux_y_net_x4,
      a_im => force_im_output_port_net_x3,
      a_re => force_re_output_port_net_x3,
      bw_im => convert1_dout_net_x2,
      bw_re => convert0_dout_net_x2,
      sync_out => delay2_q_net_x0
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/coarse/fft_wideband_real0/fft_biplex_real_4x0/biplex_core/fft_stage_6/delay_b"

entity delay_b_entity_b466295e6d is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    in1: in std_logic_vector(35 downto 0); 
    out1: out std_logic_vector(35 downto 0)
  );
end delay_b_entity_b466295e6d;

architecture structural of delay_b_entity_b466295e6d is
  signal ce_1_sg_x169: std_logic;
  signal clk_1_sg_x169: std_logic;
  signal delay_slr_q_net_x2: std_logic_vector(35 downto 0);
  signal mux1_y_net_x0: std_logic_vector(35 downto 0);

begin
  ce_1_sg_x169 <= ce_1;
  clk_1_sg_x169 <= clk_1;
  mux1_y_net_x0 <= in1;
  out1 <= delay_slr_q_net_x2;

  delay_slr: entity work.xldelay
    generic map (
      latency => 2,
      reg_retiming => 0,
      reset => 0,
      width => 36
    )
    port map (
      ce => ce_1_sg_x169,
      clk => clk_1_sg_x169,
      d => mux1_y_net_x0,
      en => '1',
      rst => '1',
      q => delay_slr_q_net_x2
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/coarse/fft_wideband_real0/fft_biplex_real_4x0/biplex_core/fft_stage_6/sync_delay"

entity sync_delay_entity_cf1f4c0073 is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    in_x0: in std_logic; 
    out_x0: out std_logic
  );
end sync_delay_entity_cf1f4c0073;

architecture structural of sync_delay_entity_cf1f4c0073 is
  signal ce_1_sg_x171: std_logic;
  signal clk_1_sg_x171: std_logic;
  signal constant1_op_net: std_logic_vector(1 downto 0);
  signal constant2_op_net: std_logic_vector(1 downto 0);
  signal constant3_op_net: std_logic;
  signal constant_op_net: std_logic_vector(1 downto 0);
  signal counter_op_net: std_logic_vector(1 downto 0);
  signal delay_q_net_x0: std_logic;
  signal logical_y_net: std_logic;
  signal mux_y_net_x5: std_logic;
  signal relational1_op_net: std_logic;
  signal relational_op_net: std_logic;

begin
  ce_1_sg_x171 <= ce_1;
  clk_1_sg_x171 <= clk_1;
  delay_q_net_x0 <= in_x0;
  out_x0 <= mux_y_net_x5;

  constant1: entity work.constant_cda50df78a
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op => constant1_op_net
    );

  constant2: entity work.constant_e8ddc079e9
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op => constant2_op_net
    );

  constant3: entity work.constant_6293007044
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op(0) => constant3_op_net
    );

  constant_x0: entity work.constant_a7e2bb9e12
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op => constant_op_net
    );

  counter: entity work.xlcounter_free_c09f12_01
    generic map (
      core_name0 => "cntr_11_0_93187ca4b7bc144e",
      op_arith => xlUnsigned,
      op_width => 2
    )
    port map (
      ce => ce_1_sg_x171,
      clk => clk_1_sg_x171,
      clr => '0',
      din => constant2_op_net,
      en(0) => logical_y_net,
      load(0) => delay_q_net_x0,
      rst => "0",
      op => counter_op_net
    );

  logical: entity work.logical_aacf6e1b0e
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0(0) => delay_q_net_x0,
      d1(0) => relational1_op_net,
      y(0) => logical_y_net
    );

  mux: entity work.mux_1bef4ba0e4
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0(0) => delay_q_net_x0,
      d1(0) => relational_op_net,
      sel(0) => constant3_op_net,
      y(0) => mux_y_net_x5
    );

  relational: entity work.relational_5f1eb17108
    port map (
      a => constant_op_net,
      b => counter_op_net,
      ce => '0',
      clk => '0',
      clr => '0',
      op(0) => relational_op_net
    );

  relational1: entity work.relational_f9928864ea
    port map (
      a => counter_op_net,
      b => constant1_op_net,
      ce => '0',
      clk => '0',
      clr => '0',
      op(0) => relational1_op_net
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/coarse/fft_wideband_real0/fft_biplex_real_4x0/biplex_core/fft_stage_6"

entity fft_stage_6_entity_7e75795901 is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    in1: in std_logic_vector(35 downto 0); 
    in2: in std_logic_vector(35 downto 0); 
    of_in: in std_logic; 
    shift: in std_logic_vector(9 downto 0); 
    sync: in std_logic; 
    of_x0: out std_logic; 
    out1: out std_logic_vector(35 downto 0); 
    out2: out std_logic_vector(35 downto 0); 
    sync_out: out std_logic
  );
end fft_stage_6_entity_7e75795901;

architecture structural of fft_stage_6_entity_7e75795901 is
  signal ce_1_sg_x172: std_logic;
  signal clk_1_sg_x172: std_logic;
  signal concat_y_net_x11: std_logic_vector(35 downto 0);
  signal concat_y_net_x13: std_logic_vector(35 downto 0);
  signal concat_y_net_x14: std_logic_vector(35 downto 0);
  signal concat_y_net_x4: std_logic_vector(35 downto 0);
  signal counter_op_net: std_logic_vector(1 downto 0);
  signal delay_q_net_x0: std_logic;
  signal delay_slr_q_net_x0: std_logic_vector(35 downto 0);
  signal delay_slr_q_net_x2: std_logic_vector(35 downto 0);
  signal logical1_y_net_x1: std_logic;
  signal logical1_y_net_x2: std_logic;
  signal logical_y_net_x0: std_logic;
  signal mux1_y_net_x0: std_logic_vector(35 downto 0);
  signal mux_y_net_x3: std_logic_vector(35 downto 0);
  signal mux_y_net_x5: std_logic;
  signal slice1_y_net: std_logic;
  signal slice6_y_net_x5: std_logic_vector(9 downto 0);
  signal slice_y_net_x0: std_logic;
  signal sync_delay_q_net_x4: std_logic;
  signal sync_delay_q_net_x5: std_logic;

begin
  ce_1_sg_x172 <= ce_1;
  clk_1_sg_x172 <= clk_1;
  concat_y_net_x11 <= in1;
  concat_y_net_x13 <= in2;
  logical1_y_net_x1 <= of_in;
  slice6_y_net_x5 <= shift;
  sync_delay_q_net_x4 <= sync;
  of_x0 <= logical1_y_net_x2;
  out1 <= concat_y_net_x4;
  out2 <= concat_y_net_x14;
  sync_out <= sync_delay_q_net_x5;

  butterfly_direct_42faa5a3b6: entity work.butterfly_direct_entity_42faa5a3b6
    port map (
      a => delay_slr_q_net_x2,
      b => mux_y_net_x3,
      ce_1 => ce_1_sg_x172,
      clk_1 => clk_1_sg_x172,
      shift => slice_y_net_x0,
      sync => mux_y_net_x5,
      a_bw => concat_y_net_x4,
      a_bw_x0 => concat_y_net_x14,
      of_x0 => logical_y_net_x0,
      sync_out => sync_delay_q_net_x5
    );

  counter: entity work.xlcounter_free_c09f12_01
    generic map (
      core_name0 => "cntr_11_0_263175d139d7ac6d",
      op_arith => xlUnsigned,
      op_width => 2
    )
    port map (
      ce => ce_1_sg_x172,
      clk => clk_1_sg_x172,
      clr => '0',
      en => "1",
      rst(0) => sync_delay_q_net_x4,
      op => counter_op_net
    );

  delay: entity work.xldelay
    generic map (
      latency => 1,
      reg_retiming => 0,
      reset => 0,
      width => 1
    )
    port map (
      ce => ce_1_sg_x172,
      clk => clk_1_sg_x172,
      d(0) => sync_delay_q_net_x4,
      en => '1',
      rst => '1',
      q(0) => delay_q_net_x0
    );

  delay_b_b466295e6d: entity work.delay_b_entity_b466295e6d
    port map (
      ce_1 => ce_1_sg_x172,
      clk_1 => clk_1_sg_x172,
      in1 => mux1_y_net_x0,
      out1 => delay_slr_q_net_x2
    );

  delay_f_c3221eed29: entity work.delay_b_entity_b466295e6d
    port map (
      ce_1 => ce_1_sg_x172,
      clk_1 => clk_1_sg_x172,
      in1 => concat_y_net_x13,
      out1 => delay_slr_q_net_x0
    );

  logical1: entity work.logical_444d3f5046
    port map (
      ce => ce_1_sg_x172,
      clk => clk_1_sg_x172,
      clr => '0',
      d0(0) => logical_y_net_x0,
      d1(0) => logical1_y_net_x1,
      y(0) => logical1_y_net_x2
    );

  mux: entity work.mux_4bb6f691f7
    port map (
      ce => ce_1_sg_x172,
      clk => clk_1_sg_x172,
      clr => '0',
      d0 => delay_slr_q_net_x0,
      d1 => concat_y_net_x11,
      sel(0) => slice1_y_net,
      y => mux_y_net_x3
    );

  mux1: entity work.mux_4bb6f691f7
    port map (
      ce => ce_1_sg_x172,
      clk => clk_1_sg_x172,
      clr => '0',
      d0 => concat_y_net_x11,
      d1 => delay_slr_q_net_x0,
      sel(0) => slice1_y_net,
      y => mux1_y_net_x0
    );

  slice: entity work.xlslice
    generic map (
      new_lsb => 5,
      new_msb => 5,
      x_width => 10,
      y_width => 1
    )
    port map (
      x => slice6_y_net_x5,
      y(0) => slice_y_net_x0
    );

  slice1: entity work.xlslice
    generic map (
      new_lsb => 1,
      new_msb => 1,
      x_width => 2,
      y_width => 1
    )
    port map (
      x => counter_op_net,
      y(0) => slice1_y_net
    );

  sync_delay_cf1f4c0073: entity work.sync_delay_entity_cf1f4c0073
    port map (
      ce_1 => ce_1_sg_x172,
      clk_1 => clk_1_sg_x172,
      in_x0 => delay_q_net_x0,
      out_x0 => mux_y_net_x5
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/coarse/fft_wideband_real0/fft_biplex_real_4x0/biplex_core/fft_stage_7/butterfly_direct/twiddle_general_4mult/coeff_gen"

entity coeff_gen_entity_14d6df8e1f is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    rst: in std_logic; 
    w: out std_logic_vector(35 downto 0)
  );
end coeff_gen_entity_14d6df8e1f;

architecture structural of coeff_gen_entity_14d6df8e1f is
  signal ce_1_sg_x183: std_logic;
  signal clk_1_sg_x183: std_logic;
  signal concat_y_net_x2: std_logic_vector(35 downto 0);
  signal counter_op_net: std_logic_vector(5 downto 0);
  signal mux_y_net_x0: std_logic;
  signal rom1_data_net_x0: std_logic_vector(17 downto 0);
  signal rom_data_net_x0: std_logic_vector(17 downto 0);
  signal slice_y_net: std_logic_vector(5 downto 0);

begin
  ce_1_sg_x183 <= ce_1;
  clk_1_sg_x183 <= clk_1;
  mux_y_net_x0 <= rst;
  w <= concat_y_net_x2;

  counter: entity work.xlcounter_free_c09f12_01
    generic map (
      core_name0 => "cntr_11_0_50ef766046ea9bf4",
      op_arith => xlUnsigned,
      op_width => 6
    )
    port map (
      ce => ce_1_sg_x183,
      clk => clk_1_sg_x183,
      clr => '0',
      en => "1",
      rst(0) => mux_y_net_x0,
      op => counter_op_net
    );

  ri_to_c_f448b4722e: entity work.ri_to_c_entity_2abbfa7cd7
    port map (
      im => rom1_data_net_x0,
      re => rom_data_net_x0,
      c => concat_y_net_x2
    );

  rom: entity work.xlsprom_c09f12_01
    generic map (
      c_address_width => 6,
      c_width => 18,
      core_name0 => "bmg_72_05b952b0e97b2a0d",
      latency => 2
    )
    port map (
      addr => slice_y_net,
      ce => ce_1_sg_x183,
      clk => clk_1_sg_x183,
      en => "1",
      rst => "0",
      data => rom_data_net_x0
    );

  rom1: entity work.xlsprom_c09f12_01
    generic map (
      c_address_width => 6,
      c_width => 18,
      core_name0 => "bmg_72_04e0d9cde0f49a3d",
      latency => 2
    )
    port map (
      addr => slice_y_net,
      ce => ce_1_sg_x183,
      clk => clk_1_sg_x183,
      en => "1",
      rst => "0",
      data => rom1_data_net_x0
    );

  slice: entity work.xlslice
    generic map (
      new_lsb => 0,
      new_msb => 5,
      x_width => 6,
      y_width => 6
    )
    port map (
      x => counter_op_net,
      y => slice_y_net
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/coarse/fft_wideband_real0/fft_biplex_real_4x0/biplex_core/fft_stage_7/butterfly_direct/twiddle_general_4mult"

entity twiddle_general_4mult_entity_00c35e5a44 is
  port (
    a: in std_logic_vector(35 downto 0); 
    b: in std_logic_vector(35 downto 0); 
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    sync: in std_logic; 
    a_im: out std_logic_vector(17 downto 0); 
    a_re: out std_logic_vector(17 downto 0); 
    bw_im: out std_logic_vector(21 downto 0); 
    bw_re: out std_logic_vector(21 downto 0); 
    sync_out: out std_logic
  );
end twiddle_general_4mult_entity_00c35e5a44;

architecture structural of twiddle_general_4mult_entity_00c35e5a44 is
  signal addsub1_s_net: std_logic_vector(36 downto 0);
  signal addsub_s_net: std_logic_vector(36 downto 0);
  signal ce_1_sg_x184: std_logic;
  signal clk_1_sg_x184: std_logic;
  signal concat_y_net_x2: std_logic_vector(35 downto 0);
  signal convert0_dout_net_x2: std_logic_vector(21 downto 0);
  signal convert1_dout_net_x2: std_logic_vector(21 downto 0);
  signal delay0_q_net_x0: std_logic_vector(35 downto 0);
  signal delay1_q_net_x0: std_logic_vector(35 downto 0);
  signal delay2_q_net_x0: std_logic;
  signal delay_slr_q_net_x0: std_logic_vector(35 downto 0);
  signal force_im_output_port_net_x0: std_logic_vector(17 downto 0);
  signal force_im_output_port_net_x1: std_logic_vector(17 downto 0);
  signal force_im_output_port_net_x3: std_logic_vector(17 downto 0);
  signal force_re_output_port_net_x0: std_logic_vector(17 downto 0);
  signal force_re_output_port_net_x1: std_logic_vector(17 downto 0);
  signal force_re_output_port_net_x3: std_logic_vector(17 downto 0);
  signal mult1_p_net: std_logic_vector(35 downto 0);
  signal mult2_p_net: std_logic_vector(35 downto 0);
  signal mult3_p_net: std_logic_vector(35 downto 0);
  signal mult_p_net: std_logic_vector(35 downto 0);
  signal mux_y_net_x1: std_logic_vector(35 downto 0);
  signal mux_y_net_x2: std_logic;

begin
  delay_slr_q_net_x0 <= a;
  mux_y_net_x1 <= b;
  ce_1_sg_x184 <= ce_1;
  clk_1_sg_x184 <= clk_1;
  mux_y_net_x2 <= sync;
  a_im <= force_im_output_port_net_x3;
  a_re <= force_re_output_port_net_x3;
  bw_im <= convert1_dout_net_x2;
  bw_re <= convert0_dout_net_x2;
  sync_out <= delay2_q_net_x0;

  addsub: entity work.addsub_be8c56327e
    port map (
      a => mult_p_net,
      b => mult2_p_net,
      ce => ce_1_sg_x184,
      clk => clk_1_sg_x184,
      clr => '0',
      s => addsub_s_net
    );

  addsub1: entity work.addsub_eb2273ac28
    port map (
      a => mult1_p_net,
      b => mult3_p_net,
      ce => ce_1_sg_x184,
      clk => clk_1_sg_x184,
      clr => '0',
      s => addsub1_s_net
    );

  c_to_ri1_f57407f108: entity work.c_to_ri0_entity_ac3e6eb705
    port map (
      c => delay0_q_net_x0,
      im => force_im_output_port_net_x3,
      re => force_re_output_port_net_x3
    );

  c_to_ri2_1555be101b: entity work.c_to_ri2_entity_e1b86f6b2f
    port map (
      c => concat_y_net_x2,
      im => force_im_output_port_net_x0,
      re => force_re_output_port_net_x0
    );

  c_to_ri3_f3550db891: entity work.c_to_ri0_entity_ac3e6eb705
    port map (
      c => delay1_q_net_x0,
      im => force_im_output_port_net_x1,
      re => force_re_output_port_net_x1
    );

  coeff_gen_14d6df8e1f: entity work.coeff_gen_entity_14d6df8e1f
    port map (
      ce_1 => ce_1_sg_x184,
      clk_1 => clk_1_sg_x184,
      rst => mux_y_net_x2,
      w => concat_y_net_x2
    );

  convert0: entity work.xlconvert_pipeline
    generic map (
      bool_conversion => 0,
      din_arith => 2,
      din_bin_pt => 33,
      din_width => 37,
      dout_arith => 2,
      dout_bin_pt => 19,
      dout_width => 22,
      latency => 2,
      overflow => xlWrap,
      quantization => xlRoundBanker
    )
    port map (
      ce => ce_1_sg_x184,
      clk => clk_1_sg_x184,
      clr => '0',
      din => addsub_s_net,
      en => "1",
      dout => convert0_dout_net_x2
    );

  convert1: entity work.xlconvert_pipeline
    generic map (
      bool_conversion => 0,
      din_arith => 2,
      din_bin_pt => 33,
      din_width => 37,
      dout_arith => 2,
      dout_bin_pt => 19,
      dout_width => 22,
      latency => 2,
      overflow => xlWrap,
      quantization => xlRoundBanker
    )
    port map (
      ce => ce_1_sg_x184,
      clk => clk_1_sg_x184,
      clr => '0',
      din => addsub1_s_net,
      en => "1",
      dout => convert1_dout_net_x2
    );

  delay0: entity work.xldelay
    generic map (
      latency => 10,
      reg_retiming => 0,
      reset => 0,
      width => 36
    )
    port map (
      ce => ce_1_sg_x184,
      clk => clk_1_sg_x184,
      d => delay_slr_q_net_x0,
      en => '1',
      rst => '1',
      q => delay0_q_net_x0
    );

  delay1: entity work.delay_4b00a70dea
    port map (
      ce => ce_1_sg_x184,
      clk => clk_1_sg_x184,
      clr => '0',
      d => mux_y_net_x1,
      q => delay1_q_net_x0
    );

  delay2: entity work.xldelay
    generic map (
      latency => 10,
      reg_retiming => 0,
      reset => 0,
      width => 1
    )
    port map (
      ce => ce_1_sg_x184,
      clk => clk_1_sg_x184,
      d(0) => mux_y_net_x2,
      en => '1',
      rst => '1',
      q(0) => delay2_q_net_x0
    );

  mult: entity work.mult_cfc8c45902
    port map (
      a => force_re_output_port_net_x1,
      b => force_re_output_port_net_x0,
      ce => ce_1_sg_x184,
      clk => clk_1_sg_x184,
      clr => '0',
      p => mult_p_net
    );

  mult1: entity work.mult_cfc8c45902
    port map (
      a => force_im_output_port_net_x1,
      b => force_re_output_port_net_x0,
      ce => ce_1_sg_x184,
      clk => clk_1_sg_x184,
      clr => '0',
      p => mult1_p_net
    );

  mult2: entity work.mult_cfc8c45902
    port map (
      a => force_im_output_port_net_x1,
      b => force_im_output_port_net_x0,
      ce => ce_1_sg_x184,
      clk => clk_1_sg_x184,
      clr => '0',
      p => mult2_p_net
    );

  mult3: entity work.mult_cfc8c45902
    port map (
      a => force_re_output_port_net_x1,
      b => force_im_output_port_net_x0,
      ce => ce_1_sg_x184,
      clk => clk_1_sg_x184,
      clr => '0',
      p => mult3_p_net
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/coarse/fft_wideband_real0/fft_biplex_real_4x0/biplex_core/fft_stage_7/butterfly_direct"

entity butterfly_direct_entity_82622f77fc is
  port (
    a: in std_logic_vector(35 downto 0); 
    b: in std_logic_vector(35 downto 0); 
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    shift: in std_logic; 
    sync: in std_logic; 
    a_bw: out std_logic_vector(35 downto 0); 
    a_bw_x0: out std_logic_vector(35 downto 0); 
    of_x0: out std_logic; 
    sync_out: out std_logic
  );
end butterfly_direct_entity_82622f77fc;

architecture structural of butterfly_direct_entity_82622f77fc is
  signal adder_s_net_x3: std_logic_vector(17 downto 0);
  signal adder_s_net_x4: std_logic_vector(17 downto 0);
  signal adder_s_net_x5: std_logic_vector(17 downto 0);
  signal adder_s_net_x6: std_logic_vector(17 downto 0);
  signal and_y_net_x0: std_logic;
  signal and_y_net_x1: std_logic;
  signal and_y_net_x2: std_logic;
  signal and_y_net_x3: std_logic;
  signal cast_c_im_dout_net_x0: std_logic_vector(22 downto 0);
  signal cast_c_im_dout_net_x1: std_logic_vector(22 downto 0);
  signal cast_c_re_dout_net_x0: std_logic_vector(22 downto 0);
  signal cast_c_re_dout_net_x1: std_logic_vector(22 downto 0);
  signal ce_1_sg_x185: std_logic;
  signal clk_1_sg_x185: std_logic;
  signal concat_y_net_x11: std_logic_vector(35 downto 0);
  signal concat_y_net_x12: std_logic_vector(35 downto 0);
  signal convert0_dout_net_x2: std_logic_vector(21 downto 0);
  signal convert1_dout_net_x2: std_logic_vector(21 downto 0);
  signal delay2_q_net_x0: std_logic;
  signal delay_slr_q_net_x1: std_logic_vector(35 downto 0);
  signal force_im_output_port_net_x3: std_logic_vector(17 downto 0);
  signal force_re_output_port_net_x3: std_logic_vector(17 downto 0);
  signal logical_y_net_x0: std_logic;
  signal mux0_y_net_x1: std_logic_vector(23 downto 0);
  signal mux1_y_net_x1: std_logic_vector(23 downto 0);
  signal mux2_y_net_x1: std_logic_vector(23 downto 0);
  signal mux3_y_net_x1: std_logic_vector(23 downto 0);
  signal mux_y_net_x3: std_logic_vector(35 downto 0);
  signal mux_y_net_x4: std_logic;
  signal scale0_op_net: std_logic_vector(22 downto 0);
  signal scale1_op_net: std_logic_vector(22 downto 0);
  signal scale2_op_net: std_logic_vector(22 downto 0);
  signal scale3_op_net: std_logic_vector(22 downto 0);
  signal shift_delay_q_net: std_logic;
  signal slice_y_net_x0: std_logic;
  signal sync_delay_q_net_x3: std_logic;

begin
  delay_slr_q_net_x1 <= a;
  mux_y_net_x3 <= b;
  ce_1_sg_x185 <= ce_1;
  clk_1_sg_x185 <= clk_1;
  slice_y_net_x0 <= shift;
  mux_y_net_x4 <= sync;
  a_bw <= concat_y_net_x11;
  a_bw_x0 <= concat_y_net_x12;
  of_x0 <= logical_y_net_x0;
  sync_out <= sync_delay_q_net_x3;

  cadd_c438498f13: entity work.cadd_entity_bd220e7516
    port map (
      a_im => force_im_output_port_net_x3,
      a_re => force_re_output_port_net_x3,
      b_im => convert1_dout_net_x2,
      b_re => convert0_dout_net_x2,
      ce_1 => ce_1_sg_x185,
      clk_1 => clk_1_sg_x185,
      c_im => cast_c_im_dout_net_x0,
      c_re => cast_c_re_dout_net_x0
    );

  convert_of0_21ea647b07: entity work.convert_of0_entity_6501bdd0bd
    port map (
      ce_1 => ce_1_sg_x185,
      clk_1 => clk_1_sg_x185,
      din => mux0_y_net_x1,
      dout => adder_s_net_x3,
      of_x0 => and_y_net_x0
    );

  convert_of1_90fb63505d: entity work.convert_of0_entity_6501bdd0bd
    port map (
      ce_1 => ce_1_sg_x185,
      clk_1 => clk_1_sg_x185,
      din => mux1_y_net_x1,
      dout => adder_s_net_x4,
      of_x0 => and_y_net_x1
    );

  convert_of2_0dba853999: entity work.convert_of0_entity_6501bdd0bd
    port map (
      ce_1 => ce_1_sg_x185,
      clk_1 => clk_1_sg_x185,
      din => mux2_y_net_x1,
      dout => adder_s_net_x5,
      of_x0 => and_y_net_x2
    );

  convert_of3_143c683b1a: entity work.convert_of0_entity_6501bdd0bd
    port map (
      ce_1 => ce_1_sg_x185,
      clk_1 => clk_1_sg_x185,
      din => mux3_y_net_x1,
      dout => adder_s_net_x6,
      of_x0 => and_y_net_x3
    );

  csub_dd1d1952b1: entity work.csub_entity_394eae4754
    port map (
      a_im => force_im_output_port_net_x3,
      a_re => force_re_output_port_net_x3,
      b_im => convert1_dout_net_x2,
      b_re => convert0_dout_net_x2,
      ce_1 => ce_1_sg_x185,
      clk_1 => clk_1_sg_x185,
      c_im => cast_c_im_dout_net_x1,
      c_re => cast_c_re_dout_net_x1
    );

  logical: entity work.logical_a6d07705dd
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0(0) => and_y_net_x0,
      d1(0) => and_y_net_x1,
      d2(0) => and_y_net_x2,
      d3(0) => and_y_net_x3,
      y(0) => logical_y_net_x0
    );

  mux0: entity work.mux_f1f44b96f0
    port map (
      ce => ce_1_sg_x185,
      clk => clk_1_sg_x185,
      clr => '0',
      d0 => cast_c_re_dout_net_x0,
      d1 => scale0_op_net,
      sel(0) => shift_delay_q_net,
      y => mux0_y_net_x1
    );

  mux1: entity work.mux_f1f44b96f0
    port map (
      ce => ce_1_sg_x185,
      clk => clk_1_sg_x185,
      clr => '0',
      d0 => cast_c_im_dout_net_x0,
      d1 => scale1_op_net,
      sel(0) => shift_delay_q_net,
      y => mux1_y_net_x1
    );

  mux2: entity work.mux_f1f44b96f0
    port map (
      ce => ce_1_sg_x185,
      clk => clk_1_sg_x185,
      clr => '0',
      d0 => cast_c_re_dout_net_x1,
      d1 => scale2_op_net,
      sel(0) => shift_delay_q_net,
      y => mux2_y_net_x1
    );

  mux3: entity work.mux_f1f44b96f0
    port map (
      ce => ce_1_sg_x185,
      clk => clk_1_sg_x185,
      clr => '0',
      d0 => cast_c_im_dout_net_x1,
      d1 => scale3_op_net,
      sel(0) => shift_delay_q_net,
      y => mux3_y_net_x1
    );

  ri_to_c01_c8c1f5c1e0: entity work.ri_to_c0_entity_724b130d6e
    port map (
      im => adder_s_net_x4,
      re => adder_s_net_x3,
      c => concat_y_net_x11
    );

  ri_to_c23_d87fcdeb81: entity work.ri_to_c0_entity_724b130d6e
    port map (
      im => adder_s_net_x6,
      re => adder_s_net_x5,
      c => concat_y_net_x12
    );

  scale0: entity work.scale_e5d0b4a1ec
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      ip => cast_c_re_dout_net_x0,
      op => scale0_op_net
    );

  scale1: entity work.scale_e5d0b4a1ec
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      ip => cast_c_im_dout_net_x0,
      op => scale1_op_net
    );

  scale2: entity work.scale_e5d0b4a1ec
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      ip => cast_c_re_dout_net_x1,
      op => scale2_op_net
    );

  scale3: entity work.scale_e5d0b4a1ec
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      ip => cast_c_im_dout_net_x1,
      op => scale3_op_net
    );

  shift_delay: entity work.xldelay
    generic map (
      latency => 2,
      reg_retiming => 0,
      reset => 0,
      width => 1
    )
    port map (
      ce => ce_1_sg_x185,
      clk => clk_1_sg_x185,
      d(0) => slice_y_net_x0,
      en => '1',
      rst => '1',
      q(0) => shift_delay_q_net
    );

  sync_delay: entity work.delay_aab7b18c27
    port map (
      ce => ce_1_sg_x185,
      clk => clk_1_sg_x185,
      clr => '0',
      d(0) => delay2_q_net_x0,
      q(0) => sync_delay_q_net_x3
    );

  twiddle_general_4mult_00c35e5a44: entity work.twiddle_general_4mult_entity_00c35e5a44
    port map (
      a => delay_slr_q_net_x1,
      b => mux_y_net_x3,
      ce_1 => ce_1_sg_x185,
      clk_1 => clk_1_sg_x185,
      sync => mux_y_net_x4,
      a_im => force_im_output_port_net_x3,
      a_re => force_re_output_port_net_x3,
      bw_im => convert1_dout_net_x2,
      bw_re => convert0_dout_net_x2,
      sync_out => delay2_q_net_x0
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/coarse/fft_wideband_real0/fft_biplex_real_4x0/biplex_core/fft_stage_7/delay_b"

entity delay_b_entity_512883e072 is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    in1: in std_logic_vector(35 downto 0); 
    out1: out std_logic_vector(35 downto 0)
  );
end delay_b_entity_512883e072;

architecture structural of delay_b_entity_512883e072 is
  signal ce_1_sg_x186: std_logic;
  signal clk_1_sg_x186: std_logic;
  signal delay_slr_q_net_x2: std_logic_vector(35 downto 0);
  signal mux1_y_net_x0: std_logic_vector(35 downto 0);

begin
  ce_1_sg_x186 <= ce_1;
  clk_1_sg_x186 <= clk_1;
  mux1_y_net_x0 <= in1;
  out1 <= delay_slr_q_net_x2;

  delay_slr: entity work.xldelay
    generic map (
      latency => 1,
      reg_retiming => 0,
      reset => 0,
      width => 36
    )
    port map (
      ce => ce_1_sg_x186,
      clk => clk_1_sg_x186,
      d => mux1_y_net_x0,
      en => '1',
      rst => '1',
      q => delay_slr_q_net_x2
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/coarse/fft_wideband_real0/fft_biplex_real_4x0/biplex_core/fft_stage_7/sync_delay"

entity sync_delay_entity_11d0f399ba is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    in_x0: in std_logic; 
    out_x0: out std_logic
  );
end sync_delay_entity_11d0f399ba;

architecture structural of sync_delay_entity_11d0f399ba is
  signal ce_1_sg_x188: std_logic;
  signal clk_1_sg_x188: std_logic;
  signal constant1_op_net: std_logic_vector(1 downto 0);
  signal constant2_op_net: std_logic_vector(1 downto 0);
  signal constant3_op_net: std_logic;
  signal constant_op_net: std_logic_vector(1 downto 0);
  signal counter_op_net: std_logic_vector(1 downto 0);
  signal delay_q_net_x0: std_logic;
  signal logical_y_net: std_logic;
  signal mux_y_net_x5: std_logic;
  signal relational1_op_net: std_logic;
  signal relational_op_net: std_logic;

begin
  ce_1_sg_x188 <= ce_1;
  clk_1_sg_x188 <= clk_1;
  delay_q_net_x0 <= in_x0;
  out_x0 <= mux_y_net_x5;

  constant1: entity work.constant_cda50df78a
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op => constant1_op_net
    );

  constant2: entity work.constant_a7e2bb9e12
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op => constant2_op_net
    );

  constant3: entity work.constant_6293007044
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op(0) => constant3_op_net
    );

  constant_x0: entity work.constant_a7e2bb9e12
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op => constant_op_net
    );

  counter: entity work.xlcounter_free_c09f12_01
    generic map (
      core_name0 => "cntr_11_0_93187ca4b7bc144e",
      op_arith => xlUnsigned,
      op_width => 2
    )
    port map (
      ce => ce_1_sg_x188,
      clk => clk_1_sg_x188,
      clr => '0',
      din => constant2_op_net,
      en(0) => logical_y_net,
      load(0) => delay_q_net_x0,
      rst => "0",
      op => counter_op_net
    );

  logical: entity work.logical_aacf6e1b0e
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0(0) => delay_q_net_x0,
      d1(0) => relational1_op_net,
      y(0) => logical_y_net
    );

  mux: entity work.mux_1bef4ba0e4
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0(0) => delay_q_net_x0,
      d1(0) => relational_op_net,
      sel(0) => constant3_op_net,
      y(0) => mux_y_net_x5
    );

  relational: entity work.relational_5f1eb17108
    port map (
      a => constant_op_net,
      b => counter_op_net,
      ce => '0',
      clk => '0',
      clr => '0',
      op(0) => relational_op_net
    );

  relational1: entity work.relational_f9928864ea
    port map (
      a => counter_op_net,
      b => constant1_op_net,
      ce => '0',
      clk => '0',
      clr => '0',
      op(0) => relational1_op_net
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/coarse/fft_wideband_real0/fft_biplex_real_4x0/biplex_core/fft_stage_7"

entity fft_stage_7_entity_5823de238c is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    in1: in std_logic_vector(35 downto 0); 
    in2: in std_logic_vector(35 downto 0); 
    of_in: in std_logic; 
    shift: in std_logic_vector(9 downto 0); 
    sync: in std_logic; 
    of_x0: out std_logic; 
    out1: out std_logic_vector(35 downto 0); 
    out2: out std_logic_vector(35 downto 0); 
    sync_out: out std_logic
  );
end fft_stage_7_entity_5823de238c;

architecture structural of fft_stage_7_entity_5823de238c is
  signal ce_1_sg_x189: std_logic;
  signal clk_1_sg_x189: std_logic;
  signal concat_y_net_x13: std_logic_vector(35 downto 0);
  signal concat_y_net_x16: std_logic_vector(35 downto 0);
  signal concat_y_net_x17: std_logic_vector(35 downto 0);
  signal concat_y_net_x18: std_logic_vector(35 downto 0);
  signal counter_op_net: std_logic;
  signal delay_q_net_x0: std_logic;
  signal delay_slr_q_net_x0: std_logic_vector(35 downto 0);
  signal delay_slr_q_net_x2: std_logic_vector(35 downto 0);
  signal logical1_y_net_x0: std_logic;
  signal logical1_y_net_x3: std_logic;
  signal logical_y_net_x0: std_logic;
  signal mux1_y_net_x0: std_logic_vector(35 downto 0);
  signal mux_y_net_x3: std_logic_vector(35 downto 0);
  signal mux_y_net_x5: std_logic;
  signal slice1_y_net: std_logic;
  signal slice6_y_net_x6: std_logic_vector(9 downto 0);
  signal slice_y_net_x0: std_logic;
  signal sync_delay_q_net_x6: std_logic;
  signal sync_delay_q_net_x7: std_logic;

begin
  ce_1_sg_x189 <= ce_1;
  clk_1_sg_x189 <= clk_1;
  concat_y_net_x16 <= in1;
  concat_y_net_x17 <= in2;
  logical1_y_net_x3 <= of_in;
  slice6_y_net_x6 <= shift;
  sync_delay_q_net_x6 <= sync;
  of_x0 <= logical1_y_net_x0;
  out1 <= concat_y_net_x13;
  out2 <= concat_y_net_x18;
  sync_out <= sync_delay_q_net_x7;

  butterfly_direct_82622f77fc: entity work.butterfly_direct_entity_82622f77fc
    port map (
      a => delay_slr_q_net_x2,
      b => mux_y_net_x3,
      ce_1 => ce_1_sg_x189,
      clk_1 => clk_1_sg_x189,
      shift => slice_y_net_x0,
      sync => mux_y_net_x5,
      a_bw => concat_y_net_x13,
      a_bw_x0 => concat_y_net_x18,
      of_x0 => logical_y_net_x0,
      sync_out => sync_delay_q_net_x7
    );

  counter: entity work.counter_223a0f3237
    port map (
      ce => ce_1_sg_x189,
      clk => clk_1_sg_x189,
      clr => '0',
      rst(0) => sync_delay_q_net_x6,
      op(0) => counter_op_net
    );

  delay: entity work.xldelay
    generic map (
      latency => 1,
      reg_retiming => 0,
      reset => 0,
      width => 1
    )
    port map (
      ce => ce_1_sg_x189,
      clk => clk_1_sg_x189,
      d(0) => sync_delay_q_net_x6,
      en => '1',
      rst => '1',
      q(0) => delay_q_net_x0
    );

  delay_b_512883e072: entity work.delay_b_entity_512883e072
    port map (
      ce_1 => ce_1_sg_x189,
      clk_1 => clk_1_sg_x189,
      in1 => mux1_y_net_x0,
      out1 => delay_slr_q_net_x2
    );

  delay_f_57cf16aa10: entity work.delay_b_entity_512883e072
    port map (
      ce_1 => ce_1_sg_x189,
      clk_1 => clk_1_sg_x189,
      in1 => concat_y_net_x17,
      out1 => delay_slr_q_net_x0
    );

  logical1: entity work.logical_444d3f5046
    port map (
      ce => ce_1_sg_x189,
      clk => clk_1_sg_x189,
      clr => '0',
      d0(0) => logical_y_net_x0,
      d1(0) => logical1_y_net_x3,
      y(0) => logical1_y_net_x0
    );

  mux: entity work.mux_4bb6f691f7
    port map (
      ce => ce_1_sg_x189,
      clk => clk_1_sg_x189,
      clr => '0',
      d0 => delay_slr_q_net_x0,
      d1 => concat_y_net_x16,
      sel(0) => slice1_y_net,
      y => mux_y_net_x3
    );

  mux1: entity work.mux_4bb6f691f7
    port map (
      ce => ce_1_sg_x189,
      clk => clk_1_sg_x189,
      clr => '0',
      d0 => concat_y_net_x16,
      d1 => delay_slr_q_net_x0,
      sel(0) => slice1_y_net,
      y => mux1_y_net_x0
    );

  slice: entity work.xlslice
    generic map (
      new_lsb => 6,
      new_msb => 6,
      x_width => 10,
      y_width => 1
    )
    port map (
      x => slice6_y_net_x6,
      y(0) => slice_y_net_x0
    );

  slice1: entity work.xlslice
    generic map (
      new_lsb => 0,
      new_msb => 0,
      x_width => 1,
      y_width => 1
    )
    port map (
      x(0) => counter_op_net,
      y(0) => slice1_y_net
    );

  sync_delay_11d0f399ba: entity work.sync_delay_entity_11d0f399ba
    port map (
      ce_1 => ce_1_sg_x189,
      clk_1 => clk_1_sg_x189,
      in_x0 => delay_q_net_x0,
      out_x0 => mux_y_net_x5
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/coarse/fft_wideband_real0/fft_biplex_real_4x0/biplex_core"

entity biplex_core_entity_ce6e11ad41 is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    pol1: in std_logic_vector(35 downto 0); 
    pol2: in std_logic_vector(35 downto 0); 
    shift: in std_logic_vector(9 downto 0); 
    sync: in std_logic; 
    of_x0: out std_logic; 
    out1: out std_logic_vector(35 downto 0); 
    out2: out std_logic_vector(35 downto 0); 
    sync_out: out std_logic
  );
end biplex_core_entity_ce6e11ad41;

architecture structural of biplex_core_entity_ce6e11ad41 is
  signal ce_1_sg_x190: std_logic;
  signal clk_1_sg_x190: std_logic;
  signal concat_y_net_x11: std_logic_vector(35 downto 0);
  signal concat_y_net_x12: std_logic_vector(35 downto 0);
  signal concat_y_net_x13: std_logic_vector(35 downto 0);
  signal concat_y_net_x16: std_logic_vector(35 downto 0);
  signal concat_y_net_x17: std_logic_vector(35 downto 0);
  signal concat_y_net_x18: std_logic_vector(35 downto 0);
  signal concat_y_net_x19: std_logic_vector(35 downto 0);
  signal concat_y_net_x20: std_logic_vector(35 downto 0);
  signal concat_y_net_x24: std_logic_vector(35 downto 0);
  signal concat_y_net_x25: std_logic_vector(35 downto 0);
  signal concat_y_net_x26: std_logic_vector(35 downto 0);
  signal concat_y_net_x27: std_logic_vector(35 downto 0);
  signal concat_y_net_x5: std_logic_vector(35 downto 0);
  signal concat_y_net_x7: std_logic_vector(35 downto 0);
  signal concat_y_net_x8: std_logic_vector(35 downto 0);
  signal concat_y_net_x9: std_logic_vector(35 downto 0);
  signal constant_op_net_x0: std_logic;
  signal logical1_y_net_x1: std_logic;
  signal logical1_y_net_x2: std_logic;
  signal logical1_y_net_x3: std_logic;
  signal logical1_y_net_x4: std_logic;
  signal logical1_y_net_x5: std_logic;
  signal logical1_y_net_x6: std_logic;
  signal logical1_y_net_x7: std_logic;
  signal register0_q_net_x1: std_logic;
  signal slice6_y_net_x7: std_logic_vector(9 downto 0);
  signal sync_delay_q_net_x2: std_logic;
  signal sync_delay_q_net_x3: std_logic;
  signal sync_delay_q_net_x4: std_logic;
  signal sync_delay_q_net_x5: std_logic;
  signal sync_delay_q_net_x6: std_logic;
  signal sync_delay_q_net_x7: std_logic;
  signal sync_delay_q_net_x9: std_logic;

begin
  ce_1_sg_x190 <= ce_1;
  clk_1_sg_x190 <= clk_1;
  concat_y_net_x24 <= pol1;
  concat_y_net_x25 <= pol2;
  slice6_y_net_x7 <= shift;
  register0_q_net_x1 <= sync;
  of_x0 <= logical1_y_net_x7;
  out1 <= concat_y_net_x26;
  out2 <= concat_y_net_x27;
  sync_out <= sync_delay_q_net_x9;

  constant_x0: entity work.constant_963ed6358a
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op(0) => constant_op_net_x0
    );

  fft_stage_1_7a0acaf727: entity work.fft_stage_1_entity_7a0acaf727
    port map (
      ce_1 => ce_1_sg_x190,
      clk_1 => clk_1_sg_x190,
      in1 => concat_y_net_x24,
      in2 => concat_y_net_x25,
      of_in => constant_op_net_x0,
      shift => slice6_y_net_x7,
      sync => register0_q_net_x1,
      of_x0 => logical1_y_net_x1,
      out1 => concat_y_net_x7,
      out2 => concat_y_net_x9,
      sync_out => sync_delay_q_net_x2
    );

  fft_stage_2_3adc821d91: entity work.fft_stage_2_entity_3adc821d91
    port map (
      ce_1 => ce_1_sg_x190,
      clk_1 => clk_1_sg_x190,
      in1 => concat_y_net_x7,
      in2 => concat_y_net_x9,
      of_in => logical1_y_net_x1,
      shift => slice6_y_net_x7,
      sync => sync_delay_q_net_x2,
      of_x0 => logical1_y_net_x3,
      out1 => concat_y_net_x11,
      out2 => concat_y_net_x13,
      sync_out => sync_delay_q_net_x4
    );

  fft_stage_3_aa15e84fae: entity work.fft_stage_3_entity_aa15e84fae
    port map (
      ce_1 => ce_1_sg_x190,
      clk_1 => clk_1_sg_x190,
      in1 => concat_y_net_x11,
      in2 => concat_y_net_x13,
      of_in => logical1_y_net_x3,
      shift => slice6_y_net_x7,
      sync => sync_delay_q_net_x4,
      of_x0 => logical1_y_net_x2,
      out1 => concat_y_net_x5,
      out2 => concat_y_net_x16,
      sync_out => sync_delay_q_net_x6
    );

  fft_stage_4_f91b655483: entity work.fft_stage_4_entity_f91b655483
    port map (
      ce_1 => ce_1_sg_x190,
      clk_1 => clk_1_sg_x190,
      in1 => concat_y_net_x5,
      in2 => concat_y_net_x16,
      of_in => logical1_y_net_x2,
      shift => slice6_y_net_x7,
      sync => sync_delay_q_net_x6,
      of_x0 => logical1_y_net_x4,
      out1 => concat_y_net_x8,
      out2 => concat_y_net_x17,
      sync_out => sync_delay_q_net_x3
    );

  fft_stage_5_f0b8f37405: entity work.fft_stage_5_entity_f0b8f37405
    port map (
      ce_1 => ce_1_sg_x190,
      clk_1 => clk_1_sg_x190,
      in1 => concat_y_net_x8,
      in2 => concat_y_net_x17,
      of_in => logical1_y_net_x4,
      shift => slice6_y_net_x7,
      sync => sync_delay_q_net_x3,
      of_x0 => logical1_y_net_x5,
      out1 => concat_y_net_x12,
      out2 => concat_y_net_x18,
      sync_out => sync_delay_q_net_x5
    );

  fft_stage_6_7e75795901: entity work.fft_stage_6_entity_7e75795901
    port map (
      ce_1 => ce_1_sg_x190,
      clk_1 => clk_1_sg_x190,
      in1 => concat_y_net_x12,
      in2 => concat_y_net_x18,
      of_in => logical1_y_net_x5,
      shift => slice6_y_net_x7,
      sync => sync_delay_q_net_x5,
      of_x0 => logical1_y_net_x6,
      out1 => concat_y_net_x19,
      out2 => concat_y_net_x20,
      sync_out => sync_delay_q_net_x7
    );

  fft_stage_7_5823de238c: entity work.fft_stage_7_entity_5823de238c
    port map (
      ce_1 => ce_1_sg_x190,
      clk_1 => clk_1_sg_x190,
      in1 => concat_y_net_x19,
      in2 => concat_y_net_x20,
      of_in => logical1_y_net_x6,
      shift => slice6_y_net_x7,
      sync => sync_delay_q_net_x7,
      of_x0 => logical1_y_net_x7,
      out1 => concat_y_net_x26,
      out2 => concat_y_net_x27,
      sync_out => sync_delay_q_net_x9
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/coarse/fft_wideband_real0/fft_biplex_real_4x0"

entity fft_biplex_real_4x0_entity_d1b89c22a9 is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    pol1: in std_logic_vector(17 downto 0); 
    pol2: in std_logic_vector(17 downto 0); 
    pol3: in std_logic_vector(17 downto 0); 
    pol4: in std_logic_vector(17 downto 0); 
    shift: in std_logic_vector(9 downto 0); 
    sync: in std_logic; 
    of_x0: out std_logic; 
    pol1_out: out std_logic_vector(35 downto 0); 
    pol2_out: out std_logic_vector(35 downto 0); 
    pol3_out: out std_logic_vector(35 downto 0); 
    pol4_out: out std_logic_vector(35 downto 0); 
    sync_out: out std_logic
  );
end fft_biplex_real_4x0_entity_d1b89c22a9;

architecture structural of fft_biplex_real_4x0_entity_d1b89c22a9 is
  signal ce_1_sg_x191: std_logic;
  signal clk_1_sg_x191: std_logic;
  signal concat_y_net_x25: std_logic_vector(35 downto 0);
  signal concat_y_net_x26: std_logic_vector(35 downto 0);
  signal concat_y_net_x27: std_logic_vector(35 downto 0);
  signal concat_y_net_x28: std_logic_vector(35 downto 0);
  signal delay2_q_net_x3: std_logic;
  signal logical1_y_net_x8: std_logic;
  signal mux1_y_net_x4: std_logic_vector(35 downto 0);
  signal mux2_y_net_x4: std_logic_vector(35 downto 0);
  signal mux3_y_net_x4: std_logic_vector(35 downto 0);
  signal mux_y_net_x4: std_logic_vector(35 downto 0);
  signal register0_q_net_x10: std_logic;
  signal register0_q_net_x6: std_logic_vector(17 downto 0);
  signal register0_q_net_x7: std_logic_vector(17 downto 0);
  signal register0_q_net_x8: std_logic_vector(17 downto 0);
  signal register0_q_net_x9: std_logic_vector(17 downto 0);
  signal slice6_y_net_x8: std_logic_vector(9 downto 0);
  signal sync_delay_q_net_x9: std_logic;

begin
  ce_1_sg_x191 <= ce_1;
  clk_1_sg_x191 <= clk_1;
  register0_q_net_x6 <= pol1;
  register0_q_net_x7 <= pol2;
  register0_q_net_x8 <= pol3;
  register0_q_net_x9 <= pol4;
  slice6_y_net_x8 <= shift;
  register0_q_net_x10 <= sync;
  of_x0 <= logical1_y_net_x8;
  pol1_out <= mux_y_net_x4;
  pol2_out <= mux1_y_net_x4;
  pol3_out <= mux2_y_net_x4;
  pol4_out <= mux3_y_net_x4;
  sync_out <= delay2_q_net_x3;

  bi_real_unscr_4x_3b8b394f08: entity work.bi_real_unscr_4x_entity_3b8b394f08
    port map (
      ce_1 => ce_1_sg_x191,
      clk_1 => clk_1_sg_x191,
      even => concat_y_net_x26,
      odd => concat_y_net_x27,
      sync => sync_delay_q_net_x9,
      pol1_out => mux_y_net_x4,
      pol2_out => mux1_y_net_x4,
      pol3_out => mux2_y_net_x4,
      pol4_out => mux3_y_net_x4,
      sync_out => delay2_q_net_x3
    );

  biplex_core_ce6e11ad41: entity work.biplex_core_entity_ce6e11ad41
    port map (
      ce_1 => ce_1_sg_x191,
      clk_1 => clk_1_sg_x191,
      pol1 => concat_y_net_x25,
      pol2 => concat_y_net_x28,
      shift => slice6_y_net_x8,
      sync => register0_q_net_x10,
      of_x0 => logical1_y_net_x8,
      out1 => concat_y_net_x26,
      out2 => concat_y_net_x27,
      sync_out => sync_delay_q_net_x9
    );

  ri_to_c0_d1f129f2ff: entity work.ri_to_c0_entity_724b130d6e
    port map (
      im => register0_q_net_x7,
      re => register0_q_net_x6,
      c => concat_y_net_x25
    );

  ri_to_c1_a503a6c376: entity work.ri_to_c0_entity_724b130d6e
    port map (
      im => register0_q_net_x9,
      re => register0_q_net_x8,
      c => concat_y_net_x28
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/coarse/fft_wideband_real0/fft_direct/butterfly1_0/twiddle_general_4mult/coeff_gen"

entity coeff_gen_entity_d5f3ccee33 is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    rst: in std_logic; 
    w: out std_logic_vector(35 downto 0)
  );
end coeff_gen_entity_d5f3ccee33;

architecture structural of coeff_gen_entity_d5f3ccee33 is
  signal ce_1_sg_x202: std_logic;
  signal clk_1_sg_x202: std_logic;
  signal concat_y_net_x2: std_logic_vector(35 downto 0);
  signal counter_op_net: std_logic_vector(6 downto 0);
  signal register0_q_net_x1: std_logic;
  signal rom1_data_net_x0: std_logic_vector(17 downto 0);
  signal rom_data_net_x0: std_logic_vector(17 downto 0);
  signal slice_y_net: std_logic_vector(6 downto 0);

begin
  ce_1_sg_x202 <= ce_1;
  clk_1_sg_x202 <= clk_1;
  register0_q_net_x1 <= rst;
  w <= concat_y_net_x2;

  counter: entity work.xlcounter_free_c09f12_01
    generic map (
      core_name0 => "cntr_11_0_aeada998ec385fcd",
      op_arith => xlUnsigned,
      op_width => 7
    )
    port map (
      ce => ce_1_sg_x202,
      clk => clk_1_sg_x202,
      clr => '0',
      en => "1",
      rst(0) => register0_q_net_x1,
      op => counter_op_net
    );

  ri_to_c_2ec330cf48: entity work.ri_to_c_entity_2abbfa7cd7
    port map (
      im => rom1_data_net_x0,
      re => rom_data_net_x0,
      c => concat_y_net_x2
    );

  rom: entity work.xlsprom_c09f12_01
    generic map (
      c_address_width => 7,
      c_width => 18,
      core_name0 => "bmg_72_76e1be4e7480a75f",
      latency => 2
    )
    port map (
      addr => slice_y_net,
      ce => ce_1_sg_x202,
      clk => clk_1_sg_x202,
      en => "1",
      rst => "0",
      data => rom_data_net_x0
    );

  rom1: entity work.xlsprom_c09f12_01
    generic map (
      c_address_width => 7,
      c_width => 18,
      core_name0 => "bmg_72_f55ad1fbb330c587",
      latency => 2
    )
    port map (
      addr => slice_y_net,
      ce => ce_1_sg_x202,
      clk => clk_1_sg_x202,
      en => "1",
      rst => "0",
      data => rom1_data_net_x0
    );

  slice: entity work.xlslice
    generic map (
      new_lsb => 0,
      new_msb => 6,
      x_width => 7,
      y_width => 7
    )
    port map (
      x => counter_op_net,
      y => slice_y_net
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/coarse/fft_wideband_real0/fft_direct/butterfly1_0/twiddle_general_4mult"

entity twiddle_general_4mult_entity_d3f87a3d85 is
  port (
    a: in std_logic_vector(35 downto 0); 
    b: in std_logic_vector(35 downto 0); 
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    sync: in std_logic; 
    a_im: out std_logic_vector(17 downto 0); 
    a_re: out std_logic_vector(17 downto 0); 
    bw_im: out std_logic_vector(21 downto 0); 
    bw_re: out std_logic_vector(21 downto 0); 
    sync_out: out std_logic
  );
end twiddle_general_4mult_entity_d3f87a3d85;

architecture structural of twiddle_general_4mult_entity_d3f87a3d85 is
  signal addsub1_s_net: std_logic_vector(36 downto 0);
  signal addsub_s_net: std_logic_vector(36 downto 0);
  signal ce_1_sg_x203: std_logic;
  signal clk_1_sg_x203: std_logic;
  signal concat_y_net_x2: std_logic_vector(35 downto 0);
  signal convert0_dout_net_x2: std_logic_vector(21 downto 0);
  signal convert1_dout_net_x2: std_logic_vector(21 downto 0);
  signal delay0_q_net_x0: std_logic_vector(35 downto 0);
  signal delay1_q_net_x0: std_logic_vector(35 downto 0);
  signal delay2_q_net_x0: std_logic;
  signal force_im_output_port_net_x0: std_logic_vector(17 downto 0);
  signal force_im_output_port_net_x1: std_logic_vector(17 downto 0);
  signal force_im_output_port_net_x3: std_logic_vector(17 downto 0);
  signal force_re_output_port_net_x0: std_logic_vector(17 downto 0);
  signal force_re_output_port_net_x1: std_logic_vector(17 downto 0);
  signal force_re_output_port_net_x3: std_logic_vector(17 downto 0);
  signal mult1_p_net: std_logic_vector(35 downto 0);
  signal mult2_p_net: std_logic_vector(35 downto 0);
  signal mult3_p_net: std_logic_vector(35 downto 0);
  signal mult_p_net: std_logic_vector(35 downto 0);
  signal node0_0_q_net_x0: std_logic_vector(35 downto 0);
  signal node0_2_q_net_x0: std_logic_vector(35 downto 0);
  signal register0_q_net_x2: std_logic;

begin
  node0_0_q_net_x0 <= a;
  node0_2_q_net_x0 <= b;
  ce_1_sg_x203 <= ce_1;
  clk_1_sg_x203 <= clk_1;
  register0_q_net_x2 <= sync;
  a_im <= force_im_output_port_net_x3;
  a_re <= force_re_output_port_net_x3;
  bw_im <= convert1_dout_net_x2;
  bw_re <= convert0_dout_net_x2;
  sync_out <= delay2_q_net_x0;

  addsub: entity work.addsub_be8c56327e
    port map (
      a => mult_p_net,
      b => mult2_p_net,
      ce => ce_1_sg_x203,
      clk => clk_1_sg_x203,
      clr => '0',
      s => addsub_s_net
    );

  addsub1: entity work.addsub_eb2273ac28
    port map (
      a => mult1_p_net,
      b => mult3_p_net,
      ce => ce_1_sg_x203,
      clk => clk_1_sg_x203,
      clr => '0',
      s => addsub1_s_net
    );

  c_to_ri1_d1047f47f2: entity work.c_to_ri0_entity_ac3e6eb705
    port map (
      c => delay0_q_net_x0,
      im => force_im_output_port_net_x3,
      re => force_re_output_port_net_x3
    );

  c_to_ri2_1f391dc9ba: entity work.c_to_ri2_entity_e1b86f6b2f
    port map (
      c => concat_y_net_x2,
      im => force_im_output_port_net_x0,
      re => force_re_output_port_net_x0
    );

  c_to_ri3_1f3064b34c: entity work.c_to_ri0_entity_ac3e6eb705
    port map (
      c => delay1_q_net_x0,
      im => force_im_output_port_net_x1,
      re => force_re_output_port_net_x1
    );

  coeff_gen_d5f3ccee33: entity work.coeff_gen_entity_d5f3ccee33
    port map (
      ce_1 => ce_1_sg_x203,
      clk_1 => clk_1_sg_x203,
      rst => register0_q_net_x2,
      w => concat_y_net_x2
    );

  convert0: entity work.xlconvert_pipeline
    generic map (
      bool_conversion => 0,
      din_arith => 2,
      din_bin_pt => 33,
      din_width => 37,
      dout_arith => 2,
      dout_bin_pt => 19,
      dout_width => 22,
      latency => 2,
      overflow => xlWrap,
      quantization => xlRoundBanker
    )
    port map (
      ce => ce_1_sg_x203,
      clk => clk_1_sg_x203,
      clr => '0',
      din => addsub_s_net,
      en => "1",
      dout => convert0_dout_net_x2
    );

  convert1: entity work.xlconvert_pipeline
    generic map (
      bool_conversion => 0,
      din_arith => 2,
      din_bin_pt => 33,
      din_width => 37,
      dout_arith => 2,
      dout_bin_pt => 19,
      dout_width => 22,
      latency => 2,
      overflow => xlWrap,
      quantization => xlRoundBanker
    )
    port map (
      ce => ce_1_sg_x203,
      clk => clk_1_sg_x203,
      clr => '0',
      din => addsub1_s_net,
      en => "1",
      dout => convert1_dout_net_x2
    );

  delay0: entity work.xldelay
    generic map (
      latency => 10,
      reg_retiming => 0,
      reset => 0,
      width => 36
    )
    port map (
      ce => ce_1_sg_x203,
      clk => clk_1_sg_x203,
      d => node0_0_q_net_x0,
      en => '1',
      rst => '1',
      q => delay0_q_net_x0
    );

  delay1: entity work.delay_4b00a70dea
    port map (
      ce => ce_1_sg_x203,
      clk => clk_1_sg_x203,
      clr => '0',
      d => node0_2_q_net_x0,
      q => delay1_q_net_x0
    );

  delay2: entity work.xldelay
    generic map (
      latency => 10,
      reg_retiming => 0,
      reset => 0,
      width => 1
    )
    port map (
      ce => ce_1_sg_x203,
      clk => clk_1_sg_x203,
      d(0) => register0_q_net_x2,
      en => '1',
      rst => '1',
      q(0) => delay2_q_net_x0
    );

  mult: entity work.mult_cfc8c45902
    port map (
      a => force_re_output_port_net_x1,
      b => force_re_output_port_net_x0,
      ce => ce_1_sg_x203,
      clk => clk_1_sg_x203,
      clr => '0',
      p => mult_p_net
    );

  mult1: entity work.mult_cfc8c45902
    port map (
      a => force_im_output_port_net_x1,
      b => force_re_output_port_net_x0,
      ce => ce_1_sg_x203,
      clk => clk_1_sg_x203,
      clr => '0',
      p => mult1_p_net
    );

  mult2: entity work.mult_cfc8c45902
    port map (
      a => force_im_output_port_net_x1,
      b => force_im_output_port_net_x0,
      ce => ce_1_sg_x203,
      clk => clk_1_sg_x203,
      clr => '0',
      p => mult2_p_net
    );

  mult3: entity work.mult_cfc8c45902
    port map (
      a => force_re_output_port_net_x1,
      b => force_im_output_port_net_x0,
      ce => ce_1_sg_x203,
      clk => clk_1_sg_x203,
      clr => '0',
      p => mult3_p_net
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/coarse/fft_wideband_real0/fft_direct/butterfly1_0"

entity butterfly1_0_entity_2b561cf47f is
  port (
    a: in std_logic_vector(35 downto 0); 
    b: in std_logic_vector(35 downto 0); 
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    shift: in std_logic; 
    sync: in std_logic; 
    a_bw: out std_logic_vector(35 downto 0); 
    a_bw_x0: out std_logic_vector(35 downto 0); 
    of_x0: out std_logic; 
    sync_out: out std_logic
  );
end butterfly1_0_entity_2b561cf47f;

architecture structural of butterfly1_0_entity_2b561cf47f is
  signal adder_s_net_x3: std_logic_vector(17 downto 0);
  signal adder_s_net_x4: std_logic_vector(17 downto 0);
  signal adder_s_net_x5: std_logic_vector(17 downto 0);
  signal adder_s_net_x6: std_logic_vector(17 downto 0);
  signal and_y_net_x0: std_logic;
  signal and_y_net_x1: std_logic;
  signal and_y_net_x2: std_logic;
  signal and_y_net_x3: std_logic;
  signal cast_c_im_dout_net_x0: std_logic_vector(22 downto 0);
  signal cast_c_im_dout_net_x1: std_logic_vector(22 downto 0);
  signal cast_c_re_dout_net_x0: std_logic_vector(22 downto 0);
  signal cast_c_re_dout_net_x1: std_logic_vector(22 downto 0);
  signal ce_1_sg_x204: std_logic;
  signal clk_1_sg_x204: std_logic;
  signal concat_y_net_x2: std_logic_vector(35 downto 0);
  signal concat_y_net_x3: std_logic_vector(35 downto 0);
  signal convert0_dout_net_x2: std_logic_vector(21 downto 0);
  signal convert1_dout_net_x2: std_logic_vector(21 downto 0);
  signal delay2_q_net_x0: std_logic;
  signal force_im_output_port_net_x3: std_logic_vector(17 downto 0);
  signal force_re_output_port_net_x3: std_logic_vector(17 downto 0);
  signal logical_y_net_x0: std_logic;
  signal mux0_y_net_x1: std_logic_vector(23 downto 0);
  signal mux1_y_net_x1: std_logic_vector(23 downto 0);
  signal mux2_y_net_x1: std_logic_vector(23 downto 0);
  signal mux3_y_net_x1: std_logic_vector(23 downto 0);
  signal node0_0_q_net_x1: std_logic_vector(35 downto 0);
  signal node0_2_q_net_x1: std_logic_vector(35 downto 0);
  signal register0_q_net_x3: std_logic;
  signal scale0_op_net: std_logic_vector(22 downto 0);
  signal scale1_op_net: std_logic_vector(22 downto 0);
  signal scale2_op_net: std_logic_vector(22 downto 0);
  signal scale3_op_net: std_logic_vector(22 downto 0);
  signal shift_delay_q_net: std_logic;
  signal slice0_y_net_x0: std_logic;
  signal sync_delay_q_net_x0: std_logic;

begin
  node0_0_q_net_x1 <= a;
  node0_2_q_net_x1 <= b;
  ce_1_sg_x204 <= ce_1;
  clk_1_sg_x204 <= clk_1;
  slice0_y_net_x0 <= shift;
  register0_q_net_x3 <= sync;
  a_bw <= concat_y_net_x2;
  a_bw_x0 <= concat_y_net_x3;
  of_x0 <= logical_y_net_x0;
  sync_out <= sync_delay_q_net_x0;

  cadd_ec1b3ac481: entity work.cadd_entity_bd220e7516
    port map (
      a_im => force_im_output_port_net_x3,
      a_re => force_re_output_port_net_x3,
      b_im => convert1_dout_net_x2,
      b_re => convert0_dout_net_x2,
      ce_1 => ce_1_sg_x204,
      clk_1 => clk_1_sg_x204,
      c_im => cast_c_im_dout_net_x0,
      c_re => cast_c_re_dout_net_x0
    );

  convert_of0_9dcbf9a678: entity work.convert_of0_entity_6501bdd0bd
    port map (
      ce_1 => ce_1_sg_x204,
      clk_1 => clk_1_sg_x204,
      din => mux0_y_net_x1,
      dout => adder_s_net_x3,
      of_x0 => and_y_net_x0
    );

  convert_of1_bb2d1a4068: entity work.convert_of0_entity_6501bdd0bd
    port map (
      ce_1 => ce_1_sg_x204,
      clk_1 => clk_1_sg_x204,
      din => mux1_y_net_x1,
      dout => adder_s_net_x4,
      of_x0 => and_y_net_x1
    );

  convert_of2_5607fed1f3: entity work.convert_of0_entity_6501bdd0bd
    port map (
      ce_1 => ce_1_sg_x204,
      clk_1 => clk_1_sg_x204,
      din => mux2_y_net_x1,
      dout => adder_s_net_x5,
      of_x0 => and_y_net_x2
    );

  convert_of3_e62c0149b0: entity work.convert_of0_entity_6501bdd0bd
    port map (
      ce_1 => ce_1_sg_x204,
      clk_1 => clk_1_sg_x204,
      din => mux3_y_net_x1,
      dout => adder_s_net_x6,
      of_x0 => and_y_net_x3
    );

  csub_4fc2bae275: entity work.csub_entity_394eae4754
    port map (
      a_im => force_im_output_port_net_x3,
      a_re => force_re_output_port_net_x3,
      b_im => convert1_dout_net_x2,
      b_re => convert0_dout_net_x2,
      ce_1 => ce_1_sg_x204,
      clk_1 => clk_1_sg_x204,
      c_im => cast_c_im_dout_net_x1,
      c_re => cast_c_re_dout_net_x1
    );

  logical: entity work.logical_a6d07705dd
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0(0) => and_y_net_x0,
      d1(0) => and_y_net_x1,
      d2(0) => and_y_net_x2,
      d3(0) => and_y_net_x3,
      y(0) => logical_y_net_x0
    );

  mux0: entity work.mux_f1f44b96f0
    port map (
      ce => ce_1_sg_x204,
      clk => clk_1_sg_x204,
      clr => '0',
      d0 => cast_c_re_dout_net_x0,
      d1 => scale0_op_net,
      sel(0) => shift_delay_q_net,
      y => mux0_y_net_x1
    );

  mux1: entity work.mux_f1f44b96f0
    port map (
      ce => ce_1_sg_x204,
      clk => clk_1_sg_x204,
      clr => '0',
      d0 => cast_c_im_dout_net_x0,
      d1 => scale1_op_net,
      sel(0) => shift_delay_q_net,
      y => mux1_y_net_x1
    );

  mux2: entity work.mux_f1f44b96f0
    port map (
      ce => ce_1_sg_x204,
      clk => clk_1_sg_x204,
      clr => '0',
      d0 => cast_c_re_dout_net_x1,
      d1 => scale2_op_net,
      sel(0) => shift_delay_q_net,
      y => mux2_y_net_x1
    );

  mux3: entity work.mux_f1f44b96f0
    port map (
      ce => ce_1_sg_x204,
      clk => clk_1_sg_x204,
      clr => '0',
      d0 => cast_c_im_dout_net_x1,
      d1 => scale3_op_net,
      sel(0) => shift_delay_q_net,
      y => mux3_y_net_x1
    );

  ri_to_c01_28b5f912d1: entity work.ri_to_c0_entity_724b130d6e
    port map (
      im => adder_s_net_x4,
      re => adder_s_net_x3,
      c => concat_y_net_x2
    );

  ri_to_c23_6b345371fb: entity work.ri_to_c0_entity_724b130d6e
    port map (
      im => adder_s_net_x6,
      re => adder_s_net_x5,
      c => concat_y_net_x3
    );

  scale0: entity work.scale_e5d0b4a1ec
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      ip => cast_c_re_dout_net_x0,
      op => scale0_op_net
    );

  scale1: entity work.scale_e5d0b4a1ec
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      ip => cast_c_im_dout_net_x0,
      op => scale1_op_net
    );

  scale2: entity work.scale_e5d0b4a1ec
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      ip => cast_c_re_dout_net_x1,
      op => scale2_op_net
    );

  scale3: entity work.scale_e5d0b4a1ec
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      ip => cast_c_im_dout_net_x1,
      op => scale3_op_net
    );

  shift_delay: entity work.xldelay
    generic map (
      latency => 2,
      reg_retiming => 0,
      reset => 0,
      width => 1
    )
    port map (
      ce => ce_1_sg_x204,
      clk => clk_1_sg_x204,
      d(0) => slice0_y_net_x0,
      en => '1',
      rst => '1',
      q(0) => shift_delay_q_net
    );

  sync_delay: entity work.delay_aab7b18c27
    port map (
      ce => ce_1_sg_x204,
      clk => clk_1_sg_x204,
      clr => '0',
      d(0) => delay2_q_net_x0,
      q(0) => sync_delay_q_net_x0
    );

  twiddle_general_4mult_d3f87a3d85: entity work.twiddle_general_4mult_entity_d3f87a3d85
    port map (
      a => node0_0_q_net_x1,
      b => node0_2_q_net_x1,
      ce_1 => ce_1_sg_x204,
      clk_1 => clk_1_sg_x204,
      sync => register0_q_net_x3,
      a_im => force_im_output_port_net_x3,
      a_re => force_re_output_port_net_x3,
      bw_im => convert1_dout_net_x2,
      bw_re => convert0_dout_net_x2,
      sync_out => delay2_q_net_x0
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/coarse/fft_wideband_real0/fft_direct/butterfly2_0/convert_of2"

entity convert_of2_entity_8d054482eb is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    din: in std_logic_vector(23 downto 0); 
    of_x0: out std_logic
  );
end convert_of2_entity_8d054482eb;

architecture structural of convert_of2_entity_8d054482eb is
  signal all_0s_y_net: std_logic;
  signal all_1s_y_net: std_logic;
  signal and_y_net_x0: std_logic;
  signal ce_1_sg_x223: std_logic;
  signal clk_1_sg_x223: std_logic;
  signal invert1_op_net: std_logic;
  signal invert2_op_net: std_logic;
  signal invert3_op_net: std_logic;
  signal invert4_op_net: std_logic;
  signal mux2_y_net_x0: std_logic_vector(23 downto 0);
  signal slice1_y_net: std_logic;
  signal slice2_y_net: std_logic;
  signal slice3_y_net: std_logic;
  signal slice4_y_net: std_logic;

begin
  ce_1_sg_x223 <= ce_1;
  clk_1_sg_x223 <= clk_1;
  mux2_y_net_x0 <= din;
  of_x0 <= and_y_net_x0;

  all_0s: entity work.logical_f5b5b4645f
    port map (
      ce => ce_1_sg_x223,
      clk => clk_1_sg_x223,
      clr => '0',
      d0(0) => invert1_op_net,
      d1(0) => invert2_op_net,
      d2(0) => invert3_op_net,
      d3(0) => invert4_op_net,
      y(0) => all_0s_y_net
    );

  all_1s: entity work.logical_f5b5b4645f
    port map (
      ce => ce_1_sg_x223,
      clk => clk_1_sg_x223,
      clr => '0',
      d0(0) => slice1_y_net,
      d1(0) => slice2_y_net,
      d2(0) => slice3_y_net,
      d3(0) => slice4_y_net,
      y(0) => all_1s_y_net
    );

  and_x0: entity work.logical_80f90b97d0
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0(0) => all_0s_y_net,
      d1(0) => all_1s_y_net,
      y(0) => and_y_net_x0
    );

  invert1: entity work.inverter_e5b38cca3b
    port map (
      ce => ce_1_sg_x223,
      clk => clk_1_sg_x223,
      clr => '0',
      ip(0) => slice1_y_net,
      op(0) => invert1_op_net
    );

  invert2: entity work.inverter_e5b38cca3b
    port map (
      ce => ce_1_sg_x223,
      clk => clk_1_sg_x223,
      clr => '0',
      ip(0) => slice2_y_net,
      op(0) => invert2_op_net
    );

  invert3: entity work.inverter_e5b38cca3b
    port map (
      ce => ce_1_sg_x223,
      clk => clk_1_sg_x223,
      clr => '0',
      ip(0) => slice3_y_net,
      op(0) => invert3_op_net
    );

  invert4: entity work.inverter_e5b38cca3b
    port map (
      ce => ce_1_sg_x223,
      clk => clk_1_sg_x223,
      clr => '0',
      ip(0) => slice4_y_net,
      op(0) => invert4_op_net
    );

  slice1: entity work.xlslice
    generic map (
      new_lsb => 23,
      new_msb => 23,
      x_width => 24,
      y_width => 1
    )
    port map (
      x => mux2_y_net_x0,
      y(0) => slice1_y_net
    );

  slice2: entity work.xlslice
    generic map (
      new_lsb => 22,
      new_msb => 22,
      x_width => 24,
      y_width => 1
    )
    port map (
      x => mux2_y_net_x0,
      y(0) => slice2_y_net
    );

  slice3: entity work.xlslice
    generic map (
      new_lsb => 21,
      new_msb => 21,
      x_width => 24,
      y_width => 1
    )
    port map (
      x => mux2_y_net_x0,
      y(0) => slice3_y_net
    );

  slice4: entity work.xlslice
    generic map (
      new_lsb => 20,
      new_msb => 20,
      x_width => 24,
      y_width => 1
    )
    port map (
      x => mux2_y_net_x0,
      y(0) => slice4_y_net
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/coarse/fft_wideband_real0/fft_direct/butterfly2_0/twiddle_general_4mult/coeff_gen"

entity coeff_gen_entity_a6d75bcd87 is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    rst: in std_logic; 
    w: out std_logic_vector(35 downto 0)
  );
end coeff_gen_entity_a6d75bcd87;

architecture structural of coeff_gen_entity_a6d75bcd87 is
  signal ce_1_sg_x226: std_logic;
  signal clk_1_sg_x226: std_logic;
  signal concat_y_net_x2: std_logic_vector(35 downto 0);
  signal counter_op_net: std_logic_vector(6 downto 0);
  signal rom1_data_net_x0: std_logic_vector(17 downto 0);
  signal rom_data_net_x0: std_logic_vector(17 downto 0);
  signal slice_y_net: std_logic_vector(6 downto 0);
  signal sync_delay_q_net_x1: std_logic;

begin
  ce_1_sg_x226 <= ce_1;
  clk_1_sg_x226 <= clk_1;
  sync_delay_q_net_x1 <= rst;
  w <= concat_y_net_x2;

  counter: entity work.xlcounter_free_c09f12_01
    generic map (
      core_name0 => "cntr_11_0_aeada998ec385fcd",
      op_arith => xlUnsigned,
      op_width => 7
    )
    port map (
      ce => ce_1_sg_x226,
      clk => clk_1_sg_x226,
      clr => '0',
      en => "1",
      rst(0) => sync_delay_q_net_x1,
      op => counter_op_net
    );

  ri_to_c_da97709734: entity work.ri_to_c_entity_2abbfa7cd7
    port map (
      im => rom1_data_net_x0,
      re => rom_data_net_x0,
      c => concat_y_net_x2
    );

  rom: entity work.xlsprom_c09f12_01
    generic map (
      c_address_width => 7,
      c_width => 18,
      core_name0 => "bmg_72_8ed993a9a42f84a8",
      latency => 2
    )
    port map (
      addr => slice_y_net,
      ce => ce_1_sg_x226,
      clk => clk_1_sg_x226,
      en => "1",
      rst => "0",
      data => rom_data_net_x0
    );

  rom1: entity work.xlsprom_c09f12_01
    generic map (
      c_address_width => 7,
      c_width => 18,
      core_name0 => "bmg_72_7884e23b5c653602",
      latency => 2
    )
    port map (
      addr => slice_y_net,
      ce => ce_1_sg_x226,
      clk => clk_1_sg_x226,
      en => "1",
      rst => "0",
      data => rom1_data_net_x0
    );

  slice: entity work.xlslice
    generic map (
      new_lsb => 0,
      new_msb => 6,
      x_width => 7,
      y_width => 7
    )
    port map (
      x => counter_op_net,
      y => slice_y_net
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/coarse/fft_wideband_real0/fft_direct/butterfly2_0/twiddle_general_4mult"

entity twiddle_general_4mult_entity_2915d7f7f4 is
  port (
    a: in std_logic_vector(35 downto 0); 
    b: in std_logic_vector(35 downto 0); 
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    sync: in std_logic; 
    a_im: out std_logic_vector(17 downto 0); 
    a_re: out std_logic_vector(17 downto 0); 
    bw_im: out std_logic_vector(21 downto 0); 
    bw_re: out std_logic_vector(21 downto 0); 
    sync_out: out std_logic
  );
end twiddle_general_4mult_entity_2915d7f7f4;

architecture structural of twiddle_general_4mult_entity_2915d7f7f4 is
  signal addsub1_s_net: std_logic_vector(36 downto 0);
  signal addsub_s_net: std_logic_vector(36 downto 0);
  signal ce_1_sg_x227: std_logic;
  signal clk_1_sg_x227: std_logic;
  signal concat_y_net_x2: std_logic_vector(35 downto 0);
  signal convert0_dout_net_x2: std_logic_vector(21 downto 0);
  signal convert1_dout_net_x2: std_logic_vector(21 downto 0);
  signal delay0_q_net_x0: std_logic_vector(35 downto 0);
  signal delay1_q_net_x0: std_logic_vector(35 downto 0);
  signal delay2_q_net_x0: std_logic;
  signal force_im_output_port_net_x0: std_logic_vector(17 downto 0);
  signal force_im_output_port_net_x1: std_logic_vector(17 downto 0);
  signal force_im_output_port_net_x3: std_logic_vector(17 downto 0);
  signal force_re_output_port_net_x0: std_logic_vector(17 downto 0);
  signal force_re_output_port_net_x1: std_logic_vector(17 downto 0);
  signal force_re_output_port_net_x3: std_logic_vector(17 downto 0);
  signal mult1_p_net: std_logic_vector(35 downto 0);
  signal mult2_p_net: std_logic_vector(35 downto 0);
  signal mult3_p_net: std_logic_vector(35 downto 0);
  signal mult_p_net: std_logic_vector(35 downto 0);
  signal node1_0_q_net_x0: std_logic_vector(35 downto 0);
  signal node1_1_q_net_x0: std_logic_vector(35 downto 0);
  signal sync_delay_q_net_x2: std_logic;

begin
  node1_0_q_net_x0 <= a;
  node1_1_q_net_x0 <= b;
  ce_1_sg_x227 <= ce_1;
  clk_1_sg_x227 <= clk_1;
  sync_delay_q_net_x2 <= sync;
  a_im <= force_im_output_port_net_x3;
  a_re <= force_re_output_port_net_x3;
  bw_im <= convert1_dout_net_x2;
  bw_re <= convert0_dout_net_x2;
  sync_out <= delay2_q_net_x0;

  addsub: entity work.addsub_be8c56327e
    port map (
      a => mult_p_net,
      b => mult2_p_net,
      ce => ce_1_sg_x227,
      clk => clk_1_sg_x227,
      clr => '0',
      s => addsub_s_net
    );

  addsub1: entity work.addsub_eb2273ac28
    port map (
      a => mult1_p_net,
      b => mult3_p_net,
      ce => ce_1_sg_x227,
      clk => clk_1_sg_x227,
      clr => '0',
      s => addsub1_s_net
    );

  c_to_ri1_b38f0e97c3: entity work.c_to_ri0_entity_ac3e6eb705
    port map (
      c => delay0_q_net_x0,
      im => force_im_output_port_net_x3,
      re => force_re_output_port_net_x3
    );

  c_to_ri2_189ef0e76d: entity work.c_to_ri2_entity_e1b86f6b2f
    port map (
      c => concat_y_net_x2,
      im => force_im_output_port_net_x0,
      re => force_re_output_port_net_x0
    );

  c_to_ri3_b28a4e444a: entity work.c_to_ri0_entity_ac3e6eb705
    port map (
      c => delay1_q_net_x0,
      im => force_im_output_port_net_x1,
      re => force_re_output_port_net_x1
    );

  coeff_gen_a6d75bcd87: entity work.coeff_gen_entity_a6d75bcd87
    port map (
      ce_1 => ce_1_sg_x227,
      clk_1 => clk_1_sg_x227,
      rst => sync_delay_q_net_x2,
      w => concat_y_net_x2
    );

  convert0: entity work.xlconvert_pipeline
    generic map (
      bool_conversion => 0,
      din_arith => 2,
      din_bin_pt => 33,
      din_width => 37,
      dout_arith => 2,
      dout_bin_pt => 19,
      dout_width => 22,
      latency => 2,
      overflow => xlWrap,
      quantization => xlRoundBanker
    )
    port map (
      ce => ce_1_sg_x227,
      clk => clk_1_sg_x227,
      clr => '0',
      din => addsub_s_net,
      en => "1",
      dout => convert0_dout_net_x2
    );

  convert1: entity work.xlconvert_pipeline
    generic map (
      bool_conversion => 0,
      din_arith => 2,
      din_bin_pt => 33,
      din_width => 37,
      dout_arith => 2,
      dout_bin_pt => 19,
      dout_width => 22,
      latency => 2,
      overflow => xlWrap,
      quantization => xlRoundBanker
    )
    port map (
      ce => ce_1_sg_x227,
      clk => clk_1_sg_x227,
      clr => '0',
      din => addsub1_s_net,
      en => "1",
      dout => convert1_dout_net_x2
    );

  delay0: entity work.xldelay
    generic map (
      latency => 10,
      reg_retiming => 0,
      reset => 0,
      width => 36
    )
    port map (
      ce => ce_1_sg_x227,
      clk => clk_1_sg_x227,
      d => node1_0_q_net_x0,
      en => '1',
      rst => '1',
      q => delay0_q_net_x0
    );

  delay1: entity work.delay_4b00a70dea
    port map (
      ce => ce_1_sg_x227,
      clk => clk_1_sg_x227,
      clr => '0',
      d => node1_1_q_net_x0,
      q => delay1_q_net_x0
    );

  delay2: entity work.xldelay
    generic map (
      latency => 10,
      reg_retiming => 0,
      reset => 0,
      width => 1
    )
    port map (
      ce => ce_1_sg_x227,
      clk => clk_1_sg_x227,
      d(0) => sync_delay_q_net_x2,
      en => '1',
      rst => '1',
      q(0) => delay2_q_net_x0
    );

  mult: entity work.mult_cfc8c45902
    port map (
      a => force_re_output_port_net_x1,
      b => force_re_output_port_net_x0,
      ce => ce_1_sg_x227,
      clk => clk_1_sg_x227,
      clr => '0',
      p => mult_p_net
    );

  mult1: entity work.mult_cfc8c45902
    port map (
      a => force_im_output_port_net_x1,
      b => force_re_output_port_net_x0,
      ce => ce_1_sg_x227,
      clk => clk_1_sg_x227,
      clr => '0',
      p => mult1_p_net
    );

  mult2: entity work.mult_cfc8c45902
    port map (
      a => force_im_output_port_net_x1,
      b => force_im_output_port_net_x0,
      ce => ce_1_sg_x227,
      clk => clk_1_sg_x227,
      clr => '0',
      p => mult2_p_net
    );

  mult3: entity work.mult_cfc8c45902
    port map (
      a => force_re_output_port_net_x1,
      b => force_im_output_port_net_x0,
      ce => ce_1_sg_x227,
      clk => clk_1_sg_x227,
      clr => '0',
      p => mult3_p_net
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/coarse/fft_wideband_real0/fft_direct/butterfly2_0"

entity butterfly2_0_entity_d3942396c3 is
  port (
    a: in std_logic_vector(35 downto 0); 
    b: in std_logic_vector(35 downto 0); 
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    shift: in std_logic; 
    sync: in std_logic; 
    a_bw: out std_logic_vector(35 downto 0); 
    of_x0: out std_logic; 
    sync_out: out std_logic
  );
end butterfly2_0_entity_d3942396c3;

architecture structural of butterfly2_0_entity_d3942396c3 is
  signal adder_s_net_x3: std_logic_vector(17 downto 0);
  signal adder_s_net_x4: std_logic_vector(17 downto 0);
  signal and_y_net_x0: std_logic;
  signal and_y_net_x1: std_logic;
  signal and_y_net_x2: std_logic;
  signal and_y_net_x3: std_logic;
  signal cast_c_im_dout_net_x0: std_logic_vector(22 downto 0);
  signal cast_c_im_dout_net_x1: std_logic_vector(22 downto 0);
  signal cast_c_re_dout_net_x0: std_logic_vector(22 downto 0);
  signal cast_c_re_dout_net_x1: std_logic_vector(22 downto 0);
  signal ce_1_sg_x228: std_logic;
  signal clk_1_sg_x228: std_logic;
  signal concat_y_net_x1: std_logic_vector(35 downto 0);
  signal convert0_dout_net_x2: std_logic_vector(21 downto 0);
  signal convert1_dout_net_x2: std_logic_vector(21 downto 0);
  signal delay2_q_net_x0: std_logic;
  signal force_im_output_port_net_x3: std_logic_vector(17 downto 0);
  signal force_re_output_port_net_x3: std_logic_vector(17 downto 0);
  signal logical_y_net_x0: std_logic;
  signal mux0_y_net_x1: std_logic_vector(23 downto 0);
  signal mux1_y_net_x1: std_logic_vector(23 downto 0);
  signal mux2_y_net_x0: std_logic_vector(23 downto 0);
  signal mux3_y_net_x0: std_logic_vector(23 downto 0);
  signal node1_0_q_net_x1: std_logic_vector(35 downto 0);
  signal node1_1_q_net_x1: std_logic_vector(35 downto 0);
  signal scale0_op_net: std_logic_vector(22 downto 0);
  signal scale1_op_net: std_logic_vector(22 downto 0);
  signal scale2_op_net: std_logic_vector(22 downto 0);
  signal scale3_op_net: std_logic_vector(22 downto 0);
  signal shift_delay_q_net: std_logic;
  signal slice1_y_net_x0: std_logic;
  signal sync_delay_q_net_x0: std_logic;
  signal sync_delay_q_net_x3: std_logic;

begin
  node1_0_q_net_x1 <= a;
  node1_1_q_net_x1 <= b;
  ce_1_sg_x228 <= ce_1;
  clk_1_sg_x228 <= clk_1;
  slice1_y_net_x0 <= shift;
  sync_delay_q_net_x3 <= sync;
  a_bw <= concat_y_net_x1;
  of_x0 <= logical_y_net_x0;
  sync_out <= sync_delay_q_net_x0;

  cadd_21c3fcefd3: entity work.cadd_entity_bd220e7516
    port map (
      a_im => force_im_output_port_net_x3,
      a_re => force_re_output_port_net_x3,
      b_im => convert1_dout_net_x2,
      b_re => convert0_dout_net_x2,
      ce_1 => ce_1_sg_x228,
      clk_1 => clk_1_sg_x228,
      c_im => cast_c_im_dout_net_x0,
      c_re => cast_c_re_dout_net_x0
    );

  convert_of0_305f6a8c50: entity work.convert_of0_entity_6501bdd0bd
    port map (
      ce_1 => ce_1_sg_x228,
      clk_1 => clk_1_sg_x228,
      din => mux0_y_net_x1,
      dout => adder_s_net_x3,
      of_x0 => and_y_net_x0
    );

  convert_of1_9c4e0d4c02: entity work.convert_of0_entity_6501bdd0bd
    port map (
      ce_1 => ce_1_sg_x228,
      clk_1 => clk_1_sg_x228,
      din => mux1_y_net_x1,
      dout => adder_s_net_x4,
      of_x0 => and_y_net_x1
    );

  convert_of2_8d054482eb: entity work.convert_of2_entity_8d054482eb
    port map (
      ce_1 => ce_1_sg_x228,
      clk_1 => clk_1_sg_x228,
      din => mux2_y_net_x0,
      of_x0 => and_y_net_x2
    );

  convert_of3_d0ab42ec28: entity work.convert_of2_entity_8d054482eb
    port map (
      ce_1 => ce_1_sg_x228,
      clk_1 => clk_1_sg_x228,
      din => mux3_y_net_x0,
      of_x0 => and_y_net_x3
    );

  csub_a30436b326: entity work.csub_entity_394eae4754
    port map (
      a_im => force_im_output_port_net_x3,
      a_re => force_re_output_port_net_x3,
      b_im => convert1_dout_net_x2,
      b_re => convert0_dout_net_x2,
      ce_1 => ce_1_sg_x228,
      clk_1 => clk_1_sg_x228,
      c_im => cast_c_im_dout_net_x1,
      c_re => cast_c_re_dout_net_x1
    );

  logical: entity work.logical_a6d07705dd
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0(0) => and_y_net_x0,
      d1(0) => and_y_net_x1,
      d2(0) => and_y_net_x2,
      d3(0) => and_y_net_x3,
      y(0) => logical_y_net_x0
    );

  mux0: entity work.mux_f1f44b96f0
    port map (
      ce => ce_1_sg_x228,
      clk => clk_1_sg_x228,
      clr => '0',
      d0 => cast_c_re_dout_net_x0,
      d1 => scale0_op_net,
      sel(0) => shift_delay_q_net,
      y => mux0_y_net_x1
    );

  mux1: entity work.mux_f1f44b96f0
    port map (
      ce => ce_1_sg_x228,
      clk => clk_1_sg_x228,
      clr => '0',
      d0 => cast_c_im_dout_net_x0,
      d1 => scale1_op_net,
      sel(0) => shift_delay_q_net,
      y => mux1_y_net_x1
    );

  mux2: entity work.mux_f1f44b96f0
    port map (
      ce => ce_1_sg_x228,
      clk => clk_1_sg_x228,
      clr => '0',
      d0 => cast_c_re_dout_net_x1,
      d1 => scale2_op_net,
      sel(0) => shift_delay_q_net,
      y => mux2_y_net_x0
    );

  mux3: entity work.mux_f1f44b96f0
    port map (
      ce => ce_1_sg_x228,
      clk => clk_1_sg_x228,
      clr => '0',
      d0 => cast_c_im_dout_net_x1,
      d1 => scale3_op_net,
      sel(0) => shift_delay_q_net,
      y => mux3_y_net_x0
    );

  ri_to_c01_e7017690be: entity work.ri_to_c0_entity_724b130d6e
    port map (
      im => adder_s_net_x4,
      re => adder_s_net_x3,
      c => concat_y_net_x1
    );

  scale0: entity work.scale_e5d0b4a1ec
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      ip => cast_c_re_dout_net_x0,
      op => scale0_op_net
    );

  scale1: entity work.scale_e5d0b4a1ec
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      ip => cast_c_im_dout_net_x0,
      op => scale1_op_net
    );

  scale2: entity work.scale_e5d0b4a1ec
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      ip => cast_c_re_dout_net_x1,
      op => scale2_op_net
    );

  scale3: entity work.scale_e5d0b4a1ec
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      ip => cast_c_im_dout_net_x1,
      op => scale3_op_net
    );

  shift_delay: entity work.xldelay
    generic map (
      latency => 2,
      reg_retiming => 0,
      reset => 0,
      width => 1
    )
    port map (
      ce => ce_1_sg_x228,
      clk => clk_1_sg_x228,
      d(0) => slice1_y_net_x0,
      en => '1',
      rst => '1',
      q(0) => shift_delay_q_net
    );

  sync_delay: entity work.delay_aab7b18c27
    port map (
      ce => ce_1_sg_x228,
      clk => clk_1_sg_x228,
      clr => '0',
      d(0) => delay2_q_net_x0,
      q(0) => sync_delay_q_net_x0
    );

  twiddle_general_4mult_2915d7f7f4: entity work.twiddle_general_4mult_entity_2915d7f7f4
    port map (
      a => node1_0_q_net_x1,
      b => node1_1_q_net_x1,
      ce_1 => ce_1_sg_x228,
      clk_1 => clk_1_sg_x228,
      sync => sync_delay_q_net_x3,
      a_im => force_im_output_port_net_x3,
      a_re => force_re_output_port_net_x3,
      bw_im => convert1_dout_net_x2,
      bw_re => convert0_dout_net_x2,
      sync_out => delay2_q_net_x0
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/coarse/fft_wideband_real0/fft_direct/butterfly2_1/twiddle_general_4mult/coeff_gen"

entity coeff_gen_entity_c23c8c532e is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    rst: in std_logic; 
    w: out std_logic_vector(35 downto 0)
  );
end coeff_gen_entity_c23c8c532e;

architecture structural of coeff_gen_entity_c23c8c532e is
  signal ce_1_sg_x237: std_logic;
  signal clk_1_sg_x237: std_logic;
  signal concat_y_net_x2: std_logic_vector(35 downto 0);
  signal counter_op_net: std_logic_vector(6 downto 0);
  signal rom1_data_net_x0: std_logic_vector(17 downto 0);
  signal rom_data_net_x0: std_logic_vector(17 downto 0);
  signal slice_y_net: std_logic_vector(6 downto 0);
  signal sync_delay_q_net_x1: std_logic;

begin
  ce_1_sg_x237 <= ce_1;
  clk_1_sg_x237 <= clk_1;
  sync_delay_q_net_x1 <= rst;
  w <= concat_y_net_x2;

  counter: entity work.xlcounter_free_c09f12_01
    generic map (
      core_name0 => "cntr_11_0_aeada998ec385fcd",
      op_arith => xlUnsigned,
      op_width => 7
    )
    port map (
      ce => ce_1_sg_x237,
      clk => clk_1_sg_x237,
      clr => '0',
      en => "1",
      rst(0) => sync_delay_q_net_x1,
      op => counter_op_net
    );

  ri_to_c_d37a4bcc0f: entity work.ri_to_c_entity_2abbfa7cd7
    port map (
      im => rom1_data_net_x0,
      re => rom_data_net_x0,
      c => concat_y_net_x2
    );

  rom: entity work.xlsprom_c09f12_01
    generic map (
      c_address_width => 7,
      c_width => 18,
      core_name0 => "bmg_72_7884e23b5c653602",
      latency => 2
    )
    port map (
      addr => slice_y_net,
      ce => ce_1_sg_x237,
      clk => clk_1_sg_x237,
      en => "1",
      rst => "0",
      data => rom_data_net_x0
    );

  rom1: entity work.xlsprom_c09f12_01
    generic map (
      c_address_width => 7,
      c_width => 18,
      core_name0 => "bmg_72_f27fe95e91d868c0",
      latency => 2
    )
    port map (
      addr => slice_y_net,
      ce => ce_1_sg_x237,
      clk => clk_1_sg_x237,
      en => "1",
      rst => "0",
      data => rom1_data_net_x0
    );

  slice: entity work.xlslice
    generic map (
      new_lsb => 0,
      new_msb => 6,
      x_width => 7,
      y_width => 7
    )
    port map (
      x => counter_op_net,
      y => slice_y_net
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/coarse/fft_wideband_real0/fft_direct/butterfly2_1/twiddle_general_4mult"

entity twiddle_general_4mult_entity_affa3848a0 is
  port (
    a: in std_logic_vector(35 downto 0); 
    b: in std_logic_vector(35 downto 0); 
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    sync: in std_logic; 
    a_im: out std_logic_vector(17 downto 0); 
    a_re: out std_logic_vector(17 downto 0); 
    bw_im: out std_logic_vector(21 downto 0); 
    bw_re: out std_logic_vector(21 downto 0)
  );
end twiddle_general_4mult_entity_affa3848a0;

architecture structural of twiddle_general_4mult_entity_affa3848a0 is
  signal addsub1_s_net: std_logic_vector(36 downto 0);
  signal addsub_s_net: std_logic_vector(36 downto 0);
  signal ce_1_sg_x238: std_logic;
  signal clk_1_sg_x238: std_logic;
  signal concat_y_net_x2: std_logic_vector(35 downto 0);
  signal convert0_dout_net_x2: std_logic_vector(21 downto 0);
  signal convert1_dout_net_x2: std_logic_vector(21 downto 0);
  signal delay0_q_net_x0: std_logic_vector(35 downto 0);
  signal delay1_q_net_x0: std_logic_vector(35 downto 0);
  signal force_im_output_port_net_x0: std_logic_vector(17 downto 0);
  signal force_im_output_port_net_x1: std_logic_vector(17 downto 0);
  signal force_im_output_port_net_x3: std_logic_vector(17 downto 0);
  signal force_re_output_port_net_x0: std_logic_vector(17 downto 0);
  signal force_re_output_port_net_x1: std_logic_vector(17 downto 0);
  signal force_re_output_port_net_x3: std_logic_vector(17 downto 0);
  signal mult1_p_net: std_logic_vector(35 downto 0);
  signal mult2_p_net: std_logic_vector(35 downto 0);
  signal mult3_p_net: std_logic_vector(35 downto 0);
  signal mult_p_net: std_logic_vector(35 downto 0);
  signal node1_2_q_net_x0: std_logic_vector(35 downto 0);
  signal node1_3_q_net_x0: std_logic_vector(35 downto 0);
  signal sync_delay_q_net_x2: std_logic;

begin
  node1_2_q_net_x0 <= a;
  node1_3_q_net_x0 <= b;
  ce_1_sg_x238 <= ce_1;
  clk_1_sg_x238 <= clk_1;
  sync_delay_q_net_x2 <= sync;
  a_im <= force_im_output_port_net_x3;
  a_re <= force_re_output_port_net_x3;
  bw_im <= convert1_dout_net_x2;
  bw_re <= convert0_dout_net_x2;

  addsub: entity work.addsub_be8c56327e
    port map (
      a => mult_p_net,
      b => mult2_p_net,
      ce => ce_1_sg_x238,
      clk => clk_1_sg_x238,
      clr => '0',
      s => addsub_s_net
    );

  addsub1: entity work.addsub_eb2273ac28
    port map (
      a => mult1_p_net,
      b => mult3_p_net,
      ce => ce_1_sg_x238,
      clk => clk_1_sg_x238,
      clr => '0',
      s => addsub1_s_net
    );

  c_to_ri1_68a1d4a33c: entity work.c_to_ri0_entity_ac3e6eb705
    port map (
      c => delay0_q_net_x0,
      im => force_im_output_port_net_x3,
      re => force_re_output_port_net_x3
    );

  c_to_ri2_3124f5a6dd: entity work.c_to_ri2_entity_e1b86f6b2f
    port map (
      c => concat_y_net_x2,
      im => force_im_output_port_net_x0,
      re => force_re_output_port_net_x0
    );

  c_to_ri3_b6972f6ecf: entity work.c_to_ri0_entity_ac3e6eb705
    port map (
      c => delay1_q_net_x0,
      im => force_im_output_port_net_x1,
      re => force_re_output_port_net_x1
    );

  coeff_gen_c23c8c532e: entity work.coeff_gen_entity_c23c8c532e
    port map (
      ce_1 => ce_1_sg_x238,
      clk_1 => clk_1_sg_x238,
      rst => sync_delay_q_net_x2,
      w => concat_y_net_x2
    );

  convert0: entity work.xlconvert_pipeline
    generic map (
      bool_conversion => 0,
      din_arith => 2,
      din_bin_pt => 33,
      din_width => 37,
      dout_arith => 2,
      dout_bin_pt => 19,
      dout_width => 22,
      latency => 2,
      overflow => xlWrap,
      quantization => xlRoundBanker
    )
    port map (
      ce => ce_1_sg_x238,
      clk => clk_1_sg_x238,
      clr => '0',
      din => addsub_s_net,
      en => "1",
      dout => convert0_dout_net_x2
    );

  convert1: entity work.xlconvert_pipeline
    generic map (
      bool_conversion => 0,
      din_arith => 2,
      din_bin_pt => 33,
      din_width => 37,
      dout_arith => 2,
      dout_bin_pt => 19,
      dout_width => 22,
      latency => 2,
      overflow => xlWrap,
      quantization => xlRoundBanker
    )
    port map (
      ce => ce_1_sg_x238,
      clk => clk_1_sg_x238,
      clr => '0',
      din => addsub1_s_net,
      en => "1",
      dout => convert1_dout_net_x2
    );

  delay0: entity work.xldelay
    generic map (
      latency => 10,
      reg_retiming => 0,
      reset => 0,
      width => 36
    )
    port map (
      ce => ce_1_sg_x238,
      clk => clk_1_sg_x238,
      d => node1_2_q_net_x0,
      en => '1',
      rst => '1',
      q => delay0_q_net_x0
    );

  delay1: entity work.delay_4b00a70dea
    port map (
      ce => ce_1_sg_x238,
      clk => clk_1_sg_x238,
      clr => '0',
      d => node1_3_q_net_x0,
      q => delay1_q_net_x0
    );

  mult: entity work.mult_cfc8c45902
    port map (
      a => force_re_output_port_net_x1,
      b => force_re_output_port_net_x0,
      ce => ce_1_sg_x238,
      clk => clk_1_sg_x238,
      clr => '0',
      p => mult_p_net
    );

  mult1: entity work.mult_cfc8c45902
    port map (
      a => force_im_output_port_net_x1,
      b => force_re_output_port_net_x0,
      ce => ce_1_sg_x238,
      clk => clk_1_sg_x238,
      clr => '0',
      p => mult1_p_net
    );

  mult2: entity work.mult_cfc8c45902
    port map (
      a => force_im_output_port_net_x1,
      b => force_im_output_port_net_x0,
      ce => ce_1_sg_x238,
      clk => clk_1_sg_x238,
      clr => '0',
      p => mult2_p_net
    );

  mult3: entity work.mult_cfc8c45902
    port map (
      a => force_re_output_port_net_x1,
      b => force_im_output_port_net_x0,
      ce => ce_1_sg_x238,
      clk => clk_1_sg_x238,
      clr => '0',
      p => mult3_p_net
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/coarse/fft_wideband_real0/fft_direct/butterfly2_1"

entity butterfly2_1_entity_5ca2c00a71 is
  port (
    a: in std_logic_vector(35 downto 0); 
    b: in std_logic_vector(35 downto 0); 
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    shift: in std_logic; 
    sync: in std_logic; 
    a_bw: out std_logic_vector(35 downto 0); 
    of_x0: out std_logic
  );
end butterfly2_1_entity_5ca2c00a71;

architecture structural of butterfly2_1_entity_5ca2c00a71 is
  signal adder_s_net_x3: std_logic_vector(17 downto 0);
  signal adder_s_net_x4: std_logic_vector(17 downto 0);
  signal and_y_net_x0: std_logic;
  signal and_y_net_x1: std_logic;
  signal and_y_net_x2: std_logic;
  signal and_y_net_x3: std_logic;
  signal cast_c_im_dout_net_x0: std_logic_vector(22 downto 0);
  signal cast_c_im_dout_net_x1: std_logic_vector(22 downto 0);
  signal cast_c_re_dout_net_x0: std_logic_vector(22 downto 0);
  signal cast_c_re_dout_net_x1: std_logic_vector(22 downto 0);
  signal ce_1_sg_x239: std_logic;
  signal clk_1_sg_x239: std_logic;
  signal concat_y_net_x1: std_logic_vector(35 downto 0);
  signal convert0_dout_net_x2: std_logic_vector(21 downto 0);
  signal convert1_dout_net_x2: std_logic_vector(21 downto 0);
  signal force_im_output_port_net_x3: std_logic_vector(17 downto 0);
  signal force_re_output_port_net_x3: std_logic_vector(17 downto 0);
  signal logical_y_net_x0: std_logic;
  signal mux0_y_net_x1: std_logic_vector(23 downto 0);
  signal mux1_y_net_x1: std_logic_vector(23 downto 0);
  signal mux2_y_net_x0: std_logic_vector(23 downto 0);
  signal mux3_y_net_x0: std_logic_vector(23 downto 0);
  signal node1_2_q_net_x1: std_logic_vector(35 downto 0);
  signal node1_3_q_net_x1: std_logic_vector(35 downto 0);
  signal scale0_op_net: std_logic_vector(22 downto 0);
  signal scale1_op_net: std_logic_vector(22 downto 0);
  signal scale2_op_net: std_logic_vector(22 downto 0);
  signal scale3_op_net: std_logic_vector(22 downto 0);
  signal shift_delay_q_net: std_logic;
  signal slice1_y_net_x1: std_logic;
  signal sync_delay_q_net_x3: std_logic;

begin
  node1_2_q_net_x1 <= a;
  node1_3_q_net_x1 <= b;
  ce_1_sg_x239 <= ce_1;
  clk_1_sg_x239 <= clk_1;
  slice1_y_net_x1 <= shift;
  sync_delay_q_net_x3 <= sync;
  a_bw <= concat_y_net_x1;
  of_x0 <= logical_y_net_x0;

  cadd_c736eeb5a7: entity work.cadd_entity_bd220e7516
    port map (
      a_im => force_im_output_port_net_x3,
      a_re => force_re_output_port_net_x3,
      b_im => convert1_dout_net_x2,
      b_re => convert0_dout_net_x2,
      ce_1 => ce_1_sg_x239,
      clk_1 => clk_1_sg_x239,
      c_im => cast_c_im_dout_net_x0,
      c_re => cast_c_re_dout_net_x0
    );

  convert_of0_9a3b709ef9: entity work.convert_of0_entity_6501bdd0bd
    port map (
      ce_1 => ce_1_sg_x239,
      clk_1 => clk_1_sg_x239,
      din => mux0_y_net_x1,
      dout => adder_s_net_x3,
      of_x0 => and_y_net_x0
    );

  convert_of1_9a450b6d70: entity work.convert_of0_entity_6501bdd0bd
    port map (
      ce_1 => ce_1_sg_x239,
      clk_1 => clk_1_sg_x239,
      din => mux1_y_net_x1,
      dout => adder_s_net_x4,
      of_x0 => and_y_net_x1
    );

  convert_of2_6a2db987bd: entity work.convert_of2_entity_8d054482eb
    port map (
      ce_1 => ce_1_sg_x239,
      clk_1 => clk_1_sg_x239,
      din => mux2_y_net_x0,
      of_x0 => and_y_net_x2
    );

  convert_of3_58355e838e: entity work.convert_of2_entity_8d054482eb
    port map (
      ce_1 => ce_1_sg_x239,
      clk_1 => clk_1_sg_x239,
      din => mux3_y_net_x0,
      of_x0 => and_y_net_x3
    );

  csub_82ad6e32e5: entity work.csub_entity_394eae4754
    port map (
      a_im => force_im_output_port_net_x3,
      a_re => force_re_output_port_net_x3,
      b_im => convert1_dout_net_x2,
      b_re => convert0_dout_net_x2,
      ce_1 => ce_1_sg_x239,
      clk_1 => clk_1_sg_x239,
      c_im => cast_c_im_dout_net_x1,
      c_re => cast_c_re_dout_net_x1
    );

  logical: entity work.logical_a6d07705dd
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0(0) => and_y_net_x0,
      d1(0) => and_y_net_x1,
      d2(0) => and_y_net_x2,
      d3(0) => and_y_net_x3,
      y(0) => logical_y_net_x0
    );

  mux0: entity work.mux_f1f44b96f0
    port map (
      ce => ce_1_sg_x239,
      clk => clk_1_sg_x239,
      clr => '0',
      d0 => cast_c_re_dout_net_x0,
      d1 => scale0_op_net,
      sel(0) => shift_delay_q_net,
      y => mux0_y_net_x1
    );

  mux1: entity work.mux_f1f44b96f0
    port map (
      ce => ce_1_sg_x239,
      clk => clk_1_sg_x239,
      clr => '0',
      d0 => cast_c_im_dout_net_x0,
      d1 => scale1_op_net,
      sel(0) => shift_delay_q_net,
      y => mux1_y_net_x1
    );

  mux2: entity work.mux_f1f44b96f0
    port map (
      ce => ce_1_sg_x239,
      clk => clk_1_sg_x239,
      clr => '0',
      d0 => cast_c_re_dout_net_x1,
      d1 => scale2_op_net,
      sel(0) => shift_delay_q_net,
      y => mux2_y_net_x0
    );

  mux3: entity work.mux_f1f44b96f0
    port map (
      ce => ce_1_sg_x239,
      clk => clk_1_sg_x239,
      clr => '0',
      d0 => cast_c_im_dout_net_x1,
      d1 => scale3_op_net,
      sel(0) => shift_delay_q_net,
      y => mux3_y_net_x0
    );

  ri_to_c01_5ce2eeb2a7: entity work.ri_to_c0_entity_724b130d6e
    port map (
      im => adder_s_net_x4,
      re => adder_s_net_x3,
      c => concat_y_net_x1
    );

  scale0: entity work.scale_e5d0b4a1ec
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      ip => cast_c_re_dout_net_x0,
      op => scale0_op_net
    );

  scale1: entity work.scale_e5d0b4a1ec
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      ip => cast_c_im_dout_net_x0,
      op => scale1_op_net
    );

  scale2: entity work.scale_e5d0b4a1ec
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      ip => cast_c_re_dout_net_x1,
      op => scale2_op_net
    );

  scale3: entity work.scale_e5d0b4a1ec
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      ip => cast_c_im_dout_net_x1,
      op => scale3_op_net
    );

  shift_delay: entity work.xldelay
    generic map (
      latency => 2,
      reg_retiming => 0,
      reset => 0,
      width => 1
    )
    port map (
      ce => ce_1_sg_x239,
      clk => clk_1_sg_x239,
      d(0) => slice1_y_net_x1,
      en => '1',
      rst => '1',
      q(0) => shift_delay_q_net
    );

  twiddle_general_4mult_affa3848a0: entity work.twiddle_general_4mult_entity_affa3848a0
    port map (
      a => node1_2_q_net_x1,
      b => node1_3_q_net_x1,
      ce_1 => ce_1_sg_x239,
      clk_1 => clk_1_sg_x239,
      sync => sync_delay_q_net_x3,
      a_im => force_im_output_port_net_x3,
      a_re => force_re_output_port_net_x3,
      bw_im => convert1_dout_net_x2,
      bw_re => convert0_dout_net_x2
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/coarse/fft_wideband_real0/fft_direct"

entity fft_direct_entity_ee646f7bda is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    in0: in std_logic_vector(35 downto 0); 
    in1: in std_logic_vector(35 downto 0); 
    in2: in std_logic_vector(35 downto 0); 
    in3: in std_logic_vector(35 downto 0); 
    shift: in std_logic_vector(1 downto 0); 
    sync: in std_logic; 
    of_x0: out std_logic; 
    out0: out std_logic_vector(35 downto 0); 
    out1: out std_logic_vector(35 downto 0); 
    sync_out: out std_logic
  );
end fft_direct_entity_ee646f7bda;

architecture structural of fft_direct_entity_ee646f7bda is
  signal ce_1_sg_x240: std_logic;
  signal clk_1_sg_x240: std_logic;
  signal concat_y_net_x1: std_logic_vector(35 downto 0);
  signal concat_y_net_x2: std_logic_vector(35 downto 0);
  signal concat_y_net_x3: std_logic_vector(35 downto 0);
  signal concat_y_net_x4: std_logic_vector(35 downto 0);
  signal concat_y_net_x5: std_logic_vector(35 downto 0);
  signal concat_y_net_x6: std_logic_vector(35 downto 0);
  signal logical_y_net_x0: std_logic;
  signal logical_y_net_x1: std_logic;
  signal logical_y_net_x2: std_logic;
  signal logical_y_net_x3: std_logic;
  signal node0_0_q_net_x1: std_logic_vector(35 downto 0);
  signal node0_1_q_net_x1: std_logic_vector(35 downto 0);
  signal node0_2_q_net_x1: std_logic_vector(35 downto 0);
  signal node0_3_q_net_x1: std_logic_vector(35 downto 0);
  signal node1_0_q_net_x1: std_logic_vector(35 downto 0);
  signal node1_1_q_net_x1: std_logic_vector(35 downto 0);
  signal node1_2_q_net_x1: std_logic_vector(35 downto 0);
  signal node1_3_q_net_x1: std_logic_vector(35 downto 0);
  signal node2_0_q_net_x0: std_logic_vector(35 downto 0);
  signal node2_2_q_net_x0: std_logic_vector(35 downto 0);
  signal of_1_y_net: std_logic;
  signal of_2_y_net: std_logic;
  signal of_or_y_net_x0: std_logic;
  signal register0_q_net_x4: std_logic_vector(35 downto 0);
  signal register0_q_net_x5: std_logic_vector(35 downto 0);
  signal register0_q_net_x7: std_logic_vector(35 downto 0);
  signal register0_q_net_x8: std_logic_vector(35 downto 0);
  signal register0_q_net_x9: std_logic;
  signal slice0_y_net_x1: std_logic;
  signal slice1_y_net_x1: std_logic;
  signal slice_y_net_x0: std_logic_vector(1 downto 0);
  signal sync_delay_q_net_x3: std_logic;
  signal sync_delay_q_net_x4: std_logic;
  signal sync_delay_q_net_x5: std_logic;

begin
  ce_1_sg_x240 <= ce_1;
  clk_1_sg_x240 <= clk_1;
  register0_q_net_x4 <= in0;
  register0_q_net_x7 <= in1;
  register0_q_net_x5 <= in2;
  register0_q_net_x8 <= in3;
  slice_y_net_x0 <= shift;
  register0_q_net_x9 <= sync;
  of_x0 <= of_or_y_net_x0;
  out0 <= node2_0_q_net_x0;
  out1 <= node2_2_q_net_x0;
  sync_out <= sync_delay_q_net_x5;

  butterfly1_0_2b561cf47f: entity work.butterfly1_0_entity_2b561cf47f
    port map (
      a => node0_0_q_net_x1,
      b => node0_2_q_net_x1,
      ce_1 => ce_1_sg_x240,
      clk_1 => clk_1_sg_x240,
      shift => slice0_y_net_x1,
      sync => register0_q_net_x9,
      a_bw => concat_y_net_x2,
      a_bw_x0 => concat_y_net_x3,
      of_x0 => logical_y_net_x0,
      sync_out => sync_delay_q_net_x3
    );

  butterfly1_1_fe5e105b19: entity work.butterfly1_0_entity_2b561cf47f
    port map (
      a => node0_1_q_net_x1,
      b => node0_3_q_net_x1,
      ce_1 => ce_1_sg_x240,
      clk_1 => clk_1_sg_x240,
      shift => slice0_y_net_x1,
      sync => register0_q_net_x9,
      a_bw => concat_y_net_x4,
      a_bw_x0 => concat_y_net_x5,
      of_x0 => logical_y_net_x1,
      sync_out => sync_delay_q_net_x4
    );

  butterfly2_0_d3942396c3: entity work.butterfly2_0_entity_d3942396c3
    port map (
      a => node1_0_q_net_x1,
      b => node1_1_q_net_x1,
      ce_1 => ce_1_sg_x240,
      clk_1 => clk_1_sg_x240,
      shift => slice1_y_net_x1,
      sync => sync_delay_q_net_x3,
      a_bw => concat_y_net_x1,
      of_x0 => logical_y_net_x2,
      sync_out => sync_delay_q_net_x5
    );

  butterfly2_1_5ca2c00a71: entity work.butterfly2_1_entity_5ca2c00a71
    port map (
      a => node1_2_q_net_x1,
      b => node1_3_q_net_x1,
      ce_1 => ce_1_sg_x240,
      clk_1 => clk_1_sg_x240,
      shift => slice1_y_net_x1,
      sync => sync_delay_q_net_x4,
      a_bw => concat_y_net_x6,
      of_x0 => logical_y_net_x3
    );

  node0_0: entity work.delay_0c0a0420a6
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d => register0_q_net_x4,
      q => node0_0_q_net_x1
    );

  node0_1: entity work.delay_0c0a0420a6
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d => register0_q_net_x7,
      q => node0_1_q_net_x1
    );

  node0_2: entity work.delay_0c0a0420a6
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d => register0_q_net_x5,
      q => node0_2_q_net_x1
    );

  node0_3: entity work.delay_0c0a0420a6
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d => register0_q_net_x8,
      q => node0_3_q_net_x1
    );

  node1_0: entity work.delay_0c0a0420a6
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d => concat_y_net_x2,
      q => node1_0_q_net_x1
    );

  node1_1: entity work.delay_0c0a0420a6
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d => concat_y_net_x4,
      q => node1_1_q_net_x1
    );

  node1_2: entity work.delay_0c0a0420a6
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d => concat_y_net_x3,
      q => node1_2_q_net_x1
    );

  node1_3: entity work.delay_0c0a0420a6
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d => concat_y_net_x5,
      q => node1_3_q_net_x1
    );

  node2_0: entity work.delay_0c0a0420a6
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d => concat_y_net_x1,
      q => node2_0_q_net_x0
    );

  node2_2: entity work.delay_0c0a0420a6
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d => concat_y_net_x6,
      q => node2_2_q_net_x0
    );

  of_1: entity work.logical_444d3f5046
    port map (
      ce => ce_1_sg_x240,
      clk => clk_1_sg_x240,
      clr => '0',
      d0(0) => logical_y_net_x0,
      d1(0) => logical_y_net_x1,
      y(0) => of_1_y_net
    );

  of_2: entity work.logical_444d3f5046
    port map (
      ce => ce_1_sg_x240,
      clk => clk_1_sg_x240,
      clr => '0',
      d0(0) => logical_y_net_x2,
      d1(0) => logical_y_net_x3,
      y(0) => of_2_y_net
    );

  of_or: entity work.logical_aacf6e1b0e
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0(0) => of_1_y_net,
      d1(0) => of_2_y_net,
      y(0) => of_or_y_net_x0
    );

  slice0: entity work.xlslice
    generic map (
      new_lsb => 0,
      new_msb => 0,
      x_width => 2,
      y_width => 1
    )
    port map (
      x => slice_y_net_x0,
      y(0) => slice0_y_net_x1
    );

  slice1: entity work.xlslice
    generic map (
      new_lsb => 1,
      new_msb => 1,
      x_width => 2,
      y_width => 1
    )
    port map (
      x => slice_y_net_x0,
      y(0) => slice1_y_net_x1
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/coarse/fft_wideband_real0/fft_unscrambler/reorder/sync_delay_en"

entity sync_delay_en_entity_76a743294e is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    en: in std_logic; 
    in_x0: in std_logic; 
    out_x0: out std_logic
  );
end sync_delay_en_entity_76a743294e;

architecture structural of sync_delay_en_entity_76a743294e is
  signal ce_1_sg_x241: std_logic;
  signal clk_1_sg_x241: std_logic;
  signal constant1_op_net: std_logic_vector(7 downto 0);
  signal constant2_op_net: std_logic_vector(7 downto 0);
  signal constant3_op_net: std_logic;
  signal constant_op_net: std_logic_vector(7 downto 0);
  signal counter_op_net: std_logic_vector(7 downto 0);
  signal logical1_y_net: std_logic;
  signal logical_y_net: std_logic;
  signal mux_y_net_x0: std_logic;
  signal or_y_net_x0: std_logic;
  signal pre_sync_delay_q_net_x0: std_logic;
  signal relational1_op_net: std_logic;
  signal relational_op_net: std_logic;

begin
  ce_1_sg_x241 <= ce_1;
  clk_1_sg_x241 <= clk_1;
  or_y_net_x0 <= en;
  pre_sync_delay_q_net_x0 <= in_x0;
  out_x0 <= mux_y_net_x0;

  constant1: entity work.constant_91ef1678ca
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op => constant1_op_net
    );

  constant2: entity work.constant_e8aae5d3bb
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op => constant2_op_net
    );

  constant3: entity work.constant_6293007044
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op(0) => constant3_op_net
    );

  constant_x0: entity work.constant_b437b02512
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op => constant_op_net
    );

  counter: entity work.xlcounter_free_c09f12_01
    generic map (
      core_name0 => "cntr_11_0_7eefee4be204e56b",
      op_arith => xlUnsigned,
      op_width => 8
    )
    port map (
      ce => ce_1_sg_x241,
      clk => clk_1_sg_x241,
      clr => '0',
      din => constant2_op_net,
      en(0) => logical1_y_net,
      load(0) => pre_sync_delay_q_net_x0,
      rst => "0",
      op => counter_op_net
    );

  logical: entity work.logical_aacf6e1b0e
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0(0) => pre_sync_delay_q_net_x0,
      d1(0) => relational1_op_net,
      y(0) => logical_y_net
    );

  logical1: entity work.logical_80f90b97d0
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0(0) => logical_y_net,
      d1(0) => or_y_net_x0,
      y(0) => logical1_y_net
    );

  mux: entity work.mux_1bef4ba0e4
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0(0) => pre_sync_delay_q_net_x0,
      d1(0) => relational_op_net,
      sel(0) => constant3_op_net,
      y(0) => mux_y_net_x0
    );

  relational: entity work.relational_54048c8b02
    port map (
      a => constant_op_net,
      b => counter_op_net,
      ce => '0',
      clk => '0',
      clr => '0',
      op(0) => relational_op_net
    );

  relational1: entity work.relational_16235eb2bf
    port map (
      a => counter_op_net,
      b => constant1_op_net,
      ce => '0',
      clk => '0',
      clr => '0',
      op(0) => relational1_op_net
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/coarse/fft_wideband_real0/fft_unscrambler/reorder"

entity reorder_entity_10fc6fb340 is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    din0: in std_logic_vector(35 downto 0); 
    din1: in std_logic_vector(35 downto 0); 
    en: in std_logic; 
    sync: in std_logic; 
    dout0: out std_logic_vector(35 downto 0); 
    dout1: out std_logic_vector(35 downto 0); 
    sync_out: out std_logic
  );
end reorder_entity_10fc6fb340;

architecture structural of reorder_entity_10fc6fb340 is
  signal bram0_data_out_net_x1: std_logic_vector(35 downto 0);
  signal bram1_data_out_net_x1: std_logic_vector(35 downto 0);
  signal ce_1_sg_x242: std_logic;
  signal clk_1_sg_x242: std_logic;
  signal const_op_net_x0: std_logic;
  signal counter_op_net: std_logic_vector(9 downto 0);
  signal delay0_q_net_x0: std_logic;
  signal delay_d0_q_net: std_logic_vector(6 downto 0);
  signal delay_din0_q_net: std_logic_vector(35 downto 0);
  signal delay_din1_q_net: std_logic_vector(35 downto 0);
  signal delay_map1_q_net: std_logic_vector(6 downto 0);
  signal delay_map2_q_net: std_logic_vector(6 downto 0);
  signal delay_map3_q_net: std_logic_vector(6 downto 0);
  signal delay_map4_q_net: std_logic_vector(6 downto 0);
  signal delay_map5_q_net: std_logic_vector(6 downto 0);
  signal delay_map6_q_net: std_logic_vector(6 downto 0);
  signal delay_sel_q_net: std_logic_vector(2 downto 0);
  signal delay_we_q_net: std_logic;
  signal delayb1_q_net_x0: std_logic_vector(35 downto 0);
  signal delayb2_q_net_x0: std_logic_vector(35 downto 0);
  signal map1_data_net: std_logic_vector(6 downto 0);
  signal map2_data_net: std_logic_vector(6 downto 0);
  signal map3_data_net: std_logic_vector(6 downto 0);
  signal map4_data_net: std_logic_vector(6 downto 0);
  signal map5_data_net: std_logic_vector(6 downto 0);
  signal map6_data_net: std_logic_vector(6 downto 0);
  signal mux_y_net: std_logic_vector(6 downto 0);
  signal mux_y_net_x0: std_logic;
  signal or_y_net_x0: std_logic;
  signal post_sync_delay_q_net_x1: std_logic;
  signal pre_sync_delay_q_net_x0: std_logic;
  signal slice1_y_net: std_logic_vector(2 downto 0);
  signal slice2_y_net: std_logic_vector(6 downto 0);

begin
  ce_1_sg_x242 <= ce_1;
  clk_1_sg_x242 <= clk_1;
  delayb1_q_net_x0 <= din0;
  delayb2_q_net_x0 <= din1;
  const_op_net_x0 <= en;
  delay0_q_net_x0 <= sync;
  dout0 <= bram0_data_out_net_x1;
  dout1 <= bram1_data_out_net_x1;
  sync_out <= post_sync_delay_q_net_x1;

  bram0: entity work.xlspram_c09f12_01
    generic map (
      c_address_width => 7,
      c_width => 36,
      core_name0 => "bmg_72_deac774267b579f6",
      latency => 2
    )
    port map (
      addr => mux_y_net,
      ce => ce_1_sg_x242,
      clk => clk_1_sg_x242,
      data_in => delay_din0_q_net,
      en => "1",
      rst => "0",
      we(0) => delay_we_q_net,
      data_out => bram0_data_out_net_x1
    );

  bram1: entity work.xlspram_c09f12_01
    generic map (
      c_address_width => 7,
      c_width => 36,
      core_name0 => "bmg_72_deac774267b579f6",
      latency => 2
    )
    port map (
      addr => mux_y_net,
      ce => ce_1_sg_x242,
      clk => clk_1_sg_x242,
      data_in => delay_din1_q_net,
      en => "1",
      rst => "0",
      we(0) => delay_we_q_net,
      data_out => bram1_data_out_net_x1
    );

  counter: entity work.xlcounter_limit_c09f12_01
    generic map (
      cnt_15_0 => 895,
      cnt_31_16 => 0,
      cnt_47_32 => 0,
      cnt_63_48 => 0,
      core_name0 => "cntr_11_0_467594213c284489",
      count_limited => 1,
      op_arith => xlUnsigned,
      op_width => 10
    )
    port map (
      ce => ce_1_sg_x242,
      clk => clk_1_sg_x242,
      clr => '0',
      en(0) => const_op_net_x0,
      rst(0) => delay0_q_net_x0,
      op => counter_op_net
    );

  delay_d0: entity work.xldelay
    generic map (
      latency => 6,
      reg_retiming => 0,
      reset => 0,
      width => 7
    )
    port map (
      ce => ce_1_sg_x242,
      clk => clk_1_sg_x242,
      d => slice2_y_net,
      en => '1',
      rst => '1',
      q => delay_d0_q_net
    );

  delay_din0: entity work.xldelay
    generic map (
      latency => 7,
      reg_retiming => 0,
      reset => 0,
      width => 36
    )
    port map (
      ce => ce_1_sg_x242,
      clk => clk_1_sg_x242,
      d => delayb1_q_net_x0,
      en => '1',
      rst => '1',
      q => delay_din0_q_net
    );

  delay_din1: entity work.xldelay
    generic map (
      latency => 7,
      reg_retiming => 0,
      reset => 0,
      width => 36
    )
    port map (
      ce => ce_1_sg_x242,
      clk => clk_1_sg_x242,
      d => delayb2_q_net_x0,
      en => '1',
      rst => '1',
      q => delay_din1_q_net
    );

  delay_map1: entity work.xldelay
    generic map (
      latency => 5,
      reg_retiming => 0,
      reset => 0,
      width => 7
    )
    port map (
      ce => ce_1_sg_x242,
      clk => clk_1_sg_x242,
      d => map1_data_net,
      en => '1',
      rst => '1',
      q => delay_map1_q_net
    );

  delay_map2: entity work.xldelay
    generic map (
      latency => 4,
      reg_retiming => 0,
      reset => 0,
      width => 7
    )
    port map (
      ce => ce_1_sg_x242,
      clk => clk_1_sg_x242,
      d => map2_data_net,
      en => '1',
      rst => '1',
      q => delay_map2_q_net
    );

  delay_map3: entity work.xldelay
    generic map (
      latency => 3,
      reg_retiming => 0,
      reset => 0,
      width => 7
    )
    port map (
      ce => ce_1_sg_x242,
      clk => clk_1_sg_x242,
      d => map3_data_net,
      en => '1',
      rst => '1',
      q => delay_map3_q_net
    );

  delay_map4: entity work.xldelay
    generic map (
      latency => 2,
      reg_retiming => 0,
      reset => 0,
      width => 7
    )
    port map (
      ce => ce_1_sg_x242,
      clk => clk_1_sg_x242,
      d => map4_data_net,
      en => '1',
      rst => '1',
      q => delay_map4_q_net
    );

  delay_map5: entity work.xldelay
    generic map (
      latency => 1,
      reg_retiming => 0,
      reset => 0,
      width => 7
    )
    port map (
      ce => ce_1_sg_x242,
      clk => clk_1_sg_x242,
      d => map5_data_net,
      en => '1',
      rst => '1',
      q => delay_map5_q_net
    );

  delay_map6: entity work.delay_092ab65ed6
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d => map6_data_net,
      q => delay_map6_q_net
    );

  delay_sel: entity work.xldelay
    generic map (
      latency => 6,
      reg_retiming => 0,
      reset => 0,
      width => 3
    )
    port map (
      ce => ce_1_sg_x242,
      clk => clk_1_sg_x242,
      d => slice1_y_net,
      en => '1',
      rst => '1',
      q => delay_sel_q_net
    );

  delay_we: entity work.xldelay
    generic map (
      latency => 7,
      reg_retiming => 0,
      reset => 0,
      width => 1
    )
    port map (
      ce => ce_1_sg_x242,
      clk => clk_1_sg_x242,
      d(0) => const_op_net_x0,
      en => '1',
      rst => '1',
      q(0) => delay_we_q_net
    );

  map1: entity work.xlsprom_dist_c09f12_01
    generic map (
      addr_width => 7,
      c_address_width => 7,
      c_width => 7,
      core_name0 => "dmg_72_8ff5c16d3b09b3bb",
      latency => 1
    )
    port map (
      addr => slice2_y_net,
      ce => ce_1_sg_x242,
      clk => clk_1_sg_x242,
      en => "1",
      data => map1_data_net
    );

  map2: entity work.xlsprom_dist_c09f12_01
    generic map (
      addr_width => 7,
      c_address_width => 7,
      c_width => 7,
      core_name0 => "dmg_72_8ff5c16d3b09b3bb",
      latency => 1
    )
    port map (
      addr => map1_data_net,
      ce => ce_1_sg_x242,
      clk => clk_1_sg_x242,
      en => "1",
      data => map2_data_net
    );

  map3: entity work.xlsprom_dist_c09f12_01
    generic map (
      addr_width => 7,
      c_address_width => 7,
      c_width => 7,
      core_name0 => "dmg_72_8ff5c16d3b09b3bb",
      latency => 1
    )
    port map (
      addr => map2_data_net,
      ce => ce_1_sg_x242,
      clk => clk_1_sg_x242,
      en => "1",
      data => map3_data_net
    );

  map4: entity work.xlsprom_dist_c09f12_01
    generic map (
      addr_width => 7,
      c_address_width => 7,
      c_width => 7,
      core_name0 => "dmg_72_8ff5c16d3b09b3bb",
      latency => 1
    )
    port map (
      addr => map3_data_net,
      ce => ce_1_sg_x242,
      clk => clk_1_sg_x242,
      en => "1",
      data => map4_data_net
    );

  map5: entity work.xlsprom_dist_c09f12_01
    generic map (
      addr_width => 7,
      c_address_width => 7,
      c_width => 7,
      core_name0 => "dmg_72_8ff5c16d3b09b3bb",
      latency => 1
    )
    port map (
      addr => map4_data_net,
      ce => ce_1_sg_x242,
      clk => clk_1_sg_x242,
      en => "1",
      data => map5_data_net
    );

  map6: entity work.xlsprom_dist_c09f12_01
    generic map (
      addr_width => 7,
      c_address_width => 7,
      c_width => 7,
      core_name0 => "dmg_72_8ff5c16d3b09b3bb",
      latency => 1
    )
    port map (
      addr => map5_data_net,
      ce => ce_1_sg_x242,
      clk => clk_1_sg_x242,
      en => "1",
      data => map6_data_net
    );

  mux: entity work.mux_f3852fb470
    port map (
      ce => ce_1_sg_x242,
      clk => clk_1_sg_x242,
      clr => '0',
      d0 => delay_d0_q_net,
      d1 => delay_map1_q_net,
      d2 => delay_map2_q_net,
      d3 => delay_map3_q_net,
      d4 => delay_map4_q_net,
      d5 => delay_map5_q_net,
      d6 => delay_map6_q_net,
      sel => delay_sel_q_net,
      y => mux_y_net
    );

  or_x0: entity work.logical_aacf6e1b0e
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0(0) => pre_sync_delay_q_net_x0,
      d1(0) => delay_we_q_net,
      y(0) => or_y_net_x0
    );

  post_sync_delay: entity work.xldelay
    generic map (
      latency => 3,
      reg_retiming => 0,
      reset => 0,
      width => 1
    )
    port map (
      ce => ce_1_sg_x242,
      clk => clk_1_sg_x242,
      d(0) => mux_y_net_x0,
      en => '1',
      rst => '1',
      q(0) => post_sync_delay_q_net_x1
    );

  pre_sync_delay: entity work.xldelay
    generic map (
      latency => 7,
      reg_retiming => 0,
      reset => 0,
      width => 1
    )
    port map (
      ce => ce_1_sg_x242,
      clk => clk_1_sg_x242,
      d(0) => delay0_q_net_x0,
      en => '1',
      rst => '1',
      q(0) => pre_sync_delay_q_net_x0
    );

  slice1: entity work.xlslice
    generic map (
      new_lsb => 7,
      new_msb => 9,
      x_width => 10,
      y_width => 3
    )
    port map (
      x => counter_op_net,
      y => slice1_y_net
    );

  slice2: entity work.xlslice
    generic map (
      new_lsb => 0,
      new_msb => 6,
      x_width => 10,
      y_width => 7
    )
    port map (
      x => counter_op_net,
      y => slice2_y_net
    );

  sync_delay_en_76a743294e: entity work.sync_delay_en_entity_76a743294e
    port map (
      ce_1 => ce_1_sg_x242,
      clk_1 => clk_1_sg_x242,
      en => or_y_net_x0,
      in_x0 => pre_sync_delay_q_net_x0,
      out_x0 => mux_y_net_x0
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/coarse/fft_wideband_real0/fft_unscrambler/square_transposer/barrel_switcher"

entity barrel_switcher_entity_bbeeae4836 is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    in1: in std_logic_vector(35 downto 0); 
    in2: in std_logic_vector(35 downto 0); 
    sel: in std_logic; 
    sync_in: in std_logic; 
    out1: out std_logic_vector(35 downto 0); 
    out2: out std_logic_vector(35 downto 0); 
    sync_out: out std_logic
  );
end barrel_switcher_entity_bbeeae4836;

architecture structural of barrel_switcher_entity_bbeeae4836 is
  signal ce_1_sg_x243: std_logic;
  signal clk_1_sg_x243: std_logic;
  signal counter_op_net_x0: std_logic;
  signal delay_sync_q_net_x0: std_logic;
  signal delayf1_q_net_x0: std_logic_vector(35 downto 0);
  signal delayf2_q_net_x0: std_logic_vector(35 downto 0);
  signal mux11_y_net_x0: std_logic_vector(35 downto 0);
  signal mux21_y_net_x0: std_logic_vector(35 downto 0);
  signal slice1_y_net: std_logic;
  signal sync_delay_q_net_x6: std_logic;

begin
  ce_1_sg_x243 <= ce_1;
  clk_1_sg_x243 <= clk_1;
  delayf1_q_net_x0 <= in1;
  delayf2_q_net_x0 <= in2;
  counter_op_net_x0 <= sel;
  sync_delay_q_net_x6 <= sync_in;
  out1 <= mux11_y_net_x0;
  out2 <= mux21_y_net_x0;
  sync_out <= delay_sync_q_net_x0;

  delay_sync: entity work.xldelay
    generic map (
      latency => 1,
      reg_retiming => 0,
      reset => 0,
      width => 1
    )
    port map (
      ce => ce_1_sg_x243,
      clk => clk_1_sg_x243,
      d(0) => sync_delay_q_net_x6,
      en => '1',
      rst => '1',
      q(0) => delay_sync_q_net_x0
    );

  mux11: entity work.mux_4bb6f691f7
    port map (
      ce => ce_1_sg_x243,
      clk => clk_1_sg_x243,
      clr => '0',
      d0 => delayf1_q_net_x0,
      d1 => delayf2_q_net_x0,
      sel(0) => slice1_y_net,
      y => mux11_y_net_x0
    );

  mux21: entity work.mux_4bb6f691f7
    port map (
      ce => ce_1_sg_x243,
      clk => clk_1_sg_x243,
      clr => '0',
      d0 => delayf2_q_net_x0,
      d1 => delayf1_q_net_x0,
      sel(0) => slice1_y_net,
      y => mux21_y_net_x0
    );

  slice1: entity work.xlslice
    generic map (
      new_lsb => 0,
      new_msb => 0,
      x_width => 1,
      y_width => 1
    )
    port map (
      x(0) => counter_op_net_x0,
      y(0) => slice1_y_net
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/coarse/fft_wideband_real0/fft_unscrambler/square_transposer"

entity square_transposer_entity_191862f244 is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    in1: in std_logic_vector(35 downto 0); 
    in2: in std_logic_vector(35 downto 0); 
    sync: in std_logic; 
    out1: out std_logic_vector(35 downto 0); 
    out2: out std_logic_vector(35 downto 0); 
    sync_out: out std_logic
  );
end square_transposer_entity_191862f244;

architecture structural of square_transposer_entity_191862f244 is
  signal ce_1_sg_x244: std_logic;
  signal clk_1_sg_x244: std_logic;
  signal counter_op_net_x0: std_logic;
  signal delay0_q_net_x1: std_logic;
  signal delay_sync_q_net_x0: std_logic;
  signal delayb1_q_net_x1: std_logic_vector(35 downto 0);
  signal delayb2_q_net_x1: std_logic_vector(35 downto 0);
  signal delayf1_q_net_x0: std_logic_vector(35 downto 0);
  signal delayf2_q_net_x0: std_logic_vector(35 downto 0);
  signal mux11_y_net_x0: std_logic_vector(35 downto 0);
  signal mux21_y_net_x0: std_logic_vector(35 downto 0);
  signal node2_0_q_net_x1: std_logic_vector(35 downto 0);
  signal node2_2_q_net_x1: std_logic_vector(35 downto 0);
  signal sync_delay_q_net_x7: std_logic;

begin
  ce_1_sg_x244 <= ce_1;
  clk_1_sg_x244 <= clk_1;
  node2_0_q_net_x1 <= in1;
  node2_2_q_net_x1 <= in2;
  sync_delay_q_net_x7 <= sync;
  out1 <= delayb1_q_net_x1;
  out2 <= delayb2_q_net_x1;
  sync_out <= delay0_q_net_x1;

  barrel_switcher_bbeeae4836: entity work.barrel_switcher_entity_bbeeae4836
    port map (
      ce_1 => ce_1_sg_x244,
      clk_1 => clk_1_sg_x244,
      in1 => delayf1_q_net_x0,
      in2 => delayf2_q_net_x0,
      sel => counter_op_net_x0,
      sync_in => sync_delay_q_net_x7,
      out1 => mux11_y_net_x0,
      out2 => mux21_y_net_x0,
      sync_out => delay_sync_q_net_x0
    );

  counter: entity work.counter_0009e314f5
    port map (
      ce => ce_1_sg_x244,
      clk => clk_1_sg_x244,
      clr => '0',
      rst(0) => sync_delay_q_net_x7,
      op(0) => counter_op_net_x0
    );

  delay0: entity work.xldelay
    generic map (
      latency => 1,
      reg_retiming => 0,
      reset => 0,
      width => 1
    )
    port map (
      ce => ce_1_sg_x244,
      clk => clk_1_sg_x244,
      d(0) => delay_sync_q_net_x0,
      en => '1',
      rst => '1',
      q(0) => delay0_q_net_x1
    );

  delayb1: entity work.xldelay
    generic map (
      latency => 1,
      reg_retiming => 0,
      reset => 0,
      width => 36
    )
    port map (
      ce => ce_1_sg_x244,
      clk => clk_1_sg_x244,
      d => mux11_y_net_x0,
      en => '1',
      rst => '1',
      q => delayb1_q_net_x1
    );

  delayb2: entity work.delay_0c0a0420a6
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d => mux21_y_net_x0,
      q => delayb2_q_net_x1
    );

  delayf1: entity work.delay_0c0a0420a6
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d => node2_0_q_net_x1,
      q => delayf1_q_net_x0
    );

  delayf2: entity work.xldelay
    generic map (
      latency => 1,
      reg_retiming => 0,
      reset => 0,
      width => 36
    )
    port map (
      ce => ce_1_sg_x244,
      clk => clk_1_sg_x244,
      d => node2_2_q_net_x1,
      en => '1',
      rst => '1',
      q => delayf2_q_net_x0
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/coarse/fft_wideband_real0/fft_unscrambler"

entity fft_unscrambler_entity_b73bf557ac is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    in1: in std_logic_vector(35 downto 0); 
    in2: in std_logic_vector(35 downto 0); 
    sync: in std_logic; 
    out1: out std_logic_vector(35 downto 0); 
    out2: out std_logic_vector(35 downto 0); 
    sync_out: out std_logic
  );
end fft_unscrambler_entity_b73bf557ac;

architecture structural of fft_unscrambler_entity_b73bf557ac is
  signal bram0_data_out_net_x2: std_logic_vector(35 downto 0);
  signal bram1_data_out_net_x2: std_logic_vector(35 downto 0);
  signal ce_1_sg_x245: std_logic;
  signal clk_1_sg_x245: std_logic;
  signal const_op_net_x0: std_logic;
  signal delay0_q_net_x1: std_logic;
  signal delayb1_q_net_x1: std_logic_vector(35 downto 0);
  signal delayb2_q_net_x1: std_logic_vector(35 downto 0);
  signal node2_0_q_net_x2: std_logic_vector(35 downto 0);
  signal node2_2_q_net_x2: std_logic_vector(35 downto 0);
  signal post_sync_delay_q_net_x2: std_logic;
  signal sync_delay_q_net_x8: std_logic;

begin
  ce_1_sg_x245 <= ce_1;
  clk_1_sg_x245 <= clk_1;
  node2_0_q_net_x2 <= in1;
  node2_2_q_net_x2 <= in2;
  sync_delay_q_net_x8 <= sync;
  out1 <= bram0_data_out_net_x2;
  out2 <= bram1_data_out_net_x2;
  sync_out <= post_sync_delay_q_net_x2;

  const: entity work.constant_6293007044
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op(0) => const_op_net_x0
    );

  reorder_10fc6fb340: entity work.reorder_entity_10fc6fb340
    port map (
      ce_1 => ce_1_sg_x245,
      clk_1 => clk_1_sg_x245,
      din0 => delayb1_q_net_x1,
      din1 => delayb2_q_net_x1,
      en => const_op_net_x0,
      sync => delay0_q_net_x1,
      dout0 => bram0_data_out_net_x2,
      dout1 => bram1_data_out_net_x2,
      sync_out => post_sync_delay_q_net_x2
    );

  square_transposer_191862f244: entity work.square_transposer_entity_191862f244
    port map (
      ce_1 => ce_1_sg_x245,
      clk_1 => clk_1_sg_x245,
      in1 => node2_0_q_net_x2,
      in2 => node2_2_q_net_x2,
      sync => sync_delay_q_net_x8,
      out1 => delayb1_q_net_x1,
      out2 => delayb2_q_net_x1,
      sync_out => delay0_q_net_x1
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/coarse/fft_wideband_real0/in_del_4x0_pol1"

entity in_del_4x0_pol1_entity_96a59b4013 is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    d: in std_logic_vector(17 downto 0); 
    q: out std_logic_vector(17 downto 0)
  );
end in_del_4x0_pol1_entity_96a59b4013;

architecture structural of in_del_4x0_pol1_entity_96a59b4013 is
  signal ce_1_sg_x246: std_logic;
  signal clk_1_sg_x246: std_logic;
  signal register0_q_net_x7: std_logic_vector(17 downto 0);
  signal shift3_op_net_x1: std_logic_vector(17 downto 0);

begin
  ce_1_sg_x246 <= ce_1;
  clk_1_sg_x246 <= clk_1;
  shift3_op_net_x1 <= d;
  q <= register0_q_net_x7;

  register0: entity work.xlregister
    generic map (
      d_width => 18,
      init_value => b"000000000000000000"
    )
    port map (
      ce => ce_1_sg_x246,
      clk => clk_1_sg_x246,
      d => shift3_op_net_x1,
      en => "1",
      rst => "0",
      q => register0_q_net_x7
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/coarse/fft_wideband_real0"

entity fft_wideband_real0_entity_c512b4816a is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    in0: in std_logic_vector(17 downto 0); 
    in1: in std_logic_vector(17 downto 0); 
    in2: in std_logic_vector(17 downto 0); 
    in3: in std_logic_vector(17 downto 0); 
    shift: in std_logic_vector(9 downto 0); 
    sync: in std_logic; 
    of_x0: out std_logic; 
    out0: out std_logic_vector(35 downto 0); 
    out1: out std_logic_vector(35 downto 0); 
    sync_out: out std_logic
  );
end fft_wideband_real0_entity_c512b4816a;

architecture structural of fft_wideband_real0_entity_c512b4816a is
  signal bram0_data_out_net_x3: std_logic_vector(35 downto 0);
  signal bram1_data_out_net_x3: std_logic_vector(35 downto 0);
  signal ce_1_sg_x251: std_logic;
  signal clk_1_sg_x251: std_logic;
  signal delay2_q_net_x3: std_logic;
  signal delay_q_net_x2: std_logic;
  signal logical1_y_net_x8: std_logic;
  signal mux1_y_net_x4: std_logic_vector(35 downto 0);
  signal mux2_y_net_x4: std_logic_vector(35 downto 0);
  signal mux3_y_net_x4: std_logic_vector(35 downto 0);
  signal mux_y_net_x4: std_logic_vector(35 downto 0);
  signal node2_0_q_net_x2: std_logic_vector(35 downto 0);
  signal node2_2_q_net_x2: std_logic_vector(35 downto 0);
  signal of_or_y_net_x0: std_logic;
  signal of_or_y_net_x1: std_logic;
  signal post_sync_delay_q_net_x3: std_logic;
  signal register0_q_net_x10: std_logic_vector(17 downto 0);
  signal register0_q_net_x11: std_logic_vector(17 downto 0);
  signal register0_q_net_x12: std_logic_vector(17 downto 0);
  signal register0_q_net_x13: std_logic_vector(17 downto 0);
  signal register0_q_net_x14: std_logic;
  signal register0_q_net_x4: std_logic_vector(35 downto 0);
  signal register0_q_net_x5: std_logic_vector(35 downto 0);
  signal register0_q_net_x7: std_logic_vector(35 downto 0);
  signal register0_q_net_x8: std_logic_vector(35 downto 0);
  signal register0_q_net_x9: std_logic;
  signal shift1_op_net_x2: std_logic_vector(17 downto 0);
  signal shift2_op_net_x2: std_logic_vector(17 downto 0);
  signal shift3_op_net_x2: std_logic_vector(17 downto 0);
  signal shift4_op_net_x2: std_logic_vector(17 downto 0);
  signal slice6_y_net_x9: std_logic_vector(9 downto 0);
  signal slice_y_net_x0: std_logic_vector(1 downto 0);
  signal sync_delay_q_net_x8: std_logic;

begin
  ce_1_sg_x251 <= ce_1;
  clk_1_sg_x251 <= clk_1;
  shift3_op_net_x2 <= in0;
  shift1_op_net_x2 <= in1;
  shift2_op_net_x2 <= in2;
  shift4_op_net_x2 <= in3;
  slice6_y_net_x9 <= shift;
  delay_q_net_x2 <= sync;
  of_x0 <= of_or_y_net_x1;
  out0 <= bram0_data_out_net_x3;
  out1 <= bram1_data_out_net_x3;
  sync_out <= post_sync_delay_q_net_x3;

  del_4x0_pol1_49de411777: entity work.del_4x0_pol1_entity_49de411777
    port map (
      ce_1 => ce_1_sg_x251,
      clk_1 => clk_1_sg_x251,
      d => mux_y_net_x4,
      q => register0_q_net_x4
    );

  del_4x0_pol2_346a6b7ed2: entity work.del_4x0_pol1_entity_49de411777
    port map (
      ce_1 => ce_1_sg_x251,
      clk_1 => clk_1_sg_x251,
      d => mux1_y_net_x4,
      q => register0_q_net_x7
    );

  del_4x0_pol3_77e810b85d: entity work.del_4x0_pol1_entity_49de411777
    port map (
      ce_1 => ce_1_sg_x251,
      clk_1 => clk_1_sg_x251,
      d => mux2_y_net_x4,
      q => register0_q_net_x5
    );

  del_4x0_pol4_cff0a8ccbc: entity work.del_4x0_pol1_entity_49de411777
    port map (
      ce_1 => ce_1_sg_x251,
      clk_1 => clk_1_sg_x251,
      d => mux3_y_net_x4,
      q => register0_q_net_x8
    );

  del_sync_4x0_d1731592de: entity work.delay11_entity_c2a06abd76
    port map (
      ce_1 => ce_1_sg_x251,
      clk_1 => clk_1_sg_x251,
      d => delay2_q_net_x3,
      q => register0_q_net_x9
    );

  fft_biplex_real_4x0_d1b89c22a9: entity work.fft_biplex_real_4x0_entity_d1b89c22a9
    port map (
      ce_1 => ce_1_sg_x251,
      clk_1 => clk_1_sg_x251,
      pol1 => register0_q_net_x10,
      pol2 => register0_q_net_x11,
      pol3 => register0_q_net_x12,
      pol4 => register0_q_net_x13,
      shift => slice6_y_net_x9,
      sync => register0_q_net_x14,
      of_x0 => logical1_y_net_x8,
      pol1_out => mux_y_net_x4,
      pol2_out => mux1_y_net_x4,
      pol3_out => mux2_y_net_x4,
      pol4_out => mux3_y_net_x4,
      sync_out => delay2_q_net_x3
    );

  fft_direct_ee646f7bda: entity work.fft_direct_entity_ee646f7bda
    port map (
      ce_1 => ce_1_sg_x251,
      clk_1 => clk_1_sg_x251,
      in0 => register0_q_net_x4,
      in1 => register0_q_net_x7,
      in2 => register0_q_net_x5,
      in3 => register0_q_net_x8,
      shift => slice_y_net_x0,
      sync => register0_q_net_x9,
      of_x0 => of_or_y_net_x0,
      out0 => node2_0_q_net_x2,
      out1 => node2_2_q_net_x2,
      sync_out => sync_delay_q_net_x8
    );

  fft_unscrambler_b73bf557ac: entity work.fft_unscrambler_entity_b73bf557ac
    port map (
      ce_1 => ce_1_sg_x251,
      clk_1 => clk_1_sg_x251,
      in1 => node2_0_q_net_x2,
      in2 => node2_2_q_net_x2,
      sync => sync_delay_q_net_x8,
      out1 => bram0_data_out_net_x3,
      out2 => bram1_data_out_net_x3,
      sync_out => post_sync_delay_q_net_x3
    );

  in_del_4x0_pol1_96a59b4013: entity work.in_del_4x0_pol1_entity_96a59b4013
    port map (
      ce_1 => ce_1_sg_x251,
      clk_1 => clk_1_sg_x251,
      d => shift3_op_net_x2,
      q => register0_q_net_x10
    );

  in_del_4x0_pol2_bd75100b65: entity work.in_del_4x0_pol1_entity_96a59b4013
    port map (
      ce_1 => ce_1_sg_x251,
      clk_1 => clk_1_sg_x251,
      d => shift1_op_net_x2,
      q => register0_q_net_x11
    );

  in_del_4x0_pol3_429154a324: entity work.in_del_4x0_pol1_entity_96a59b4013
    port map (
      ce_1 => ce_1_sg_x251,
      clk_1 => clk_1_sg_x251,
      d => shift2_op_net_x2,
      q => register0_q_net_x12
    );

  in_del_4x0_pol4_91e98dcf32: entity work.in_del_4x0_pol1_entity_96a59b4013
    port map (
      ce_1 => ce_1_sg_x251,
      clk_1 => clk_1_sg_x251,
      d => shift4_op_net_x2,
      q => register0_q_net_x13
    );

  in_del_sync_4x0_62f3fa77eb: entity work.delay11_entity_c2a06abd76
    port map (
      ce_1 => ce_1_sg_x251,
      clk_1 => clk_1_sg_x251,
      d => delay_q_net_x2,
      q => register0_q_net_x14
    );

  of_or: entity work.logical_444d3f5046
    port map (
      ce => ce_1_sg_x251,
      clk => clk_1_sg_x251,
      clr => '0',
      d0(0) => of_or_y_net_x0,
      d1(0) => logical1_y_net_x8,
      y(0) => of_or_y_net_x1
    );

  slice: entity work.xlslice
    generic map (
      new_lsb => 7,
      new_msb => 8,
      x_width => 10,
      y_width => 2
    )
    port map (
      x => slice6_y_net_x9,
      y => slice_y_net_x0
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/coarse/fft_wideband_real1/fft_unscrambler/reorder"

entity reorder_entity_f9ba1c1d4b is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    din0: in std_logic_vector(35 downto 0); 
    din1: in std_logic_vector(35 downto 0); 
    en: in std_logic; 
    sync: in std_logic; 
    dout0: out std_logic_vector(35 downto 0); 
    dout1: out std_logic_vector(35 downto 0)
  );
end reorder_entity_f9ba1c1d4b;

architecture structural of reorder_entity_f9ba1c1d4b is
  signal bram0_data_out_net_x1: std_logic_vector(35 downto 0);
  signal bram1_data_out_net_x1: std_logic_vector(35 downto 0);
  signal ce_1_sg_x439: std_logic;
  signal clk_1_sg_x439: std_logic;
  signal const_op_net_x0: std_logic;
  signal counter_op_net: std_logic_vector(9 downto 0);
  signal delay0_q_net_x0: std_logic;
  signal delay_d0_q_net: std_logic_vector(6 downto 0);
  signal delay_din0_q_net: std_logic_vector(35 downto 0);
  signal delay_din1_q_net: std_logic_vector(35 downto 0);
  signal delay_map1_q_net: std_logic_vector(6 downto 0);
  signal delay_map2_q_net: std_logic_vector(6 downto 0);
  signal delay_map3_q_net: std_logic_vector(6 downto 0);
  signal delay_map4_q_net: std_logic_vector(6 downto 0);
  signal delay_map5_q_net: std_logic_vector(6 downto 0);
  signal delay_map6_q_net: std_logic_vector(6 downto 0);
  signal delay_sel_q_net: std_logic_vector(2 downto 0);
  signal delay_we_q_net: std_logic;
  signal delayb1_q_net_x0: std_logic_vector(35 downto 0);
  signal delayb2_q_net_x0: std_logic_vector(35 downto 0);
  signal map1_data_net: std_logic_vector(6 downto 0);
  signal map2_data_net: std_logic_vector(6 downto 0);
  signal map3_data_net: std_logic_vector(6 downto 0);
  signal map4_data_net: std_logic_vector(6 downto 0);
  signal map5_data_net: std_logic_vector(6 downto 0);
  signal map6_data_net: std_logic_vector(6 downto 0);
  signal mux_y_net: std_logic_vector(6 downto 0);
  signal slice1_y_net: std_logic_vector(2 downto 0);
  signal slice2_y_net: std_logic_vector(6 downto 0);

begin
  ce_1_sg_x439 <= ce_1;
  clk_1_sg_x439 <= clk_1;
  delayb1_q_net_x0 <= din0;
  delayb2_q_net_x0 <= din1;
  const_op_net_x0 <= en;
  delay0_q_net_x0 <= sync;
  dout0 <= bram0_data_out_net_x1;
  dout1 <= bram1_data_out_net_x1;

  bram0: entity work.xlspram_c09f12_01
    generic map (
      c_address_width => 7,
      c_width => 36,
      core_name0 => "bmg_72_deac774267b579f6",
      latency => 2
    )
    port map (
      addr => mux_y_net,
      ce => ce_1_sg_x439,
      clk => clk_1_sg_x439,
      data_in => delay_din0_q_net,
      en => "1",
      rst => "0",
      we(0) => delay_we_q_net,
      data_out => bram0_data_out_net_x1
    );

  bram1: entity work.xlspram_c09f12_01
    generic map (
      c_address_width => 7,
      c_width => 36,
      core_name0 => "bmg_72_deac774267b579f6",
      latency => 2
    )
    port map (
      addr => mux_y_net,
      ce => ce_1_sg_x439,
      clk => clk_1_sg_x439,
      data_in => delay_din1_q_net,
      en => "1",
      rst => "0",
      we(0) => delay_we_q_net,
      data_out => bram1_data_out_net_x1
    );

  counter: entity work.xlcounter_limit_c09f12_01
    generic map (
      cnt_15_0 => 895,
      cnt_31_16 => 0,
      cnt_47_32 => 0,
      cnt_63_48 => 0,
      core_name0 => "cntr_11_0_467594213c284489",
      count_limited => 1,
      op_arith => xlUnsigned,
      op_width => 10
    )
    port map (
      ce => ce_1_sg_x439,
      clk => clk_1_sg_x439,
      clr => '0',
      en(0) => const_op_net_x0,
      rst(0) => delay0_q_net_x0,
      op => counter_op_net
    );

  delay_d0: entity work.xldelay
    generic map (
      latency => 6,
      reg_retiming => 0,
      reset => 0,
      width => 7
    )
    port map (
      ce => ce_1_sg_x439,
      clk => clk_1_sg_x439,
      d => slice2_y_net,
      en => '1',
      rst => '1',
      q => delay_d0_q_net
    );

  delay_din0: entity work.xldelay
    generic map (
      latency => 7,
      reg_retiming => 0,
      reset => 0,
      width => 36
    )
    port map (
      ce => ce_1_sg_x439,
      clk => clk_1_sg_x439,
      d => delayb1_q_net_x0,
      en => '1',
      rst => '1',
      q => delay_din0_q_net
    );

  delay_din1: entity work.xldelay
    generic map (
      latency => 7,
      reg_retiming => 0,
      reset => 0,
      width => 36
    )
    port map (
      ce => ce_1_sg_x439,
      clk => clk_1_sg_x439,
      d => delayb2_q_net_x0,
      en => '1',
      rst => '1',
      q => delay_din1_q_net
    );

  delay_map1: entity work.xldelay
    generic map (
      latency => 5,
      reg_retiming => 0,
      reset => 0,
      width => 7
    )
    port map (
      ce => ce_1_sg_x439,
      clk => clk_1_sg_x439,
      d => map1_data_net,
      en => '1',
      rst => '1',
      q => delay_map1_q_net
    );

  delay_map2: entity work.xldelay
    generic map (
      latency => 4,
      reg_retiming => 0,
      reset => 0,
      width => 7
    )
    port map (
      ce => ce_1_sg_x439,
      clk => clk_1_sg_x439,
      d => map2_data_net,
      en => '1',
      rst => '1',
      q => delay_map2_q_net
    );

  delay_map3: entity work.xldelay
    generic map (
      latency => 3,
      reg_retiming => 0,
      reset => 0,
      width => 7
    )
    port map (
      ce => ce_1_sg_x439,
      clk => clk_1_sg_x439,
      d => map3_data_net,
      en => '1',
      rst => '1',
      q => delay_map3_q_net
    );

  delay_map4: entity work.xldelay
    generic map (
      latency => 2,
      reg_retiming => 0,
      reset => 0,
      width => 7
    )
    port map (
      ce => ce_1_sg_x439,
      clk => clk_1_sg_x439,
      d => map4_data_net,
      en => '1',
      rst => '1',
      q => delay_map4_q_net
    );

  delay_map5: entity work.xldelay
    generic map (
      latency => 1,
      reg_retiming => 0,
      reset => 0,
      width => 7
    )
    port map (
      ce => ce_1_sg_x439,
      clk => clk_1_sg_x439,
      d => map5_data_net,
      en => '1',
      rst => '1',
      q => delay_map5_q_net
    );

  delay_map6: entity work.delay_092ab65ed6
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d => map6_data_net,
      q => delay_map6_q_net
    );

  delay_sel: entity work.xldelay
    generic map (
      latency => 6,
      reg_retiming => 0,
      reset => 0,
      width => 3
    )
    port map (
      ce => ce_1_sg_x439,
      clk => clk_1_sg_x439,
      d => slice1_y_net,
      en => '1',
      rst => '1',
      q => delay_sel_q_net
    );

  delay_we: entity work.xldelay
    generic map (
      latency => 7,
      reg_retiming => 0,
      reset => 0,
      width => 1
    )
    port map (
      ce => ce_1_sg_x439,
      clk => clk_1_sg_x439,
      d(0) => const_op_net_x0,
      en => '1',
      rst => '1',
      q(0) => delay_we_q_net
    );

  map1: entity work.xlsprom_dist_c09f12_01
    generic map (
      addr_width => 7,
      c_address_width => 7,
      c_width => 7,
      core_name0 => "dmg_72_8ff5c16d3b09b3bb",
      latency => 1
    )
    port map (
      addr => slice2_y_net,
      ce => ce_1_sg_x439,
      clk => clk_1_sg_x439,
      en => "1",
      data => map1_data_net
    );

  map2: entity work.xlsprom_dist_c09f12_01
    generic map (
      addr_width => 7,
      c_address_width => 7,
      c_width => 7,
      core_name0 => "dmg_72_8ff5c16d3b09b3bb",
      latency => 1
    )
    port map (
      addr => map1_data_net,
      ce => ce_1_sg_x439,
      clk => clk_1_sg_x439,
      en => "1",
      data => map2_data_net
    );

  map3: entity work.xlsprom_dist_c09f12_01
    generic map (
      addr_width => 7,
      c_address_width => 7,
      c_width => 7,
      core_name0 => "dmg_72_8ff5c16d3b09b3bb",
      latency => 1
    )
    port map (
      addr => map2_data_net,
      ce => ce_1_sg_x439,
      clk => clk_1_sg_x439,
      en => "1",
      data => map3_data_net
    );

  map4: entity work.xlsprom_dist_c09f12_01
    generic map (
      addr_width => 7,
      c_address_width => 7,
      c_width => 7,
      core_name0 => "dmg_72_8ff5c16d3b09b3bb",
      latency => 1
    )
    port map (
      addr => map3_data_net,
      ce => ce_1_sg_x439,
      clk => clk_1_sg_x439,
      en => "1",
      data => map4_data_net
    );

  map5: entity work.xlsprom_dist_c09f12_01
    generic map (
      addr_width => 7,
      c_address_width => 7,
      c_width => 7,
      core_name0 => "dmg_72_8ff5c16d3b09b3bb",
      latency => 1
    )
    port map (
      addr => map4_data_net,
      ce => ce_1_sg_x439,
      clk => clk_1_sg_x439,
      en => "1",
      data => map5_data_net
    );

  map6: entity work.xlsprom_dist_c09f12_01
    generic map (
      addr_width => 7,
      c_address_width => 7,
      c_width => 7,
      core_name0 => "dmg_72_8ff5c16d3b09b3bb",
      latency => 1
    )
    port map (
      addr => map5_data_net,
      ce => ce_1_sg_x439,
      clk => clk_1_sg_x439,
      en => "1",
      data => map6_data_net
    );

  mux: entity work.mux_f3852fb470
    port map (
      ce => ce_1_sg_x439,
      clk => clk_1_sg_x439,
      clr => '0',
      d0 => delay_d0_q_net,
      d1 => delay_map1_q_net,
      d2 => delay_map2_q_net,
      d3 => delay_map3_q_net,
      d4 => delay_map4_q_net,
      d5 => delay_map5_q_net,
      d6 => delay_map6_q_net,
      sel => delay_sel_q_net,
      y => mux_y_net
    );

  slice1: entity work.xlslice
    generic map (
      new_lsb => 7,
      new_msb => 9,
      x_width => 10,
      y_width => 3
    )
    port map (
      x => counter_op_net,
      y => slice1_y_net
    );

  slice2: entity work.xlslice
    generic map (
      new_lsb => 0,
      new_msb => 6,
      x_width => 10,
      y_width => 7
    )
    port map (
      x => counter_op_net,
      y => slice2_y_net
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/coarse/fft_wideband_real1/fft_unscrambler"

entity fft_unscrambler_entity_704f296532 is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    in1: in std_logic_vector(35 downto 0); 
    in2: in std_logic_vector(35 downto 0); 
    sync: in std_logic; 
    out1: out std_logic_vector(35 downto 0); 
    out2: out std_logic_vector(35 downto 0)
  );
end fft_unscrambler_entity_704f296532;

architecture structural of fft_unscrambler_entity_704f296532 is
  signal bram0_data_out_net_x2: std_logic_vector(35 downto 0);
  signal bram1_data_out_net_x2: std_logic_vector(35 downto 0);
  signal ce_1_sg_x442: std_logic;
  signal clk_1_sg_x442: std_logic;
  signal const_op_net_x0: std_logic;
  signal delay0_q_net_x1: std_logic;
  signal delayb1_q_net_x1: std_logic_vector(35 downto 0);
  signal delayb2_q_net_x1: std_logic_vector(35 downto 0);
  signal node2_0_q_net_x2: std_logic_vector(35 downto 0);
  signal node2_2_q_net_x2: std_logic_vector(35 downto 0);
  signal sync_delay_q_net_x8: std_logic;

begin
  ce_1_sg_x442 <= ce_1;
  clk_1_sg_x442 <= clk_1;
  node2_0_q_net_x2 <= in1;
  node2_2_q_net_x2 <= in2;
  sync_delay_q_net_x8 <= sync;
  out1 <= bram0_data_out_net_x2;
  out2 <= bram1_data_out_net_x2;

  const: entity work.constant_6293007044
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op(0) => const_op_net_x0
    );

  reorder_f9ba1c1d4b: entity work.reorder_entity_f9ba1c1d4b
    port map (
      ce_1 => ce_1_sg_x442,
      clk_1 => clk_1_sg_x442,
      din0 => delayb1_q_net_x1,
      din1 => delayb2_q_net_x1,
      en => const_op_net_x0,
      sync => delay0_q_net_x1,
      dout0 => bram0_data_out_net_x2,
      dout1 => bram1_data_out_net_x2
    );

  square_transposer_fb47dc1a31: entity work.square_transposer_entity_191862f244
    port map (
      ce_1 => ce_1_sg_x442,
      clk_1 => clk_1_sg_x442,
      in1 => node2_0_q_net_x2,
      in2 => node2_2_q_net_x2,
      sync => sync_delay_q_net_x8,
      out1 => delayb1_q_net_x1,
      out2 => delayb2_q_net_x1,
      sync_out => delay0_q_net_x1
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/coarse/fft_wideband_real1"

entity fft_wideband_real1_entity_9c10afbb70 is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    in0: in std_logic_vector(17 downto 0); 
    in1: in std_logic_vector(17 downto 0); 
    in2: in std_logic_vector(17 downto 0); 
    in3: in std_logic_vector(17 downto 0); 
    shift: in std_logic_vector(9 downto 0); 
    sync: in std_logic; 
    of_x0: out std_logic; 
    out0: out std_logic_vector(35 downto 0); 
    out1: out std_logic_vector(35 downto 0)
  );
end fft_wideband_real1_entity_9c10afbb70;

architecture structural of fft_wideband_real1_entity_9c10afbb70 is
  signal bram0_data_out_net_x3: std_logic_vector(35 downto 0);
  signal bram1_data_out_net_x3: std_logic_vector(35 downto 0);
  signal ce_1_sg_x448: std_logic;
  signal clk_1_sg_x448: std_logic;
  signal delay2_q_net_x3: std_logic;
  signal delay_q_net_x2: std_logic;
  signal logical1_y_net_x8: std_logic;
  signal mux1_y_net_x4: std_logic_vector(35 downto 0);
  signal mux2_y_net_x4: std_logic_vector(35 downto 0);
  signal mux3_y_net_x4: std_logic_vector(35 downto 0);
  signal mux_y_net_x4: std_logic_vector(35 downto 0);
  signal node2_0_q_net_x2: std_logic_vector(35 downto 0);
  signal node2_2_q_net_x2: std_logic_vector(35 downto 0);
  signal of_or_y_net_x0: std_logic;
  signal of_or_y_net_x1: std_logic;
  signal register0_q_net_x10: std_logic_vector(17 downto 0);
  signal register0_q_net_x11: std_logic_vector(17 downto 0);
  signal register0_q_net_x12: std_logic_vector(17 downto 0);
  signal register0_q_net_x13: std_logic_vector(17 downto 0);
  signal register0_q_net_x14: std_logic;
  signal register0_q_net_x4: std_logic_vector(35 downto 0);
  signal register0_q_net_x5: std_logic_vector(35 downto 0);
  signal register0_q_net_x7: std_logic_vector(35 downto 0);
  signal register0_q_net_x8: std_logic_vector(35 downto 0);
  signal register0_q_net_x9: std_logic;
  signal shift1_op_net_x2: std_logic_vector(17 downto 0);
  signal shift2_op_net_x2: std_logic_vector(17 downto 0);
  signal shift3_op_net_x2: std_logic_vector(17 downto 0);
  signal shift4_op_net_x2: std_logic_vector(17 downto 0);
  signal slice6_y_net_x19: std_logic_vector(9 downto 0);
  signal slice_y_net_x0: std_logic_vector(1 downto 0);
  signal sync_delay_q_net_x8: std_logic;

begin
  ce_1_sg_x448 <= ce_1;
  clk_1_sg_x448 <= clk_1;
  shift3_op_net_x2 <= in0;
  shift1_op_net_x2 <= in1;
  shift2_op_net_x2 <= in2;
  shift4_op_net_x2 <= in3;
  slice6_y_net_x19 <= shift;
  delay_q_net_x2 <= sync;
  of_x0 <= of_or_y_net_x1;
  out0 <= bram0_data_out_net_x3;
  out1 <= bram1_data_out_net_x3;

  del_4x0_pol1_eec0dddd8c: entity work.del_4x0_pol1_entity_49de411777
    port map (
      ce_1 => ce_1_sg_x448,
      clk_1 => clk_1_sg_x448,
      d => mux_y_net_x4,
      q => register0_q_net_x4
    );

  del_4x0_pol2_e885270dd1: entity work.del_4x0_pol1_entity_49de411777
    port map (
      ce_1 => ce_1_sg_x448,
      clk_1 => clk_1_sg_x448,
      d => mux1_y_net_x4,
      q => register0_q_net_x7
    );

  del_4x0_pol3_0e91210785: entity work.del_4x0_pol1_entity_49de411777
    port map (
      ce_1 => ce_1_sg_x448,
      clk_1 => clk_1_sg_x448,
      d => mux2_y_net_x4,
      q => register0_q_net_x5
    );

  del_4x0_pol4_b6ec0e10aa: entity work.del_4x0_pol1_entity_49de411777
    port map (
      ce_1 => ce_1_sg_x448,
      clk_1 => clk_1_sg_x448,
      d => mux3_y_net_x4,
      q => register0_q_net_x8
    );

  del_sync_4x0_83f758c068: entity work.delay11_entity_c2a06abd76
    port map (
      ce_1 => ce_1_sg_x448,
      clk_1 => clk_1_sg_x448,
      d => delay2_q_net_x3,
      q => register0_q_net_x9
    );

  fft_biplex_real_4x0_74800c449d: entity work.fft_biplex_real_4x0_entity_d1b89c22a9
    port map (
      ce_1 => ce_1_sg_x448,
      clk_1 => clk_1_sg_x448,
      pol1 => register0_q_net_x10,
      pol2 => register0_q_net_x11,
      pol3 => register0_q_net_x12,
      pol4 => register0_q_net_x13,
      shift => slice6_y_net_x19,
      sync => register0_q_net_x14,
      of_x0 => logical1_y_net_x8,
      pol1_out => mux_y_net_x4,
      pol2_out => mux1_y_net_x4,
      pol3_out => mux2_y_net_x4,
      pol4_out => mux3_y_net_x4,
      sync_out => delay2_q_net_x3
    );

  fft_direct_ff4fd4788b: entity work.fft_direct_entity_ee646f7bda
    port map (
      ce_1 => ce_1_sg_x448,
      clk_1 => clk_1_sg_x448,
      in0 => register0_q_net_x4,
      in1 => register0_q_net_x7,
      in2 => register0_q_net_x5,
      in3 => register0_q_net_x8,
      shift => slice_y_net_x0,
      sync => register0_q_net_x9,
      of_x0 => of_or_y_net_x0,
      out0 => node2_0_q_net_x2,
      out1 => node2_2_q_net_x2,
      sync_out => sync_delay_q_net_x8
    );

  fft_unscrambler_704f296532: entity work.fft_unscrambler_entity_704f296532
    port map (
      ce_1 => ce_1_sg_x448,
      clk_1 => clk_1_sg_x448,
      in1 => node2_0_q_net_x2,
      in2 => node2_2_q_net_x2,
      sync => sync_delay_q_net_x8,
      out1 => bram0_data_out_net_x3,
      out2 => bram1_data_out_net_x3
    );

  in_del_4x0_pol1_5a2cb5cdbc: entity work.in_del_4x0_pol1_entity_96a59b4013
    port map (
      ce_1 => ce_1_sg_x448,
      clk_1 => clk_1_sg_x448,
      d => shift3_op_net_x2,
      q => register0_q_net_x10
    );

  in_del_4x0_pol2_dcb130ad53: entity work.in_del_4x0_pol1_entity_96a59b4013
    port map (
      ce_1 => ce_1_sg_x448,
      clk_1 => clk_1_sg_x448,
      d => shift1_op_net_x2,
      q => register0_q_net_x11
    );

  in_del_4x0_pol3_22e0a05376: entity work.in_del_4x0_pol1_entity_96a59b4013
    port map (
      ce_1 => ce_1_sg_x448,
      clk_1 => clk_1_sg_x448,
      d => shift2_op_net_x2,
      q => register0_q_net_x12
    );

  in_del_4x0_pol4_98451403ae: entity work.in_del_4x0_pol1_entity_96a59b4013
    port map (
      ce_1 => ce_1_sg_x448,
      clk_1 => clk_1_sg_x448,
      d => shift4_op_net_x2,
      q => register0_q_net_x13
    );

  in_del_sync_4x0_e70915ff39: entity work.delay11_entity_c2a06abd76
    port map (
      ce_1 => ce_1_sg_x448,
      clk_1 => clk_1_sg_x448,
      d => delay_q_net_x2,
      q => register0_q_net_x14
    );

  of_or: entity work.logical_444d3f5046
    port map (
      ce => ce_1_sg_x448,
      clk => clk_1_sg_x448,
      clr => '0',
      d0(0) => of_or_y_net_x0,
      d1(0) => logical1_y_net_x8,
      y(0) => of_or_y_net_x1
    );

  slice: entity work.xlslice
    generic map (
      new_lsb => 7,
      new_msb => 8,
      x_width => 10,
      y_width => 2
    )
    port map (
      x => slice6_y_net_x19,
      y => slice_y_net_x0
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/coarse/pfb_fir_real/adder_1_1"

entity adder_1_1_entity_13a6851d97 is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    din1: in std_logic_vector(25 downto 0); 
    din2: in std_logic_vector(25 downto 0); 
    sync: in std_logic; 
    dout: out std_logic_vector(25 downto 0); 
    sync_out: out std_logic
  );
end adder_1_1_entity_13a6851d97;

architecture structural of adder_1_1_entity_13a6851d97 is
  signal addr1_s_net_x0: std_logic_vector(25 downto 0);
  signal ce_1_sg_x449: std_logic;
  signal clk_1_sg_x449: std_logic;
  signal delay_q_net_x0: std_logic;
  signal mult_p_net_x1: std_logic_vector(25 downto 0);
  signal mult_p_net_x2: std_logic_vector(25 downto 0);
  signal sync_delay_q_net_x0: std_logic;

begin
  ce_1_sg_x449 <= ce_1;
  clk_1_sg_x449 <= clk_1;
  mult_p_net_x1 <= din1;
  mult_p_net_x2 <= din2;
  delay_q_net_x0 <= sync;
  dout <= addr1_s_net_x0;
  sync_out <= sync_delay_q_net_x0;

  addr1: entity work.addsub_43a374a7af
    port map (
      a => mult_p_net_x1,
      b => mult_p_net_x2,
      ce => ce_1_sg_x449,
      clk => clk_1_sg_x449,
      clr => '0',
      s => addr1_s_net_x0
    );

  sync_delay: entity work.delay_e18fb31a3d
    port map (
      ce => ce_1_sg_x449,
      clk => clk_1_sg_x449,
      clr => '0',
      d(0) => delay_q_net_x0,
      q(0) => sync_delay_q_net_x0
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/coarse/pfb_fir_real/adder_1_2"

entity adder_1_2_entity_59287c1711 is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    din1: in std_logic_vector(25 downto 0); 
    din2: in std_logic_vector(25 downto 0); 
    dout: out std_logic_vector(25 downto 0)
  );
end adder_1_2_entity_59287c1711;

architecture structural of adder_1_2_entity_59287c1711 is
  signal addr1_s_net_x0: std_logic_vector(25 downto 0);
  signal ce_1_sg_x450: std_logic;
  signal clk_1_sg_x450: std_logic;
  signal mult_p_net_x1: std_logic_vector(25 downto 0);
  signal mult_p_net_x2: std_logic_vector(25 downto 0);

begin
  ce_1_sg_x450 <= ce_1;
  clk_1_sg_x450 <= clk_1;
  mult_p_net_x1 <= din1;
  mult_p_net_x2 <= din2;
  dout <= addr1_s_net_x0;

  addr1: entity work.addsub_43a374a7af
    port map (
      a => mult_p_net_x1,
      b => mult_p_net_x2,
      ce => ce_1_sg_x450,
      clk => clk_1_sg_x450,
      clr => '0',
      s => addr1_s_net_x0
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/coarse/pfb_fir_real/pol1_in1_coeffs"

entity pol1_in1_coeffs_entity_c8afea88ae is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    din: in std_logic_vector(7 downto 0); 
    sync: in std_logic; 
    coeff: out std_logic_vector(35 downto 0); 
    dout: out std_logic_vector(7 downto 0); 
    sync_out: out std_logic
  );
end pol1_in1_coeffs_entity_c8afea88ae;

architecture structural of pol1_in1_coeffs_entity_c8afea88ae is
  signal ce_1_sg_x457: std_logic;
  signal clk_1_sg_x457: std_logic;
  signal concat_y_net: std_logic_vector(35 downto 0);
  signal counter_op_net: std_logic_vector(2 downto 0);
  signal delay1_q_net_x0: std_logic_vector(7 downto 0);
  signal delay_q_net_x0: std_logic;
  signal delay_sync_q_net_x0: std_logic;
  signal fan_delay1_q_net: std_logic_vector(2 downto 0);
  signal fan_delay2_q_net: std_logic_vector(2 downto 0);
  signal register_q_net_x0: std_logic_vector(35 downto 0);
  signal reinterpret1_output_port_net: std_logic_vector(17 downto 0);
  signal reinterpret2_output_port_net: std_logic_vector(17 downto 0);
  signal reinterpret4_output_port_net_x1: std_logic_vector(7 downto 0);
  signal rom1_data_net: std_logic_vector(17 downto 0);
  signal rom2_data_net: std_logic_vector(17 downto 0);

begin
  ce_1_sg_x457 <= ce_1;
  clk_1_sg_x457 <= clk_1;
  reinterpret4_output_port_net_x1 <= din;
  delay_sync_q_net_x0 <= sync;
  coeff <= register_q_net_x0;
  dout <= delay1_q_net_x0;
  sync_out <= delay_q_net_x0;

  concat: entity work.concat_b198bd62b0
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      in0 => reinterpret1_output_port_net,
      in1 => reinterpret2_output_port_net,
      y => concat_y_net
    );

  counter: entity work.xlcounter_free_c09f12_01
    generic map (
      core_name0 => "cntr_11_0_514048f9c72a30b1",
      op_arith => xlUnsigned,
      op_width => 3
    )
    port map (
      ce => ce_1_sg_x457,
      clk => clk_1_sg_x457,
      clr => '0',
      en => "1",
      rst(0) => delay_sync_q_net_x0,
      op => counter_op_net
    );

  delay: entity work.xldelay
    generic map (
      latency => 5,
      reg_retiming => 0,
      reset => 0,
      width => 1
    )
    port map (
      ce => ce_1_sg_x457,
      clk => clk_1_sg_x457,
      d(0) => delay_sync_q_net_x0,
      en => '1',
      rst => '1',
      q(0) => delay_q_net_x0
    );

  delay1: entity work.xldelay
    generic map (
      latency => 5,
      reg_retiming => 0,
      reset => 0,
      width => 8
    )
    port map (
      ce => ce_1_sg_x457,
      clk => clk_1_sg_x457,
      d => reinterpret4_output_port_net_x1,
      en => '1',
      rst => '1',
      q => delay1_q_net_x0
    );

  fan_delay1: entity work.xldelay
    generic map (
      latency => 1,
      reg_retiming => 0,
      reset => 0,
      width => 3
    )
    port map (
      ce => ce_1_sg_x457,
      clk => clk_1_sg_x457,
      d => counter_op_net,
      en => '1',
      rst => '1',
      q => fan_delay1_q_net
    );

  fan_delay2: entity work.xldelay
    generic map (
      latency => 1,
      reg_retiming => 0,
      reset => 0,
      width => 3
    )
    port map (
      ce => ce_1_sg_x457,
      clk => clk_1_sg_x457,
      d => counter_op_net,
      en => '1',
      rst => '1',
      q => fan_delay2_q_net
    );

  register_x0: entity work.xlregister
    generic map (
      d_width => 36,
      init_value => b"000000000000000000000000000000000000"
    )
    port map (
      ce => ce_1_sg_x457,
      clk => clk_1_sg_x457,
      d => concat_y_net,
      en => "1",
      rst => "0",
      q => register_q_net_x0
    );

  reinterpret1: entity work.reinterpret_580feec131
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => rom1_data_net,
      output_port => reinterpret1_output_port_net
    );

  reinterpret2: entity work.reinterpret_580feec131
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => rom2_data_net,
      output_port => reinterpret2_output_port_net
    );

  rom1: entity work.xlsprom_c09f12_01
    generic map (
      c_address_width => 3,
      c_width => 18,
      core_name0 => "bmg_72_7923a80e2a3186d3",
      latency => 2
    )
    port map (
      addr => fan_delay1_q_net,
      ce => ce_1_sg_x457,
      clk => clk_1_sg_x457,
      en => "1",
      rst => "0",
      data => rom1_data_net
    );

  rom2: entity work.xlsprom_c09f12_01
    generic map (
      c_address_width => 3,
      c_width => 18,
      core_name0 => "bmg_72_22ecfdf9c708a18d",
      latency => 2
    )
    port map (
      addr => fan_delay2_q_net,
      ce => ce_1_sg_x457,
      clk => clk_1_sg_x457,
      en => "1",
      rst => "0",
      data => rom2_data_net
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/coarse/pfb_fir_real/pol1_in1_first_tap/delay_bram"

entity delay_bram_entity_7dc358dce0 is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    in1: in std_logic_vector(7 downto 0); 
    out1: out std_logic_vector(7 downto 0)
  );
end delay_bram_entity_7dc358dce0;

architecture structural of delay_bram_entity_7dc358dce0 is
  signal ce_1_sg_x458: std_logic;
  signal clk_1_sg_x458: std_logic;
  signal constant2_op_net: std_logic;
  signal counter_op_net: std_logic_vector(2 downto 0);
  signal delay1_q_net_x1: std_logic_vector(7 downto 0);
  signal single_port_ram_data_out_net_x0: std_logic_vector(7 downto 0);

begin
  ce_1_sg_x458 <= ce_1;
  clk_1_sg_x458 <= clk_1;
  delay1_q_net_x1 <= in1;
  out1 <= single_port_ram_data_out_net_x0;

  constant2: entity work.constant_6293007044
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op(0) => constant2_op_net
    );

  counter: entity work.xlcounter_limit_c09f12_01
    generic map (
      cnt_15_0 => 4,
      cnt_31_16 => 0,
      cnt_47_32 => 0,
      cnt_63_48 => 0,
      core_name0 => "cntr_11_0_514048f9c72a30b1",
      count_limited => 1,
      op_arith => xlUnsigned,
      op_width => 3
    )
    port map (
      ce => ce_1_sg_x458,
      clk => clk_1_sg_x458,
      clr => '0',
      en => "1",
      rst => "0",
      op => counter_op_net
    );

  single_port_ram: entity work.xlspram_c09f12_01
    generic map (
      c_address_width => 3,
      c_width => 8,
      core_name0 => "bmg_72_b673a6c277a0b565",
      latency => 2
    )
    port map (
      addr => counter_op_net,
      ce => ce_1_sg_x458,
      clk => clk_1_sg_x458,
      data_in => delay1_q_net_x1,
      en => "1",
      rst => "0",
      we(0) => constant2_op_net,
      data_out => single_port_ram_data_out_net_x0
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/coarse/pfb_fir_real/pol1_in1_first_tap"

entity pol1_in1_first_tap_entity_5927e1c3d2 is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    coeffs: in std_logic_vector(35 downto 0); 
    din: in std_logic_vector(7 downto 0); 
    sync: in std_logic; 
    coeff_out: out std_logic_vector(17 downto 0); 
    dout: out std_logic_vector(7 downto 0); 
    sync_out: out std_logic; 
    taps_out: out std_logic_vector(25 downto 0)
  );
end pol1_in1_first_tap_entity_5927e1c3d2;

architecture structural of pol1_in1_first_tap_entity_5927e1c3d2 is
  signal ce_1_sg_x460: std_logic;
  signal clk_1_sg_x460: std_logic;
  signal delay1_q_net_x2: std_logic_vector(7 downto 0);
  signal delay_q_net_x2: std_logic;
  signal mult_p_net_x2: std_logic_vector(25 downto 0);
  signal mux_y_net_x1: std_logic;
  signal register_q_net_x1: std_logic_vector(35 downto 0);
  signal reinterpret2_output_port_net: std_logic_vector(7 downto 0);
  signal reinterpret_output_port_net: std_logic_vector(17 downto 0);
  signal single_port_ram_data_out_net_x1: std_logic_vector(7 downto 0);
  signal slice1_y_net_x0: std_logic_vector(17 downto 0);
  signal slice_y_net: std_logic_vector(17 downto 0);

begin
  ce_1_sg_x460 <= ce_1;
  clk_1_sg_x460 <= clk_1;
  register_q_net_x1 <= coeffs;
  delay1_q_net_x2 <= din;
  delay_q_net_x2 <= sync;
  coeff_out <= slice1_y_net_x0;
  dout <= single_port_ram_data_out_net_x1;
  sync_out <= mux_y_net_x1;
  taps_out <= mult_p_net_x2;

  delay_bram_7dc358dce0: entity work.delay_bram_entity_7dc358dce0
    port map (
      ce_1 => ce_1_sg_x460,
      clk_1 => clk_1_sg_x460,
      in1 => delay1_q_net_x2,
      out1 => single_port_ram_data_out_net_x1
    );

  mult: entity work.mult_4fae336f61
    port map (
      a => reinterpret2_output_port_net,
      b => reinterpret_output_port_net,
      ce => ce_1_sg_x460,
      clk => clk_1_sg_x460,
      clr => '0',
      p => mult_p_net_x2
    );

  reinterpret: entity work.reinterpret_9a0fa0f632
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => slice_y_net,
      output_port => reinterpret_output_port_net
    );

  reinterpret2: entity work.reinterpret_4389dc89bf
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => delay1_q_net_x2,
      output_port => reinterpret2_output_port_net
    );

  slice: entity work.xlslice
    generic map (
      new_lsb => 0,
      new_msb => 17,
      x_width => 36,
      y_width => 18
    )
    port map (
      x => register_q_net_x1,
      y => slice_y_net
    );

  slice1: entity work.xlslice
    generic map (
      new_lsb => 18,
      new_msb => 35,
      x_width => 36,
      y_width => 18
    )
    port map (
      x => register_q_net_x1,
      y => slice1_y_net_x0
    );

  sync_delay_0e477d1b64: entity work.sync_delay_entity_053eb37e18
    port map (
      ce_1 => ce_1_sg_x460,
      clk_1 => clk_1_sg_x460,
      in_x0 => delay_q_net_x2,
      out_x0 => mux_y_net_x1
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/coarse/pfb_fir_real/pol1_in1_last_tap"

entity pol1_in1_last_tap_entity_ca67f62992 is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    coeff: in std_logic_vector(17 downto 0); 
    din: in std_logic_vector(7 downto 0); 
    sync: in std_logic; 
    sync_out: out std_logic; 
    tap_out: out std_logic_vector(25 downto 0)
  );
end pol1_in1_last_tap_entity_ca67f62992;

architecture structural of pol1_in1_last_tap_entity_ca67f62992 is
  signal ce_1_sg_x461: std_logic;
  signal clk_1_sg_x461: std_logic;
  signal delay_q_net_x1: std_logic;
  signal mult_p_net_x3: std_logic_vector(25 downto 0);
  signal mux_y_net_x2: std_logic;
  signal reinterpret1_output_port_net: std_logic_vector(7 downto 0);
  signal reinterpret_output_port_net: std_logic_vector(17 downto 0);
  signal single_port_ram_data_out_net_x2: std_logic_vector(7 downto 0);
  signal slice1_y_net_x1: std_logic_vector(17 downto 0);

begin
  ce_1_sg_x461 <= ce_1;
  clk_1_sg_x461 <= clk_1;
  slice1_y_net_x1 <= coeff;
  single_port_ram_data_out_net_x2 <= din;
  mux_y_net_x2 <= sync;
  sync_out <= delay_q_net_x1;
  tap_out <= mult_p_net_x3;

  delay: entity work.xldelay
    generic map (
      latency => 3,
      reg_retiming => 0,
      reset => 0,
      width => 1
    )
    port map (
      ce => ce_1_sg_x461,
      clk => clk_1_sg_x461,
      d(0) => mux_y_net_x2,
      en => '1',
      rst => '1',
      q(0) => delay_q_net_x1
    );

  mult: entity work.mult_4fae336f61
    port map (
      a => reinterpret1_output_port_net,
      b => reinterpret_output_port_net,
      ce => ce_1_sg_x461,
      clk => clk_1_sg_x461,
      clr => '0',
      p => mult_p_net_x3
    );

  reinterpret: entity work.reinterpret_9a0fa0f632
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => slice1_y_net_x1,
      output_port => reinterpret_output_port_net
    );

  reinterpret1: entity work.reinterpret_4389dc89bf
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => single_port_ram_data_out_net_x2,
      output_port => reinterpret1_output_port_net
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/coarse/pfb_fir_real/pol1_in2_coeffs"

entity pol1_in2_coeffs_entity_7f5932e35b is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    din: in std_logic_vector(7 downto 0); 
    sync: in std_logic; 
    coeff: out std_logic_vector(35 downto 0); 
    dout: out std_logic_vector(7 downto 0)
  );
end pol1_in2_coeffs_entity_7f5932e35b;

architecture structural of pol1_in2_coeffs_entity_7f5932e35b is
  signal ce_1_sg_x462: std_logic;
  signal clk_1_sg_x462: std_logic;
  signal concat_y_net: std_logic_vector(35 downto 0);
  signal counter_op_net: std_logic_vector(2 downto 0);
  signal delay1_q_net_x0: std_logic_vector(7 downto 0);
  signal delay_sync_q_net_x1: std_logic;
  signal fan_delay1_q_net: std_logic_vector(2 downto 0);
  signal fan_delay2_q_net: std_logic_vector(2 downto 0);
  signal register_q_net_x0: std_logic_vector(35 downto 0);
  signal reinterpret1_output_port_net: std_logic_vector(17 downto 0);
  signal reinterpret2_output_port_net: std_logic_vector(17 downto 0);
  signal reinterpret3_output_port_net_x1: std_logic_vector(7 downto 0);
  signal rom1_data_net: std_logic_vector(17 downto 0);
  signal rom2_data_net: std_logic_vector(17 downto 0);

begin
  ce_1_sg_x462 <= ce_1;
  clk_1_sg_x462 <= clk_1;
  reinterpret3_output_port_net_x1 <= din;
  delay_sync_q_net_x1 <= sync;
  coeff <= register_q_net_x0;
  dout <= delay1_q_net_x0;

  concat: entity work.concat_b198bd62b0
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      in0 => reinterpret1_output_port_net,
      in1 => reinterpret2_output_port_net,
      y => concat_y_net
    );

  counter: entity work.xlcounter_free_c09f12_01
    generic map (
      core_name0 => "cntr_11_0_514048f9c72a30b1",
      op_arith => xlUnsigned,
      op_width => 3
    )
    port map (
      ce => ce_1_sg_x462,
      clk => clk_1_sg_x462,
      clr => '0',
      en => "1",
      rst(0) => delay_sync_q_net_x1,
      op => counter_op_net
    );

  delay1: entity work.xldelay
    generic map (
      latency => 5,
      reg_retiming => 0,
      reset => 0,
      width => 8
    )
    port map (
      ce => ce_1_sg_x462,
      clk => clk_1_sg_x462,
      d => reinterpret3_output_port_net_x1,
      en => '1',
      rst => '1',
      q => delay1_q_net_x0
    );

  fan_delay1: entity work.xldelay
    generic map (
      latency => 1,
      reg_retiming => 0,
      reset => 0,
      width => 3
    )
    port map (
      ce => ce_1_sg_x462,
      clk => clk_1_sg_x462,
      d => counter_op_net,
      en => '1',
      rst => '1',
      q => fan_delay1_q_net
    );

  fan_delay2: entity work.xldelay
    generic map (
      latency => 1,
      reg_retiming => 0,
      reset => 0,
      width => 3
    )
    port map (
      ce => ce_1_sg_x462,
      clk => clk_1_sg_x462,
      d => counter_op_net,
      en => '1',
      rst => '1',
      q => fan_delay2_q_net
    );

  register_x0: entity work.xlregister
    generic map (
      d_width => 36,
      init_value => b"000000000000000000000000000000000000"
    )
    port map (
      ce => ce_1_sg_x462,
      clk => clk_1_sg_x462,
      d => concat_y_net,
      en => "1",
      rst => "0",
      q => register_q_net_x0
    );

  reinterpret1: entity work.reinterpret_580feec131
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => rom1_data_net,
      output_port => reinterpret1_output_port_net
    );

  reinterpret2: entity work.reinterpret_580feec131
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => rom2_data_net,
      output_port => reinterpret2_output_port_net
    );

  rom1: entity work.xlsprom_c09f12_01
    generic map (
      c_address_width => 3,
      c_width => 18,
      core_name0 => "bmg_72_def2631b070914b0",
      latency => 2
    )
    port map (
      addr => fan_delay1_q_net,
      ce => ce_1_sg_x462,
      clk => clk_1_sg_x462,
      en => "1",
      rst => "0",
      data => rom1_data_net
    );

  rom2: entity work.xlsprom_c09f12_01
    generic map (
      c_address_width => 3,
      c_width => 18,
      core_name0 => "bmg_72_bf7d8227d376109b",
      latency => 2
    )
    port map (
      addr => fan_delay2_q_net,
      ce => ce_1_sg_x462,
      clk => clk_1_sg_x462,
      en => "1",
      rst => "0",
      data => rom2_data_net
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/coarse/pfb_fir_real/pol1_in2_first_tap"

entity pol1_in2_first_tap_entity_54cafea8b2 is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    coeffs: in std_logic_vector(35 downto 0); 
    din: in std_logic_vector(7 downto 0); 
    coeff_out: out std_logic_vector(17 downto 0); 
    dout: out std_logic_vector(7 downto 0); 
    taps_out: out std_logic_vector(25 downto 0)
  );
end pol1_in2_first_tap_entity_54cafea8b2;

architecture structural of pol1_in2_first_tap_entity_54cafea8b2 is
  signal ce_1_sg_x464: std_logic;
  signal clk_1_sg_x464: std_logic;
  signal delay1_q_net_x2: std_logic_vector(7 downto 0);
  signal mult_p_net_x2: std_logic_vector(25 downto 0);
  signal register_q_net_x1: std_logic_vector(35 downto 0);
  signal reinterpret2_output_port_net: std_logic_vector(7 downto 0);
  signal reinterpret_output_port_net: std_logic_vector(17 downto 0);
  signal single_port_ram_data_out_net_x1: std_logic_vector(7 downto 0);
  signal slice1_y_net_x0: std_logic_vector(17 downto 0);
  signal slice_y_net: std_logic_vector(17 downto 0);

begin
  ce_1_sg_x464 <= ce_1;
  clk_1_sg_x464 <= clk_1;
  register_q_net_x1 <= coeffs;
  delay1_q_net_x2 <= din;
  coeff_out <= slice1_y_net_x0;
  dout <= single_port_ram_data_out_net_x1;
  taps_out <= mult_p_net_x2;

  delay_bram_d31b332f74: entity work.delay_bram_entity_7dc358dce0
    port map (
      ce_1 => ce_1_sg_x464,
      clk_1 => clk_1_sg_x464,
      in1 => delay1_q_net_x2,
      out1 => single_port_ram_data_out_net_x1
    );

  mult: entity work.mult_4fae336f61
    port map (
      a => reinterpret2_output_port_net,
      b => reinterpret_output_port_net,
      ce => ce_1_sg_x464,
      clk => clk_1_sg_x464,
      clr => '0',
      p => mult_p_net_x2
    );

  reinterpret: entity work.reinterpret_9a0fa0f632
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => slice_y_net,
      output_port => reinterpret_output_port_net
    );

  reinterpret2: entity work.reinterpret_4389dc89bf
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => delay1_q_net_x2,
      output_port => reinterpret2_output_port_net
    );

  slice: entity work.xlslice
    generic map (
      new_lsb => 0,
      new_msb => 17,
      x_width => 36,
      y_width => 18
    )
    port map (
      x => register_q_net_x1,
      y => slice_y_net
    );

  slice1: entity work.xlslice
    generic map (
      new_lsb => 18,
      new_msb => 35,
      x_width => 36,
      y_width => 18
    )
    port map (
      x => register_q_net_x1,
      y => slice1_y_net_x0
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/coarse/pfb_fir_real/pol1_in2_last_tap"

entity pol1_in2_last_tap_entity_3d20e72b5f is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    coeff: in std_logic_vector(17 downto 0); 
    din: in std_logic_vector(7 downto 0); 
    tap_out: out std_logic_vector(25 downto 0)
  );
end pol1_in2_last_tap_entity_3d20e72b5f;

architecture structural of pol1_in2_last_tap_entity_3d20e72b5f is
  signal ce_1_sg_x465: std_logic;
  signal clk_1_sg_x465: std_logic;
  signal mult_p_net_x3: std_logic_vector(25 downto 0);
  signal reinterpret1_output_port_net: std_logic_vector(7 downto 0);
  signal reinterpret_output_port_net: std_logic_vector(17 downto 0);
  signal single_port_ram_data_out_net_x2: std_logic_vector(7 downto 0);
  signal slice1_y_net_x1: std_logic_vector(17 downto 0);

begin
  ce_1_sg_x465 <= ce_1;
  clk_1_sg_x465 <= clk_1;
  slice1_y_net_x1 <= coeff;
  single_port_ram_data_out_net_x2 <= din;
  tap_out <= mult_p_net_x3;

  mult: entity work.mult_4fae336f61
    port map (
      a => reinterpret1_output_port_net,
      b => reinterpret_output_port_net,
      ce => ce_1_sg_x465,
      clk => clk_1_sg_x465,
      clr => '0',
      p => mult_p_net_x3
    );

  reinterpret: entity work.reinterpret_9a0fa0f632
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => slice1_y_net_x1,
      output_port => reinterpret_output_port_net
    );

  reinterpret1: entity work.reinterpret_4389dc89bf
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => single_port_ram_data_out_net_x2,
      output_port => reinterpret1_output_port_net
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/coarse/pfb_fir_real/pol1_in3_coeffs"

entity pol1_in3_coeffs_entity_37d644e242 is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    din: in std_logic_vector(7 downto 0); 
    sync: in std_logic; 
    coeff: out std_logic_vector(35 downto 0); 
    dout: out std_logic_vector(7 downto 0)
  );
end pol1_in3_coeffs_entity_37d644e242;

architecture structural of pol1_in3_coeffs_entity_37d644e242 is
  signal ce_1_sg_x466: std_logic;
  signal clk_1_sg_x466: std_logic;
  signal concat_y_net: std_logic_vector(35 downto 0);
  signal counter_op_net: std_logic_vector(2 downto 0);
  signal delay1_q_net_x0: std_logic_vector(7 downto 0);
  signal delay_sync_q_net_x2: std_logic;
  signal fan_delay1_q_net: std_logic_vector(2 downto 0);
  signal fan_delay2_q_net: std_logic_vector(2 downto 0);
  signal register_q_net_x0: std_logic_vector(35 downto 0);
  signal reinterpret1_output_port_net: std_logic_vector(17 downto 0);
  signal reinterpret2_output_port_net: std_logic_vector(17 downto 0);
  signal reinterpret2_output_port_net_x1: std_logic_vector(7 downto 0);
  signal rom1_data_net: std_logic_vector(17 downto 0);
  signal rom2_data_net: std_logic_vector(17 downto 0);

begin
  ce_1_sg_x466 <= ce_1;
  clk_1_sg_x466 <= clk_1;
  reinterpret2_output_port_net_x1 <= din;
  delay_sync_q_net_x2 <= sync;
  coeff <= register_q_net_x0;
  dout <= delay1_q_net_x0;

  concat: entity work.concat_b198bd62b0
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      in0 => reinterpret1_output_port_net,
      in1 => reinterpret2_output_port_net,
      y => concat_y_net
    );

  counter: entity work.xlcounter_free_c09f12_01
    generic map (
      core_name0 => "cntr_11_0_514048f9c72a30b1",
      op_arith => xlUnsigned,
      op_width => 3
    )
    port map (
      ce => ce_1_sg_x466,
      clk => clk_1_sg_x466,
      clr => '0',
      en => "1",
      rst(0) => delay_sync_q_net_x2,
      op => counter_op_net
    );

  delay1: entity work.xldelay
    generic map (
      latency => 5,
      reg_retiming => 0,
      reset => 0,
      width => 8
    )
    port map (
      ce => ce_1_sg_x466,
      clk => clk_1_sg_x466,
      d => reinterpret2_output_port_net_x1,
      en => '1',
      rst => '1',
      q => delay1_q_net_x0
    );

  fan_delay1: entity work.xldelay
    generic map (
      latency => 1,
      reg_retiming => 0,
      reset => 0,
      width => 3
    )
    port map (
      ce => ce_1_sg_x466,
      clk => clk_1_sg_x466,
      d => counter_op_net,
      en => '1',
      rst => '1',
      q => fan_delay1_q_net
    );

  fan_delay2: entity work.xldelay
    generic map (
      latency => 1,
      reg_retiming => 0,
      reset => 0,
      width => 3
    )
    port map (
      ce => ce_1_sg_x466,
      clk => clk_1_sg_x466,
      d => counter_op_net,
      en => '1',
      rst => '1',
      q => fan_delay2_q_net
    );

  register_x0: entity work.xlregister
    generic map (
      d_width => 36,
      init_value => b"000000000000000000000000000000000000"
    )
    port map (
      ce => ce_1_sg_x466,
      clk => clk_1_sg_x466,
      d => concat_y_net,
      en => "1",
      rst => "0",
      q => register_q_net_x0
    );

  reinterpret1: entity work.reinterpret_580feec131
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => rom1_data_net,
      output_port => reinterpret1_output_port_net
    );

  reinterpret2: entity work.reinterpret_580feec131
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => rom2_data_net,
      output_port => reinterpret2_output_port_net
    );

  rom1: entity work.xlsprom_c09f12_01
    generic map (
      c_address_width => 3,
      c_width => 18,
      core_name0 => "bmg_72_82d7e698d6cd5771",
      latency => 2
    )
    port map (
      addr => fan_delay1_q_net,
      ce => ce_1_sg_x466,
      clk => clk_1_sg_x466,
      en => "1",
      rst => "0",
      data => rom1_data_net
    );

  rom2: entity work.xlsprom_c09f12_01
    generic map (
      c_address_width => 3,
      c_width => 18,
      core_name0 => "bmg_72_4394a065975be75e",
      latency => 2
    )
    port map (
      addr => fan_delay2_q_net,
      ce => ce_1_sg_x466,
      clk => clk_1_sg_x466,
      en => "1",
      rst => "0",
      data => rom2_data_net
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/coarse/pfb_fir_real/pol1_in4_coeffs"

entity pol1_in4_coeffs_entity_21b114648a is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    din: in std_logic_vector(7 downto 0); 
    sync: in std_logic; 
    coeff: out std_logic_vector(35 downto 0); 
    dout: out std_logic_vector(7 downto 0)
  );
end pol1_in4_coeffs_entity_21b114648a;

architecture structural of pol1_in4_coeffs_entity_21b114648a is
  signal ce_1_sg_x470: std_logic;
  signal clk_1_sg_x470: std_logic;
  signal concat_y_net: std_logic_vector(35 downto 0);
  signal counter_op_net: std_logic_vector(2 downto 0);
  signal delay1_q_net_x0: std_logic_vector(7 downto 0);
  signal delay_sync_q_net_x3: std_logic;
  signal fan_delay1_q_net: std_logic_vector(2 downto 0);
  signal fan_delay2_q_net: std_logic_vector(2 downto 0);
  signal register_q_net_x0: std_logic_vector(35 downto 0);
  signal reinterpret1_output_port_net: std_logic_vector(17 downto 0);
  signal reinterpret1_output_port_net_x1: std_logic_vector(7 downto 0);
  signal reinterpret2_output_port_net: std_logic_vector(17 downto 0);
  signal rom1_data_net: std_logic_vector(17 downto 0);
  signal rom2_data_net: std_logic_vector(17 downto 0);

begin
  ce_1_sg_x470 <= ce_1;
  clk_1_sg_x470 <= clk_1;
  reinterpret1_output_port_net_x1 <= din;
  delay_sync_q_net_x3 <= sync;
  coeff <= register_q_net_x0;
  dout <= delay1_q_net_x0;

  concat: entity work.concat_b198bd62b0
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      in0 => reinterpret1_output_port_net,
      in1 => reinterpret2_output_port_net,
      y => concat_y_net
    );

  counter: entity work.xlcounter_free_c09f12_01
    generic map (
      core_name0 => "cntr_11_0_514048f9c72a30b1",
      op_arith => xlUnsigned,
      op_width => 3
    )
    port map (
      ce => ce_1_sg_x470,
      clk => clk_1_sg_x470,
      clr => '0',
      en => "1",
      rst(0) => delay_sync_q_net_x3,
      op => counter_op_net
    );

  delay1: entity work.xldelay
    generic map (
      latency => 5,
      reg_retiming => 0,
      reset => 0,
      width => 8
    )
    port map (
      ce => ce_1_sg_x470,
      clk => clk_1_sg_x470,
      d => reinterpret1_output_port_net_x1,
      en => '1',
      rst => '1',
      q => delay1_q_net_x0
    );

  fan_delay1: entity work.xldelay
    generic map (
      latency => 1,
      reg_retiming => 0,
      reset => 0,
      width => 3
    )
    port map (
      ce => ce_1_sg_x470,
      clk => clk_1_sg_x470,
      d => counter_op_net,
      en => '1',
      rst => '1',
      q => fan_delay1_q_net
    );

  fan_delay2: entity work.xldelay
    generic map (
      latency => 1,
      reg_retiming => 0,
      reset => 0,
      width => 3
    )
    port map (
      ce => ce_1_sg_x470,
      clk => clk_1_sg_x470,
      d => counter_op_net,
      en => '1',
      rst => '1',
      q => fan_delay2_q_net
    );

  register_x0: entity work.xlregister
    generic map (
      d_width => 36,
      init_value => b"000000000000000000000000000000000000"
    )
    port map (
      ce => ce_1_sg_x470,
      clk => clk_1_sg_x470,
      d => concat_y_net,
      en => "1",
      rst => "0",
      q => register_q_net_x0
    );

  reinterpret1: entity work.reinterpret_580feec131
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => rom1_data_net,
      output_port => reinterpret1_output_port_net
    );

  reinterpret2: entity work.reinterpret_580feec131
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => rom2_data_net,
      output_port => reinterpret2_output_port_net
    );

  rom1: entity work.xlsprom_c09f12_01
    generic map (
      c_address_width => 3,
      c_width => 18,
      core_name0 => "bmg_72_35957677be9347c5",
      latency => 2
    )
    port map (
      addr => fan_delay1_q_net,
      ce => ce_1_sg_x470,
      clk => clk_1_sg_x470,
      en => "1",
      rst => "0",
      data => rom1_data_net
    );

  rom2: entity work.xlsprom_c09f12_01
    generic map (
      c_address_width => 3,
      c_width => 18,
      core_name0 => "bmg_72_48d0f511ba241493",
      latency => 2
    )
    port map (
      addr => fan_delay2_q_net,
      ce => ce_1_sg_x470,
      clk => clk_1_sg_x470,
      en => "1",
      rst => "0",
      data => rom2_data_net
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/coarse/pfb_fir_real/pol2_in1_coeffs"

entity pol2_in1_coeffs_entity_0ba1f52945 is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    din: in std_logic_vector(7 downto 0); 
    sync: in std_logic; 
    coeff: out std_logic_vector(35 downto 0); 
    dout: out std_logic_vector(7 downto 0)
  );
end pol2_in1_coeffs_entity_0ba1f52945;

architecture structural of pol2_in1_coeffs_entity_0ba1f52945 is
  signal ce_1_sg_x474: std_logic;
  signal clk_1_sg_x474: std_logic;
  signal concat_y_net: std_logic_vector(35 downto 0);
  signal counter_op_net: std_logic_vector(2 downto 0);
  signal delay1_q_net_x0: std_logic_vector(7 downto 0);
  signal delay_sync_q_net_x4: std_logic;
  signal fan_delay1_q_net: std_logic_vector(2 downto 0);
  signal fan_delay2_q_net: std_logic_vector(2 downto 0);
  signal register_q_net_x0: std_logic_vector(35 downto 0);
  signal reinterpret1_output_port_net: std_logic_vector(17 downto 0);
  signal reinterpret2_output_port_net: std_logic_vector(17 downto 0);
  signal reinterpret4_output_port_net_x1: std_logic_vector(7 downto 0);
  signal rom1_data_net: std_logic_vector(17 downto 0);
  signal rom2_data_net: std_logic_vector(17 downto 0);

begin
  ce_1_sg_x474 <= ce_1;
  clk_1_sg_x474 <= clk_1;
  reinterpret4_output_port_net_x1 <= din;
  delay_sync_q_net_x4 <= sync;
  coeff <= register_q_net_x0;
  dout <= delay1_q_net_x0;

  concat: entity work.concat_b198bd62b0
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      in0 => reinterpret1_output_port_net,
      in1 => reinterpret2_output_port_net,
      y => concat_y_net
    );

  counter: entity work.xlcounter_free_c09f12_01
    generic map (
      core_name0 => "cntr_11_0_514048f9c72a30b1",
      op_arith => xlUnsigned,
      op_width => 3
    )
    port map (
      ce => ce_1_sg_x474,
      clk => clk_1_sg_x474,
      clr => '0',
      en => "1",
      rst(0) => delay_sync_q_net_x4,
      op => counter_op_net
    );

  delay1: entity work.xldelay
    generic map (
      latency => 5,
      reg_retiming => 0,
      reset => 0,
      width => 8
    )
    port map (
      ce => ce_1_sg_x474,
      clk => clk_1_sg_x474,
      d => reinterpret4_output_port_net_x1,
      en => '1',
      rst => '1',
      q => delay1_q_net_x0
    );

  fan_delay1: entity work.xldelay
    generic map (
      latency => 1,
      reg_retiming => 0,
      reset => 0,
      width => 3
    )
    port map (
      ce => ce_1_sg_x474,
      clk => clk_1_sg_x474,
      d => counter_op_net,
      en => '1',
      rst => '1',
      q => fan_delay1_q_net
    );

  fan_delay2: entity work.xldelay
    generic map (
      latency => 1,
      reg_retiming => 0,
      reset => 0,
      width => 3
    )
    port map (
      ce => ce_1_sg_x474,
      clk => clk_1_sg_x474,
      d => counter_op_net,
      en => '1',
      rst => '1',
      q => fan_delay2_q_net
    );

  register_x0: entity work.xlregister
    generic map (
      d_width => 36,
      init_value => b"000000000000000000000000000000000000"
    )
    port map (
      ce => ce_1_sg_x474,
      clk => clk_1_sg_x474,
      d => concat_y_net,
      en => "1",
      rst => "0",
      q => register_q_net_x0
    );

  reinterpret1: entity work.reinterpret_580feec131
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => rom1_data_net,
      output_port => reinterpret1_output_port_net
    );

  reinterpret2: entity work.reinterpret_580feec131
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => rom2_data_net,
      output_port => reinterpret2_output_port_net
    );

  rom1: entity work.xlsprom_c09f12_01
    generic map (
      c_address_width => 3,
      c_width => 18,
      core_name0 => "bmg_72_7923a80e2a3186d3",
      latency => 2
    )
    port map (
      addr => fan_delay1_q_net,
      ce => ce_1_sg_x474,
      clk => clk_1_sg_x474,
      en => "1",
      rst => "0",
      data => rom1_data_net
    );

  rom2: entity work.xlsprom_c09f12_01
    generic map (
      c_address_width => 3,
      c_width => 18,
      core_name0 => "bmg_72_22ecfdf9c708a18d",
      latency => 2
    )
    port map (
      addr => fan_delay2_q_net,
      ce => ce_1_sg_x474,
      clk => clk_1_sg_x474,
      en => "1",
      rst => "0",
      data => rom2_data_net
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/coarse/pfb_fir_real"

entity pfb_fir_real_entity_63f9757e89 is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    pol1_in1: in std_logic_vector(7 downto 0); 
    pol1_in2: in std_logic_vector(7 downto 0); 
    pol1_in3: in std_logic_vector(7 downto 0); 
    pol1_in4: in std_logic_vector(7 downto 0); 
    pol2_in1: in std_logic_vector(7 downto 0); 
    pol2_in2: in std_logic_vector(7 downto 0); 
    pol2_in3: in std_logic_vector(7 downto 0); 
    pol2_in4: in std_logic_vector(7 downto 0); 
    sync: in std_logic; 
    pol1_out1: out std_logic_vector(17 downto 0); 
    pol1_out2: out std_logic_vector(17 downto 0); 
    pol1_out3: out std_logic_vector(17 downto 0); 
    pol1_out4: out std_logic_vector(17 downto 0); 
    pol2_out1: out std_logic_vector(17 downto 0); 
    pol2_out2: out std_logic_vector(17 downto 0); 
    pol2_out3: out std_logic_vector(17 downto 0); 
    pol2_out4: out std_logic_vector(17 downto 0); 
    sync_out: out std_logic
  );
end pfb_fir_real_entity_63f9757e89;

architecture structural of pfb_fir_real_entity_63f9757e89 is
  signal addr1_s_net_x0: std_logic_vector(25 downto 0);
  signal addr1_s_net_x1: std_logic_vector(25 downto 0);
  signal addr1_s_net_x2: std_logic_vector(25 downto 0);
  signal addr1_s_net_x3: std_logic_vector(25 downto 0);
  signal addr1_s_net_x4: std_logic_vector(25 downto 0);
  signal addr1_s_net_x5: std_logic_vector(25 downto 0);
  signal addr1_s_net_x6: std_logic_vector(25 downto 0);
  signal addr1_s_net_x7: std_logic_vector(25 downto 0);
  signal ce_1_sg_x490: std_logic;
  signal clk_1_sg_x490: std_logic;
  signal convert_1_1_dout_net_x1: std_logic_vector(17 downto 0);
  signal convert_1_2_dout_net_x1: std_logic_vector(17 downto 0);
  signal convert_1_3_dout_net_x1: std_logic_vector(17 downto 0);
  signal convert_1_4_dout_net_x1: std_logic_vector(17 downto 0);
  signal convert_2_1_dout_net_x1: std_logic_vector(17 downto 0);
  signal convert_2_2_dout_net_x1: std_logic_vector(17 downto 0);
  signal convert_2_3_dout_net_x1: std_logic_vector(17 downto 0);
  signal convert_2_4_dout_net_x1: std_logic_vector(17 downto 0);
  signal delay1_q_net_x10: std_logic;
  signal delay1_q_net_x2: std_logic_vector(7 downto 0);
  signal delay1_q_net_x3: std_logic_vector(7 downto 0);
  signal delay1_q_net_x4: std_logic_vector(7 downto 0);
  signal delay1_q_net_x5: std_logic_vector(7 downto 0);
  signal delay1_q_net_x6: std_logic_vector(7 downto 0);
  signal delay1_q_net_x7: std_logic_vector(7 downto 0);
  signal delay1_q_net_x8: std_logic_vector(7 downto 0);
  signal delay1_q_net_x9: std_logic_vector(7 downto 0);
  signal delay_q_net_x1: std_logic;
  signal delay_q_net_x2: std_logic;
  signal delay_sync_q_net_x8: std_logic;
  signal mult_p_net_x10: std_logic_vector(25 downto 0);
  signal mult_p_net_x11: std_logic_vector(25 downto 0);
  signal mult_p_net_x12: std_logic_vector(25 downto 0);
  signal mult_p_net_x13: std_logic_vector(25 downto 0);
  signal mult_p_net_x14: std_logic_vector(25 downto 0);
  signal mult_p_net_x15: std_logic_vector(25 downto 0);
  signal mult_p_net_x16: std_logic_vector(25 downto 0);
  signal mult_p_net_x17: std_logic_vector(25 downto 0);
  signal mult_p_net_x2: std_logic_vector(25 downto 0);
  signal mult_p_net_x3: std_logic_vector(25 downto 0);
  signal mult_p_net_x4: std_logic_vector(25 downto 0);
  signal mult_p_net_x5: std_logic_vector(25 downto 0);
  signal mult_p_net_x6: std_logic_vector(25 downto 0);
  signal mult_p_net_x7: std_logic_vector(25 downto 0);
  signal mult_p_net_x8: std_logic_vector(25 downto 0);
  signal mult_p_net_x9: std_logic_vector(25 downto 0);
  signal mux_y_net_x2: std_logic;
  signal register_q_net_x1: std_logic_vector(35 downto 0);
  signal register_q_net_x2: std_logic_vector(35 downto 0);
  signal register_q_net_x3: std_logic_vector(35 downto 0);
  signal register_q_net_x4: std_logic_vector(35 downto 0);
  signal register_q_net_x5: std_logic_vector(35 downto 0);
  signal register_q_net_x6: std_logic_vector(35 downto 0);
  signal register_q_net_x7: std_logic_vector(35 downto 0);
  signal register_q_net_x8: std_logic_vector(35 downto 0);
  signal reinterpret1_output_port_net_x3: std_logic_vector(7 downto 0);
  signal reinterpret1_output_port_net_x4: std_logic_vector(7 downto 0);
  signal reinterpret2_output_port_net_x3: std_logic_vector(7 downto 0);
  signal reinterpret2_output_port_net_x4: std_logic_vector(7 downto 0);
  signal reinterpret3_output_port_net_x3: std_logic_vector(7 downto 0);
  signal reinterpret3_output_port_net_x4: std_logic_vector(7 downto 0);
  signal reinterpret4_output_port_net_x3: std_logic_vector(7 downto 0);
  signal reinterpret4_output_port_net_x4: std_logic_vector(7 downto 0);
  signal scale_1_1_op_net: std_logic_vector(25 downto 0);
  signal scale_1_2_op_net: std_logic_vector(25 downto 0);
  signal scale_1_3_op_net: std_logic_vector(25 downto 0);
  signal scale_1_4_op_net: std_logic_vector(25 downto 0);
  signal scale_2_1_op_net: std_logic_vector(25 downto 0);
  signal scale_2_2_op_net: std_logic_vector(25 downto 0);
  signal scale_2_3_op_net: std_logic_vector(25 downto 0);
  signal scale_2_4_op_net: std_logic_vector(25 downto 0);
  signal single_port_ram_data_out_net_x2: std_logic_vector(7 downto 0);
  signal single_port_ram_data_out_net_x3: std_logic_vector(7 downto 0);
  signal single_port_ram_data_out_net_x4: std_logic_vector(7 downto 0);
  signal single_port_ram_data_out_net_x5: std_logic_vector(7 downto 0);
  signal single_port_ram_data_out_net_x6: std_logic_vector(7 downto 0);
  signal single_port_ram_data_out_net_x7: std_logic_vector(7 downto 0);
  signal single_port_ram_data_out_net_x8: std_logic_vector(7 downto 0);
  signal single_port_ram_data_out_net_x9: std_logic_vector(7 downto 0);
  signal slice1_y_net_x1: std_logic_vector(17 downto 0);
  signal slice1_y_net_x2: std_logic_vector(17 downto 0);
  signal slice1_y_net_x3: std_logic_vector(17 downto 0);
  signal slice1_y_net_x4: std_logic_vector(17 downto 0);
  signal slice1_y_net_x5: std_logic_vector(17 downto 0);
  signal slice1_y_net_x6: std_logic_vector(17 downto 0);
  signal slice1_y_net_x7: std_logic_vector(17 downto 0);
  signal slice1_y_net_x8: std_logic_vector(17 downto 0);
  signal sync_delay_q_net_x0: std_logic;

begin
  ce_1_sg_x490 <= ce_1;
  clk_1_sg_x490 <= clk_1;
  reinterpret4_output_port_net_x4 <= pol1_in1;
  reinterpret3_output_port_net_x4 <= pol1_in2;
  reinterpret2_output_port_net_x4 <= pol1_in3;
  reinterpret1_output_port_net_x4 <= pol1_in4;
  reinterpret4_output_port_net_x3 <= pol2_in1;
  reinterpret3_output_port_net_x3 <= pol2_in2;
  reinterpret2_output_port_net_x3 <= pol2_in3;
  reinterpret1_output_port_net_x3 <= pol2_in4;
  delay_sync_q_net_x8 <= sync;
  pol1_out1 <= convert_1_1_dout_net_x1;
  pol1_out2 <= convert_1_2_dout_net_x1;
  pol1_out3 <= convert_1_3_dout_net_x1;
  pol1_out4 <= convert_1_4_dout_net_x1;
  pol2_out1 <= convert_2_1_dout_net_x1;
  pol2_out2 <= convert_2_2_dout_net_x1;
  pol2_out3 <= convert_2_3_dout_net_x1;
  pol2_out4 <= convert_2_4_dout_net_x1;
  sync_out <= delay1_q_net_x10;

  adder_1_1_13a6851d97: entity work.adder_1_1_entity_13a6851d97
    port map (
      ce_1 => ce_1_sg_x490,
      clk_1 => clk_1_sg_x490,
      din1 => mult_p_net_x2,
      din2 => mult_p_net_x3,
      sync => delay_q_net_x1,
      dout => addr1_s_net_x0,
      sync_out => sync_delay_q_net_x0
    );

  adder_1_2_59287c1711: entity work.adder_1_2_entity_59287c1711
    port map (
      ce_1 => ce_1_sg_x490,
      clk_1 => clk_1_sg_x490,
      din1 => mult_p_net_x4,
      din2 => mult_p_net_x5,
      dout => addr1_s_net_x1
    );

  adder_1_3_381c1e8a2d: entity work.adder_1_2_entity_59287c1711
    port map (
      ce_1 => ce_1_sg_x490,
      clk_1 => clk_1_sg_x490,
      din1 => mult_p_net_x6,
      din2 => mult_p_net_x7,
      dout => addr1_s_net_x2
    );

  adder_1_4_8da36f3793: entity work.adder_1_2_entity_59287c1711
    port map (
      ce_1 => ce_1_sg_x490,
      clk_1 => clk_1_sg_x490,
      din1 => mult_p_net_x8,
      din2 => mult_p_net_x9,
      dout => addr1_s_net_x3
    );

  adder_2_1_6847588ad1: entity work.adder_1_2_entity_59287c1711
    port map (
      ce_1 => ce_1_sg_x490,
      clk_1 => clk_1_sg_x490,
      din1 => mult_p_net_x10,
      din2 => mult_p_net_x11,
      dout => addr1_s_net_x4
    );

  adder_2_2_477c794ec9: entity work.adder_1_2_entity_59287c1711
    port map (
      ce_1 => ce_1_sg_x490,
      clk_1 => clk_1_sg_x490,
      din1 => mult_p_net_x12,
      din2 => mult_p_net_x13,
      dout => addr1_s_net_x5
    );

  adder_2_3_1e24dff8d7: entity work.adder_1_2_entity_59287c1711
    port map (
      ce_1 => ce_1_sg_x490,
      clk_1 => clk_1_sg_x490,
      din1 => mult_p_net_x14,
      din2 => mult_p_net_x15,
      dout => addr1_s_net_x6
    );

  adder_2_4_a18cf77529: entity work.adder_1_2_entity_59287c1711
    port map (
      ce_1 => ce_1_sg_x490,
      clk_1 => clk_1_sg_x490,
      din1 => mult_p_net_x16,
      din2 => mult_p_net_x17,
      dout => addr1_s_net_x7
    );

  convert_1_1: entity work.xlconvert_pipeline
    generic map (
      bool_conversion => 0,
      din_arith => 2,
      din_bin_pt => 25,
      din_width => 26,
      dout_arith => 2,
      dout_bin_pt => 17,
      dout_width => 18,
      latency => 1,
      overflow => xlWrap,
      quantization => xlRoundBanker
    )
    port map (
      ce => ce_1_sg_x490,
      clk => clk_1_sg_x490,
      clr => '0',
      din => scale_1_1_op_net,
      en => "1",
      dout => convert_1_1_dout_net_x1
    );

  convert_1_2: entity work.xlconvert_pipeline
    generic map (
      bool_conversion => 0,
      din_arith => 2,
      din_bin_pt => 25,
      din_width => 26,
      dout_arith => 2,
      dout_bin_pt => 17,
      dout_width => 18,
      latency => 1,
      overflow => xlWrap,
      quantization => xlRoundBanker
    )
    port map (
      ce => ce_1_sg_x490,
      clk => clk_1_sg_x490,
      clr => '0',
      din => scale_1_2_op_net,
      en => "1",
      dout => convert_1_2_dout_net_x1
    );

  convert_1_3: entity work.xlconvert_pipeline
    generic map (
      bool_conversion => 0,
      din_arith => 2,
      din_bin_pt => 25,
      din_width => 26,
      dout_arith => 2,
      dout_bin_pt => 17,
      dout_width => 18,
      latency => 1,
      overflow => xlWrap,
      quantization => xlRoundBanker
    )
    port map (
      ce => ce_1_sg_x490,
      clk => clk_1_sg_x490,
      clr => '0',
      din => scale_1_3_op_net,
      en => "1",
      dout => convert_1_3_dout_net_x1
    );

  convert_1_4: entity work.xlconvert_pipeline
    generic map (
      bool_conversion => 0,
      din_arith => 2,
      din_bin_pt => 25,
      din_width => 26,
      dout_arith => 2,
      dout_bin_pt => 17,
      dout_width => 18,
      latency => 1,
      overflow => xlWrap,
      quantization => xlRoundBanker
    )
    port map (
      ce => ce_1_sg_x490,
      clk => clk_1_sg_x490,
      clr => '0',
      din => scale_1_4_op_net,
      en => "1",
      dout => convert_1_4_dout_net_x1
    );

  convert_2_1: entity work.xlconvert_pipeline
    generic map (
      bool_conversion => 0,
      din_arith => 2,
      din_bin_pt => 25,
      din_width => 26,
      dout_arith => 2,
      dout_bin_pt => 17,
      dout_width => 18,
      latency => 1,
      overflow => xlWrap,
      quantization => xlRoundBanker
    )
    port map (
      ce => ce_1_sg_x490,
      clk => clk_1_sg_x490,
      clr => '0',
      din => scale_2_1_op_net,
      en => "1",
      dout => convert_2_1_dout_net_x1
    );

  convert_2_2: entity work.xlconvert_pipeline
    generic map (
      bool_conversion => 0,
      din_arith => 2,
      din_bin_pt => 25,
      din_width => 26,
      dout_arith => 2,
      dout_bin_pt => 17,
      dout_width => 18,
      latency => 1,
      overflow => xlWrap,
      quantization => xlRoundBanker
    )
    port map (
      ce => ce_1_sg_x490,
      clk => clk_1_sg_x490,
      clr => '0',
      din => scale_2_2_op_net,
      en => "1",
      dout => convert_2_2_dout_net_x1
    );

  convert_2_3: entity work.xlconvert_pipeline
    generic map (
      bool_conversion => 0,
      din_arith => 2,
      din_bin_pt => 25,
      din_width => 26,
      dout_arith => 2,
      dout_bin_pt => 17,
      dout_width => 18,
      latency => 1,
      overflow => xlWrap,
      quantization => xlRoundBanker
    )
    port map (
      ce => ce_1_sg_x490,
      clk => clk_1_sg_x490,
      clr => '0',
      din => scale_2_3_op_net,
      en => "1",
      dout => convert_2_3_dout_net_x1
    );

  convert_2_4: entity work.xlconvert_pipeline
    generic map (
      bool_conversion => 0,
      din_arith => 2,
      din_bin_pt => 25,
      din_width => 26,
      dout_arith => 2,
      dout_bin_pt => 17,
      dout_width => 18,
      latency => 1,
      overflow => xlWrap,
      quantization => xlRoundBanker
    )
    port map (
      ce => ce_1_sg_x490,
      clk => clk_1_sg_x490,
      clr => '0',
      din => scale_2_4_op_net,
      en => "1",
      dout => convert_2_4_dout_net_x1
    );

  delay1: entity work.xldelay
    generic map (
      latency => 1,
      reg_retiming => 0,
      reset => 0,
      width => 1
    )
    port map (
      ce => ce_1_sg_x490,
      clk => clk_1_sg_x490,
      d(0) => sync_delay_q_net_x0,
      en => '1',
      rst => '1',
      q(0) => delay1_q_net_x10
    );

  pol1_in1_coeffs_c8afea88ae: entity work.pol1_in1_coeffs_entity_c8afea88ae
    port map (
      ce_1 => ce_1_sg_x490,
      clk_1 => clk_1_sg_x490,
      din => reinterpret4_output_port_net_x4,
      sync => delay_sync_q_net_x8,
      coeff => register_q_net_x1,
      dout => delay1_q_net_x2,
      sync_out => delay_q_net_x2
    );

  pol1_in1_first_tap_5927e1c3d2: entity work.pol1_in1_first_tap_entity_5927e1c3d2
    port map (
      ce_1 => ce_1_sg_x490,
      clk_1 => clk_1_sg_x490,
      coeffs => register_q_net_x1,
      din => delay1_q_net_x2,
      sync => delay_q_net_x2,
      coeff_out => slice1_y_net_x1,
      dout => single_port_ram_data_out_net_x2,
      sync_out => mux_y_net_x2,
      taps_out => mult_p_net_x2
    );

  pol1_in1_last_tap_ca67f62992: entity work.pol1_in1_last_tap_entity_ca67f62992
    port map (
      ce_1 => ce_1_sg_x490,
      clk_1 => clk_1_sg_x490,
      coeff => slice1_y_net_x1,
      din => single_port_ram_data_out_net_x2,
      sync => mux_y_net_x2,
      sync_out => delay_q_net_x1,
      tap_out => mult_p_net_x3
    );

  pol1_in2_coeffs_7f5932e35b: entity work.pol1_in2_coeffs_entity_7f5932e35b
    port map (
      ce_1 => ce_1_sg_x490,
      clk_1 => clk_1_sg_x490,
      din => reinterpret3_output_port_net_x4,
      sync => delay_sync_q_net_x8,
      coeff => register_q_net_x2,
      dout => delay1_q_net_x3
    );

  pol1_in2_first_tap_54cafea8b2: entity work.pol1_in2_first_tap_entity_54cafea8b2
    port map (
      ce_1 => ce_1_sg_x490,
      clk_1 => clk_1_sg_x490,
      coeffs => register_q_net_x2,
      din => delay1_q_net_x3,
      coeff_out => slice1_y_net_x2,
      dout => single_port_ram_data_out_net_x3,
      taps_out => mult_p_net_x4
    );

  pol1_in2_last_tap_3d20e72b5f: entity work.pol1_in2_last_tap_entity_3d20e72b5f
    port map (
      ce_1 => ce_1_sg_x490,
      clk_1 => clk_1_sg_x490,
      coeff => slice1_y_net_x2,
      din => single_port_ram_data_out_net_x3,
      tap_out => mult_p_net_x5
    );

  pol1_in3_coeffs_37d644e242: entity work.pol1_in3_coeffs_entity_37d644e242
    port map (
      ce_1 => ce_1_sg_x490,
      clk_1 => clk_1_sg_x490,
      din => reinterpret2_output_port_net_x4,
      sync => delay_sync_q_net_x8,
      coeff => register_q_net_x3,
      dout => delay1_q_net_x4
    );

  pol1_in3_first_tap_03601c15e7: entity work.pol1_in2_first_tap_entity_54cafea8b2
    port map (
      ce_1 => ce_1_sg_x490,
      clk_1 => clk_1_sg_x490,
      coeffs => register_q_net_x3,
      din => delay1_q_net_x4,
      coeff_out => slice1_y_net_x3,
      dout => single_port_ram_data_out_net_x4,
      taps_out => mult_p_net_x6
    );

  pol1_in3_last_tap_23caf883ed: entity work.pol1_in2_last_tap_entity_3d20e72b5f
    port map (
      ce_1 => ce_1_sg_x490,
      clk_1 => clk_1_sg_x490,
      coeff => slice1_y_net_x3,
      din => single_port_ram_data_out_net_x4,
      tap_out => mult_p_net_x7
    );

  pol1_in4_coeffs_21b114648a: entity work.pol1_in4_coeffs_entity_21b114648a
    port map (
      ce_1 => ce_1_sg_x490,
      clk_1 => clk_1_sg_x490,
      din => reinterpret1_output_port_net_x4,
      sync => delay_sync_q_net_x8,
      coeff => register_q_net_x4,
      dout => delay1_q_net_x5
    );

  pol1_in4_first_tap_baa6d27c64: entity work.pol1_in2_first_tap_entity_54cafea8b2
    port map (
      ce_1 => ce_1_sg_x490,
      clk_1 => clk_1_sg_x490,
      coeffs => register_q_net_x4,
      din => delay1_q_net_x5,
      coeff_out => slice1_y_net_x4,
      dout => single_port_ram_data_out_net_x5,
      taps_out => mult_p_net_x8
    );

  pol1_in4_last_tap_9dcfddb3fb: entity work.pol1_in2_last_tap_entity_3d20e72b5f
    port map (
      ce_1 => ce_1_sg_x490,
      clk_1 => clk_1_sg_x490,
      coeff => slice1_y_net_x4,
      din => single_port_ram_data_out_net_x5,
      tap_out => mult_p_net_x9
    );

  pol2_in1_coeffs_0ba1f52945: entity work.pol2_in1_coeffs_entity_0ba1f52945
    port map (
      ce_1 => ce_1_sg_x490,
      clk_1 => clk_1_sg_x490,
      din => reinterpret4_output_port_net_x3,
      sync => delay_sync_q_net_x8,
      coeff => register_q_net_x5,
      dout => delay1_q_net_x6
    );

  pol2_in1_first_tap_2b4314a0aa: entity work.pol1_in2_first_tap_entity_54cafea8b2
    port map (
      ce_1 => ce_1_sg_x490,
      clk_1 => clk_1_sg_x490,
      coeffs => register_q_net_x5,
      din => delay1_q_net_x6,
      coeff_out => slice1_y_net_x5,
      dout => single_port_ram_data_out_net_x6,
      taps_out => mult_p_net_x10
    );

  pol2_in1_last_tap_6ff8b80765: entity work.pol1_in2_last_tap_entity_3d20e72b5f
    port map (
      ce_1 => ce_1_sg_x490,
      clk_1 => clk_1_sg_x490,
      coeff => slice1_y_net_x5,
      din => single_port_ram_data_out_net_x6,
      tap_out => mult_p_net_x11
    );

  pol2_in2_coeffs_6c55d0e788: entity work.pol1_in2_coeffs_entity_7f5932e35b
    port map (
      ce_1 => ce_1_sg_x490,
      clk_1 => clk_1_sg_x490,
      din => reinterpret3_output_port_net_x3,
      sync => delay_sync_q_net_x8,
      coeff => register_q_net_x6,
      dout => delay1_q_net_x7
    );

  pol2_in2_first_tap_27fa8a42e8: entity work.pol1_in2_first_tap_entity_54cafea8b2
    port map (
      ce_1 => ce_1_sg_x490,
      clk_1 => clk_1_sg_x490,
      coeffs => register_q_net_x6,
      din => delay1_q_net_x7,
      coeff_out => slice1_y_net_x6,
      dout => single_port_ram_data_out_net_x7,
      taps_out => mult_p_net_x12
    );

  pol2_in2_last_tap_29d43901e7: entity work.pol1_in2_last_tap_entity_3d20e72b5f
    port map (
      ce_1 => ce_1_sg_x490,
      clk_1 => clk_1_sg_x490,
      coeff => slice1_y_net_x6,
      din => single_port_ram_data_out_net_x7,
      tap_out => mult_p_net_x13
    );

  pol2_in3_coeffs_587b3ffd23: entity work.pol1_in3_coeffs_entity_37d644e242
    port map (
      ce_1 => ce_1_sg_x490,
      clk_1 => clk_1_sg_x490,
      din => reinterpret2_output_port_net_x3,
      sync => delay_sync_q_net_x8,
      coeff => register_q_net_x7,
      dout => delay1_q_net_x8
    );

  pol2_in3_first_tap_c2f39dd85f: entity work.pol1_in2_first_tap_entity_54cafea8b2
    port map (
      ce_1 => ce_1_sg_x490,
      clk_1 => clk_1_sg_x490,
      coeffs => register_q_net_x7,
      din => delay1_q_net_x8,
      coeff_out => slice1_y_net_x7,
      dout => single_port_ram_data_out_net_x8,
      taps_out => mult_p_net_x14
    );

  pol2_in3_last_tap_a2568c50ff: entity work.pol1_in2_last_tap_entity_3d20e72b5f
    port map (
      ce_1 => ce_1_sg_x490,
      clk_1 => clk_1_sg_x490,
      coeff => slice1_y_net_x7,
      din => single_port_ram_data_out_net_x8,
      tap_out => mult_p_net_x15
    );

  pol2_in4_coeffs_8ce587ee14: entity work.pol1_in4_coeffs_entity_21b114648a
    port map (
      ce_1 => ce_1_sg_x490,
      clk_1 => clk_1_sg_x490,
      din => reinterpret1_output_port_net_x3,
      sync => delay_sync_q_net_x8,
      coeff => register_q_net_x8,
      dout => delay1_q_net_x9
    );

  pol2_in4_first_tap_66bf157440: entity work.pol1_in2_first_tap_entity_54cafea8b2
    port map (
      ce_1 => ce_1_sg_x490,
      clk_1 => clk_1_sg_x490,
      coeffs => register_q_net_x8,
      din => delay1_q_net_x9,
      coeff_out => slice1_y_net_x8,
      dout => single_port_ram_data_out_net_x9,
      taps_out => mult_p_net_x16
    );

  pol2_in4_last_tap_6e0294821f: entity work.pol1_in2_last_tap_entity_3d20e72b5f
    port map (
      ce_1 => ce_1_sg_x490,
      clk_1 => clk_1_sg_x490,
      coeff => slice1_y_net_x8,
      din => single_port_ram_data_out_net_x9,
      tap_out => mult_p_net_x17
    );

  scale_1_1: entity work.scale_f01f7ce486
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      ip => addr1_s_net_x0,
      op => scale_1_1_op_net
    );

  scale_1_2: entity work.scale_f01f7ce486
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      ip => addr1_s_net_x1,
      op => scale_1_2_op_net
    );

  scale_1_3: entity work.scale_f01f7ce486
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      ip => addr1_s_net_x2,
      op => scale_1_3_op_net
    );

  scale_1_4: entity work.scale_f01f7ce486
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      ip => addr1_s_net_x3,
      op => scale_1_4_op_net
    );

  scale_2_1: entity work.scale_f01f7ce486
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      ip => addr1_s_net_x4,
      op => scale_2_1_op_net
    );

  scale_2_2: entity work.scale_f01f7ce486
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      ip => addr1_s_net_x5,
      op => scale_2_2_op_net
    );

  scale_2_3: entity work.scale_f01f7ce486
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      ip => addr1_s_net_x6,
      op => scale_2_3_op_net
    );

  scale_2_4: entity work.scale_f01f7ce486
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      ip => addr1_s_net_x7,
      op => scale_2_4_op_net
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/coarse"

entity coarse_entity_a91220dfb7 is
  port (
    ce_1: in std_logic; 
    channel_select: in std_logic_vector(9 downto 0); 
    clk_1: in std_logic; 
    data0: in std_logic_vector(31 downto 0); 
    data1: in std_logic_vector(31 downto 0); 
    debug_chan: in std_logic_vector(5 downto 0); 
    debug_chansel: in std_logic; 
    debug_polsel: in std_logic; 
    fft_shift: in std_logic_vector(9 downto 0); 
    sync: in std_logic; 
    data_out: out std_logic_vector(71 downto 0); 
    fft_of0: out std_logic; 
    fft_of1: out std_logic; 
    snap72: out std_logic_vector(73 downto 0); 
    sync_out: out std_logic
  );
end coarse_entity_a91220dfb7;

architecture structural of coarse_entity_a91220dfb7 is
  signal bram0_data_out_net_x3: std_logic_vector(35 downto 0);
  signal bram0_data_out_net_x4: std_logic_vector(35 downto 0);
  signal bram1_data_out_net_x3: std_logic_vector(35 downto 0);
  signal bram1_data_out_net_x4: std_logic_vector(35 downto 0);
  signal ce_1_sg_x491: std_logic;
  signal clk_1_sg_x491: std_logic;
  signal concatenate_y_net_x16: std_logic_vector(71 downto 0);
  signal concatenate_y_net_x17: std_logic_vector(71 downto 0);
  signal concatenate_y_net_x19: std_logic_vector(31 downto 0);
  signal concatenate_y_net_x20: std_logic_vector(31 downto 0);
  signal concatenate_y_net_x21: std_logic_vector(73 downto 0);
  signal concatenate_y_net_x3: std_logic_vector(71 downto 0);
  signal convert_1_1_dout_net_x1: std_logic_vector(17 downto 0);
  signal convert_1_2_dout_net_x1: std_logic_vector(17 downto 0);
  signal convert_1_3_dout_net_x1: std_logic_vector(17 downto 0);
  signal convert_1_4_dout_net_x1: std_logic_vector(17 downto 0);
  signal convert_2_1_dout_net_x1: std_logic_vector(17 downto 0);
  signal convert_2_2_dout_net_x1: std_logic_vector(17 downto 0);
  signal convert_2_3_dout_net_x1: std_logic_vector(17 downto 0);
  signal convert_2_4_dout_net_x1: std_logic_vector(17 downto 0);
  signal delay1_q_net_x0: std_logic;
  signal delay1_q_net_x10: std_logic;
  signal delay2_q_net_x1: std_logic;
  signal delay3_q_net_x1: std_logic;
  signal delay_q_net_x2: std_logic;
  signal delay_q_net_x3: std_logic;
  signal delay_sync_q_net_x9: std_logic;
  signal mux1_y_net_x0: std_logic_vector(35 downto 0);
  signal mux2_y_net_x0: std_logic_vector(35 downto 0);
  signal of_or_y_net_x1: std_logic;
  signal of_or_y_net_x2: std_logic;
  signal post_sync_delay_q_net_x3: std_logic;
  signal reinterpret1_output_port_net_x3: std_logic_vector(7 downto 0);
  signal reinterpret1_output_port_net_x4: std_logic_vector(7 downto 0);
  signal reinterpret2_output_port_net_x3: std_logic_vector(7 downto 0);
  signal reinterpret2_output_port_net_x4: std_logic_vector(7 downto 0);
  signal reinterpret3_output_port_net_x3: std_logic_vector(7 downto 0);
  signal reinterpret3_output_port_net_x4: std_logic_vector(7 downto 0);
  signal reinterpret4_output_port_net_x3: std_logic_vector(7 downto 0);
  signal reinterpret4_output_port_net_x4: std_logic_vector(7 downto 0);
  signal shift1_op_net_x2: std_logic_vector(17 downto 0);
  signal shift1_op_net_x3: std_logic_vector(17 downto 0);
  signal shift2_op_net_x2: std_logic_vector(17 downto 0);
  signal shift2_op_net_x3: std_logic_vector(17 downto 0);
  signal shift3_op_net_x2: std_logic_vector(17 downto 0);
  signal shift3_op_net_x3: std_logic_vector(17 downto 0);
  signal shift4_op_net_x2: std_logic_vector(17 downto 0);
  signal shift4_op_net_x3: std_logic_vector(17 downto 0);
  signal slice17_y_net_x1: std_logic;
  signal slice18_y_net_x1: std_logic;
  signal slice19_y_net_x1: std_logic_vector(5 downto 0);
  signal slice21_y_net_x0: std_logic_vector(9 downto 0);
  signal slice3_y_net: std_logic;
  signal slice6_y_net_x20: std_logic_vector(9 downto 0);

begin
  ce_1_sg_x491 <= ce_1;
  slice21_y_net_x0 <= channel_select;
  clk_1_sg_x491 <= clk_1;
  concatenate_y_net_x20 <= data0;
  concatenate_y_net_x19 <= data1;
  slice19_y_net_x1 <= debug_chan;
  slice18_y_net_x1 <= debug_chansel;
  slice17_y_net_x1 <= debug_polsel;
  slice6_y_net_x20 <= fft_shift;
  delay_sync_q_net_x9 <= sync;
  data_out <= concatenate_y_net_x3;
  fft_of0 <= delay2_q_net_x1;
  fft_of1 <= delay3_q_net_x1;
  snap72 <= concatenate_y_net_x21;
  sync_out <= delay1_q_net_x0;

  bus_create1_3f464d45e8: entity work.bus_create1_entity_3f464d45e8
    port map (
      in1 => bram0_data_out_net_x4,
      in2 => bram1_data_out_net_x4,
      bus_out => concatenate_y_net_x16
    );

  bus_create2_342ca7abf4: entity work.bus_create1_entity_3f464d45e8
    port map (
      in1 => mux1_y_net_x0,
      in2 => mux2_y_net_x0,
      bus_out => concatenate_y_net_x3
    );

  bus_create4_5480fff498: entity work.bus_create1_entity_3f464d45e8
    port map (
      in1 => bram0_data_out_net_x3,
      in2 => bram1_data_out_net_x3,
      bus_out => concatenate_y_net_x17
    );

  bus_expand1_4a80f53028: entity work.bus_expand1_entity_4a80f53028
    port map (
      bus_in => concatenate_y_net_x19,
      lsb_out1 => reinterpret1_output_port_net_x3,
      msb_out4 => reinterpret4_output_port_net_x3,
      out2 => reinterpret2_output_port_net_x3,
      out3 => reinterpret3_output_port_net_x3
    );

  bus_expand2_e85f2e4e78: entity work.bus_expand1_entity_4a80f53028
    port map (
      bus_in => concatenate_y_net_x20,
      lsb_out1 => reinterpret1_output_port_net_x4,
      msb_out4 => reinterpret4_output_port_net_x4,
      out2 => reinterpret2_output_port_net_x4,
      out3 => reinterpret3_output_port_net_x4
    );

  crs_snap_70bbc1e976: entity work.crs_snap_entity_70bbc1e976
    port map (
      ce_1 => ce_1_sg_x491,
      clk_1 => clk_1_sg_x491,
      data_pol0 => concatenate_y_net_x17,
      data_pol1 => concatenate_y_net_x16,
      pol_select => slice17_y_net_x1,
      select_chan => slice18_y_net_x1,
      selected_chan => slice19_y_net_x1,
      sync => post_sync_delay_q_net_x3,
      coarse_debug => concatenate_y_net_x21
    );

  delay1: entity work.delay_9f02caa990
    port map (
      ce => ce_1_sg_x491,
      clk => clk_1_sg_x491,
      clr => '0',
      d(0) => post_sync_delay_q_net_x3,
      q(0) => delay1_q_net_x0
    );

  delay2: entity work.delay_9f02caa990
    port map (
      ce => ce_1_sg_x491,
      clk => clk_1_sg_x491,
      clr => '0',
      d(0) => of_or_y_net_x1,
      q(0) => delay2_q_net_x1
    );

  delay3: entity work.delay_9f02caa990
    port map (
      ce => ce_1_sg_x491,
      clk => clk_1_sg_x491,
      clr => '0',
      d(0) => of_or_y_net_x2,
      q(0) => delay3_q_net_x1
    );

  fft_wideband_real0_c512b4816a: entity work.fft_wideband_real0_entity_c512b4816a
    port map (
      ce_1 => ce_1_sg_x491,
      clk_1 => clk_1_sg_x491,
      in0 => shift3_op_net_x2,
      in1 => shift1_op_net_x2,
      in2 => shift2_op_net_x2,
      in3 => shift4_op_net_x2,
      shift => slice6_y_net_x20,
      sync => delay_q_net_x2,
      of_x0 => of_or_y_net_x1,
      out0 => bram0_data_out_net_x3,
      out1 => bram1_data_out_net_x3,
      sync_out => post_sync_delay_q_net_x3
    );

  fft_wideband_real1_9c10afbb70: entity work.fft_wideband_real1_entity_9c10afbb70
    port map (
      ce_1 => ce_1_sg_x491,
      clk_1 => clk_1_sg_x491,
      in0 => shift3_op_net_x3,
      in1 => shift1_op_net_x3,
      in2 => shift2_op_net_x3,
      in3 => shift4_op_net_x3,
      shift => slice6_y_net_x20,
      sync => delay_q_net_x3,
      of_x0 => of_or_y_net_x2,
      out0 => bram0_data_out_net_x4,
      out1 => bram1_data_out_net_x4
    );

  mux1: entity work.mux_4bb6f691f7
    port map (
      ce => ce_1_sg_x491,
      clk => clk_1_sg_x491,
      clr => '0',
      d0 => bram0_data_out_net_x3,
      d1 => bram1_data_out_net_x3,
      sel(0) => slice3_y_net,
      y => mux1_y_net_x0
    );

  mux2: entity work.mux_4bb6f691f7
    port map (
      ce => ce_1_sg_x491,
      clk => clk_1_sg_x491,
      clr => '0',
      d0 => bram0_data_out_net_x4,
      d1 => bram1_data_out_net_x4,
      sel(0) => slice3_y_net,
      y => mux2_y_net_x0
    );

  pfb_fir_real_63f9757e89: entity work.pfb_fir_real_entity_63f9757e89
    port map (
      ce_1 => ce_1_sg_x491,
      clk_1 => clk_1_sg_x491,
      pol1_in1 => reinterpret4_output_port_net_x4,
      pol1_in2 => reinterpret3_output_port_net_x4,
      pol1_in3 => reinterpret2_output_port_net_x4,
      pol1_in4 => reinterpret1_output_port_net_x4,
      pol2_in1 => reinterpret4_output_port_net_x3,
      pol2_in2 => reinterpret3_output_port_net_x3,
      pol2_in3 => reinterpret2_output_port_net_x3,
      pol2_in4 => reinterpret1_output_port_net_x3,
      sync => delay_sync_q_net_x9,
      pol1_out1 => convert_1_1_dout_net_x1,
      pol1_out2 => convert_1_2_dout_net_x1,
      pol1_out3 => convert_1_3_dout_net_x1,
      pol1_out4 => convert_1_4_dout_net_x1,
      pol2_out1 => convert_2_1_dout_net_x1,
      pol2_out2 => convert_2_2_dout_net_x1,
      pol2_out3 => convert_2_3_dout_net_x1,
      pol2_out4 => convert_2_4_dout_net_x1,
      sync_out => delay1_q_net_x10
    );

  slice3: entity work.xlslice
    generic map (
      new_lsb => 0,
      new_msb => 0,
      x_width => 10,
      y_width => 1
    )
    port map (
      x => slice21_y_net_x0,
      y(0) => slice3_y_net
    );

  x1st_shift1_f043d74227: entity work.x1st_shift_entity_9909f3ebcd
    port map (
      ce_1 => ce_1_sg_x491,
      clk_1 => clk_1_sg_x491,
      din1 => convert_2_1_dout_net_x1,
      din2 => convert_2_2_dout_net_x1,
      din3 => convert_2_3_dout_net_x1,
      din4 => convert_2_4_dout_net_x1,
      sync_in => delay1_q_net_x10,
      dout1 => shift3_op_net_x3,
      dout2 => shift1_op_net_x3,
      dout3 => shift2_op_net_x3,
      dout4 => shift4_op_net_x3,
      sync_out => delay_q_net_x3
    );

  x1st_shift_9909f3ebcd: entity work.x1st_shift_entity_9909f3ebcd
    port map (
      ce_1 => ce_1_sg_x491,
      clk_1 => clk_1_sg_x491,
      din1 => convert_1_1_dout_net_x1,
      din2 => convert_1_2_dout_net_x1,
      din3 => convert_1_3_dout_net_x1,
      din4 => convert_1_4_dout_net_x1,
      sync_in => delay1_q_net_x10,
      dout1 => shift3_op_net_x2,
      dout2 => shift1_op_net_x2,
      dout3 => shift2_op_net_x2,
      dout4 => shift4_op_net_x2,
      sync_out => delay_q_net_x2
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/coarse_delay/bus_create1"

entity bus_create1_entity_e610e729f9 is
  port (
    in1: in std_logic; 
    in2: in std_logic_vector(31 downto 0); 
    bus_out: out std_logic_vector(32 downto 0)
  );
end bus_create1_entity_e610e729f9;

architecture structural of bus_create1_entity_e610e729f9 is
  signal concatenate_y_net_x0: std_logic_vector(32 downto 0);
  signal delay1_q_net_x1: std_logic;
  signal reinterpret1_output_port_net: std_logic;
  signal reinterpret2_output_port_net: std_logic_vector(31 downto 0);
  signal reinterpret2_output_port_net_x1: std_logic_vector(31 downto 0);

begin
  delay1_q_net_x1 <= in1;
  reinterpret2_output_port_net_x1 <= in2;
  bus_out <= concatenate_y_net_x0;

  concatenate: entity work.concat_b3936f83fc
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      in0(0) => reinterpret1_output_port_net,
      in1 => reinterpret2_output_port_net,
      y => concatenate_y_net_x0
    );

  reinterpret1: entity work.reinterpret_112d91c147
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port(0) => delay1_q_net_x1,
      output_port(0) => reinterpret1_output_port_net
    );

  reinterpret2: entity work.reinterpret_c5d4d59b73
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => reinterpret2_output_port_net_x1,
      output_port => reinterpret2_output_port_net
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/coarse_delay/bus_create2"

entity bus_create2_entity_72ad0630e7 is
  port (
    in1: in std_logic_vector(7 downto 0); 
    in2: in std_logic_vector(7 downto 0); 
    in3: in std_logic_vector(7 downto 0); 
    in4: in std_logic_vector(7 downto 0); 
    bus_out: out std_logic_vector(31 downto 0)
  );
end bus_create2_entity_72ad0630e7;

architecture structural of bus_create2_entity_72ad0630e7 is
  signal concatenate_y_net_x20: std_logic_vector(31 downto 0);
  signal mux12_y_net_x0: std_logic_vector(7 downto 0);
  signal mux22_y_net_x0: std_logic_vector(7 downto 0);
  signal mux32_y_net_x0: std_logic_vector(7 downto 0);
  signal mux42_y_net_x0: std_logic_vector(7 downto 0);
  signal reinterpret1_output_port_net: std_logic_vector(7 downto 0);
  signal reinterpret2_output_port_net: std_logic_vector(7 downto 0);
  signal reinterpret3_output_port_net: std_logic_vector(7 downto 0);
  signal reinterpret4_output_port_net: std_logic_vector(7 downto 0);

begin
  mux42_y_net_x0 <= in1;
  mux32_y_net_x0 <= in2;
  mux22_y_net_x0 <= in3;
  mux12_y_net_x0 <= in4;
  bus_out <= concatenate_y_net_x20;

  concatenate: entity work.concat_a1e126f11c
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      in0 => reinterpret1_output_port_net,
      in1 => reinterpret2_output_port_net,
      in2 => reinterpret3_output_port_net,
      in3 => reinterpret4_output_port_net,
      y => concatenate_y_net_x20
    );

  reinterpret1: entity work.reinterpret_f21e7f2ddf
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => mux42_y_net_x0,
      output_port => reinterpret1_output_port_net
    );

  reinterpret2: entity work.reinterpret_f21e7f2ddf
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => mux32_y_net_x0,
      output_port => reinterpret2_output_port_net
    );

  reinterpret3: entity work.reinterpret_f21e7f2ddf
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => mux22_y_net_x0,
      output_port => reinterpret3_output_port_net
    );

  reinterpret4: entity work.reinterpret_f21e7f2ddf
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => mux12_y_net_x0,
      output_port => reinterpret4_output_port_net
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/coarse_delay/cd_tr"

entity cd_tr_entity_e556bbeffd is
  port (
    arm: in std_logic; 
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    current_time: in std_logic_vector(63 downto 0); 
    din: in std_logic_vector(32 downto 0); 
    load_now: in std_logic; 
    load_time: in std_logic_vector(47 downto 0); 
    load_value: in std_logic_vector(78 downto 0); 
    rst: in std_logic; 
    dout: out std_logic_vector(32 downto 0); 
    enable: out std_logic; 
    value: out std_logic_vector(78 downto 0)
  );
end cd_tr_entity_e556bbeffd;

architecture structural of cd_tr_entity_e556bbeffd is
  signal assert_dout_net: std_logic;
  signal ce_1_sg_x493: std_logic;
  signal clk_1_sg_x493: std_logic;
  signal clock_op_net_x1: std_logic_vector(63 downto 0);
  signal concat22_y_net_x0: std_logic_vector(78 downto 0);
  signal concat9_y_net_x0: std_logic_vector(47 downto 0);
  signal concatenate_y_net_x1: std_logic_vector(32 downto 0);
  signal delay3_q_net: std_logic;
  signal delay4_q_net: std_logic;
  signal delay6_q_net_x0: std_logic_vector(32 downto 0);
  signal delay6_q_net_x1: std_logic;
  signal delay7_q_net_x1: std_logic_vector(32 downto 0);
  signal delay_q_net_x0: std_logic;
  signal edge_op_y_net_x0: std_logic;
  signal inverter_op_net: std_logic;
  signal logical12_y_net_x1: std_logic;
  signal logical14_y_net_x2: std_logic;
  signal logical1_y_net: std_logic;
  signal logical2_y_net: std_logic;
  signal logical3_y_net: std_logic;
  signal logical4_y_net: std_logic;
  signal logical5_y_net: std_logic;
  signal register1_q_net: std_logic;
  signal register2_q_net: std_logic_vector(47 downto 0);
  signal register3_q_net: std_logic_vector(78 downto 0);
  signal register_q_net_x0: std_logic_vector(78 downto 0);
  signal relational_op_net: std_logic;
  signal slice2_y_net: std_logic_vector(47 downto 0);
  signal slice_y_net: std_logic_vector(47 downto 0);

begin
  logical12_y_net_x1 <= arm;
  ce_1_sg_x493 <= ce_1;
  clk_1_sg_x493 <= clk_1;
  clock_op_net_x1 <= current_time;
  concatenate_y_net_x1 <= din;
  delay6_q_net_x1 <= load_now;
  concat9_y_net_x0 <= load_time;
  concat22_y_net_x0 <= load_value;
  logical14_y_net_x2 <= rst;
  dout <= delay7_q_net_x1;
  enable <= delay_q_net_x0;
  value <= register_q_net_x0;

  assert_x0: entity work.xlpassthrough
    generic map (
      din_width => 1,
      dout_width => 1
    )
    port map (
      din(0) => register1_q_net,
      dout(0) => assert_dout_net
    );

  delay: entity work.delay_e18fb31a3d
    port map (
      ce => ce_1_sg_x493,
      clk => clk_1_sg_x493,
      clr => '0',
      d(0) => logical1_y_net,
      q(0) => delay_q_net_x0
    );

  delay3: entity work.delay_9f02caa990
    port map (
      ce => ce_1_sg_x493,
      clk => clk_1_sg_x493,
      clr => '0',
      d(0) => logical1_y_net,
      q(0) => delay3_q_net
    );

  delay4: entity work.delay_9f02caa990
    port map (
      ce => ce_1_sg_x493,
      clk => clk_1_sg_x493,
      clr => '0',
      d(0) => edge_op_y_net_x0,
      q(0) => delay4_q_net
    );

  delay6: entity work.delay_f78bae76bd
    port map (
      ce => ce_1_sg_x493,
      clk => clk_1_sg_x493,
      clr => '0',
      d => concatenate_y_net_x1,
      q => delay6_q_net_x0
    );

  delay7: entity work.delay_f78bae76bd
    port map (
      ce => ce_1_sg_x493,
      clk => clk_1_sg_x493,
      clr => '0',
      d => delay6_q_net_x0,
      q => delay7_q_net_x1
    );

  edge_detect1_bcf4b1adc5: entity work.edge_detect_entity_cb656284f4
    port map (
      ce_1 => ce_1_sg_x493,
      clk_1 => clk_1_sg_x493,
      in_x0 => logical12_y_net_x1,
      out_x0 => edge_op_y_net_x0
    );

  inverter: entity work.inverter_e5b38cca3b
    port map (
      ce => ce_1_sg_x493,
      clk => clk_1_sg_x493,
      clr => '0',
      ip(0) => assert_dout_net,
      op(0) => inverter_op_net
    );

  logical1: entity work.logical_80f90b97d0
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0(0) => register1_q_net,
      d1(0) => logical2_y_net,
      y(0) => logical1_y_net
    );

  logical2: entity work.logical_444d3f5046
    port map (
      ce => ce_1_sg_x493,
      clk => clk_1_sg_x493,
      clr => '0',
      d0(0) => relational_op_net,
      d1(0) => delay6_q_net_x1,
      y(0) => logical2_y_net
    );

  logical3: entity work.logical_80f90b97d0
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0(0) => inverter_op_net,
      d1(0) => delay4_q_net,
      y(0) => logical3_y_net
    );

  logical4: entity work.logical_80f90b97d0
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0(0) => assert_dout_net,
      d1(0) => logical2_y_net,
      y(0) => logical4_y_net
    );

  logical5: entity work.logical_aacf6e1b0e
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0(0) => logical3_y_net,
      d1(0) => logical4_y_net,
      y(0) => logical5_y_net
    );

  register1: entity work.xlregister
    generic map (
      d_width => 1,
      init_value => b"0"
    )
    port map (
      ce => ce_1_sg_x493,
      clk => clk_1_sg_x493,
      d(0) => inverter_op_net,
      en(0) => logical5_y_net,
      rst(0) => logical14_y_net_x2,
      q(0) => register1_q_net
    );

  register2: entity work.xlregister
    generic map (
      d_width => 48,
      init_value => b"000000000000000000000000000000000000000000000000"
    )
    port map (
      ce => ce_1_sg_x493,
      clk => clk_1_sg_x493,
      d => slice_y_net,
      en(0) => delay4_q_net,
      rst => "0",
      q => register2_q_net
    );

  register3: entity work.xlregister
    generic map (
      d_width => 79,
      init_value => b"0000000000000000000000000000000000000000000000000000000000000000000000000000000"
    )
    port map (
      ce => ce_1_sg_x493,
      clk => clk_1_sg_x493,
      d => concat22_y_net_x0,
      en(0) => delay4_q_net,
      rst => "0",
      q => register3_q_net
    );

  register_x0: entity work.xlregister
    generic map (
      d_width => 79,
      init_value => b"0000000000000000000000000000000000000000000000000000000000000000000000000000000"
    )
    port map (
      ce => ce_1_sg_x493,
      clk => clk_1_sg_x493,
      d => register3_q_net,
      en(0) => delay3_q_net,
      rst => "0",
      q => register_q_net_x0
    );

  relational: entity work.relational_e885809f2f
    port map (
      a => slice2_y_net,
      b => register2_q_net,
      ce => ce_1_sg_x493,
      clk => clk_1_sg_x493,
      clr => '0',
      op(0) => relational_op_net
    );

  slice: entity work.xlslice
    generic map (
      new_lsb => 0,
      new_msb => 47,
      x_width => 48,
      y_width => 48
    )
    port map (
      x => concat9_y_net_x0,
      y => slice_y_net
    );

  slice2: entity work.xlslice
    generic map (
      new_lsb => 0,
      new_msb => 47,
      x_width => 64,
      y_width => 48
    )
    port map (
      x => clock_op_net_x1,
      y => slice2_y_net
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/coarse_delay/cd_tr1"

entity cd_tr1_entity_34e6da8a4b is
  port (
    arm: in std_logic; 
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    current_time: in std_logic_vector(63 downto 0); 
    din: in std_logic_vector(31 downto 0); 
    load_now: in std_logic; 
    load_time: in std_logic_vector(47 downto 0); 
    load_value: in std_logic_vector(78 downto 0); 
    rst: in std_logic; 
    dout: out std_logic_vector(31 downto 0); 
    enable: out std_logic; 
    value: out std_logic_vector(78 downto 0)
  );
end cd_tr1_entity_34e6da8a4b;

architecture structural of cd_tr1_entity_34e6da8a4b is
  signal assert_dout_net: std_logic;
  signal ce_1_sg_x495: std_logic;
  signal clk_1_sg_x495: std_logic;
  signal clock_op_net_x2: std_logic_vector(63 downto 0);
  signal concat1_y_net_x0: std_logic_vector(78 downto 0);
  signal concat2_y_net_x0: std_logic_vector(47 downto 0);
  signal delay3_q_net: std_logic;
  signal delay4_q_net: std_logic;
  signal delay6_q_net: std_logic_vector(31 downto 0);
  signal delay6_q_net_x2: std_logic;
  signal delay7_q_net_x1: std_logic_vector(31 downto 0);
  signal delay_q_net_x0: std_logic;
  signal edge_op_y_net_x0: std_logic;
  signal inverter_op_net: std_logic;
  signal logical14_y_net_x3: std_logic;
  signal logical1_y_net: std_logic;
  signal logical1_y_net_x1: std_logic;
  signal logical2_y_net: std_logic;
  signal logical3_y_net: std_logic;
  signal logical4_y_net: std_logic;
  signal logical5_y_net: std_logic;
  signal register1_q_net: std_logic;
  signal register2_q_net: std_logic_vector(47 downto 0);
  signal register3_q_net: std_logic_vector(78 downto 0);
  signal register_q_net_x0: std_logic_vector(78 downto 0);
  signal reinterpret1_output_port_net_x1: std_logic_vector(31 downto 0);
  signal relational_op_net: std_logic;
  signal slice2_y_net: std_logic_vector(47 downto 0);
  signal slice_y_net: std_logic_vector(47 downto 0);

begin
  logical1_y_net_x1 <= arm;
  ce_1_sg_x495 <= ce_1;
  clk_1_sg_x495 <= clk_1;
  clock_op_net_x2 <= current_time;
  reinterpret1_output_port_net_x1 <= din;
  delay6_q_net_x2 <= load_now;
  concat2_y_net_x0 <= load_time;
  concat1_y_net_x0 <= load_value;
  logical14_y_net_x3 <= rst;
  dout <= delay7_q_net_x1;
  enable <= delay_q_net_x0;
  value <= register_q_net_x0;

  assert_x0: entity work.xlpassthrough
    generic map (
      din_width => 1,
      dout_width => 1
    )
    port map (
      din(0) => register1_q_net,
      dout(0) => assert_dout_net
    );

  delay: entity work.delay_e18fb31a3d
    port map (
      ce => ce_1_sg_x495,
      clk => clk_1_sg_x495,
      clr => '0',
      d(0) => logical1_y_net,
      q(0) => delay_q_net_x0
    );

  delay3: entity work.delay_9f02caa990
    port map (
      ce => ce_1_sg_x495,
      clk => clk_1_sg_x495,
      clr => '0',
      d(0) => logical1_y_net,
      q(0) => delay3_q_net
    );

  delay4: entity work.delay_9f02caa990
    port map (
      ce => ce_1_sg_x495,
      clk => clk_1_sg_x495,
      clr => '0',
      d(0) => edge_op_y_net_x0,
      q(0) => delay4_q_net
    );

  delay6: entity work.delay_3f5b23b538
    port map (
      ce => ce_1_sg_x495,
      clk => clk_1_sg_x495,
      clr => '0',
      d => reinterpret1_output_port_net_x1,
      q => delay6_q_net
    );

  delay7: entity work.delay_3f5b23b538
    port map (
      ce => ce_1_sg_x495,
      clk => clk_1_sg_x495,
      clr => '0',
      d => delay6_q_net,
      q => delay7_q_net_x1
    );

  edge_detect1_164cbc49ba: entity work.edge_detect_entity_cb656284f4
    port map (
      ce_1 => ce_1_sg_x495,
      clk_1 => clk_1_sg_x495,
      in_x0 => logical1_y_net_x1,
      out_x0 => edge_op_y_net_x0
    );

  inverter: entity work.inverter_e5b38cca3b
    port map (
      ce => ce_1_sg_x495,
      clk => clk_1_sg_x495,
      clr => '0',
      ip(0) => assert_dout_net,
      op(0) => inverter_op_net
    );

  logical1: entity work.logical_80f90b97d0
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0(0) => register1_q_net,
      d1(0) => logical2_y_net,
      y(0) => logical1_y_net
    );

  logical2: entity work.logical_444d3f5046
    port map (
      ce => ce_1_sg_x495,
      clk => clk_1_sg_x495,
      clr => '0',
      d0(0) => relational_op_net,
      d1(0) => delay6_q_net_x2,
      y(0) => logical2_y_net
    );

  logical3: entity work.logical_80f90b97d0
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0(0) => inverter_op_net,
      d1(0) => delay4_q_net,
      y(0) => logical3_y_net
    );

  logical4: entity work.logical_80f90b97d0
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0(0) => assert_dout_net,
      d1(0) => logical2_y_net,
      y(0) => logical4_y_net
    );

  logical5: entity work.logical_aacf6e1b0e
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0(0) => logical3_y_net,
      d1(0) => logical4_y_net,
      y(0) => logical5_y_net
    );

  register1: entity work.xlregister
    generic map (
      d_width => 1,
      init_value => b"0"
    )
    port map (
      ce => ce_1_sg_x495,
      clk => clk_1_sg_x495,
      d(0) => inverter_op_net,
      en(0) => logical5_y_net,
      rst(0) => logical14_y_net_x3,
      q(0) => register1_q_net
    );

  register2: entity work.xlregister
    generic map (
      d_width => 48,
      init_value => b"000000000000000000000000000000000000000000000000"
    )
    port map (
      ce => ce_1_sg_x495,
      clk => clk_1_sg_x495,
      d => slice_y_net,
      en(0) => delay4_q_net,
      rst => "0",
      q => register2_q_net
    );

  register3: entity work.xlregister
    generic map (
      d_width => 79,
      init_value => b"0000000000000000000000000000000000000000000000000000000000000000000000000000000"
    )
    port map (
      ce => ce_1_sg_x495,
      clk => clk_1_sg_x495,
      d => concat1_y_net_x0,
      en(0) => delay4_q_net,
      rst => "0",
      q => register3_q_net
    );

  register_x0: entity work.xlregister
    generic map (
      d_width => 79,
      init_value => b"0000000000000000000000000000000000000000000000000000000000000000000000000000000"
    )
    port map (
      ce => ce_1_sg_x495,
      clk => clk_1_sg_x495,
      d => register3_q_net,
      en(0) => delay3_q_net,
      rst => "0",
      q => register_q_net_x0
    );

  relational: entity work.relational_e885809f2f
    port map (
      a => slice2_y_net,
      b => register2_q_net,
      ce => ce_1_sg_x495,
      clk => clk_1_sg_x495,
      clr => '0',
      op(0) => relational_op_net
    );

  slice: entity work.xlslice
    generic map (
      new_lsb => 0,
      new_msb => 47,
      x_width => 48,
      y_width => 48
    )
    port map (
      x => concat2_y_net_x0,
      y => slice_y_net
    );

  slice2: entity work.xlslice
    generic map (
      new_lsb => 0,
      new_msb => 47,
      x_width => 64,
      y_width => 48
    )
    port map (
      x => clock_op_net_x2,
      y => slice2_y_net
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/coarse_delay/delay_coarse/barrel_switcher"

entity barrel_switcher_entity_b91f80ea2d is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    in1: in std_logic_vector(7 downto 0); 
    in2: in std_logic_vector(7 downto 0); 
    in3: in std_logic_vector(7 downto 0); 
    in4: in std_logic_vector(7 downto 0); 
    sel: in std_logic_vector(1 downto 0); 
    sync_in: in std_logic; 
    out1: out std_logic_vector(7 downto 0); 
    out2: out std_logic_vector(7 downto 0); 
    out3: out std_logic_vector(7 downto 0); 
    out4: out std_logic_vector(7 downto 0); 
    sync_out: out std_logic
  );
end barrel_switcher_entity_b91f80ea2d;

architecture structural of barrel_switcher_entity_b91f80ea2d is
  signal ce_1_sg_x496: std_logic;
  signal clk_1_sg_x496: std_logic;
  signal delay1_q_net: std_logic_vector(1 downto 0);
  signal delay_sel_q_net_x0: std_logic_vector(1 downto 0);
  signal delay_sync_q_net_x10: std_logic;
  signal dual_port_ram_doutb_net_x3: std_logic_vector(7 downto 0);
  signal dual_port_ram_doutb_net_x4: std_logic_vector(7 downto 0);
  signal dual_port_ram_doutb_net_x5: std_logic_vector(7 downto 0);
  signal dual_port_ram_doutb_net_x6: std_logic_vector(7 downto 0);
  signal mux11_y_net: std_logic_vector(7 downto 0);
  signal mux12_y_net_x1: std_logic_vector(7 downto 0);
  signal mux21_y_net: std_logic_vector(7 downto 0);
  signal mux22_y_net_x1: std_logic_vector(7 downto 0);
  signal mux31_y_net: std_logic_vector(7 downto 0);
  signal mux32_y_net_x1: std_logic_vector(7 downto 0);
  signal mux41_y_net: std_logic_vector(7 downto 0);
  signal mux42_y_net_x1: std_logic_vector(7 downto 0);
  signal slice1_y_net: std_logic;
  signal slice2_y_net: std_logic;
  signal sync_delay_q_net_x0: std_logic;

begin
  ce_1_sg_x496 <= ce_1;
  clk_1_sg_x496 <= clk_1;
  dual_port_ram_doutb_net_x6 <= in1;
  dual_port_ram_doutb_net_x5 <= in2;
  dual_port_ram_doutb_net_x4 <= in3;
  dual_port_ram_doutb_net_x3 <= in4;
  delay_sel_q_net_x0 <= sel;
  sync_delay_q_net_x0 <= sync_in;
  out1 <= mux12_y_net_x1;
  out2 <= mux22_y_net_x1;
  out3 <= mux32_y_net_x1;
  out4 <= mux42_y_net_x1;
  sync_out <= delay_sync_q_net_x10;

  delay1: entity work.xldelay
    generic map (
      latency => 1,
      reg_retiming => 0,
      reset => 0,
      width => 2
    )
    port map (
      ce => ce_1_sg_x496,
      clk => clk_1_sg_x496,
      d => delay_sel_q_net_x0,
      en => '1',
      rst => '1',
      q => delay1_q_net
    );

  delay_sync: entity work.xldelay
    generic map (
      latency => 2,
      reg_retiming => 0,
      reset => 0,
      width => 1
    )
    port map (
      ce => ce_1_sg_x496,
      clk => clk_1_sg_x496,
      d(0) => sync_delay_q_net_x0,
      en => '1',
      rst => '1',
      q(0) => delay_sync_q_net_x10
    );

  mux11: entity work.mux_7f6b7da686
    port map (
      ce => ce_1_sg_x496,
      clk => clk_1_sg_x496,
      clr => '0',
      d0 => dual_port_ram_doutb_net_x6,
      d1 => dual_port_ram_doutb_net_x4,
      sel(0) => slice1_y_net,
      y => mux11_y_net
    );

  mux12: entity work.mux_7f6b7da686
    port map (
      ce => ce_1_sg_x496,
      clk => clk_1_sg_x496,
      clr => '0',
      d0 => mux11_y_net,
      d1 => mux21_y_net,
      sel(0) => slice2_y_net,
      y => mux12_y_net_x1
    );

  mux21: entity work.mux_7f6b7da686
    port map (
      ce => ce_1_sg_x496,
      clk => clk_1_sg_x496,
      clr => '0',
      d0 => dual_port_ram_doutb_net_x5,
      d1 => dual_port_ram_doutb_net_x3,
      sel(0) => slice1_y_net,
      y => mux21_y_net
    );

  mux22: entity work.mux_7f6b7da686
    port map (
      ce => ce_1_sg_x496,
      clk => clk_1_sg_x496,
      clr => '0',
      d0 => mux21_y_net,
      d1 => mux31_y_net,
      sel(0) => slice2_y_net,
      y => mux22_y_net_x1
    );

  mux31: entity work.mux_7f6b7da686
    port map (
      ce => ce_1_sg_x496,
      clk => clk_1_sg_x496,
      clr => '0',
      d0 => dual_port_ram_doutb_net_x4,
      d1 => dual_port_ram_doutb_net_x6,
      sel(0) => slice1_y_net,
      y => mux31_y_net
    );

  mux32: entity work.mux_7f6b7da686
    port map (
      ce => ce_1_sg_x496,
      clk => clk_1_sg_x496,
      clr => '0',
      d0 => mux31_y_net,
      d1 => mux41_y_net,
      sel(0) => slice2_y_net,
      y => mux32_y_net_x1
    );

  mux41: entity work.mux_7f6b7da686
    port map (
      ce => ce_1_sg_x496,
      clk => clk_1_sg_x496,
      clr => '0',
      d0 => dual_port_ram_doutb_net_x3,
      d1 => dual_port_ram_doutb_net_x5,
      sel(0) => slice1_y_net,
      y => mux41_y_net
    );

  mux42: entity work.mux_7f6b7da686
    port map (
      ce => ce_1_sg_x496,
      clk => clk_1_sg_x496,
      clr => '0',
      d0 => mux41_y_net,
      d1 => mux11_y_net,
      sel(0) => slice2_y_net,
      y => mux42_y_net_x1
    );

  slice1: entity work.xlslice
    generic map (
      new_lsb => 1,
      new_msb => 1,
      x_width => 2,
      y_width => 1
    )
    port map (
      x => delay_sel_q_net_x0,
      y(0) => slice1_y_net
    );

  slice2: entity work.xlslice
    generic map (
      new_lsb => 0,
      new_msb => 0,
      x_width => 2,
      y_width => 1
    )
    port map (
      x => delay1_q_net,
      y(0) => slice2_y_net
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/coarse_delay/delay_coarse/delay_dp"

entity delay_dp_entity_669e30fc9b is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    delay: in std_logic_vector(10 downto 0); 
    din: in std_logic_vector(7 downto 0); 
    dout: out std_logic_vector(7 downto 0)
  );
end delay_dp_entity_669e30fc9b;

architecture structural of delay_dp_entity_669e30fc9b is
  signal addsub_s_net: std_logic_vector(10 downto 0);
  signal bram_rd_addrs_y_net_x0: std_logic_vector(10 downto 0);
  signal ce_1_sg_x497: std_logic;
  signal clk_1_sg_x497: std_logic;
  signal constant2_op_net: std_logic;
  signal constant4_op_net: std_logic;
  signal dual_port_ram_doutb_net_x4: std_logic_vector(7 downto 0);
  signal reinterpret4_output_port_net_x1: std_logic_vector(7 downto 0);
  signal wr_addr_op_net: std_logic_vector(10 downto 0);

begin
  ce_1_sg_x497 <= ce_1;
  clk_1_sg_x497 <= clk_1;
  bram_rd_addrs_y_net_x0 <= delay;
  reinterpret4_output_port_net_x1 <= din;
  dout <= dual_port_ram_doutb_net_x4;

  addsub: entity work.addsub_fb71f56222
    port map (
      a => wr_addr_op_net,
      b => bram_rd_addrs_y_net_x0,
      ce => ce_1_sg_x497,
      clk => clk_1_sg_x497,
      clr => '0',
      s => addsub_s_net
    );

  constant2: entity work.constant_6293007044
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op(0) => constant2_op_net
    );

  constant4: entity work.constant_963ed6358a
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op(0) => constant4_op_net
    );

  dual_port_ram: entity work.xldpram_c09f12_01
    generic map (
      c_address_width_a => 11,
      c_address_width_b => 11,
      c_width_a => 8,
      c_width_b => 8,
      core_name0 => "bmg_72_a613d001e124acbe",
      latency => 2
    )
    port map (
      a_ce => ce_1_sg_x497,
      a_clk => clk_1_sg_x497,
      addra => wr_addr_op_net,
      addrb => addsub_s_net,
      b_ce => ce_1_sg_x497,
      b_clk => clk_1_sg_x497,
      dina => reinterpret4_output_port_net_x1,
      dinb => reinterpret4_output_port_net_x1,
      ena => "1",
      enb => "1",
      rsta => "0",
      rstb => "0",
      wea(0) => constant2_op_net,
      web(0) => constant4_op_net,
      doutb => dual_port_ram_doutb_net_x4
    );

  wr_addr: entity work.counter_e4b8f9ed4e
    port map (
      ce => ce_1_sg_x497,
      clk => clk_1_sg_x497,
      clr => '0',
      op => wr_addr_op_net
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/coarse_delay/delay_coarse/delay_dp1"

entity delay_dp1_entity_524b6d544a is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    delay: in std_logic_vector(11 downto 0); 
    din: in std_logic_vector(7 downto 0); 
    dout: out std_logic_vector(7 downto 0)
  );
end delay_dp1_entity_524b6d544a;

architecture structural of delay_dp1_entity_524b6d544a is
  signal addsub1_s_net_x0: std_logic_vector(11 downto 0);
  signal addsub_s_net: std_logic_vector(10 downto 0);
  signal ce_1_sg_x498: std_logic;
  signal clk_1_sg_x498: std_logic;
  signal constant2_op_net: std_logic;
  signal constant4_op_net: std_logic;
  signal dual_port_ram_doutb_net_x5: std_logic_vector(7 downto 0);
  signal reinterpret3_output_port_net_x1: std_logic_vector(7 downto 0);
  signal wr_addr_op_net: std_logic_vector(10 downto 0);

begin
  ce_1_sg_x498 <= ce_1;
  clk_1_sg_x498 <= clk_1;
  addsub1_s_net_x0 <= delay;
  reinterpret3_output_port_net_x1 <= din;
  dout <= dual_port_ram_doutb_net_x5;

  addsub: entity work.addsub_cba407adc0
    port map (
      a => wr_addr_op_net,
      b => addsub1_s_net_x0,
      ce => ce_1_sg_x498,
      clk => clk_1_sg_x498,
      clr => '0',
      s => addsub_s_net
    );

  constant2: entity work.constant_6293007044
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op(0) => constant2_op_net
    );

  constant4: entity work.constant_963ed6358a
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op(0) => constant4_op_net
    );

  dual_port_ram: entity work.xldpram_c09f12_01
    generic map (
      c_address_width_a => 11,
      c_address_width_b => 11,
      c_width_a => 8,
      c_width_b => 8,
      core_name0 => "bmg_72_a613d001e124acbe",
      latency => 2
    )
    port map (
      a_ce => ce_1_sg_x498,
      a_clk => clk_1_sg_x498,
      addra => wr_addr_op_net,
      addrb => addsub_s_net,
      b_ce => ce_1_sg_x498,
      b_clk => clk_1_sg_x498,
      dina => reinterpret3_output_port_net_x1,
      dinb => reinterpret3_output_port_net_x1,
      ena => "1",
      enb => "1",
      rsta => "0",
      rstb => "0",
      wea(0) => constant2_op_net,
      web(0) => constant4_op_net,
      doutb => dual_port_ram_doutb_net_x5
    );

  wr_addr: entity work.counter_e4b8f9ed4e
    port map (
      ce => ce_1_sg_x498,
      clk => clk_1_sg_x498,
      clr => '0',
      op => wr_addr_op_net
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/coarse_delay/delay_coarse"

entity delay_coarse_entity_afbd97e680 is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    data_in1: in std_logic_vector(7 downto 0); 
    data_in2: in std_logic_vector(7 downto 0); 
    data_in3: in std_logic_vector(7 downto 0); 
    data_in4: in std_logic_vector(7 downto 0); 
    delay: in std_logic_vector(12 downto 0); 
    en: in std_logic; 
    sync: in std_logic; 
    data_out1: out std_logic_vector(7 downto 0); 
    data_out2: out std_logic_vector(7 downto 0); 
    data_out3: out std_logic_vector(7 downto 0); 
    data_out4: out std_logic_vector(7 downto 0); 
    sync_out: out std_logic
  );
end delay_coarse_entity_afbd97e680;

architecture structural of delay_coarse_entity_afbd97e680 is
  signal addsub1_s_net_x0: std_logic_vector(11 downto 0);
  signal addsub2_s_net_x0: std_logic_vector(11 downto 0);
  signal addsub3_s_net_x0: std_logic_vector(11 downto 0);
  signal bram_rd_addrs_y_net_x0: std_logic_vector(10 downto 0);
  signal ce_1_sg_x501: std_logic;
  signal clk_1_sg_x501: std_logic;
  signal constant1_op_net: std_logic_vector(1 downto 0);
  signal constant2_op_net: std_logic_vector(1 downto 0);
  signal constant3_op_net: std_logic_vector(1 downto 0);
  signal convert1_dout_net: std_logic;
  signal convert2_dout_net: std_logic;
  signal convert3_dout_net: std_logic;
  signal delay2_q_net_x0: std_logic;
  signal delay5_q_net_x0: std_logic_vector(12 downto 0);
  signal delay_reg_q_net: std_logic_vector(12 downto 0);
  signal delay_sel_q_net_x0: std_logic_vector(1 downto 0);
  signal delay_sync_q_net_x11: std_logic;
  signal dual_port_ram_doutb_net_x4: std_logic_vector(7 downto 0);
  signal dual_port_ram_doutb_net_x5: std_logic_vector(7 downto 0);
  signal dual_port_ram_doutb_net_x6: std_logic_vector(7 downto 0);
  signal dual_port_ram_doutb_net_x7: std_logic_vector(7 downto 0);
  signal mux12_y_net_x2: std_logic_vector(7 downto 0);
  signal mux22_y_net_x2: std_logic_vector(7 downto 0);
  signal mux32_y_net_x2: std_logic_vector(7 downto 0);
  signal mux42_y_net_x2: std_logic_vector(7 downto 0);
  signal reinterpret1_output_port_net_x4: std_logic_vector(7 downto 0);
  signal reinterpret2_output_port_net_x2: std_logic_vector(7 downto 0);
  signal reinterpret3_output_port_net_x2: std_logic_vector(7 downto 0);
  signal reinterpret4_output_port_net_x2: std_logic_vector(7 downto 0);
  signal relational1_op_net: std_logic;
  signal relational2_op_net: std_logic;
  signal relational3_op_net: std_logic;
  signal shift_sel_y_net: std_logic_vector(1 downto 0);
  signal slice2_y_net_x1: std_logic;
  signal sync_delay_q_net_x0: std_logic;

begin
  ce_1_sg_x501 <= ce_1;
  clk_1_sg_x501 <= clk_1;
  reinterpret4_output_port_net_x2 <= data_in1;
  reinterpret3_output_port_net_x2 <= data_in2;
  reinterpret2_output_port_net_x2 <= data_in3;
  reinterpret1_output_port_net_x4 <= data_in4;
  delay5_q_net_x0 <= delay;
  delay2_q_net_x0 <= en;
  slice2_y_net_x1 <= sync;
  data_out1 <= mux42_y_net_x2;
  data_out2 <= mux32_y_net_x2;
  data_out3 <= mux22_y_net_x2;
  data_out4 <= mux12_y_net_x2;
  sync_out <= delay_sync_q_net_x11;

  addsub1: entity work.xladdsub_c09f12_01
    generic map (
      a_arith => xlUnsigned,
      a_bin_pt => 0,
      a_width => 11,
      b_arith => xlUnsigned,
      b_bin_pt => 0,
      b_width => 1,
      c_has_c_out => 0,
      c_latency => 0,
      c_output_width => 12,
      core_name0 => "addsb_11_0_967e0ec2eea991a6",
      extra_registers => 0,
      full_s_arith => 1,
      full_s_width => 12,
      latency => 0,
      overflow => 1,
      quantization => 1,
      s_arith => xlUnsigned,
      s_bin_pt => 0,
      s_width => 12
    )
    port map (
      a => bram_rd_addrs_y_net_x0,
      b(0) => convert1_dout_net,
      ce => ce_1_sg_x501,
      clk => clk_1_sg_x501,
      clr => '0',
      en => "1",
      s => addsub1_s_net_x0
    );

  addsub2: entity work.xladdsub_c09f12_01
    generic map (
      a_arith => xlUnsigned,
      a_bin_pt => 0,
      a_width => 11,
      b_arith => xlUnsigned,
      b_bin_pt => 0,
      b_width => 1,
      c_has_c_out => 0,
      c_latency => 0,
      c_output_width => 12,
      core_name0 => "addsb_11_0_967e0ec2eea991a6",
      extra_registers => 0,
      full_s_arith => 1,
      full_s_width => 12,
      latency => 0,
      overflow => 1,
      quantization => 1,
      s_arith => xlUnsigned,
      s_bin_pt => 0,
      s_width => 12
    )
    port map (
      a => bram_rd_addrs_y_net_x0,
      b(0) => convert2_dout_net,
      ce => ce_1_sg_x501,
      clk => clk_1_sg_x501,
      clr => '0',
      en => "1",
      s => addsub2_s_net_x0
    );

  addsub3: entity work.xladdsub_c09f12_01
    generic map (
      a_arith => xlUnsigned,
      a_bin_pt => 0,
      a_width => 11,
      b_arith => xlUnsigned,
      b_bin_pt => 0,
      b_width => 1,
      c_has_c_out => 0,
      c_latency => 0,
      c_output_width => 12,
      core_name0 => "addsb_11_0_967e0ec2eea991a6",
      extra_registers => 0,
      full_s_arith => 1,
      full_s_width => 12,
      latency => 0,
      overflow => 1,
      quantization => 1,
      s_arith => xlUnsigned,
      s_bin_pt => 0,
      s_width => 12
    )
    port map (
      a => bram_rd_addrs_y_net_x0,
      b(0) => convert3_dout_net,
      ce => ce_1_sg_x501,
      clk => clk_1_sg_x501,
      clr => '0',
      en => "1",
      s => addsub3_s_net_x0
    );

  barrel_switcher_b91f80ea2d: entity work.barrel_switcher_entity_b91f80ea2d
    port map (
      ce_1 => ce_1_sg_x501,
      clk_1 => clk_1_sg_x501,
      in1 => dual_port_ram_doutb_net_x7,
      in2 => dual_port_ram_doutb_net_x6,
      in3 => dual_port_ram_doutb_net_x5,
      in4 => dual_port_ram_doutb_net_x4,
      sel => delay_sel_q_net_x0,
      sync_in => sync_delay_q_net_x0,
      out1 => mux12_y_net_x2,
      out2 => mux22_y_net_x2,
      out3 => mux32_y_net_x2,
      out4 => mux42_y_net_x2,
      sync_out => delay_sync_q_net_x11
    );

  bram_rd_addrs: entity work.xlslice
    generic map (
      new_lsb => 2,
      new_msb => 12,
      x_width => 13,
      y_width => 11
    )
    port map (
      x => delay_reg_q_net,
      y => bram_rd_addrs_y_net_x0
    );

  constant1: entity work.constant_e8ddc079e9
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op => constant1_op_net
    );

  constant2: entity work.constant_a7e2bb9e12
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op => constant2_op_net
    );

  constant3: entity work.constant_cda50df78a
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op => constant3_op_net
    );

  convert1: entity work.xlconvert
    generic map (
      bool_conversion => 0,
      din_arith => 1,
      din_bin_pt => 0,
      din_width => 1,
      dout_arith => 1,
      dout_bin_pt => 0,
      dout_width => 1,
      latency => 0,
      overflow => xlWrap,
      quantization => xlTruncate
    )
    port map (
      ce => ce_1_sg_x501,
      clk => clk_1_sg_x501,
      clr => '0',
      din(0) => relational1_op_net,
      en => "1",
      dout(0) => convert1_dout_net
    );

  convert2: entity work.xlconvert
    generic map (
      bool_conversion => 0,
      din_arith => 1,
      din_bin_pt => 0,
      din_width => 1,
      dout_arith => 1,
      dout_bin_pt => 0,
      dout_width => 1,
      latency => 0,
      overflow => xlWrap,
      quantization => xlTruncate
    )
    port map (
      ce => ce_1_sg_x501,
      clk => clk_1_sg_x501,
      clr => '0',
      din(0) => relational2_op_net,
      en => "1",
      dout(0) => convert2_dout_net
    );

  convert3: entity work.xlconvert
    generic map (
      bool_conversion => 0,
      din_arith => 1,
      din_bin_pt => 0,
      din_width => 1,
      dout_arith => 1,
      dout_bin_pt => 0,
      dout_width => 1,
      latency => 0,
      overflow => xlWrap,
      quantization => xlTruncate
    )
    port map (
      ce => ce_1_sg_x501,
      clk => clk_1_sg_x501,
      clr => '0',
      din(0) => relational3_op_net,
      en => "1",
      dout(0) => convert3_dout_net
    );

  delay_dp1_524b6d544a: entity work.delay_dp1_entity_524b6d544a
    port map (
      ce_1 => ce_1_sg_x501,
      clk_1 => clk_1_sg_x501,
      delay => addsub1_s_net_x0,
      din => reinterpret3_output_port_net_x2,
      dout => dual_port_ram_doutb_net_x5
    );

  delay_dp2_31a7b55973: entity work.delay_dp1_entity_524b6d544a
    port map (
      ce_1 => ce_1_sg_x501,
      clk_1 => clk_1_sg_x501,
      delay => addsub2_s_net_x0,
      din => reinterpret2_output_port_net_x2,
      dout => dual_port_ram_doutb_net_x6
    );

  delay_dp3_f4386d00bc: entity work.delay_dp1_entity_524b6d544a
    port map (
      ce_1 => ce_1_sg_x501,
      clk_1 => clk_1_sg_x501,
      delay => addsub3_s_net_x0,
      din => reinterpret1_output_port_net_x4,
      dout => dual_port_ram_doutb_net_x7
    );

  delay_dp_669e30fc9b: entity work.delay_dp_entity_669e30fc9b
    port map (
      ce_1 => ce_1_sg_x501,
      clk_1 => clk_1_sg_x501,
      delay => bram_rd_addrs_y_net_x0,
      din => reinterpret4_output_port_net_x2,
      dout => dual_port_ram_doutb_net_x4
    );

  delay_reg: entity work.xlregister
    generic map (
      d_width => 13,
      init_value => b"0000000000000"
    )
    port map (
      ce => ce_1_sg_x501,
      clk => clk_1_sg_x501,
      d => delay5_q_net_x0,
      en(0) => delay2_q_net_x0,
      rst => "0",
      q => delay_reg_q_net
    );

  delay_sel: entity work.xldelay
    generic map (
      latency => 3,
      reg_retiming => 0,
      reset => 0,
      width => 2
    )
    port map (
      ce => ce_1_sg_x501,
      clk => clk_1_sg_x501,
      d => shift_sel_y_net,
      en => '1',
      rst => '1',
      q => delay_sel_q_net_x0
    );

  relational1: entity work.relational_9b3c9652f3
    port map (
      a => shift_sel_y_net,
      b => constant1_op_net,
      ce => '0',
      clk => '0',
      clr => '0',
      op(0) => relational1_op_net
    );

  relational2: entity work.relational_9b3c9652f3
    port map (
      a => shift_sel_y_net,
      b => constant2_op_net,
      ce => '0',
      clk => '0',
      clr => '0',
      op(0) => relational2_op_net
    );

  relational3: entity work.relational_9b3c9652f3
    port map (
      a => shift_sel_y_net,
      b => constant3_op_net,
      ce => '0',
      clk => '0',
      clr => '0',
      op(0) => relational3_op_net
    );

  shift_sel: entity work.xlslice
    generic map (
      new_lsb => 0,
      new_msb => 1,
      x_width => 13,
      y_width => 2
    )
    port map (
      x => delay_reg_q_net,
      y => shift_sel_y_net
    );

  sync_delay: entity work.xldelay
    generic map (
      latency => 3,
      reg_retiming => 0,
      reset => 0,
      width => 1
    )
    port map (
      ce => ce_1_sg_x501,
      clk => clk_1_sg_x501,
      d(0) => slice2_y_net_x1,
      en => '1',
      rst => '1',
      q(0) => sync_delay_q_net_x0
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/coarse_delay/delay_coarse1/barrel_switcher"

entity barrel_switcher_entity_2146ed75dc is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    in1: in std_logic_vector(7 downto 0); 
    in2: in std_logic_vector(7 downto 0); 
    in3: in std_logic_vector(7 downto 0); 
    in4: in std_logic_vector(7 downto 0); 
    sel: in std_logic_vector(1 downto 0); 
    out1: out std_logic_vector(7 downto 0); 
    out2: out std_logic_vector(7 downto 0); 
    out3: out std_logic_vector(7 downto 0); 
    out4: out std_logic_vector(7 downto 0)
  );
end barrel_switcher_entity_2146ed75dc;

architecture structural of barrel_switcher_entity_2146ed75dc is
  signal ce_1_sg_x502: std_logic;
  signal clk_1_sg_x502: std_logic;
  signal delay1_q_net: std_logic_vector(1 downto 0);
  signal delay_sel_q_net_x0: std_logic_vector(1 downto 0);
  signal dual_port_ram_doutb_net_x3: std_logic_vector(7 downto 0);
  signal dual_port_ram_doutb_net_x4: std_logic_vector(7 downto 0);
  signal dual_port_ram_doutb_net_x5: std_logic_vector(7 downto 0);
  signal dual_port_ram_doutb_net_x6: std_logic_vector(7 downto 0);
  signal mux11_y_net: std_logic_vector(7 downto 0);
  signal mux12_y_net_x1: std_logic_vector(7 downto 0);
  signal mux21_y_net: std_logic_vector(7 downto 0);
  signal mux22_y_net_x1: std_logic_vector(7 downto 0);
  signal mux31_y_net: std_logic_vector(7 downto 0);
  signal mux32_y_net_x1: std_logic_vector(7 downto 0);
  signal mux41_y_net: std_logic_vector(7 downto 0);
  signal mux42_y_net_x1: std_logic_vector(7 downto 0);
  signal slice1_y_net: std_logic;
  signal slice2_y_net: std_logic;

begin
  ce_1_sg_x502 <= ce_1;
  clk_1_sg_x502 <= clk_1;
  dual_port_ram_doutb_net_x6 <= in1;
  dual_port_ram_doutb_net_x5 <= in2;
  dual_port_ram_doutb_net_x4 <= in3;
  dual_port_ram_doutb_net_x3 <= in4;
  delay_sel_q_net_x0 <= sel;
  out1 <= mux12_y_net_x1;
  out2 <= mux22_y_net_x1;
  out3 <= mux32_y_net_x1;
  out4 <= mux42_y_net_x1;

  delay1: entity work.xldelay
    generic map (
      latency => 1,
      reg_retiming => 0,
      reset => 0,
      width => 2
    )
    port map (
      ce => ce_1_sg_x502,
      clk => clk_1_sg_x502,
      d => delay_sel_q_net_x0,
      en => '1',
      rst => '1',
      q => delay1_q_net
    );

  mux11: entity work.mux_7f6b7da686
    port map (
      ce => ce_1_sg_x502,
      clk => clk_1_sg_x502,
      clr => '0',
      d0 => dual_port_ram_doutb_net_x6,
      d1 => dual_port_ram_doutb_net_x4,
      sel(0) => slice1_y_net,
      y => mux11_y_net
    );

  mux12: entity work.mux_7f6b7da686
    port map (
      ce => ce_1_sg_x502,
      clk => clk_1_sg_x502,
      clr => '0',
      d0 => mux11_y_net,
      d1 => mux21_y_net,
      sel(0) => slice2_y_net,
      y => mux12_y_net_x1
    );

  mux21: entity work.mux_7f6b7da686
    port map (
      ce => ce_1_sg_x502,
      clk => clk_1_sg_x502,
      clr => '0',
      d0 => dual_port_ram_doutb_net_x5,
      d1 => dual_port_ram_doutb_net_x3,
      sel(0) => slice1_y_net,
      y => mux21_y_net
    );

  mux22: entity work.mux_7f6b7da686
    port map (
      ce => ce_1_sg_x502,
      clk => clk_1_sg_x502,
      clr => '0',
      d0 => mux21_y_net,
      d1 => mux31_y_net,
      sel(0) => slice2_y_net,
      y => mux22_y_net_x1
    );

  mux31: entity work.mux_7f6b7da686
    port map (
      ce => ce_1_sg_x502,
      clk => clk_1_sg_x502,
      clr => '0',
      d0 => dual_port_ram_doutb_net_x4,
      d1 => dual_port_ram_doutb_net_x6,
      sel(0) => slice1_y_net,
      y => mux31_y_net
    );

  mux32: entity work.mux_7f6b7da686
    port map (
      ce => ce_1_sg_x502,
      clk => clk_1_sg_x502,
      clr => '0',
      d0 => mux31_y_net,
      d1 => mux41_y_net,
      sel(0) => slice2_y_net,
      y => mux32_y_net_x1
    );

  mux41: entity work.mux_7f6b7da686
    port map (
      ce => ce_1_sg_x502,
      clk => clk_1_sg_x502,
      clr => '0',
      d0 => dual_port_ram_doutb_net_x3,
      d1 => dual_port_ram_doutb_net_x5,
      sel(0) => slice1_y_net,
      y => mux41_y_net
    );

  mux42: entity work.mux_7f6b7da686
    port map (
      ce => ce_1_sg_x502,
      clk => clk_1_sg_x502,
      clr => '0',
      d0 => mux41_y_net,
      d1 => mux11_y_net,
      sel(0) => slice2_y_net,
      y => mux42_y_net_x1
    );

  slice1: entity work.xlslice
    generic map (
      new_lsb => 1,
      new_msb => 1,
      x_width => 2,
      y_width => 1
    )
    port map (
      x => delay_sel_q_net_x0,
      y(0) => slice1_y_net
    );

  slice2: entity work.xlslice
    generic map (
      new_lsb => 0,
      new_msb => 0,
      x_width => 2,
      y_width => 1
    )
    port map (
      x => delay1_q_net,
      y(0) => slice2_y_net
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/coarse_delay/delay_coarse1"

entity delay_coarse1_entity_3b68014ca9 is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    data_in1: in std_logic_vector(7 downto 0); 
    data_in2: in std_logic_vector(7 downto 0); 
    data_in3: in std_logic_vector(7 downto 0); 
    data_in4: in std_logic_vector(7 downto 0); 
    delay: in std_logic_vector(12 downto 0); 
    en: in std_logic; 
    data_out1: out std_logic_vector(7 downto 0); 
    data_out2: out std_logic_vector(7 downto 0); 
    data_out3: out std_logic_vector(7 downto 0); 
    data_out4: out std_logic_vector(7 downto 0)
  );
end delay_coarse1_entity_3b68014ca9;

architecture structural of delay_coarse1_entity_3b68014ca9 is
  signal addsub1_s_net_x0: std_logic_vector(11 downto 0);
  signal addsub2_s_net_x0: std_logic_vector(11 downto 0);
  signal addsub3_s_net_x0: std_logic_vector(11 downto 0);
  signal bram_rd_addrs_y_net_x0: std_logic_vector(10 downto 0);
  signal ce_1_sg_x507: std_logic;
  signal clk_1_sg_x507: std_logic;
  signal constant1_op_net: std_logic_vector(1 downto 0);
  signal constant2_op_net: std_logic_vector(1 downto 0);
  signal constant3_op_net: std_logic_vector(1 downto 0);
  signal convert1_dout_net: std_logic;
  signal convert2_dout_net: std_logic;
  signal convert3_dout_net: std_logic;
  signal delay2_q_net_x0: std_logic;
  signal delay5_q_net_x0: std_logic_vector(12 downto 0);
  signal delay_reg_q_net: std_logic_vector(12 downto 0);
  signal delay_sel_q_net_x0: std_logic_vector(1 downto 0);
  signal dual_port_ram_doutb_net_x4: std_logic_vector(7 downto 0);
  signal dual_port_ram_doutb_net_x5: std_logic_vector(7 downto 0);
  signal dual_port_ram_doutb_net_x6: std_logic_vector(7 downto 0);
  signal dual_port_ram_doutb_net_x7: std_logic_vector(7 downto 0);
  signal mux12_y_net_x2: std_logic_vector(7 downto 0);
  signal mux22_y_net_x2: std_logic_vector(7 downto 0);
  signal mux32_y_net_x2: std_logic_vector(7 downto 0);
  signal mux42_y_net_x2: std_logic_vector(7 downto 0);
  signal reinterpret1_output_port_net_x2: std_logic_vector(7 downto 0);
  signal reinterpret2_output_port_net_x2: std_logic_vector(7 downto 0);
  signal reinterpret3_output_port_net_x2: std_logic_vector(7 downto 0);
  signal reinterpret4_output_port_net_x2: std_logic_vector(7 downto 0);
  signal relational1_op_net: std_logic;
  signal relational2_op_net: std_logic;
  signal relational3_op_net: std_logic;
  signal shift_sel_y_net: std_logic_vector(1 downto 0);

begin
  ce_1_sg_x507 <= ce_1;
  clk_1_sg_x507 <= clk_1;
  reinterpret4_output_port_net_x2 <= data_in1;
  reinterpret3_output_port_net_x2 <= data_in2;
  reinterpret2_output_port_net_x2 <= data_in3;
  reinterpret1_output_port_net_x2 <= data_in4;
  delay5_q_net_x0 <= delay;
  delay2_q_net_x0 <= en;
  data_out1 <= mux42_y_net_x2;
  data_out2 <= mux32_y_net_x2;
  data_out3 <= mux22_y_net_x2;
  data_out4 <= mux12_y_net_x2;

  addsub1: entity work.xladdsub_c09f12_01
    generic map (
      a_arith => xlUnsigned,
      a_bin_pt => 0,
      a_width => 11,
      b_arith => xlUnsigned,
      b_bin_pt => 0,
      b_width => 1,
      c_has_c_out => 0,
      c_latency => 0,
      c_output_width => 12,
      core_name0 => "addsb_11_0_967e0ec2eea991a6",
      extra_registers => 0,
      full_s_arith => 1,
      full_s_width => 12,
      latency => 0,
      overflow => 1,
      quantization => 1,
      s_arith => xlUnsigned,
      s_bin_pt => 0,
      s_width => 12
    )
    port map (
      a => bram_rd_addrs_y_net_x0,
      b(0) => convert1_dout_net,
      ce => ce_1_sg_x507,
      clk => clk_1_sg_x507,
      clr => '0',
      en => "1",
      s => addsub1_s_net_x0
    );

  addsub2: entity work.xladdsub_c09f12_01
    generic map (
      a_arith => xlUnsigned,
      a_bin_pt => 0,
      a_width => 11,
      b_arith => xlUnsigned,
      b_bin_pt => 0,
      b_width => 1,
      c_has_c_out => 0,
      c_latency => 0,
      c_output_width => 12,
      core_name0 => "addsb_11_0_967e0ec2eea991a6",
      extra_registers => 0,
      full_s_arith => 1,
      full_s_width => 12,
      latency => 0,
      overflow => 1,
      quantization => 1,
      s_arith => xlUnsigned,
      s_bin_pt => 0,
      s_width => 12
    )
    port map (
      a => bram_rd_addrs_y_net_x0,
      b(0) => convert2_dout_net,
      ce => ce_1_sg_x507,
      clk => clk_1_sg_x507,
      clr => '0',
      en => "1",
      s => addsub2_s_net_x0
    );

  addsub3: entity work.xladdsub_c09f12_01
    generic map (
      a_arith => xlUnsigned,
      a_bin_pt => 0,
      a_width => 11,
      b_arith => xlUnsigned,
      b_bin_pt => 0,
      b_width => 1,
      c_has_c_out => 0,
      c_latency => 0,
      c_output_width => 12,
      core_name0 => "addsb_11_0_967e0ec2eea991a6",
      extra_registers => 0,
      full_s_arith => 1,
      full_s_width => 12,
      latency => 0,
      overflow => 1,
      quantization => 1,
      s_arith => xlUnsigned,
      s_bin_pt => 0,
      s_width => 12
    )
    port map (
      a => bram_rd_addrs_y_net_x0,
      b(0) => convert3_dout_net,
      ce => ce_1_sg_x507,
      clk => clk_1_sg_x507,
      clr => '0',
      en => "1",
      s => addsub3_s_net_x0
    );

  barrel_switcher_2146ed75dc: entity work.barrel_switcher_entity_2146ed75dc
    port map (
      ce_1 => ce_1_sg_x507,
      clk_1 => clk_1_sg_x507,
      in1 => dual_port_ram_doutb_net_x7,
      in2 => dual_port_ram_doutb_net_x6,
      in3 => dual_port_ram_doutb_net_x5,
      in4 => dual_port_ram_doutb_net_x4,
      sel => delay_sel_q_net_x0,
      out1 => mux12_y_net_x2,
      out2 => mux22_y_net_x2,
      out3 => mux32_y_net_x2,
      out4 => mux42_y_net_x2
    );

  bram_rd_addrs: entity work.xlslice
    generic map (
      new_lsb => 2,
      new_msb => 12,
      x_width => 13,
      y_width => 11
    )
    port map (
      x => delay_reg_q_net,
      y => bram_rd_addrs_y_net_x0
    );

  constant1: entity work.constant_e8ddc079e9
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op => constant1_op_net
    );

  constant2: entity work.constant_a7e2bb9e12
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op => constant2_op_net
    );

  constant3: entity work.constant_cda50df78a
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op => constant3_op_net
    );

  convert1: entity work.xlconvert
    generic map (
      bool_conversion => 0,
      din_arith => 1,
      din_bin_pt => 0,
      din_width => 1,
      dout_arith => 1,
      dout_bin_pt => 0,
      dout_width => 1,
      latency => 0,
      overflow => xlWrap,
      quantization => xlTruncate
    )
    port map (
      ce => ce_1_sg_x507,
      clk => clk_1_sg_x507,
      clr => '0',
      din(0) => relational1_op_net,
      en => "1",
      dout(0) => convert1_dout_net
    );

  convert2: entity work.xlconvert
    generic map (
      bool_conversion => 0,
      din_arith => 1,
      din_bin_pt => 0,
      din_width => 1,
      dout_arith => 1,
      dout_bin_pt => 0,
      dout_width => 1,
      latency => 0,
      overflow => xlWrap,
      quantization => xlTruncate
    )
    port map (
      ce => ce_1_sg_x507,
      clk => clk_1_sg_x507,
      clr => '0',
      din(0) => relational2_op_net,
      en => "1",
      dout(0) => convert2_dout_net
    );

  convert3: entity work.xlconvert
    generic map (
      bool_conversion => 0,
      din_arith => 1,
      din_bin_pt => 0,
      din_width => 1,
      dout_arith => 1,
      dout_bin_pt => 0,
      dout_width => 1,
      latency => 0,
      overflow => xlWrap,
      quantization => xlTruncate
    )
    port map (
      ce => ce_1_sg_x507,
      clk => clk_1_sg_x507,
      clr => '0',
      din(0) => relational3_op_net,
      en => "1",
      dout(0) => convert3_dout_net
    );

  delay_dp1_558b294e75: entity work.delay_dp1_entity_524b6d544a
    port map (
      ce_1 => ce_1_sg_x507,
      clk_1 => clk_1_sg_x507,
      delay => addsub1_s_net_x0,
      din => reinterpret3_output_port_net_x2,
      dout => dual_port_ram_doutb_net_x5
    );

  delay_dp2_ee34755f64: entity work.delay_dp1_entity_524b6d544a
    port map (
      ce_1 => ce_1_sg_x507,
      clk_1 => clk_1_sg_x507,
      delay => addsub2_s_net_x0,
      din => reinterpret2_output_port_net_x2,
      dout => dual_port_ram_doutb_net_x6
    );

  delay_dp3_3be5e7215e: entity work.delay_dp1_entity_524b6d544a
    port map (
      ce_1 => ce_1_sg_x507,
      clk_1 => clk_1_sg_x507,
      delay => addsub3_s_net_x0,
      din => reinterpret1_output_port_net_x2,
      dout => dual_port_ram_doutb_net_x7
    );

  delay_dp_8a9689ec72: entity work.delay_dp_entity_669e30fc9b
    port map (
      ce_1 => ce_1_sg_x507,
      clk_1 => clk_1_sg_x507,
      delay => bram_rd_addrs_y_net_x0,
      din => reinterpret4_output_port_net_x2,
      dout => dual_port_ram_doutb_net_x4
    );

  delay_reg: entity work.xlregister
    generic map (
      d_width => 13,
      init_value => b"0000000000000"
    )
    port map (
      ce => ce_1_sg_x507,
      clk => clk_1_sg_x507,
      d => delay5_q_net_x0,
      en(0) => delay2_q_net_x0,
      rst => "0",
      q => delay_reg_q_net
    );

  delay_sel: entity work.xldelay
    generic map (
      latency => 3,
      reg_retiming => 0,
      reset => 0,
      width => 2
    )
    port map (
      ce => ce_1_sg_x507,
      clk => clk_1_sg_x507,
      d => shift_sel_y_net,
      en => '1',
      rst => '1',
      q => delay_sel_q_net_x0
    );

  relational1: entity work.relational_9b3c9652f3
    port map (
      a => shift_sel_y_net,
      b => constant1_op_net,
      ce => '0',
      clk => '0',
      clr => '0',
      op(0) => relational1_op_net
    );

  relational2: entity work.relational_9b3c9652f3
    port map (
      a => shift_sel_y_net,
      b => constant2_op_net,
      ce => '0',
      clk => '0',
      clr => '0',
      op(0) => relational2_op_net
    );

  relational3: entity work.relational_9b3c9652f3
    port map (
      a => shift_sel_y_net,
      b => constant3_op_net,
      ce => '0',
      clk => '0',
      clr => '0',
      op(0) => relational3_op_net
    );

  shift_sel: entity work.xlslice
    generic map (
      new_lsb => 0,
      new_msb => 1,
      x_width => 13,
      y_width => 2
    )
    port map (
      x => delay_reg_q_net,
      y => shift_sel_y_net
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/coarse_delay/delay_gen0/count_parallel"

entity count_parallel_entity_a6b60d1b26 is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    sync_in: in std_logic; 
    update: out std_logic
  );
end count_parallel_entity_a6b60d1b26;

architecture structural of count_parallel_entity_a6b60d1b26 is
  signal ce_1_sg_x508: std_logic;
  signal clk_1_sg_x508: std_logic;
  signal constant4_op_net: std_logic_vector(6 downto 0);
  signal counter_op_net: std_logic_vector(6 downto 0);
  signal relational_op_net_x0: std_logic;
  signal slice2_y_net_x2: std_logic;

begin
  ce_1_sg_x508 <= ce_1;
  clk_1_sg_x508 <= clk_1;
  slice2_y_net_x2 <= sync_in;
  update <= relational_op_net_x0;

  constant4: entity work.constant_5478175279
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op => constant4_op_net
    );

  counter: entity work.xlcounter_free_c09f12_01
    generic map (
      core_name0 => "cntr_11_0_09a48837e6414c49",
      op_arith => xlSigned,
      op_width => 7
    )
    port map (
      ce => ce_1_sg_x508,
      clk => clk_1_sg_x508,
      clr => '0',
      en => "1",
      rst(0) => slice2_y_net_x2,
      op => counter_op_net
    );

  relational: entity work.relational_1497de3985
    port map (
      a => counter_op_net,
      b => constant4_op_net,
      ce => ce_1_sg_x508,
      clk => clk_1_sg_x508,
      clr => '0',
      op(0) => relational_op_net_x0
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/coarse_delay/delay_gen0/delay_calc"

entity delay_calc_entity_10677dac44 is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    en: in std_logic; 
    update: in std_logic; 
    val: in std_logic_vector(30 downto 0); 
    val_inc: in std_logic_vector(30 downto 0); 
    coeff: out std_logic_vector(44 downto 0)
  );
end delay_calc_entity_10677dac44;

architecture structural of delay_calc_entity_10677dac44 is
  signal addsub_s_net: std_logic_vector(42 downto 0);
  signal ce_1_sg_x509: std_logic;
  signal clk_1_sg_x509: std_logic;
  signal current_q_net_x0: std_logic_vector(44 downto 0);
  signal delay_q_net: std_logic;
  signal delay_q_net_x1: std_logic;
  signal delta_q_net: std_logic_vector(30 downto 0);
  signal logical_y_net: std_logic;
  signal mux_y_net: std_logic_vector(44 downto 0);
  signal normalise_fft1_op_net_x0: std_logic_vector(30 downto 0);
  signal register1_q_net: std_logic_vector(30 downto 0);
  signal register3_q_net: std_logic_vector(30 downto 0);
  signal register_q_net: std_logic;
  signal reinterpret1_output_port_net_x0: std_logic_vector(30 downto 0);
  signal relational_op_net_x1: std_logic;

begin
  ce_1_sg_x509 <= ce_1;
  clk_1_sg_x509 <= clk_1;
  delay_q_net_x1 <= en;
  relational_op_net_x1 <= update;
  reinterpret1_output_port_net_x0 <= val;
  normalise_fft1_op_net_x0 <= val_inc;
  coeff <= current_q_net_x0;

  addsub: entity work.addsub_ebbe1ebacf
    port map (
      a => current_q_net_x0,
      b => delta_q_net,
      ce => ce_1_sg_x509,
      clk => clk_1_sg_x509,
      clr => '0',
      s => addsub_s_net
    );

  current: entity work.xlregister
    generic map (
      d_width => 45,
      init_value => b"000000000000000000000000000000000000000000000"
    )
    port map (
      ce => ce_1_sg_x509,
      clk => clk_1_sg_x509,
      d => mux_y_net,
      en(0) => delay_q_net,
      rst => "0",
      q => current_q_net_x0
    );

  delay: entity work.delay_9f02caa990
    port map (
      ce => ce_1_sg_x509,
      clk => clk_1_sg_x509,
      clr => '0',
      d(0) => relational_op_net_x1,
      q(0) => delay_q_net
    );

  delta: entity work.xlregister
    generic map (
      d_width => 31,
      init_value => b"0000000000000000000000000000000"
    )
    port map (
      ce => ce_1_sg_x509,
      clk => clk_1_sg_x509,
      d => register1_q_net,
      en(0) => delay_q_net,
      rst => "0",
      q => delta_q_net
    );

  logical: entity work.logical_aacf6e1b0e
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0(0) => delay_q_net_x1,
      d1(0) => register_q_net,
      y(0) => logical_y_net
    );

  mux: entity work.mux_e38ddc7597
    port map (
      ce => ce_1_sg_x509,
      clk => clk_1_sg_x509,
      clr => '0',
      d0 => addsub_s_net,
      d1 => register3_q_net,
      sel(0) => logical_y_net,
      y => mux_y_net
    );

  register1: entity work.xlregister
    generic map (
      d_width => 31,
      init_value => b"0000000000000000000000000000000"
    )
    port map (
      ce => ce_1_sg_x509,
      clk => clk_1_sg_x509,
      d => normalise_fft1_op_net_x0,
      en(0) => delay_q_net_x1,
      rst => "0",
      q => register1_q_net
    );

  register3: entity work.xlregister
    generic map (
      d_width => 31,
      init_value => b"0000000000000000000000000000000"
    )
    port map (
      ce => ce_1_sg_x509,
      clk => clk_1_sg_x509,
      d => reinterpret1_output_port_net_x0,
      en(0) => delay_q_net_x1,
      rst => "0",
      q => register3_q_net
    );

  register_x0: entity work.xlregister
    generic map (
      d_width => 1,
      init_value => b"0"
    )
    port map (
      ce => ce_1_sg_x509,
      clk => clk_1_sg_x509,
      d(0) => delay_q_net_x1,
      en(0) => delay_q_net_x1,
      rst(0) => relational_op_net_x1,
      q(0) => register_q_net
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/coarse_delay/delay_gen0/phase_calc"

entity phase_calc_entity_54fee359a8 is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    update: in std_logic; 
    en_o: out std_logic
  );
end phase_calc_entity_54fee359a8;

architecture structural of phase_calc_entity_54fee359a8 is
  signal ce_1_sg_x510: std_logic;
  signal clk_1_sg_x510: std_logic;
  signal delay1_q_net_x0: std_logic;
  signal delay_q_net: std_logic;
  signal relational_op_net_x2: std_logic;

begin
  ce_1_sg_x510 <= ce_1;
  clk_1_sg_x510 <= clk_1;
  relational_op_net_x2 <= update;
  en_o <= delay1_q_net_x0;

  delay: entity work.delay_9f02caa990
    port map (
      ce => ce_1_sg_x510,
      clk => clk_1_sg_x510,
      clr => '0',
      d(0) => relational_op_net_x2,
      q(0) => delay_q_net
    );

  delay1: entity work.delay_9f02caa990
    port map (
      ce => ce_1_sg_x510,
      clk => clk_1_sg_x510,
      clr => '0',
      d(0) => delay_q_net,
      q(0) => delay1_q_net_x0
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/coarse_delay/delay_gen0"

entity delay_gen0_entity_b255b8425c is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    d_dt_delay: in std_logic_vector(15 downto 0); 
    delay: in std_logic_vector(30 downto 0); 
    en: in std_logic; 
    sync_in: in std_logic; 
    cd_o: out std_logic_vector(12 downto 0); 
    en_out: out std_logic
  );
end delay_gen0_entity_b255b8425c;

architecture structural of delay_gen0_entity_b255b8425c is
  signal ce_1_sg_x511: std_logic;
  signal clk_1_sg_x511: std_logic;
  signal concat4_y_net_x0: std_logic_vector(30 downto 0);
  signal convert3_dout_net: std_logic_vector(30 downto 0);
  signal convert5_dout_net: std_logic_vector(12 downto 0);
  signal current_q_net_x0: std_logic_vector(44 downto 0);
  signal delay1_q_net_x0: std_logic;
  signal delay2_q_net_x1: std_logic;
  signal delay4_q_net: std_logic;
  signal delay5_q_net_x1: std_logic_vector(12 downto 0);
  signal delay6_q_net: std_logic_vector(12 downto 0);
  signal delay_q_net_x2: std_logic;
  signal normalise_fft1_op_net_x0: std_logic_vector(30 downto 0);
  signal reinterpret1_output_port_net_x0: std_logic_vector(30 downto 0);
  signal reinterpret3_output_port_net: std_logic_vector(15 downto 0);
  signal relational_op_net_x2: std_logic;
  signal slice15_y_net_x0: std_logic_vector(15 downto 0);
  signal slice2_y_net: std_logic_vector(30 downto 0);
  signal slice2_y_net_x3: std_logic;
  signal slice3_y_net: std_logic_vector(15 downto 0);

begin
  ce_1_sg_x511 <= ce_1;
  clk_1_sg_x511 <= clk_1;
  slice15_y_net_x0 <= d_dt_delay;
  concat4_y_net_x0 <= delay;
  delay_q_net_x2 <= en;
  slice2_y_net_x3 <= sync_in;
  cd_o <= delay5_q_net_x1;
  en_out <= delay2_q_net_x1;

  convert3: entity work.xlconvert
    generic map (
      bool_conversion => 0,
      din_arith => 2,
      din_bin_pt => 15,
      din_width => 16,
      dout_arith => 2,
      dout_bin_pt => 30,
      dout_width => 31,
      latency => 0,
      overflow => xlWrap,
      quantization => xlTruncate
    )
    port map (
      ce => ce_1_sg_x511,
      clk => clk_1_sg_x511,
      clr => '0',
      din => reinterpret3_output_port_net,
      en => "1",
      dout => convert3_dout_net
    );

  convert5: entity work.xlconvert
    generic map (
      bool_conversion => 0,
      din_arith => 1,
      din_bin_pt => 30,
      din_width => 45,
      dout_arith => 1,
      dout_bin_pt => 0,
      dout_width => 13,
      latency => 0,
      overflow => xlWrap,
      quantization => xlTruncate
    )
    port map (
      ce => ce_1_sg_x511,
      clk => clk_1_sg_x511,
      clr => '0',
      din => current_q_net_x0,
      en => "1",
      dout => convert5_dout_net
    );

  count_parallel_a6b60d1b26: entity work.count_parallel_entity_a6b60d1b26
    port map (
      ce_1 => ce_1_sg_x511,
      clk_1 => clk_1_sg_x511,
      sync_in => slice2_y_net_x3,
      update => relational_op_net_x2
    );

  delay2: entity work.delay_9f02caa990
    port map (
      ce => ce_1_sg_x511,
      clk => clk_1_sg_x511,
      clr => '0',
      d(0) => delay4_q_net,
      q(0) => delay2_q_net_x1
    );

  delay4: entity work.delay_9f02caa990
    port map (
      ce => ce_1_sg_x511,
      clk => clk_1_sg_x511,
      clr => '0',
      d(0) => delay1_q_net_x0,
      q(0) => delay4_q_net
    );

  delay5: entity work.delay_67ef71f6b4
    port map (
      ce => ce_1_sg_x511,
      clk => clk_1_sg_x511,
      clr => '0',
      d => delay6_q_net,
      q => delay5_q_net_x1
    );

  delay6: entity work.delay_67ef71f6b4
    port map (
      ce => ce_1_sg_x511,
      clk => clk_1_sg_x511,
      clr => '0',
      d => convert5_dout_net,
      q => delay6_q_net
    );

  delay_calc_10677dac44: entity work.delay_calc_entity_10677dac44
    port map (
      ce_1 => ce_1_sg_x511,
      clk_1 => clk_1_sg_x511,
      en => delay_q_net_x2,
      update => relational_op_net_x2,
      val => reinterpret1_output_port_net_x0,
      val_inc => normalise_fft1_op_net_x0,
      coeff => current_q_net_x0
    );

  normalise_fft1: entity work.shift_d09007e5f5
    port map (
      ce => ce_1_sg_x511,
      clk => clk_1_sg_x511,
      clr => '0',
      ip => convert3_dout_net,
      op => normalise_fft1_op_net_x0
    );

  phase_calc_54fee359a8: entity work.phase_calc_entity_54fee359a8
    port map (
      ce_1 => ce_1_sg_x511,
      clk_1 => clk_1_sg_x511,
      update => relational_op_net_x2,
      en_o => delay1_q_net_x0
    );

  reinterpret1: entity work.reinterpret_4ddae7a67c
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => slice2_y_net,
      output_port => reinterpret1_output_port_net_x0
    );

  reinterpret3: entity work.reinterpret_151459306d
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => slice3_y_net,
      output_port => reinterpret3_output_port_net
    );

  slice2: entity work.xlslice
    generic map (
      new_lsb => 0,
      new_msb => 30,
      x_width => 31,
      y_width => 31
    )
    port map (
      x => concat4_y_net_x0,
      y => slice2_y_net
    );

  slice3: entity work.xlslice
    generic map (
      new_lsb => 0,
      new_msb => 15,
      x_width => 16,
      y_width => 16
    )
    port map (
      x => slice15_y_net_x0,
      y => slice3_y_net
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/coarse_delay"

entity coarse_delay_entity_14c739abb5 is
  port (
    arm0: in std_logic; 
    arm1: in std_logic; 
    cd_lt: in std_logic_vector(63 downto 0); 
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    data0: in std_logic_vector(31 downto 0); 
    data1: in std_logic_vector(31 downto 0); 
    ld_time0: in std_logic_vector(47 downto 0); 
    ld_time1: in std_logic_vector(47 downto 0); 
    ld_val0: in std_logic_vector(78 downto 0); 
    ld_val1: in std_logic_vector(78 downto 0); 
    load_now: in std_logic; 
    mrst: in std_logic; 
    sync: in std_logic; 
    data4_0: out std_logic_vector(31 downto 0); 
    data4_1: out std_logic_vector(31 downto 0); 
    sync_out: out std_logic
  );
end coarse_delay_entity_14c739abb5;

architecture structural of coarse_delay_entity_14c739abb5 is
  signal ce_1_sg_x516: std_logic;
  signal clk_1_sg_x516: std_logic;
  signal clock_op_net_x3: std_logic_vector(63 downto 0);
  signal concat1_y_net_x1: std_logic_vector(30 downto 0);
  signal concat1_y_net_x2: std_logic_vector(78 downto 0);
  signal concat22_y_net_x1: std_logic_vector(78 downto 0);
  signal concat2_y_net_x1: std_logic_vector(47 downto 0);
  signal concat4_y_net_x0: std_logic_vector(30 downto 0);
  signal concat9_y_net_x1: std_logic_vector(47 downto 0);
  signal concatenate_y_net_x1: std_logic_vector(32 downto 0);
  signal concatenate_y_net_x22: std_logic_vector(31 downto 0);
  signal concatenate_y_net_x23: std_logic_vector(31 downto 0);
  signal delay1_q_net_x2: std_logic;
  signal delay2_q_net_x1: std_logic;
  signal delay2_q_net_x2: std_logic;
  signal delay5_q_net_x1: std_logic_vector(12 downto 0);
  signal delay5_q_net_x2: std_logic_vector(12 downto 0);
  signal delay6_q_net_x3: std_logic;
  signal delay7_q_net_x1: std_logic_vector(32 downto 0);
  signal delay7_q_net_x2: std_logic_vector(31 downto 0);
  signal delay_q_net_x2: std_logic;
  signal delay_q_net_x3: std_logic;
  signal delay_sync_q_net_x12: std_logic;
  signal logical12_y_net_x1: std_logic;
  signal logical14_y_net_x4: std_logic;
  signal logical1_y_net_x1: std_logic;
  signal mux12_y_net_x2: std_logic_vector(7 downto 0);
  signal mux12_y_net_x3: std_logic_vector(7 downto 0);
  signal mux22_y_net_x2: std_logic_vector(7 downto 0);
  signal mux22_y_net_x3: std_logic_vector(7 downto 0);
  signal mux32_y_net_x2: std_logic_vector(7 downto 0);
  signal mux32_y_net_x3: std_logic_vector(7 downto 0);
  signal mux42_y_net_x2: std_logic_vector(7 downto 0);
  signal mux42_y_net_x3: std_logic_vector(7 downto 0);
  signal register_q_net_x0: std_logic_vector(78 downto 0);
  signal register_q_net_x1: std_logic_vector(78 downto 0);
  signal reinterpret1_output_port_net_x2: std_logic_vector(31 downto 0);
  signal reinterpret1_output_port_net_x3: std_logic_vector(7 downto 0);
  signal reinterpret1_output_port_net_x4: std_logic_vector(7 downto 0);
  signal reinterpret1_output_port_net_x5: std_logic_vector(31 downto 0);
  signal reinterpret2_output_port_net_x2: std_logic_vector(7 downto 0);
  signal reinterpret2_output_port_net_x3: std_logic_vector(7 downto 0);
  signal reinterpret2_output_port_net_x4: std_logic_vector(31 downto 0);
  signal reinterpret3_output_port_net_x2: std_logic_vector(7 downto 0);
  signal reinterpret3_output_port_net_x3: std_logic_vector(7 downto 0);
  signal reinterpret4_output_port_net_x2: std_logic_vector(7 downto 0);
  signal reinterpret4_output_port_net_x3: std_logic_vector(7 downto 0);
  signal slice11_y_net_x0: std_logic;
  signal slice13_y_net_x0: std_logic;
  signal slice15_y_net_x0: std_logic_vector(15 downto 0);
  signal slice17_y_net: std_logic_vector(15 downto 0);
  signal slice18_y_net: std_logic_vector(14 downto 0);
  signal slice1_y_net_x0: std_logic_vector(15 downto 0);
  signal slice2_y_net_x5: std_logic;
  signal slice3_y_net: std_logic_vector(15 downto 0);
  signal slice4_y_net: std_logic_vector(14 downto 0);

begin
  slice13_y_net_x0 <= arm0;
  slice11_y_net_x0 <= arm1;
  clock_op_net_x3 <= cd_lt;
  ce_1_sg_x516 <= ce_1;
  clk_1_sg_x516 <= clk_1;
  reinterpret2_output_port_net_x4 <= data0;
  reinterpret1_output_port_net_x5 <= data1;
  concat9_y_net_x1 <= ld_time0;
  concat2_y_net_x1 <= ld_time1;
  concat22_y_net_x1 <= ld_val0;
  concat1_y_net_x2 <= ld_val1;
  delay6_q_net_x3 <= load_now;
  logical14_y_net_x4 <= mrst;
  delay1_q_net_x2 <= sync;
  data4_0 <= concatenate_y_net_x23;
  data4_1 <= concatenate_y_net_x22;
  sync_out <= delay_sync_q_net_x12;

  bus_create1_e610e729f9: entity work.bus_create1_entity_e610e729f9
    port map (
      in1 => delay1_q_net_x2,
      in2 => reinterpret2_output_port_net_x4,
      bus_out => concatenate_y_net_x1
    );

  bus_create2_72ad0630e7: entity work.bus_create2_entity_72ad0630e7
    port map (
      in1 => mux42_y_net_x3,
      in2 => mux32_y_net_x3,
      in3 => mux22_y_net_x3,
      in4 => mux12_y_net_x3,
      bus_out => concatenate_y_net_x22
    );

  bus_create4_dac697383b: entity work.bus_create2_entity_72ad0630e7
    port map (
      in1 => mux42_y_net_x2,
      in2 => mux32_y_net_x2,
      in3 => mux22_y_net_x2,
      in4 => mux12_y_net_x2,
      bus_out => concatenate_y_net_x23
    );

  bus_expand1_b06b720f17: entity work.bus_expand_entity_42329a104d
    port map (
      bus_in => delay7_q_net_x1,
      lsb_out1 => reinterpret1_output_port_net_x2,
      msb_out2 => slice2_y_net_x5
    );

  bus_expand3_2df401f87e: entity work.bus_expand1_entity_4a80f53028
    port map (
      bus_in => reinterpret1_output_port_net_x2,
      lsb_out1 => reinterpret1_output_port_net_x4,
      msb_out4 => reinterpret4_output_port_net_x2,
      out2 => reinterpret2_output_port_net_x2,
      out3 => reinterpret3_output_port_net_x2
    );

  bus_expand4_bf4d1a495d: entity work.bus_expand1_entity_4a80f53028
    port map (
      bus_in => delay7_q_net_x2,
      lsb_out1 => reinterpret1_output_port_net_x3,
      msb_out4 => reinterpret4_output_port_net_x3,
      out2 => reinterpret2_output_port_net_x3,
      out3 => reinterpret3_output_port_net_x3
    );

  cd_tr1_34e6da8a4b: entity work.cd_tr1_entity_34e6da8a4b
    port map (
      arm => logical1_y_net_x1,
      ce_1 => ce_1_sg_x516,
      clk_1 => clk_1_sg_x516,
      current_time => clock_op_net_x3,
      din => reinterpret1_output_port_net_x5,
      load_now => delay6_q_net_x3,
      load_time => concat2_y_net_x1,
      load_value => concat1_y_net_x2,
      rst => logical14_y_net_x4,
      dout => delay7_q_net_x2,
      enable => delay_q_net_x3,
      value => register_q_net_x1
    );

  cd_tr_e556bbeffd: entity work.cd_tr_entity_e556bbeffd
    port map (
      arm => logical12_y_net_x1,
      ce_1 => ce_1_sg_x516,
      clk_1 => clk_1_sg_x516,
      current_time => clock_op_net_x3,
      din => concatenate_y_net_x1,
      load_now => delay6_q_net_x3,
      load_time => concat9_y_net_x1,
      load_value => concat22_y_net_x1,
      rst => logical14_y_net_x4,
      dout => delay7_q_net_x1,
      enable => delay_q_net_x2,
      value => register_q_net_x0
    );

  concat1: entity work.concat_c588c5101d
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      in0 => slice4_y_net,
      in1 => slice3_y_net,
      y => concat1_y_net_x1
    );

  concat4: entity work.concat_c588c5101d
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      in0 => slice18_y_net,
      in1 => slice17_y_net,
      y => concat4_y_net_x0
    );

  delay_coarse1_3b68014ca9: entity work.delay_coarse1_entity_3b68014ca9
    port map (
      ce_1 => ce_1_sg_x516,
      clk_1 => clk_1_sg_x516,
      data_in1 => reinterpret4_output_port_net_x3,
      data_in2 => reinterpret3_output_port_net_x3,
      data_in3 => reinterpret2_output_port_net_x3,
      data_in4 => reinterpret1_output_port_net_x3,
      delay => delay5_q_net_x2,
      en => delay2_q_net_x2,
      data_out1 => mux42_y_net_x3,
      data_out2 => mux32_y_net_x3,
      data_out3 => mux22_y_net_x3,
      data_out4 => mux12_y_net_x3
    );

  delay_coarse_afbd97e680: entity work.delay_coarse_entity_afbd97e680
    port map (
      ce_1 => ce_1_sg_x516,
      clk_1 => clk_1_sg_x516,
      data_in1 => reinterpret4_output_port_net_x2,
      data_in2 => reinterpret3_output_port_net_x2,
      data_in3 => reinterpret2_output_port_net_x2,
      data_in4 => reinterpret1_output_port_net_x4,
      delay => delay5_q_net_x1,
      en => delay2_q_net_x1,
      sync => slice2_y_net_x5,
      data_out1 => mux42_y_net_x2,
      data_out2 => mux32_y_net_x2,
      data_out3 => mux22_y_net_x2,
      data_out4 => mux12_y_net_x2,
      sync_out => delay_sync_q_net_x12
    );

  delay_gen0_b255b8425c: entity work.delay_gen0_entity_b255b8425c
    port map (
      ce_1 => ce_1_sg_x516,
      clk_1 => clk_1_sg_x516,
      d_dt_delay => slice15_y_net_x0,
      delay => concat4_y_net_x0,
      en => delay_q_net_x2,
      sync_in => slice2_y_net_x5,
      cd_o => delay5_q_net_x1,
      en_out => delay2_q_net_x1
    );

  delay_gen1_e9f889d339: entity work.delay_gen0_entity_b255b8425c
    port map (
      ce_1 => ce_1_sg_x516,
      clk_1 => clk_1_sg_x516,
      d_dt_delay => slice1_y_net_x0,
      delay => concat1_y_net_x1,
      en => delay_q_net_x3,
      sync_in => slice2_y_net_x5,
      cd_o => delay5_q_net_x2,
      en_out => delay2_q_net_x2
    );

  logical1: entity work.logical_aacf6e1b0e
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0(0) => delay6_q_net_x3,
      d1(0) => slice11_y_net_x0,
      y(0) => logical1_y_net_x1
    );

  logical12: entity work.logical_aacf6e1b0e
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0(0) => delay6_q_net_x3,
      d1(0) => slice13_y_net_x0,
      y(0) => logical12_y_net_x1
    );

  slice1: entity work.xlslice
    generic map (
      new_lsb => 0,
      new_msb => 15,
      x_width => 79,
      y_width => 16
    )
    port map (
      x => register_q_net_x1,
      y => slice1_y_net_x0
    );

  slice15: entity work.xlslice
    generic map (
      new_lsb => 0,
      new_msb => 15,
      x_width => 79,
      y_width => 16
    )
    port map (
      x => register_q_net_x0,
      y => slice15_y_net_x0
    );

  slice17: entity work.xlslice
    generic map (
      new_lsb => 16,
      new_msb => 31,
      x_width => 79,
      y_width => 16
    )
    port map (
      x => register_q_net_x0,
      y => slice17_y_net
    );

  slice18: entity work.xlslice
    generic map (
      new_lsb => 32,
      new_msb => 46,
      x_width => 79,
      y_width => 15
    )
    port map (
      x => register_q_net_x0,
      y => slice18_y_net
    );

  slice3: entity work.xlslice
    generic map (
      new_lsb => 16,
      new_msb => 31,
      x_width => 79,
      y_width => 16
    )
    port map (
      x => register_q_net_x1,
      y => slice3_y_net
    );

  slice4: entity work.xlslice
    generic map (
      new_lsb => 32,
      new_msb => 46,
      x_width => 79,
      y_width => 15
    )
    port map (
      x => register_q_net_x1,
      y => slice4_y_net
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/convert"

entity convert_entity_c5755984be is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    in_x0: in std_logic_vector(3 downto 0); 
    out1: out std_logic_vector(1 downto 0)
  );
end convert_entity_c5755984be;

architecture structural of convert_entity_c5755984be is
  signal ce_1_sg_x517: std_logic;
  signal clk_1_sg_x517: std_logic;
  signal constant10_op_net: std_logic_vector(1 downto 0);
  signal constant11_op_net: std_logic_vector(1 downto 0);
  signal constant12_op_net: std_logic_vector(1 downto 0);
  signal constant13_op_net: std_logic_vector(1 downto 0);
  signal constant14_op_net: std_logic_vector(1 downto 0);
  signal constant15_op_net: std_logic_vector(1 downto 0);
  signal constant1_op_net: std_logic_vector(1 downto 0);
  signal constant2_op_net: std_logic_vector(1 downto 0);
  signal constant3_op_net: std_logic_vector(1 downto 0);
  signal constant4_op_net: std_logic_vector(1 downto 0);
  signal constant5_op_net: std_logic_vector(1 downto 0);
  signal constant6_op_net: std_logic_vector(1 downto 0);
  signal constant7_op_net: std_logic_vector(1 downto 0);
  signal constant8_op_net: std_logic_vector(1 downto 0);
  signal constant9_op_net: std_logic_vector(1 downto 0);
  signal constant_op_net: std_logic_vector(1 downto 0);
  signal mux_y_net_x2: std_logic_vector(1 downto 0);
  signal register3_q_net_x0: std_logic_vector(3 downto 0);

begin
  ce_1_sg_x517 <= ce_1;
  clk_1_sg_x517 <= clk_1;
  register3_q_net_x0 <= in_x0;
  out1 <= mux_y_net_x2;

  constant1: entity work.constant_cda50df78a
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op => constant1_op_net
    );

  constant10: entity work.constant_3a9a3daeb9
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op => constant10_op_net
    );

  constant11: entity work.constant_3a9a3daeb9
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op => constant11_op_net
    );

  constant12: entity work.constant_3a9a3daeb9
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op => constant12_op_net
    );

  constant13: entity work.constant_3a9a3daeb9
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op => constant13_op_net
    );

  constant14: entity work.constant_3a9a3daeb9
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op => constant14_op_net
    );

  constant15: entity work.constant_3a9a3daeb9
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op => constant15_op_net
    );

  constant2: entity work.constant_a7e2bb9e12
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op => constant2_op_net
    );

  constant3: entity work.constant_a7e2bb9e12
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op => constant3_op_net
    );

  constant4: entity work.constant_e8ddc079e9
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op => constant4_op_net
    );

  constant5: entity work.constant_e8ddc079e9
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op => constant5_op_net
    );

  constant6: entity work.constant_e8ddc079e9
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op => constant6_op_net
    );

  constant7: entity work.constant_e8ddc079e9
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op => constant7_op_net
    );

  constant8: entity work.constant_3a9a3daeb9
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op => constant8_op_net
    );

  constant9: entity work.constant_3a9a3daeb9
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op => constant9_op_net
    );

  constant_x0: entity work.constant_cda50df78a
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op => constant_op_net
    );

  mux: entity work.mux_cc70926354
    port map (
      ce => ce_1_sg_x517,
      clk => clk_1_sg_x517,
      clr => '0',
      d0 => constant_op_net,
      d1 => constant1_op_net,
      d10 => constant10_op_net,
      d11 => constant12_op_net,
      d12 => constant13_op_net,
      d13 => constant11_op_net,
      d14 => constant15_op_net,
      d15 => constant14_op_net,
      d2 => constant2_op_net,
      d3 => constant3_op_net,
      d4 => constant4_op_net,
      d5 => constant5_op_net,
      d6 => constant6_op_net,
      d7 => constant7_op_net,
      d8 => constant8_op_net,
      d9 => constant9_op_net,
      sel => register3_q_net_x0,
      y => mux_y_net_x2
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/ct_tvg"

entity ct_tvg_entity_81cd2f878e is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    datain: in std_logic_vector(15 downto 0); 
    syncin: in std_logic; 
    tvg_en: in std_logic; 
    validin: in std_logic; 
    dataout: out std_logic_vector(15 downto 0); 
    syncout: out std_logic; 
    validout: out std_logic
  );
end ct_tvg_entity_81cd2f878e;

architecture structural of ct_tvg_entity_81cd2f878e is
  signal ce_1_sg_x518: std_logic;
  signal clk_1_sg_x518: std_logic;
  signal concatenate_y_net_x0: std_logic_vector(15 downto 0);
  signal convert_dout_net: std_logic_vector(15 downto 0);
  signal delay16_q_net_x0: std_logic;
  signal delay1_q_net_x0: std_logic;
  signal delay6_q_net_x0: std_logic;
  signal delay_q_net_x0: std_logic;
  signal mux1_y_net_x0: std_logic_vector(15 downto 0);
  signal register2_q_net_x0: std_logic;
  signal tvgdata: std_logic_vector(11 downto 0);

begin
  ce_1_sg_x518 <= ce_1;
  clk_1_sg_x518 <= clk_1;
  concatenate_y_net_x0 <= datain;
  delay6_q_net_x0 <= syncin;
  register2_q_net_x0 <= tvg_en;
  delay16_q_net_x0 <= validin;
  dataout <= mux1_y_net_x0;
  syncout <= delay_q_net_x0;
  validout <= delay1_q_net_x0;

  convert: entity work.xlconvert
    generic map (
      bool_conversion => 0,
      din_arith => 1,
      din_bin_pt => 0,
      din_width => 12,
      dout_arith => 1,
      dout_bin_pt => 0,
      dout_width => 16,
      latency => 0,
      overflow => xlWrap,
      quantization => xlTruncate
    )
    port map (
      ce => ce_1_sg_x518,
      clk => clk_1_sg_x518,
      clr => '0',
      din => tvgdata,
      en => "1",
      dout => convert_dout_net
    );

  counter1: entity work.xlcounter_free_c09f12_01
    generic map (
      core_name0 => "cntr_11_0_ecb560ca58503876",
      op_arith => xlUnsigned,
      op_width => 12
    )
    port map (
      ce => ce_1_sg_x518,
      clk => clk_1_sg_x518,
      clr => '0',
      en(0) => delay16_q_net_x0,
      rst(0) => delay6_q_net_x0,
      op => tvgdata
    );

  delay: entity work.delay_e18fb31a3d
    port map (
      ce => ce_1_sg_x518,
      clk => clk_1_sg_x518,
      clr => '0',
      d(0) => delay6_q_net_x0,
      q(0) => delay_q_net_x0
    );

  delay1: entity work.delay_e18fb31a3d
    port map (
      ce => ce_1_sg_x518,
      clk => clk_1_sg_x518,
      clr => '0',
      d(0) => delay16_q_net_x0,
      q(0) => delay1_q_net_x0
    );

  mux1: entity work.mux_0aaa3afba6
    port map (
      ce => ce_1_sg_x518,
      clk => clk_1_sg_x518,
      clr => '0',
      d0 => concatenate_y_net_x0,
      d1 => convert_dout_net,
      sel(0) => register2_q_net_x0,
      y => mux1_y_net_x0
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/decat0"

entity decat0_entity_2340466183 is
  port (
    in1: in std_logic_vector(31 downto 0); 
    out1: out std_logic_vector(7 downto 0); 
    out2: out std_logic_vector(7 downto 0); 
    out3: out std_logic_vector(7 downto 0); 
    out4: out std_logic_vector(7 downto 0)
  );
end decat0_entity_2340466183;

architecture structural of decat0_entity_2340466183 is
  signal concatenate_y_net_x1: std_logic_vector(31 downto 0);
  signal reinterpret1_output_port_net_x1: std_logic_vector(7 downto 0);
  signal reinterpret2_output_port_net_x1: std_logic_vector(7 downto 0);
  signal reinterpret3_output_port_net_x1: std_logic_vector(7 downto 0);
  signal reinterpret4_output_port_net_x1: std_logic_vector(7 downto 0);
  signal slice15_y_net: std_logic_vector(7 downto 0);
  signal slice16_y_net: std_logic_vector(7 downto 0);
  signal slice17_y_net: std_logic_vector(7 downto 0);
  signal slice9_y_net: std_logic_vector(7 downto 0);

begin
  concatenate_y_net_x1 <= in1;
  out1 <= reinterpret2_output_port_net_x1;
  out2 <= reinterpret1_output_port_net_x1;
  out3 <= reinterpret3_output_port_net_x1;
  out4 <= reinterpret4_output_port_net_x1;

  reinterpret1: entity work.reinterpret_4389dc89bf
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => slice16_y_net,
      output_port => reinterpret1_output_port_net_x1
    );

  reinterpret2: entity work.reinterpret_4389dc89bf
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => slice17_y_net,
      output_port => reinterpret2_output_port_net_x1
    );

  reinterpret3: entity work.reinterpret_4389dc89bf
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => slice15_y_net,
      output_port => reinterpret3_output_port_net_x1
    );

  reinterpret4: entity work.reinterpret_4389dc89bf
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => slice9_y_net,
      output_port => reinterpret4_output_port_net_x1
    );

  slice15: entity work.xlslice
    generic map (
      new_lsb => 8,
      new_msb => 15,
      x_width => 32,
      y_width => 8
    )
    port map (
      x => concatenate_y_net_x1,
      y => slice15_y_net
    );

  slice16: entity work.xlslice
    generic map (
      new_lsb => 16,
      new_msb => 23,
      x_width => 32,
      y_width => 8
    )
    port map (
      x => concatenate_y_net_x1,
      y => slice16_y_net
    );

  slice17: entity work.xlslice
    generic map (
      new_lsb => 24,
      new_msb => 31,
      x_width => 32,
      y_width => 8
    )
    port map (
      x => concatenate_y_net_x1,
      y => slice17_y_net
    );

  slice9: entity work.xlslice
    generic map (
      new_lsb => 0,
      new_msb => 7,
      x_width => 32,
      y_width => 8
    )
    port map (
      x => concatenate_y_net_x1,
      y => slice9_y_net
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/eq0/calc_add"

entity calc_add_entity_2915bb7175 is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    in_x0: in std_logic_vector(11 downto 0); 
    out_x0: out std_logic_vector(11 downto 0)
  );
end calc_add_entity_2915bb7175;

architecture structural of calc_add_entity_2915bb7175 is
  signal add_sub_s_net: std_logic;
  signal ce_1_sg_x528: std_logic;
  signal clk_1_sg_x528: std_logic;
  signal concat_y_net: std_logic_vector(11 downto 0);
  signal const_op_net: std_logic;
  signal convert_addr_dout_net: std_logic_vector(11 downto 0);
  signal counter8_op_net_x0: std_logic_vector(11 downto 0);
  signal lsw_y_net: std_logic;
  signal manipulate_op_net: std_logic;
  signal msw_y_net: std_logic_vector(10 downto 0);
  signal mux_y_net_x0: std_logic_vector(11 downto 0);

begin
  ce_1_sg_x528 <= ce_1;
  clk_1_sg_x528 <= clk_1;
  counter8_op_net_x0 <= in_x0;
  out_x0 <= mux_y_net_x0;

  add_sub: entity work.addsub_c13097e33e
    port map (
      a(0) => const_op_net,
      b(0) => lsw_y_net,
      ce => ce_1_sg_x528,
      clk => clk_1_sg_x528,
      clr => '0',
      s(0) => add_sub_s_net
    );

  concat: entity work.concat_e2aa47955c
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      in0 => msw_y_net,
      in1(0) => add_sub_s_net,
      y => concat_y_net
    );

  const: entity work.constant_963ed6358a
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op(0) => const_op_net
    );

  convert_addr: entity work.xlconvert
    generic map (
      bool_conversion => 0,
      din_arith => 1,
      din_bin_pt => 0,
      din_width => 12,
      dout_arith => 1,
      dout_bin_pt => 0,
      dout_width => 12,
      latency => 0,
      overflow => xlWrap,
      quantization => xlTruncate
    )
    port map (
      ce => ce_1_sg_x528,
      clk => clk_1_sg_x528,
      clr => '0',
      din => counter8_op_net_x0,
      en => "1",
      dout => convert_addr_dout_net
    );

  lsw: entity work.xlslice
    generic map (
      new_lsb => 0,
      new_msb => 0,
      x_width => 12,
      y_width => 1
    )
    port map (
      x => convert_addr_dout_net,
      y(0) => lsw_y_net
    );

  manipulate: entity work.constant_963ed6358a
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op(0) => manipulate_op_net
    );

  msw: entity work.xlslice
    generic map (
      new_lsb => 1,
      new_msb => 11,
      x_width => 12,
      y_width => 11
    )
    port map (
      x => convert_addr_dout_net,
      y => msw_y_net
    );

  mux: entity work.mux_c3e1ddb86e
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0 => convert_addr_dout_net,
      d1 => concat_y_net,
      sel(0) => manipulate_op_net,
      y => mux_y_net_x0
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/eq0"

entity eq0_entity_4c0c77caa2 is
  port (
    addr: in std_logic_vector(11 downto 0); 
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    data_in: in std_logic_vector(31 downto 0); 
    we: in std_logic; 
    convert_addr_x0: out std_logic_vector(11 downto 0); 
    convert_din1_x0: out std_logic_vector(31 downto 0); 
    convert_we_x0: out std_logic
  );
end eq0_entity_4c0c77caa2;

architecture structural of eq0_entity_4c0c77caa2 is
  signal ce_1_sg_x529: std_logic;
  signal clk_1_sg_x529: std_logic;
  signal constant41_op_net_x0: std_logic_vector(31 downto 0);
  signal constant46_op_net_x0: std_logic;
  signal convert_addr_dout_net_x0: std_logic_vector(11 downto 0);
  signal convert_din1_dout_net_x0: std_logic_vector(31 downto 0);
  signal convert_din_dout_net: std_logic_vector(31 downto 0);
  signal convert_we_dout_net_x0: std_logic;
  signal counter8_op_net_x1: std_logic_vector(11 downto 0);
  signal mux_y_net_x0: std_logic_vector(11 downto 0);

begin
  counter8_op_net_x1 <= addr;
  ce_1_sg_x529 <= ce_1;
  clk_1_sg_x529 <= clk_1;
  constant41_op_net_x0 <= data_in;
  constant46_op_net_x0 <= we;
  convert_addr_x0 <= convert_addr_dout_net_x0;
  convert_din1_x0 <= convert_din1_dout_net_x0;
  convert_we_x0 <= convert_we_dout_net_x0;

  calc_add_2915bb7175: entity work.calc_add_entity_2915bb7175
    port map (
      ce_1 => ce_1_sg_x529,
      clk_1 => clk_1_sg_x529,
      in_x0 => counter8_op_net_x1,
      out_x0 => mux_y_net_x0
    );

  convert_addr: entity work.xlconvert
    generic map (
      bool_conversion => 0,
      din_arith => 1,
      din_bin_pt => 0,
      din_width => 12,
      dout_arith => 1,
      dout_bin_pt => 0,
      dout_width => 12,
      latency => 0,
      overflow => xlWrap,
      quantization => xlTruncate
    )
    port map (
      ce => ce_1_sg_x529,
      clk => clk_1_sg_x529,
      clr => '0',
      din => mux_y_net_x0,
      en => "1",
      dout => convert_addr_dout_net_x0
    );

  convert_din: entity work.xlconvert
    generic map (
      bool_conversion => 0,
      din_arith => 1,
      din_bin_pt => 0,
      din_width => 32,
      dout_arith => 1,
      dout_bin_pt => 0,
      dout_width => 32,
      latency => 0,
      overflow => xlWrap,
      quantization => xlTruncate
    )
    port map (
      ce => '1',
      clk => '1',
      clr => '0',
      din => constant41_op_net_x0,
      en => "1",
      dout => convert_din_dout_net
    );

  convert_din1: entity work.xlconvert
    generic map (
      bool_conversion => 0,
      din_arith => 1,
      din_bin_pt => 0,
      din_width => 32,
      dout_arith => 1,
      dout_bin_pt => 0,
      dout_width => 32,
      latency => 0,
      overflow => xlWrap,
      quantization => xlTruncate
    )
    port map (
      ce => '1',
      clk => '1',
      clr => '0',
      din => convert_din_dout_net,
      en => "1",
      dout => convert_din1_dout_net_x0
    );

  convert_we: entity work.xlconvert
    generic map (
      bool_conversion => 0,
      din_arith => 1,
      din_bin_pt => 0,
      din_width => 1,
      dout_arith => 1,
      dout_bin_pt => 0,
      dout_width => 1,
      latency => 0,
      overflow => xlWrap,
      quantization => xlTruncate
    )
    port map (
      ce => '1',
      clk => '1',
      clr => '0',
      din(0) => constant46_op_net_x0,
      en => "1",
      dout(0) => convert_we_dout_net_x0
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/fdfs/bus_create"

entity bus_create_entity_4569e4a2f8 is
  port (
    in1: in std_logic; 
    in2: in std_logic_vector(83 downto 0); 
    bus_out: out std_logic_vector(84 downto 0)
  );
end bus_create_entity_4569e4a2f8;

architecture structural of bus_create_entity_4569e4a2f8 is
  signal concatenate_y_net_x0: std_logic_vector(84 downto 0);
  signal delay_q_net_x0: std_logic;
  signal mux_y_net_x0: std_logic_vector(83 downto 0);
  signal reinterpret1_output_port_net: std_logic;
  signal reinterpret2_output_port_net: std_logic_vector(83 downto 0);

begin
  delay_q_net_x0 <= in1;
  mux_y_net_x0 <= in2;
  bus_out <= concatenate_y_net_x0;

  concatenate: entity work.concat_b8ac94cae7
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      in0(0) => reinterpret1_output_port_net,
      in1 => reinterpret2_output_port_net,
      y => concatenate_y_net_x0
    );

  reinterpret1: entity work.reinterpret_112d91c147
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port(0) => delay_q_net_x0,
      output_port(0) => reinterpret1_output_port_net
    );

  reinterpret2: entity work.reinterpret_2b04cd795d
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => mux_y_net_x0,
      output_port => reinterpret2_output_port_net
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/fdfs/bus_create1"

entity bus_create1_entity_74c8747f81 is
  port (
    in1: in std_logic_vector(61 downto 0); 
    in2: in std_logic_vector(61 downto 0); 
    bus_out: out std_logic_vector(123 downto 0)
  );
end bus_create1_entity_74c8747f81;

architecture structural of bus_create1_entity_74c8747f81 is
  signal concat_y_net_x1: std_logic_vector(61 downto 0);
  signal concat_y_net_x2: std_logic_vector(61 downto 0);
  signal concatenate_y_net_x0: std_logic_vector(123 downto 0);
  signal reinterpret1_output_port_net: std_logic_vector(61 downto 0);
  signal reinterpret2_output_port_net: std_logic_vector(61 downto 0);

begin
  concat_y_net_x1 <= in1;
  concat_y_net_x2 <= in2;
  bus_out <= concatenate_y_net_x0;

  concatenate: entity work.concat_3cc25f9a26
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      in0 => reinterpret1_output_port_net,
      in1 => reinterpret2_output_port_net,
      y => concatenate_y_net_x0
    );

  reinterpret1: entity work.reinterpret_aa522dcdd3
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => concat_y_net_x1,
      output_port => reinterpret1_output_port_net
    );

  reinterpret2: entity work.reinterpret_aa522dcdd3
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => concat_y_net_x2,
      output_port => reinterpret2_output_port_net
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/fdfs/bus_create2"

entity bus_create2_entity_86f2416e65 is
  port (
    in1: in std_logic_vector(61 downto 0); 
    in2: in std_logic; 
    in3: in std_logic; 
    in4: in std_logic_vector(19 downto 0); 
    bus_out: out std_logic_vector(83 downto 0)
  );
end bus_create2_entity_86f2416e65;

architecture structural of bus_create2_entity_86f2416e65 is
  signal concatenate_y_net_x0: std_logic_vector(83 downto 0);
  signal delay15_q_net_x0: std_logic;
  signal delay21_q_net_x0: std_logic_vector(19 downto 0);
  signal edge_op_y_net_x1: std_logic;
  signal reinterpret1_output_port_net: std_logic_vector(61 downto 0);
  signal reinterpret2_output_port_net: std_logic;
  signal reinterpret2_output_port_net_x1: std_logic_vector(61 downto 0);
  signal reinterpret3_output_port_net: std_logic;
  signal reinterpret4_output_port_net: std_logic_vector(19 downto 0);

begin
  reinterpret2_output_port_net_x1 <= in1;
  delay15_q_net_x0 <= in2;
  edge_op_y_net_x1 <= in3;
  delay21_q_net_x0 <= in4;
  bus_out <= concatenate_y_net_x0;

  concatenate: entity work.concat_4a40e578d7
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      in0 => reinterpret1_output_port_net,
      in1(0) => reinterpret2_output_port_net,
      in2(0) => reinterpret3_output_port_net,
      in3 => reinterpret4_output_port_net,
      y => concatenate_y_net_x0
    );

  reinterpret1: entity work.reinterpret_aa522dcdd3
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => reinterpret2_output_port_net_x1,
      output_port => reinterpret1_output_port_net
    );

  reinterpret2: entity work.reinterpret_112d91c147
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port(0) => delay15_q_net_x0,
      output_port(0) => reinterpret2_output_port_net
    );

  reinterpret3: entity work.reinterpret_112d91c147
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port(0) => edge_op_y_net_x1,
      output_port(0) => reinterpret3_output_port_net
    );

  reinterpret4: entity work.reinterpret_4a8cbc85ce
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => delay21_q_net_x0,
      output_port => reinterpret4_output_port_net
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/fdfs/delay_gen/Subsystem1"

entity subsystem1_entity_1899c22aea is
  port (
    in1: in std_logic_vector(83 downto 0); 
    out1: out std_logic; 
    out2: out std_logic_vector(61 downto 0); 
    out3: out std_logic_vector(19 downto 0); 
    out4: out std_logic
  );
end subsystem1_entity_1899c22aea;

architecture structural of subsystem1_entity_1899c22aea is
  signal delay3_q_net_x0: std_logic_vector(83 downto 0);
  signal slice1_y_net_x0: std_logic;
  signal slice2_y_net_x0: std_logic_vector(61 downto 0);
  signal slice3_y_net_x0: std_logic_vector(19 downto 0);
  signal slice_y_net_x0: std_logic;

begin
  delay3_q_net_x0 <= in1;
  out1 <= slice_y_net_x0;
  out2 <= slice2_y_net_x0;
  out3 <= slice3_y_net_x0;
  out4 <= slice1_y_net_x0;

  slice: entity work.xlslice
    generic map (
      new_lsb => 83,
      new_msb => 83,
      x_width => 84,
      y_width => 1
    )
    port map (
      x => delay3_q_net_x0,
      y(0) => slice_y_net_x0
    );

  slice1: entity work.xlslice
    generic map (
      new_lsb => 0,
      new_msb => 0,
      x_width => 84,
      y_width => 1
    )
    port map (
      x => delay3_q_net_x0,
      y(0) => slice1_y_net_x0
    );

  slice2: entity work.xlslice
    generic map (
      new_lsb => 21,
      new_msb => 82,
      x_width => 84,
      y_width => 62
    )
    port map (
      x => delay3_q_net_x0,
      y => slice2_y_net_x0
    );

  slice3: entity work.xlslice
    generic map (
      new_lsb => 1,
      new_msb => 20,
      x_width => 84,
      y_width => 20
    )
    port map (
      x => delay3_q_net_x0,
      y => slice3_y_net_x0
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/fdfs/delay_gen/delay_calc"

entity delay_calc_entity_7a6c9a8503 is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    en: in std_logic; 
    update: in std_logic; 
    val: in std_logic_vector(30 downto 0); 
    val_inc: in std_logic_vector(18 downto 0); 
    coeff: out std_logic_vector(32 downto 0)
  );
end delay_calc_entity_7a6c9a8503;

architecture structural of delay_calc_entity_7a6c9a8503 is
  signal addsub_s_net: std_logic_vector(30 downto 0);
  signal ce_1_sg_x532: std_logic;
  signal clk_1_sg_x532: std_logic;
  signal current_q_net_x0: std_logic_vector(32 downto 0);
  signal delay_q_net: std_logic;
  signal delay_q_net_x1: std_logic;
  signal delta_q_net: std_logic_vector(18 downto 0);
  signal logical_y_net: std_logic;
  signal mux_y_net: std_logic_vector(32 downto 0);
  signal normalise_fft1_op_net_x0: std_logic_vector(18 downto 0);
  signal register1_q_net: std_logic_vector(18 downto 0);
  signal register3_q_net: std_logic_vector(30 downto 0);
  signal register_q_net: std_logic;
  signal reinterpret1_output_port_net_x0: std_logic_vector(30 downto 0);
  signal slice2_y_net_x0: std_logic;

begin
  ce_1_sg_x532 <= ce_1;
  clk_1_sg_x532 <= clk_1;
  delay_q_net_x1 <= en;
  slice2_y_net_x0 <= update;
  reinterpret1_output_port_net_x0 <= val;
  normalise_fft1_op_net_x0 <= val_inc;
  coeff <= current_q_net_x0;

  addsub: entity work.xladdsub_c09f12_01
    generic map (
      a_arith => xlUnsigned,
      a_bin_pt => 18,
      a_width => 33,
      b_arith => xlSigned,
      b_bin_pt => 18,
      b_width => 19,
      c_has_c_out => 0,
      c_latency => 1,
      c_output_width => 35,
      core_name0 => "addsb_11_0_defe95552cb97446",
      extra_registers => 1,
      full_s_arith => 2,
      full_s_width => 35,
      latency => 2,
      overflow => 2,
      quantization => 1,
      s_arith => xlUnsigned,
      s_bin_pt => 18,
      s_width => 31
    )
    port map (
      a => current_q_net_x0,
      b => delta_q_net,
      ce => ce_1_sg_x532,
      clk => clk_1_sg_x532,
      clr => '0',
      en => "1",
      s => addsub_s_net
    );

  current: entity work.xlregister
    generic map (
      d_width => 33,
      init_value => b"000000000000000000000000000000000"
    )
    port map (
      ce => ce_1_sg_x532,
      clk => clk_1_sg_x532,
      d => mux_y_net,
      en(0) => delay_q_net,
      rst => "0",
      q => current_q_net_x0
    );

  delay: entity work.delay_9f02caa990
    port map (
      ce => ce_1_sg_x532,
      clk => clk_1_sg_x532,
      clr => '0',
      d(0) => slice2_y_net_x0,
      q(0) => delay_q_net
    );

  delta: entity work.xlregister
    generic map (
      d_width => 19,
      init_value => b"0000000000000000000"
    )
    port map (
      ce => ce_1_sg_x532,
      clk => clk_1_sg_x532,
      d => register1_q_net,
      en(0) => delay_q_net,
      rst => "0",
      q => delta_q_net
    );

  logical: entity work.logical_aacf6e1b0e
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0(0) => delay_q_net_x1,
      d1(0) => register_q_net,
      y(0) => logical_y_net
    );

  mux: entity work.mux_b6870799b4
    port map (
      ce => ce_1_sg_x532,
      clk => clk_1_sg_x532,
      clr => '0',
      d0 => addsub_s_net,
      d1 => register3_q_net,
      sel(0) => logical_y_net,
      y => mux_y_net
    );

  register1: entity work.xlregister
    generic map (
      d_width => 19,
      init_value => b"0000000000000000000"
    )
    port map (
      ce => ce_1_sg_x532,
      clk => clk_1_sg_x532,
      d => normalise_fft1_op_net_x0,
      en(0) => delay_q_net_x1,
      rst => "0",
      q => register1_q_net
    );

  register3: entity work.xlregister
    generic map (
      d_width => 31,
      init_value => b"0000000000000000000000000000000"
    )
    port map (
      ce => ce_1_sg_x532,
      clk => clk_1_sg_x532,
      d => reinterpret1_output_port_net_x0,
      en(0) => delay_q_net_x1,
      rst => "0",
      q => register3_q_net
    );

  register_x0: entity work.xlregister
    generic map (
      d_width => 1,
      init_value => b"0"
    )
    port map (
      ce => ce_1_sg_x532,
      clk => clk_1_sg_x532,
      d(0) => delay_q_net_x1,
      en(0) => delay_q_net_x1,
      rst(0) => slice2_y_net_x0,
      q(0) => register_q_net
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/fdfs/delay_gen/phase_calc"

entity phase_calc_entity_8299f5efce is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    din: in std_logic_vector(83 downto 0); 
    en: in std_logic; 
    update: in std_logic; 
    val: in std_logic_vector(15 downto 0); 
    val_inc: in std_logic_vector(18 downto 0); 
    coeff: out std_logic_vector(18 downto 0); 
    dout: out std_logic_vector(83 downto 0)
  );
end phase_calc_entity_8299f5efce;

architecture structural of phase_calc_entity_8299f5efce is
  signal addsub_s_net: std_logic_vector(18 downto 0);
  signal ce_1_sg_x533: std_logic;
  signal clk_1_sg_x533: std_logic;
  signal concat_y_net_x0: std_logic_vector(83 downto 0);
  signal current_q_net_x0: std_logic_vector(18 downto 0);
  signal delay2_q_net: std_logic_vector(83 downto 0);
  signal delay3_q_net_x1: std_logic_vector(83 downto 0);
  signal delay_q_net: std_logic;
  signal delay_q_net_x2: std_logic;
  signal delta_q_net: std_logic_vector(18 downto 0);
  signal logical_y_net: std_logic;
  signal mux_y_net: std_logic_vector(18 downto 0);
  signal normalise_fft0_op_net_x0: std_logic_vector(18 downto 0);
  signal register1_q_net: std_logic_vector(18 downto 0);
  signal register3_q_net: std_logic_vector(15 downto 0);
  signal register_q_net: std_logic;
  signal reinterpret_output_port_net_x0: std_logic_vector(15 downto 0);
  signal slice2_y_net_x1: std_logic;

begin
  ce_1_sg_x533 <= ce_1;
  clk_1_sg_x533 <= clk_1;
  concat_y_net_x0 <= din;
  delay_q_net_x2 <= en;
  slice2_y_net_x1 <= update;
  reinterpret_output_port_net_x0 <= val;
  normalise_fft0_op_net_x0 <= val_inc;
  coeff <= current_q_net_x0;
  dout <= delay3_q_net_x1;

  addsub: entity work.xladdsub_c09f12_01
    generic map (
      a_arith => xlSigned,
      a_bin_pt => 18,
      a_width => 19,
      b_arith => xlSigned,
      b_bin_pt => 18,
      b_width => 19,
      c_has_c_out => 0,
      c_latency => 1,
      c_output_width => 20,
      core_name0 => "addsb_11_0_b5c2f0e20381feb6",
      extra_registers => 1,
      full_s_arith => 2,
      full_s_width => 20,
      latency => 2,
      overflow => 1,
      quantization => 1,
      s_arith => xlSigned,
      s_bin_pt => 18,
      s_width => 19
    )
    port map (
      a => current_q_net_x0,
      b => delta_q_net,
      ce => ce_1_sg_x533,
      clk => clk_1_sg_x533,
      clr => '0',
      en => "1",
      s => addsub_s_net
    );

  current: entity work.xlregister
    generic map (
      d_width => 19,
      init_value => b"0000000000000000000"
    )
    port map (
      ce => ce_1_sg_x533,
      clk => clk_1_sg_x533,
      d => mux_y_net,
      en(0) => delay_q_net,
      rst => "0",
      q => current_q_net_x0
    );

  delay: entity work.delay_9f02caa990
    port map (
      ce => ce_1_sg_x533,
      clk => clk_1_sg_x533,
      clr => '0',
      d(0) => slice2_y_net_x1,
      q(0) => delay_q_net
    );

  delay2: entity work.delay_3f880447cf
    port map (
      ce => ce_1_sg_x533,
      clk => clk_1_sg_x533,
      clr => '0',
      d => concat_y_net_x0,
      q => delay2_q_net
    );

  delay3: entity work.delay_3f880447cf
    port map (
      ce => ce_1_sg_x533,
      clk => clk_1_sg_x533,
      clr => '0',
      d => delay2_q_net,
      q => delay3_q_net_x1
    );

  delta: entity work.xlregister
    generic map (
      d_width => 19,
      init_value => b"0000000000000000000"
    )
    port map (
      ce => ce_1_sg_x533,
      clk => clk_1_sg_x533,
      d => register1_q_net,
      en(0) => delay_q_net,
      rst => "0",
      q => delta_q_net
    );

  logical: entity work.logical_aacf6e1b0e
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0(0) => delay_q_net_x2,
      d1(0) => register_q_net,
      y(0) => logical_y_net
    );

  mux: entity work.mux_9d74770856
    port map (
      ce => ce_1_sg_x533,
      clk => clk_1_sg_x533,
      clr => '0',
      d0 => addsub_s_net,
      d1 => register3_q_net,
      sel(0) => logical_y_net,
      y => mux_y_net
    );

  register1: entity work.xlregister
    generic map (
      d_width => 19,
      init_value => b"0000000000000000000"
    )
    port map (
      ce => ce_1_sg_x533,
      clk => clk_1_sg_x533,
      d => normalise_fft0_op_net_x0,
      en(0) => delay_q_net_x2,
      rst => "0",
      q => register1_q_net
    );

  register3: entity work.xlregister
    generic map (
      d_width => 16,
      init_value => b"0000000000000000"
    )
    port map (
      ce => ce_1_sg_x533,
      clk => clk_1_sg_x533,
      d => reinterpret_output_port_net_x0,
      en(0) => delay_q_net_x2,
      rst => "0",
      q => register3_q_net
    );

  register_x0: entity work.xlregister
    generic map (
      d_width => 1,
      init_value => b"0"
    )
    port map (
      ce => ce_1_sg_x533,
      clk => clk_1_sg_x533,
      d(0) => delay_q_net_x2,
      en(0) => delay_q_net_x2,
      rst(0) => slice2_y_net_x1,
      q(0) => register_q_net
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/fdfs/delay_gen"

entity delay_gen_entity_5337c180f8 is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    d_dt_delay: in std_logic_vector(15 downto 0); 
    d_dt_phase: in std_logic_vector(15 downto 0); 
    delay: in std_logic_vector(30 downto 0); 
    den: in std_logic; 
    din: in std_logic_vector(61 downto 0); 
    idx_in: in std_logic_vector(19 downto 0); 
    init: in std_logic; 
    invert_slope: in std_logic; 
    load: in std_logic; 
    phase: in std_logic_vector(15 downto 0); 
    sync_in: in std_logic; 
    dout: out std_logic_vector(61 downto 0); 
    dvalid: out std_logic; 
    idx_out: out std_logic_vector(19 downto 0); 
    phase_out: out std_logic_vector(18 downto 0); 
    slope_out: out std_logic_vector(30 downto 0); 
    sync_out: out std_logic
  );
end delay_gen_entity_5337c180f8;

architecture structural of delay_gen_entity_5337c180f8 is
  signal addsub_s_net: std_logic_vector(20 downto 0);
  signal ce_1_sg_x534: std_logic;
  signal clk_1_sg_x534: std_logic;
  signal concat4_y_net_x0: std_logic_vector(30 downto 0);
  signal concat_y_net_x0: std_logic_vector(83 downto 0);
  signal constant53_op_net_x0: std_logic;
  signal convert1_dout_net: std_logic_vector(30 downto 0);
  signal convert2_dout_net: std_logic_vector(18 downto 0);
  signal convert3_dout_net: std_logic_vector(18 downto 0);
  signal convert4_dout_net_x0: std_logic_vector(18 downto 0);
  signal convert5_dout_net: std_logic_vector(12 downto 0);
  signal current_q_net_x0: std_logic_vector(32 downto 0);
  signal current_q_net_x1: std_logic_vector(18 downto 0);
  signal delay10_q_net: std_logic_vector(61 downto 0);
  signal delay11_q_net_x0: std_logic_vector(61 downto 0);
  signal delay12_q_net: std_logic_vector(19 downto 0);
  signal delay13_q_net_x0: std_logic_vector(19 downto 0);
  signal delay14_q_net: std_logic;
  signal delay15_q_net_x0: std_logic;
  signal delay3_q_net_x1: std_logic_vector(83 downto 0);
  signal delay8_q_net: std_logic;
  signal delay9_q_net_x0: std_logic;
  signal delay_q_net_x3: std_logic;
  signal half_cd_op_net: std_logic_vector(1 downto 0);
  signal mux_y_net_x0: std_logic_vector(30 downto 0);
  signal negate_op_net: std_logic_vector(30 downto 0);
  signal normalise_fft0_op_net_x0: std_logic_vector(18 downto 0);
  signal normalise_fft1_op_net_x0: std_logic_vector(18 downto 0);
  signal normalise_op_net: std_logic_vector(30 downto 0);
  signal reinterpret1_output_port_net_x0: std_logic_vector(30 downto 0);
  signal reinterpret1_output_port_net_x1: std_logic_vector(19 downto 0);
  signal reinterpret2_output_port_net: std_logic_vector(15 downto 0);
  signal reinterpret3_output_port_net: std_logic_vector(15 downto 0);
  signal reinterpret4_output_port_net_x0: std_logic_vector(61 downto 0);
  signal reinterpret5_output_port_net: std_logic_vector(17 downto 0);
  signal reinterpret_output_port_net_x0: std_logic_vector(15 downto 0);
  signal slice15_y_net_x0: std_logic_vector(15 downto 0);
  signal slice16_y_net_x0: std_logic_vector(15 downto 0);
  signal slice19_y_net_x0: std_logic_vector(15 downto 0);
  signal slice1_y_net: std_logic_vector(15 downto 0);
  signal slice1_y_net_x0: std_logic;
  signal slice2_y_net: std_logic_vector(30 downto 0);
  signal slice2_y_net_x0: std_logic_vector(61 downto 0);
  signal slice2_y_net_x2: std_logic;
  signal slice3_y_net: std_logic_vector(15 downto 0);
  signal slice3_y_net_x0: std_logic_vector(19 downto 0);
  signal slice3_y_net_x2: std_logic;
  signal slice4_y_net: std_logic_vector(17 downto 0);
  signal slice5_y_net: std_logic_vector(1 downto 0);
  signal slice5_y_net_x1: std_logic;
  signal slice_y_net: std_logic_vector(15 downto 0);
  signal slice_y_net_x0: std_logic;

begin
  ce_1_sg_x534 <= ce_1;
  clk_1_sg_x534 <= clk_1;
  slice15_y_net_x0 <= d_dt_delay;
  slice19_y_net_x0 <= d_dt_phase;
  concat4_y_net_x0 <= delay;
  slice3_y_net_x2 <= den;
  reinterpret4_output_port_net_x0 <= din;
  reinterpret1_output_port_net_x1 <= idx_in;
  slice2_y_net_x2 <= init;
  constant53_op_net_x0 <= invert_slope;
  delay_q_net_x3 <= load;
  slice16_y_net_x0 <= phase;
  slice5_y_net_x1 <= sync_in;
  dout <= delay11_q_net_x0;
  dvalid <= delay15_q_net_x0;
  idx_out <= delay13_q_net_x0;
  phase_out <= convert4_dout_net_x0;
  slope_out <= mux_y_net_x0;
  sync_out <= delay9_q_net_x0;

  addsub: entity work.xladdsub_c09f12_01
    generic map (
      a_arith => xlSigned,
      a_bin_pt => 18,
      a_width => 19,
      b_arith => xlUnsigned,
      b_bin_pt => 1,
      b_width => 2,
      c_has_c_out => 0,
      c_latency => 1,
      c_output_width => 21,
      core_name0 => "addsb_11_0_6c8b791c8b797704",
      extra_registers => 0,
      full_s_arith => 2,
      full_s_width => 21,
      latency => 1,
      overflow => 1,
      quantization => 1,
      s_arith => xlSigned,
      s_bin_pt => 18,
      s_width => 21
    )
    port map (
      a => current_q_net_x1,
      b => half_cd_op_net,
      ce => ce_1_sg_x534,
      clk => clk_1_sg_x534,
      clr => '0',
      en => "1",
      s => addsub_s_net
    );

  concat: entity work.concat_526ac5b437
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      in0(0) => slice5_y_net_x1,
      in1 => reinterpret4_output_port_net_x0,
      in2 => reinterpret1_output_port_net_x1,
      in3(0) => slice3_y_net_x2,
      y => concat_y_net_x0
    );

  convert1: entity work.xlconvert_pipeline
    generic map (
      bool_conversion => 0,
      din_arith => 1,
      din_bin_pt => 18,
      din_width => 18,
      dout_arith => 2,
      dout_bin_pt => 30,
      dout_width => 31,
      latency => 1,
      overflow => xlWrap,
      quantization => xlRound
    )
    port map (
      ce => ce_1_sg_x534,
      clk => clk_1_sg_x534,
      clr => '0',
      din => reinterpret5_output_port_net,
      en => "1",
      dout => convert1_dout_net
    );

  convert2: entity work.xlconvert
    generic map (
      bool_conversion => 0,
      din_arith => 2,
      din_bin_pt => 15,
      din_width => 16,
      dout_arith => 2,
      dout_bin_pt => 18,
      dout_width => 19,
      latency => 0,
      overflow => xlWrap,
      quantization => xlTruncate
    )
    port map (
      ce => ce_1_sg_x534,
      clk => clk_1_sg_x534,
      clr => '0',
      din => reinterpret2_output_port_net,
      en => "1",
      dout => convert2_dout_net
    );

  convert3: entity work.xlconvert
    generic map (
      bool_conversion => 0,
      din_arith => 2,
      din_bin_pt => 15,
      din_width => 16,
      dout_arith => 2,
      dout_bin_pt => 18,
      dout_width => 19,
      latency => 0,
      overflow => xlWrap,
      quantization => xlTruncate
    )
    port map (
      ce => ce_1_sg_x534,
      clk => clk_1_sg_x534,
      clr => '0',
      din => reinterpret3_output_port_net,
      en => "1",
      dout => convert3_dout_net
    );

  convert4: entity work.xlconvert_pipeline
    generic map (
      bool_conversion => 0,
      din_arith => 2,
      din_bin_pt => 18,
      din_width => 21,
      dout_arith => 2,
      dout_bin_pt => 18,
      dout_width => 19,
      latency => 1,
      overflow => xlWrap,
      quantization => xlTruncate
    )
    port map (
      ce => ce_1_sg_x534,
      clk => clk_1_sg_x534,
      clr => '0',
      din => addsub_s_net,
      en => "1",
      dout => convert4_dout_net_x0
    );

  convert5: entity work.xlconvert_pipeline
    generic map (
      bool_conversion => 0,
      din_arith => 1,
      din_bin_pt => 18,
      din_width => 33,
      dout_arith => 1,
      dout_bin_pt => 0,
      dout_width => 13,
      latency => 1,
      overflow => xlWrap,
      quantization => xlTruncate
    )
    port map (
      ce => ce_1_sg_x534,
      clk => clk_1_sg_x534,
      clr => '0',
      din => current_q_net_x0,
      en => "1",
      dout => convert5_dout_net
    );

  delay10: entity work.delay_a72614a86a
    port map (
      ce => ce_1_sg_x534,
      clk => clk_1_sg_x534,
      clr => '0',
      d => slice2_y_net_x0,
      q => delay10_q_net
    );

  delay11: entity work.delay_a72614a86a
    port map (
      ce => ce_1_sg_x534,
      clk => clk_1_sg_x534,
      clr => '0',
      d => delay10_q_net,
      q => delay11_q_net_x0
    );

  delay12: entity work.delay_a5c036284d
    port map (
      ce => ce_1_sg_x534,
      clk => clk_1_sg_x534,
      clr => '0',
      d => slice3_y_net_x0,
      q => delay12_q_net
    );

  delay13: entity work.delay_a5c036284d
    port map (
      ce => ce_1_sg_x534,
      clk => clk_1_sg_x534,
      clr => '0',
      d => delay12_q_net,
      q => delay13_q_net_x0
    );

  delay14: entity work.delay_9f02caa990
    port map (
      ce => ce_1_sg_x534,
      clk => clk_1_sg_x534,
      clr => '0',
      d(0) => slice1_y_net_x0,
      q(0) => delay14_q_net
    );

  delay15: entity work.delay_9f02caa990
    port map (
      ce => ce_1_sg_x534,
      clk => clk_1_sg_x534,
      clr => '0',
      d(0) => delay14_q_net,
      q(0) => delay15_q_net_x0
    );

  delay8: entity work.delay_9f02caa990
    port map (
      ce => ce_1_sg_x534,
      clk => clk_1_sg_x534,
      clr => '0',
      d(0) => slice_y_net_x0,
      q(0) => delay8_q_net
    );

  delay9: entity work.delay_9f02caa990
    port map (
      ce => ce_1_sg_x534,
      clk => clk_1_sg_x534,
      clr => '0',
      d(0) => delay8_q_net,
      q(0) => delay9_q_net_x0
    );

  delay_calc_7a6c9a8503: entity work.delay_calc_entity_7a6c9a8503
    port map (
      ce_1 => ce_1_sg_x534,
      clk_1 => clk_1_sg_x534,
      en => delay_q_net_x3,
      update => slice2_y_net_x2,
      val => reinterpret1_output_port_net_x0,
      val_inc => normalise_fft1_op_net_x0,
      coeff => current_q_net_x0
    );

  half_cd: entity work.shift_3d704f15bd
    port map (
      ce => ce_1_sg_x534,
      clk => clk_1_sg_x534,
      clr => '0',
      ip => slice5_y_net,
      op => half_cd_op_net
    );

  mux: entity work.mux_b17283bd96
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0 => negate_op_net,
      d1 => normalise_op_net,
      sel(0) => constant53_op_net_x0,
      y => mux_y_net_x0
    );

  negate: entity work.negate_f54e9c0929
    port map (
      ce => ce_1_sg_x534,
      clk => clk_1_sg_x534,
      clr => '0',
      ip => normalise_op_net,
      op => negate_op_net
    );

  normalise: entity work.shift_6a984f7b1f
    port map (
      ce => ce_1_sg_x534,
      clk => clk_1_sg_x534,
      clr => '0',
      ip => convert1_dout_net,
      op => normalise_op_net
    );

  normalise_fft0: entity work.shift_23cc8d0234
    port map (
      ce => ce_1_sg_x534,
      clk => clk_1_sg_x534,
      clr => '0',
      ip => convert2_dout_net,
      op => normalise_fft0_op_net_x0
    );

  normalise_fft1: entity work.shift_23cc8d0234
    port map (
      ce => ce_1_sg_x534,
      clk => clk_1_sg_x534,
      clr => '0',
      ip => convert3_dout_net,
      op => normalise_fft1_op_net_x0
    );

  phase_calc_8299f5efce: entity work.phase_calc_entity_8299f5efce
    port map (
      ce_1 => ce_1_sg_x534,
      clk_1 => clk_1_sg_x534,
      din => concat_y_net_x0,
      en => delay_q_net_x3,
      update => slice2_y_net_x2,
      val => reinterpret_output_port_net_x0,
      val_inc => normalise_fft0_op_net_x0,
      coeff => current_q_net_x1,
      dout => delay3_q_net_x1
    );

  reinterpret: entity work.reinterpret_151459306d
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => slice_y_net,
      output_port => reinterpret_output_port_net_x0
    );

  reinterpret1: entity work.reinterpret_4ddae7a67c
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => slice2_y_net,
      output_port => reinterpret1_output_port_net_x0
    );

  reinterpret2: entity work.reinterpret_151459306d
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => slice1_y_net,
      output_port => reinterpret2_output_port_net
    );

  reinterpret3: entity work.reinterpret_151459306d
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => slice3_y_net,
      output_port => reinterpret3_output_port_net
    );

  reinterpret5: entity work.reinterpret_9306b5127f
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => slice4_y_net,
      output_port => reinterpret5_output_port_net
    );

  slice: entity work.xlslice
    generic map (
      new_lsb => 0,
      new_msb => 15,
      x_width => 16,
      y_width => 16
    )
    port map (
      x => slice16_y_net_x0,
      y => slice_y_net
    );

  slice1: entity work.xlslice
    generic map (
      new_lsb => 0,
      new_msb => 15,
      x_width => 16,
      y_width => 16
    )
    port map (
      x => slice19_y_net_x0,
      y => slice1_y_net
    );

  slice2: entity work.xlslice
    generic map (
      new_lsb => 0,
      new_msb => 30,
      x_width => 31,
      y_width => 31
    )
    port map (
      x => concat4_y_net_x0,
      y => slice2_y_net
    );

  slice3: entity work.xlslice
    generic map (
      new_lsb => 0,
      new_msb => 15,
      x_width => 16,
      y_width => 16
    )
    port map (
      x => slice15_y_net_x0,
      y => slice3_y_net
    );

  slice4: entity work.xlslice
    generic map (
      new_lsb => 0,
      new_msb => 17,
      x_width => 33,
      y_width => 18
    )
    port map (
      x => current_q_net_x0,
      y => slice4_y_net
    );

  slice5: entity work.xlslice
    generic map (
      new_lsb => 0,
      new_msb => 1,
      x_width => 13,
      y_width => 2
    )
    port map (
      x => convert5_dout_net,
      y => slice5_y_net
    );

  subsystem1_1899c22aea: entity work.subsystem1_entity_1899c22aea
    port map (
      in1 => delay3_q_net_x1,
      out1 => slice_y_net_x0,
      out2 => slice2_y_net_x0,
      out3 => slice3_y_net_x0,
      out4 => slice1_y_net_x0
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/fdfs/delay_gen1/Subsystem1"

entity subsystem1_entity_cd73c7f9cc is
  port (
    in1: in std_logic_vector(83 downto 0); 
    out2: out std_logic_vector(61 downto 0); 
    out3: out std_logic_vector(19 downto 0)
  );
end subsystem1_entity_cd73c7f9cc;

architecture structural of subsystem1_entity_cd73c7f9cc is
  signal delay3_q_net_x0: std_logic_vector(83 downto 0);
  signal slice2_y_net_x0: std_logic_vector(61 downto 0);
  signal slice3_y_net_x0: std_logic_vector(19 downto 0);

begin
  delay3_q_net_x0 <= in1;
  out2 <= slice2_y_net_x0;
  out3 <= slice3_y_net_x0;

  slice2: entity work.xlslice
    generic map (
      new_lsb => 21,
      new_msb => 82,
      x_width => 84,
      y_width => 62
    )
    port map (
      x => delay3_q_net_x0,
      y => slice2_y_net_x0
    );

  slice3: entity work.xlslice
    generic map (
      new_lsb => 1,
      new_msb => 20,
      x_width => 84,
      y_width => 20
    )
    port map (
      x => delay3_q_net_x0,
      y => slice3_y_net_x0
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/fdfs/delay_gen1"

entity delay_gen1_entity_4815715ea8 is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    d_dt_delay: in std_logic_vector(15 downto 0); 
    d_dt_phase: in std_logic_vector(15 downto 0); 
    delay: in std_logic_vector(30 downto 0); 
    den: in std_logic; 
    din: in std_logic_vector(61 downto 0); 
    idx_in: in std_logic_vector(19 downto 0); 
    init: in std_logic; 
    invert_slope: in std_logic; 
    load: in std_logic; 
    phase: in std_logic_vector(15 downto 0); 
    sync_in: in std_logic; 
    dout: out std_logic_vector(61 downto 0); 
    idx_out: out std_logic_vector(19 downto 0); 
    phase_out: out std_logic_vector(18 downto 0); 
    slope_out: out std_logic_vector(30 downto 0)
  );
end delay_gen1_entity_4815715ea8;

architecture structural of delay_gen1_entity_4815715ea8 is
  signal addsub_s_net: std_logic_vector(20 downto 0);
  signal ce_1_sg_x537: std_logic;
  signal clk_1_sg_x537: std_logic;
  signal concat2_y_net_x0: std_logic_vector(30 downto 0);
  signal concat_y_net_x0: std_logic_vector(83 downto 0);
  signal constant1_op_net_x0: std_logic;
  signal convert1_dout_net: std_logic_vector(30 downto 0);
  signal convert2_dout_net: std_logic_vector(18 downto 0);
  signal convert3_dout_net: std_logic_vector(18 downto 0);
  signal convert4_dout_net_x0: std_logic_vector(18 downto 0);
  signal convert5_dout_net: std_logic_vector(12 downto 0);
  signal current_q_net_x0: std_logic_vector(32 downto 0);
  signal current_q_net_x1: std_logic_vector(18 downto 0);
  signal delay10_q_net: std_logic_vector(61 downto 0);
  signal delay11_q_net_x0: std_logic_vector(61 downto 0);
  signal delay12_q_net: std_logic_vector(19 downto 0);
  signal delay13_q_net_x0: std_logic_vector(19 downto 0);
  signal delay3_q_net_x1: std_logic_vector(83 downto 0);
  signal delay7_q_net_x0: std_logic_vector(61 downto 0);
  signal delay_q_net_x3: std_logic;
  signal half_cd_op_net: std_logic_vector(1 downto 0);
  signal mux_y_net_x0: std_logic_vector(30 downto 0);
  signal negate_op_net: std_logic_vector(30 downto 0);
  signal normalise_fft0_op_net_x0: std_logic_vector(18 downto 0);
  signal normalise_fft1_op_net_x0: std_logic_vector(18 downto 0);
  signal normalise_op_net: std_logic_vector(30 downto 0);
  signal reinterpret1_output_port_net_x0: std_logic_vector(30 downto 0);
  signal reinterpret1_output_port_net_x2: std_logic_vector(19 downto 0);
  signal reinterpret2_output_port_net: std_logic_vector(15 downto 0);
  signal reinterpret3_output_port_net: std_logic_vector(15 downto 0);
  signal reinterpret5_output_port_net: std_logic_vector(17 downto 0);
  signal reinterpret_output_port_net_x0: std_logic_vector(15 downto 0);
  signal slice1_y_net_x0: std_logic_vector(15 downto 0);
  signal slice1_y_net_x1: std_logic_vector(15 downto 0);
  signal slice2_y_net_x0: std_logic_vector(30 downto 0);
  signal slice2_y_net_x1: std_logic_vector(61 downto 0);
  signal slice2_y_net_x2: std_logic_vector(15 downto 0);
  signal slice2_y_net_x5: std_logic;
  signal slice3_y_net: std_logic_vector(15 downto 0);
  signal slice3_y_net_x0: std_logic_vector(19 downto 0);
  signal slice3_y_net_x3: std_logic;
  signal slice4_y_net: std_logic_vector(17 downto 0);
  signal slice5_y_net_x0: std_logic_vector(1 downto 0);
  signal slice5_y_net_x2: std_logic_vector(15 downto 0);
  signal slice5_y_net_x3: std_logic;
  signal slice_y_net: std_logic_vector(15 downto 0);

begin
  ce_1_sg_x537 <= ce_1;
  clk_1_sg_x537 <= clk_1;
  slice1_y_net_x1 <= d_dt_delay;
  slice5_y_net_x2 <= d_dt_phase;
  concat2_y_net_x0 <= delay;
  slice3_y_net_x3 <= den;
  delay7_q_net_x0 <= din;
  reinterpret1_output_port_net_x2 <= idx_in;
  slice2_y_net_x5 <= init;
  constant1_op_net_x0 <= invert_slope;
  delay_q_net_x3 <= load;
  slice2_y_net_x2 <= phase;
  slice5_y_net_x3 <= sync_in;
  dout <= delay11_q_net_x0;
  idx_out <= delay13_q_net_x0;
  phase_out <= convert4_dout_net_x0;
  slope_out <= mux_y_net_x0;

  addsub: entity work.xladdsub_c09f12_01
    generic map (
      a_arith => xlSigned,
      a_bin_pt => 18,
      a_width => 19,
      b_arith => xlUnsigned,
      b_bin_pt => 1,
      b_width => 2,
      c_has_c_out => 0,
      c_latency => 1,
      c_output_width => 21,
      core_name0 => "addsb_11_0_6c8b791c8b797704",
      extra_registers => 0,
      full_s_arith => 2,
      full_s_width => 21,
      latency => 1,
      overflow => 1,
      quantization => 1,
      s_arith => xlSigned,
      s_bin_pt => 18,
      s_width => 21
    )
    port map (
      a => current_q_net_x1,
      b => half_cd_op_net,
      ce => ce_1_sg_x537,
      clk => clk_1_sg_x537,
      clr => '0',
      en => "1",
      s => addsub_s_net
    );

  concat: entity work.concat_526ac5b437
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      in0(0) => slice5_y_net_x3,
      in1 => delay7_q_net_x0,
      in2 => reinterpret1_output_port_net_x2,
      in3(0) => slice3_y_net_x3,
      y => concat_y_net_x0
    );

  convert1: entity work.xlconvert_pipeline
    generic map (
      bool_conversion => 0,
      din_arith => 1,
      din_bin_pt => 18,
      din_width => 18,
      dout_arith => 2,
      dout_bin_pt => 30,
      dout_width => 31,
      latency => 1,
      overflow => xlWrap,
      quantization => xlRound
    )
    port map (
      ce => ce_1_sg_x537,
      clk => clk_1_sg_x537,
      clr => '0',
      din => reinterpret5_output_port_net,
      en => "1",
      dout => convert1_dout_net
    );

  convert2: entity work.xlconvert
    generic map (
      bool_conversion => 0,
      din_arith => 2,
      din_bin_pt => 15,
      din_width => 16,
      dout_arith => 2,
      dout_bin_pt => 18,
      dout_width => 19,
      latency => 0,
      overflow => xlWrap,
      quantization => xlTruncate
    )
    port map (
      ce => ce_1_sg_x537,
      clk => clk_1_sg_x537,
      clr => '0',
      din => reinterpret2_output_port_net,
      en => "1",
      dout => convert2_dout_net
    );

  convert3: entity work.xlconvert
    generic map (
      bool_conversion => 0,
      din_arith => 2,
      din_bin_pt => 15,
      din_width => 16,
      dout_arith => 2,
      dout_bin_pt => 18,
      dout_width => 19,
      latency => 0,
      overflow => xlWrap,
      quantization => xlTruncate
    )
    port map (
      ce => ce_1_sg_x537,
      clk => clk_1_sg_x537,
      clr => '0',
      din => reinterpret3_output_port_net,
      en => "1",
      dout => convert3_dout_net
    );

  convert4: entity work.xlconvert_pipeline
    generic map (
      bool_conversion => 0,
      din_arith => 2,
      din_bin_pt => 18,
      din_width => 21,
      dout_arith => 2,
      dout_bin_pt => 18,
      dout_width => 19,
      latency => 1,
      overflow => xlWrap,
      quantization => xlTruncate
    )
    port map (
      ce => ce_1_sg_x537,
      clk => clk_1_sg_x537,
      clr => '0',
      din => addsub_s_net,
      en => "1",
      dout => convert4_dout_net_x0
    );

  convert5: entity work.xlconvert_pipeline
    generic map (
      bool_conversion => 0,
      din_arith => 1,
      din_bin_pt => 18,
      din_width => 33,
      dout_arith => 1,
      dout_bin_pt => 0,
      dout_width => 13,
      latency => 1,
      overflow => xlWrap,
      quantization => xlTruncate
    )
    port map (
      ce => ce_1_sg_x537,
      clk => clk_1_sg_x537,
      clr => '0',
      din => current_q_net_x0,
      en => "1",
      dout => convert5_dout_net
    );

  delay10: entity work.delay_a72614a86a
    port map (
      ce => ce_1_sg_x537,
      clk => clk_1_sg_x537,
      clr => '0',
      d => slice2_y_net_x1,
      q => delay10_q_net
    );

  delay11: entity work.delay_a72614a86a
    port map (
      ce => ce_1_sg_x537,
      clk => clk_1_sg_x537,
      clr => '0',
      d => delay10_q_net,
      q => delay11_q_net_x0
    );

  delay12: entity work.delay_a5c036284d
    port map (
      ce => ce_1_sg_x537,
      clk => clk_1_sg_x537,
      clr => '0',
      d => slice3_y_net_x0,
      q => delay12_q_net
    );

  delay13: entity work.delay_a5c036284d
    port map (
      ce => ce_1_sg_x537,
      clk => clk_1_sg_x537,
      clr => '0',
      d => delay12_q_net,
      q => delay13_q_net_x0
    );

  delay_calc_84f470e481: entity work.delay_calc_entity_7a6c9a8503
    port map (
      ce_1 => ce_1_sg_x537,
      clk_1 => clk_1_sg_x537,
      en => delay_q_net_x3,
      update => slice2_y_net_x5,
      val => reinterpret1_output_port_net_x0,
      val_inc => normalise_fft1_op_net_x0,
      coeff => current_q_net_x0
    );

  half_cd: entity work.shift_3d704f15bd
    port map (
      ce => ce_1_sg_x537,
      clk => clk_1_sg_x537,
      clr => '0',
      ip => slice5_y_net_x0,
      op => half_cd_op_net
    );

  mux: entity work.mux_b17283bd96
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0 => negate_op_net,
      d1 => normalise_op_net,
      sel(0) => constant1_op_net_x0,
      y => mux_y_net_x0
    );

  negate: entity work.negate_f54e9c0929
    port map (
      ce => ce_1_sg_x537,
      clk => clk_1_sg_x537,
      clr => '0',
      ip => normalise_op_net,
      op => negate_op_net
    );

  normalise: entity work.shift_6a984f7b1f
    port map (
      ce => ce_1_sg_x537,
      clk => clk_1_sg_x537,
      clr => '0',
      ip => convert1_dout_net,
      op => normalise_op_net
    );

  normalise_fft0: entity work.shift_23cc8d0234
    port map (
      ce => ce_1_sg_x537,
      clk => clk_1_sg_x537,
      clr => '0',
      ip => convert2_dout_net,
      op => normalise_fft0_op_net_x0
    );

  normalise_fft1: entity work.shift_23cc8d0234
    port map (
      ce => ce_1_sg_x537,
      clk => clk_1_sg_x537,
      clr => '0',
      ip => convert3_dout_net,
      op => normalise_fft1_op_net_x0
    );

  phase_calc_7ddf8835c4: entity work.phase_calc_entity_8299f5efce
    port map (
      ce_1 => ce_1_sg_x537,
      clk_1 => clk_1_sg_x537,
      din => concat_y_net_x0,
      en => delay_q_net_x3,
      update => slice2_y_net_x5,
      val => reinterpret_output_port_net_x0,
      val_inc => normalise_fft0_op_net_x0,
      coeff => current_q_net_x1,
      dout => delay3_q_net_x1
    );

  reinterpret: entity work.reinterpret_151459306d
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => slice_y_net,
      output_port => reinterpret_output_port_net_x0
    );

  reinterpret1: entity work.reinterpret_4ddae7a67c
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => slice2_y_net_x0,
      output_port => reinterpret1_output_port_net_x0
    );

  reinterpret2: entity work.reinterpret_151459306d
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => slice1_y_net_x0,
      output_port => reinterpret2_output_port_net
    );

  reinterpret3: entity work.reinterpret_151459306d
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => slice3_y_net,
      output_port => reinterpret3_output_port_net
    );

  reinterpret5: entity work.reinterpret_9306b5127f
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => slice4_y_net,
      output_port => reinterpret5_output_port_net
    );

  slice: entity work.xlslice
    generic map (
      new_lsb => 0,
      new_msb => 15,
      x_width => 16,
      y_width => 16
    )
    port map (
      x => slice2_y_net_x2,
      y => slice_y_net
    );

  slice1: entity work.xlslice
    generic map (
      new_lsb => 0,
      new_msb => 15,
      x_width => 16,
      y_width => 16
    )
    port map (
      x => slice5_y_net_x2,
      y => slice1_y_net_x0
    );

  slice2: entity work.xlslice
    generic map (
      new_lsb => 0,
      new_msb => 30,
      x_width => 31,
      y_width => 31
    )
    port map (
      x => concat2_y_net_x0,
      y => slice2_y_net_x0
    );

  slice3: entity work.xlslice
    generic map (
      new_lsb => 0,
      new_msb => 15,
      x_width => 16,
      y_width => 16
    )
    port map (
      x => slice1_y_net_x1,
      y => slice3_y_net
    );

  slice4: entity work.xlslice
    generic map (
      new_lsb => 0,
      new_msb => 17,
      x_width => 33,
      y_width => 18
    )
    port map (
      x => current_q_net_x0,
      y => slice4_y_net
    );

  slice5: entity work.xlslice
    generic map (
      new_lsb => 0,
      new_msb => 1,
      x_width => 13,
      y_width => 2
    )
    port map (
      x => convert5_dout_net,
      y => slice5_y_net_x0
    );

  subsystem1_cd73c7f9cc: entity work.subsystem1_entity_cd73c7f9cc
    port map (
      in1 => delay3_q_net_x1,
      out2 => slice2_y_net_x1,
      out3 => slice3_y_net_x0
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/fdfs/expand_data_in"

entity expand_data_in_entity_d5d71b9bb1 is
  port (
    bus_in: in std_logic_vector(123 downto 0); 
    lsb_out1: out std_logic_vector(61 downto 0); 
    msb_out2: out std_logic_vector(61 downto 0)
  );
end expand_data_in_entity_d5d71b9bb1;

architecture structural of expand_data_in_entity_d5d71b9bb1 is
  signal delay14_q_net_x0: std_logic_vector(123 downto 0);
  signal reinterpret1_output_port_net_x0: std_logic_vector(61 downto 0);
  signal reinterpret2_output_port_net_x2: std_logic_vector(61 downto 0);
  signal slice1_y_net: std_logic_vector(61 downto 0);
  signal slice2_y_net: std_logic_vector(61 downto 0);

begin
  delay14_q_net_x0 <= bus_in;
  lsb_out1 <= reinterpret1_output_port_net_x0;
  msb_out2 <= reinterpret2_output_port_net_x2;

  reinterpret1: entity work.reinterpret_aa522dcdd3
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => slice1_y_net,
      output_port => reinterpret1_output_port_net_x0
    );

  reinterpret2: entity work.reinterpret_aa522dcdd3
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => slice2_y_net,
      output_port => reinterpret2_output_port_net_x2
    );

  slice1: entity work.xlslice
    generic map (
      new_lsb => 0,
      new_msb => 61,
      x_width => 124,
      y_width => 62
    )
    port map (
      x => delay14_q_net_x0,
      y => slice1_y_net
    );

  slice2: entity work.xlslice
    generic map (
      new_lsb => 62,
      new_msb => 123,
      x_width => 124,
      y_width => 62
    )
    port map (
      x => delay14_q_net_x0,
      y => slice2_y_net
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/fdfs/expand_fd0"

entity expand_fd0_entity_7384476f9f is
  port (
    bus_in: in std_logic_vector(84 downto 0); 
    lsb_out1: out std_logic_vector(19 downto 0); 
    msb_out5: out std_logic; 
    out2: out std_logic; 
    out3: out std_logic; 
    out4: out std_logic_vector(61 downto 0)
  );
end expand_fd0_entity_7384476f9f;

architecture structural of expand_fd0_entity_7384476f9f is
  signal delay7_q_net_x0: std_logic_vector(84 downto 0);
  signal reinterpret1_output_port_net_x3: std_logic_vector(19 downto 0);
  signal reinterpret4_output_port_net_x1: std_logic_vector(61 downto 0);
  signal slice1_y_net: std_logic_vector(19 downto 0);
  signal slice2_y_net_x6: std_logic;
  signal slice3_y_net_x4: std_logic;
  signal slice4_y_net: std_logic_vector(61 downto 0);
  signal slice5_y_net_x4: std_logic;

begin
  delay7_q_net_x0 <= bus_in;
  lsb_out1 <= reinterpret1_output_port_net_x3;
  msb_out5 <= slice5_y_net_x4;
  out2 <= slice2_y_net_x6;
  out3 <= slice3_y_net_x4;
  out4 <= reinterpret4_output_port_net_x1;

  reinterpret1: entity work.reinterpret_713b6c5d29
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => slice1_y_net,
      output_port => reinterpret1_output_port_net_x3
    );

  reinterpret4: entity work.reinterpret_aa522dcdd3
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => slice4_y_net,
      output_port => reinterpret4_output_port_net_x1
    );

  slice1: entity work.xlslice
    generic map (
      new_lsb => 0,
      new_msb => 19,
      x_width => 85,
      y_width => 20
    )
    port map (
      x => delay7_q_net_x0,
      y => slice1_y_net
    );

  slice2: entity work.xlslice
    generic map (
      new_lsb => 20,
      new_msb => 20,
      x_width => 85,
      y_width => 1
    )
    port map (
      x => delay7_q_net_x0,
      y(0) => slice2_y_net_x6
    );

  slice3: entity work.xlslice
    generic map (
      new_lsb => 21,
      new_msb => 21,
      x_width => 85,
      y_width => 1
    )
    port map (
      x => delay7_q_net_x0,
      y(0) => slice3_y_net_x4
    );

  slice4: entity work.xlslice
    generic map (
      new_lsb => 22,
      new_msb => 83,
      x_width => 85,
      y_width => 62
    )
    port map (
      x => delay7_q_net_x0,
      y => slice4_y_net
    );

  slice5: entity work.xlslice
    generic map (
      new_lsb => 84,
      new_msb => 84,
      x_width => 85,
      y_width => 1
    )
    port map (
      x => delay7_q_net_x0,
      y(0) => slice5_y_net_x4
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/fdfs/fd_fs/c_to_ri"

entity c_to_ri_entity_6fb343188d is
  port (
    c: in std_logic_vector(61 downto 0); 
    im: out std_logic_vector(30 downto 0); 
    re: out std_logic_vector(30 downto 0)
  );
end c_to_ri_entity_6fb343188d;

architecture structural of c_to_ri_entity_6fb343188d is
  signal delay9_q_net_x0: std_logic_vector(61 downto 0);
  signal force_im_output_port_net_x0: std_logic_vector(30 downto 0);
  signal force_re_output_port_net_x0: std_logic_vector(30 downto 0);
  signal slice_im_y_net: std_logic_vector(30 downto 0);
  signal slice_re_y_net: std_logic_vector(30 downto 0);

begin
  delay9_q_net_x0 <= c;
  im <= force_im_output_port_net_x0;
  re <= force_re_output_port_net_x0;

  force_im: entity work.reinterpret_76541f1bde
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => slice_im_y_net,
      output_port => force_im_output_port_net_x0
    );

  force_re: entity work.reinterpret_76541f1bde
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => slice_re_y_net,
      output_port => force_re_output_port_net_x0
    );

  slice_im: entity work.xlslice
    generic map (
      new_lsb => 0,
      new_msb => 30,
      x_width => 62,
      y_width => 31
    )
    port map (
      x => delay9_q_net_x0,
      y => slice_im_y_net
    );

  slice_re: entity work.xlslice
    generic map (
      new_lsb => 31,
      new_msb => 61,
      x_width => 62,
      y_width => 31
    )
    port map (
      x => delay9_q_net_x0,
      y => slice_re_y_net
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/fdfs/fd_fs/cmult_4bit_hdl"

entity cmult_4bit_hdl_entity_e90bbbc122 is
  port (
    a: in std_logic_vector(17 downto 0); 
    b: in std_logic_vector(17 downto 0); 
    c: in std_logic_vector(30 downto 0); 
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    d: in std_logic_vector(30 downto 0); 
    imag: out std_logic_vector(49 downto 0); 
    real_x0: out std_logic_vector(49 downto 0)
  );
end cmult_4bit_hdl_entity_e90bbbc122;

architecture structural of cmult_4bit_hdl_entity_e90bbbc122 is
  signal ac_p_net: std_logic_vector(48 downto 0);
  signal ad_p_net: std_logic_vector(48 downto 0);
  signal bc_p_net: std_logic_vector(48 downto 0);
  signal bd_p_net: std_logic_vector(48 downto 0);
  signal ce_1_sg_x538: std_logic;
  signal clk_1_sg_x538: std_logic;
  signal delay10_q_net_x0: std_logic_vector(30 downto 0);
  signal delay3_q_net_x0: std_logic_vector(30 downto 0);
  signal imag_sum_s_net_x0: std_logic_vector(49 downto 0);
  signal real_sum_s_net_x0: std_logic_vector(49 downto 0);
  signal rom0_data_net_x0: std_logic_vector(17 downto 0);
  signal rom1_data_net_x0: std_logic_vector(17 downto 0);

begin
  rom1_data_net_x0 <= a;
  rom0_data_net_x0 <= b;
  delay10_q_net_x0 <= c;
  ce_1_sg_x538 <= ce_1;
  clk_1_sg_x538 <= clk_1;
  delay3_q_net_x0 <= d;
  imag <= imag_sum_s_net_x0;
  real_x0 <= real_sum_s_net_x0;

  ac: entity work.mult_7b9bb0537a
    port map (
      a => rom1_data_net_x0,
      b => delay10_q_net_x0,
      ce => ce_1_sg_x538,
      clk => clk_1_sg_x538,
      clr => '0',
      p => ac_p_net
    );

  ad: entity work.mult_7b9bb0537a
    port map (
      a => rom1_data_net_x0,
      b => delay3_q_net_x0,
      ce => ce_1_sg_x538,
      clk => clk_1_sg_x538,
      clr => '0',
      p => ad_p_net
    );

  bc: entity work.mult_7b9bb0537a
    port map (
      a => rom0_data_net_x0,
      b => delay10_q_net_x0,
      ce => ce_1_sg_x538,
      clk => clk_1_sg_x538,
      clr => '0',
      p => bc_p_net
    );

  bd: entity work.mult_7b9bb0537a
    port map (
      a => rom0_data_net_x0,
      b => delay3_q_net_x0,
      ce => ce_1_sg_x538,
      clk => clk_1_sg_x538,
      clr => '0',
      p => bd_p_net
    );

  imag_sum: entity work.addsub_477aaa5f1a
    port map (
      a => bc_p_net,
      b => ad_p_net,
      ce => ce_1_sg_x538,
      clk => clk_1_sg_x538,
      clr => '0',
      s => imag_sum_s_net_x0
    );

  real_sum: entity work.addsub_c7967a888a
    port map (
      a => ac_p_net,
      b => bd_p_net,
      ce => ce_1_sg_x538,
      clk => clk_1_sg_x538,
      clr => '0',
      s => real_sum_s_net_x0
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/fdfs/fd_fs/polynomial0"

entity polynomial0_entity_23243560fe is
  port (
    a0: in std_logic_vector(18 downto 0); 
    a1: in std_logic_vector(30 downto 0); 
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    sync_in: in std_logic_vector(1 downto 0); 
    x: in std_logic_vector(19 downto 0); 
    a0x_0_a1x_1: out std_logic_vector(51 downto 0); 
    sync_out: out std_logic_vector(1 downto 0)
  );
end polynomial0_entity_23243560fe;

architecture structural of polynomial0_entity_23243560fe is
  signal a0_delay_q_net: std_logic_vector(18 downto 0);
  signal a1x_1_mult_p_net: std_logic_vector(50 downto 0);
  signal addsub_s_net_x0: std_logic_vector(51 downto 0);
  signal ce_1_sg_x539: std_logic;
  signal clk_1_sg_x539: std_logic;
  signal concat_y_net_x0: std_logic_vector(1 downto 0);
  signal convert4_dout_net_x1: std_logic_vector(18 downto 0);
  signal delay13_q_net_x1: std_logic_vector(19 downto 0);
  signal mux_y_net_x1: std_logic_vector(30 downto 0);
  signal sync_delay_q_net_x0: std_logic_vector(1 downto 0);

begin
  convert4_dout_net_x1 <= a0;
  mux_y_net_x1 <= a1;
  ce_1_sg_x539 <= ce_1;
  clk_1_sg_x539 <= clk_1;
  concat_y_net_x0 <= sync_in;
  delay13_q_net_x1 <= x;
  a0x_0_a1x_1 <= addsub_s_net_x0;
  sync_out <= sync_delay_q_net_x0;

  a0_delay: entity work.delay_ed64862f6f
    port map (
      ce => ce_1_sg_x539,
      clk => clk_1_sg_x539,
      clr => '0',
      d => convert4_dout_net_x1,
      q => a0_delay_q_net
    );

  a1x_1_mult: entity work.mult_edcb97cd50
    port map (
      a => delay13_q_net_x1,
      b => mux_y_net_x1,
      ce => ce_1_sg_x539,
      clk => clk_1_sg_x539,
      clr => '0',
      p => a1x_1_mult_p_net
    );

  addsub: entity work.addsub_09d6c96f59
    port map (
      a => a0_delay_q_net,
      b => a1x_1_mult_p_net,
      ce => ce_1_sg_x539,
      clk => clk_1_sg_x539,
      clr => '0',
      s => addsub_s_net_x0
    );

  sync_delay: entity work.delay_8826f087e1
    port map (
      ce => ce_1_sg_x539,
      clk => clk_1_sg_x539,
      clr => '0',
      d => concat_y_net_x0,
      q => sync_delay_q_net_x0
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/fdfs/fd_fs/ri_to_c"

entity ri_to_c_entity_c73e85e8c5 is
  port (
    im: in std_logic_vector(30 downto 0); 
    re: in std_logic_vector(30 downto 0); 
    c: out std_logic_vector(61 downto 0)
  );
end ri_to_c_entity_c73e85e8c5;

architecture structural of ri_to_c_entity_c73e85e8c5 is
  signal concat_y_net_x2: std_logic_vector(61 downto 0);
  signal convert1_dout_net_x0: std_logic_vector(30 downto 0);
  signal convert_dout_net_x0: std_logic_vector(30 downto 0);
  signal force_im_output_port_net: std_logic_vector(30 downto 0);
  signal force_re_output_port_net: std_logic_vector(30 downto 0);

begin
  convert1_dout_net_x0 <= im;
  convert_dout_net_x0 <= re;
  c <= concat_y_net_x2;

  concat: entity work.concat_94729ef7e0
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      in0 => force_re_output_port_net,
      in1 => force_im_output_port_net,
      y => concat_y_net_x2
    );

  force_im: entity work.reinterpret_64ddc4af5e
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => convert1_dout_net_x0,
      output_port => force_im_output_port_net
    );

  force_re: entity work.reinterpret_64ddc4af5e
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => convert_dout_net_x0,
      output_port => force_re_output_port_net
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/fdfs/fd_fs/sincos0"

entity sincos0_entity_764418d801 is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    sync_in: in std_logic_vector(1 downto 0); 
    theta: in std_logic_vector(9 downto 0); 
    cos: out std_logic_vector(17 downto 0); 
    sine: out std_logic_vector(17 downto 0); 
    sync_out: out std_logic_vector(1 downto 0)
  );
end sincos0_entity_764418d801;

architecture structural of sincos0_entity_764418d801 is
  signal ce_1_sg_x540: std_logic;
  signal clk_1_sg_x540: std_logic;
  signal delay13_q_net_x0: std_logic_vector(1 downto 0);
  signal delay_q_net_x0: std_logic_vector(1 downto 0);
  signal reinterpret11_output_port_net_x0: std_logic_vector(9 downto 0);
  signal rom0_data_net_x1: std_logic_vector(17 downto 0);
  signal rom1_data_net_x1: std_logic_vector(17 downto 0);

begin
  ce_1_sg_x540 <= ce_1;
  clk_1_sg_x540 <= clk_1;
  delay13_q_net_x0 <= sync_in;
  reinterpret11_output_port_net_x0 <= theta;
  cos <= rom1_data_net_x1;
  sine <= rom0_data_net_x1;
  sync_out <= delay_q_net_x0;

  delay: entity work.xldelay
    generic map (
      latency => 3,
      reg_retiming => 0,
      reset => 0,
      width => 2
    )
    port map (
      ce => ce_1_sg_x540,
      clk => clk_1_sg_x540,
      d => delay13_q_net_x0,
      en => '1',
      rst => '1',
      q => delay_q_net_x0
    );

  rom0: entity work.xlsprom_c09f12_01
    generic map (
      c_address_width => 10,
      c_width => 18,
      core_name0 => "bmg_72_321d886e2c47e239",
      latency => 2
    )
    port map (
      addr => reinterpret11_output_port_net_x0,
      ce => ce_1_sg_x540,
      clk => clk_1_sg_x540,
      en => "1",
      rst => "0",
      data => rom0_data_net_x1
    );

  rom1: entity work.xlsprom_c09f12_01
    generic map (
      c_address_width => 10,
      c_width => 18,
      core_name0 => "bmg_72_dc97d51467d52108",
      latency => 2
    )
    port map (
      addr => reinterpret11_output_port_net_x0,
      ce => ce_1_sg_x540,
      clk => clk_1_sg_x540,
      en => "1",
      rst => "0",
      data => rom1_data_net_x1
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/fdfs/fd_fs"

entity fd_fs_entity_fa00e52681 is
  port (
    a0: in std_logic_vector(18 downto 0); 
    a1: in std_logic_vector(30 downto 0); 
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    data: in std_logic_vector(61 downto 0); 
    index: in std_logic_vector(19 downto 0); 
    sync: in std_logic; 
    valid: in std_logic; 
    data_out: out std_logic_vector(61 downto 0); 
    sync_out: out std_logic; 
    valid_out: out std_logic
  );
end fd_fs_entity_fa00e52681;

architecture structural of fd_fs_entity_fa00e52681 is
  signal addsub_s_net_x0: std_logic_vector(51 downto 0);
  signal ce_1_sg_x541: std_logic;
  signal clk_1_sg_x541: std_logic;
  signal concat_y_net_x0: std_logic_vector(1 downto 0);
  signal concat_y_net_x3: std_logic_vector(61 downto 0);
  signal convert1_dout_net_x0: std_logic_vector(30 downto 0);
  signal convert4_dout_net_x2: std_logic_vector(18 downto 0);
  signal convert8_dout_net: std_logic_vector(9 downto 0);
  signal convert_dout_net_x0: std_logic_vector(30 downto 0);
  signal delay10_q_net_x0: std_logic_vector(30 downto 0);
  signal delay11_q_net_x1: std_logic_vector(61 downto 0);
  signal delay13_q_net_x0: std_logic_vector(1 downto 0);
  signal delay13_q_net_x2: std_logic_vector(19 downto 0);
  signal delay15_q_net_x1: std_logic;
  signal delay3_q_net_x0: std_logic_vector(30 downto 0);
  signal delay6_q_net: std_logic_vector(1 downto 0);
  signal delay9_q_net_x1: std_logic_vector(61 downto 0);
  signal delay9_q_net_x2: std_logic;
  signal delay_q_net_x0: std_logic_vector(1 downto 0);
  signal force_im_output_port_net_x0: std_logic_vector(30 downto 0);
  signal force_re_output_port_net_x0: std_logic_vector(30 downto 0);
  signal imag_sum_s_net_x0: std_logic_vector(49 downto 0);
  signal mux_y_net_x2: std_logic_vector(30 downto 0);
  signal real_sum_s_net_x0: std_logic_vector(49 downto 0);
  signal reinterpret11_output_port_net_x0: std_logic_vector(9 downto 0);
  signal rom0_data_net_x1: std_logic_vector(17 downto 0);
  signal rom1_data_net_x1: std_logic_vector(17 downto 0);
  signal slice1_y_net_x0: std_logic;
  signal slice_y_net_x0: std_logic;
  signal sync_delay_q_net_x0: std_logic_vector(1 downto 0);

begin
  convert4_dout_net_x2 <= a0;
  mux_y_net_x2 <= a1;
  ce_1_sg_x541 <= ce_1;
  clk_1_sg_x541 <= clk_1;
  delay11_q_net_x1 <= data;
  delay13_q_net_x2 <= index;
  delay9_q_net_x2 <= sync;
  delay15_q_net_x1 <= valid;
  data_out <= concat_y_net_x3;
  sync_out <= slice1_y_net_x0;
  valid_out <= slice_y_net_x0;

  c_to_ri_6fb343188d: entity work.c_to_ri_entity_6fb343188d
    port map (
      c => delay9_q_net_x1,
      im => force_im_output_port_net_x0,
      re => force_re_output_port_net_x0
    );

  cmult_4bit_hdl_e90bbbc122: entity work.cmult_4bit_hdl_entity_e90bbbc122
    port map (
      a => rom1_data_net_x1,
      b => rom0_data_net_x1,
      c => delay10_q_net_x0,
      ce_1 => ce_1_sg_x541,
      clk_1 => clk_1_sg_x541,
      d => delay3_q_net_x0,
      imag => imag_sum_s_net_x0,
      real_x0 => real_sum_s_net_x0
    );

  concat: entity work.concat_32afb77cd2
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      in0(0) => delay15_q_net_x1,
      in1(0) => delay9_q_net_x2,
      y => concat_y_net_x0
    );

  convert: entity work.xlconvert_pipeline
    generic map (
      bool_conversion => 0,
      din_arith => 2,
      din_bin_pt => 34,
      din_width => 50,
      dout_arith => 2,
      dout_bin_pt => 17,
      dout_width => 31,
      latency => 2,
      overflow => xlWrap,
      quantization => xlRoundBanker
    )
    port map (
      ce => ce_1_sg_x541,
      clk => clk_1_sg_x541,
      clr => '0',
      din => real_sum_s_net_x0,
      en => "1",
      dout => convert_dout_net_x0
    );

  convert1: entity work.xlconvert_pipeline
    generic map (
      bool_conversion => 0,
      din_arith => 2,
      din_bin_pt => 34,
      din_width => 50,
      dout_arith => 2,
      dout_bin_pt => 17,
      dout_width => 31,
      latency => 2,
      overflow => xlWrap,
      quantization => xlRoundBanker
    )
    port map (
      ce => ce_1_sg_x541,
      clk => clk_1_sg_x541,
      clr => '0',
      din => imag_sum_s_net_x0,
      en => "1",
      dout => convert1_dout_net_x0
    );

  convert8: entity work.xlconvert_pipeline
    generic map (
      bool_conversion => 0,
      din_arith => 2,
      din_bin_pt => 30,
      din_width => 52,
      dout_arith => 2,
      dout_bin_pt => 9,
      dout_width => 10,
      latency => 1,
      overflow => xlWrap,
      quantization => xlRound
    )
    port map (
      ce => ce_1_sg_x541,
      clk => clk_1_sg_x541,
      clr => '0',
      din => addsub_s_net_x0,
      en => "1",
      dout => convert8_dout_net
    );

  delay10: entity work.delay_ca228dec41
    port map (
      ce => ce_1_sg_x541,
      clk => clk_1_sg_x541,
      clr => '0',
      d => force_re_output_port_net_x0,
      q => delay10_q_net_x0
    );

  delay13: entity work.delay_4ce33ca7e7
    port map (
      ce => ce_1_sg_x541,
      clk => clk_1_sg_x541,
      clr => '0',
      d => sync_delay_q_net_x0,
      q => delay13_q_net_x0
    );

  delay3: entity work.delay_ca228dec41
    port map (
      ce => ce_1_sg_x541,
      clk => clk_1_sg_x541,
      clr => '0',
      d => force_im_output_port_net_x0,
      q => delay3_q_net_x0
    );

  delay6: entity work.delay_ef6ec19213
    port map (
      ce => ce_1_sg_x541,
      clk => clk_1_sg_x541,
      clr => '0',
      d => delay_q_net_x0,
      q => delay6_q_net
    );

  delay9: entity work.delay_46b7175e0f
    port map (
      ce => ce_1_sg_x541,
      clk => clk_1_sg_x541,
      clr => '0',
      d => delay11_q_net_x1,
      q => delay9_q_net_x1
    );

  polynomial0_23243560fe: entity work.polynomial0_entity_23243560fe
    port map (
      a0 => convert4_dout_net_x2,
      a1 => mux_y_net_x2,
      ce_1 => ce_1_sg_x541,
      clk_1 => clk_1_sg_x541,
      sync_in => concat_y_net_x0,
      x => delay13_q_net_x2,
      a0x_0_a1x_1 => addsub_s_net_x0,
      sync_out => sync_delay_q_net_x0
    );

  reinterpret11: entity work.reinterpret_e2e786e1ed
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => convert8_dout_net,
      output_port => reinterpret11_output_port_net_x0
    );

  ri_to_c_c73e85e8c5: entity work.ri_to_c_entity_c73e85e8c5
    port map (
      im => convert1_dout_net_x0,
      re => convert_dout_net_x0,
      c => concat_y_net_x3
    );

  sincos0_764418d801: entity work.sincos0_entity_764418d801
    port map (
      ce_1 => ce_1_sg_x541,
      clk_1 => clk_1_sg_x541,
      sync_in => delay13_q_net_x0,
      theta => reinterpret11_output_port_net_x0,
      cos => rom1_data_net_x1,
      sine => rom0_data_net_x1,
      sync_out => delay_q_net_x0
    );

  slice: entity work.xlslice
    generic map (
      new_lsb => 1,
      new_msb => 1,
      x_width => 2,
      y_width => 1
    )
    port map (
      x => delay6_q_net,
      y(0) => slice_y_net_x0
    );

  slice1: entity work.xlslice
    generic map (
      new_lsb => 0,
      new_msb => 0,
      x_width => 2,
      y_width => 1
    )
    port map (
      x => delay6_q_net,
      y(0) => slice1_y_net_x0
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/fdfs/fd_fs1/polynomial0"

entity polynomial0_entity_feade403d2 is
  port (
    a0: in std_logic_vector(18 downto 0); 
    a1: in std_logic_vector(30 downto 0); 
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    x: in std_logic_vector(19 downto 0); 
    a0x_0_a1x_1: out std_logic_vector(51 downto 0)
  );
end polynomial0_entity_feade403d2;

architecture structural of polynomial0_entity_feade403d2 is
  signal a0_delay_q_net: std_logic_vector(18 downto 0);
  signal a1x_1_mult_p_net: std_logic_vector(50 downto 0);
  signal addsub_s_net_x0: std_logic_vector(51 downto 0);
  signal ce_1_sg_x543: std_logic;
  signal clk_1_sg_x543: std_logic;
  signal convert4_dout_net_x1: std_logic_vector(18 downto 0);
  signal delay13_q_net_x1: std_logic_vector(19 downto 0);
  signal mux_y_net_x1: std_logic_vector(30 downto 0);

begin
  convert4_dout_net_x1 <= a0;
  mux_y_net_x1 <= a1;
  ce_1_sg_x543 <= ce_1;
  clk_1_sg_x543 <= clk_1;
  delay13_q_net_x1 <= x;
  a0x_0_a1x_1 <= addsub_s_net_x0;

  a0_delay: entity work.delay_ed64862f6f
    port map (
      ce => ce_1_sg_x543,
      clk => clk_1_sg_x543,
      clr => '0',
      d => convert4_dout_net_x1,
      q => a0_delay_q_net
    );

  a1x_1_mult: entity work.mult_edcb97cd50
    port map (
      a => delay13_q_net_x1,
      b => mux_y_net_x1,
      ce => ce_1_sg_x543,
      clk => clk_1_sg_x543,
      clr => '0',
      p => a1x_1_mult_p_net
    );

  addsub: entity work.addsub_09d6c96f59
    port map (
      a => a0_delay_q_net,
      b => a1x_1_mult_p_net,
      ce => ce_1_sg_x543,
      clk => clk_1_sg_x543,
      clr => '0',
      s => addsub_s_net_x0
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/fdfs/fd_fs1/sincos0"

entity sincos0_entity_3fdc663e3b is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    theta: in std_logic_vector(9 downto 0); 
    cos: out std_logic_vector(17 downto 0); 
    sine: out std_logic_vector(17 downto 0)
  );
end sincos0_entity_3fdc663e3b;

architecture structural of sincos0_entity_3fdc663e3b is
  signal ce_1_sg_x544: std_logic;
  signal clk_1_sg_x544: std_logic;
  signal reinterpret11_output_port_net_x0: std_logic_vector(9 downto 0);
  signal rom0_data_net_x1: std_logic_vector(17 downto 0);
  signal rom1_data_net_x1: std_logic_vector(17 downto 0);

begin
  ce_1_sg_x544 <= ce_1;
  clk_1_sg_x544 <= clk_1;
  reinterpret11_output_port_net_x0 <= theta;
  cos <= rom1_data_net_x1;
  sine <= rom0_data_net_x1;

  rom0: entity work.xlsprom_c09f12_01
    generic map (
      c_address_width => 10,
      c_width => 18,
      core_name0 => "bmg_72_321d886e2c47e239",
      latency => 2
    )
    port map (
      addr => reinterpret11_output_port_net_x0,
      ce => ce_1_sg_x544,
      clk => clk_1_sg_x544,
      en => "1",
      rst => "0",
      data => rom0_data_net_x1
    );

  rom1: entity work.xlsprom_c09f12_01
    generic map (
      c_address_width => 10,
      c_width => 18,
      core_name0 => "bmg_72_dc97d51467d52108",
      latency => 2
    )
    port map (
      addr => reinterpret11_output_port_net_x0,
      ce => ce_1_sg_x544,
      clk => clk_1_sg_x544,
      en => "1",
      rst => "0",
      data => rom1_data_net_x1
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/fdfs/fd_fs1"

entity fd_fs1_entity_17caded306 is
  port (
    a0: in std_logic_vector(18 downto 0); 
    a1: in std_logic_vector(30 downto 0); 
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    data: in std_logic_vector(61 downto 0); 
    index: in std_logic_vector(19 downto 0); 
    data_out: out std_logic_vector(61 downto 0)
  );
end fd_fs1_entity_17caded306;

architecture structural of fd_fs1_entity_17caded306 is
  signal addsub_s_net_x0: std_logic_vector(51 downto 0);
  signal ce_1_sg_x545: std_logic;
  signal clk_1_sg_x545: std_logic;
  signal concat_y_net_x4: std_logic_vector(61 downto 0);
  signal convert1_dout_net_x0: std_logic_vector(30 downto 0);
  signal convert4_dout_net_x2: std_logic_vector(18 downto 0);
  signal convert8_dout_net: std_logic_vector(9 downto 0);
  signal convert_dout_net_x0: std_logic_vector(30 downto 0);
  signal delay10_q_net_x0: std_logic_vector(30 downto 0);
  signal delay11_q_net_x1: std_logic_vector(61 downto 0);
  signal delay13_q_net_x2: std_logic_vector(19 downto 0);
  signal delay3_q_net_x0: std_logic_vector(30 downto 0);
  signal delay9_q_net_x0: std_logic_vector(61 downto 0);
  signal force_im_output_port_net_x0: std_logic_vector(30 downto 0);
  signal force_re_output_port_net_x0: std_logic_vector(30 downto 0);
  signal imag_sum_s_net_x0: std_logic_vector(49 downto 0);
  signal mux_y_net_x2: std_logic_vector(30 downto 0);
  signal real_sum_s_net_x0: std_logic_vector(49 downto 0);
  signal reinterpret11_output_port_net_x0: std_logic_vector(9 downto 0);
  signal rom0_data_net_x1: std_logic_vector(17 downto 0);
  signal rom1_data_net_x1: std_logic_vector(17 downto 0);

begin
  convert4_dout_net_x2 <= a0;
  mux_y_net_x2 <= a1;
  ce_1_sg_x545 <= ce_1;
  clk_1_sg_x545 <= clk_1;
  delay11_q_net_x1 <= data;
  delay13_q_net_x2 <= index;
  data_out <= concat_y_net_x4;

  c_to_ri_5f224c6f36: entity work.c_to_ri_entity_6fb343188d
    port map (
      c => delay9_q_net_x0,
      im => force_im_output_port_net_x0,
      re => force_re_output_port_net_x0
    );

  cmult_4bit_hdl_b251b9ffa8: entity work.cmult_4bit_hdl_entity_e90bbbc122
    port map (
      a => rom1_data_net_x1,
      b => rom0_data_net_x1,
      c => delay10_q_net_x0,
      ce_1 => ce_1_sg_x545,
      clk_1 => clk_1_sg_x545,
      d => delay3_q_net_x0,
      imag => imag_sum_s_net_x0,
      real_x0 => real_sum_s_net_x0
    );

  convert: entity work.xlconvert_pipeline
    generic map (
      bool_conversion => 0,
      din_arith => 2,
      din_bin_pt => 34,
      din_width => 50,
      dout_arith => 2,
      dout_bin_pt => 17,
      dout_width => 31,
      latency => 2,
      overflow => xlWrap,
      quantization => xlRoundBanker
    )
    port map (
      ce => ce_1_sg_x545,
      clk => clk_1_sg_x545,
      clr => '0',
      din => real_sum_s_net_x0,
      en => "1",
      dout => convert_dout_net_x0
    );

  convert1: entity work.xlconvert_pipeline
    generic map (
      bool_conversion => 0,
      din_arith => 2,
      din_bin_pt => 34,
      din_width => 50,
      dout_arith => 2,
      dout_bin_pt => 17,
      dout_width => 31,
      latency => 2,
      overflow => xlWrap,
      quantization => xlRoundBanker
    )
    port map (
      ce => ce_1_sg_x545,
      clk => clk_1_sg_x545,
      clr => '0',
      din => imag_sum_s_net_x0,
      en => "1",
      dout => convert1_dout_net_x0
    );

  convert8: entity work.xlconvert_pipeline
    generic map (
      bool_conversion => 0,
      din_arith => 2,
      din_bin_pt => 30,
      din_width => 52,
      dout_arith => 2,
      dout_bin_pt => 9,
      dout_width => 10,
      latency => 1,
      overflow => xlWrap,
      quantization => xlRound
    )
    port map (
      ce => ce_1_sg_x545,
      clk => clk_1_sg_x545,
      clr => '0',
      din => addsub_s_net_x0,
      en => "1",
      dout => convert8_dout_net
    );

  delay10: entity work.delay_ca228dec41
    port map (
      ce => ce_1_sg_x545,
      clk => clk_1_sg_x545,
      clr => '0',
      d => force_re_output_port_net_x0,
      q => delay10_q_net_x0
    );

  delay3: entity work.delay_ca228dec41
    port map (
      ce => ce_1_sg_x545,
      clk => clk_1_sg_x545,
      clr => '0',
      d => force_im_output_port_net_x0,
      q => delay3_q_net_x0
    );

  delay9: entity work.delay_46b7175e0f
    port map (
      ce => ce_1_sg_x545,
      clk => clk_1_sg_x545,
      clr => '0',
      d => delay11_q_net_x1,
      q => delay9_q_net_x0
    );

  polynomial0_feade403d2: entity work.polynomial0_entity_feade403d2
    port map (
      a0 => convert4_dout_net_x2,
      a1 => mux_y_net_x2,
      ce_1 => ce_1_sg_x545,
      clk_1 => clk_1_sg_x545,
      x => delay13_q_net_x2,
      a0x_0_a1x_1 => addsub_s_net_x0
    );

  reinterpret11: entity work.reinterpret_e2e786e1ed
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => convert8_dout_net,
      output_port => reinterpret11_output_port_net_x0
    );

  ri_to_c_3cbc44f427: entity work.ri_to_c_entity_c73e85e8c5
    port map (
      im => convert1_dout_net_x0,
      re => convert_dout_net_x0,
      c => concat_y_net_x4
    );

  sincos0_3fdc663e3b: entity work.sincos0_entity_3fdc663e3b
    port map (
      ce_1 => ce_1_sg_x545,
      clk_1 => clk_1_sg_x545,
      theta => reinterpret11_output_port_net_x0,
      cos => rom1_data_net_x1,
      sine => rom0_data_net_x1
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/fdfs/fd_fs_tvg0/bus_create2"

entity bus_create2_entity_d651c0183c is
  port (
    in1: in std_logic_vector(61 downto 0); 
    in2: in std_logic_vector(21 downto 0); 
    bus_out: out std_logic_vector(83 downto 0)
  );
end bus_create2_entity_d651c0183c;

architecture structural of bus_create2_entity_d651c0183c is
  signal concatenate_y_net_x0: std_logic_vector(83 downto 0);
  signal mux2_y_net_x0: std_logic_vector(61 downto 0);
  signal reinterpret1_output_port_net: std_logic_vector(61 downto 0);
  signal reinterpret1_output_port_net_x1: std_logic_vector(21 downto 0);
  signal reinterpret2_output_port_net: std_logic_vector(21 downto 0);

begin
  mux2_y_net_x0 <= in1;
  reinterpret1_output_port_net_x1 <= in2;
  bus_out <= concatenate_y_net_x0;

  concatenate: entity work.concat_24b7d1333f
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      in0 => reinterpret1_output_port_net,
      in1 => reinterpret2_output_port_net,
      y => concatenate_y_net_x0
    );

  reinterpret1: entity work.reinterpret_aa522dcdd3
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => mux2_y_net_x0,
      output_port => reinterpret1_output_port_net
    );

  reinterpret2: entity work.reinterpret_3cfe81c7ab
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => reinterpret1_output_port_net_x1,
      output_port => reinterpret2_output_port_net
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/fdfs/fd_fs_tvg0/exp_data"

entity exp_data_entity_6025422bec is
  port (
    bus_in: in std_logic_vector(83 downto 0); 
    lsb_out1: out std_logic_vector(21 downto 0)
  );
end exp_data_entity_6025422bec;

architecture structural of exp_data_entity_6025422bec is
  signal delay22_q_net_x0: std_logic_vector(83 downto 0);
  signal reinterpret1_output_port_net_x2: std_logic_vector(21 downto 0);
  signal slice1_y_net: std_logic_vector(21 downto 0);

begin
  delay22_q_net_x0 <= bus_in;
  lsb_out1 <= reinterpret1_output_port_net_x2;

  reinterpret1: entity work.reinterpret_3cfe81c7ab
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => slice1_y_net,
      output_port => reinterpret1_output_port_net_x2
    );

  slice1: entity work.xlslice
    generic map (
      new_lsb => 0,
      new_msb => 21,
      x_width => 84,
      y_width => 22
    )
    port map (
      x => delay22_q_net_x0,
      y => slice1_y_net
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/fdfs/fd_fs_tvg0/ri_to_c"

entity ri_to_c_entity_f27e34b719 is
  port (
    re: in std_logic_vector(30 downto 0); 
    c: out std_logic_vector(61 downto 0)
  );
end ri_to_c_entity_f27e34b719;

architecture structural of ri_to_c_entity_f27e34b719 is
  signal concat_y_net_x0: std_logic_vector(61 downto 0);
  signal constant_op_net_x0: std_logic_vector(30 downto 0);
  signal force_im_output_port_net: std_logic_vector(30 downto 0);
  signal force_re_output_port_net: std_logic_vector(30 downto 0);

begin
  constant_op_net_x0 <= re;
  c <= concat_y_net_x0;

  concat: entity work.concat_94729ef7e0
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      in0 => force_re_output_port_net,
      in1 => force_im_output_port_net,
      y => concat_y_net_x0
    );

  force_im: entity work.reinterpret_64ddc4af5e
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => constant_op_net_x0,
      output_port => force_im_output_port_net
    );

  force_re: entity work.reinterpret_64ddc4af5e
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => constant_op_net_x0,
      output_port => force_re_output_port_net
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/fdfs/fd_fs_tvg0"

entity fd_fs_tvg0_entity_3f83eaa054 is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    din0: in std_logic_vector(83 downto 0); 
    pulse_en: in std_logic; 
    sync: in std_logic; 
    time_x0: in std_logic_vector(47 downto 0); 
    use_tvg: in std_logic; 
    dout0: out std_logic_vector(83 downto 0); 
    sync_out: out std_logic; 
    time_o: out std_logic_vector(47 downto 0)
  );
end fd_fs_tvg0_entity_3f83eaa054;

architecture structural of fd_fs_tvg0_entity_3f83eaa054 is
  signal ce_1_sg_x546: std_logic;
  signal clk_1_sg_x546: std_logic;
  signal concat_y_net_x0: std_logic_vector(61 downto 0);
  signal concat_y_net_x1: std_logic_vector(61 downto 0);
  signal concatenate_y_net_x0: std_logic_vector(83 downto 0);
  signal constant1_op_net_x0: std_logic_vector(30 downto 0);
  signal constant_op_net_x0: std_logic_vector(30 downto 0);
  signal delay1_q_net_x0: std_logic_vector(47 downto 0);
  signal delay20_q_net_x0: std_logic;
  signal delay22_q_net_x1: std_logic_vector(83 downto 0);
  signal delay24_q_net_x0: std_logic_vector(47 downto 0);
  signal delay_q_net_x1: std_logic;
  signal delay_q_net_x2: std_logic;
  signal mux2_y_net_x0: std_logic_vector(61 downto 0);
  signal mux_y_net_x1: std_logic_vector(83 downto 0);
  signal register5_q_net_x0: std_logic;
  signal reinterpret1_output_port_net_x2: std_logic_vector(21 downto 0);

begin
  ce_1_sg_x546 <= ce_1;
  clk_1_sg_x546 <= clk_1;
  delay22_q_net_x1 <= din0;
  delay_q_net_x1 <= pulse_en;
  delay20_q_net_x0 <= sync;
  delay24_q_net_x0 <= time_x0;
  register5_q_net_x0 <= use_tvg;
  dout0 <= mux_y_net_x1;
  sync_out <= delay_q_net_x2;
  time_o <= delay1_q_net_x0;

  bus_create2_d651c0183c: entity work.bus_create2_entity_d651c0183c
    port map (
      in1 => mux2_y_net_x0,
      in2 => reinterpret1_output_port_net_x2,
      bus_out => concatenate_y_net_x0
    );

  constant1: entity work.constant_bc7a810978
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op => constant1_op_net_x0
    );

  constant_x0: entity work.constant_e89402c81f
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op => constant_op_net_x0
    );

  delay: entity work.xldelay
    generic map (
      latency => 1,
      reg_retiming => 0,
      reset => 0,
      width => 1
    )
    port map (
      ce => ce_1_sg_x546,
      clk => clk_1_sg_x546,
      d(0) => delay20_q_net_x0,
      en => '1',
      rst => '1',
      q(0) => delay_q_net_x2
    );

  delay1: entity work.xldelay
    generic map (
      latency => 1,
      reg_retiming => 0,
      reset => 0,
      width => 48
    )
    port map (
      ce => ce_1_sg_x546,
      clk => clk_1_sg_x546,
      d => delay24_q_net_x0,
      en => '1',
      rst => '1',
      q => delay1_q_net_x0
    );

  exp_data_6025422bec: entity work.exp_data_entity_6025422bec
    port map (
      bus_in => delay22_q_net_x1,
      lsb_out1 => reinterpret1_output_port_net_x2
    );

  mux: entity work.mux_66ff556d13
    port map (
      ce => ce_1_sg_x546,
      clk => clk_1_sg_x546,
      clr => '0',
      d0 => delay22_q_net_x1,
      d1 => concatenate_y_net_x0,
      sel(0) => register5_q_net_x0,
      y => mux_y_net_x1
    );

  mux2: entity work.mux_e5741dcde9
    port map (
      ce => ce_1_sg_x546,
      clk => clk_1_sg_x546,
      clr => '0',
      d0 => concat_y_net_x1,
      d1 => concat_y_net_x0,
      sel(0) => delay_q_net_x1,
      y => mux2_y_net_x0
    );

  ri_to_c1_136e10ba40: entity work.ri_to_c_entity_f27e34b719
    port map (
      re => constant1_op_net_x0,
      c => concat_y_net_x1
    );

  ri_to_c_f27e34b719: entity work.ri_to_c_entity_f27e34b719
    port map (
      re => constant_op_net_x0,
      c => concat_y_net_x0
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/fdfs/fd_fs_tvg1"

entity fd_fs_tvg1_entity_864661c217 is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    din0: in std_logic_vector(61 downto 0); 
    use_tvg: in std_logic; 
    dout0: out std_logic_vector(61 downto 0)
  );
end fd_fs_tvg1_entity_864661c217;

architecture structural of fd_fs_tvg1_entity_864661c217 is
  signal ce_1_sg_x547: std_logic;
  signal clk_1_sg_x547: std_logic;
  signal concat_y_net_x0: std_logic_vector(61 downto 0);
  signal constant1_op_net_x0: std_logic_vector(30 downto 0);
  signal constant_op_net_x0: std_logic_vector(30 downto 0);
  signal delay2_q_net_x0: std_logic_vector(61 downto 0);
  signal mux_y_net_x0: std_logic_vector(61 downto 0);
  signal register5_q_net_x1: std_logic;

begin
  ce_1_sg_x547 <= ce_1;
  clk_1_sg_x547 <= clk_1;
  delay2_q_net_x0 <= din0;
  register5_q_net_x1 <= use_tvg;
  dout0 <= mux_y_net_x0;

  constant1: entity work.constant_e89402c81f
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op => constant1_op_net_x0
    );

  constant_x0: entity work.constant_e89402c81f
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op => constant_op_net_x0
    );

  mux: entity work.mux_e5741dcde9
    port map (
      ce => ce_1_sg_x547,
      clk => clk_1_sg_x547,
      clr => '0',
      d0 => delay2_q_net_x0,
      d1 => concat_y_net_x0,
      sel(0) => register5_q_net_x1,
      y => mux_y_net_x0
    );

  ri_to_c_d6eb27e011: entity work.ri_to_c_entity_c73e85e8c5
    port map (
      im => constant1_op_net_x0,
      re => constant_op_net_x0,
      c => concat_y_net_x0
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/fdfs/fd_local_time"

entity fd_local_time_entity_fd1d59e087 is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    reset: in std_logic; 
    sync: in std_logic; 
    time_x0: out std_logic_vector(47 downto 0)
  );
end fd_local_time_entity_fd1d59e087;

architecture structural of fd_local_time_entity_fd1d59e087 is
  signal ce_1_sg_x549: std_logic;
  signal clk_1_sg_x549: std_logic;
  signal clock_op_net_x0: std_logic_vector(47 downto 0);
  signal delay16_q_net_x0: std_logic;
  signal delay_q_net: std_logic;
  signal edge_op_y_net_x0: std_logic;
  signal logical14_y_net_x7: std_logic;
  signal register_q_net: std_logic;

begin
  ce_1_sg_x549 <= ce_1;
  clk_1_sg_x549 <= clk_1;
  logical14_y_net_x7 <= reset;
  delay16_q_net_x0 <= sync;
  time_x0 <= clock_op_net_x0;

  clock: entity work.xlcounter_free_c09f12_01
    generic map (
      core_name0 => "cntr_11_0_9407b84ef10719d1",
      op_arith => xlUnsigned,
      op_width => 48
    )
    port map (
      ce => ce_1_sg_x549,
      clk => clk_1_sg_x549,
      clr => '0',
      en(0) => register_q_net,
      rst(0) => delay_q_net,
      op => clock_op_net_x0
    );

  delay: entity work.delay_9f02caa990
    port map (
      ce => ce_1_sg_x549,
      clk => clk_1_sg_x549,
      clr => '0',
      d(0) => edge_op_y_net_x0,
      q(0) => delay_q_net
    );

  edge_detect1_65bf822683: entity work.edge_detect_entity_cb656284f4
    port map (
      ce_1 => ce_1_sg_x549,
      clk_1 => clk_1_sg_x549,
      in_x0 => logical14_y_net_x7,
      out_x0 => edge_op_y_net_x0
    );

  register_x0: entity work.xlregister
    generic map (
      d_width => 1,
      init_value => b"0"
    )
    port map (
      ce => ce_1_sg_x549,
      clk => clk_1_sg_x549,
      d(0) => delay16_q_net_x0,
      en(0) => delay16_q_net_x0,
      rst(0) => logical14_y_net_x7,
      q(0) => register_q_net
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/fdfs/fd_tr0"

entity fd_tr0_entity_ff3cd11b73 is
  port (
    arm: in std_logic; 
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    current_time: in std_logic_vector(47 downto 0); 
    din: in std_logic_vector(84 downto 0); 
    load_now: in std_logic; 
    load_time: in std_logic_vector(47 downto 0); 
    load_value: in std_logic_vector(78 downto 0); 
    rst: in std_logic; 
    arm_count: out std_logic_vector(7 downto 0); 
    dout: out std_logic_vector(84 downto 0); 
    enable: out std_logic; 
    ld_count: out std_logic_vector(7 downto 0); 
    value: out std_logic_vector(78 downto 0)
  );
end fd_tr0_entity_ff3cd11b73;

architecture structural of fd_tr0_entity_ff3cd11b73 is
  signal assert_dout_net: std_logic;
  signal ce_1_sg_x552: std_logic;
  signal clk_1_sg_x552: std_logic;
  signal concat22_y_net_x2: std_logic_vector(78 downto 0);
  signal concat9_y_net_x2: std_logic_vector(47 downto 0);
  signal concatenate_y_net_x1: std_logic_vector(84 downto 0);
  signal count0_op_net_x0: std_logic_vector(7 downto 0);
  signal count1_op_net_x0: std_logic_vector(7 downto 0);
  signal delay1_q_net: std_logic;
  signal delay1_q_net_x1: std_logic_vector(47 downto 0);
  signal delay2_q_net: std_logic;
  signal delay3_q_net: std_logic;
  signal delay4_q_net: std_logic;
  signal delay6_q_net: std_logic_vector(84 downto 0);
  signal delay6_q_net_x4: std_logic;
  signal delay7_q_net_x1: std_logic_vector(84 downto 0);
  signal delay_q_net_x4: std_logic;
  signal edge_op_y_net_x0: std_logic;
  signal edge_op_y_net_x1: std_logic;
  signal inverter_op_net: std_logic;
  signal logical12_y_net_x1: std_logic;
  signal logical14_y_net_x8: std_logic;
  signal logical1_y_net: std_logic;
  signal logical2_y_net: std_logic;
  signal logical3_y_net: std_logic;
  signal logical4_y_net: std_logic;
  signal logical5_y_net: std_logic;
  signal register1_q_net_x0: std_logic;
  signal register2_q_net: std_logic_vector(47 downto 0);
  signal register3_q_net: std_logic_vector(78 downto 0);
  signal register_q_net_x0: std_logic_vector(78 downto 0);
  signal relational_op_net: std_logic;
  signal slice2_y_net: std_logic_vector(47 downto 0);
  signal slice_y_net: std_logic_vector(47 downto 0);

begin
  logical12_y_net_x1 <= arm;
  ce_1_sg_x552 <= ce_1;
  clk_1_sg_x552 <= clk_1;
  delay1_q_net_x1 <= current_time;
  concatenate_y_net_x1 <= din;
  delay6_q_net_x4 <= load_now;
  concat9_y_net_x2 <= load_time;
  concat22_y_net_x2 <= load_value;
  logical14_y_net_x8 <= rst;
  arm_count <= count0_op_net_x0;
  dout <= delay7_q_net_x1;
  enable <= delay_q_net_x4;
  ld_count <= count1_op_net_x0;
  value <= register_q_net_x0;

  assert_x0: entity work.xlpassthrough
    generic map (
      din_width => 1,
      dout_width => 1
    )
    port map (
      din(0) => register1_q_net_x0,
      dout(0) => assert_dout_net
    );

  count0: entity work.xlcounter_free_c09f12_01
    generic map (
      core_name0 => "cntr_11_0_4df07e1ba68d0c6e",
      op_arith => xlUnsigned,
      op_width => 8
    )
    port map (
      ce => ce_1_sg_x552,
      clk => clk_1_sg_x552,
      clr => '0',
      en(0) => delay2_q_net,
      rst(0) => logical14_y_net_x8,
      op => count0_op_net_x0
    );

  count1: entity work.xlcounter_free_c09f12_01
    generic map (
      core_name0 => "cntr_11_0_4df07e1ba68d0c6e",
      op_arith => xlUnsigned,
      op_width => 8
    )
    port map (
      ce => ce_1_sg_x552,
      clk => clk_1_sg_x552,
      clr => '0',
      en(0) => delay1_q_net,
      rst(0) => logical14_y_net_x8,
      op => count1_op_net_x0
    );

  delay: entity work.delay_e18fb31a3d
    port map (
      ce => ce_1_sg_x552,
      clk => clk_1_sg_x552,
      clr => '0',
      d(0) => logical1_y_net,
      q(0) => delay_q_net_x4
    );

  delay1: entity work.delay_9f02caa990
    port map (
      ce => ce_1_sg_x552,
      clk => clk_1_sg_x552,
      clr => '0',
      d(0) => logical1_y_net,
      q(0) => delay1_q_net
    );

  delay2: entity work.delay_9f02caa990
    port map (
      ce => ce_1_sg_x552,
      clk => clk_1_sg_x552,
      clr => '0',
      d(0) => edge_op_y_net_x0,
      q(0) => delay2_q_net
    );

  delay3: entity work.delay_9f02caa990
    port map (
      ce => ce_1_sg_x552,
      clk => clk_1_sg_x552,
      clr => '0',
      d(0) => logical1_y_net,
      q(0) => delay3_q_net
    );

  delay4: entity work.delay_9f02caa990
    port map (
      ce => ce_1_sg_x552,
      clk => clk_1_sg_x552,
      clr => '0',
      d(0) => edge_op_y_net_x1,
      q(0) => delay4_q_net
    );

  delay6: entity work.delay_3e300ae6bb
    port map (
      ce => ce_1_sg_x552,
      clk => clk_1_sg_x552,
      clr => '0',
      d => concatenate_y_net_x1,
      q => delay6_q_net
    );

  delay7: entity work.delay_3e300ae6bb
    port map (
      ce => ce_1_sg_x552,
      clk => clk_1_sg_x552,
      clr => '0',
      d => delay6_q_net,
      q => delay7_q_net_x1
    );

  edge_detect1_c3242d79d3: entity work.edge_detect_entity_cb656284f4
    port map (
      ce_1 => ce_1_sg_x552,
      clk_1 => clk_1_sg_x552,
      in_x0 => logical12_y_net_x1,
      out_x0 => edge_op_y_net_x1
    );

  edge_detect_31644e9c4c: entity work.edge_detect_entity_cb656284f4
    port map (
      ce_1 => ce_1_sg_x552,
      clk_1 => clk_1_sg_x552,
      in_x0 => register1_q_net_x0,
      out_x0 => edge_op_y_net_x0
    );

  inverter: entity work.inverter_e5b38cca3b
    port map (
      ce => ce_1_sg_x552,
      clk => clk_1_sg_x552,
      clr => '0',
      ip(0) => assert_dout_net,
      op(0) => inverter_op_net
    );

  logical1: entity work.logical_80f90b97d0
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0(0) => register1_q_net_x0,
      d1(0) => logical2_y_net,
      y(0) => logical1_y_net
    );

  logical2: entity work.logical_444d3f5046
    port map (
      ce => ce_1_sg_x552,
      clk => clk_1_sg_x552,
      clr => '0',
      d0(0) => relational_op_net,
      d1(0) => delay6_q_net_x4,
      y(0) => logical2_y_net
    );

  logical3: entity work.logical_80f90b97d0
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0(0) => inverter_op_net,
      d1(0) => delay4_q_net,
      y(0) => logical3_y_net
    );

  logical4: entity work.logical_80f90b97d0
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0(0) => assert_dout_net,
      d1(0) => logical2_y_net,
      y(0) => logical4_y_net
    );

  logical5: entity work.logical_aacf6e1b0e
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0(0) => logical3_y_net,
      d1(0) => logical4_y_net,
      y(0) => logical5_y_net
    );

  register1: entity work.xlregister
    generic map (
      d_width => 1,
      init_value => b"0"
    )
    port map (
      ce => ce_1_sg_x552,
      clk => clk_1_sg_x552,
      d(0) => inverter_op_net,
      en(0) => logical5_y_net,
      rst(0) => logical14_y_net_x8,
      q(0) => register1_q_net_x0
    );

  register2: entity work.xlregister
    generic map (
      d_width => 48,
      init_value => b"000000000000000000000000000000000000000000000000"
    )
    port map (
      ce => ce_1_sg_x552,
      clk => clk_1_sg_x552,
      d => slice_y_net,
      en(0) => delay4_q_net,
      rst => "0",
      q => register2_q_net
    );

  register3: entity work.xlregister
    generic map (
      d_width => 79,
      init_value => b"0000000000000000000000000000000000000000000000000000000000000000000000000000000"
    )
    port map (
      ce => ce_1_sg_x552,
      clk => clk_1_sg_x552,
      d => concat22_y_net_x2,
      en(0) => delay4_q_net,
      rst => "0",
      q => register3_q_net
    );

  register_x0: entity work.xlregister
    generic map (
      d_width => 79,
      init_value => b"0000000000000000000000000000000000000000000000000000000000000000000000000000000"
    )
    port map (
      ce => ce_1_sg_x552,
      clk => clk_1_sg_x552,
      d => register3_q_net,
      en(0) => delay3_q_net,
      rst => "0",
      q => register_q_net_x0
    );

  relational: entity work.relational_e885809f2f
    port map (
      a => slice2_y_net,
      b => register2_q_net,
      ce => ce_1_sg_x552,
      clk => clk_1_sg_x552,
      clr => '0',
      op(0) => relational_op_net
    );

  slice: entity work.xlslice
    generic map (
      new_lsb => 0,
      new_msb => 47,
      x_width => 48,
      y_width => 48
    )
    port map (
      x => concat9_y_net_x2,
      y => slice_y_net
    );

  slice2: entity work.xlslice
    generic map (
      new_lsb => 0,
      new_msb => 47,
      x_width => 48,
      y_width => 48
    )
    port map (
      x => delay1_q_net_x1,
      y => slice2_y_net
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/fdfs/fd_tr1"

entity fd_tr1_entity_b3b52905a2 is
  port (
    arm: in std_logic; 
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    current_time: in std_logic_vector(47 downto 0); 
    din: in std_logic_vector(61 downto 0); 
    load_now: in std_logic; 
    load_time: in std_logic_vector(47 downto 0); 
    load_value: in std_logic_vector(78 downto 0); 
    rst: in std_logic; 
    arm_count: out std_logic_vector(7 downto 0); 
    dout: out std_logic_vector(61 downto 0); 
    enable: out std_logic; 
    ld_count: out std_logic_vector(7 downto 0); 
    value: out std_logic_vector(78 downto 0)
  );
end fd_tr1_entity_b3b52905a2;

architecture structural of fd_tr1_entity_b3b52905a2 is
  signal assert_dout_net: std_logic;
  signal ce_1_sg_x555: std_logic;
  signal clk_1_sg_x555: std_logic;
  signal concat1_y_net_x3: std_logic_vector(78 downto 0);
  signal concat2_y_net_x2: std_logic_vector(47 downto 0);
  signal count0_op_net_x0: std_logic_vector(7 downto 0);
  signal count1_op_net_x0: std_logic_vector(7 downto 0);
  signal delay1_q_net: std_logic;
  signal delay1_q_net_x2: std_logic_vector(47 downto 0);
  signal delay2_q_net: std_logic;
  signal delay3_q_net: std_logic;
  signal delay4_q_net: std_logic;
  signal delay6_q_net: std_logic_vector(61 downto 0);
  signal delay6_q_net_x5: std_logic;
  signal delay7_q_net_x1: std_logic_vector(61 downto 0);
  signal delay_q_net_x4: std_logic;
  signal edge_op_y_net_x0: std_logic;
  signal edge_op_y_net_x1: std_logic;
  signal inverter_op_net: std_logic;
  signal logical14_y_net_x9: std_logic;
  signal logical1_y_net: std_logic;
  signal logical1_y_net_x1: std_logic;
  signal logical2_y_net: std_logic;
  signal logical3_y_net: std_logic;
  signal logical4_y_net: std_logic;
  signal logical5_y_net: std_logic;
  signal mux_y_net_x1: std_logic_vector(61 downto 0);
  signal register1_q_net_x0: std_logic;
  signal register2_q_net: std_logic_vector(47 downto 0);
  signal register3_q_net: std_logic_vector(78 downto 0);
  signal register_q_net_x0: std_logic_vector(78 downto 0);
  signal relational_op_net: std_logic;
  signal slice2_y_net: std_logic_vector(47 downto 0);
  signal slice_y_net: std_logic_vector(47 downto 0);

begin
  logical1_y_net_x1 <= arm;
  ce_1_sg_x555 <= ce_1;
  clk_1_sg_x555 <= clk_1;
  delay1_q_net_x2 <= current_time;
  mux_y_net_x1 <= din;
  delay6_q_net_x5 <= load_now;
  concat2_y_net_x2 <= load_time;
  concat1_y_net_x3 <= load_value;
  logical14_y_net_x9 <= rst;
  arm_count <= count0_op_net_x0;
  dout <= delay7_q_net_x1;
  enable <= delay_q_net_x4;
  ld_count <= count1_op_net_x0;
  value <= register_q_net_x0;

  assert_x0: entity work.xlpassthrough
    generic map (
      din_width => 1,
      dout_width => 1
    )
    port map (
      din(0) => register1_q_net_x0,
      dout(0) => assert_dout_net
    );

  count0: entity work.xlcounter_free_c09f12_01
    generic map (
      core_name0 => "cntr_11_0_4df07e1ba68d0c6e",
      op_arith => xlUnsigned,
      op_width => 8
    )
    port map (
      ce => ce_1_sg_x555,
      clk => clk_1_sg_x555,
      clr => '0',
      en(0) => delay2_q_net,
      rst(0) => logical14_y_net_x9,
      op => count0_op_net_x0
    );

  count1: entity work.xlcounter_free_c09f12_01
    generic map (
      core_name0 => "cntr_11_0_4df07e1ba68d0c6e",
      op_arith => xlUnsigned,
      op_width => 8
    )
    port map (
      ce => ce_1_sg_x555,
      clk => clk_1_sg_x555,
      clr => '0',
      en(0) => delay1_q_net,
      rst(0) => logical14_y_net_x9,
      op => count1_op_net_x0
    );

  delay: entity work.delay_e18fb31a3d
    port map (
      ce => ce_1_sg_x555,
      clk => clk_1_sg_x555,
      clr => '0',
      d(0) => logical1_y_net,
      q(0) => delay_q_net_x4
    );

  delay1: entity work.delay_9f02caa990
    port map (
      ce => ce_1_sg_x555,
      clk => clk_1_sg_x555,
      clr => '0',
      d(0) => logical1_y_net,
      q(0) => delay1_q_net
    );

  delay2: entity work.delay_9f02caa990
    port map (
      ce => ce_1_sg_x555,
      clk => clk_1_sg_x555,
      clr => '0',
      d(0) => edge_op_y_net_x0,
      q(0) => delay2_q_net
    );

  delay3: entity work.delay_9f02caa990
    port map (
      ce => ce_1_sg_x555,
      clk => clk_1_sg_x555,
      clr => '0',
      d(0) => logical1_y_net,
      q(0) => delay3_q_net
    );

  delay4: entity work.delay_9f02caa990
    port map (
      ce => ce_1_sg_x555,
      clk => clk_1_sg_x555,
      clr => '0',
      d(0) => edge_op_y_net_x1,
      q(0) => delay4_q_net
    );

  delay6: entity work.delay_8aef8ddb97
    port map (
      ce => ce_1_sg_x555,
      clk => clk_1_sg_x555,
      clr => '0',
      d => mux_y_net_x1,
      q => delay6_q_net
    );

  delay7: entity work.delay_8aef8ddb97
    port map (
      ce => ce_1_sg_x555,
      clk => clk_1_sg_x555,
      clr => '0',
      d => delay6_q_net,
      q => delay7_q_net_x1
    );

  edge_detect1_3d8541c405: entity work.edge_detect_entity_cb656284f4
    port map (
      ce_1 => ce_1_sg_x555,
      clk_1 => clk_1_sg_x555,
      in_x0 => logical1_y_net_x1,
      out_x0 => edge_op_y_net_x1
    );

  edge_detect_0866565ba9: entity work.edge_detect_entity_cb656284f4
    port map (
      ce_1 => ce_1_sg_x555,
      clk_1 => clk_1_sg_x555,
      in_x0 => register1_q_net_x0,
      out_x0 => edge_op_y_net_x0
    );

  inverter: entity work.inverter_e5b38cca3b
    port map (
      ce => ce_1_sg_x555,
      clk => clk_1_sg_x555,
      clr => '0',
      ip(0) => assert_dout_net,
      op(0) => inverter_op_net
    );

  logical1: entity work.logical_80f90b97d0
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0(0) => register1_q_net_x0,
      d1(0) => logical2_y_net,
      y(0) => logical1_y_net
    );

  logical2: entity work.logical_444d3f5046
    port map (
      ce => ce_1_sg_x555,
      clk => clk_1_sg_x555,
      clr => '0',
      d0(0) => relational_op_net,
      d1(0) => delay6_q_net_x5,
      y(0) => logical2_y_net
    );

  logical3: entity work.logical_80f90b97d0
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0(0) => inverter_op_net,
      d1(0) => delay4_q_net,
      y(0) => logical3_y_net
    );

  logical4: entity work.logical_80f90b97d0
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0(0) => assert_dout_net,
      d1(0) => logical2_y_net,
      y(0) => logical4_y_net
    );

  logical5: entity work.logical_aacf6e1b0e
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0(0) => logical3_y_net,
      d1(0) => logical4_y_net,
      y(0) => logical5_y_net
    );

  register1: entity work.xlregister
    generic map (
      d_width => 1,
      init_value => b"0"
    )
    port map (
      ce => ce_1_sg_x555,
      clk => clk_1_sg_x555,
      d(0) => inverter_op_net,
      en(0) => logical5_y_net,
      rst(0) => logical14_y_net_x9,
      q(0) => register1_q_net_x0
    );

  register2: entity work.xlregister
    generic map (
      d_width => 48,
      init_value => b"000000000000000000000000000000000000000000000000"
    )
    port map (
      ce => ce_1_sg_x555,
      clk => clk_1_sg_x555,
      d => slice_y_net,
      en(0) => delay4_q_net,
      rst => "0",
      q => register2_q_net
    );

  register3: entity work.xlregister
    generic map (
      d_width => 79,
      init_value => b"0000000000000000000000000000000000000000000000000000000000000000000000000000000"
    )
    port map (
      ce => ce_1_sg_x555,
      clk => clk_1_sg_x555,
      d => concat1_y_net_x3,
      en(0) => delay4_q_net,
      rst => "0",
      q => register3_q_net
    );

  register_x0: entity work.xlregister
    generic map (
      d_width => 79,
      init_value => b"0000000000000000000000000000000000000000000000000000000000000000000000000000000"
    )
    port map (
      ce => ce_1_sg_x555,
      clk => clk_1_sg_x555,
      d => register3_q_net,
      en(0) => delay3_q_net,
      rst => "0",
      q => register_q_net_x0
    );

  relational: entity work.relational_e885809f2f
    port map (
      a => slice2_y_net,
      b => register2_q_net,
      ce => ce_1_sg_x555,
      clk => clk_1_sg_x555,
      clr => '0',
      op(0) => relational_op_net
    );

  slice: entity work.xlslice
    generic map (
      new_lsb => 0,
      new_msb => 47,
      x_width => 48,
      y_width => 48
    )
    port map (
      x => concat2_y_net_x2,
      y => slice_y_net
    );

  slice2: entity work.xlslice
    generic map (
      new_lsb => 0,
      new_msb => 47,
      x_width => 48,
      y_width => 48
    )
    port map (
      x => delay1_q_net_x2,
      y => slice2_y_net
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/fdfs/tvg_tr"

entity tvg_tr_entity_1f329b553b is
  port (
    arm: in std_logic; 
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    current_time: in std_logic_vector(47 downto 0); 
    load_now: in std_logic; 
    load_time: in std_logic_vector(47 downto 0); 
    rst: in std_logic; 
    enable: out std_logic
  );
end tvg_tr_entity_1f329b553b;

architecture structural of tvg_tr_entity_1f329b553b is
  signal assert_dout_net: std_logic;
  signal ce_1_sg_x557: std_logic;
  signal clk_1_sg_x557: std_logic;
  signal clock_op_net_x1: std_logic_vector(47 downto 0);
  signal concat9_y_net_x3: std_logic_vector(47 downto 0);
  signal delay4_q_net: std_logic;
  signal delay6_q_net_x6: std_logic;
  signal delay_q_net_x2: std_logic;
  signal edge_op_y_net_x0: std_logic;
  signal inverter_op_net: std_logic;
  signal logical14_y_net_x10: std_logic;
  signal logical1_y_net: std_logic;
  signal logical20_y_net_x1: std_logic;
  signal logical2_y_net: std_logic;
  signal logical3_y_net: std_logic;
  signal logical4_y_net: std_logic;
  signal logical5_y_net: std_logic;
  signal register1_q_net: std_logic;
  signal register2_q_net: std_logic_vector(47 downto 0);
  signal relational_op_net: std_logic;
  signal slice2_y_net: std_logic_vector(47 downto 0);
  signal slice_y_net: std_logic_vector(47 downto 0);

begin
  logical20_y_net_x1 <= arm;
  ce_1_sg_x557 <= ce_1;
  clk_1_sg_x557 <= clk_1;
  clock_op_net_x1 <= current_time;
  delay6_q_net_x6 <= load_now;
  concat9_y_net_x3 <= load_time;
  logical14_y_net_x10 <= rst;
  enable <= delay_q_net_x2;

  assert_x0: entity work.xlpassthrough
    generic map (
      din_width => 1,
      dout_width => 1
    )
    port map (
      din(0) => register1_q_net,
      dout(0) => assert_dout_net
    );

  delay: entity work.delay_e18fb31a3d
    port map (
      ce => ce_1_sg_x557,
      clk => clk_1_sg_x557,
      clr => '0',
      d(0) => logical1_y_net,
      q(0) => delay_q_net_x2
    );

  delay4: entity work.delay_9f02caa990
    port map (
      ce => ce_1_sg_x557,
      clk => clk_1_sg_x557,
      clr => '0',
      d(0) => edge_op_y_net_x0,
      q(0) => delay4_q_net
    );

  edge_detect1_18b6ef5d7d: entity work.edge_detect_entity_cb656284f4
    port map (
      ce_1 => ce_1_sg_x557,
      clk_1 => clk_1_sg_x557,
      in_x0 => logical20_y_net_x1,
      out_x0 => edge_op_y_net_x0
    );

  inverter: entity work.inverter_e5b38cca3b
    port map (
      ce => ce_1_sg_x557,
      clk => clk_1_sg_x557,
      clr => '0',
      ip(0) => assert_dout_net,
      op(0) => inverter_op_net
    );

  logical1: entity work.logical_80f90b97d0
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0(0) => register1_q_net,
      d1(0) => logical2_y_net,
      y(0) => logical1_y_net
    );

  logical2: entity work.logical_444d3f5046
    port map (
      ce => ce_1_sg_x557,
      clk => clk_1_sg_x557,
      clr => '0',
      d0(0) => relational_op_net,
      d1(0) => delay6_q_net_x6,
      y(0) => logical2_y_net
    );

  logical3: entity work.logical_80f90b97d0
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0(0) => inverter_op_net,
      d1(0) => delay4_q_net,
      y(0) => logical3_y_net
    );

  logical4: entity work.logical_80f90b97d0
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0(0) => assert_dout_net,
      d1(0) => logical2_y_net,
      y(0) => logical4_y_net
    );

  logical5: entity work.logical_aacf6e1b0e
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0(0) => logical3_y_net,
      d1(0) => logical4_y_net,
      y(0) => logical5_y_net
    );

  register1: entity work.xlregister
    generic map (
      d_width => 1,
      init_value => b"0"
    )
    port map (
      ce => ce_1_sg_x557,
      clk => clk_1_sg_x557,
      d(0) => inverter_op_net,
      en(0) => logical5_y_net,
      rst(0) => logical14_y_net_x10,
      q(0) => register1_q_net
    );

  register2: entity work.xlregister
    generic map (
      d_width => 48,
      init_value => b"000000000000000000000000000000000000000000000000"
    )
    port map (
      ce => ce_1_sg_x557,
      clk => clk_1_sg_x557,
      d => slice_y_net,
      en(0) => delay4_q_net,
      rst => "0",
      q => register2_q_net
    );

  relational: entity work.relational_e885809f2f
    port map (
      a => slice2_y_net,
      b => register2_q_net,
      ce => ce_1_sg_x557,
      clk => clk_1_sg_x557,
      clr => '0',
      op(0) => relational_op_net
    );

  slice: entity work.xlslice
    generic map (
      new_lsb => 0,
      new_msb => 47,
      x_width => 48,
      y_width => 48
    )
    port map (
      x => concat9_y_net_x3,
      y => slice_y_net
    );

  slice2: entity work.xlslice
    generic map (
      new_lsb => 0,
      new_msb => 47,
      x_width => 48,
      y_width => 48
    )
    port map (
      x => clock_op_net_x1,
      y => slice2_y_net
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/fdfs"

entity fdfs_entity_063070395a is
  port (
    arm0: in std_logic; 
    arm1: in std_logic; 
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    data: in std_logic_vector(123 downto 0); 
    dv: in std_logic; 
    index: in std_logic_vector(19 downto 0); 
    ld_time0: in std_logic_vector(47 downto 0); 
    ld_time1: in std_logic_vector(47 downto 0); 
    ld_val0: in std_logic_vector(78 downto 0); 
    ld_val1: in std_logic_vector(78 downto 0); 
    load_now: in std_logic; 
    mrst: in std_logic; 
    sync: in std_logic; 
    tvg_en: in std_logic; 
    window_start: in std_logic; 
    data_out: out std_logic_vector(123 downto 0); 
    dv_out: out std_logic; 
    fd_status0: out std_logic_vector(31 downto 0); 
    fd_status1: out std_logic_vector(31 downto 0); 
    sync_out: out std_logic
  );
end fdfs_entity_063070395a;

architecture structural of fdfs_entity_063070395a is
  signal ce_1_sg_x558: std_logic;
  signal clk_1_sg_x558: std_logic;
  signal clock_op_net_x1: std_logic_vector(47 downto 0);
  signal concat13_y_net_x1: std_logic_vector(31 downto 0);
  signal concat1_y_net_x4: std_logic_vector(78 downto 0);
  signal concat1_y_net_x5: std_logic_vector(31 downto 0);
  signal concat22_y_net_x3: std_logic_vector(78 downto 0);
  signal concat2_y_net_x0: std_logic_vector(30 downto 0);
  signal concat2_y_net_x3: std_logic_vector(47 downto 0);
  signal concat4_y_net_x0: std_logic_vector(30 downto 0);
  signal concat9_y_net_x4: std_logic_vector(47 downto 0);
  signal concat_y_net_x3: std_logic_vector(61 downto 0);
  signal concat_y_net_x4: std_logic_vector(61 downto 0);
  signal concatenate_y_net_x1: std_logic_vector(84 downto 0);
  signal concatenate_y_net_x2: std_logic_vector(83 downto 0);
  signal concatenate_y_net_x3: std_logic_vector(123 downto 0);
  signal constant1_op_net_x0: std_logic;
  signal constant53_op_net_x0: std_logic;
  signal convert1_dout_net: std_logic_vector(15 downto 0);
  signal convert2_dout_net: std_logic_vector(15 downto 0);
  signal convert4_dout_net: std_logic_vector(15 downto 0);
  signal convert4_dout_net_x2: std_logic_vector(18 downto 0);
  signal convert4_dout_net_x3: std_logic_vector(18 downto 0);
  signal convert5_dout_net: std_logic_vector(15 downto 0);
  signal count0_op_net_x0: std_logic_vector(7 downto 0);
  signal count0_op_net_x1: std_logic_vector(7 downto 0);
  signal count1_op_net_x0: std_logic_vector(7 downto 0);
  signal count1_op_net_x1: std_logic_vector(7 downto 0);
  signal delay11_q_net_x1: std_logic_vector(61 downto 0);
  signal delay11_q_net_x2: std_logic_vector(61 downto 0);
  signal delay13_q_net_x2: std_logic_vector(19 downto 0);
  signal delay13_q_net_x3: std_logic_vector(19 downto 0);
  signal delay14_q_net_x1: std_logic_vector(123 downto 0);
  signal delay15_q_net_x1: std_logic;
  signal delay15_q_net_x2: std_logic;
  signal delay16_q_net_x1: std_logic;
  signal delay1_q_net_x2: std_logic_vector(47 downto 0);
  signal delay20_q_net_x0: std_logic;
  signal delay21_q_net_x1: std_logic_vector(19 downto 0);
  signal delay22_q_net_x1: std_logic_vector(83 downto 0);
  signal delay24_q_net_x0: std_logic_vector(47 downto 0);
  signal delay2_q_net_x0: std_logic_vector(61 downto 0);
  signal delay6_q_net_x7: std_logic;
  signal delay7_q_net_x1: std_logic_vector(84 downto 0);
  signal delay7_q_net_x2: std_logic_vector(61 downto 0);
  signal delay9_q_net_x2: std_logic;
  signal delay_q_net_x2: std_logic;
  signal delay_q_net_x4: std_logic;
  signal delay_q_net_x5: std_logic;
  signal delay_q_net_x6: std_logic;
  signal edge_op_y_net_x2: std_logic;
  signal logical12_y_net_x1: std_logic;
  signal logical14_y_net_x11: std_logic;
  signal logical1_y_net_x1: std_logic;
  signal logical20_y_net_x1: std_logic;
  signal mux_y_net_x1: std_logic_vector(83 downto 0);
  signal mux_y_net_x2: std_logic_vector(30 downto 0);
  signal mux_y_net_x3: std_logic_vector(30 downto 0);
  signal mux_y_net_x4: std_logic_vector(61 downto 0);
  signal register5_q_net_x2: std_logic;
  signal register_q_net_x0: std_logic_vector(78 downto 0);
  signal register_q_net_x1: std_logic_vector(78 downto 0);
  signal reinterpret1_output_port_net_x0: std_logic_vector(61 downto 0);
  signal reinterpret1_output_port_net_x3: std_logic_vector(19 downto 0);
  signal reinterpret2_output_port_net_x2: std_logic_vector(61 downto 0);
  signal reinterpret4_output_port_net_x1: std_logic_vector(61 downto 0);
  signal slice11_y_net_x1: std_logic;
  signal slice13_y_net_x1: std_logic;
  signal slice15_y_net_x0: std_logic_vector(15 downto 0);
  signal slice16_y_net_x0: std_logic_vector(15 downto 0);
  signal slice17_y_net: std_logic_vector(15 downto 0);
  signal slice18_y_net: std_logic_vector(14 downto 0);
  signal slice19_y_net_x0: std_logic_vector(15 downto 0);
  signal slice1_y_net_x1: std_logic_vector(15 downto 0);
  signal slice1_y_net_x2: std_logic;
  signal slice2_y_net_x2: std_logic_vector(15 downto 0);
  signal slice2_y_net_x6: std_logic;
  signal slice3_y_net: std_logic_vector(15 downto 0);
  signal slice3_y_net_x4: std_logic;
  signal slice4_y_net: std_logic_vector(14 downto 0);
  signal slice5_y_net_x2: std_logic_vector(15 downto 0);
  signal slice5_y_net_x4: std_logic;
  signal slice_y_net_x1: std_logic;

begin
  slice13_y_net_x1 <= arm0;
  slice11_y_net_x1 <= arm1;
  ce_1_sg_x558 <= ce_1;
  clk_1_sg_x558 <= clk_1;
  delay14_q_net_x1 <= data;
  delay15_q_net_x2 <= dv;
  delay21_q_net_x1 <= index;
  concat9_y_net_x4 <= ld_time0;
  concat2_y_net_x3 <= ld_time1;
  concat22_y_net_x3 <= ld_val0;
  concat1_y_net_x4 <= ld_val1;
  delay6_q_net_x7 <= load_now;
  logical14_y_net_x11 <= mrst;
  delay16_q_net_x1 <= sync;
  register5_q_net_x2 <= tvg_en;
  edge_op_y_net_x2 <= window_start;
  data_out <= concatenate_y_net_x3;
  dv_out <= slice_y_net_x1;
  fd_status0 <= concat13_y_net_x1;
  fd_status1 <= concat1_y_net_x5;
  sync_out <= slice1_y_net_x2;

  bus_create1_74c8747f81: entity work.bus_create1_entity_74c8747f81
    port map (
      in1 => concat_y_net_x3,
      in2 => concat_y_net_x4,
      bus_out => concatenate_y_net_x3
    );

  bus_create2_86f2416e65: entity work.bus_create2_entity_86f2416e65
    port map (
      in1 => reinterpret2_output_port_net_x2,
      in2 => delay15_q_net_x2,
      in3 => edge_op_y_net_x2,
      in4 => delay21_q_net_x1,
      bus_out => concatenate_y_net_x2
    );

  bus_create_4569e4a2f8: entity work.bus_create_entity_4569e4a2f8
    port map (
      in1 => delay_q_net_x2,
      in2 => mux_y_net_x1,
      bus_out => concatenate_y_net_x1
    );

  concat1: entity work.concat_a369e00c6b
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      in0 => convert1_dout_net,
      in1 => convert2_dout_net,
      y => concat1_y_net_x5
    );

  concat13: entity work.concat_a369e00c6b
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      in0 => convert4_dout_net,
      in1 => convert5_dout_net,
      y => concat13_y_net_x1
    );

  concat2: entity work.concat_c588c5101d
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      in0 => slice4_y_net,
      in1 => slice3_y_net,
      y => concat2_y_net_x0
    );

  concat4: entity work.concat_c588c5101d
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      in0 => slice18_y_net,
      in1 => slice17_y_net,
      y => concat4_y_net_x0
    );

  constant1: entity work.constant_963ed6358a
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op(0) => constant1_op_net_x0
    );

  constant53: entity work.constant_963ed6358a
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op(0) => constant53_op_net_x0
    );

  convert1: entity work.xlconvert
    generic map (
      bool_conversion => 0,
      din_arith => 1,
      din_bin_pt => 0,
      din_width => 8,
      dout_arith => 1,
      dout_bin_pt => 0,
      dout_width => 16,
      latency => 0,
      overflow => xlWrap,
      quantization => xlTruncate
    )
    port map (
      ce => ce_1_sg_x558,
      clk => clk_1_sg_x558,
      clr => '0',
      din => count0_op_net_x1,
      en => "1",
      dout => convert1_dout_net
    );

  convert2: entity work.xlconvert
    generic map (
      bool_conversion => 0,
      din_arith => 1,
      din_bin_pt => 0,
      din_width => 8,
      dout_arith => 1,
      dout_bin_pt => 0,
      dout_width => 16,
      latency => 0,
      overflow => xlWrap,
      quantization => xlTruncate
    )
    port map (
      ce => ce_1_sg_x558,
      clk => clk_1_sg_x558,
      clr => '0',
      din => count1_op_net_x1,
      en => "1",
      dout => convert2_dout_net
    );

  convert4: entity work.xlconvert
    generic map (
      bool_conversion => 0,
      din_arith => 1,
      din_bin_pt => 0,
      din_width => 8,
      dout_arith => 1,
      dout_bin_pt => 0,
      dout_width => 16,
      latency => 0,
      overflow => xlWrap,
      quantization => xlTruncate
    )
    port map (
      ce => ce_1_sg_x558,
      clk => clk_1_sg_x558,
      clr => '0',
      din => count0_op_net_x0,
      en => "1",
      dout => convert4_dout_net
    );

  convert5: entity work.xlconvert
    generic map (
      bool_conversion => 0,
      din_arith => 1,
      din_bin_pt => 0,
      din_width => 8,
      dout_arith => 1,
      dout_bin_pt => 0,
      dout_width => 16,
      latency => 0,
      overflow => xlWrap,
      quantization => xlTruncate
    )
    port map (
      ce => ce_1_sg_x558,
      clk => clk_1_sg_x558,
      clr => '0',
      din => count1_op_net_x0,
      en => "1",
      dout => convert5_dout_net
    );

  delay2: entity work.xldelay
    generic map (
      latency => 4,
      reg_retiming => 0,
      reset => 0,
      width => 62
    )
    port map (
      ce => ce_1_sg_x558,
      clk => clk_1_sg_x558,
      d => reinterpret1_output_port_net_x0,
      en => '1',
      rst => '1',
      q => delay2_q_net_x0
    );

  delay20: entity work.xldelay
    generic map (
      latency => 4,
      reg_retiming => 0,
      reset => 0,
      width => 1
    )
    port map (
      ce => ce_1_sg_x558,
      clk => clk_1_sg_x558,
      d(0) => delay16_q_net_x1,
      en => '1',
      rst => '1',
      q(0) => delay20_q_net_x0
    );

  delay22: entity work.xldelay
    generic map (
      latency => 4,
      reg_retiming => 0,
      reset => 0,
      width => 84
    )
    port map (
      ce => ce_1_sg_x558,
      clk => clk_1_sg_x558,
      d => concatenate_y_net_x2,
      en => '1',
      rst => '1',
      q => delay22_q_net_x1
    );

  delay24: entity work.xldelay
    generic map (
      latency => 4,
      reg_retiming => 0,
      reset => 0,
      width => 48
    )
    port map (
      ce => ce_1_sg_x558,
      clk => clk_1_sg_x558,
      d => clock_op_net_x1,
      en => '1',
      rst => '1',
      q => delay24_q_net_x0
    );

  delay_gen1_4815715ea8: entity work.delay_gen1_entity_4815715ea8
    port map (
      ce_1 => ce_1_sg_x558,
      clk_1 => clk_1_sg_x558,
      d_dt_delay => slice1_y_net_x1,
      d_dt_phase => slice5_y_net_x2,
      delay => concat2_y_net_x0,
      den => slice3_y_net_x4,
      din => delay7_q_net_x2,
      idx_in => reinterpret1_output_port_net_x3,
      init => slice2_y_net_x6,
      invert_slope => constant1_op_net_x0,
      load => delay_q_net_x5,
      phase => slice2_y_net_x2,
      sync_in => slice5_y_net_x4,
      dout => delay11_q_net_x2,
      idx_out => delay13_q_net_x3,
      phase_out => convert4_dout_net_x3,
      slope_out => mux_y_net_x3
    );

  delay_gen_5337c180f8: entity work.delay_gen_entity_5337c180f8
    port map (
      ce_1 => ce_1_sg_x558,
      clk_1 => clk_1_sg_x558,
      d_dt_delay => slice15_y_net_x0,
      d_dt_phase => slice19_y_net_x0,
      delay => concat4_y_net_x0,
      den => slice3_y_net_x4,
      din => reinterpret4_output_port_net_x1,
      idx_in => reinterpret1_output_port_net_x3,
      init => slice2_y_net_x6,
      invert_slope => constant53_op_net_x0,
      load => delay_q_net_x4,
      phase => slice16_y_net_x0,
      sync_in => slice5_y_net_x4,
      dout => delay11_q_net_x1,
      dvalid => delay15_q_net_x1,
      idx_out => delay13_q_net_x2,
      phase_out => convert4_dout_net_x2,
      slope_out => mux_y_net_x2,
      sync_out => delay9_q_net_x2
    );

  expand_data_in_d5d71b9bb1: entity work.expand_data_in_entity_d5d71b9bb1
    port map (
      bus_in => delay14_q_net_x1,
      lsb_out1 => reinterpret1_output_port_net_x0,
      msb_out2 => reinterpret2_output_port_net_x2
    );

  expand_fd0_7384476f9f: entity work.expand_fd0_entity_7384476f9f
    port map (
      bus_in => delay7_q_net_x1,
      lsb_out1 => reinterpret1_output_port_net_x3,
      msb_out5 => slice5_y_net_x4,
      out2 => slice2_y_net_x6,
      out3 => slice3_y_net_x4,
      out4 => reinterpret4_output_port_net_x1
    );

  fd_fs1_17caded306: entity work.fd_fs1_entity_17caded306
    port map (
      a0 => convert4_dout_net_x3,
      a1 => mux_y_net_x3,
      ce_1 => ce_1_sg_x558,
      clk_1 => clk_1_sg_x558,
      data => delay11_q_net_x2,
      index => delay13_q_net_x3,
      data_out => concat_y_net_x4
    );

  fd_fs_fa00e52681: entity work.fd_fs_entity_fa00e52681
    port map (
      a0 => convert4_dout_net_x2,
      a1 => mux_y_net_x2,
      ce_1 => ce_1_sg_x558,
      clk_1 => clk_1_sg_x558,
      data => delay11_q_net_x1,
      index => delay13_q_net_x2,
      sync => delay9_q_net_x2,
      valid => delay15_q_net_x1,
      data_out => concat_y_net_x3,
      sync_out => slice1_y_net_x2,
      valid_out => slice_y_net_x1
    );

  fd_fs_tvg0_3f83eaa054: entity work.fd_fs_tvg0_entity_3f83eaa054
    port map (
      ce_1 => ce_1_sg_x558,
      clk_1 => clk_1_sg_x558,
      din0 => delay22_q_net_x1,
      pulse_en => delay_q_net_x6,
      sync => delay20_q_net_x0,
      time_x0 => delay24_q_net_x0,
      use_tvg => register5_q_net_x2,
      dout0 => mux_y_net_x1,
      sync_out => delay_q_net_x2,
      time_o => delay1_q_net_x2
    );

  fd_fs_tvg1_864661c217: entity work.fd_fs_tvg1_entity_864661c217
    port map (
      ce_1 => ce_1_sg_x558,
      clk_1 => clk_1_sg_x558,
      din0 => delay2_q_net_x0,
      use_tvg => register5_q_net_x2,
      dout0 => mux_y_net_x4
    );

  fd_local_time_fd1d59e087: entity work.fd_local_time_entity_fd1d59e087
    port map (
      ce_1 => ce_1_sg_x558,
      clk_1 => clk_1_sg_x558,
      reset => logical14_y_net_x11,
      sync => delay16_q_net_x1,
      time_x0 => clock_op_net_x1
    );

  fd_tr0_ff3cd11b73: entity work.fd_tr0_entity_ff3cd11b73
    port map (
      arm => logical12_y_net_x1,
      ce_1 => ce_1_sg_x558,
      clk_1 => clk_1_sg_x558,
      current_time => delay1_q_net_x2,
      din => concatenate_y_net_x1,
      load_now => delay6_q_net_x7,
      load_time => concat9_y_net_x4,
      load_value => concat22_y_net_x3,
      rst => logical14_y_net_x11,
      arm_count => count0_op_net_x0,
      dout => delay7_q_net_x1,
      enable => delay_q_net_x4,
      ld_count => count1_op_net_x0,
      value => register_q_net_x0
    );

  fd_tr1_b3b52905a2: entity work.fd_tr1_entity_b3b52905a2
    port map (
      arm => logical1_y_net_x1,
      ce_1 => ce_1_sg_x558,
      clk_1 => clk_1_sg_x558,
      current_time => delay1_q_net_x2,
      din => mux_y_net_x4,
      load_now => delay6_q_net_x7,
      load_time => concat2_y_net_x3,
      load_value => concat1_y_net_x4,
      rst => logical14_y_net_x11,
      arm_count => count0_op_net_x1,
      dout => delay7_q_net_x2,
      enable => delay_q_net_x5,
      ld_count => count1_op_net_x1,
      value => register_q_net_x1
    );

  logical1: entity work.logical_aacf6e1b0e
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0(0) => delay6_q_net_x7,
      d1(0) => slice11_y_net_x1,
      y(0) => logical1_y_net_x1
    );

  logical12: entity work.logical_aacf6e1b0e
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0(0) => delay6_q_net_x7,
      d1(0) => slice13_y_net_x1,
      y(0) => logical12_y_net_x1
    );

  logical20: entity work.logical_aacf6e1b0e
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0(0) => delay6_q_net_x7,
      d1(0) => slice13_y_net_x1,
      y(0) => logical20_y_net_x1
    );

  slice1: entity work.xlslice
    generic map (
      new_lsb => 0,
      new_msb => 15,
      x_width => 79,
      y_width => 16
    )
    port map (
      x => register_q_net_x1,
      y => slice1_y_net_x1
    );

  slice15: entity work.xlslice
    generic map (
      new_lsb => 0,
      new_msb => 15,
      x_width => 79,
      y_width => 16
    )
    port map (
      x => register_q_net_x0,
      y => slice15_y_net_x0
    );

  slice16: entity work.xlslice
    generic map (
      new_lsb => 63,
      new_msb => 78,
      x_width => 79,
      y_width => 16
    )
    port map (
      x => register_q_net_x0,
      y => slice16_y_net_x0
    );

  slice17: entity work.xlslice
    generic map (
      new_lsb => 16,
      new_msb => 31,
      x_width => 79,
      y_width => 16
    )
    port map (
      x => register_q_net_x0,
      y => slice17_y_net
    );

  slice18: entity work.xlslice
    generic map (
      new_lsb => 32,
      new_msb => 46,
      x_width => 79,
      y_width => 15
    )
    port map (
      x => register_q_net_x0,
      y => slice18_y_net
    );

  slice19: entity work.xlslice
    generic map (
      new_lsb => 47,
      new_msb => 62,
      x_width => 79,
      y_width => 16
    )
    port map (
      x => register_q_net_x0,
      y => slice19_y_net_x0
    );

  slice2: entity work.xlslice
    generic map (
      new_lsb => 63,
      new_msb => 78,
      x_width => 79,
      y_width => 16
    )
    port map (
      x => register_q_net_x1,
      y => slice2_y_net_x2
    );

  slice3: entity work.xlslice
    generic map (
      new_lsb => 16,
      new_msb => 31,
      x_width => 79,
      y_width => 16
    )
    port map (
      x => register_q_net_x1,
      y => slice3_y_net
    );

  slice4: entity work.xlslice
    generic map (
      new_lsb => 32,
      new_msb => 46,
      x_width => 79,
      y_width => 15
    )
    port map (
      x => register_q_net_x1,
      y => slice4_y_net
    );

  slice5: entity work.xlslice
    generic map (
      new_lsb => 47,
      new_msb => 62,
      x_width => 79,
      y_width => 16
    )
    port map (
      x => register_q_net_x1,
      y => slice5_y_net_x2
    );

  tvg_tr_1f329b553b: entity work.tvg_tr_entity_1f329b553b
    port map (
      arm => logical20_y_net_x1,
      ce_1 => ce_1_sg_x558,
      clk_1 => clk_1_sg_x558,
      current_time => clock_op_net_x1,
      load_now => delay6_q_net_x7,
      load_time => concat9_y_net_x4,
      rst => logical14_y_net_x11,
      enable => delay_q_net_x6
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/fine/buffer/armed_sync"

entity armed_sync_entity_c4620211ad is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    mrst: in std_logic; 
    sync: in std_logic; 
    armed: out std_logic; 
    armed_sync: out std_logic
  );
end armed_sync_entity_c4620211ad;

architecture structural of armed_sync_entity_c4620211ad is
  signal a_s_x0: std_logic;
  signal ce_1_sg_x559: std_logic;
  signal clk_1_sg_x559: std_logic;
  signal delay22_q_net_x0: std_logic;
  signal enabled_sync: std_logic;
  signal logical14_y_net_x12: std_logic;
  signal logical2_y_net_x0: std_logic;
  signal mrst_armed: std_logic;
  signal output_x0: std_logic;

begin
  ce_1_sg_x559 <= ce_1;
  clk_1_sg_x559 <= clk_1;
  logical14_y_net_x12 <= mrst;
  delay22_q_net_x0 <= sync;
  armed <= a_s_x0;
  armed_sync <= logical2_y_net_x0;

  logical: entity work.logical_80f90b97d0
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0(0) => delay22_q_net_x0,
      d1(0) => mrst_armed,
      y(0) => enabled_sync
    );

  logical1: entity work.logical_aacf6e1b0e
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0(0) => a_s_x0,
      d1(0) => enabled_sync,
      y(0) => output_x0
    );

  logical2: entity work.logical_80f90b97d0
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0(0) => delay22_q_net_x0,
      d1(0) => output_x0,
      y(0) => logical2_y_net_x0
    );

  register1: entity work.xlregister
    generic map (
      d_width => 1,
      init_value => b"0"
    )
    port map (
      ce => ce_1_sg_x559,
      clk => clk_1_sg_x559,
      d(0) => enabled_sync,
      en(0) => enabled_sync,
      rst(0) => logical14_y_net_x12,
      q(0) => a_s_x0
    );

  register_x0: entity work.xlregister
    generic map (
      d_width => 1,
      init_value => b"0"
    )
    port map (
      ce => ce_1_sg_x559,
      clk => clk_1_sg_x559,
      d(0) => logical14_y_net_x12,
      en(0) => logical14_y_net_x12,
      rst(0) => delay22_q_net_x0,
      q(0) => mrst_armed
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/fine/buffer"

entity buffer_entity_f07faed274 is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    din: in std_logic_vector(71 downto 0); 
    mrst: in std_logic; 
    sync: in std_logic; 
    target_x0: in std_logic_vector(9 downto 0); 
    data: out std_logic_vector(71 downto 0); 
    dvalid: out std_logic; 
    sync_out: out std_logic
  );
end buffer_entity_f07faed274;

architecture structural of buffer_entity_f07faed274 is
  signal a_s_x0: std_logic;
  signal ce_1_sg_x562: std_logic;
  signal clk_1_sg_x562: std_logic;
  signal coarse_chans: std_logic_vector(6 downto 0);
  signal constant1_op_net: std_logic_vector(11 downto 0);
  signal constant3_op_net: std_logic_vector(11 downto 0);
  signal constant4_op_net: std_logic_vector(71 downto 0);
  signal constant5_op_net: std_logic;
  signal constant7_op_net: std_logic;
  signal constant_op_net: std_logic;
  signal datao_x0: std_logic_vector(71 downto 0);
  signal datav_x0: std_logic;
  signal delay22_q_net_x1: std_logic;
  signal delay24_q_net_x0: std_logic_vector(71 downto 0);
  signal delay3_q_net: std_logic;
  signal delay4_q_net: std_logic;
  signal edge_op_y_net_x0: std_logic;
  signal edge_op_y_net_x2: std_logic;
  signal logical14_y_net_x13: std_logic;
  signal logical2_y_net_x0: std_logic;
  signal re_addr: std_logic_vector(11 downto 0);
  signal re_en: std_logic;
  signal re_trig: std_logic;
  signal register1_q_net_x0: std_logic;
  signal relational1_op_net: std_logic;
  signal relational2_op_net_x0: std_logic;
  signal relational_op_net: std_logic;
  signal slice21_y_net_x1: std_logic_vector(9 downto 0);
  signal target: std_logic_vector(15 downto 0);
  signal target_count: std_logic_vector(14 downto 0);
  signal wr_addr: std_logic_vector(11 downto 0);
  signal wr_enable: std_logic;

begin
  ce_1_sg_x562 <= ce_1;
  clk_1_sg_x562 <= clk_1;
  delay24_q_net_x0 <= din;
  logical14_y_net_x13 <= mrst;
  delay22_q_net_x1 <= sync;
  slice21_y_net_x1 <= target_x0;
  data <= datao_x0;
  dvalid <= datav_x0;
  sync_out <= edge_op_y_net_x2;

  armed_sync_c4620211ad: entity work.armed_sync_entity_c4620211ad
    port map (
      ce_1 => ce_1_sg_x562,
      clk_1 => clk_1_sg_x562,
      mrst => logical14_y_net_x13,
      sync => delay22_q_net_x1,
      armed => a_s_x0,
      armed_sync => logical2_y_net_x0
    );

  buffer_x0: entity work.xldpram_c09f12_01
    generic map (
      c_address_width_a => 12,
      c_address_width_b => 12,
      c_width_a => 72,
      c_width_b => 72,
      core_name0 => "bmg_72_3bc6d5a32af9b138",
      latency => 1
    )
    port map (
      a_ce => ce_1_sg_x562,
      a_clk => clk_1_sg_x562,
      addra => wr_addr,
      addrb => re_addr,
      b_ce => ce_1_sg_x562,
      b_clk => clk_1_sg_x562,
      dina => delay24_q_net_x0,
      dinb => constant4_op_net,
      ena => "1",
      enb => "1",
      rsta => "0",
      rstb => "0",
      wea(0) => wr_enable,
      web(0) => constant5_op_net,
      doutb => datao_x0
    );

  coarse_chans_x0: entity work.counter_e63924e4e7
    port map (
      ce => ce_1_sg_x562,
      clk => clk_1_sg_x562,
      clr => '0',
      rst(0) => logical2_y_net_x0,
      op => coarse_chans
    );

  constant1: entity work.constant_9b805894ff
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op => constant1_op_net
    );

  constant3: entity work.constant_6d93c28b86
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op => constant3_op_net
    );

  constant4: entity work.constant_68d110842c
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op => constant4_op_net
    );

  constant5: entity work.constant_963ed6358a
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op(0) => constant5_op_net
    );

  constant7: entity work.constant_6293007044
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op(0) => constant7_op_net
    );

  constant_x0: entity work.constant_6293007044
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op(0) => constant_op_net
    );

  convert2: entity work.xlconvert
    generic map (
      bool_conversion => 0,
      din_arith => 1,
      din_bin_pt => 0,
      din_width => 10,
      dout_arith => 1,
      dout_bin_pt => 0,
      dout_width => 16,
      latency => 0,
      overflow => xlWrap,
      quantization => xlTruncate
    )
    port map (
      ce => ce_1_sg_x562,
      clk => clk_1_sg_x562,
      clr => '0',
      din => slice21_y_net_x1,
      en => "1",
      dout => target
    );

  delay2: entity work.delay_0341f7be44
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d(0) => relational_op_net,
      q(0) => wr_enable
    );

  delay3: entity work.delay_9f02caa990
    port map (
      ce => ce_1_sg_x562,
      clk => clk_1_sg_x562,
      clr => '0',
      d(0) => re_en,
      q(0) => delay3_q_net
    );

  delay4: entity work.delay_9f02caa990
    port map (
      ce => ce_1_sg_x562,
      clk => clk_1_sg_x562,
      clr => '0',
      d(0) => logical2_y_net_x0,
      q(0) => delay4_q_net
    );

  edge_detect1_a2d4d0fa11: entity work.edge_detect_entity_cb656284f4
    port map (
      ce_1 => ce_1_sg_x562,
      clk_1 => clk_1_sg_x562,
      in_x0 => relational2_op_net_x0,
      out_x0 => edge_op_y_net_x0
    );

  edge_detect2_11b387d781: entity work.edge_detect_entity_cb656284f4
    port map (
      ce_1 => ce_1_sg_x562,
      clk_1 => clk_1_sg_x562,
      in_x0 => register1_q_net_x0,
      out_x0 => edge_op_y_net_x2
    );

  logical1: entity work.logical_80f90b97d0
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0(0) => delay3_q_net,
      d1(0) => a_s_x0,
      y(0) => datav_x0
    );

  logical4: entity work.logical_80f90b97d0
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0(0) => edge_op_y_net_x0,
      d1(0) => a_s_x0,
      y(0) => re_trig
    );

  re_counter: entity work.counter_779ff41485
    port map (
      ce => ce_1_sg_x562,
      clk => clk_1_sg_x562,
      clr => '0',
      en(0) => re_en,
      rst(0) => re_trig,
      op => re_addr
    );

  register1: entity work.xlregister
    generic map (
      d_width => 1,
      init_value => b"0"
    )
    port map (
      ce => ce_1_sg_x562,
      clk => clk_1_sg_x562,
      d(0) => constant7_op_net,
      en(0) => re_trig,
      rst(0) => logical2_y_net_x0,
      q(0) => register1_q_net_x0
    );

  register_x0: entity work.xlregister
    generic map (
      d_width => 1,
      init_value => b"0"
    )
    port map (
      ce => ce_1_sg_x562,
      clk => clk_1_sg_x562,
      d(0) => constant_op_net,
      en(0) => re_trig,
      rst(0) => relational1_op_net,
      q(0) => re_en
    );

  relational: entity work.relational_a0c795533c
    port map (
      a => target_count,
      b => coarse_chans,
      ce => '0',
      clk => '0',
      clr => '0',
      op(0) => relational_op_net
    );

  relational1: entity work.relational_36ed515732
    port map (
      a => constant3_op_net,
      b => re_addr,
      ce => ce_1_sg_x562,
      clk => clk_1_sg_x562,
      clr => '0',
      op(0) => relational1_op_net
    );

  relational2: entity work.relational_36ed515732
    port map (
      a => wr_addr,
      b => constant1_op_net,
      ce => ce_1_sg_x562,
      clk => clk_1_sg_x562,
      clr => '0',
      op(0) => relational2_op_net_x0
    );

  slice2: entity work.xlslice
    generic map (
      new_lsb => 1,
      new_msb => 15,
      x_width => 16,
      y_width => 15
    )
    port map (
      x => target,
      y => target_count
    );

  wr_addr_x0: entity work.counter_779ff41485
    port map (
      ce => ce_1_sg_x562,
      clk => clk_1_sg_x562,
      clr => '0',
      en(0) => wr_enable,
      rst(0) => delay4_q_net,
      op => wr_addr
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/fine/bus_expand1"

entity bus_expand1_entity_70a99f462b is
  port (
    bus_in: in std_logic_vector(71 downto 0); 
    lsb_out1: out std_logic_vector(35 downto 0); 
    msb_out2: out std_logic_vector(35 downto 0)
  );
end bus_expand1_entity_70a99f462b;

architecture structural of bus_expand1_entity_70a99f462b is
  signal datao_x2: std_logic_vector(71 downto 0);
  signal reinterpret1_output_port_net_x0: std_logic_vector(35 downto 0);
  signal reinterpret2_output_port_net_x0: std_logic_vector(35 downto 0);
  signal slice1_y_net: std_logic_vector(35 downto 0);
  signal slice2_y_net: std_logic_vector(35 downto 0);

begin
  datao_x2 <= bus_in;
  lsb_out1 <= reinterpret1_output_port_net_x0;
  msb_out2 <= reinterpret2_output_port_net_x0;

  reinterpret1: entity work.reinterpret_86b044698f
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => slice1_y_net,
      output_port => reinterpret1_output_port_net_x0
    );

  reinterpret2: entity work.reinterpret_86b044698f
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => slice2_y_net,
      output_port => reinterpret2_output_port_net_x0
    );

  slice1: entity work.xlslice
    generic map (
      new_lsb => 0,
      new_msb => 35,
      x_width => 72,
      y_width => 36
    )
    port map (
      x => datao_x2,
      y => slice1_y_net
    );

  slice2: entity work.xlslice
    generic map (
      new_lsb => 36,
      new_msb => 71,
      x_width => 72,
      y_width => 36
    )
    port map (
      x => datao_x2,
      y => slice2_y_net
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/fine/indexgen"

entity indexgen_entity_9d60342707 is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    coarse_chan: in std_logic_vector(9 downto 0); 
    xk_index: in std_logic_vector(11 downto 0); 
    index_x0: out std_logic_vector(19 downto 0); 
    offset_x0: out std_logic_vector(20 downto 0)
  );
end indexgen_entity_9d60342707;

architecture structural of indexgen_entity_9d60342707 is
  signal addsub2_s_net: std_logic_vector(22 downto 0);
  signal ce_1_sg_x563: std_logic;
  signal clk_1_sg_x563: std_logic;
  signal constant1_op_net: std_logic_vector(20 downto 0);
  signal constant2_op_net: std_logic_vector(11 downto 0);
  signal constant3_op_net: std_logic_vector(19 downto 0);
  signal convert1_dout_net: std_logic_vector(19 downto 0);
  signal convert2_dout_net: std_logic_vector(19 downto 0);
  signal convert3_dout_net: std_logic_vector(7 downto 0);
  signal delay1_q_net_x0: std_logic_vector(11 downto 0);
  signal delay4_q_net_x0: std_logic_vector(20 downto 0);
  signal index: std_logic_vector(20 downto 0);
  signal mux_y_net_x0: std_logic_vector(19 downto 0);
  signal offset: std_logic_vector(20 downto 0);
  signal relational_op_net: std_logic;
  signal slice21_y_net_x2: std_logic_vector(9 downto 0);
  signal start: std_logic_vector(19 downto 0);
  signal tmp: std_logic_vector(21 downto 0);
  signal tmp2: std_logic_vector(20 downto 0);
  signal tmp3: std_logic_vector(21 downto 0);

begin
  ce_1_sg_x563 <= ce_1;
  clk_1_sg_x563 <= clk_1;
  slice21_y_net_x2 <= coarse_chan;
  delay1_q_net_x0 <= xk_index;
  index_x0 <= mux_y_net_x0;
  offset_x0 <= delay4_q_net_x0;

  addsub: entity work.xladdsub_c09f12_01
    generic map (
      a_arith => xlUnsigned,
      a_bin_pt => 0,
      a_width => 20,
      b_arith => xlSigned,
      b_bin_pt => 0,
      b_width => 21,
      c_has_c_out => 0,
      c_latency => 0,
      c_output_width => 22,
      core_name0 => "addsb_11_0_607fe0700100c715",
      extra_registers => 0,
      full_s_arith => 2,
      full_s_width => 22,
      latency => 0,
      overflow => 1,
      quantization => 1,
      s_arith => xlSigned,
      s_bin_pt => 0,
      s_width => 22
    )
    port map (
      a => start,
      b => offset,
      ce => ce_1_sg_x563,
      clk => clk_1_sg_x563,
      clr => '0',
      en => "1",
      s => tmp
    );

  addsub1: entity work.xladdsub_c09f12_01
    generic map (
      a_arith => xlUnsigned,
      a_bin_pt => 0,
      a_width => 12,
      b_arith => xlSigned,
      b_bin_pt => 0,
      b_width => 21,
      c_has_c_out => 0,
      c_latency => 0,
      c_output_width => 22,
      core_name0 => "addsb_11_0_607fe0700100c715",
      extra_registers => 0,
      full_s_arith => 2,
      full_s_width => 22,
      latency => 0,
      overflow => 1,
      quantization => 1,
      s_arith => xlSigned,
      s_bin_pt => 0,
      s_width => 22
    )
    port map (
      a => delay1_q_net_x0,
      b => tmp2,
      ce => ce_1_sg_x563,
      clk => clk_1_sg_x563,
      clr => '0',
      en => "1",
      s => tmp3
    );

  addsub2: entity work.xladdsub_c09f12_01
    generic map (
      a_arith => xlSigned,
      a_bin_pt => 0,
      a_width => 21,
      b_arith => xlUnsigned,
      b_bin_pt => 0,
      b_width => 21,
      c_has_c_out => 0,
      c_latency => 0,
      c_output_width => 23,
      core_name0 => "addsb_11_0_cdd18bba176b5e77",
      extra_registers => 0,
      full_s_arith => 2,
      full_s_width => 23,
      latency => 0,
      overflow => 1,
      quantization => 1,
      s_arith => xlSigned,
      s_bin_pt => 0,
      s_width => 23
    )
    port map (
      a => index,
      b => constant1_op_net,
      ce => ce_1_sg_x563,
      clk => clk_1_sg_x563,
      clr => '0',
      en => "1",
      s => addsub2_s_net
    );

  concat1: entity work.concat_db62c09dea
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      in0 => convert3_dout_net,
      in1 => constant2_op_net,
      y => start
    );

  constant1: entity work.constant_5df6a9ace6
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op => constant1_op_net
    );

  constant2: entity work.constant_fd28b32bf8
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op => constant2_op_net
    );

  constant3: entity work.constant_ac675e5b18
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op => constant3_op_net
    );

  constant5: entity work.constant_03e4098635
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op => offset
    );

  convert1: entity work.xlconvert
    generic map (
      bool_conversion => 0,
      din_arith => 2,
      din_bin_pt => 0,
      din_width => 23,
      dout_arith => 2,
      dout_bin_pt => 0,
      dout_width => 20,
      latency => 0,
      overflow => xlWrap,
      quantization => xlTruncate
    )
    port map (
      ce => ce_1_sg_x563,
      clk => clk_1_sg_x563,
      clr => '0',
      din => addsub2_s_net,
      en => "1",
      dout => convert1_dout_net
    );

  convert2: entity work.xlconvert
    generic map (
      bool_conversion => 0,
      din_arith => 2,
      din_bin_pt => 0,
      din_width => 21,
      dout_arith => 2,
      dout_bin_pt => 0,
      dout_width => 20,
      latency => 0,
      overflow => xlWrap,
      quantization => xlTruncate
    )
    port map (
      ce => ce_1_sg_x563,
      clk => clk_1_sg_x563,
      clr => '0',
      din => index,
      en => "1",
      dout => convert2_dout_net
    );

  convert3: entity work.xlconvert
    generic map (
      bool_conversion => 0,
      din_arith => 1,
      din_bin_pt => 0,
      din_width => 10,
      dout_arith => 1,
      dout_bin_pt => 0,
      dout_width => 8,
      latency => 0,
      overflow => xlWrap,
      quantization => xlTruncate
    )
    port map (
      ce => ce_1_sg_x563,
      clk => clk_1_sg_x563,
      clr => '0',
      din => slice21_y_net_x2,
      en => "1",
      dout => convert3_dout_net
    );

  convert4: entity work.xlconvert
    generic map (
      bool_conversion => 0,
      din_arith => 2,
      din_bin_pt => 0,
      din_width => 22,
      dout_arith => 2,
      dout_bin_pt => 0,
      dout_width => 21,
      latency => 0,
      overflow => xlWrap,
      quantization => xlTruncate
    )
    port map (
      ce => ce_1_sg_x563,
      clk => clk_1_sg_x563,
      clr => '0',
      din => tmp,
      en => "1",
      dout => tmp2
    );

  convert5: entity work.xlconvert
    generic map (
      bool_conversion => 0,
      din_arith => 2,
      din_bin_pt => 0,
      din_width => 22,
      dout_arith => 2,
      dout_bin_pt => 0,
      dout_width => 21,
      latency => 0,
      overflow => xlWrap,
      quantization => xlTruncate
    )
    port map (
      ce => ce_1_sg_x563,
      clk => clk_1_sg_x563,
      clr => '0',
      din => tmp3,
      en => "1",
      dout => index
    );

  delay4: entity work.delay_2dc2e1c046
    port map (
      ce => ce_1_sg_x563,
      clk => clk_1_sg_x563,
      clr => '0',
      d => tmp2,
      q => delay4_q_net_x0
    );

  mux: entity work.mux_5b0d4156a2
    port map (
      ce => ce_1_sg_x563,
      clk => clk_1_sg_x563,
      clr => '0',
      d0 => convert2_dout_net,
      d1 => convert1_dout_net,
      sel(0) => relational_op_net,
      y => mux_y_net_x0
    );

  relational: entity work.relational_72dd42448d
    port map (
      a => index,
      b => constant3_op_net,
      ce => '0',
      clk => '0',
      clr => '0',
      op(0) => relational_op_net
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/fine/pfb_fir_async1/pol1_in1_coeffs"

entity pol1_in1_coeffs_entity_bc8c92e227 is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    din: in std_logic_vector(35 downto 0); 
    sync: in std_logic; 
    coeff: out std_logic_vector(15 downto 0); 
    dout: out std_logic_vector(35 downto 0); 
    sync_out: out std_logic
  );
end pol1_in1_coeffs_entity_bc8c92e227;

architecture structural of pol1_in1_coeffs_entity_bc8c92e227 is
  signal ce_1_sg_x564: std_logic;
  signal clk_1_sg_x564: std_logic;
  signal concat_y_net: std_logic_vector(15 downto 0);
  signal counter_op_net: std_logic_vector(10 downto 0);
  signal delay1_q_net_x0: std_logic_vector(35 downto 0);
  signal delay_q_net_x0: std_logic;
  signal edge_op_y_net_x4: std_logic;
  signal fan_delay1_q_net: std_logic_vector(10 downto 0);
  signal fan_delay2_q_net: std_logic_vector(10 downto 0);
  signal register_q_net_x0: std_logic_vector(15 downto 0);
  signal reinterpret1_output_port_net: std_logic_vector(7 downto 0);
  signal reinterpret2_output_port_net: std_logic_vector(7 downto 0);
  signal reinterpret2_output_port_net_x1: std_logic_vector(35 downto 0);
  signal rom1_data_net: std_logic_vector(7 downto 0);
  signal rom2_data_net: std_logic_vector(7 downto 0);

begin
  ce_1_sg_x564 <= ce_1;
  clk_1_sg_x564 <= clk_1;
  reinterpret2_output_port_net_x1 <= din;
  edge_op_y_net_x4 <= sync;
  coeff <= register_q_net_x0;
  dout <= delay1_q_net_x0;
  sync_out <= delay_q_net_x0;

  concat: entity work.concat_8e53793314
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      in0 => reinterpret1_output_port_net,
      in1 => reinterpret2_output_port_net,
      y => concat_y_net
    );

  counter: entity work.xlcounter_free_c09f12_01
    generic map (
      core_name0 => "cntr_11_0_99cfda0476972b76",
      op_arith => xlUnsigned,
      op_width => 11
    )
    port map (
      ce => ce_1_sg_x564,
      clk => clk_1_sg_x564,
      clr => '0',
      en => "1",
      rst(0) => edge_op_y_net_x4,
      op => counter_op_net
    );

  delay: entity work.xldelay
    generic map (
      latency => 5,
      reg_retiming => 0,
      reset => 0,
      width => 1
    )
    port map (
      ce => ce_1_sg_x564,
      clk => clk_1_sg_x564,
      d(0) => edge_op_y_net_x4,
      en => '1',
      rst => '1',
      q(0) => delay_q_net_x0
    );

  delay1: entity work.xldelay
    generic map (
      latency => 5,
      reg_retiming => 0,
      reset => 0,
      width => 36
    )
    port map (
      ce => ce_1_sg_x564,
      clk => clk_1_sg_x564,
      d => reinterpret2_output_port_net_x1,
      en => '1',
      rst => '1',
      q => delay1_q_net_x0
    );

  fan_delay1: entity work.xldelay
    generic map (
      latency => 1,
      reg_retiming => 0,
      reset => 0,
      width => 11
    )
    port map (
      ce => ce_1_sg_x564,
      clk => clk_1_sg_x564,
      d => counter_op_net,
      en => '1',
      rst => '1',
      q => fan_delay1_q_net
    );

  fan_delay2: entity work.xldelay
    generic map (
      latency => 1,
      reg_retiming => 0,
      reset => 0,
      width => 11
    )
    port map (
      ce => ce_1_sg_x564,
      clk => clk_1_sg_x564,
      d => counter_op_net,
      en => '1',
      rst => '1',
      q => fan_delay2_q_net
    );

  register_x0: entity work.xlregister
    generic map (
      d_width => 16,
      init_value => b"0000000000000000"
    )
    port map (
      ce => ce_1_sg_x564,
      clk => clk_1_sg_x564,
      d => concat_y_net,
      en => "1",
      rst => "0",
      q => register_q_net_x0
    );

  reinterpret1: entity work.reinterpret_d51df7ac30
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => rom1_data_net,
      output_port => reinterpret1_output_port_net
    );

  reinterpret2: entity work.reinterpret_d51df7ac30
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => rom2_data_net,
      output_port => reinterpret2_output_port_net
    );

  rom1: entity work.xlsprom_c09f12_01
    generic map (
      c_address_width => 11,
      c_width => 8,
      core_name0 => "bmg_72_804e79c102c84f5c",
      latency => 2
    )
    port map (
      addr => fan_delay1_q_net,
      ce => ce_1_sg_x564,
      clk => clk_1_sg_x564,
      en => "1",
      rst => "0",
      data => rom1_data_net
    );

  rom2: entity work.xlsprom_c09f12_01
    generic map (
      c_address_width => 11,
      c_width => 8,
      core_name0 => "bmg_72_043bb11b7d009cca",
      latency => 2
    )
    port map (
      addr => fan_delay2_q_net,
      ce => ce_1_sg_x564,
      clk => clk_1_sg_x564,
      en => "1",
      rst => "0",
      data => rom2_data_net
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/fine/pfb_fir_async1/pol1_in1_last_tap/pfb_add_tree_async/adder_tree1"

entity adder_tree1_entity_4b3dc0964f is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    din1: in std_logic_vector(15 downto 0); 
    din2: in std_logic_vector(15 downto 0); 
    sync: in std_logic; 
    dout: out std_logic_vector(15 downto 0); 
    sync_out: out std_logic
  );
end adder_tree1_entity_4b3dc0964f;

architecture structural of adder_tree1_entity_4b3dc0964f is
  signal addr1_s_net_x0: std_logic_vector(15 downto 0);
  signal ce_1_sg_x565: std_logic;
  signal clk_1_sg_x565: std_logic;
  signal delay_q_net_x0: std_logic;
  signal reint0_1_output_port_net_x0: std_logic_vector(15 downto 0);
  signal reint1_1_output_port_net_x0: std_logic_vector(15 downto 0);
  signal sync_delay_q_net_x0: std_logic;

begin
  ce_1_sg_x565 <= ce_1;
  clk_1_sg_x565 <= clk_1;
  reint0_1_output_port_net_x0 <= din1;
  reint1_1_output_port_net_x0 <= din2;
  delay_q_net_x0 <= sync;
  dout <= addr1_s_net_x0;
  sync_out <= sync_delay_q_net_x0;

  addr1: entity work.xladdsub_c09f12_01
    generic map (
      a_arith => xlSigned,
      a_bin_pt => 14,
      a_width => 16,
      b_arith => xlSigned,
      b_bin_pt => 14,
      b_width => 16,
      c_has_c_out => 0,
      c_latency => 1,
      c_output_width => 17,
      core_name0 => "addsb_11_0_0b9b6e1cbccbb2be",
      extra_registers => 1,
      full_s_arith => 2,
      full_s_width => 17,
      latency => 2,
      overflow => 1,
      quantization => 1,
      s_arith => xlSigned,
      s_bin_pt => 14,
      s_width => 16
    )
    port map (
      a => reint0_1_output_port_net_x0,
      b => reint1_1_output_port_net_x0,
      ce => ce_1_sg_x565,
      clk => clk_1_sg_x565,
      clr => '0',
      en => "1",
      s => addr1_s_net_x0
    );

  sync_delay: entity work.delay_e18fb31a3d
    port map (
      ce => ce_1_sg_x565,
      clk => clk_1_sg_x565,
      clr => '0',
      d(0) => delay_q_net_x0,
      q(0) => sync_delay_q_net_x0
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/fine/pfb_fir_async1/pol1_in1_last_tap/pfb_add_tree_async/adder_tree2"

entity adder_tree2_entity_bfdc0b6b4c is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    din1: in std_logic_vector(15 downto 0); 
    din2: in std_logic_vector(15 downto 0); 
    dout: out std_logic_vector(15 downto 0)
  );
end adder_tree2_entity_bfdc0b6b4c;

architecture structural of adder_tree2_entity_bfdc0b6b4c is
  signal addr1_s_net_x0: std_logic_vector(15 downto 0);
  signal ce_1_sg_x566: std_logic;
  signal clk_1_sg_x566: std_logic;
  signal reint0_2_output_port_net_x0: std_logic_vector(15 downto 0);
  signal reint1_2_output_port_net_x0: std_logic_vector(15 downto 0);

begin
  ce_1_sg_x566 <= ce_1;
  clk_1_sg_x566 <= clk_1;
  reint0_2_output_port_net_x0 <= din1;
  reint1_2_output_port_net_x0 <= din2;
  dout <= addr1_s_net_x0;

  addr1: entity work.xladdsub_c09f12_01
    generic map (
      a_arith => xlSigned,
      a_bin_pt => 14,
      a_width => 16,
      b_arith => xlSigned,
      b_bin_pt => 14,
      b_width => 16,
      c_has_c_out => 0,
      c_latency => 1,
      c_output_width => 17,
      core_name0 => "addsb_11_0_0b9b6e1cbccbb2be",
      extra_registers => 1,
      full_s_arith => 2,
      full_s_width => 17,
      latency => 2,
      overflow => 1,
      quantization => 1,
      s_arith => xlSigned,
      s_bin_pt => 14,
      s_width => 16
    )
    port map (
      a => reint0_2_output_port_net_x0,
      b => reint1_2_output_port_net_x0,
      ce => ce_1_sg_x566,
      clk => clk_1_sg_x566,
      clr => '0',
      en => "1",
      s => addr1_s_net_x0
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/fine/pfb_fir_async1/pol1_in1_last_tap/pfb_add_tree_async"

entity pfb_add_tree_async_entity_591571284b is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    din: in std_logic_vector(63 downto 0); 
    dv: in std_logic; 
    sync: in std_logic; 
    dout: out std_logic_vector(35 downto 0); 
    dv_out: out std_logic; 
    sync_out: out std_logic
  );
end pfb_add_tree_async_entity_591571284b;

architecture structural of pfb_add_tree_async_entity_591571284b is
  signal addr1_s_net_x0: std_logic_vector(15 downto 0);
  signal addr1_s_net_x1: std_logic_vector(15 downto 0);
  signal ce_1_sg_x567: std_logic;
  signal clk_1_sg_x567: std_logic;
  signal concat_y_net_x0: std_logic_vector(63 downto 0);
  signal concat_y_net_x3: std_logic_vector(35 downto 0);
  signal convert1_dout_net_x0: std_logic_vector(17 downto 0);
  signal convert2_dout_net_x0: std_logic_vector(17 downto 0);
  signal delay1_q_net_x0: std_logic;
  signal delay_convert_q_net_x1: std_logic;
  signal delay_dv_q_net_x1: std_logic;
  signal delay_q_net_x1: std_logic;
  signal reint0_1_output_port_net_x0: std_logic_vector(15 downto 0);
  signal reint0_2_output_port_net_x0: std_logic_vector(15 downto 0);
  signal reint1_1_output_port_net_x0: std_logic_vector(15 downto 0);
  signal reint1_2_output_port_net_x0: std_logic_vector(15 downto 0);
  signal scale1_op_net: std_logic_vector(15 downto 0);
  signal scale2_op_net: std_logic_vector(15 downto 0);
  signal slice0_1_y_net: std_logic_vector(15 downto 0);
  signal slice0_2_y_net: std_logic_vector(15 downto 0);
  signal slice1_1_y_net: std_logic_vector(15 downto 0);
  signal slice1_2_y_net: std_logic_vector(15 downto 0);
  signal sync_delay_q_net_x0: std_logic;

begin
  ce_1_sg_x567 <= ce_1;
  clk_1_sg_x567 <= clk_1;
  concat_y_net_x0 <= din;
  delay1_q_net_x0 <= dv;
  delay_q_net_x1 <= sync;
  dout <= concat_y_net_x3;
  dv_out <= delay_dv_q_net_x1;
  sync_out <= delay_convert_q_net_x1;

  adder_tree1_4b3dc0964f: entity work.adder_tree1_entity_4b3dc0964f
    port map (
      ce_1 => ce_1_sg_x567,
      clk_1 => clk_1_sg_x567,
      din1 => reint0_1_output_port_net_x0,
      din2 => reint1_1_output_port_net_x0,
      sync => delay_q_net_x1,
      dout => addr1_s_net_x0,
      sync_out => sync_delay_q_net_x0
    );

  adder_tree2_bfdc0b6b4c: entity work.adder_tree2_entity_bfdc0b6b4c
    port map (
      ce_1 => ce_1_sg_x567,
      clk_1 => clk_1_sg_x567,
      din1 => reint0_2_output_port_net_x0,
      din2 => reint1_2_output_port_net_x0,
      dout => addr1_s_net_x1
    );

  convert1: entity work.xlconvert_pipeline
    generic map (
      bool_conversion => 0,
      din_arith => 2,
      din_bin_pt => 15,
      din_width => 16,
      dout_arith => 2,
      dout_bin_pt => 17,
      dout_width => 18,
      latency => 2,
      overflow => xlWrap,
      quantization => xlTruncate
    )
    port map (
      ce => ce_1_sg_x567,
      clk => clk_1_sg_x567,
      clr => '0',
      din => scale1_op_net,
      en => "1",
      dout => convert1_dout_net_x0
    );

  convert2: entity work.xlconvert_pipeline
    generic map (
      bool_conversion => 0,
      din_arith => 2,
      din_bin_pt => 15,
      din_width => 16,
      dout_arith => 2,
      dout_bin_pt => 17,
      dout_width => 18,
      latency => 2,
      overflow => xlWrap,
      quantization => xlTruncate
    )
    port map (
      ce => ce_1_sg_x567,
      clk => clk_1_sg_x567,
      clr => '0',
      din => scale2_op_net,
      en => "1",
      dout => convert2_dout_net_x0
    );

  delay_convert: entity work.xldelay
    generic map (
      latency => 2,
      reg_retiming => 0,
      reset => 0,
      width => 1
    )
    port map (
      ce => ce_1_sg_x567,
      clk => clk_1_sg_x567,
      d(0) => sync_delay_q_net_x0,
      en => '1',
      rst => '1',
      q(0) => delay_convert_q_net_x1
    );

  delay_dv: entity work.xldelay
    generic map (
      latency => 3,
      reg_retiming => 0,
      reset => 0,
      width => 1
    )
    port map (
      ce => ce_1_sg_x567,
      clk => clk_1_sg_x567,
      d(0) => delay1_q_net_x0,
      en => '1',
      rst => '1',
      q(0) => delay_dv_q_net_x1
    );

  reint0_1: entity work.reinterpret_151459306d
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => slice0_1_y_net,
      output_port => reint0_1_output_port_net_x0
    );

  reint0_2: entity work.reinterpret_151459306d
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => slice0_2_y_net,
      output_port => reint0_2_output_port_net_x0
    );

  reint1_1: entity work.reinterpret_151459306d
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => slice1_1_y_net,
      output_port => reint1_1_output_port_net_x0
    );

  reint1_2: entity work.reinterpret_151459306d
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => slice1_2_y_net,
      output_port => reint1_2_output_port_net_x0
    );

  ri_to_c_222604f7f6: entity work.ri_to_c0_entity_724b130d6e
    port map (
      im => convert2_dout_net_x0,
      re => convert1_dout_net_x0,
      c => concat_y_net_x3
    );

  scale1: entity work.scale_fa7c2ab9f6
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      ip => addr1_s_net_x0,
      op => scale1_op_net
    );

  scale2: entity work.scale_fa7c2ab9f6
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      ip => addr1_s_net_x1,
      op => scale2_op_net
    );

  slice0_1: entity work.xlslice
    generic map (
      new_lsb => 48,
      new_msb => 63,
      x_width => 64,
      y_width => 16
    )
    port map (
      x => concat_y_net_x0,
      y => slice0_1_y_net
    );

  slice0_2: entity work.xlslice
    generic map (
      new_lsb => 32,
      new_msb => 47,
      x_width => 64,
      y_width => 16
    )
    port map (
      x => concat_y_net_x0,
      y => slice0_2_y_net
    );

  slice1_1: entity work.xlslice
    generic map (
      new_lsb => 16,
      new_msb => 31,
      x_width => 64,
      y_width => 16
    )
    port map (
      x => concat_y_net_x0,
      y => slice1_1_y_net
    );

  slice1_2: entity work.xlslice
    generic map (
      new_lsb => 0,
      new_msb => 15,
      x_width => 64,
      y_width => 16
    )
    port map (
      x => concat_y_net_x0,
      y => slice1_2_y_net
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/fine/pfb_fir_async1/pol1_in1_last_tap/ri_to_c"

entity ri_to_c_entity_21766a8f4a is
  port (
    im: in std_logic_vector(15 downto 0); 
    re: in std_logic_vector(15 downto 0); 
    c: out std_logic_vector(31 downto 0)
  );
end ri_to_c_entity_21766a8f4a;

architecture structural of ri_to_c_entity_21766a8f4a is
  signal concat_y_net_x0: std_logic_vector(31 downto 0);
  signal mult1_p_net_x0: std_logic_vector(15 downto 0);
  signal mult_p_net_x0: std_logic_vector(15 downto 0);
  signal reinterpret1_output_port_net: std_logic_vector(15 downto 0);
  signal reinterpret_output_port_net: std_logic_vector(15 downto 0);

begin
  mult_p_net_x0 <= im;
  mult1_p_net_x0 <= re;
  c <= concat_y_net_x0;

  concat: entity work.concat_a369e00c6b
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      in0 => reinterpret_output_port_net,
      in1 => reinterpret1_output_port_net,
      y => concat_y_net_x0
    );

  reinterpret: entity work.reinterpret_7025463ea8
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => mult1_p_net_x0,
      output_port => reinterpret_output_port_net
    );

  reinterpret1: entity work.reinterpret_7025463ea8
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => mult_p_net_x0,
      output_port => reinterpret1_output_port_net
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/fine/pfb_fir_async1/pol1_in1_last_tap/split_data"

entity split_data_entity_23537c7e5f is
  port (
    bus_in: in std_logic_vector(35 downto 0); 
    lsb_out1: out std_logic_vector(7 downto 0); 
    msb_out2: out std_logic_vector(7 downto 0)
  );
end split_data_entity_23537c7e5f;

architecture structural of split_data_entity_23537c7e5f is
  signal reinterpret1_output_port_net_x0: std_logic_vector(7 downto 0);
  signal reinterpret2_output_port_net_x0: std_logic_vector(7 downto 0);
  signal single_port_ram_data_out_net_x0: std_logic_vector(35 downto 0);
  signal slice1_y_net: std_logic_vector(7 downto 0);
  signal slice2_y_net: std_logic_vector(7 downto 0);

begin
  single_port_ram_data_out_net_x0 <= bus_in;
  lsb_out1 <= reinterpret1_output_port_net_x0;
  msb_out2 <= reinterpret2_output_port_net_x0;

  reinterpret1: entity work.reinterpret_4389dc89bf
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => slice1_y_net,
      output_port => reinterpret1_output_port_net_x0
    );

  reinterpret2: entity work.reinterpret_4389dc89bf
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => slice2_y_net,
      output_port => reinterpret2_output_port_net_x0
    );

  slice1: entity work.xlslice
    generic map (
      new_lsb => 20,
      new_msb => 27,
      x_width => 36,
      y_width => 8
    )
    port map (
      x => single_port_ram_data_out_net_x0,
      y => slice1_y_net
    );

  slice2: entity work.xlslice
    generic map (
      new_lsb => 28,
      new_msb => 35,
      x_width => 36,
      y_width => 8
    )
    port map (
      x => single_port_ram_data_out_net_x0,
      y => slice2_y_net
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/fine/pfb_fir_async1/pol1_in1_last_tap"

entity pol1_in1_last_tap_entity_c58d5bf7f0 is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    coeff: in std_logic_vector(7 downto 0); 
    din: in std_logic_vector(35 downto 0); 
    dvin: in std_logic; 
    sync: in std_logic; 
    taps_in: in std_logic_vector(31 downto 0); 
    dout: out std_logic_vector(35 downto 0); 
    dv_out: out std_logic; 
    sync_out: out std_logic
  );
end pol1_in1_last_tap_entity_c58d5bf7f0;

architecture structural of pol1_in1_last_tap_entity_c58d5bf7f0 is
  signal ce_1_sg_x568: std_logic;
  signal clk_1_sg_x568: std_logic;
  signal concat_y_net_x0: std_logic_vector(63 downto 0);
  signal concat_y_net_x4: std_logic_vector(31 downto 0);
  signal concat_y_net_x5: std_logic_vector(35 downto 0);
  signal delay1_q_net_x0: std_logic;
  signal delay1_q_net_x1: std_logic_vector(7 downto 0);
  signal delay2_q_net_x0: std_logic;
  signal delay_convert_q_net_x2: std_logic;
  signal delay_dv_q_net_x2: std_logic;
  signal delay_q_net_x1: std_logic;
  signal interpret_coeff_output_port_net: std_logic_vector(7 downto 0);
  signal mult1_p_net_x0: std_logic_vector(15 downto 0);
  signal mult_p_net_x0: std_logic_vector(15 downto 0);
  signal reinterpret1_output_port_net_x0: std_logic_vector(7 downto 0);
  signal reinterpret2_output_port_net_x0: std_logic_vector(7 downto 0);
  signal single_port_ram_data_out_net_x1: std_logic_vector(35 downto 0);
  signal sync_delay_q_net_x0: std_logic;
  signal tapout_delay_q_net_x0: std_logic_vector(31 downto 0);

begin
  ce_1_sg_x568 <= ce_1;
  clk_1_sg_x568 <= clk_1;
  delay1_q_net_x1 <= coeff;
  single_port_ram_data_out_net_x1 <= din;
  delay2_q_net_x0 <= dvin;
  sync_delay_q_net_x0 <= sync;
  tapout_delay_q_net_x0 <= taps_in;
  dout <= concat_y_net_x5;
  dv_out <= delay_dv_q_net_x2;
  sync_out <= delay_convert_q_net_x2;

  concat: entity work.concat_62c4475a80
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      in0 => concat_y_net_x4,
      in1 => tapout_delay_q_net_x0,
      y => concat_y_net_x0
    );

  delay: entity work.xldelay
    generic map (
      latency => 3,
      reg_retiming => 0,
      reset => 0,
      width => 1
    )
    port map (
      ce => ce_1_sg_x568,
      clk => clk_1_sg_x568,
      d(0) => sync_delay_q_net_x0,
      en => '1',
      rst => '1',
      q(0) => delay_q_net_x1
    );

  delay1: entity work.xldelay
    generic map (
      latency => 3,
      reg_retiming => 0,
      reset => 0,
      width => 1
    )
    port map (
      ce => ce_1_sg_x568,
      clk => clk_1_sg_x568,
      d(0) => delay2_q_net_x0,
      en => '1',
      rst => '1',
      q(0) => delay1_q_net_x0
    );

  interpret_coeff: entity work.reinterpret_4389dc89bf
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => delay1_q_net_x1,
      output_port => interpret_coeff_output_port_net
    );

  mult: entity work.mult_1f4d330bcc
    port map (
      a => reinterpret1_output_port_net_x0,
      b => interpret_coeff_output_port_net,
      ce => ce_1_sg_x568,
      clk => clk_1_sg_x568,
      clr => '0',
      p => mult_p_net_x0
    );

  mult1: entity work.mult_1f4d330bcc
    port map (
      a => reinterpret2_output_port_net_x0,
      b => interpret_coeff_output_port_net,
      ce => ce_1_sg_x568,
      clk => clk_1_sg_x568,
      clr => '0',
      p => mult1_p_net_x0
    );

  pfb_add_tree_async_591571284b: entity work.pfb_add_tree_async_entity_591571284b
    port map (
      ce_1 => ce_1_sg_x568,
      clk_1 => clk_1_sg_x568,
      din => concat_y_net_x0,
      dv => delay1_q_net_x0,
      sync => delay_q_net_x1,
      dout => concat_y_net_x5,
      dv_out => delay_dv_q_net_x2,
      sync_out => delay_convert_q_net_x2
    );

  ri_to_c_21766a8f4a: entity work.ri_to_c_entity_21766a8f4a
    port map (
      im => mult_p_net_x0,
      re => mult1_p_net_x0,
      c => concat_y_net_x4
    );

  split_data_23537c7e5f: entity work.split_data_entity_23537c7e5f
    port map (
      bus_in => single_port_ram_data_out_net_x1,
      lsb_out1 => reinterpret1_output_port_net_x0,
      msb_out2 => reinterpret2_output_port_net_x0
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/fine/pfb_fir_async1/pol1_in1_tap1"

entity pol1_in1_tap1_entity_36567b3995 is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    coeffs: in std_logic_vector(15 downto 0); 
    din: in std_logic_vector(35 downto 0); 
    dvin: in std_logic; 
    coeff_out: out std_logic_vector(7 downto 0); 
    dout: out std_logic_vector(35 downto 0); 
    dv_out: out std_logic; 
    taps_out: out std_logic_vector(31 downto 0)
  );
end pol1_in1_tap1_entity_36567b3995;

architecture structural of pol1_in1_tap1_entity_36567b3995 is
  signal addr: std_logic_vector(10 downto 0);
  signal ce_1_sg_x569: std_logic;
  signal clk_1_sg_x569: std_logic;
  signal concat_y_net_x0: std_logic_vector(31 downto 0);
  signal delay1_q_net_x3: std_logic_vector(35 downto 0);
  signal delay1_q_net_x4: std_logic_vector(7 downto 0);
  signal delay2_q_net_x1: std_logic;
  signal dv_delay_q_net_x0: std_logic;
  signal interpret_coeff_output_port_net: std_logic_vector(7 downto 0);
  signal mult1_p_net_x0: std_logic_vector(15 downto 0);
  signal mult_p_net_x0: std_logic_vector(15 downto 0);
  signal register_q_net_x1: std_logic_vector(15 downto 0);
  signal reinterpret1_output_port_net_x0: std_logic_vector(7 downto 0);
  signal reinterpret2_output_port_net_x0: std_logic_vector(7 downto 0);
  signal single_port_ram_data_out_net_x2: std_logic_vector(35 downto 0);
  signal slice1_y_net: std_logic_vector(7 downto 0);
  signal slice_y_net: std_logic_vector(7 downto 0);
  signal tapout_delay_q_net_x1: std_logic_vector(31 downto 0);

begin
  ce_1_sg_x569 <= ce_1;
  clk_1_sg_x569 <= clk_1;
  register_q_net_x1 <= coeffs;
  delay1_q_net_x3 <= din;
  dv_delay_q_net_x0 <= dvin;
  coeff_out <= delay1_q_net_x4;
  dout <= single_port_ram_data_out_net_x2;
  dv_out <= delay2_q_net_x1;
  taps_out <= tapout_delay_q_net_x1;

  addr_ctr: entity work.xlcounter_free_c09f12_01
    generic map (
      core_name0 => "cntr_11_0_99cfda0476972b76",
      op_arith => xlUnsigned,
      op_width => 11
    )
    port map (
      ce => ce_1_sg_x569,
      clk => clk_1_sg_x569,
      clr => '0',
      en => "1",
      rst => "0",
      op => addr
    );

  delay1: entity work.xldelay
    generic map (
      latency => 3,
      reg_retiming => 0,
      reset => 0,
      width => 8
    )
    port map (
      ce => ce_1_sg_x569,
      clk => clk_1_sg_x569,
      d => slice1_y_net,
      en => '1',
      rst => '1',
      q => delay1_q_net_x4
    );

  delay2: entity work.xldelay
    generic map (
      latency => 3,
      reg_retiming => 0,
      reset => 0,
      width => 1
    )
    port map (
      ce => ce_1_sg_x569,
      clk => clk_1_sg_x569,
      d(0) => dv_delay_q_net_x0,
      en => '1',
      rst => '1',
      q(0) => delay2_q_net_x1
    );

  interpret_coeff: entity work.reinterpret_4389dc89bf
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => slice_y_net,
      output_port => interpret_coeff_output_port_net
    );

  mult: entity work.mult_1f4d330bcc
    port map (
      a => reinterpret1_output_port_net_x0,
      b => interpret_coeff_output_port_net,
      ce => ce_1_sg_x569,
      clk => clk_1_sg_x569,
      clr => '0',
      p => mult_p_net_x0
    );

  mult1: entity work.mult_1f4d330bcc
    port map (
      a => reinterpret2_output_port_net_x0,
      b => interpret_coeff_output_port_net,
      ce => ce_1_sg_x569,
      clk => clk_1_sg_x569,
      clr => '0',
      p => mult1_p_net_x0
    );

  ri_to_c_804bb00b89: entity work.ri_to_c_entity_21766a8f4a
    port map (
      im => mult_p_net_x0,
      re => mult1_p_net_x0,
      c => concat_y_net_x0
    );

  single_port_ram: entity work.xlspram_c09f12_01
    generic map (
      c_address_width => 11,
      c_width => 36,
      core_name0 => "bmg_72_ddcdd9bb5f78a2a9",
      latency => 2
    )
    port map (
      addr => addr,
      ce => ce_1_sg_x569,
      clk => clk_1_sg_x569,
      data_in => delay1_q_net_x3,
      en => "1",
      rst => "0",
      we(0) => dv_delay_q_net_x0,
      data_out => single_port_ram_data_out_net_x2
    );

  slice: entity work.xlslice
    generic map (
      new_lsb => 0,
      new_msb => 7,
      x_width => 16,
      y_width => 8
    )
    port map (
      x => register_q_net_x1,
      y => slice_y_net
    );

  slice1: entity work.xlslice
    generic map (
      new_lsb => 8,
      new_msb => 15,
      x_width => 16,
      y_width => 8
    )
    port map (
      x => register_q_net_x1,
      y => slice1_y_net
    );

  split_data_9d872bb04e: entity work.split_data_entity_23537c7e5f
    port map (
      bus_in => delay1_q_net_x3,
      lsb_out1 => reinterpret1_output_port_net_x0,
      msb_out2 => reinterpret2_output_port_net_x0
    );

  tapout_delay: entity work.xldelay
    generic map (
      latency => 3,
      reg_retiming => 0,
      reset => 0,
      width => 32
    )
    port map (
      ce => ce_1_sg_x569,
      clk => clk_1_sg_x569,
      d => concat_y_net_x0,
      en => '1',
      rst => '1',
      q => tapout_delay_q_net_x1
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/fine/pfb_fir_async1/pol1_in2_coeffs"

entity pol1_in2_coeffs_entity_8d7039447f is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    din: in std_logic_vector(35 downto 0); 
    sync: in std_logic; 
    coeff: out std_logic_vector(15 downto 0); 
    dout: out std_logic_vector(35 downto 0)
  );
end pol1_in2_coeffs_entity_8d7039447f;

architecture structural of pol1_in2_coeffs_entity_8d7039447f is
  signal ce_1_sg_x570: std_logic;
  signal clk_1_sg_x570: std_logic;
  signal concat_y_net: std_logic_vector(15 downto 0);
  signal counter_op_net: std_logic_vector(10 downto 0);
  signal delay1_q_net_x0: std_logic_vector(35 downto 0);
  signal edge_op_y_net_x5: std_logic;
  signal fan_delay1_q_net: std_logic_vector(10 downto 0);
  signal fan_delay2_q_net: std_logic_vector(10 downto 0);
  signal register_q_net_x0: std_logic_vector(15 downto 0);
  signal reinterpret1_output_port_net: std_logic_vector(7 downto 0);
  signal reinterpret1_output_port_net_x1: std_logic_vector(35 downto 0);
  signal reinterpret2_output_port_net: std_logic_vector(7 downto 0);
  signal rom1_data_net: std_logic_vector(7 downto 0);
  signal rom2_data_net: std_logic_vector(7 downto 0);

begin
  ce_1_sg_x570 <= ce_1;
  clk_1_sg_x570 <= clk_1;
  reinterpret1_output_port_net_x1 <= din;
  edge_op_y_net_x5 <= sync;
  coeff <= register_q_net_x0;
  dout <= delay1_q_net_x0;

  concat: entity work.concat_8e53793314
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      in0 => reinterpret1_output_port_net,
      in1 => reinterpret2_output_port_net,
      y => concat_y_net
    );

  counter: entity work.xlcounter_free_c09f12_01
    generic map (
      core_name0 => "cntr_11_0_99cfda0476972b76",
      op_arith => xlUnsigned,
      op_width => 11
    )
    port map (
      ce => ce_1_sg_x570,
      clk => clk_1_sg_x570,
      clr => '0',
      en => "1",
      rst(0) => edge_op_y_net_x5,
      op => counter_op_net
    );

  delay1: entity work.xldelay
    generic map (
      latency => 5,
      reg_retiming => 0,
      reset => 0,
      width => 36
    )
    port map (
      ce => ce_1_sg_x570,
      clk => clk_1_sg_x570,
      d => reinterpret1_output_port_net_x1,
      en => '1',
      rst => '1',
      q => delay1_q_net_x0
    );

  fan_delay1: entity work.xldelay
    generic map (
      latency => 1,
      reg_retiming => 0,
      reset => 0,
      width => 11
    )
    port map (
      ce => ce_1_sg_x570,
      clk => clk_1_sg_x570,
      d => counter_op_net,
      en => '1',
      rst => '1',
      q => fan_delay1_q_net
    );

  fan_delay2: entity work.xldelay
    generic map (
      latency => 1,
      reg_retiming => 0,
      reset => 0,
      width => 11
    )
    port map (
      ce => ce_1_sg_x570,
      clk => clk_1_sg_x570,
      d => counter_op_net,
      en => '1',
      rst => '1',
      q => fan_delay2_q_net
    );

  register_x0: entity work.xlregister
    generic map (
      d_width => 16,
      init_value => b"0000000000000000"
    )
    port map (
      ce => ce_1_sg_x570,
      clk => clk_1_sg_x570,
      d => concat_y_net,
      en => "1",
      rst => "0",
      q => register_q_net_x0
    );

  reinterpret1: entity work.reinterpret_d51df7ac30
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => rom1_data_net,
      output_port => reinterpret1_output_port_net
    );

  reinterpret2: entity work.reinterpret_d51df7ac30
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => rom2_data_net,
      output_port => reinterpret2_output_port_net
    );

  rom1: entity work.xlsprom_c09f12_01
    generic map (
      c_address_width => 11,
      c_width => 8,
      core_name0 => "bmg_72_4f929f931e999067",
      latency => 2
    )
    port map (
      addr => fan_delay1_q_net,
      ce => ce_1_sg_x570,
      clk => clk_1_sg_x570,
      en => "1",
      rst => "0",
      data => rom1_data_net
    );

  rom2: entity work.xlsprom_c09f12_01
    generic map (
      c_address_width => 11,
      c_width => 8,
      core_name0 => "bmg_72_ba30712f7b147c00",
      latency => 2
    )
    port map (
      addr => fan_delay2_q_net,
      ce => ce_1_sg_x570,
      clk => clk_1_sg_x570,
      en => "1",
      rst => "0",
      data => rom2_data_net
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/fine/pfb_fir_async1/pol1_in2_last_tap/pfb_add_tree_async"

entity pfb_add_tree_async_entity_93c68ef3c8 is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    din: in std_logic_vector(63 downto 0); 
    dout: out std_logic_vector(35 downto 0)
  );
end pfb_add_tree_async_entity_93c68ef3c8;

architecture structural of pfb_add_tree_async_entity_93c68ef3c8 is
  signal addr1_s_net_x0: std_logic_vector(15 downto 0);
  signal addr1_s_net_x1: std_logic_vector(15 downto 0);
  signal ce_1_sg_x573: std_logic;
  signal clk_1_sg_x573: std_logic;
  signal concat_y_net_x0: std_logic_vector(63 downto 0);
  signal concat_y_net_x4: std_logic_vector(35 downto 0);
  signal convert1_dout_net_x0: std_logic_vector(17 downto 0);
  signal convert2_dout_net_x0: std_logic_vector(17 downto 0);
  signal reint0_1_output_port_net_x0: std_logic_vector(15 downto 0);
  signal reint0_2_output_port_net_x0: std_logic_vector(15 downto 0);
  signal reint1_1_output_port_net_x0: std_logic_vector(15 downto 0);
  signal reint1_2_output_port_net_x0: std_logic_vector(15 downto 0);
  signal scale1_op_net: std_logic_vector(15 downto 0);
  signal scale2_op_net: std_logic_vector(15 downto 0);
  signal slice0_1_y_net: std_logic_vector(15 downto 0);
  signal slice0_2_y_net: std_logic_vector(15 downto 0);
  signal slice1_1_y_net: std_logic_vector(15 downto 0);
  signal slice1_2_y_net: std_logic_vector(15 downto 0);

begin
  ce_1_sg_x573 <= ce_1;
  clk_1_sg_x573 <= clk_1;
  concat_y_net_x0 <= din;
  dout <= concat_y_net_x4;

  adder_tree1_5e2f91b04c: entity work.adder_tree2_entity_bfdc0b6b4c
    port map (
      ce_1 => ce_1_sg_x573,
      clk_1 => clk_1_sg_x573,
      din1 => reint0_1_output_port_net_x0,
      din2 => reint1_1_output_port_net_x0,
      dout => addr1_s_net_x0
    );

  adder_tree2_66478975fe: entity work.adder_tree2_entity_bfdc0b6b4c
    port map (
      ce_1 => ce_1_sg_x573,
      clk_1 => clk_1_sg_x573,
      din1 => reint0_2_output_port_net_x0,
      din2 => reint1_2_output_port_net_x0,
      dout => addr1_s_net_x1
    );

  convert1: entity work.xlconvert_pipeline
    generic map (
      bool_conversion => 0,
      din_arith => 2,
      din_bin_pt => 15,
      din_width => 16,
      dout_arith => 2,
      dout_bin_pt => 17,
      dout_width => 18,
      latency => 2,
      overflow => xlWrap,
      quantization => xlTruncate
    )
    port map (
      ce => ce_1_sg_x573,
      clk => clk_1_sg_x573,
      clr => '0',
      din => scale1_op_net,
      en => "1",
      dout => convert1_dout_net_x0
    );

  convert2: entity work.xlconvert_pipeline
    generic map (
      bool_conversion => 0,
      din_arith => 2,
      din_bin_pt => 15,
      din_width => 16,
      dout_arith => 2,
      dout_bin_pt => 17,
      dout_width => 18,
      latency => 2,
      overflow => xlWrap,
      quantization => xlTruncate
    )
    port map (
      ce => ce_1_sg_x573,
      clk => clk_1_sg_x573,
      clr => '0',
      din => scale2_op_net,
      en => "1",
      dout => convert2_dout_net_x0
    );

  reint0_1: entity work.reinterpret_151459306d
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => slice0_1_y_net,
      output_port => reint0_1_output_port_net_x0
    );

  reint0_2: entity work.reinterpret_151459306d
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => slice0_2_y_net,
      output_port => reint0_2_output_port_net_x0
    );

  reint1_1: entity work.reinterpret_151459306d
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => slice1_1_y_net,
      output_port => reint1_1_output_port_net_x0
    );

  reint1_2: entity work.reinterpret_151459306d
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => slice1_2_y_net,
      output_port => reint1_2_output_port_net_x0
    );

  ri_to_c_d1cba936c7: entity work.ri_to_c0_entity_724b130d6e
    port map (
      im => convert2_dout_net_x0,
      re => convert1_dout_net_x0,
      c => concat_y_net_x4
    );

  scale1: entity work.scale_fa7c2ab9f6
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      ip => addr1_s_net_x0,
      op => scale1_op_net
    );

  scale2: entity work.scale_fa7c2ab9f6
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      ip => addr1_s_net_x1,
      op => scale2_op_net
    );

  slice0_1: entity work.xlslice
    generic map (
      new_lsb => 48,
      new_msb => 63,
      x_width => 64,
      y_width => 16
    )
    port map (
      x => concat_y_net_x0,
      y => slice0_1_y_net
    );

  slice0_2: entity work.xlslice
    generic map (
      new_lsb => 32,
      new_msb => 47,
      x_width => 64,
      y_width => 16
    )
    port map (
      x => concat_y_net_x0,
      y => slice0_2_y_net
    );

  slice1_1: entity work.xlslice
    generic map (
      new_lsb => 16,
      new_msb => 31,
      x_width => 64,
      y_width => 16
    )
    port map (
      x => concat_y_net_x0,
      y => slice1_1_y_net
    );

  slice1_2: entity work.xlslice
    generic map (
      new_lsb => 0,
      new_msb => 15,
      x_width => 64,
      y_width => 16
    )
    port map (
      x => concat_y_net_x0,
      y => slice1_2_y_net
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/fine/pfb_fir_async1/pol1_in2_last_tap"

entity pol1_in2_last_tap_entity_ca52ec1650 is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    coeff: in std_logic_vector(7 downto 0); 
    din: in std_logic_vector(35 downto 0); 
    taps_in: in std_logic_vector(31 downto 0); 
    dout: out std_logic_vector(35 downto 0)
  );
end pol1_in2_last_tap_entity_ca52ec1650;

architecture structural of pol1_in2_last_tap_entity_ca52ec1650 is
  signal ce_1_sg_x574: std_logic;
  signal clk_1_sg_x574: std_logic;
  signal concat_y_net_x0: std_logic_vector(63 downto 0);
  signal concat_y_net_x1: std_logic_vector(31 downto 0);
  signal concat_y_net_x5: std_logic_vector(35 downto 0);
  signal delay1_q_net_x0: std_logic_vector(7 downto 0);
  signal interpret_coeff_output_port_net: std_logic_vector(7 downto 0);
  signal mult1_p_net_x0: std_logic_vector(15 downto 0);
  signal mult_p_net_x0: std_logic_vector(15 downto 0);
  signal reinterpret1_output_port_net_x0: std_logic_vector(7 downto 0);
  signal reinterpret2_output_port_net_x0: std_logic_vector(7 downto 0);
  signal single_port_ram_data_out_net_x1: std_logic_vector(35 downto 0);
  signal tapout_delay_q_net_x0: std_logic_vector(31 downto 0);

begin
  ce_1_sg_x574 <= ce_1;
  clk_1_sg_x574 <= clk_1;
  delay1_q_net_x0 <= coeff;
  single_port_ram_data_out_net_x1 <= din;
  tapout_delay_q_net_x0 <= taps_in;
  dout <= concat_y_net_x5;

  concat: entity work.concat_62c4475a80
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      in0 => concat_y_net_x1,
      in1 => tapout_delay_q_net_x0,
      y => concat_y_net_x0
    );

  interpret_coeff: entity work.reinterpret_4389dc89bf
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => delay1_q_net_x0,
      output_port => interpret_coeff_output_port_net
    );

  mult: entity work.mult_1f4d330bcc
    port map (
      a => reinterpret1_output_port_net_x0,
      b => interpret_coeff_output_port_net,
      ce => ce_1_sg_x574,
      clk => clk_1_sg_x574,
      clr => '0',
      p => mult_p_net_x0
    );

  mult1: entity work.mult_1f4d330bcc
    port map (
      a => reinterpret2_output_port_net_x0,
      b => interpret_coeff_output_port_net,
      ce => ce_1_sg_x574,
      clk => clk_1_sg_x574,
      clr => '0',
      p => mult1_p_net_x0
    );

  pfb_add_tree_async_93c68ef3c8: entity work.pfb_add_tree_async_entity_93c68ef3c8
    port map (
      ce_1 => ce_1_sg_x574,
      clk_1 => clk_1_sg_x574,
      din => concat_y_net_x0,
      dout => concat_y_net_x5
    );

  ri_to_c_bb6fa07ed5: entity work.ri_to_c_entity_21766a8f4a
    port map (
      im => mult_p_net_x0,
      re => mult1_p_net_x0,
      c => concat_y_net_x1
    );

  split_data_dfbe9eaf40: entity work.split_data_entity_23537c7e5f
    port map (
      bus_in => single_port_ram_data_out_net_x1,
      lsb_out1 => reinterpret1_output_port_net_x0,
      msb_out2 => reinterpret2_output_port_net_x0
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/fine/pfb_fir_async1/pol1_in2_tap1"

entity pol1_in2_tap1_entity_d877d09e17 is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    coeffs: in std_logic_vector(15 downto 0); 
    din: in std_logic_vector(35 downto 0); 
    dvin: in std_logic; 
    coeff_out: out std_logic_vector(7 downto 0); 
    dout: out std_logic_vector(35 downto 0); 
    taps_out: out std_logic_vector(31 downto 0)
  );
end pol1_in2_tap1_entity_d877d09e17;

architecture structural of pol1_in2_tap1_entity_d877d09e17 is
  signal addr: std_logic_vector(10 downto 0);
  signal ce_1_sg_x575: std_logic;
  signal clk_1_sg_x575: std_logic;
  signal concat_y_net_x0: std_logic_vector(31 downto 0);
  signal delay1_q_net_x2: std_logic_vector(35 downto 0);
  signal delay1_q_net_x3: std_logic_vector(7 downto 0);
  signal dv_delay_q_net_x1: std_logic;
  signal interpret_coeff_output_port_net: std_logic_vector(7 downto 0);
  signal mult1_p_net_x0: std_logic_vector(15 downto 0);
  signal mult_p_net_x0: std_logic_vector(15 downto 0);
  signal register_q_net_x1: std_logic_vector(15 downto 0);
  signal reinterpret1_output_port_net_x0: std_logic_vector(7 downto 0);
  signal reinterpret2_output_port_net_x0: std_logic_vector(7 downto 0);
  signal single_port_ram_data_out_net_x2: std_logic_vector(35 downto 0);
  signal slice1_y_net: std_logic_vector(7 downto 0);
  signal slice_y_net: std_logic_vector(7 downto 0);
  signal tapout_delay_q_net_x1: std_logic_vector(31 downto 0);

begin
  ce_1_sg_x575 <= ce_1;
  clk_1_sg_x575 <= clk_1;
  register_q_net_x1 <= coeffs;
  delay1_q_net_x2 <= din;
  dv_delay_q_net_x1 <= dvin;
  coeff_out <= delay1_q_net_x3;
  dout <= single_port_ram_data_out_net_x2;
  taps_out <= tapout_delay_q_net_x1;

  addr_ctr: entity work.xlcounter_free_c09f12_01
    generic map (
      core_name0 => "cntr_11_0_99cfda0476972b76",
      op_arith => xlUnsigned,
      op_width => 11
    )
    port map (
      ce => ce_1_sg_x575,
      clk => clk_1_sg_x575,
      clr => '0',
      en => "1",
      rst => "0",
      op => addr
    );

  delay1: entity work.xldelay
    generic map (
      latency => 3,
      reg_retiming => 0,
      reset => 0,
      width => 8
    )
    port map (
      ce => ce_1_sg_x575,
      clk => clk_1_sg_x575,
      d => slice1_y_net,
      en => '1',
      rst => '1',
      q => delay1_q_net_x3
    );

  interpret_coeff: entity work.reinterpret_4389dc89bf
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => slice_y_net,
      output_port => interpret_coeff_output_port_net
    );

  mult: entity work.mult_1f4d330bcc
    port map (
      a => reinterpret1_output_port_net_x0,
      b => interpret_coeff_output_port_net,
      ce => ce_1_sg_x575,
      clk => clk_1_sg_x575,
      clr => '0',
      p => mult_p_net_x0
    );

  mult1: entity work.mult_1f4d330bcc
    port map (
      a => reinterpret2_output_port_net_x0,
      b => interpret_coeff_output_port_net,
      ce => ce_1_sg_x575,
      clk => clk_1_sg_x575,
      clr => '0',
      p => mult1_p_net_x0
    );

  ri_to_c_66a81a0871: entity work.ri_to_c_entity_21766a8f4a
    port map (
      im => mult_p_net_x0,
      re => mult1_p_net_x0,
      c => concat_y_net_x0
    );

  single_port_ram: entity work.xlspram_c09f12_01
    generic map (
      c_address_width => 11,
      c_width => 36,
      core_name0 => "bmg_72_ddcdd9bb5f78a2a9",
      latency => 2
    )
    port map (
      addr => addr,
      ce => ce_1_sg_x575,
      clk => clk_1_sg_x575,
      data_in => delay1_q_net_x2,
      en => "1",
      rst => "0",
      we(0) => dv_delay_q_net_x1,
      data_out => single_port_ram_data_out_net_x2
    );

  slice: entity work.xlslice
    generic map (
      new_lsb => 0,
      new_msb => 7,
      x_width => 16,
      y_width => 8
    )
    port map (
      x => register_q_net_x1,
      y => slice_y_net
    );

  slice1: entity work.xlslice
    generic map (
      new_lsb => 8,
      new_msb => 15,
      x_width => 16,
      y_width => 8
    )
    port map (
      x => register_q_net_x1,
      y => slice1_y_net
    );

  split_data_31c86d1414: entity work.split_data_entity_23537c7e5f
    port map (
      bus_in => delay1_q_net_x2,
      lsb_out1 => reinterpret1_output_port_net_x0,
      msb_out2 => reinterpret2_output_port_net_x0
    );

  tapout_delay: entity work.xldelay
    generic map (
      latency => 3,
      reg_retiming => 0,
      reset => 0,
      width => 32
    )
    port map (
      ce => ce_1_sg_x575,
      clk => clk_1_sg_x575,
      d => concat_y_net_x0,
      en => '1',
      rst => '1',
      q => tapout_delay_q_net_x1
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/fine/pfb_fir_async1/sync_generate"

entity sync_generate_entity_533415c247 is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    dv: in std_logic; 
    sync: in std_logic; 
    sync_out_x0: out std_logic
  );
end sync_generate_entity_533415c247;

architecture structural of sync_generate_entity_533415c247 is
  signal ce_1_sg_x576: std_logic;
  signal clk_1_sg_x576: std_logic;
  signal constant1_op_net: std_logic_vector(31 downto 0);
  signal constant_op_net: std_logic;
  signal counter_op_net: std_logic_vector(31 downto 0);
  signal delay_q_net_x1: std_logic;
  signal dv_delay_q_net_x2: std_logic;
  signal logical_y_net: std_logic;
  signal register_q_net: std_logic;
  signal sync_delay_q_net_x1: std_logic;
  signal sync_out: std_logic;

begin
  ce_1_sg_x576 <= ce_1;
  clk_1_sg_x576 <= clk_1;
  dv_delay_q_net_x2 <= dv;
  delay_q_net_x1 <= sync;
  sync_out_x0 <= sync_delay_q_net_x1;

  constant1: entity work.constant_c11787fdd1
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op => constant1_op_net
    );

  constant_x0: entity work.constant_6293007044
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op(0) => constant_op_net
    );

  counter: entity work.xlcounter_free_c09f12_01
    generic map (
      core_name0 => "cntr_11_0_0400b347688ef51a",
      op_arith => xlUnsigned,
      op_width => 32
    )
    port map (
      ce => ce_1_sg_x576,
      clk => clk_1_sg_x576,
      clr => '0',
      en(0) => logical_y_net,
      rst(0) => sync_out,
      op => counter_op_net
    );

  logical: entity work.logical_80f90b97d0
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0(0) => dv_delay_q_net_x2,
      d1(0) => register_q_net,
      y(0) => logical_y_net
    );

  register_x0: entity work.xlregister
    generic map (
      d_width => 1,
      init_value => b"0"
    )
    port map (
      ce => ce_1_sg_x576,
      clk => clk_1_sg_x576,
      d(0) => constant_op_net,
      en(0) => delay_q_net_x1,
      rst(0) => sync_out,
      q(0) => register_q_net
    );

  relational: entity work.relational_770e12e4ab
    port map (
      a => counter_op_net,
      b => constant1_op_net,
      ce => ce_1_sg_x576,
      clk => clk_1_sg_x576,
      clr => '0',
      op(0) => sync_out
    );

  sync_delay: entity work.delay_0341f7be44
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d(0) => sync_out,
      q(0) => sync_delay_q_net_x1
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/fine/pfb_fir_async1"

entity pfb_fir_async1_entity_179eba1a8c is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    dv: in std_logic; 
    pol1_in1: in std_logic_vector(35 downto 0); 
    pol1_in2: in std_logic_vector(35 downto 0); 
    sync: in std_logic; 
    dv_out: out std_logic; 
    pol1_out1: out std_logic_vector(35 downto 0); 
    pol1_out2: out std_logic_vector(35 downto 0); 
    sync_out: out std_logic
  );
end pfb_fir_async1_entity_179eba1a8c;

architecture structural of pfb_fir_async1_entity_179eba1a8c is
  signal ce_1_sg_x577: std_logic;
  signal clk_1_sg_x577: std_logic;
  signal concat_y_net_x7: std_logic_vector(35 downto 0);
  signal concat_y_net_x8: std_logic_vector(35 downto 0);
  signal datav_x2: std_logic;
  signal delay1_q_net_x2: std_logic_vector(35 downto 0);
  signal delay1_q_net_x3: std_logic_vector(35 downto 0);
  signal delay1_q_net_x4: std_logic_vector(7 downto 0);
  signal delay1_q_net_x5: std_logic_vector(7 downto 0);
  signal delay2_q_net_x1: std_logic;
  signal delay_convert_q_net_x3: std_logic;
  signal delay_dv_q_net_x3: std_logic;
  signal delay_q_net_x1: std_logic;
  signal dv_delay_q_net_x2: std_logic;
  signal edge_op_y_net_x6: std_logic;
  signal register_q_net_x1: std_logic_vector(15 downto 0);
  signal register_q_net_x2: std_logic_vector(15 downto 0);
  signal reinterpret1_output_port_net_x2: std_logic_vector(35 downto 0);
  signal reinterpret2_output_port_net_x2: std_logic_vector(35 downto 0);
  signal single_port_ram_data_out_net_x2: std_logic_vector(35 downto 0);
  signal single_port_ram_data_out_net_x3: std_logic_vector(35 downto 0);
  signal sync_delay_q_net_x1: std_logic;
  signal tapout_delay_q_net_x1: std_logic_vector(31 downto 0);
  signal tapout_delay_q_net_x2: std_logic_vector(31 downto 0);

begin
  ce_1_sg_x577 <= ce_1;
  clk_1_sg_x577 <= clk_1;
  datav_x2 <= dv;
  reinterpret2_output_port_net_x2 <= pol1_in1;
  reinterpret1_output_port_net_x2 <= pol1_in2;
  edge_op_y_net_x6 <= sync;
  dv_out <= delay_dv_q_net_x3;
  pol1_out1 <= concat_y_net_x7;
  pol1_out2 <= concat_y_net_x8;
  sync_out <= delay_convert_q_net_x3;

  dv_delay: entity work.xldelay
    generic map (
      latency => 4,
      reg_retiming => 0,
      reset => 0,
      width => 1
    )
    port map (
      ce => ce_1_sg_x577,
      clk => clk_1_sg_x577,
      d(0) => datav_x2,
      en => '1',
      rst => '1',
      q(0) => dv_delay_q_net_x2
    );

  pol1_in1_coeffs_bc8c92e227: entity work.pol1_in1_coeffs_entity_bc8c92e227
    port map (
      ce_1 => ce_1_sg_x577,
      clk_1 => clk_1_sg_x577,
      din => reinterpret2_output_port_net_x2,
      sync => edge_op_y_net_x6,
      coeff => register_q_net_x1,
      dout => delay1_q_net_x3,
      sync_out => delay_q_net_x1
    );

  pol1_in1_last_tap_c58d5bf7f0: entity work.pol1_in1_last_tap_entity_c58d5bf7f0
    port map (
      ce_1 => ce_1_sg_x577,
      clk_1 => clk_1_sg_x577,
      coeff => delay1_q_net_x4,
      din => single_port_ram_data_out_net_x2,
      dvin => delay2_q_net_x1,
      sync => sync_delay_q_net_x1,
      taps_in => tapout_delay_q_net_x1,
      dout => concat_y_net_x7,
      dv_out => delay_dv_q_net_x3,
      sync_out => delay_convert_q_net_x3
    );

  pol1_in1_tap1_36567b3995: entity work.pol1_in1_tap1_entity_36567b3995
    port map (
      ce_1 => ce_1_sg_x577,
      clk_1 => clk_1_sg_x577,
      coeffs => register_q_net_x1,
      din => delay1_q_net_x3,
      dvin => dv_delay_q_net_x2,
      coeff_out => delay1_q_net_x4,
      dout => single_port_ram_data_out_net_x2,
      dv_out => delay2_q_net_x1,
      taps_out => tapout_delay_q_net_x1
    );

  pol1_in2_coeffs_8d7039447f: entity work.pol1_in2_coeffs_entity_8d7039447f
    port map (
      ce_1 => ce_1_sg_x577,
      clk_1 => clk_1_sg_x577,
      din => reinterpret1_output_port_net_x2,
      sync => edge_op_y_net_x6,
      coeff => register_q_net_x2,
      dout => delay1_q_net_x2
    );

  pol1_in2_last_tap_ca52ec1650: entity work.pol1_in2_last_tap_entity_ca52ec1650
    port map (
      ce_1 => ce_1_sg_x577,
      clk_1 => clk_1_sg_x577,
      coeff => delay1_q_net_x5,
      din => single_port_ram_data_out_net_x3,
      taps_in => tapout_delay_q_net_x2,
      dout => concat_y_net_x8
    );

  pol1_in2_tap1_d877d09e17: entity work.pol1_in2_tap1_entity_d877d09e17
    port map (
      ce_1 => ce_1_sg_x577,
      clk_1 => clk_1_sg_x577,
      coeffs => register_q_net_x2,
      din => delay1_q_net_x2,
      dvin => dv_delay_q_net_x2,
      coeff_out => delay1_q_net_x5,
      dout => single_port_ram_data_out_net_x3,
      taps_out => tapout_delay_q_net_x2
    );

  sync_generate_533415c247: entity work.sync_generate_entity_533415c247
    port map (
      ce_1 => ce_1_sg_x577,
      clk_1 => clk_1_sg_x577,
      dv => dv_delay_q_net_x2,
      sync => delay_q_net_x1,
      sync_out_x0 => sync_delay_q_net_x1
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/fine/xilinx_ffts/bus_create1"

entity bus_create1_entity_4f50c3e796 is
  port (
    in1: in std_logic_vector(30 downto 0); 
    in2: in std_logic_vector(30 downto 0); 
    bus_out: out std_logic_vector(61 downto 0)
  );
end bus_create1_entity_4f50c3e796;

architecture structural of bus_create1_entity_4f50c3e796 is
  signal concatenate_y_net_x0: std_logic_vector(61 downto 0);
  signal fft_pol0_xk_im_net_x0: std_logic_vector(30 downto 0);
  signal fft_pol0_xk_re_net_x0: std_logic_vector(30 downto 0);
  signal reinterpret1_output_port_net: std_logic_vector(30 downto 0);
  signal reinterpret2_output_port_net: std_logic_vector(30 downto 0);

begin
  fft_pol0_xk_re_net_x0 <= in1;
  fft_pol0_xk_im_net_x0 <= in2;
  bus_out <= concatenate_y_net_x0;

  concatenate: entity work.concat_94729ef7e0
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      in0 => reinterpret1_output_port_net,
      in1 => reinterpret2_output_port_net,
      y => concatenate_y_net_x0
    );

  reinterpret1: entity work.reinterpret_64ddc4af5e
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => fft_pol0_xk_re_net_x0,
      output_port => reinterpret1_output_port_net
    );

  reinterpret2: entity work.reinterpret_64ddc4af5e
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => fft_pol0_xk_im_net_x0,
      output_port => reinterpret2_output_port_net
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/fine/xilinx_ffts/bus_expand"

entity bus_expand_entity_d4648db3a8 is
  port (
    bus_in: in std_logic_vector(71 downto 0); 
    lsb_out1: out std_logic_vector(17 downto 0); 
    msb_out4: out std_logic_vector(17 downto 0); 
    out2: out std_logic_vector(17 downto 0); 
    out3: out std_logic_vector(17 downto 0)
  );
end bus_expand_entity_d4648db3a8;

architecture structural of bus_expand_entity_d4648db3a8 is
  signal delay2_q_net_x0: std_logic_vector(71 downto 0);
  signal reinterpret1_output_port_net_x0: std_logic_vector(17 downto 0);
  signal reinterpret2_output_port_net_x0: std_logic_vector(17 downto 0);
  signal reinterpret3_output_port_net_x0: std_logic_vector(17 downto 0);
  signal reinterpret4_output_port_net_x0: std_logic_vector(17 downto 0);
  signal slice1_y_net: std_logic_vector(17 downto 0);
  signal slice2_y_net: std_logic_vector(17 downto 0);
  signal slice3_y_net: std_logic_vector(17 downto 0);
  signal slice4_y_net: std_logic_vector(17 downto 0);

begin
  delay2_q_net_x0 <= bus_in;
  lsb_out1 <= reinterpret1_output_port_net_x0;
  msb_out4 <= reinterpret4_output_port_net_x0;
  out2 <= reinterpret2_output_port_net_x0;
  out3 <= reinterpret3_output_port_net_x0;

  reinterpret1: entity work.reinterpret_9a0fa0f632
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => slice1_y_net,
      output_port => reinterpret1_output_port_net_x0
    );

  reinterpret2: entity work.reinterpret_9a0fa0f632
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => slice2_y_net,
      output_port => reinterpret2_output_port_net_x0
    );

  reinterpret3: entity work.reinterpret_9a0fa0f632
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => slice3_y_net,
      output_port => reinterpret3_output_port_net_x0
    );

  reinterpret4: entity work.reinterpret_9a0fa0f632
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => slice4_y_net,
      output_port => reinterpret4_output_port_net_x0
    );

  slice1: entity work.xlslice
    generic map (
      new_lsb => 0,
      new_msb => 17,
      x_width => 72,
      y_width => 18
    )
    port map (
      x => delay2_q_net_x0,
      y => slice1_y_net
    );

  slice2: entity work.xlslice
    generic map (
      new_lsb => 18,
      new_msb => 35,
      x_width => 72,
      y_width => 18
    )
    port map (
      x => delay2_q_net_x0,
      y => slice2_y_net
    );

  slice3: entity work.xlslice
    generic map (
      new_lsb => 36,
      new_msb => 53,
      x_width => 72,
      y_width => 18
    )
    port map (
      x => delay2_q_net_x0,
      y => slice3_y_net
    );

  slice4: entity work.xlslice
    generic map (
      new_lsb => 54,
      new_msb => 71,
      x_width => 72,
      y_width => 18
    )
    port map (
      x => delay2_q_net_x0,
      y => slice4_y_net
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/fine/xilinx_ffts/create_sync"

entity create_sync_entity_c968f2d235 is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    sync_in: in std_logic; 
    xdata: in std_logic_vector(123 downto 0); 
    xdv: in std_logic; 
    data_out: out std_logic_vector(123 downto 0); 
    dv_out: out std_logic; 
    sync_out: out std_logic
  );
end create_sync_entity_c968f2d235;

architecture structural of create_sync_entity_c968f2d235 is
  signal ce_1_sg_x578: std_logic;
  signal clk_1_sg_x578: std_logic;
  signal concatenate_y_net_x5: std_logic_vector(123 downto 0);
  signal delay1_q_net: std_logic_vector(123 downto 0);
  signal delay2_q_net: std_logic;
  signal delay3_q_net_x0: std_logic;
  signal delay4_q_net_x0: std_logic_vector(123 downto 0);
  signal delay_convert_q_net_x4: std_logic;
  signal delay_q_net: std_logic;
  signal fft_pol0_dv_net_x0: std_logic;
  signal inverter_op_net: std_logic;
  signal logical_y_net: std_logic;
  signal register2_q_net: std_logic;
  signal register3_q_net_x0: std_logic;

begin
  ce_1_sg_x578 <= ce_1;
  clk_1_sg_x578 <= clk_1;
  delay_convert_q_net_x4 <= sync_in;
  concatenate_y_net_x5 <= xdata;
  fft_pol0_dv_net_x0 <= xdv;
  data_out <= delay4_q_net_x0;
  dv_out <= delay3_q_net_x0;
  sync_out <= register3_q_net_x0;

  delay: entity work.delay_9f02caa990
    port map (
      ce => ce_1_sg_x578,
      clk => clk_1_sg_x578,
      clr => '0',
      d(0) => fft_pol0_dv_net_x0,
      q(0) => delay_q_net
    );

  delay1: entity work.delay_2940aaa0cf
    port map (
      ce => ce_1_sg_x578,
      clk => clk_1_sg_x578,
      clr => '0',
      d => concatenate_y_net_x5,
      q => delay1_q_net
    );

  delay2: entity work.delay_9f02caa990
    port map (
      ce => ce_1_sg_x578,
      clk => clk_1_sg_x578,
      clr => '0',
      d(0) => fft_pol0_dv_net_x0,
      q(0) => delay2_q_net
    );

  delay3: entity work.delay_9f02caa990
    port map (
      ce => ce_1_sg_x578,
      clk => clk_1_sg_x578,
      clr => '0',
      d(0) => delay2_q_net,
      q(0) => delay3_q_net_x0
    );

  delay4: entity work.delay_2940aaa0cf
    port map (
      ce => ce_1_sg_x578,
      clk => clk_1_sg_x578,
      clr => '0',
      d => delay1_q_net,
      q => delay4_q_net_x0
    );

  inverter: entity work.inverter_e5b38cca3b
    port map (
      ce => ce_1_sg_x578,
      clk => clk_1_sg_x578,
      clr => '0',
      ip(0) => delay_q_net,
      op(0) => inverter_op_net
    );

  logical: entity work.logical_80f90b97d0
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0(0) => fft_pol0_dv_net_x0,
      d1(0) => inverter_op_net,
      y(0) => logical_y_net
    );

  register2: entity work.xlregister
    generic map (
      d_width => 1,
      init_value => b"0"
    )
    port map (
      ce => ce_1_sg_x578,
      clk => clk_1_sg_x578,
      d(0) => delay_convert_q_net_x4,
      en(0) => delay_convert_q_net_x4,
      rst(0) => register3_q_net_x0,
      q(0) => register2_q_net
    );

  register3: entity work.xlregister
    generic map (
      d_width => 1,
      init_value => b"0"
    )
    port map (
      ce => ce_1_sg_x578,
      clk => clk_1_sg_x578,
      d(0) => register2_q_net,
      en(0) => logical_y_net,
      rst(0) => register3_q_net_x0,
      q(0) => register3_q_net_x0
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/fine/xilinx_ffts/create_xstart"

entity create_xstart_entity_c17e97ae68 is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    data: in std_logic_vector(71 downto 0); 
    mrst: in std_logic; 
    sync: in std_logic; 
    xdata_x0: out std_logic_vector(71 downto 0); 
    xrst_x0: out std_logic; 
    xstart_x0: out std_logic
  );
end create_xstart_entity_c17e97ae68;

architecture structural of create_xstart_entity_c17e97ae68 is
  signal arm: std_logic;
  signal ce_1_sg_x579: std_logic;
  signal clk_1_sg_x579: std_logic;
  signal concatenate_y_net_x17: std_logic_vector(71 downto 0);
  signal constant3_op_net: std_logic_vector(18 downto 0);
  signal ctr: std_logic_vector(18 downto 0);
  signal delay2_q_net_x1: std_logic_vector(71 downto 0);
  signal delay_convert_q_net_x5: std_logic;
  signal logical14_y_net_x14: std_logic;
  signal master_en: std_logic;
  signal master_sync: std_logic;
  signal xdata: std_logic_vector(71 downto 0);
  signal xrst_x1: std_logic;
  signal xstart_x1: std_logic;

begin
  ce_1_sg_x579 <= ce_1;
  clk_1_sg_x579 <= clk_1;
  concatenate_y_net_x17 <= data;
  logical14_y_net_x14 <= mrst;
  delay_convert_q_net_x5 <= sync;
  xdata_x0 <= delay2_q_net_x1;
  xrst_x0 <= xrst_x1;
  xstart_x0 <= xstart_x1;

  constant3: entity work.constant_b366689086
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op => constant3_op_net
    );

  counter1: entity work.xlcounter_free_c09f12_01
    generic map (
      core_name0 => "cntr_11_0_ccf1a4007466a9ac",
      op_arith => xlUnsigned,
      op_width => 19
    )
    port map (
      ce => ce_1_sg_x579,
      clk => clk_1_sg_x579,
      clr => '0',
      en(0) => master_en,
      rst(0) => delay_convert_q_net_x5,
      op => ctr
    );

  delay: entity work.delay_a8953e790b
    port map (
      ce => ce_1_sg_x579,
      clk => clk_1_sg_x579,
      clr => '0',
      d => concatenate_y_net_x17,
      q => xdata
    );

  delay1: entity work.delay_9f02caa990
    port map (
      ce => ce_1_sg_x579,
      clk => clk_1_sg_x579,
      clr => '0',
      d(0) => delay_convert_q_net_x5,
      q(0) => xrst_x1
    );

  delay2: entity work.delay_a8953e790b
    port map (
      ce => ce_1_sg_x579,
      clk => clk_1_sg_x579,
      clr => '0',
      d => xdata,
      q => delay2_q_net_x1
    );

  logical2: entity work.logical_80f90b97d0
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0(0) => arm,
      d1(0) => delay_convert_q_net_x5,
      y(0) => master_sync
    );

  register2: entity work.xlregister
    generic map (
      d_width => 1,
      init_value => b"0"
    )
    port map (
      ce => ce_1_sg_x579,
      clk => clk_1_sg_x579,
      d(0) => master_sync,
      en(0) => master_sync,
      rst(0) => logical14_y_net_x14,
      q(0) => master_en
    );

  register5: entity work.xlregister
    generic map (
      d_width => 1,
      init_value => b"0"
    )
    port map (
      ce => ce_1_sg_x579,
      clk => clk_1_sg_x579,
      d(0) => logical14_y_net_x14,
      en(0) => logical14_y_net_x14,
      rst(0) => delay_convert_q_net_x5,
      q(0) => arm
    );

  relational3: entity work.relational_6e0a4878aa
    port map (
      a => ctr,
      b => constant3_op_net,
      ce => ce_1_sg_x579,
      clk => clk_1_sg_x579,
      clr => '0',
      op(0) => xstart_x1
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/fine/xilinx_ffts"

entity xilinx_ffts_entity_8d01634063 is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    data: in std_logic_vector(71 downto 0); 
    mrst: in std_logic; 
    sync: in std_logic; 
    fftor0: out std_logic; 
    fftor1: out std_logic; 
    out_data: out std_logic_vector(123 downto 0); 
    out_sync: out std_logic; 
    out_valid: out std_logic; 
    xk_index: out std_logic_vector(11 downto 0)
  );
end xilinx_ffts_entity_8d01634063;

architecture structural of xilinx_ffts_entity_8d01634063 is
  signal ce_1_sg_x580: std_logic;
  signal clk_1_sg_x580: std_logic;
  signal concatenate_y_net_x18: std_logic_vector(71 downto 0);
  signal concatenate_y_net_x2: std_logic_vector(61 downto 0);
  signal concatenate_y_net_x4: std_logic_vector(61 downto 0);
  signal concatenate_y_net_x5: std_logic_vector(123 downto 0);
  signal constant1_op_net_x2: std_logic;
  signal constant2_op_net: std_logic;
  signal constant3_op_net_x1: std_logic;
  signal constant4_op_net: std_logic;
  signal delay1_q_net_x1: std_logic_vector(11 downto 0);
  signal delay2_q_net_x1: std_logic_vector(71 downto 0);
  signal delay3_q_net_x1: std_logic;
  signal delay4_q_net_x1: std_logic_vector(123 downto 0);
  signal delay_convert_q_net_x6: std_logic;
  signal fft_pol0_done_net: std_logic;
  signal fft_pol0_dv_net_x0: std_logic;
  signal fft_pol0_xk_im_net_x0: std_logic_vector(30 downto 0);
  signal fft_pol0_xk_index_net: std_logic_vector(11 downto 0);
  signal fft_pol0_xk_re_net_x0: std_logic_vector(30 downto 0);
  signal fft_pol1_done_net: std_logic;
  signal fft_pol1_xk_im_net_x0: std_logic_vector(30 downto 0);
  signal fft_pol1_xk_re_net_x0: std_logic_vector(30 downto 0);
  signal logical14_y_net_x15: std_logic;
  signal register3_q_net_x1: std_logic;
  signal reinterpret1_output_port_net_x0: std_logic_vector(17 downto 0);
  signal reinterpret2_output_port_net_x0: std_logic_vector(17 downto 0);
  signal reinterpret3_output_port_net_x0: std_logic_vector(17 downto 0);
  signal reinterpret4_output_port_net_x0: std_logic_vector(17 downto 0);
  signal xrst_x1: std_logic;
  signal xstart_x1: std_logic;

begin
  ce_1_sg_x580 <= ce_1;
  clk_1_sg_x580 <= clk_1;
  concatenate_y_net_x18 <= data;
  logical14_y_net_x15 <= mrst;
  delay_convert_q_net_x6 <= sync;
  fftor0 <= constant3_op_net_x1;
  fftor1 <= constant1_op_net_x2;
  out_data <= delay4_q_net_x1;
  out_sync <= register3_q_net_x1;
  out_valid <= delay3_q_net_x1;
  xk_index <= delay1_q_net_x1;

  bus_create1_4f50c3e796: entity work.bus_create1_entity_4f50c3e796
    port map (
      in1 => fft_pol0_xk_re_net_x0,
      in2 => fft_pol0_xk_im_net_x0,
      bus_out => concatenate_y_net_x2
    );

  bus_create2_f3076a8d6e: entity work.bus_create1_entity_74c8747f81
    port map (
      in1 => concatenate_y_net_x2,
      in2 => concatenate_y_net_x4,
      bus_out => concatenate_y_net_x5
    );

  bus_create3_d71da8ddf5: entity work.bus_create1_entity_4f50c3e796
    port map (
      in1 => fft_pol1_xk_re_net_x0,
      in2 => fft_pol1_xk_im_net_x0,
      bus_out => concatenate_y_net_x4
    );

  bus_expand_d4648db3a8: entity work.bus_expand_entity_d4648db3a8
    port map (
      bus_in => delay2_q_net_x1,
      lsb_out1 => reinterpret1_output_port_net_x0,
      msb_out4 => reinterpret4_output_port_net_x0,
      out2 => reinterpret2_output_port_net_x0,
      out3 => reinterpret3_output_port_net_x0
    );

  constant1: entity work.constant_963ed6358a
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op(0) => constant1_op_net_x2
    );

  constant2: entity work.constant_6293007044
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op(0) => constant2_op_net
    );

  constant3: entity work.constant_963ed6358a
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op(0) => constant3_op_net_x1
    );

  constant4: entity work.constant_6293007044
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op(0) => constant4_op_net
    );

  create_sync_c968f2d235: entity work.create_sync_entity_c968f2d235
    port map (
      ce_1 => ce_1_sg_x580,
      clk_1 => clk_1_sg_x580,
      sync_in => delay_convert_q_net_x6,
      xdata => concatenate_y_net_x5,
      xdv => fft_pol0_dv_net_x0,
      data_out => delay4_q_net_x1,
      dv_out => delay3_q_net_x1,
      sync_out => register3_q_net_x1
    );

  create_xstart_c17e97ae68: entity work.create_xstart_entity_c17e97ae68
    port map (
      ce_1 => ce_1_sg_x580,
      clk_1 => clk_1_sg_x580,
      data => concatenate_y_net_x18,
      mrst => logical14_y_net_x15,
      sync => delay_convert_q_net_x6,
      xdata_x0 => delay2_q_net_x1,
      xrst_x0 => xrst_x1,
      xstart_x0 => xstart_x1
    );

  delay1: entity work.delay_55777e5be4
    port map (
      ce => ce_1_sg_x580,
      clk => clk_1_sg_x580,
      clr => '0',
      d => fft_pol0_xk_index_net,
      q => delay1_q_net_x1
    );

  fft_pol0: entity work.xlfast_fourier_transform_a4ad93cf9e09abed368f778cd25f8340
    port map (
      ce => ce_1_sg_x580,
      clk => clk_1_sg_x580,
      en => constant4_op_net,
      fwd_inv => constant4_op_net,
      fwd_inv_we => constant4_op_net,
      rst => xrst_x1,
      start => xstart_x1,
      unload => fft_pol0_done_net,
      xn_im => reinterpret3_output_port_net_x0,
      xn_re => reinterpret4_output_port_net_x0,
      done => fft_pol0_done_net,
      dv => fft_pol0_dv_net_x0,
      xk_im => fft_pol0_xk_im_net_x0,
      xk_index => fft_pol0_xk_index_net,
      xk_re => fft_pol0_xk_re_net_x0
    );

  fft_pol1: entity work.xlfast_fourier_transform_a4ad93cf9e09abed368f778cd25f8340
    port map (
      ce => ce_1_sg_x580,
      clk => clk_1_sg_x580,
      en => constant2_op_net,
      fwd_inv => constant2_op_net,
      fwd_inv_we => constant2_op_net,
      rst => xrst_x1,
      start => xstart_x1,
      unload => fft_pol1_done_net,
      xn_im => reinterpret1_output_port_net_x0,
      xn_re => reinterpret2_output_port_net_x0,
      done => fft_pol1_done_net,
      xk_im => fft_pol1_xk_im_net_x0,
      xk_re => fft_pol1_xk_re_net_x0
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/fine"

entity fine_entity_d92fd9f38e is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    coarse_chan_sel: in std_logic_vector(9 downto 0); 
    data: in std_logic_vector(71 downto 0); 
    mrst: in std_logic; 
    sync: in std_logic; 
    tvg_en: in std_logic; 
    data_index: out std_logic_vector(19 downto 0); 
    data_out: out std_logic_vector(123 downto 0); 
    fft_dv: out std_logic; 
    fft_or0: out std_logic; 
    fft_or1: out std_logic; 
    snap_128bit: out std_logic_vector(129 downto 0); 
    snap_buffer72: out std_logic_vector(73 downto 0); 
    snap_pfb72: out std_logic_vector(73 downto 0); 
    sync_out: out std_logic
  );
end fine_entity_d92fd9f38e;

architecture structural of fine_entity_d92fd9f38e is
  signal ce_1_sg_x581: std_logic;
  signal clk_1_sg_x581: std_logic;
  signal concat2_y_net: std_logic_vector(127 downto 0);
  signal concat_y_net_x7: std_logic_vector(35 downto 0);
  signal concat_y_net_x8: std_logic_vector(35 downto 0);
  signal concatenate_y_net_x18: std_logic_vector(71 downto 0);
  signal concatenate_y_net_x21: std_logic_vector(73 downto 0);
  signal concatenate_y_net_x22: std_logic_vector(73 downto 0);
  signal concatenate_y_net_x23: std_logic_vector(129 downto 0);
  signal constant1_op_net_x3: std_logic;
  signal constant3_op_net_x2: std_logic;
  signal convert1_dout_net: std_logic_vector(63 downto 0);
  signal convert2_dout_net: std_logic_vector(63 downto 0);
  signal convert6_dout_net: std_logic_vector(127 downto 0);
  signal datao_x2: std_logic_vector(71 downto 0);
  signal datav_x2: std_logic;
  signal delay1_q_net_x0: std_logic_vector(123 downto 0);
  signal delay1_q_net_x1: std_logic_vector(11 downto 0);
  signal delay22_q_net_x2: std_logic;
  signal delay24_q_net_x1: std_logic_vector(71 downto 0);
  signal delay2_q_net: std_logic_vector(123 downto 0);
  signal delay3_q_net_x1: std_logic;
  signal delay4_q_net_x1: std_logic_vector(20 downto 0);
  signal delay4_q_net_x2: std_logic_vector(123 downto 0);
  signal delay4_q_net_x3: std_logic;
  signal delay5_q_net_x2: std_logic;
  signal delay6_q_net_x0: std_logic_vector(19 downto 0);
  signal delay_convert_q_net_x6: std_logic;
  signal delay_dv_q_net_x3: std_logic;
  signal edge_op_y_net_x6: std_logic;
  signal logical14_y_net_x16: std_logic;
  signal mux4_y_net_x0: std_logic_vector(127 downto 0);
  signal mux_y_net_x0: std_logic_vector(19 downto 0);
  signal register3_q_net_x1: std_logic;
  signal register4_q_net_x0: std_logic;
  signal reinterpret1_output_port_net_x2: std_logic_vector(35 downto 0);
  signal reinterpret2_output_port_net_x2: std_logic_vector(35 downto 0);
  signal slice21_y_net_x3: std_logic_vector(9 downto 0);

begin
  ce_1_sg_x581 <= ce_1;
  clk_1_sg_x581 <= clk_1;
  slice21_y_net_x3 <= coarse_chan_sel;
  delay24_q_net_x1 <= data;
  logical14_y_net_x16 <= mrst;
  delay22_q_net_x2 <= sync;
  register4_q_net_x0 <= tvg_en;
  data_index <= delay6_q_net_x0;
  data_out <= delay1_q_net_x0;
  fft_dv <= delay5_q_net_x2;
  fft_or0 <= constant3_op_net_x2;
  fft_or1 <= constant1_op_net_x3;
  snap_128bit <= concatenate_y_net_x23;
  snap_buffer72 <= concatenate_y_net_x21;
  snap_pfb72 <= concatenate_y_net_x22;
  sync_out <= delay4_q_net_x3;

  buffer_f07faed274: entity work.buffer_entity_f07faed274
    port map (
      ce_1 => ce_1_sg_x581,
      clk_1 => clk_1_sg_x581,
      din => delay24_q_net_x1,
      mrst => logical14_y_net_x16,
      sync => delay22_q_net_x2,
      target_x0 => slice21_y_net_x3,
      data => datao_x2,
      dvalid => datav_x2,
      sync_out => edge_op_y_net_x6
    );

  bus_create1_19c2c621ab: entity work.bus_create2_entity_4e455bb1b3
    port map (
      in1 => delay_convert_q_net_x6,
      in2 => concatenate_y_net_x18,
      in3 => delay_dv_q_net_x3,
      bus_out => concatenate_y_net_x21
    );

  bus_create2_8a965a37d1: entity work.bus_create2_entity_4e455bb1b3
    port map (
      in1 => edge_op_y_net_x6,
      in2 => datao_x2,
      in3 => datav_x2,
      bus_out => concatenate_y_net_x22
    );

  bus_create3_4fd647a3c4: entity work.bus_create11_entity_ed14098eb6
    port map (
      in1 => delay4_q_net_x3,
      in2 => mux4_y_net_x0,
      in3 => delay5_q_net_x2,
      bus_out => concatenate_y_net_x23
    );

  bus_create_83736868fc: entity work.bus_create1_entity_3f464d45e8
    port map (
      in1 => concat_y_net_x7,
      in2 => concat_y_net_x8,
      bus_out => concatenate_y_net_x18
    );

  bus_expand1_70a99f462b: entity work.bus_expand1_entity_70a99f462b
    port map (
      bus_in => datao_x2,
      lsb_out1 => reinterpret1_output_port_net_x2,
      msb_out2 => reinterpret2_output_port_net_x2
    );

  concat2: entity work.concat_17f3248be4
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      in0 => convert2_dout_net,
      in1 => convert1_dout_net,
      y => concat2_y_net
    );

  convert1: entity work.xlconvert
    generic map (
      bool_conversion => 0,
      din_arith => 2,
      din_bin_pt => 0,
      din_width => 21,
      dout_arith => 1,
      dout_bin_pt => 0,
      dout_width => 64,
      latency => 0,
      overflow => xlWrap,
      quantization => xlTruncate
    )
    port map (
      ce => ce_1_sg_x581,
      clk => clk_1_sg_x581,
      clr => '0',
      din => delay4_q_net_x1,
      en => "1",
      dout => convert1_dout_net
    );

  convert2: entity work.xlconvert
    generic map (
      bool_conversion => 0,
      din_arith => 2,
      din_bin_pt => 0,
      din_width => 20,
      dout_arith => 1,
      dout_bin_pt => 0,
      dout_width => 64,
      latency => 0,
      overflow => xlWrap,
      quantization => xlTruncate
    )
    port map (
      ce => ce_1_sg_x581,
      clk => clk_1_sg_x581,
      clr => '0',
      din => mux_y_net_x0,
      en => "1",
      dout => convert2_dout_net
    );

  convert6: entity work.xlconvert
    generic map (
      bool_conversion => 0,
      din_arith => 1,
      din_bin_pt => 0,
      din_width => 124,
      dout_arith => 1,
      dout_bin_pt => 0,
      dout_width => 128,
      latency => 0,
      overflow => xlWrap,
      quantization => xlTruncate
    )
    port map (
      ce => ce_1_sg_x581,
      clk => clk_1_sg_x581,
      clr => '0',
      din => delay2_q_net,
      en => "1",
      dout => convert6_dout_net
    );

  delay1: entity work.delay_bbdca7d4e2
    port map (
      ce => ce_1_sg_x581,
      clk => clk_1_sg_x581,
      clr => '0',
      d => delay4_q_net_x2,
      q => delay1_q_net_x0
    );

  delay2: entity work.delay_2940aaa0cf
    port map (
      ce => ce_1_sg_x581,
      clk => clk_1_sg_x581,
      clr => '0',
      d => delay4_q_net_x2,
      q => delay2_q_net
    );

  delay4: entity work.delay_e18fb31a3d
    port map (
      ce => ce_1_sg_x581,
      clk => clk_1_sg_x581,
      clr => '0',
      d(0) => register3_q_net_x1,
      q(0) => delay4_q_net_x3
    );

  delay5: entity work.delay_e18fb31a3d
    port map (
      ce => ce_1_sg_x581,
      clk => clk_1_sg_x581,
      clr => '0',
      d(0) => delay3_q_net_x1,
      q(0) => delay5_q_net_x2
    );

  delay6: entity work.delay_a5c036284d
    port map (
      ce => ce_1_sg_x581,
      clk => clk_1_sg_x581,
      clr => '0',
      d => mux_y_net_x0,
      q => delay6_q_net_x0
    );

  indexgen_9d60342707: entity work.indexgen_entity_9d60342707
    port map (
      ce_1 => ce_1_sg_x581,
      clk_1 => clk_1_sg_x581,
      coarse_chan => slice21_y_net_x3,
      xk_index => delay1_q_net_x1,
      index_x0 => mux_y_net_x0,
      offset_x0 => delay4_q_net_x1
    );

  mux4: entity work.mux_6203b36850
    port map (
      ce => ce_1_sg_x581,
      clk => clk_1_sg_x581,
      clr => '0',
      d0 => convert6_dout_net,
      d1 => concat2_y_net,
      sel(0) => register4_q_net_x0,
      y => mux4_y_net_x0
    );

  pfb_fir_async1_179eba1a8c: entity work.pfb_fir_async1_entity_179eba1a8c
    port map (
      ce_1 => ce_1_sg_x581,
      clk_1 => clk_1_sg_x581,
      dv => datav_x2,
      pol1_in1 => reinterpret2_output_port_net_x2,
      pol1_in2 => reinterpret1_output_port_net_x2,
      sync => edge_op_y_net_x6,
      dv_out => delay_dv_q_net_x3,
      pol1_out1 => concat_y_net_x7,
      pol1_out2 => concat_y_net_x8,
      sync_out => delay_convert_q_net_x6
    );

  xilinx_ffts_8d01634063: entity work.xilinx_ffts_entity_8d01634063
    port map (
      ce_1 => ce_1_sg_x581,
      clk_1 => clk_1_sg_x581,
      data => concatenate_y_net_x18,
      mrst => logical14_y_net_x16,
      sync => delay_convert_q_net_x6,
      fftor0 => constant3_op_net_x2,
      fftor1 => constant1_op_net_x3,
      out_data => delay4_q_net_x2,
      out_sync => register3_q_net_x1,
      out_valid => delay3_q_net_x1,
      xk_index => delay1_q_net_x1
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/gbe0"

entity gbe0_entity_a4d9102883 is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    rst: in std_logic; 
    rx_ack: in std_logic; 
    tx_data: in std_logic_vector(63 downto 0); 
    tx_dest_ip: in std_logic_vector(31 downto 0); 
    tx_dest_port: in std_logic_vector(31 downto 0); 
    tx_end_of_frame: in std_logic; 
    tx_valid: in std_logic; 
    convert_rst_x0: out std_logic; 
    convert_rx_ack_x0: out std_logic; 
    convert_rx_overrun_ack_x0: out std_logic; 
    convert_tx_data_x0: out std_logic_vector(63 downto 0); 
    convert_tx_dest_ip_x0: out std_logic_vector(31 downto 0); 
    convert_tx_end_of_frame_x0: out std_logic; 
    convert_tx_port_x0: out std_logic_vector(15 downto 0); 
    convert_tx_valid_x0: out std_logic
  );
end gbe0_entity_a4d9102883;

architecture structural of gbe0_entity_a4d9102883 is
  signal ce_1_sg_x584: std_logic;
  signal clk_1_sg_x584: std_logic;
  signal constant14_op_net_x0: std_logic;
  signal convert_rst_dout_net_x0: std_logic;
  signal convert_rx_ack_dout_net_x0: std_logic;
  signal convert_rx_overrun_ack_dout_net_x0: std_logic;
  signal convert_tx_data_dout_net_x0: std_logic_vector(63 downto 0);
  signal convert_tx_dest_ip_dout_net_x0: std_logic_vector(31 downto 0);
  signal convert_tx_end_of_frame_dout_net_x0: std_logic;
  signal convert_tx_port_dout_net_x0: std_logic_vector(15 downto 0);
  signal convert_tx_valid_dout_net_x0: std_logic;
  signal delay36_q_net_x0: std_logic_vector(31 downto 0);
  signal logical2_y_net_x2: std_logic;
  signal logical3_y_net_x0: std_logic;
  signal register0_q_net_x7: std_logic_vector(31 downto 0);
  signal register0_q_net_x8: std_logic;
  signal register0_q_net_x9: std_logic_vector(63 downto 0);

begin
  ce_1_sg_x584 <= ce_1;
  clk_1_sg_x584 <= clk_1;
  logical3_y_net_x0 <= rst;
  constant14_op_net_x0 <= rx_ack;
  register0_q_net_x9 <= tx_data;
  register0_q_net_x7 <= tx_dest_ip;
  delay36_q_net_x0 <= tx_dest_port;
  register0_q_net_x8 <= tx_end_of_frame;
  logical2_y_net_x2 <= tx_valid;
  convert_rst_x0 <= convert_rst_dout_net_x0;
  convert_rx_ack_x0 <= convert_rx_ack_dout_net_x0;
  convert_rx_overrun_ack_x0 <= convert_rx_overrun_ack_dout_net_x0;
  convert_tx_data_x0 <= convert_tx_data_dout_net_x0;
  convert_tx_dest_ip_x0 <= convert_tx_dest_ip_dout_net_x0;
  convert_tx_end_of_frame_x0 <= convert_tx_end_of_frame_dout_net_x0;
  convert_tx_port_x0 <= convert_tx_port_dout_net_x0;
  convert_tx_valid_x0 <= convert_tx_valid_dout_net_x0;

  convert_rst: entity work.xlconvert
    generic map (
      bool_conversion => 1,
      din_arith => 1,
      din_bin_pt => 0,
      din_width => 1,
      dout_arith => 1,
      dout_bin_pt => 0,
      dout_width => 1,
      latency => 0,
      overflow => xlWrap,
      quantization => xlTruncate
    )
    port map (
      ce => ce_1_sg_x584,
      clk => clk_1_sg_x584,
      clr => '0',
      din(0) => logical3_y_net_x0,
      en => "1",
      dout(0) => convert_rst_dout_net_x0
    );

  convert_rx_ack: entity work.xlconvert
    generic map (
      bool_conversion => 1,
      din_arith => 1,
      din_bin_pt => 0,
      din_width => 1,
      dout_arith => 1,
      dout_bin_pt => 0,
      dout_width => 1,
      latency => 0,
      overflow => xlWrap,
      quantization => xlTruncate
    )
    port map (
      ce => ce_1_sg_x584,
      clk => clk_1_sg_x584,
      clr => '0',
      din(0) => constant14_op_net_x0,
      en => "1",
      dout(0) => convert_rx_ack_dout_net_x0
    );

  convert_rx_overrun_ack: entity work.xlconvert
    generic map (
      bool_conversion => 1,
      din_arith => 1,
      din_bin_pt => 0,
      din_width => 1,
      dout_arith => 1,
      dout_bin_pt => 0,
      dout_width => 1,
      latency => 0,
      overflow => xlWrap,
      quantization => xlTruncate
    )
    port map (
      ce => ce_1_sg_x584,
      clk => clk_1_sg_x584,
      clr => '0',
      din(0) => constant14_op_net_x0,
      en => "1",
      dout(0) => convert_rx_overrun_ack_dout_net_x0
    );

  convert_tx_data: entity work.xlconvert
    generic map (
      bool_conversion => 0,
      din_arith => 1,
      din_bin_pt => 0,
      din_width => 64,
      dout_arith => 1,
      dout_bin_pt => 0,
      dout_width => 64,
      latency => 0,
      overflow => xlWrap,
      quantization => xlTruncate
    )
    port map (
      ce => ce_1_sg_x584,
      clk => clk_1_sg_x584,
      clr => '0',
      din => register0_q_net_x9,
      en => "1",
      dout => convert_tx_data_dout_net_x0
    );

  convert_tx_dest_ip: entity work.xlconvert
    generic map (
      bool_conversion => 0,
      din_arith => 1,
      din_bin_pt => 0,
      din_width => 32,
      dout_arith => 1,
      dout_bin_pt => 0,
      dout_width => 32,
      latency => 0,
      overflow => xlWrap,
      quantization => xlTruncate
    )
    port map (
      ce => ce_1_sg_x584,
      clk => clk_1_sg_x584,
      clr => '0',
      din => register0_q_net_x7,
      en => "1",
      dout => convert_tx_dest_ip_dout_net_x0
    );

  convert_tx_end_of_frame: entity work.xlconvert
    generic map (
      bool_conversion => 1,
      din_arith => 1,
      din_bin_pt => 0,
      din_width => 1,
      dout_arith => 1,
      dout_bin_pt => 0,
      dout_width => 1,
      latency => 0,
      overflow => xlWrap,
      quantization => xlTruncate
    )
    port map (
      ce => ce_1_sg_x584,
      clk => clk_1_sg_x584,
      clr => '0',
      din(0) => register0_q_net_x8,
      en => "1",
      dout(0) => convert_tx_end_of_frame_dout_net_x0
    );

  convert_tx_port: entity work.xlconvert
    generic map (
      bool_conversion => 0,
      din_arith => 1,
      din_bin_pt => 0,
      din_width => 32,
      dout_arith => 1,
      dout_bin_pt => 0,
      dout_width => 16,
      latency => 0,
      overflow => xlWrap,
      quantization => xlTruncate
    )
    port map (
      ce => ce_1_sg_x584,
      clk => clk_1_sg_x584,
      clr => '0',
      din => delay36_q_net_x0,
      en => "1",
      dout => convert_tx_port_dout_net_x0
    );

  convert_tx_valid: entity work.xlconvert
    generic map (
      bool_conversion => 1,
      din_arith => 1,
      din_bin_pt => 0,
      din_width => 1,
      dout_arith => 1,
      dout_bin_pt => 0,
      dout_width => 1,
      latency => 0,
      overflow => xlWrap,
      quantization => xlTruncate
    )
    port map (
      ce => ce_1_sg_x584,
      clk => clk_1_sg_x584,
      clr => '0',
      din(0) => logical2_y_net_x2,
      en => "1",
      dout(0) => convert_tx_valid_dout_net_x0
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/gbe_err"

entity gbe_err_entity_4ff5b5b3bc is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    discard: in std_logic; 
    eof: in std_logic; 
    rst: in std_logic; 
    valid: in std_logic; 
    err_cnt: out std_logic_vector(31 downto 0); 
    tx_cnt: out std_logic_vector(31 downto 0)
  );
end gbe_err_entity_4ff5b5b3bc;

architecture structural of gbe_err_entity_4ff5b5b3bc is
  signal ce_1_sg_x585: std_logic;
  signal clk_1_sg_x585: std_logic;
  signal constant2_op_net: std_logic_vector(6 downto 0);
  signal delay17_q_net: std_logic;
  signal delay1_q_net: std_logic;
  signal delay2_q_net: std_logic;
  signal delay3_q_net: std_logic;
  signal edge_op_y_net_x3: std_logic;
  signal inverter3_op_net: std_logic;
  signal logical1_y_net: std_logic;
  signal logical2_y_net: std_logic;
  signal logical2_y_net_x3: std_logic;
  signal logical3_y_net: std_logic;
  signal logical4_y_net: std_logic;
  signal logical5_y_net: std_logic;
  signal logical6_y_net: std_logic;
  signal payload_cnt1_op_net_x0: std_logic_vector(31 downto 0);
  signal payload_cnt2_op_net: std_logic_vector(6 downto 0);
  signal payload_cnt_op_net_x0: std_logic_vector(31 downto 0);
  signal register0_q_net_x1: std_logic;
  signal register0_q_net_x9: std_logic;
  signal relational1_op_net: std_logic;

begin
  ce_1_sg_x585 <= ce_1;
  clk_1_sg_x585 <= clk_1;
  register0_q_net_x1 <= discard;
  register0_q_net_x9 <= eof;
  edge_op_y_net_x3 <= rst;
  logical2_y_net_x3 <= valid;
  err_cnt <= payload_cnt1_op_net_x0;
  tx_cnt <= payload_cnt_op_net_x0;

  constant2: entity work.constant_473db002f8
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op => constant2_op_net
    );

  delay1: entity work.delay_e18fb31a3d
    port map (
      ce => ce_1_sg_x585,
      clk => clk_1_sg_x585,
      clr => '0',
      d(0) => register0_q_net_x1,
      q(0) => delay1_q_net
    );

  delay17: entity work.delay_e18fb31a3d
    port map (
      ce => ce_1_sg_x585,
      clk => clk_1_sg_x585,
      clr => '0',
      d(0) => edge_op_y_net_x3,
      q(0) => delay17_q_net
    );

  delay2: entity work.delay_e18fb31a3d
    port map (
      ce => ce_1_sg_x585,
      clk => clk_1_sg_x585,
      clr => '0',
      d(0) => register0_q_net_x9,
      q(0) => delay2_q_net
    );

  delay3: entity work.delay_e18fb31a3d
    port map (
      ce => ce_1_sg_x585,
      clk => clk_1_sg_x585,
      clr => '0',
      d(0) => logical2_y_net_x3,
      q(0) => delay3_q_net
    );

  inverter3: entity work.inverter_e5b38cca3b
    port map (
      ce => ce_1_sg_x585,
      clk => clk_1_sg_x585,
      clr => '0',
      ip(0) => delay1_q_net,
      op(0) => inverter3_op_net
    );

  logical1: entity work.logical_80f90b97d0
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0(0) => logical6_y_net,
      d1(0) => delay3_q_net,
      y(0) => logical1_y_net
    );

  logical2: entity work.logical_aacf6e1b0e
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0(0) => logical4_y_net,
      d1(0) => logical5_y_net,
      y(0) => logical2_y_net
    );

  logical3: entity work.logical_954ee29728
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0(0) => inverter3_op_net,
      d1(0) => delay2_q_net,
      d2(0) => delay3_q_net,
      y(0) => logical3_y_net
    );

  logical4: entity work.logical_80f90b97d0
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0(0) => delay3_q_net,
      d1(0) => delay1_q_net,
      y(0) => logical4_y_net
    );

  logical5: entity work.logical_80f90b97d0
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0(0) => logical1_y_net,
      d1(0) => relational1_op_net,
      y(0) => logical5_y_net
    );

  logical6: entity work.logical_aacf6e1b0e
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0(0) => delay1_q_net,
      d1(0) => delay2_q_net,
      y(0) => logical6_y_net
    );

  payload_cnt: entity work.xlcounter_free_c09f12_01
    generic map (
      core_name0 => "cntr_11_0_0400b347688ef51a",
      op_arith => xlUnsigned,
      op_width => 32
    )
    port map (
      ce => ce_1_sg_x585,
      clk => clk_1_sg_x585,
      clr => '0',
      en(0) => logical3_y_net,
      rst(0) => delay17_q_net,
      op => payload_cnt_op_net_x0
    );

  payload_cnt1: entity work.xlcounter_free_c09f12_01
    generic map (
      core_name0 => "cntr_11_0_0400b347688ef51a",
      op_arith => xlUnsigned,
      op_width => 32
    )
    port map (
      ce => ce_1_sg_x585,
      clk => clk_1_sg_x585,
      clr => '0',
      en(0) => logical2_y_net,
      rst(0) => delay17_q_net,
      op => payload_cnt1_op_net_x0
    );

  payload_cnt2: entity work.xlcounter_free_c09f12_01
    generic map (
      core_name0 => "cntr_11_0_aeada998ec385fcd",
      op_arith => xlUnsigned,
      op_width => 7
    )
    port map (
      ce => ce_1_sg_x585,
      clk => clk_1_sg_x585,
      clr => '0',
      en(0) => delay3_q_net,
      rst(0) => logical1_y_net,
      op => payload_cnt2_op_net
    );

  relational1: entity work.relational_23065a6aa3
    port map (
      a => payload_cnt2_op_net,
      b => constant2_op_net,
      ce => '0',
      clk => '0',
      clr => '0',
      op(0) => relational1_op_net
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/katadc0"

entity katadc0_entity_180325740b is
  port (
    atten0: in std_logic_vector(5 downto 0); 
    atten1: in std_logic_vector(5 downto 0); 
    c09f12_01_katadc0_user_datai0: in std_logic_vector(7 downto 0); 
    c09f12_01_katadc0_user_datai1: in std_logic_vector(7 downto 0); 
    c09f12_01_katadc0_user_datai2: in std_logic_vector(7 downto 0); 
    c09f12_01_katadc0_user_datai3: in std_logic_vector(7 downto 0); 
    c09f12_01_katadc0_user_dataq0: in std_logic_vector(7 downto 0); 
    c09f12_01_katadc0_user_dataq1: in std_logic_vector(7 downto 0); 
    c09f12_01_katadc0_user_dataq2: in std_logic_vector(7 downto 0); 
    c09f12_01_katadc0_user_dataq3: in std_logic_vector(7 downto 0); 
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    en0: in std_logic; 
    en1: in std_logic; 
    cast0_x0: out std_logic_vector(13 downto 0); 
    cast1_x0: out std_logic; 
    data0_0: out std_logic_vector(7 downto 0); 
    data0_1: out std_logic_vector(7 downto 0); 
    data0_2: out std_logic_vector(7 downto 0); 
    data0_3: out std_logic_vector(7 downto 0); 
    data1_0: out std_logic_vector(7 downto 0); 
    data1_1: out std_logic_vector(7 downto 0); 
    data1_2: out std_logic_vector(7 downto 0); 
    data1_3: out std_logic_vector(7 downto 0)
  );
end katadc0_entity_180325740b;

architecture structural of katadc0_entity_180325740b is
  signal c09f12_01_katadc0_user_datai0_net_x0: std_logic_vector(7 downto 0);
  signal c09f12_01_katadc0_user_datai1_net_x0: std_logic_vector(7 downto 0);
  signal c09f12_01_katadc0_user_datai2_net_x0: std_logic_vector(7 downto 0);
  signal c09f12_01_katadc0_user_datai3_net_x0: std_logic_vector(7 downto 0);
  signal c09f12_01_katadc0_user_dataq0_net_x0: std_logic_vector(7 downto 0);
  signal c09f12_01_katadc0_user_dataq1_net_x0: std_logic_vector(7 downto 0);
  signal c09f12_01_katadc0_user_dataq2_net_x0: std_logic_vector(7 downto 0);
  signal c09f12_01_katadc0_user_dataq3_net_x0: std_logic_vector(7 downto 0);
  signal cast0_dout_net_x0: std_logic_vector(13 downto 0);
  signal cast1_dout_net_x0: std_logic;
  signal ce_1_sg_x588: std_logic;
  signal changed_op_net: std_logic;
  signal clk_1_sg_x588: std_logic;
  signal con_y_net: std_logic_vector(14 downto 0);
  signal concat0_0_y_net: std_logic_vector(7 downto 0);
  signal concat0_1_y_net: std_logic_vector(7 downto 0);
  signal concat0_2_y_net: std_logic_vector(7 downto 0);
  signal concat0_3_y_net: std_logic_vector(7 downto 0);
  signal concat1_0_y_net: std_logic_vector(7 downto 0);
  signal concat1_1_y_net: std_logic_vector(7 downto 0);
  signal concat1_2_y_net: std_logic_vector(7 downto 0);
  signal concat1_3_y_net: std_logic_vector(7 downto 0);
  signal inv0_0_op_net: std_logic;
  signal inv0_1_op_net: std_logic;
  signal inv0_2_op_net: std_logic;
  signal inv0_3_op_net: std_logic;
  signal inv0_op_net: std_logic_vector(5 downto 0);
  signal inv1_0_op_net: std_logic;
  signal inv1_1_op_net: std_logic;
  signal inv1_2_op_net: std_logic;
  signal inv1_3_op_net: std_logic;
  signal inv1_op_net: std_logic_vector(5 downto 0);
  signal logical10_y_net_x0: std_logic;
  signal logical8_y_net_x0: std_logic;
  signal reg_q_net: std_logic_vector(14 downto 0);
  signal reinterpret0_0_output_port_net_x1: std_logic_vector(7 downto 0);
  signal reinterpret0_1_output_port_net_x1: std_logic_vector(7 downto 0);
  signal reinterpret0_2_output_port_net_x1: std_logic_vector(7 downto 0);
  signal reinterpret0_3_output_port_net_x1: std_logic_vector(7 downto 0);
  signal reinterpret1_0_output_port_net_x1: std_logic_vector(7 downto 0);
  signal reinterpret1_1_output_port_net_x1: std_logic_vector(7 downto 0);
  signal reinterpret1_2_output_port_net_x1: std_logic_vector(7 downto 0);
  signal reinterpret1_3_output_port_net_x1: std_logic_vector(7 downto 0);
  signal sign0_0_y_net: std_logic;
  signal sign0_1_y_net: std_logic;
  signal sign0_2_y_net: std_logic;
  signal sign0_3_y_net: std_logic;
  signal sign1_0_y_net: std_logic;
  signal sign1_1_y_net: std_logic;
  signal sign1_2_y_net: std_logic;
  signal sign1_3_y_net: std_logic;
  signal slc0_y_net: std_logic;
  signal slc1_y_net: std_logic_vector(5 downto 0);
  signal slc2_y_net: std_logic;
  signal slc3_y_net: std_logic_vector(5 downto 0);
  signal slc4_y_net: std_logic_vector(13 downto 0);
  signal slice30_y_net_x0: std_logic_vector(5 downto 0);
  signal slice34_y_net_x0: std_logic_vector(5 downto 0);
  signal trigger_op_net: std_logic;
  signal val0_0_y_net: std_logic_vector(6 downto 0);
  signal val0_1_y_net: std_logic_vector(6 downto 0);
  signal val0_2_y_net: std_logic_vector(6 downto 0);
  signal val0_3_y_net: std_logic_vector(6 downto 0);
  signal val1_0_y_net: std_logic_vector(6 downto 0);
  signal val1_1_y_net: std_logic_vector(6 downto 0);
  signal val1_2_y_net: std_logic_vector(6 downto 0);
  signal val1_3_y_net: std_logic_vector(6 downto 0);

begin
  slice30_y_net_x0 <= atten0;
  slice34_y_net_x0 <= atten1;
  c09f12_01_katadc0_user_datai0_net_x0 <= c09f12_01_katadc0_user_datai0;
  c09f12_01_katadc0_user_datai1_net_x0 <= c09f12_01_katadc0_user_datai1;
  c09f12_01_katadc0_user_datai2_net_x0 <= c09f12_01_katadc0_user_datai2;
  c09f12_01_katadc0_user_datai3_net_x0 <= c09f12_01_katadc0_user_datai3;
  c09f12_01_katadc0_user_dataq0_net_x0 <= c09f12_01_katadc0_user_dataq0;
  c09f12_01_katadc0_user_dataq1_net_x0 <= c09f12_01_katadc0_user_dataq1;
  c09f12_01_katadc0_user_dataq2_net_x0 <= c09f12_01_katadc0_user_dataq2;
  c09f12_01_katadc0_user_dataq3_net_x0 <= c09f12_01_katadc0_user_dataq3;
  ce_1_sg_x588 <= ce_1;
  clk_1_sg_x588 <= clk_1;
  logical8_y_net_x0 <= en0;
  logical10_y_net_x0 <= en1;
  cast0_x0 <= cast0_dout_net_x0;
  cast1_x0 <= cast1_dout_net_x0;
  data0_0 <= reinterpret0_0_output_port_net_x1;
  data0_1 <= reinterpret0_1_output_port_net_x1;
  data0_2 <= reinterpret0_2_output_port_net_x1;
  data0_3 <= reinterpret0_3_output_port_net_x1;
  data1_0 <= reinterpret1_0_output_port_net_x1;
  data1_1 <= reinterpret1_1_output_port_net_x1;
  data1_2 <= reinterpret1_2_output_port_net_x1;
  data1_3 <= reinterpret1_3_output_port_net_x1;

  cast0: entity work.xlconvert
    generic map (
      bool_conversion => 0,
      din_arith => 1,
      din_bin_pt => 0,
      din_width => 14,
      dout_arith => 1,
      dout_bin_pt => 0,
      dout_width => 14,
      latency => 0,
      overflow => xlWrap,
      quantization => xlTruncate
    )
    port map (
      ce => ce_1_sg_x588,
      clk => clk_1_sg_x588,
      clr => '0',
      din => slc4_y_net,
      en => "1",
      dout => cast0_dout_net_x0
    );

  cast1: entity work.xlconvert
    generic map (
      bool_conversion => 1,
      din_arith => 1,
      din_bin_pt => 0,
      din_width => 1,
      dout_arith => 1,
      dout_bin_pt => 0,
      dout_width => 1,
      latency => 0,
      overflow => xlWrap,
      quantization => xlTruncate
    )
    port map (
      ce => ce_1_sg_x588,
      clk => clk_1_sg_x588,
      clr => '0',
      din(0) => changed_op_net,
      en => "1",
      dout(0) => cast1_dout_net_x0
    );

  changed: entity work.relational_5d2bc997de
    port map (
      a => reg_q_net,
      b => con_y_net,
      ce => ce_1_sg_x588,
      clk => clk_1_sg_x588,
      clr => '0',
      op(0) => changed_op_net
    );

  con: entity work.concat_e3f217b04f
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      in0(0) => trigger_op_net,
      in1(0) => slc2_y_net,
      in2 => inv1_op_net,
      in3(0) => slc0_y_net,
      in4 => inv0_op_net,
      y => con_y_net
    );

  concat0_0: entity work.concat_83e473517e
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      in0(0) => inv0_0_op_net,
      in1 => val0_0_y_net,
      y => concat0_0_y_net
    );

  concat0_1: entity work.concat_83e473517e
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      in0(0) => inv0_1_op_net,
      in1 => val0_1_y_net,
      y => concat0_1_y_net
    );

  concat0_2: entity work.concat_83e473517e
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      in0(0) => inv0_2_op_net,
      in1 => val0_2_y_net,
      y => concat0_2_y_net
    );

  concat0_3: entity work.concat_83e473517e
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      in0(0) => inv0_3_op_net,
      in1 => val0_3_y_net,
      y => concat0_3_y_net
    );

  concat1_0: entity work.concat_83e473517e
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      in0(0) => inv1_0_op_net,
      in1 => val1_0_y_net,
      y => concat1_0_y_net
    );

  concat1_1: entity work.concat_83e473517e
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      in0(0) => inv1_1_op_net,
      in1 => val1_1_y_net,
      y => concat1_1_y_net
    );

  concat1_2: entity work.concat_83e473517e
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      in0(0) => inv1_2_op_net,
      in1 => val1_2_y_net,
      y => concat1_2_y_net
    );

  concat1_3: entity work.concat_83e473517e
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      in0(0) => inv1_3_op_net,
      in1 => val1_3_y_net,
      y => concat1_3_y_net
    );

  inv0: entity work.inverter_62c5f03117
    port map (
      ce => ce_1_sg_x588,
      clk => clk_1_sg_x588,
      clr => '0',
      ip => slc1_y_net,
      op => inv0_op_net
    );

  inv0_0: entity work.inverter_e2b989a05e
    port map (
      ce => ce_1_sg_x588,
      clk => clk_1_sg_x588,
      clr => '0',
      ip(0) => sign0_0_y_net,
      op(0) => inv0_0_op_net
    );

  inv0_1: entity work.inverter_e2b989a05e
    port map (
      ce => ce_1_sg_x588,
      clk => clk_1_sg_x588,
      clr => '0',
      ip(0) => sign0_1_y_net,
      op(0) => inv0_1_op_net
    );

  inv0_2: entity work.inverter_e2b989a05e
    port map (
      ce => ce_1_sg_x588,
      clk => clk_1_sg_x588,
      clr => '0',
      ip(0) => sign0_2_y_net,
      op(0) => inv0_2_op_net
    );

  inv0_3: entity work.inverter_e2b989a05e
    port map (
      ce => ce_1_sg_x588,
      clk => clk_1_sg_x588,
      clr => '0',
      ip(0) => sign0_3_y_net,
      op(0) => inv0_3_op_net
    );

  inv1: entity work.inverter_62c5f03117
    port map (
      ce => ce_1_sg_x588,
      clk => clk_1_sg_x588,
      clr => '0',
      ip => slc3_y_net,
      op => inv1_op_net
    );

  inv1_0: entity work.inverter_e2b989a05e
    port map (
      ce => ce_1_sg_x588,
      clk => clk_1_sg_x588,
      clr => '0',
      ip(0) => sign1_0_y_net,
      op(0) => inv1_0_op_net
    );

  inv1_1: entity work.inverter_e2b989a05e
    port map (
      ce => ce_1_sg_x588,
      clk => clk_1_sg_x588,
      clr => '0',
      ip(0) => sign1_1_y_net,
      op(0) => inv1_1_op_net
    );

  inv1_2: entity work.inverter_e2b989a05e
    port map (
      ce => ce_1_sg_x588,
      clk => clk_1_sg_x588,
      clr => '0',
      ip(0) => sign1_2_y_net,
      op(0) => inv1_2_op_net
    );

  inv1_3: entity work.inverter_e2b989a05e
    port map (
      ce => ce_1_sg_x588,
      clk => clk_1_sg_x588,
      clr => '0',
      ip(0) => sign1_3_y_net,
      op(0) => inv1_3_op_net
    );

  reg_x0: entity work.xlregister
    generic map (
      d_width => 15,
      init_value => b"000000000000000"
    )
    port map (
      ce => ce_1_sg_x588,
      clk => clk_1_sg_x588,
      d => con_y_net,
      en => "1",
      rst => "0",
      q => reg_q_net
    );

  reinterpret0_0: entity work.reinterpret_4389dc89bf
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => concat0_0_y_net,
      output_port => reinterpret0_0_output_port_net_x1
    );

  reinterpret0_1: entity work.reinterpret_4389dc89bf
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => concat0_1_y_net,
      output_port => reinterpret0_1_output_port_net_x1
    );

  reinterpret0_2: entity work.reinterpret_4389dc89bf
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => concat0_2_y_net,
      output_port => reinterpret0_2_output_port_net_x1
    );

  reinterpret0_3: entity work.reinterpret_4389dc89bf
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => concat0_3_y_net,
      output_port => reinterpret0_3_output_port_net_x1
    );

  reinterpret1_0: entity work.reinterpret_4389dc89bf
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => concat1_0_y_net,
      output_port => reinterpret1_0_output_port_net_x1
    );

  reinterpret1_1: entity work.reinterpret_4389dc89bf
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => concat1_1_y_net,
      output_port => reinterpret1_1_output_port_net_x1
    );

  reinterpret1_2: entity work.reinterpret_4389dc89bf
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => concat1_2_y_net,
      output_port => reinterpret1_2_output_port_net_x1
    );

  reinterpret1_3: entity work.reinterpret_4389dc89bf
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => concat1_3_y_net,
      output_port => reinterpret1_3_output_port_net_x1
    );

  sign0_0: entity work.xlslice
    generic map (
      new_lsb => 7,
      new_msb => 7,
      x_width => 8,
      y_width => 1
    )
    port map (
      x => c09f12_01_katadc0_user_datai0_net_x0,
      y(0) => sign0_0_y_net
    );

  sign0_1: entity work.xlslice
    generic map (
      new_lsb => 7,
      new_msb => 7,
      x_width => 8,
      y_width => 1
    )
    port map (
      x => c09f12_01_katadc0_user_datai1_net_x0,
      y(0) => sign0_1_y_net
    );

  sign0_2: entity work.xlslice
    generic map (
      new_lsb => 7,
      new_msb => 7,
      x_width => 8,
      y_width => 1
    )
    port map (
      x => c09f12_01_katadc0_user_datai2_net_x0,
      y(0) => sign0_2_y_net
    );

  sign0_3: entity work.xlslice
    generic map (
      new_lsb => 7,
      new_msb => 7,
      x_width => 8,
      y_width => 1
    )
    port map (
      x => c09f12_01_katadc0_user_datai3_net_x0,
      y(0) => sign0_3_y_net
    );

  sign1_0: entity work.xlslice
    generic map (
      new_lsb => 7,
      new_msb => 7,
      x_width => 8,
      y_width => 1
    )
    port map (
      x => c09f12_01_katadc0_user_dataq0_net_x0,
      y(0) => sign1_0_y_net
    );

  sign1_1: entity work.xlslice
    generic map (
      new_lsb => 7,
      new_msb => 7,
      x_width => 8,
      y_width => 1
    )
    port map (
      x => c09f12_01_katadc0_user_dataq1_net_x0,
      y(0) => sign1_1_y_net
    );

  sign1_2: entity work.xlslice
    generic map (
      new_lsb => 7,
      new_msb => 7,
      x_width => 8,
      y_width => 1
    )
    port map (
      x => c09f12_01_katadc0_user_dataq2_net_x0,
      y(0) => sign1_2_y_net
    );

  sign1_3: entity work.xlslice
    generic map (
      new_lsb => 7,
      new_msb => 7,
      x_width => 8,
      y_width => 1
    )
    port map (
      x => c09f12_01_katadc0_user_dataq3_net_x0,
      y(0) => sign1_3_y_net
    );

  slc0: entity work.xlslice
    generic map (
      new_lsb => 0,
      new_msb => 0,
      x_width => 1,
      y_width => 1
    )
    port map (
      x(0) => logical8_y_net_x0,
      y(0) => slc0_y_net
    );

  slc1: entity work.xlslice
    generic map (
      new_lsb => 0,
      new_msb => 5,
      x_width => 6,
      y_width => 6
    )
    port map (
      x => slice30_y_net_x0,
      y => slc1_y_net
    );

  slc2: entity work.xlslice
    generic map (
      new_lsb => 0,
      new_msb => 0,
      x_width => 1,
      y_width => 1
    )
    port map (
      x(0) => logical10_y_net_x0,
      y(0) => slc2_y_net
    );

  slc3: entity work.xlslice
    generic map (
      new_lsb => 0,
      new_msb => 5,
      x_width => 6,
      y_width => 6
    )
    port map (
      x => slice34_y_net_x0,
      y => slc3_y_net
    );

  slc4: entity work.xlslice
    generic map (
      new_lsb => 0,
      new_msb => 13,
      x_width => 15,
      y_width => 14
    )
    port map (
      x => reg_q_net,
      y => slc4_y_net
    );

  trigger: entity work.constant_6293007044
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op(0) => trigger_op_net
    );

  val0_0: entity work.xlslice
    generic map (
      new_lsb => 0,
      new_msb => 6,
      x_width => 8,
      y_width => 7
    )
    port map (
      x => c09f12_01_katadc0_user_datai0_net_x0,
      y => val0_0_y_net
    );

  val0_1: entity work.xlslice
    generic map (
      new_lsb => 0,
      new_msb => 6,
      x_width => 8,
      y_width => 7
    )
    port map (
      x => c09f12_01_katadc0_user_datai1_net_x0,
      y => val0_1_y_net
    );

  val0_2: entity work.xlslice
    generic map (
      new_lsb => 0,
      new_msb => 6,
      x_width => 8,
      y_width => 7
    )
    port map (
      x => c09f12_01_katadc0_user_datai2_net_x0,
      y => val0_2_y_net
    );

  val0_3: entity work.xlslice
    generic map (
      new_lsb => 0,
      new_msb => 6,
      x_width => 8,
      y_width => 7
    )
    port map (
      x => c09f12_01_katadc0_user_datai3_net_x0,
      y => val0_3_y_net
    );

  val1_0: entity work.xlslice
    generic map (
      new_lsb => 0,
      new_msb => 6,
      x_width => 8,
      y_width => 7
    )
    port map (
      x => c09f12_01_katadc0_user_dataq0_net_x0,
      y => val1_0_y_net
    );

  val1_1: entity work.xlslice
    generic map (
      new_lsb => 0,
      new_msb => 6,
      x_width => 8,
      y_width => 7
    )
    port map (
      x => c09f12_01_katadc0_user_dataq1_net_x0,
      y => val1_1_y_net
    );

  val1_2: entity work.xlslice
    generic map (
      new_lsb => 0,
      new_msb => 6,
      x_width => 8,
      y_width => 7
    )
    port map (
      x => c09f12_01_katadc0_user_dataq2_net_x0,
      y => val1_2_y_net
    );

  val1_3: entity work.xlslice
    generic map (
      new_lsb => 0,
      new_msb => 6,
      x_width => 8,
      y_width => 7
    )
    port map (
      x => c09f12_01_katadc0_user_dataq3_net_x0,
      y => val1_3_y_net
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/leds/Subsystem/led_pulse0/freeze_cntr"

entity freeze_cntr_entity_c607e7b420 is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    en: in std_logic; 
    rst: in std_logic; 
    addr: out std_logic_vector(25 downto 0)
  );
end freeze_cntr_entity_c607e7b420;

architecture structural of freeze_cntr_entity_c607e7b420 is
  signal ce_1_sg_x592: std_logic;
  signal clk_1_sg_x592: std_logic;
  signal constant_op_net_x0: std_logic;
  signal counter3_op_net: std_logic_vector(26 downto 0);
  signal edge_op_y_net_x1: std_logic;
  signal enable1_y_net: std_logic;
  signal enable_y_net_x0: std_logic_vector(25 downto 0);
  signal inverter1_op_net: std_logic;
  signal logical5_y_net: std_logic;

begin
  ce_1_sg_x592 <= ce_1;
  clk_1_sg_x592 <= clk_1;
  constant_op_net_x0 <= en;
  edge_op_y_net_x1 <= rst;
  addr <= enable_y_net_x0;

  counter3: entity work.xlcounter_free_c09f12_01
    generic map (
      core_name0 => "cntr_11_0_0c0d4ef78e6c6aa9",
      op_arith => xlUnsigned,
      op_width => 27
    )
    port map (
      ce => ce_1_sg_x592,
      clk => clk_1_sg_x592,
      clr => '0',
      en(0) => logical5_y_net,
      rst(0) => edge_op_y_net_x1,
      op => counter3_op_net
    );

  enable: entity work.xlslice
    generic map (
      new_lsb => 0,
      new_msb => 25,
      x_width => 27,
      y_width => 26
    )
    port map (
      x => counter3_op_net,
      y => enable_y_net_x0
    );

  enable1: entity work.xlslice
    generic map (
      new_lsb => 26,
      new_msb => 26,
      x_width => 27,
      y_width => 1
    )
    port map (
      x => counter3_op_net,
      y(0) => enable1_y_net
    );

  inverter1: entity work.inverter_e5b38cca3b
    port map (
      ce => ce_1_sg_x592,
      clk => clk_1_sg_x592,
      clr => '0',
      ip(0) => enable1_y_net,
      op(0) => inverter1_op_net
    );

  logical5: entity work.logical_80f90b97d0
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0(0) => constant_op_net_x0,
      d1(0) => inverter1_op_net,
      y(0) => logical5_y_net
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/leds/Subsystem/led_pulse0"

entity led_pulse0_entity_bdaae4e684 is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    in1: in std_logic; 
    counter1_x0: out std_logic_vector(7 downto 0); 
    counter2_x0: out std_logic_vector(8 downto 0); 
    edge_detect1: out std_logic; 
    freeze_cntr: out std_logic_vector(25 downto 0); 
    out1: out std_logic; 
    slice_x0: out std_logic
  );
end led_pulse0_entity_bdaae4e684;

architecture structural of led_pulse0_entity_bdaae4e684 is
  signal ce_1_sg_x593: std_logic;
  signal clk_1_sg_x593: std_logic;
  signal constant_op_net_x0: std_logic;
  signal counter1_op_net_x0: std_logic_vector(7 downto 0);
  signal counter2_op_net_x0: std_logic_vector(8 downto 0);
  signal counter_op_net: std_logic_vector(7 downto 0);
  signal edge_op_y_net_x0: std_logic;
  signal edge_op_y_net_x2: std_logic;
  signal enable_y_net_x1: std_logic_vector(25 downto 0);
  signal inverter_op_net: std_logic;
  signal register_q_net_x1: std_logic;
  signal relational_op_net_x0: std_logic;
  signal slice1_y_net_x0: std_logic;
  signal slice_y_net_x0: std_logic;

begin
  ce_1_sg_x593 <= ce_1;
  clk_1_sg_x593 <= clk_1;
  register_q_net_x1 <= in1;
  counter1_x0 <= counter1_op_net_x0;
  counter2_x0 <= counter2_op_net_x0;
  edge_detect1 <= edge_op_y_net_x2;
  freeze_cntr <= enable_y_net_x1;
  out1 <= relational_op_net_x0;
  slice_x0 <= slice_y_net_x0;

  constant_x0: entity work.constant_6293007044
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op(0) => constant_op_net_x0
    );

  counter: entity work.xlcounter_free_c09f12_01
    generic map (
      core_name0 => "cntr_11_0_4df07e1ba68d0c6e",
      op_arith => xlUnsigned,
      op_width => 8
    )
    port map (
      ce => ce_1_sg_x593,
      clk => clk_1_sg_x593,
      clr => '0',
      en => "1",
      rst => "0",
      op => counter_op_net
    );

  counter1: entity work.xlcounter_free_c09f12_01
    generic map (
      core_name0 => "cntr_11_0_d98da069fc1111dd",
      op_arith => xlUnsigned,
      op_width => 8
    )
    port map (
      ce => ce_1_sg_x593,
      clk => clk_1_sg_x593,
      clr => '0',
      en(0) => edge_op_y_net_x0,
      rst(0) => edge_op_y_net_x2,
      up(0) => inverter_op_net,
      op => counter1_op_net_x0
    );

  counter2: entity work.xlcounter_limit_c09f12_01
    generic map (
      cnt_15_0 => 511,
      cnt_31_16 => 0,
      cnt_47_32 => 0,
      cnt_63_48 => 0,
      core_name0 => "cntr_11_0_bc43ff9b02fd1262",
      count_limited => 0,
      op_arith => xlUnsigned,
      op_width => 9
    )
    port map (
      ce => ce_1_sg_x593,
      clk => clk_1_sg_x593,
      clr => '0',
      en(0) => edge_op_y_net_x0,
      rst(0) => edge_op_y_net_x2,
      op => counter2_op_net_x0
    );

  edge_detect1_44b509942d: entity work.edge_detect_entity_cb656284f4
    port map (
      ce_1 => ce_1_sg_x593,
      clk_1 => clk_1_sg_x593,
      in_x0 => register_q_net_x1,
      out_x0 => edge_op_y_net_x2
    );

  edge_detect_b79e32776d: entity work.edge_detect_entity_773f207806
    port map (
      ce_1 => ce_1_sg_x593,
      clk_1 => clk_1_sg_x593,
      in_x0 => slice1_y_net_x0,
      out_x0 => edge_op_y_net_x0
    );

  freeze_cntr_c607e7b420: entity work.freeze_cntr_entity_c607e7b420
    port map (
      ce_1 => ce_1_sg_x593,
      clk_1 => clk_1_sg_x593,
      en => constant_op_net_x0,
      rst => edge_op_y_net_x2,
      addr => enable_y_net_x1
    );

  inverter: entity work.inverter_e5b38cca3b
    port map (
      ce => ce_1_sg_x593,
      clk => clk_1_sg_x593,
      clr => '0',
      ip(0) => slice_y_net_x0,
      op(0) => inverter_op_net
    );

  relational: entity work.relational_ba5c6f1dfc
    port map (
      a => counter_op_net,
      b => counter1_op_net_x0,
      ce => ce_1_sg_x593,
      clk => clk_1_sg_x593,
      clr => '0',
      op(0) => relational_op_net_x0
    );

  slice: entity work.xlslice
    generic map (
      new_lsb => 8,
      new_msb => 8,
      x_width => 9,
      y_width => 1
    )
    port map (
      x => counter2_op_net_x0,
      y(0) => slice_y_net_x0
    );

  slice1: entity work.xlslice
    generic map (
      new_lsb => 17,
      new_msb => 17,
      x_width => 26,
      y_width => 1
    )
    port map (
      x => enable_y_net_x1,
      y(0) => slice1_y_net_x0
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/leds/Subsystem"

entity subsystem_entity_b66990d278 is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    rst: in std_logic; 
    led_pulse0: out std_logic_vector(7 downto 0); 
    led_pulse0_x0: out std_logic_vector(8 downto 0); 
    led_pulse0_x1: out std_logic; 
    led_pulse0_x2: out std_logic; 
    led_pulse0_x3: out std_logic_vector(25 downto 0); 
    led_pulse1: out std_logic_vector(7 downto 0); 
    led_pulse1_x0: out std_logic_vector(8 downto 0); 
    led_pulse1_x1: out std_logic; 
    led_pulse1_x2: out std_logic; 
    led_pulse1_x3: out std_logic_vector(25 downto 0); 
    led_pulse2: out std_logic_vector(7 downto 0); 
    led_pulse2_x0: out std_logic_vector(8 downto 0); 
    led_pulse2_x1: out std_logic; 
    led_pulse2_x2: out std_logic; 
    led_pulse2_x3: out std_logic_vector(25 downto 0); 
    led_pulse3: out std_logic_vector(7 downto 0); 
    led_pulse3_x0: out std_logic_vector(8 downto 0); 
    led_pulse3_x1: out std_logic; 
    led_pulse3_x2: out std_logic; 
    led_pulse3_x3: out std_logic_vector(25 downto 0); 
    led_pulse4: out std_logic_vector(7 downto 0); 
    led_pulse4_x0: out std_logic_vector(8 downto 0); 
    led_pulse4_x1: out std_logic; 
    led_pulse4_x2: out std_logic; 
    led_pulse4_x3: out std_logic_vector(25 downto 0); 
    led_pulse5: out std_logic_vector(7 downto 0); 
    led_pulse5_x0: out std_logic_vector(8 downto 0); 
    led_pulse5_x1: out std_logic; 
    led_pulse5_x2: out std_logic; 
    led_pulse5_x3: out std_logic_vector(25 downto 0); 
    led_pulse6: out std_logic_vector(7 downto 0); 
    led_pulse6_x0: out std_logic_vector(8 downto 0); 
    led_pulse6_x1: out std_logic; 
    led_pulse6_x2: out std_logic; 
    led_pulse6_x3: out std_logic_vector(25 downto 0); 
    led_pulse7: out std_logic_vector(7 downto 0); 
    led_pulse7_x0: out std_logic_vector(8 downto 0); 
    led_pulse7_x1: out std_logic; 
    led_pulse7_x2: out std_logic; 
    led_pulse7_x3: out std_logic_vector(25 downto 0); 
    out1: out std_logic; 
    out2: out std_logic; 
    out3: out std_logic; 
    out4: out std_logic; 
    out5: out std_logic; 
    out6: out std_logic; 
    out7: out std_logic; 
    out8: out std_logic
  );
end subsystem_entity_b66990d278;

architecture structural of subsystem_entity_b66990d278 is
  signal assert_dout_net: std_logic;
  signal ce_1_sg_x622: std_logic;
  signal clk_1_sg_x622: std_logic;
  signal counter1_op_net_x10: std_logic_vector(7 downto 0);
  signal counter1_op_net_x11: std_logic_vector(7 downto 0);
  signal counter1_op_net_x12: std_logic_vector(7 downto 0);
  signal counter1_op_net_x13: std_logic_vector(7 downto 0);
  signal counter1_op_net_x14: std_logic_vector(7 downto 0);
  signal counter1_op_net_x15: std_logic_vector(7 downto 0);
  signal counter1_op_net_x8: std_logic_vector(7 downto 0);
  signal counter1_op_net_x9: std_logic_vector(7 downto 0);
  signal counter2_op_net_x10: std_logic_vector(8 downto 0);
  signal counter2_op_net_x11: std_logic_vector(8 downto 0);
  signal counter2_op_net_x12: std_logic_vector(8 downto 0);
  signal counter2_op_net_x13: std_logic_vector(8 downto 0);
  signal counter2_op_net_x14: std_logic_vector(8 downto 0);
  signal counter2_op_net_x15: std_logic_vector(8 downto 0);
  signal counter2_op_net_x8: std_logic_vector(8 downto 0);
  signal counter2_op_net_x9: std_logic_vector(8 downto 0);
  signal counter_op_net: std_logic_vector(23 downto 0);
  signal edge_op_y_net_x0: std_logic;
  signal edge_op_y_net_x10: std_logic;
  signal edge_op_y_net_x11: std_logic;
  signal edge_op_y_net_x12: std_logic;
  signal edge_op_y_net_x13: std_logic;
  signal edge_op_y_net_x14: std_logic;
  signal edge_op_y_net_x15: std_logic;
  signal edge_op_y_net_x16: std_logic;
  signal edge_op_y_net_x17: std_logic;
  signal enable_y_net_x10: std_logic_vector(25 downto 0);
  signal enable_y_net_x11: std_logic_vector(25 downto 0);
  signal enable_y_net_x12: std_logic_vector(25 downto 0);
  signal enable_y_net_x13: std_logic_vector(25 downto 0);
  signal enable_y_net_x14: std_logic_vector(25 downto 0);
  signal enable_y_net_x15: std_logic_vector(25 downto 0);
  signal enable_y_net_x16: std_logic_vector(25 downto 0);
  signal enable_y_net_x9: std_logic_vector(25 downto 0);
  signal logical14_y_net_x17: std_logic;
  signal logical1_y_net_x1: std_logic;
  signal logical2_y_net_x1: std_logic;
  signal logical3_y_net_x1: std_logic;
  signal logical4_y_net_x1: std_logic;
  signal logical5_y_net_x1: std_logic;
  signal logical6_y_net_x1: std_logic;
  signal register10_q_net: std_logic;
  signal register11_q_net: std_logic;
  signal register12_q_net: std_logic;
  signal register13_q_net: std_logic;
  signal register14_q_net: std_logic;
  signal register1_q_net: std_logic;
  signal register2_q_net: std_logic;
  signal register3_q_net: std_logic;
  signal register4_q_net: std_logic;
  signal register5_q_net: std_logic;
  signal register6_q_net: std_logic;
  signal register7_q_net_x1: std_logic;
  signal register9_q_net: std_logic;
  signal register_q_net_x1: std_logic;
  signal relational_op_net_x10: std_logic;
  signal relational_op_net_x11: std_logic;
  signal relational_op_net_x12: std_logic;
  signal relational_op_net_x13: std_logic;
  signal relational_op_net_x14: std_logic;
  signal relational_op_net_x15: std_logic;
  signal relational_op_net_x8: std_logic;
  signal relational_op_net_x9: std_logic;
  signal slice2_y_net_x0: std_logic;
  signal slice_y_net_x10: std_logic;
  signal slice_y_net_x11: std_logic;
  signal slice_y_net_x12: std_logic;
  signal slice_y_net_x13: std_logic;
  signal slice_y_net_x14: std_logic;
  signal slice_y_net_x15: std_logic;
  signal slice_y_net_x8: std_logic;
  signal slice_y_net_x9: std_logic;

begin
  ce_1_sg_x622 <= ce_1;
  clk_1_sg_x622 <= clk_1;
  logical14_y_net_x17 <= rst;
  led_pulse0 <= counter1_op_net_x8;
  led_pulse0_x0 <= counter2_op_net_x8;
  led_pulse0_x1 <= slice_y_net_x8;
  led_pulse0_x2 <= edge_op_y_net_x10;
  led_pulse0_x3 <= enable_y_net_x9;
  led_pulse1 <= counter1_op_net_x9;
  led_pulse1_x0 <= counter2_op_net_x9;
  led_pulse1_x1 <= slice_y_net_x9;
  led_pulse1_x2 <= edge_op_y_net_x11;
  led_pulse1_x3 <= enable_y_net_x10;
  led_pulse2 <= counter1_op_net_x10;
  led_pulse2_x0 <= counter2_op_net_x10;
  led_pulse2_x1 <= slice_y_net_x10;
  led_pulse2_x2 <= edge_op_y_net_x12;
  led_pulse2_x3 <= enable_y_net_x11;
  led_pulse3 <= counter1_op_net_x11;
  led_pulse3_x0 <= counter2_op_net_x11;
  led_pulse3_x1 <= slice_y_net_x11;
  led_pulse3_x2 <= edge_op_y_net_x13;
  led_pulse3_x3 <= enable_y_net_x12;
  led_pulse4 <= counter1_op_net_x12;
  led_pulse4_x0 <= counter2_op_net_x12;
  led_pulse4_x1 <= slice_y_net_x12;
  led_pulse4_x2 <= edge_op_y_net_x14;
  led_pulse4_x3 <= enable_y_net_x13;
  led_pulse5 <= counter1_op_net_x13;
  led_pulse5_x0 <= counter2_op_net_x13;
  led_pulse5_x1 <= slice_y_net_x13;
  led_pulse5_x2 <= edge_op_y_net_x15;
  led_pulse5_x3 <= enable_y_net_x14;
  led_pulse6 <= counter1_op_net_x14;
  led_pulse6_x0 <= counter2_op_net_x14;
  led_pulse6_x1 <= slice_y_net_x14;
  led_pulse6_x2 <= edge_op_y_net_x16;
  led_pulse6_x3 <= enable_y_net_x15;
  led_pulse7 <= counter1_op_net_x15;
  led_pulse7_x0 <= counter2_op_net_x15;
  led_pulse7_x1 <= slice_y_net_x15;
  led_pulse7_x2 <= edge_op_y_net_x17;
  led_pulse7_x3 <= enable_y_net_x16;
  out1 <= relational_op_net_x8;
  out2 <= relational_op_net_x9;
  out3 <= relational_op_net_x10;
  out4 <= relational_op_net_x11;
  out5 <= relational_op_net_x12;
  out6 <= relational_op_net_x13;
  out7 <= relational_op_net_x14;
  out8 <= relational_op_net_x15;

  assert_x0: entity work.xlpassthrough
    generic map (
      din_width => 1,
      dout_width => 1
    )
    port map (
      din(0) => register9_q_net,
      dout(0) => assert_dout_net
    );

  counter: entity work.xlcounter_free_c09f12_01
    generic map (
      core_name0 => "cntr_11_0_48e1762367ed2904",
      op_arith => xlUnsigned,
      op_width => 24
    )
    port map (
      ce => ce_1_sg_x622,
      clk => clk_1_sg_x622,
      clr => '0',
      en => "1",
      rst(0) => logical14_y_net_x17,
      op => counter_op_net
    );

  edge_detect1_15766d8c71: entity work.edge_detect_entity_cb656284f4
    port map (
      ce_1 => ce_1_sg_x622,
      clk_1 => clk_1_sg_x622,
      in_x0 => slice2_y_net_x0,
      out_x0 => edge_op_y_net_x0
    );

  led_pulse0_bdaae4e684: entity work.led_pulse0_entity_bdaae4e684
    port map (
      ce_1 => ce_1_sg_x622,
      clk_1 => clk_1_sg_x622,
      in1 => register_q_net_x1,
      counter1_x0 => counter1_op_net_x8,
      counter2_x0 => counter2_op_net_x8,
      edge_detect1 => edge_op_y_net_x10,
      freeze_cntr => enable_y_net_x9,
      out1 => relational_op_net_x8,
      slice_x0 => slice_y_net_x8
    );

  led_pulse1_0ba2b60c80: entity work.led_pulse0_entity_bdaae4e684
    port map (
      ce_1 => ce_1_sg_x622,
      clk_1 => clk_1_sg_x622,
      in1 => logical1_y_net_x1,
      counter1_x0 => counter1_op_net_x9,
      counter2_x0 => counter2_op_net_x9,
      edge_detect1 => edge_op_y_net_x11,
      freeze_cntr => enable_y_net_x10,
      out1 => relational_op_net_x9,
      slice_x0 => slice_y_net_x9
    );

  led_pulse2_63cc5eb628: entity work.led_pulse0_entity_bdaae4e684
    port map (
      ce_1 => ce_1_sg_x622,
      clk_1 => clk_1_sg_x622,
      in1 => logical2_y_net_x1,
      counter1_x0 => counter1_op_net_x10,
      counter2_x0 => counter2_op_net_x10,
      edge_detect1 => edge_op_y_net_x12,
      freeze_cntr => enable_y_net_x11,
      out1 => relational_op_net_x10,
      slice_x0 => slice_y_net_x10
    );

  led_pulse3_e1b5f78b44: entity work.led_pulse0_entity_bdaae4e684
    port map (
      ce_1 => ce_1_sg_x622,
      clk_1 => clk_1_sg_x622,
      in1 => logical3_y_net_x1,
      counter1_x0 => counter1_op_net_x11,
      counter2_x0 => counter2_op_net_x11,
      edge_detect1 => edge_op_y_net_x13,
      freeze_cntr => enable_y_net_x12,
      out1 => relational_op_net_x11,
      slice_x0 => slice_y_net_x11
    );

  led_pulse4_6b7917784d: entity work.led_pulse0_entity_bdaae4e684
    port map (
      ce_1 => ce_1_sg_x622,
      clk_1 => clk_1_sg_x622,
      in1 => logical4_y_net_x1,
      counter1_x0 => counter1_op_net_x12,
      counter2_x0 => counter2_op_net_x12,
      edge_detect1 => edge_op_y_net_x14,
      freeze_cntr => enable_y_net_x13,
      out1 => relational_op_net_x12,
      slice_x0 => slice_y_net_x12
    );

  led_pulse5_cfdaed9c52: entity work.led_pulse0_entity_bdaae4e684
    port map (
      ce_1 => ce_1_sg_x622,
      clk_1 => clk_1_sg_x622,
      in1 => logical5_y_net_x1,
      counter1_x0 => counter1_op_net_x13,
      counter2_x0 => counter2_op_net_x13,
      edge_detect1 => edge_op_y_net_x15,
      freeze_cntr => enable_y_net_x14,
      out1 => relational_op_net_x13,
      slice_x0 => slice_y_net_x13
    );

  led_pulse6_5fc967cbcc: entity work.led_pulse0_entity_bdaae4e684
    port map (
      ce_1 => ce_1_sg_x622,
      clk_1 => clk_1_sg_x622,
      in1 => logical6_y_net_x1,
      counter1_x0 => counter1_op_net_x14,
      counter2_x0 => counter2_op_net_x14,
      edge_detect1 => edge_op_y_net_x16,
      freeze_cntr => enable_y_net_x15,
      out1 => relational_op_net_x14,
      slice_x0 => slice_y_net_x14
    );

  led_pulse7_496a865472: entity work.led_pulse0_entity_bdaae4e684
    port map (
      ce_1 => ce_1_sg_x622,
      clk_1 => clk_1_sg_x622,
      in1 => register7_q_net_x1,
      counter1_x0 => counter1_op_net_x15,
      counter2_x0 => counter2_op_net_x15,
      edge_detect1 => edge_op_y_net_x17,
      freeze_cntr => enable_y_net_x16,
      out1 => relational_op_net_x15,
      slice_x0 => slice_y_net_x15
    );

  logical1: entity work.logical_aacf6e1b0e
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0(0) => register9_q_net,
      d1(0) => register1_q_net,
      y(0) => logical1_y_net_x1
    );

  logical2: entity work.logical_aacf6e1b0e
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0(0) => register10_q_net,
      d1(0) => register2_q_net,
      y(0) => logical2_y_net_x1
    );

  logical3: entity work.logical_aacf6e1b0e
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0(0) => register11_q_net,
      d1(0) => register3_q_net,
      y(0) => logical3_y_net_x1
    );

  logical4: entity work.logical_aacf6e1b0e
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0(0) => register12_q_net,
      d1(0) => register4_q_net,
      y(0) => logical4_y_net_x1
    );

  logical5: entity work.logical_aacf6e1b0e
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0(0) => register13_q_net,
      d1(0) => register5_q_net,
      y(0) => logical5_y_net_x1
    );

  logical6: entity work.logical_aacf6e1b0e
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0(0) => register14_q_net,
      d1(0) => register6_q_net,
      y(0) => logical6_y_net_x1
    );

  register1: entity work.xlregister
    generic map (
      d_width => 1,
      init_value => b"0"
    )
    port map (
      ce => ce_1_sg_x622,
      clk => clk_1_sg_x622,
      d(0) => register_q_net_x1,
      en(0) => edge_op_y_net_x0,
      rst(0) => logical14_y_net_x17,
      q(0) => register1_q_net
    );

  register10: entity work.xlregister
    generic map (
      d_width => 1,
      init_value => b"0"
    )
    port map (
      ce => ce_1_sg_x622,
      clk => clk_1_sg_x622,
      d(0) => register11_q_net,
      en(0) => edge_op_y_net_x0,
      rst(0) => logical14_y_net_x17,
      q(0) => register10_q_net
    );

  register11: entity work.xlregister
    generic map (
      d_width => 1,
      init_value => b"0"
    )
    port map (
      ce => ce_1_sg_x622,
      clk => clk_1_sg_x622,
      d(0) => register12_q_net,
      en(0) => edge_op_y_net_x0,
      rst(0) => logical14_y_net_x17,
      q(0) => register11_q_net
    );

  register12: entity work.xlregister
    generic map (
      d_width => 1,
      init_value => b"0"
    )
    port map (
      ce => ce_1_sg_x622,
      clk => clk_1_sg_x622,
      d(0) => register13_q_net,
      en(0) => edge_op_y_net_x0,
      rst(0) => logical14_y_net_x17,
      q(0) => register12_q_net
    );

  register13: entity work.xlregister
    generic map (
      d_width => 1,
      init_value => b"0"
    )
    port map (
      ce => ce_1_sg_x622,
      clk => clk_1_sg_x622,
      d(0) => register14_q_net,
      en(0) => edge_op_y_net_x0,
      rst(0) => logical14_y_net_x17,
      q(0) => register13_q_net
    );

  register14: entity work.xlregister
    generic map (
      d_width => 1,
      init_value => b"0"
    )
    port map (
      ce => ce_1_sg_x622,
      clk => clk_1_sg_x622,
      d(0) => register7_q_net_x1,
      en(0) => edge_op_y_net_x0,
      rst(0) => logical14_y_net_x17,
      q(0) => register14_q_net
    );

  register2: entity work.xlregister
    generic map (
      d_width => 1,
      init_value => b"0"
    )
    port map (
      ce => ce_1_sg_x622,
      clk => clk_1_sg_x622,
      d(0) => register1_q_net,
      en(0) => edge_op_y_net_x0,
      rst(0) => logical14_y_net_x17,
      q(0) => register2_q_net
    );

  register3: entity work.xlregister
    generic map (
      d_width => 1,
      init_value => b"0"
    )
    port map (
      ce => ce_1_sg_x622,
      clk => clk_1_sg_x622,
      d(0) => register2_q_net,
      en(0) => edge_op_y_net_x0,
      rst(0) => logical14_y_net_x17,
      q(0) => register3_q_net
    );

  register4: entity work.xlregister
    generic map (
      d_width => 1,
      init_value => b"0"
    )
    port map (
      ce => ce_1_sg_x622,
      clk => clk_1_sg_x622,
      d(0) => register3_q_net,
      en(0) => edge_op_y_net_x0,
      rst(0) => logical14_y_net_x17,
      q(0) => register4_q_net
    );

  register5: entity work.xlregister
    generic map (
      d_width => 1,
      init_value => b"0"
    )
    port map (
      ce => ce_1_sg_x622,
      clk => clk_1_sg_x622,
      d(0) => register4_q_net,
      en(0) => edge_op_y_net_x0,
      rst(0) => logical14_y_net_x17,
      q(0) => register5_q_net
    );

  register6: entity work.xlregister
    generic map (
      d_width => 1,
      init_value => b"0"
    )
    port map (
      ce => ce_1_sg_x622,
      clk => clk_1_sg_x622,
      d(0) => register5_q_net,
      en(0) => edge_op_y_net_x0,
      rst(0) => logical14_y_net_x17,
      q(0) => register6_q_net
    );

  register7: entity work.xlregister
    generic map (
      d_width => 1,
      init_value => b"0"
    )
    port map (
      ce => ce_1_sg_x622,
      clk => clk_1_sg_x622,
      d(0) => register6_q_net,
      en(0) => edge_op_y_net_x0,
      rst(0) => logical14_y_net_x17,
      q(0) => register7_q_net_x1
    );

  register9: entity work.xlregister
    generic map (
      d_width => 1,
      init_value => b"0"
    )
    port map (
      ce => ce_1_sg_x622,
      clk => clk_1_sg_x622,
      d(0) => register10_q_net,
      en(0) => edge_op_y_net_x0,
      rst(0) => logical14_y_net_x17,
      q(0) => register9_q_net
    );

  register_x0: entity work.xlregister
    generic map (
      d_width => 1,
      init_value => b"1"
    )
    port map (
      ce => ce_1_sg_x622,
      clk => clk_1_sg_x622,
      d(0) => assert_dout_net,
      en(0) => edge_op_y_net_x0,
      rst(0) => logical14_y_net_x17,
      q(0) => register_q_net_x1
    );

  slice2: entity work.xlslice
    generic map (
      new_lsb => 23,
      new_msb => 23,
      x_width => 24,
      y_width => 1
    )
    port map (
      x => counter_op_net,
      y(0) => slice2_y_net_x0
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/leds/pulse_ext/posedge"

entity posedge_entity_8c9b4fc2fb is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    in_x0: in std_logic; 
    out_x0: out std_logic
  );
end posedge_entity_8c9b4fc2fb;

architecture structural of posedge_entity_8c9b4fc2fb is
  signal ce_1_sg_x623: std_logic;
  signal clk_1_sg_x623: std_logic;
  signal delay_q_net: std_logic;
  signal inverter_op_net: std_logic;
  signal logical17_y_net_x0: std_logic;
  signal logical_y_net_x0: std_logic;

begin
  ce_1_sg_x623 <= ce_1;
  clk_1_sg_x623 <= clk_1;
  logical17_y_net_x0 <= in_x0;
  out_x0 <= logical_y_net_x0;

  delay: entity work.xldelay
    generic map (
      latency => 1,
      reg_retiming => 0,
      reset => 0,
      width => 1
    )
    port map (
      ce => ce_1_sg_x623,
      clk => clk_1_sg_x623,
      d(0) => logical17_y_net_x0,
      en => '1',
      rst => '1',
      q(0) => delay_q_net
    );

  inverter: entity work.inverter_e5b38cca3b
    port map (
      ce => ce_1_sg_x623,
      clk => clk_1_sg_x623,
      clr => '0',
      ip(0) => delay_q_net,
      op(0) => inverter_op_net
    );

  logical: entity work.logical_80f90b97d0
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0(0) => inverter_op_net,
      d1(0) => logical17_y_net_x0,
      y(0) => logical_y_net_x0
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/leds/pulse_ext"

entity pulse_ext_entity_39d1b29fcf is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    in_x0: in std_logic; 
    out_x0: out std_logic
  );
end pulse_ext_entity_39d1b29fcf;

architecture structural of pulse_ext_entity_39d1b29fcf is
  signal ce_1_sg_x624: std_logic;
  signal clk_1_sg_x624: std_logic;
  signal constant5_op_net: std_logic_vector(24 downto 0);
  signal counter3_op_net: std_logic_vector(24 downto 0);
  signal logical17_y_net_x1: std_logic;
  signal logical_y_net_x0: std_logic;
  signal relational5_op_net_x0: std_logic;

begin
  ce_1_sg_x624 <= ce_1;
  clk_1_sg_x624 <= clk_1;
  logical17_y_net_x1 <= in_x0;
  out_x0 <= relational5_op_net_x0;

  constant5: entity work.constant_2ae71e3b73
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op => constant5_op_net
    );

  counter3: entity work.xlcounter_free_c09f12_01
    generic map (
      core_name0 => "cntr_11_0_5175c845ca556d8f",
      op_arith => xlUnsigned,
      op_width => 25
    )
    port map (
      ce => ce_1_sg_x624,
      clk => clk_1_sg_x624,
      clr => '0',
      en(0) => relational5_op_net_x0,
      rst(0) => logical_y_net_x0,
      op => counter3_op_net
    );

  posedge_8c9b4fc2fb: entity work.posedge_entity_8c9b4fc2fb
    port map (
      ce_1 => ce_1_sg_x624,
      clk_1 => clk_1_sg_x624,
      in_x0 => logical17_y_net_x1,
      out_x0 => logical_y_net_x0
    );

  relational5: entity work.relational_487ac75be9
    port map (
      a => counter3_op_net,
      b => constant5_op_net,
      ce => '0',
      clk => '0',
      clr => '0',
      op(0) => relational5_op_net_x0
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/leds/pulse_ext2"

entity pulse_ext2_entity_5b77244ab9 is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    in_x0: in std_logic; 
    out_x0: out std_logic
  );
end pulse_ext2_entity_5b77244ab9;

architecture structural of pulse_ext2_entity_5b77244ab9 is
  signal ce_1_sg_x628: std_logic;
  signal clk_1_sg_x628: std_logic;
  signal constant5_op_net: std_logic_vector(30 downto 0);
  signal counter3_op_net: std_logic_vector(30 downto 0);
  signal logical1_y_net_x1: std_logic;
  signal logical_y_net_x0: std_logic;
  signal relational5_op_net_x0: std_logic;

begin
  ce_1_sg_x628 <= ce_1;
  clk_1_sg_x628 <= clk_1;
  logical1_y_net_x1 <= in_x0;
  out_x0 <= relational5_op_net_x0;

  constant5: entity work.constant_33835d3375
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op => constant5_op_net
    );

  counter3: entity work.xlcounter_free_c09f12_01
    generic map (
      core_name0 => "cntr_11_0_9cad7c433fbdcec9",
      op_arith => xlUnsigned,
      op_width => 31
    )
    port map (
      ce => ce_1_sg_x628,
      clk => clk_1_sg_x628,
      clr => '0',
      en(0) => relational5_op_net_x0,
      rst(0) => logical_y_net_x0,
      op => counter3_op_net
    );

  posedge_7efca3d8a1: entity work.posedge_entity_8c9b4fc2fb
    port map (
      ce_1 => ce_1_sg_x628,
      clk_1 => clk_1_sg_x628,
      in_x0 => logical1_y_net_x1,
      out_x0 => logical_y_net_x0
    );

  relational5: entity work.relational_d3a37482f6
    port map (
      a => counter3_op_net,
      b => constant5_op_net,
      ce => '0',
      clk => '0',
      clr => '0',
      op(0) => relational5_op_net_x0
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/leds/roach_gpioa0"

entity roach_gpioa0_entity_f5eb6eeb90 is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    gpio_out: in std_logic; 
    convert_x0: out std_logic
  );
end roach_gpioa0_entity_f5eb6eeb90;

architecture structural of roach_gpioa0_entity_f5eb6eeb90 is
  signal ce_1_sg_x631: std_logic;
  signal clk_1_sg_x631: std_logic;
  signal convert_dout_net_x0: std_logic;
  signal mux_y_net_x0: std_logic;

begin
  ce_1_sg_x631 <= ce_1;
  clk_1_sg_x631 <= clk_1;
  mux_y_net_x0 <= gpio_out;
  convert_x0 <= convert_dout_net_x0;

  convert: entity work.xlconvert
    generic map (
      bool_conversion => 1,
      din_arith => 1,
      din_bin_pt => 0,
      din_width => 1,
      dout_arith => 1,
      dout_bin_pt => 0,
      dout_width => 1,
      latency => 0,
      overflow => xlWrap,
      quantization => xlTruncate
    )
    port map (
      ce => ce_1_sg_x631,
      clk => clk_1_sg_x631,
      clr => '0',
      din(0) => mux_y_net_x0,
      en => "1",
      dout(0) => convert_dout_net_x0
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/leds/roach_gpioa_oe"

entity roach_gpioa_oe_entity_be1a2cf1d1 is
  port (
    gpio_out: in std_logic; 
    convert_x0: out std_logic
  );
end roach_gpioa_oe_entity_be1a2cf1d1;

architecture structural of roach_gpioa_oe_entity_be1a2cf1d1 is
  signal constant_op_net_x0: std_logic;
  signal convert_dout_net_x0: std_logic;

begin
  constant_op_net_x0 <= gpio_out;
  convert_x0 <= convert_dout_net_x0;

  convert: entity work.xlconvert
    generic map (
      bool_conversion => 1,
      din_arith => 1,
      din_bin_pt => 0,
      din_width => 1,
      dout_arith => 1,
      dout_bin_pt => 0,
      dout_width => 1,
      latency => 0,
      overflow => xlWrap,
      quantization => xlTruncate
    )
    port map (
      ce => '1',
      clk => '1',
      clr => '0',
      din(0) => constant_op_net_x0,
      en => "1",
      dout(0) => convert_dout_net_x0
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/leds/roach_led0"

entity roach_led0_entity_be9a3489ac is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    gpio_out: in std_logic; 
    convert_x0: out std_logic
  );
end roach_led0_entity_be9a3489ac;

architecture structural of roach_led0_entity_be9a3489ac is
  signal ce_1_sg_x639: std_logic;
  signal clk_1_sg_x639: std_logic;
  signal convert_dout_net_x0: std_logic;
  signal inverter2_op_net_x0: std_logic;

begin
  ce_1_sg_x639 <= ce_1;
  clk_1_sg_x639 <= clk_1;
  inverter2_op_net_x0 <= gpio_out;
  convert_x0 <= convert_dout_net_x0;

  convert: entity work.xlconvert
    generic map (
      bool_conversion => 1,
      din_arith => 1,
      din_bin_pt => 0,
      din_width => 1,
      dout_arith => 1,
      dout_bin_pt => 0,
      dout_width => 1,
      latency => 0,
      overflow => xlWrap,
      quantization => xlTruncate
    )
    port map (
      ce => ce_1_sg_x639,
      clk => clk_1_sg_x639,
      clr => '0',
      din(0) => inverter2_op_net_x0,
      en => "1",
      dout(0) => convert_dout_net_x0
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/leds"

entity leds_entity_7bfe27f09c is
  port (
    adc_en0: in std_logic; 
    adc_en1: in std_logic; 
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    comms: in std_logic; 
    fancy_en: in std_logic; 
    or0: in std_logic; 
    or1: in std_logic; 
    pps: in std_logic; 
    rst: in std_logic; 
    sync_led: in std_logic; 
    warning: in std_logic; 
    roach_gpioa0: out std_logic; 
    roach_gpioa1: out std_logic; 
    roach_gpioa2: out std_logic; 
    roach_gpioa3: out std_logic; 
    roach_gpioa4: out std_logic; 
    roach_gpioa5: out std_logic; 
    roach_gpioa6: out std_logic; 
    roach_gpioa7: out std_logic; 
    roach_gpioa_oe: out std_logic; 
    roach_led0: out std_logic; 
    roach_led1: out std_logic; 
    roach_led2: out std_logic; 
    roach_led3: out std_logic; 
    subsystem: out std_logic_vector(7 downto 0); 
    subsystem_x0: out std_logic_vector(8 downto 0); 
    subsystem_x1: out std_logic; 
    subsystem_x10: out std_logic_vector(25 downto 0); 
    subsystem_x11: out std_logic_vector(7 downto 0); 
    subsystem_x12: out std_logic_vector(8 downto 0); 
    subsystem_x13: out std_logic; 
    subsystem_x14: out std_logic; 
    subsystem_x15: out std_logic; 
    subsystem_x16: out std_logic_vector(25 downto 0); 
    subsystem_x17: out std_logic_vector(7 downto 0); 
    subsystem_x18: out std_logic_vector(8 downto 0); 
    subsystem_x19: out std_logic; 
    subsystem_x2: out std_logic; 
    subsystem_x20: out std_logic; 
    subsystem_x21: out std_logic; 
    subsystem_x22: out std_logic_vector(25 downto 0); 
    subsystem_x23: out std_logic_vector(7 downto 0); 
    subsystem_x24: out std_logic_vector(8 downto 0); 
    subsystem_x25: out std_logic; 
    subsystem_x26: out std_logic; 
    subsystem_x27: out std_logic; 
    subsystem_x28: out std_logic_vector(25 downto 0); 
    subsystem_x29: out std_logic_vector(7 downto 0); 
    subsystem_x3: out std_logic; 
    subsystem_x30: out std_logic_vector(8 downto 0); 
    subsystem_x31: out std_logic; 
    subsystem_x32: out std_logic; 
    subsystem_x33: out std_logic; 
    subsystem_x34: out std_logic_vector(25 downto 0); 
    subsystem_x35: out std_logic_vector(7 downto 0); 
    subsystem_x36: out std_logic_vector(8 downto 0); 
    subsystem_x37: out std_logic; 
    subsystem_x38: out std_logic; 
    subsystem_x39: out std_logic; 
    subsystem_x4: out std_logic_vector(25 downto 0); 
    subsystem_x40: out std_logic_vector(25 downto 0); 
    subsystem_x41: out std_logic_vector(7 downto 0); 
    subsystem_x42: out std_logic_vector(8 downto 0); 
    subsystem_x43: out std_logic; 
    subsystem_x44: out std_logic; 
    subsystem_x45: out std_logic; 
    subsystem_x46: out std_logic_vector(25 downto 0); 
    subsystem_x5: out std_logic_vector(7 downto 0); 
    subsystem_x6: out std_logic_vector(8 downto 0); 
    subsystem_x7: out std_logic; 
    subsystem_x8: out std_logic; 
    subsystem_x9: out std_logic
  );
end leds_entity_7bfe27f09c;

architecture structural of leds_entity_7bfe27f09c is
  signal arm12_y_net_x0: std_logic;
  signal ce_1_sg_x643: std_logic;
  signal clk_1_sg_x643: std_logic;
  signal constant_op_net_x0: std_logic;
  signal convert_dout_net_x13: std_logic;
  signal convert_dout_net_x14: std_logic;
  signal convert_dout_net_x15: std_logic;
  signal convert_dout_net_x16: std_logic;
  signal convert_dout_net_x17: std_logic;
  signal convert_dout_net_x18: std_logic;
  signal convert_dout_net_x19: std_logic;
  signal convert_dout_net_x20: std_logic;
  signal convert_dout_net_x21: std_logic;
  signal convert_dout_net_x22: std_logic;
  signal convert_dout_net_x23: std_logic;
  signal convert_dout_net_x24: std_logic;
  signal convert_dout_net_x25: std_logic;
  signal counter1_op_net: std_logic;
  signal counter1_op_net_x16: std_logic_vector(7 downto 0);
  signal counter1_op_net_x17: std_logic_vector(7 downto 0);
  signal counter1_op_net_x18: std_logic_vector(7 downto 0);
  signal counter1_op_net_x19: std_logic_vector(7 downto 0);
  signal counter1_op_net_x20: std_logic_vector(7 downto 0);
  signal counter1_op_net_x21: std_logic_vector(7 downto 0);
  signal counter1_op_net_x22: std_logic_vector(7 downto 0);
  signal counter1_op_net_x23: std_logic_vector(7 downto 0);
  signal counter2_op_net: std_logic;
  signal counter2_op_net_x16: std_logic_vector(8 downto 0);
  signal counter2_op_net_x17: std_logic_vector(8 downto 0);
  signal counter2_op_net_x18: std_logic_vector(8 downto 0);
  signal counter2_op_net_x19: std_logic_vector(8 downto 0);
  signal counter2_op_net_x20: std_logic_vector(8 downto 0);
  signal counter2_op_net_x21: std_logic_vector(8 downto 0);
  signal counter2_op_net_x22: std_logic_vector(8 downto 0);
  signal counter2_op_net_x23: std_logic_vector(8 downto 0);
  signal delay1_q_net_x3: std_logic;
  signal edge_op_y_net_x18: std_logic;
  signal edge_op_y_net_x19: std_logic;
  signal edge_op_y_net_x20: std_logic;
  signal edge_op_y_net_x21: std_logic;
  signal edge_op_y_net_x22: std_logic;
  signal edge_op_y_net_x23: std_logic;
  signal edge_op_y_net_x24: std_logic;
  signal edge_op_y_net_x25: std_logic;
  signal enable_y_net_x17: std_logic_vector(25 downto 0);
  signal enable_y_net_x18: std_logic_vector(25 downto 0);
  signal enable_y_net_x19: std_logic_vector(25 downto 0);
  signal enable_y_net_x20: std_logic_vector(25 downto 0);
  signal enable_y_net_x21: std_logic_vector(25 downto 0);
  signal enable_y_net_x22: std_logic_vector(25 downto 0);
  signal enable_y_net_x23: std_logic_vector(25 downto 0);
  signal enable_y_net_x24: std_logic_vector(25 downto 0);
  signal inverter1_op_net_x0: std_logic;
  signal inverter2_op_net_x0: std_logic;
  signal inverter3_op_net_x0: std_logic;
  signal inverter4_op_net: std_logic;
  signal inverter_op_net_x0: std_logic;
  signal logical10_y_net_x1: std_logic;
  signal logical12_y_net_x2: std_logic;
  signal logical14_y_net_x18: std_logic;
  signal logical17_y_net_x2: std_logic;
  signal logical1_y_net_x1: std_logic;
  signal logical2_y_net: std_logic;
  signal logical4_y_net_x2: std_logic;
  signal logical5_y_net_x0: std_logic;
  signal logical7_y_net_x0: std_logic;
  signal logical8_y_net_x1: std_logic;
  signal logical_y_net: std_logic;
  signal mux1_y_net_x0: std_logic;
  signal mux2_y_net_x0: std_logic;
  signal mux3_y_net_x0: std_logic;
  signal mux4_y_net_x0: std_logic;
  signal mux5_y_net_x0: std_logic;
  signal mux6_y_net_x0: std_logic;
  signal mux7_y_net_x0: std_logic;
  signal mux_y_net_x0: std_logic;
  signal relational5_op_net_x0: std_logic;
  signal relational5_op_net_x1: std_logic;
  signal relational5_op_net_x2: std_logic;
  signal relational5_op_net_x3: std_logic;
  signal relational_op_net_x16: std_logic;
  signal relational_op_net_x17: std_logic;
  signal relational_op_net_x18: std_logic;
  signal relational_op_net_x19: std_logic;
  signal relational_op_net_x20: std_logic;
  signal relational_op_net_x21: std_logic;
  signal relational_op_net_x22: std_logic;
  signal relational_op_net_x23: std_logic;
  signal slice1_y_net: std_logic;
  signal slice2_y_net: std_logic;
  signal slice3_y_net: std_logic;
  signal slice_y_net: std_logic;
  signal slice_y_net_x16: std_logic;
  signal slice_y_net_x17: std_logic;
  signal slice_y_net_x18: std_logic;
  signal slice_y_net_x19: std_logic;
  signal slice_y_net_x20: std_logic;
  signal slice_y_net_x21: std_logic;
  signal slice_y_net_x22: std_logic;
  signal slice_y_net_x23: std_logic;

begin
  logical8_y_net_x1 <= adc_en0;
  logical10_y_net_x1 <= adc_en1;
  ce_1_sg_x643 <= ce_1;
  clk_1_sg_x643 <= clk_1;
  logical4_y_net_x2 <= comms;
  arm12_y_net_x0 <= fancy_en;
  logical17_y_net_x2 <= or0;
  logical12_y_net_x2 <= or1;
  logical5_y_net_x0 <= pps;
  logical14_y_net_x18 <= rst;
  delay1_q_net_x3 <= sync_led;
  logical7_y_net_x0 <= warning;
  roach_gpioa0 <= convert_dout_net_x13;
  roach_gpioa1 <= convert_dout_net_x14;
  roach_gpioa2 <= convert_dout_net_x15;
  roach_gpioa3 <= convert_dout_net_x16;
  roach_gpioa4 <= convert_dout_net_x17;
  roach_gpioa5 <= convert_dout_net_x18;
  roach_gpioa6 <= convert_dout_net_x19;
  roach_gpioa7 <= convert_dout_net_x20;
  roach_gpioa_oe <= convert_dout_net_x21;
  roach_led0 <= convert_dout_net_x22;
  roach_led1 <= convert_dout_net_x23;
  roach_led2 <= convert_dout_net_x24;
  roach_led3 <= convert_dout_net_x25;
  subsystem <= counter1_op_net_x16;
  subsystem_x0 <= counter2_op_net_x16;
  subsystem_x1 <= relational_op_net_x16;
  subsystem_x10 <= enable_y_net_x18;
  subsystem_x11 <= counter1_op_net_x18;
  subsystem_x12 <= counter2_op_net_x18;
  subsystem_x13 <= relational_op_net_x18;
  subsystem_x14 <= slice_y_net_x18;
  subsystem_x15 <= edge_op_y_net_x20;
  subsystem_x16 <= enable_y_net_x19;
  subsystem_x17 <= counter1_op_net_x19;
  subsystem_x18 <= counter2_op_net_x19;
  subsystem_x19 <= relational_op_net_x19;
  subsystem_x2 <= slice_y_net_x16;
  subsystem_x20 <= slice_y_net_x19;
  subsystem_x21 <= edge_op_y_net_x21;
  subsystem_x22 <= enable_y_net_x20;
  subsystem_x23 <= counter1_op_net_x20;
  subsystem_x24 <= counter2_op_net_x20;
  subsystem_x25 <= relational_op_net_x20;
  subsystem_x26 <= slice_y_net_x20;
  subsystem_x27 <= edge_op_y_net_x22;
  subsystem_x28 <= enable_y_net_x21;
  subsystem_x29 <= counter1_op_net_x21;
  subsystem_x3 <= edge_op_y_net_x18;
  subsystem_x30 <= counter2_op_net_x21;
  subsystem_x31 <= relational_op_net_x21;
  subsystem_x32 <= slice_y_net_x21;
  subsystem_x33 <= edge_op_y_net_x23;
  subsystem_x34 <= enable_y_net_x22;
  subsystem_x35 <= counter1_op_net_x22;
  subsystem_x36 <= counter2_op_net_x22;
  subsystem_x37 <= relational_op_net_x22;
  subsystem_x38 <= slice_y_net_x22;
  subsystem_x39 <= edge_op_y_net_x24;
  subsystem_x4 <= enable_y_net_x17;
  subsystem_x40 <= enable_y_net_x23;
  subsystem_x41 <= counter1_op_net_x23;
  subsystem_x42 <= counter2_op_net_x23;
  subsystem_x43 <= relational_op_net_x23;
  subsystem_x44 <= slice_y_net_x23;
  subsystem_x45 <= edge_op_y_net_x25;
  subsystem_x46 <= enable_y_net_x24;
  subsystem_x5 <= counter1_op_net_x17;
  subsystem_x6 <= counter2_op_net_x17;
  subsystem_x7 <= relational_op_net_x17;
  subsystem_x8 <= slice_y_net_x17;
  subsystem_x9 <= edge_op_y_net_x19;

  constant_x0: entity work.constant_963ed6358a
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op(0) => constant_op_net_x0
    );

  counter1: entity work.counter_41314d726b
    port map (
      ce => ce_1_sg_x643,
      clk => clk_1_sg_x643,
      clr => '0',
      en(0) => delay1_q_net_x3,
      rst(0) => logical14_y_net_x18,
      op(0) => counter1_op_net
    );

  counter2: entity work.counter_41314d726b
    port map (
      ce => ce_1_sg_x643,
      clk => clk_1_sg_x643,
      clr => '0',
      en(0) => logical5_y_net_x0,
      rst(0) => logical14_y_net_x18,
      op(0) => counter2_op_net
    );

  inverter: entity work.inverter_e4a281cf78
    port map (
      ce => ce_1_sg_x643,
      clk => clk_1_sg_x643,
      clr => '0',
      ip(0) => counter1_op_net,
      op(0) => inverter_op_net_x0
    );

  inverter1: entity work.inverter_6844eee868
    port map (
      ce => ce_1_sg_x643,
      clk => clk_1_sg_x643,
      clr => '0',
      ip(0) => logical7_y_net_x0,
      op(0) => inverter1_op_net_x0
    );

  inverter2: entity work.inverter_e4a281cf78
    port map (
      ce => ce_1_sg_x643,
      clk => clk_1_sg_x643,
      clr => '0',
      ip(0) => counter2_op_net,
      op(0) => inverter2_op_net_x0
    );

  inverter3: entity work.inverter_6844eee868
    port map (
      ce => ce_1_sg_x643,
      clk => clk_1_sg_x643,
      clr => '0',
      ip(0) => relational5_op_net_x3,
      op(0) => inverter3_op_net_x0
    );

  inverter4: entity work.inverter_e5b38cca3b
    port map (
      ce => ce_1_sg_x643,
      clk => clk_1_sg_x643,
      clr => '0',
      ip(0) => relational5_op_net_x2,
      op(0) => inverter4_op_net
    );

  logical: entity work.logical_80f90b97d0
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0(0) => inverter4_op_net,
      d1(0) => arm12_y_net_x0,
      y(0) => logical_y_net
    );

  logical1: entity work.logical_444d3f5046
    port map (
      ce => ce_1_sg_x643,
      clk => clk_1_sg_x643,
      clr => '0',
      d0(0) => logical7_y_net_x0,
      d1(0) => logical14_y_net_x18,
      y(0) => logical1_y_net_x1
    );

  logical2: entity work.logical_5773759131
    port map (
      ce => ce_1_sg_x643,
      clk => clk_1_sg_x643,
      clr => '0',
      d0(0) => logical7_y_net_x0,
      d1(0) => relational5_op_net_x0,
      d2(0) => relational5_op_net_x1,
      y(0) => logical2_y_net
    );

  mux: entity work.mux_1e22c21d05
    port map (
      ce => ce_1_sg_x643,
      clk => clk_1_sg_x643,
      clr => '0',
      d0(0) => slice3_y_net,
      d1(0) => relational_op_net_x16,
      sel(0) => logical_y_net,
      y(0) => mux_y_net_x0
    );

  mux1: entity work.mux_1e22c21d05
    port map (
      ce => ce_1_sg_x643,
      clk => clk_1_sg_x643,
      clr => '0',
      d0(0) => slice2_y_net,
      d1(0) => relational_op_net_x17,
      sel(0) => logical_y_net,
      y(0) => mux1_y_net_x0
    );

  mux2: entity work.mux_1e22c21d05
    port map (
      ce => ce_1_sg_x643,
      clk => clk_1_sg_x643,
      clr => '0',
      d0(0) => relational5_op_net_x1,
      d1(0) => relational_op_net_x18,
      sel(0) => logical_y_net,
      y(0) => mux2_y_net_x0
    );

  mux3: entity work.mux_1e22c21d05
    port map (
      ce => ce_1_sg_x643,
      clk => clk_1_sg_x643,
      clr => '0',
      d0(0) => relational5_op_net_x0,
      d1(0) => relational_op_net_x19,
      sel(0) => logical_y_net,
      y(0) => mux3_y_net_x0
    );

  mux4: entity work.mux_1e22c21d05
    port map (
      ce => ce_1_sg_x643,
      clk => clk_1_sg_x643,
      clr => '0',
      d0(0) => slice_y_net,
      d1(0) => relational_op_net_x20,
      sel(0) => logical_y_net,
      y(0) => mux4_y_net_x0
    );

  mux5: entity work.mux_1e22c21d05
    port map (
      ce => ce_1_sg_x643,
      clk => clk_1_sg_x643,
      clr => '0',
      d0(0) => slice1_y_net,
      d1(0) => relational_op_net_x21,
      sel(0) => logical_y_net,
      y(0) => mux5_y_net_x0
    );

  mux6: entity work.mux_1e22c21d05
    port map (
      ce => ce_1_sg_x643,
      clk => clk_1_sg_x643,
      clr => '0',
      d0(0) => logical10_y_net_x1,
      d1(0) => relational_op_net_x22,
      sel(0) => logical_y_net,
      y(0) => mux6_y_net_x0
    );

  mux7: entity work.mux_1e22c21d05
    port map (
      ce => ce_1_sg_x643,
      clk => clk_1_sg_x643,
      clr => '0',
      d0(0) => logical8_y_net_x1,
      d1(0) => relational_op_net_x23,
      sel(0) => logical_y_net,
      y(0) => mux7_y_net_x0
    );

  pulse_ext1_0975e3daa8: entity work.pulse_ext_entity_39d1b29fcf
    port map (
      ce_1 => ce_1_sg_x643,
      clk_1 => clk_1_sg_x643,
      in_x0 => logical12_y_net_x2,
      out_x0 => relational5_op_net_x1
    );

  pulse_ext2_5b77244ab9: entity work.pulse_ext2_entity_5b77244ab9
    port map (
      ce_1 => ce_1_sg_x643,
      clk_1 => clk_1_sg_x643,
      in_x0 => logical1_y_net_x1,
      out_x0 => relational5_op_net_x2
    );

  pulse_ext3_6b74262259: entity work.pulse_ext_entity_39d1b29fcf
    port map (
      ce_1 => ce_1_sg_x643,
      clk_1 => clk_1_sg_x643,
      in_x0 => logical4_y_net_x2,
      out_x0 => relational5_op_net_x3
    );

  pulse_ext_39d1b29fcf: entity work.pulse_ext_entity_39d1b29fcf
    port map (
      ce_1 => ce_1_sg_x643,
      clk_1 => clk_1_sg_x643,
      in_x0 => logical17_y_net_x2,
      out_x0 => relational5_op_net_x0
    );

  roach_gpioa0_f5eb6eeb90: entity work.roach_gpioa0_entity_f5eb6eeb90
    port map (
      ce_1 => ce_1_sg_x643,
      clk_1 => clk_1_sg_x643,
      gpio_out => mux_y_net_x0,
      convert_x0 => convert_dout_net_x13
    );

  roach_gpioa1_faa60a8a05: entity work.roach_gpioa0_entity_f5eb6eeb90
    port map (
      ce_1 => ce_1_sg_x643,
      clk_1 => clk_1_sg_x643,
      gpio_out => mux1_y_net_x0,
      convert_x0 => convert_dout_net_x14
    );

  roach_gpioa2_8ef519b0a9: entity work.roach_gpioa0_entity_f5eb6eeb90
    port map (
      ce_1 => ce_1_sg_x643,
      clk_1 => clk_1_sg_x643,
      gpio_out => mux2_y_net_x0,
      convert_x0 => convert_dout_net_x15
    );

  roach_gpioa3_dd10438749: entity work.roach_gpioa0_entity_f5eb6eeb90
    port map (
      ce_1 => ce_1_sg_x643,
      clk_1 => clk_1_sg_x643,
      gpio_out => mux3_y_net_x0,
      convert_x0 => convert_dout_net_x16
    );

  roach_gpioa4_c2e179859d: entity work.roach_gpioa0_entity_f5eb6eeb90
    port map (
      ce_1 => ce_1_sg_x643,
      clk_1 => clk_1_sg_x643,
      gpio_out => mux4_y_net_x0,
      convert_x0 => convert_dout_net_x17
    );

  roach_gpioa5_3619b26af0: entity work.roach_gpioa0_entity_f5eb6eeb90
    port map (
      ce_1 => ce_1_sg_x643,
      clk_1 => clk_1_sg_x643,
      gpio_out => mux5_y_net_x0,
      convert_x0 => convert_dout_net_x18
    );

  roach_gpioa6_300ddaf094: entity work.roach_gpioa0_entity_f5eb6eeb90
    port map (
      ce_1 => ce_1_sg_x643,
      clk_1 => clk_1_sg_x643,
      gpio_out => mux6_y_net_x0,
      convert_x0 => convert_dout_net_x19
    );

  roach_gpioa7_83585955d3: entity work.roach_gpioa0_entity_f5eb6eeb90
    port map (
      ce_1 => ce_1_sg_x643,
      clk_1 => clk_1_sg_x643,
      gpio_out => mux7_y_net_x0,
      convert_x0 => convert_dout_net_x20
    );

  roach_gpioa_oe_be1a2cf1d1: entity work.roach_gpioa_oe_entity_be1a2cf1d1
    port map (
      gpio_out => constant_op_net_x0,
      convert_x0 => convert_dout_net_x21
    );

  roach_led0_be9a3489ac: entity work.roach_led0_entity_be9a3489ac
    port map (
      ce_1 => ce_1_sg_x643,
      clk_1 => clk_1_sg_x643,
      gpio_out => inverter2_op_net_x0,
      convert_x0 => convert_dout_net_x22
    );

  roach_led1_f1ab131465: entity work.roach_led0_entity_be9a3489ac
    port map (
      ce_1 => ce_1_sg_x643,
      clk_1 => clk_1_sg_x643,
      gpio_out => inverter_op_net_x0,
      convert_x0 => convert_dout_net_x23
    );

  roach_led2_93fed198ae: entity work.roach_gpioa0_entity_f5eb6eeb90
    port map (
      ce_1 => ce_1_sg_x643,
      clk_1 => clk_1_sg_x643,
      gpio_out => inverter3_op_net_x0,
      convert_x0 => convert_dout_net_x24
    );

  roach_led3_09b50a71fe: entity work.roach_gpioa0_entity_f5eb6eeb90
    port map (
      ce_1 => ce_1_sg_x643,
      clk_1 => clk_1_sg_x643,
      gpio_out => inverter1_op_net_x0,
      convert_x0 => convert_dout_net_x25
    );

  slice: entity work.xlslice
    generic map (
      new_lsb => 0,
      new_msb => 0,
      x_width => 1,
      y_width => 1
    )
    port map (
      x(0) => counter2_op_net,
      y(0) => slice_y_net
    );

  slice1: entity work.xlslice
    generic map (
      new_lsb => 0,
      new_msb => 0,
      x_width => 1,
      y_width => 1
    )
    port map (
      x(0) => counter1_op_net,
      y(0) => slice1_y_net
    );

  slice2: entity work.xlslice
    generic map (
      new_lsb => 0,
      new_msb => 0,
      x_width => 1,
      y_width => 1
    )
    port map (
      x(0) => logical2_y_net,
      y(0) => slice2_y_net
    );

  slice3: entity work.xlslice
    generic map (
      new_lsb => 0,
      new_msb => 0,
      x_width => 1,
      y_width => 1
    )
    port map (
      x(0) => relational5_op_net_x3,
      y(0) => slice3_y_net
    );

  subsystem_b66990d278: entity work.subsystem_entity_b66990d278
    port map (
      ce_1 => ce_1_sg_x643,
      clk_1 => clk_1_sg_x643,
      rst => logical14_y_net_x18,
      led_pulse0 => counter1_op_net_x16,
      led_pulse0_x0 => counter2_op_net_x16,
      led_pulse0_x1 => slice_y_net_x16,
      led_pulse0_x2 => edge_op_y_net_x18,
      led_pulse0_x3 => enable_y_net_x17,
      led_pulse1 => counter1_op_net_x17,
      led_pulse1_x0 => counter2_op_net_x17,
      led_pulse1_x1 => slice_y_net_x17,
      led_pulse1_x2 => edge_op_y_net_x19,
      led_pulse1_x3 => enable_y_net_x18,
      led_pulse2 => counter1_op_net_x18,
      led_pulse2_x0 => counter2_op_net_x18,
      led_pulse2_x1 => slice_y_net_x18,
      led_pulse2_x2 => edge_op_y_net_x20,
      led_pulse2_x3 => enable_y_net_x19,
      led_pulse3 => counter1_op_net_x19,
      led_pulse3_x0 => counter2_op_net_x19,
      led_pulse3_x1 => slice_y_net_x19,
      led_pulse3_x2 => edge_op_y_net_x21,
      led_pulse3_x3 => enable_y_net_x20,
      led_pulse4 => counter1_op_net_x20,
      led_pulse4_x0 => counter2_op_net_x20,
      led_pulse4_x1 => slice_y_net_x20,
      led_pulse4_x2 => edge_op_y_net_x22,
      led_pulse4_x3 => enable_y_net_x21,
      led_pulse5 => counter1_op_net_x21,
      led_pulse5_x0 => counter2_op_net_x21,
      led_pulse5_x1 => slice_y_net_x21,
      led_pulse5_x2 => edge_op_y_net_x23,
      led_pulse5_x3 => enable_y_net_x22,
      led_pulse6 => counter1_op_net_x22,
      led_pulse6_x0 => counter2_op_net_x22,
      led_pulse6_x1 => slice_y_net_x22,
      led_pulse6_x2 => edge_op_y_net_x24,
      led_pulse6_x3 => enable_y_net_x23,
      led_pulse7 => counter1_op_net_x23,
      led_pulse7_x0 => counter2_op_net_x23,
      led_pulse7_x1 => slice_y_net_x23,
      led_pulse7_x2 => edge_op_y_net_x25,
      led_pulse7_x3 => enable_y_net_x24,
      out1 => relational_op_net_x16,
      out2 => relational_op_net_x17,
      out3 => relational_op_net_x18,
      out4 => relational_op_net_x19,
      out5 => relational_op_net_x20,
      out6 => relational_op_net_x21,
      out7 => relational_op_net_x22,
      out8 => relational_op_net_x23
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/packetiser"

entity packetiser_entity_38cd0f1979 is
  port (
    antbase: in std_logic_vector(31 downto 0); 
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    data_x0: in std_logic_vector(63 downto 0); 
    dv_x0: in std_logic; 
    mrst: in std_logic; 
    sync: in std_logic; 
    out_oob: out std_logic_vector(7 downto 0); 
    out_pkt: out std_logic_vector(63 downto 0); 
    out_valid: out std_logic
  );
end packetiser_entity_38cd0f1979;

architecture structural of packetiser_entity_38cd0f1979 is
  signal ce_1_sg_x646: std_logic;
  signal clk_1_sg_x646: std_logic;
  signal concat2_y_net: std_logic_vector(7 downto 0);
  signal constant1_op_net: std_logic_vector(4 downto 0);
  signal constant3_op_net: std_logic_vector(4 downto 0);
  signal constant4_op_net: std_logic;
  signal constant5_op_net: std_logic_vector(2 downto 0);
  signal data: std_logic_vector(63 downto 0);
  signal delay1_q_net_x0: std_logic;
  signal delay2_q_net_x0: std_logic;
  signal delay42_q_net_x0: std_logic_vector(31 downto 0);
  signal dv: std_logic;
  signal dvd_hdrv: std_logic;
  signal eof: std_logic;
  signal hdr64: std_logic_vector(63 downto 0);
  signal hdr_val: std_logic;
  signal logical14_y_net_x19: std_logic;
  signal main_ctr: std_logic_vector(52 downto 0);
  signal mrst_armed: std_logic;
  signal mux3_y_net_x0: std_logic_vector(63 downto 0);
  signal oob_out_x2: std_logic_vector(7 downto 0);
  signal payload_ctr: std_logic_vector(4 downto 0);
  signal pcnt: std_logic_vector(11 downto 0);
  signal pcnt_rst: std_logic;
  signal pkt_out_x2: std_logic_vector(63 downto 0);
  signal relational1_op_net: std_logic;
  signal relational_op_net: std_logic;
  signal slice1_y_net: std_logic_vector(11 downto 0);
  signal slice7_y_net: std_logic_vector(15 downto 0);
  signal slice8_y_net: std_logic_vector(7 downto 0);
  signal slice9_y_net: std_logic_vector(3 downto 0);
  signal timestamp: std_logic_vector(35 downto 0);
  signal valid_out_x3: std_logic;

begin
  delay42_q_net_x0 <= antbase;
  ce_1_sg_x646 <= ce_1;
  clk_1_sg_x646 <= clk_1;
  mux3_y_net_x0 <= data_x0;
  delay1_q_net_x0 <= dv_x0;
  logical14_y_net_x19 <= mrst;
  delay2_q_net_x0 <= sync;
  out_oob <= oob_out_x2;
  out_pkt <= pkt_out_x2;
  out_valid <= valid_out_x3;

  concat1: entity work.concat_eb40f005cd
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      in0 => timestamp,
      in1 => pcnt,
      in2 => slice7_y_net,
      y => hdr64
    );

  concat2: entity work.concat_f4ce182b0d
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      in0 => constant5_op_net,
      in1(0) => mrst_armed,
      in2(0) => constant4_op_net,
      in3(0) => eof,
      in4(0) => delay2_q_net_x0,
      in5(0) => hdr_val,
      y => concat2_y_net
    );

  concat3: entity work.concat_114a1e1663
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      in0 => slice9_y_net,
      in1 => slice8_y_net,
      y => pcnt
    );

  constant1: entity work.constant_fe72737ca0
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op => constant1_op_net
    );

  constant3: entity work.constant_578dda96c6
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op => constant3_op_net
    );

  constant4: entity work.constant_963ed6358a
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op(0) => constant4_op_net
    );

  constant5: entity work.constant_822933f89b
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op => constant5_op_net
    );

  hdr_delay: entity work.delay_9f02caa990
    port map (
      ce => ce_1_sg_x646,
      clk => clk_1_sg_x646,
      clr => '0',
      d(0) => delay1_q_net_x0,
      q(0) => dv
    );

  hdr_delay1: entity work.delay_e2d047c154
    port map (
      ce => ce_1_sg_x646,
      clk => clk_1_sg_x646,
      clr => '0',
      d => mux3_y_net_x0,
      q => data
    );

  hdr_delay2: entity work.delay_e18fb31a3d
    port map (
      ce => ce_1_sg_x646,
      clk => clk_1_sg_x646,
      clr => '0',
      d(0) => dvd_hdrv,
      q(0) => valid_out_x3
    );

  hdr_delay3: entity work.delay_23f848c85b
    port map (
      ce => ce_1_sg_x646,
      clk => clk_1_sg_x646,
      clr => '0',
      d => concat2_y_net,
      q => oob_out_x2
    );

  logical1: entity work.logical_80f90b97d0
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0(0) => delay1_q_net_x0,
      d1(0) => relational_op_net,
      y(0) => hdr_val
    );

  logical2: entity work.logical_aacf6e1b0e
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0(0) => dv,
      d1(0) => hdr_val,
      y(0) => dvd_hdrv
    );

  logical3: entity work.logical_80f90b97d0
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0(0) => mrst_armed,
      d1(0) => delay2_q_net_x0,
      y(0) => pcnt_rst
    );

  logical4: entity work.logical_80f90b97d0
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0(0) => dv,
      d1(0) => relational1_op_net,
      y(0) => eof
    );

  main_ctr_x0: entity work.counter_7f1bcfc849
    port map (
      ce => ce_1_sg_x646,
      clk => clk_1_sg_x646,
      clr => '0',
      en(0) => dv,
      rst(0) => pcnt_rst,
      op => main_ctr
    );

  mux: entity work.mux_6054a14682
    port map (
      ce => ce_1_sg_x646,
      clk => clk_1_sg_x646,
      clr => '0',
      d0 => data,
      d1 => hdr64,
      sel(0) => hdr_val,
      y => pkt_out_x2
    );

  register_x0: entity work.xlregister
    generic map (
      d_width => 1,
      init_value => b"0"
    )
    port map (
      ce => ce_1_sg_x646,
      clk => clk_1_sg_x646,
      d(0) => logical14_y_net_x19,
      en(0) => logical14_y_net_x19,
      rst(0) => delay2_q_net_x0,
      q(0) => mrst_armed
    );

  relational: entity work.relational_9ece3c8c4e
    port map (
      a => payload_ctr,
      b => constant1_op_net,
      ce => '0',
      clk => '0',
      clr => '0',
      op(0) => relational_op_net
    );

  relational1: entity work.relational_9ece3c8c4e
    port map (
      a => payload_ctr,
      b => constant3_op_net,
      ce => '0',
      clk => '0',
      clr => '0',
      op(0) => relational1_op_net
    );

  slice1: entity work.xlslice
    generic map (
      new_lsb => 5,
      new_msb => 16,
      x_width => 53,
      y_width => 12
    )
    port map (
      x => main_ctr,
      y => slice1_y_net
    );

  slice2: entity work.xlslice
    generic map (
      new_lsb => 17,
      new_msb => 52,
      x_width => 53,
      y_width => 36
    )
    port map (
      x => main_ctr,
      y => timestamp
    );

  slice4: entity work.xlslice
    generic map (
      new_lsb => 0,
      new_msb => 4,
      x_width => 53,
      y_width => 5
    )
    port map (
      x => main_ctr,
      y => payload_ctr
    );

  slice7: entity work.xlslice
    generic map (
      new_lsb => 0,
      new_msb => 15,
      x_width => 32,
      y_width => 16
    )
    port map (
      x => delay42_q_net_x0,
      y => slice7_y_net
    );

  slice8: entity work.xlslice
    generic map (
      new_lsb => 4,
      new_msb => 11,
      x_width => 12,
      y_width => 8
    )
    port map (
      x => slice1_y_net,
      y => slice8_y_net
    );

  slice9: entity work.xlslice
    generic map (
      new_lsb => 0,
      new_msb => 3,
      x_width => 12,
      y_width => 4
    )
    port map (
      x => slice1_y_net,
      y => slice9_y_net
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/packetiser_tvg_contiguous"

entity packetiser_tvg_contiguous_entity_8f915d99f4 is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    din: in std_logic_vector(63 downto 0); 
    dv: in std_logic; 
    sync: in std_logic; 
    use_tvg: in std_logic; 
    dout: out std_logic_vector(63 downto 0); 
    dv_out: out std_logic; 
    sync_out_x1: out std_logic
  );
end packetiser_tvg_contiguous_entity_8f915d99f4;

architecture structural of packetiser_tvg_contiguous_entity_8f915d99f4 is
  signal ce_1_sg_x647: std_logic;
  signal clk_1_sg_x647: std_logic;
  signal concat1_y_net: std_logic_vector(63 downto 0);
  signal concat2_y_net: std_logic_vector(11 downto 0);
  signal delay1_q_net_x1: std_logic;
  signal delay2_q_net_x1: std_logic;
  signal dvalid_x0: std_logic;
  signal freq: std_logic_vector(31 downto 0);
  signal master: std_logic_vector(16 downto 0);
  signal mux1_y_net_x0: std_logic_vector(63 downto 0);
  signal mux3_y_net_x1: std_logic_vector(63 downto 0);
  signal payload_ctr: std_logic_vector(15 downto 0);
  signal register1_q_net_x0: std_logic;
  signal slice2_y_net: std_logic_vector(3 downto 0);
  signal slice4_y_net: std_logic_vector(4 downto 0);
  signal slice5_y_net: std_logic_vector(3 downto 0);
  signal slice6_y_net: std_logic_vector(7 downto 0);
  signal sync_out_x0: std_logic;
  signal xeng: std_logic_vector(15 downto 0);

begin
  ce_1_sg_x647 <= ce_1;
  clk_1_sg_x647 <= clk_1;
  mux1_y_net_x0 <= din;
  dvalid_x0 <= dv;
  sync_out_x0 <= sync;
  register1_q_net_x0 <= use_tvg;
  dout <= mux3_y_net_x1;
  dv_out <= delay1_q_net_x1;
  sync_out_x1 <= delay2_q_net_x1;

  concat1: entity work.concat_8ed7cb66cd
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      in0 => xeng,
      in1 => payload_ctr,
      in2 => freq,
      y => concat1_y_net
    );

  concat2: entity work.concat_114a1e1663
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      in0 => slice5_y_net,
      in1 => slice6_y_net,
      y => concat2_y_net
    );

  convert: entity work.xlconvert
    generic map (
      bool_conversion => 0,
      din_arith => 1,
      din_bin_pt => 0,
      din_width => 12,
      dout_arith => 1,
      dout_bin_pt => 0,
      dout_width => 32,
      latency => 0,
      overflow => xlWrap,
      quantization => xlTruncate
    )
    port map (
      ce => ce_1_sg_x647,
      clk => clk_1_sg_x647,
      clr => '0',
      din => concat2_y_net,
      en => "1",
      dout => freq
    );

  convert2: entity work.xlconvert
    generic map (
      bool_conversion => 0,
      din_arith => 1,
      din_bin_pt => 0,
      din_width => 5,
      dout_arith => 1,
      dout_bin_pt => 0,
      dout_width => 16,
      latency => 0,
      overflow => xlWrap,
      quantization => xlTruncate
    )
    port map (
      ce => ce_1_sg_x647,
      clk => clk_1_sg_x647,
      clr => '0',
      din => slice4_y_net,
      en => "1",
      dout => payload_ctr
    );

  convert3: entity work.xlconvert
    generic map (
      bool_conversion => 0,
      din_arith => 1,
      din_bin_pt => 0,
      din_width => 4,
      dout_arith => 1,
      dout_bin_pt => 0,
      dout_width => 16,
      latency => 0,
      overflow => xlWrap,
      quantization => xlTruncate
    )
    port map (
      ce => ce_1_sg_x647,
      clk => clk_1_sg_x647,
      clr => '0',
      din => slice2_y_net,
      en => "1",
      dout => xeng
    );

  delay1: entity work.delay_9f02caa990
    port map (
      ce => ce_1_sg_x647,
      clk => clk_1_sg_x647,
      clr => '0',
      d(0) => dvalid_x0,
      q(0) => delay1_q_net_x1
    );

  delay2: entity work.delay_9f02caa990
    port map (
      ce => ce_1_sg_x647,
      clk => clk_1_sg_x647,
      clr => '0',
      d(0) => sync_out_x0,
      q(0) => delay2_q_net_x1
    );

  mux3: entity work.mux_fd01d62b53
    port map (
      ce => ce_1_sg_x647,
      clk => clk_1_sg_x647,
      clr => '0',
      d0 => mux1_y_net_x0,
      d1 => concat1_y_net,
      sel(0) => register1_q_net_x0,
      y => mux3_y_net_x1
    );

  packet_counter: entity work.xlcounter_free_c09f12_01
    generic map (
      core_name0 => "cntr_11_0_5c141fadd7b08b3b",
      op_arith => xlUnsigned,
      op_width => 17
    )
    port map (
      ce => ce_1_sg_x647,
      clk => clk_1_sg_x647,
      clr => '0',
      en(0) => dvalid_x0,
      rst(0) => sync_out_x0,
      op => master
    );

  slice2: entity work.xlslice
    generic map (
      new_lsb => 5,
      new_msb => 8,
      x_width => 17,
      y_width => 4
    )
    port map (
      x => master,
      y => slice2_y_net
    );

  slice4: entity work.xlslice
    generic map (
      new_lsb => 0,
      new_msb => 4,
      x_width => 17,
      y_width => 5
    )
    port map (
      x => master,
      y => slice4_y_net
    );

  slice5: entity work.xlslice
    generic map (
      new_lsb => 5,
      new_msb => 8,
      x_width => 17,
      y_width => 4
    )
    port map (
      x => master,
      y => slice5_y_net
    );

  slice6: entity work.xlslice
    generic map (
      new_lsb => 9,
      new_msb => 16,
      x_width => 17,
      y_width => 8
    )
    port map (
      x => master,
      y => slice6_y_net
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/qdr_ct/buffer_to_64"

entity buffer_to_64_entity_dd495b5105 is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    ct_data: in std_logic_vector(35 downto 0); 
    ct_valid: in std_logic; 
    sync: in std_logic; 
    sync64: out std_logic; 
    x64_bit_data: out std_logic_vector(63 downto 0); 
    x64_bit_valid: out std_logic
  );
end buffer_to_64_entity_dd495b5105;

architecture structural of buffer_to_64_entity_dd495b5105 is
  signal ce_1_sg_x649: std_logic;
  signal clk_1_sg_x649: std_logic;
  signal concat2_y_net: std_logic_vector(63 downto 0);
  signal constant1_op_net: std_logic_vector(63 downto 0);
  signal constant_op_net: std_logic_vector(1 downto 0);
  signal ctr: std_logic_vector(1 downto 0);
  signal d0: std_logic_vector(15 downto 0);
  signal d1: std_logic_vector(15 downto 0);
  signal d2: std_logic_vector(15 downto 0);
  signal d3: std_logic_vector(15 downto 0);
  signal data_out: std_logic_vector(63 downto 0);
  signal dclk: std_logic;
  signal delay1_q_net: std_logic_vector(15 downto 0);
  signal delay6_q_net: std_logic;
  signal dvalid_x1: std_logic;
  signal extract_parity_b_net_x0: std_logic_vector(35 downto 0);
  signal logical1_y_net_x0: std_logic;
  signal mux1_y_net_x1: std_logic_vector(63 downto 0);
  signal mux_y_net_x0: std_logic;
  signal slice4_y_net: std_logic_vector(15 downto 0);
  signal sync_out_x1: std_logic;

begin
  ce_1_sg_x649 <= ce_1;
  clk_1_sg_x649 <= clk_1;
  extract_parity_b_net_x0 <= ct_data;
  logical1_y_net_x0 <= ct_valid;
  mux_y_net_x0 <= sync;
  sync64 <= sync_out_x1;
  x64_bit_data <= mux1_y_net_x1;
  x64_bit_valid <= dvalid_x1;

  concat2: entity work.concat_8b51f4067b
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      in0 => d0,
      in1 => d1,
      in2 => d2,
      in3 => d3,
      y => concat2_y_net
    );

  constant1: entity work.constant_7ef2258ec8
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op => constant1_op_net
    );

  constant_x0: entity work.constant_3a9a3daeb9
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op => constant_op_net
    );

  counter: entity work.xlcounter_free_c09f12_01
    generic map (
      core_name0 => "cntr_11_0_263175d139d7ac6d",
      op_arith => xlUnsigned,
      op_width => 2
    )
    port map (
      ce => ce_1_sg_x649,
      clk => clk_1_sg_x649,
      clr => '0',
      en(0) => delay6_q_net,
      rst(0) => mux_y_net_x0,
      op => ctr
    );

  delay: entity work.xldelay
    generic map (
      latency => 1,
      reg_retiming => 0,
      reset => 0,
      width => 16
    )
    port map (
      ce => ce_1_sg_x649,
      clk => clk_1_sg_x649,
      d => delay1_q_net,
      en => '1',
      rst => '1',
      q => d2
    );

  delay1: entity work.xldelay
    generic map (
      latency => 3,
      reg_retiming => 0,
      reset => 0,
      width => 16
    )
    port map (
      ce => ce_1_sg_x649,
      clk => clk_1_sg_x649,
      d => slice4_y_net,
      en => '1',
      rst => '1',
      q => delay1_q_net
    );

  delay2: entity work.xldelay
    generic map (
      latency => 7,
      reg_retiming => 0,
      reset => 0,
      width => 1
    )
    port map (
      ce => ce_1_sg_x649,
      clk => clk_1_sg_x649,
      d(0) => mux_y_net_x0,
      en => '1',
      rst => '1',
      q(0) => sync_out_x1
    );

  delay3: entity work.xldelay
    generic map (
      latency => 2,
      reg_retiming => 0,
      reset => 0,
      width => 16
    )
    port map (
      ce => ce_1_sg_x649,
      clk => clk_1_sg_x649,
      d => delay1_q_net,
      en => '1',
      rst => '1',
      q => d1
    );

  delay4: entity work.xldelay
    generic map (
      latency => 3,
      reg_retiming => 0,
      reset => 0,
      width => 16
    )
    port map (
      ce => ce_1_sg_x649,
      clk => clk_1_sg_x649,
      d => delay1_q_net,
      en => '1',
      rst => '1',
      q => d0
    );

  delay5: entity work.delay_9bb25f1d93
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d => delay1_q_net,
      q => d3
    );

  delay6: entity work.xldelay
    generic map (
      latency => 3,
      reg_retiming => 0,
      reset => 0,
      width => 1
    )
    port map (
      ce => ce_1_sg_x649,
      clk => clk_1_sg_x649,
      d(0) => logical1_y_net_x0,
      en => '1',
      rst => '1',
      q(0) => delay6_q_net
    );

  delay7: entity work.xldelay
    generic map (
      latency => 1,
      reg_retiming => 0,
      reset => 0,
      width => 1
    )
    port map (
      ce => ce_1_sg_x649,
      clk => clk_1_sg_x649,
      d(0) => dclk,
      en => '1',
      rst => '1',
      q(0) => dvalid_x1
    );

  mux1: entity work.mux_66e06093b2
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0 => constant1_op_net,
      d1 => data_out,
      sel(0) => dvalid_x1,
      y => mux1_y_net_x1
    );

  register_x0: entity work.xlregister
    generic map (
      d_width => 64,
      init_value => b"0000000000000000000000000000000000000000000000000000000000000000"
    )
    port map (
      ce => ce_1_sg_x649,
      clk => clk_1_sg_x649,
      d => concat2_y_net,
      en(0) => dclk,
      rst => "0",
      q => data_out
    );

  relational: entity work.relational_5f1eb17108
    port map (
      a => constant_op_net,
      b => ctr,
      ce => '0',
      clk => '0',
      clr => '0',
      op(0) => dclk
    );

  slice4: entity work.xlslice
    generic map (
      new_lsb => 0,
      new_msb => 15,
      x_width => 36,
      y_width => 16
    )
    port map (
      x => extract_parity_b_net_x0,
      y => slice4_y_net
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/qdr_ct/bus_create2"

entity bus_create2_entity_7faa65db15 is
  port (
    in1: in std_logic; 
    in2: in std_logic_vector(63 downto 0); 
    in3: in std_logic; 
    bus_out: out std_logic_vector(65 downto 0)
  );
end bus_create2_entity_7faa65db15;

architecture structural of bus_create2_entity_7faa65db15 is
  signal concatenate_y_net_x19: std_logic_vector(65 downto 0);
  signal dvalid_x2: std_logic;
  signal mux1_y_net_x2: std_logic_vector(63 downto 0);
  signal reinterpret1_output_port_net: std_logic;
  signal reinterpret2_output_port_net: std_logic_vector(63 downto 0);
  signal reinterpret3_output_port_net: std_logic;
  signal sync_out_x2: std_logic;

begin
  sync_out_x2 <= in1;
  mux1_y_net_x2 <= in2;
  dvalid_x2 <= in3;
  bus_out <= concatenate_y_net_x19;

  concatenate: entity work.concat_4564aa4c8b
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      in0(0) => reinterpret1_output_port_net,
      in1 => reinterpret2_output_port_net,
      in2(0) => reinterpret3_output_port_net,
      y => concatenate_y_net_x19
    );

  reinterpret1: entity work.reinterpret_112d91c147
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port(0) => sync_out_x2,
      output_port(0) => reinterpret1_output_port_net
    );

  reinterpret2: entity work.reinterpret_9a13f6a2a0
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => mux1_y_net_x2,
      output_port => reinterpret2_output_port_net
    );

  reinterpret3: entity work.reinterpret_112d91c147
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port(0) => dvalid_x2,
      output_port(0) => reinterpret3_output_port_net
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/qdr_ct/qdr"

entity qdr_entity_5ce551e581 is
  port (
    address: in std_logic_vector(18 downto 0); 
    be: in std_logic_vector(3 downto 0); 
    c09f12_01_qdr_ct_qdr_ack: in std_logic; 
    c09f12_01_qdr_ct_qdr_cal_fail: in std_logic; 
    c09f12_01_qdr_ct_qdr_data_out: in std_logic_vector(35 downto 0); 
    c09f12_01_qdr_ct_qdr_phy_ready: in std_logic; 
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    data_in: in std_logic_vector(15 downto 0); 
    rd_en: in std_logic; 
    wr_en: in std_logic; 
    cal_fail: out std_logic; 
    convert_address_x0: out std_logic_vector(31 downto 0); 
    convert_be_x0: out std_logic_vector(3 downto 0); 
    convert_data_in_x0: out std_logic_vector(35 downto 0); 
    convert_rd_en_x0: out std_logic; 
    convert_wr_en_x0: out std_logic; 
    data_out: out std_logic_vector(35 downto 0); 
    data_valid: out std_logic; 
    phy_ready: out std_logic
  );
end qdr_entity_5ce551e581;

architecture structural of qdr_entity_5ce551e581 is
  signal c09f12_01_qdr_ct_qdr_ack_net_x0: std_logic;
  signal c09f12_01_qdr_ct_qdr_cal_fail_net_x0: std_logic;
  signal c09f12_01_qdr_ct_qdr_data_out_net_x0: std_logic_vector(35 downto 0);
  signal c09f12_01_qdr_ct_qdr_phy_ready_net_x0: std_logic;
  signal ce_1_sg_x652: std_logic;
  signal clk_1_sg_x652: std_logic;
  signal constant_op_net_x0: std_logic_vector(3 downto 0);
  signal convert_ack_dout_net: std_logic;
  signal convert_address_dout_net_x0: std_logic_vector(31 downto 0);
  signal convert_be_dout_net_x0: std_logic_vector(3 downto 0);
  signal convert_cal_fail_dout_net_x0: std_logic;
  signal convert_data_in1_dout_net: std_logic_vector(35 downto 0);
  signal convert_data_in_dout_net_x0: std_logic_vector(35 downto 0);
  signal convert_rd_en_dout_net_x0: std_logic;
  signal convert_ready_dout_net_x0: std_logic;
  signal convert_wr_en_dout_net_x0: std_logic;
  signal delay1_q_net: std_logic;
  signal delay3_q_net_x0: std_logic;
  signal delay6_q_net_x0: std_logic;
  signal extract_parity_b_net_x1: std_logic_vector(35 downto 0);
  signal force_ack_output_port_net: std_logic;
  signal force_cal_fail_output_port_net: std_logic;
  signal force_data_out_output_port_net: std_logic_vector(35 downto 0);
  signal force_phy_ready_output_port_net: std_logic;
  signal insert_parity_b_net: std_logic_vector(35 downto 0);
  signal inverter2_op_net: std_logic;
  signal logical1_y_net_x1: std_logic;
  signal logical_y_net: std_logic;
  signal mux1_y_net_x0: std_logic_vector(15 downto 0);
  signal mux2_y_net_x0: std_logic_vector(18 downto 0);
  signal prev_rd_q_net: std_logic;
  signal qdr_latency_q_net: std_logic;

begin
  mux2_y_net_x0 <= address;
  constant_op_net_x0 <= be;
  c09f12_01_qdr_ct_qdr_ack_net_x0 <= c09f12_01_qdr_ct_qdr_ack;
  c09f12_01_qdr_ct_qdr_cal_fail_net_x0 <= c09f12_01_qdr_ct_qdr_cal_fail;
  c09f12_01_qdr_ct_qdr_data_out_net_x0 <= c09f12_01_qdr_ct_qdr_data_out;
  c09f12_01_qdr_ct_qdr_phy_ready_net_x0 <= c09f12_01_qdr_ct_qdr_phy_ready;
  ce_1_sg_x652 <= ce_1;
  clk_1_sg_x652 <= clk_1;
  mux1_y_net_x0 <= data_in;
  delay3_q_net_x0 <= rd_en;
  delay6_q_net_x0 <= wr_en;
  cal_fail <= convert_cal_fail_dout_net_x0;
  convert_address_x0 <= convert_address_dout_net_x0;
  convert_be_x0 <= convert_be_dout_net_x0;
  convert_data_in_x0 <= convert_data_in_dout_net_x0;
  convert_rd_en_x0 <= convert_rd_en_dout_net_x0;
  convert_wr_en_x0 <= convert_wr_en_dout_net_x0;
  data_out <= extract_parity_b_net_x1;
  data_valid <= logical1_y_net_x1;
  phy_ready <= convert_ready_dout_net_x0;

  convert_ack: entity work.xlconvert
    generic map (
      bool_conversion => 1,
      din_arith => 1,
      din_bin_pt => 0,
      din_width => 1,
      dout_arith => 1,
      dout_bin_pt => 0,
      dout_width => 1,
      latency => 0,
      overflow => xlWrap,
      quantization => xlTruncate
    )
    port map (
      ce => ce_1_sg_x652,
      clk => clk_1_sg_x652,
      clr => '0',
      din(0) => force_ack_output_port_net,
      en => "1",
      dout(0) => convert_ack_dout_net
    );

  convert_address: entity work.xlconvert
    generic map (
      bool_conversion => 0,
      din_arith => 1,
      din_bin_pt => 0,
      din_width => 19,
      dout_arith => 1,
      dout_bin_pt => 0,
      dout_width => 32,
      latency => 0,
      overflow => xlWrap,
      quantization => xlTruncate
    )
    port map (
      ce => ce_1_sg_x652,
      clk => clk_1_sg_x652,
      clr => '0',
      din => mux2_y_net_x0,
      en => "1",
      dout => convert_address_dout_net_x0
    );

  convert_be: entity work.xlconvert
    generic map (
      bool_conversion => 0,
      din_arith => 1,
      din_bin_pt => 0,
      din_width => 4,
      dout_arith => 1,
      dout_bin_pt => 0,
      dout_width => 4,
      latency => 0,
      overflow => xlWrap,
      quantization => xlTruncate
    )
    port map (
      ce => ce_1_sg_x652,
      clk => clk_1_sg_x652,
      clr => '0',
      din => constant_op_net_x0,
      en => "1",
      dout => convert_be_dout_net_x0
    );

  convert_cal_fail: entity work.xlconvert
    generic map (
      bool_conversion => 1,
      din_arith => 1,
      din_bin_pt => 0,
      din_width => 1,
      dout_arith => 1,
      dout_bin_pt => 0,
      dout_width => 1,
      latency => 0,
      overflow => xlWrap,
      quantization => xlTruncate
    )
    port map (
      ce => ce_1_sg_x652,
      clk => clk_1_sg_x652,
      clr => '0',
      din(0) => force_cal_fail_output_port_net,
      en => "1",
      dout(0) => convert_cal_fail_dout_net_x0
    );

  convert_data_in: entity work.xlconvert
    generic map (
      bool_conversion => 0,
      din_arith => 1,
      din_bin_pt => 0,
      din_width => 36,
      dout_arith => 1,
      dout_bin_pt => 0,
      dout_width => 36,
      latency => 0,
      overflow => xlWrap,
      quantization => xlTruncate
    )
    port map (
      ce => ce_1_sg_x652,
      clk => clk_1_sg_x652,
      clr => '0',
      din => insert_parity_b_net,
      en => "1",
      dout => convert_data_in_dout_net_x0
    );

  convert_data_in1: entity work.xlconvert
    generic map (
      bool_conversion => 0,
      din_arith => 1,
      din_bin_pt => 0,
      din_width => 16,
      dout_arith => 1,
      dout_bin_pt => 0,
      dout_width => 36,
      latency => 0,
      overflow => xlWrap,
      quantization => xlTruncate
    )
    port map (
      ce => ce_1_sg_x652,
      clk => clk_1_sg_x652,
      clr => '0',
      din => mux1_y_net_x0,
      en => "1",
      dout => convert_data_in1_dout_net
    );

  convert_rd_en: entity work.xlconvert
    generic map (
      bool_conversion => 1,
      din_arith => 1,
      din_bin_pt => 0,
      din_width => 1,
      dout_arith => 1,
      dout_bin_pt => 0,
      dout_width => 1,
      latency => 0,
      overflow => xlWrap,
      quantization => xlTruncate
    )
    port map (
      ce => ce_1_sg_x652,
      clk => clk_1_sg_x652,
      clr => '0',
      din(0) => delay3_q_net_x0,
      en => "1",
      dout(0) => convert_rd_en_dout_net_x0
    );

  convert_ready: entity work.xlconvert
    generic map (
      bool_conversion => 1,
      din_arith => 1,
      din_bin_pt => 0,
      din_width => 1,
      dout_arith => 1,
      dout_bin_pt => 0,
      dout_width => 1,
      latency => 0,
      overflow => xlWrap,
      quantization => xlTruncate
    )
    port map (
      ce => ce_1_sg_x652,
      clk => clk_1_sg_x652,
      clr => '0',
      din(0) => force_phy_ready_output_port_net,
      en => "1",
      dout(0) => convert_ready_dout_net_x0
    );

  convert_wr_en: entity work.xlconvert
    generic map (
      bool_conversion => 1,
      din_arith => 1,
      din_bin_pt => 0,
      din_width => 1,
      dout_arith => 1,
      dout_bin_pt => 0,
      dout_width => 1,
      latency => 0,
      overflow => xlWrap,
      quantization => xlTruncate
    )
    port map (
      ce => ce_1_sg_x652,
      clk => clk_1_sg_x652,
      clr => '0',
      din(0) => delay6_q_net_x0,
      en => "1",
      dout(0) => convert_wr_en_dout_net_x0
    );

  delay1: entity work.delay_9f02caa990
    port map (
      ce => ce_1_sg_x652,
      clk => clk_1_sg_x652,
      clr => '0',
      d(0) => qdr_latency_q_net,
      q(0) => delay1_q_net
    );

  extract_parity: entity work.bitbasher_28534cf16d
    port map (
      a => force_data_out_output_port_net,
      ce => '0',
      clk => '0',
      clr => '0',
      b => extract_parity_b_net_x1
    );

  force_ack: entity work.reinterpret_112d91c147
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port(0) => c09f12_01_qdr_ct_qdr_ack_net_x0,
      output_port(0) => force_ack_output_port_net
    );

  force_cal_fail: entity work.reinterpret_112d91c147
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port(0) => c09f12_01_qdr_ct_qdr_cal_fail_net_x0,
      output_port(0) => force_cal_fail_output_port_net
    );

  force_data_out: entity work.reinterpret_86b044698f
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => c09f12_01_qdr_ct_qdr_data_out_net_x0,
      output_port => force_data_out_output_port_net
    );

  force_phy_ready: entity work.reinterpret_112d91c147
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port(0) => c09f12_01_qdr_ct_qdr_phy_ready_net_x0,
      output_port(0) => force_phy_ready_output_port_net
    );

  insert_parity: entity work.bitbasher_bb056d7e90
    port map (
      a => convert_data_in1_dout_net,
      ce => '0',
      clk => '0',
      clr => '0',
      b => insert_parity_b_net
    );

  inverter2: entity work.inverter_e5b38cca3b
    port map (
      ce => ce_1_sg_x652,
      clk => clk_1_sg_x652,
      clr => '0',
      ip(0) => prev_rd_q_net,
      op(0) => inverter2_op_net
    );

  logical: entity work.logical_954ee29728
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0(0) => convert_ack_dout_net,
      d1(0) => convert_rd_en_dout_net_x0,
      d2(0) => inverter2_op_net,
      y(0) => logical_y_net
    );

  logical1: entity work.logical_aacf6e1b0e
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0(0) => qdr_latency_q_net,
      d1(0) => delay1_q_net,
      y(0) => logical1_y_net_x1
    );

  prev_rd: entity work.xlregister
    generic map (
      d_width => 1,
      init_value => b"0"
    )
    port map (
      ce => ce_1_sg_x652,
      clk => clk_1_sg_x652,
      d(0) => logical_y_net,
      en => "1",
      rst => "0",
      q(0) => prev_rd_q_net
    );

  qdr_latency: entity work.xldelay
    generic map (
      latency => 10,
      reg_retiming => 0,
      reset => 0,
      width => 1
    )
    port map (
      ce => ce_1_sg_x652,
      clk => clk_1_sg_x652,
      d(0) => logical_y_net,
      en => '1',
      rst => '1',
      q(0) => qdr_latency_q_net
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/qdr_ct/reorder/dbl_buffer0"

entity dbl_buffer0_entity_8618fa6b3a is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    din1: in std_logic_vector(15 downto 0); 
    rd_addr: in std_logic_vector(12 downto 0); 
    rw_mode: in std_logic; 
    we: in std_logic; 
    wr_addr: in std_logic_vector(12 downto 0); 
    dout: out std_logic_vector(15 downto 0)
  );
end dbl_buffer0_entity_8618fa6b3a;

architecture structural of dbl_buffer0_entity_8618fa6b3a is
  signal bram0_data_out_net: std_logic_vector(15 downto 0);
  signal bram1_data_out_net: std_logic_vector(15 downto 0);
  signal ce_1_sg_x653: std_logic;
  signal clk_1_sg_x653: std_logic;
  signal constant_op_net: std_logic;
  signal delay1_q_net: std_logic_vector(15 downto 0);
  signal delay2_q_net: std_logic_vector(15 downto 0);
  signal delay_d0_q_net_x0: std_logic_vector(12 downto 0);
  signal delay_din0_q_net_x0: std_logic_vector(15 downto 0);
  signal delay_q_net: std_logic;
  signal delay_sel_q_net_x0: std_logic;
  signal delay_we_q_net_x0: std_logic;
  signal map1_data_net_x0: std_logic_vector(12 downto 0);
  signal mux2_y_net: std_logic;
  signal mux3_y_net: std_logic_vector(12 downto 0);
  signal mux5_y_net: std_logic;
  signal mux6_y_net_x0: std_logic_vector(15 downto 0);
  signal mux_y_net: std_logic_vector(12 downto 0);

begin
  ce_1_sg_x653 <= ce_1;
  clk_1_sg_x653 <= clk_1;
  delay_din0_q_net_x0 <= din1;
  map1_data_net_x0 <= rd_addr;
  delay_sel_q_net_x0 <= rw_mode;
  delay_we_q_net_x0 <= we;
  delay_d0_q_net_x0 <= wr_addr;
  dout <= mux6_y_net_x0;

  bram0: entity work.xlspram_c09f12_01
    generic map (
      c_address_width => 13,
      c_width => 16,
      core_name0 => "bmg_72_b1697c6003ecdb6f",
      latency => 1
    )
    port map (
      addr => mux_y_net,
      ce => ce_1_sg_x653,
      clk => clk_1_sg_x653,
      data_in => delay1_q_net,
      en => "1",
      rst => "0",
      we(0) => mux2_y_net,
      data_out => bram0_data_out_net
    );

  bram1: entity work.xlspram_c09f12_01
    generic map (
      c_address_width => 13,
      c_width => 16,
      core_name0 => "bmg_72_b1697c6003ecdb6f",
      latency => 1
    )
    port map (
      addr => mux3_y_net,
      ce => ce_1_sg_x653,
      clk => clk_1_sg_x653,
      data_in => delay2_q_net,
      en => "1",
      rst => "0",
      we(0) => mux5_y_net,
      data_out => bram1_data_out_net
    );

  constant_x0: entity work.constant_963ed6358a
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op(0) => constant_op_net
    );

  delay: entity work.xldelay
    generic map (
      latency => 2,
      reg_retiming => 0,
      reset => 0,
      width => 1
    )
    port map (
      ce => ce_1_sg_x653,
      clk => clk_1_sg_x653,
      d(0) => delay_sel_q_net_x0,
      en => '1',
      rst => '1',
      q(0) => delay_q_net
    );

  delay1: entity work.xldelay
    generic map (
      latency => 1,
      reg_retiming => 0,
      reset => 0,
      width => 16
    )
    port map (
      ce => ce_1_sg_x653,
      clk => clk_1_sg_x653,
      d => delay_din0_q_net_x0,
      en => '1',
      rst => '1',
      q => delay1_q_net
    );

  delay2: entity work.xldelay
    generic map (
      latency => 1,
      reg_retiming => 0,
      reset => 0,
      width => 16
    )
    port map (
      ce => ce_1_sg_x653,
      clk => clk_1_sg_x653,
      d => delay_din0_q_net_x0,
      en => '1',
      rst => '1',
      q => delay2_q_net
    );

  mux: entity work.mux_112578e8da
    port map (
      ce => ce_1_sg_x653,
      clk => clk_1_sg_x653,
      clr => '0',
      d0 => delay_d0_q_net_x0,
      d1 => map1_data_net_x0,
      sel(0) => delay_sel_q_net_x0,
      y => mux_y_net
    );

  mux2: entity work.mux_2aa09bfea3
    port map (
      ce => ce_1_sg_x653,
      clk => clk_1_sg_x653,
      clr => '0',
      d0(0) => delay_we_q_net_x0,
      d1(0) => constant_op_net,
      sel(0) => delay_sel_q_net_x0,
      y(0) => mux2_y_net
    );

  mux3: entity work.mux_112578e8da
    port map (
      ce => ce_1_sg_x653,
      clk => clk_1_sg_x653,
      clr => '0',
      d0 => map1_data_net_x0,
      d1 => delay_d0_q_net_x0,
      sel(0) => delay_sel_q_net_x0,
      y => mux3_y_net
    );

  mux5: entity work.mux_2aa09bfea3
    port map (
      ce => ce_1_sg_x653,
      clk => clk_1_sg_x653,
      clr => '0',
      d0(0) => constant_op_net,
      d1(0) => delay_we_q_net_x0,
      sel(0) => delay_sel_q_net_x0,
      y(0) => mux5_y_net
    );

  mux6: entity work.mux_bfb8dadb36
    port map (
      ce => ce_1_sg_x653,
      clk => clk_1_sg_x653,
      clr => '0',
      d0 => bram1_data_out_net,
      d1 => bram0_data_out_net,
      sel(0) => delay_q_net,
      y => mux6_y_net_x0
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/qdr_ct/reorder/sync_delay_en"

entity sync_delay_en_entity_52d3bba593 is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    en: in std_logic; 
    in_x0: in std_logic; 
    out_x0: out std_logic
  );
end sync_delay_en_entity_52d3bba593;

architecture structural of sync_delay_en_entity_52d3bba593 is
  signal ce_1_sg_x654: std_logic;
  signal clk_1_sg_x654: std_logic;
  signal constant1_op_net: std_logic_vector(13 downto 0);
  signal constant2_op_net: std_logic_vector(13 downto 0);
  signal constant3_op_net: std_logic;
  signal constant_op_net: std_logic_vector(13 downto 0);
  signal counter_op_net: std_logic_vector(13 downto 0);
  signal logical1_y_net: std_logic;
  signal logical_y_net: std_logic;
  signal mux_y_net_x0: std_logic;
  signal or_y_net_x0: std_logic;
  signal pre_sync_delay_q_net_x0: std_logic;
  signal relational1_op_net: std_logic;
  signal relational_op_net: std_logic;

begin
  ce_1_sg_x654 <= ce_1;
  clk_1_sg_x654 <= clk_1;
  or_y_net_x0 <= en;
  pre_sync_delay_q_net_x0 <= in_x0;
  out_x0 <= mux_y_net_x0;

  constant1: entity work.constant_068ec526a0
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op => constant1_op_net
    );

  constant2: entity work.constant_24fe963a89
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op => constant2_op_net
    );

  constant3: entity work.constant_6293007044
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op(0) => constant3_op_net
    );

  constant_x0: entity work.constant_60de7cd9a7
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op => constant_op_net
    );

  counter: entity work.xlcounter_free_c09f12_01
    generic map (
      core_name0 => "cntr_11_0_e16427883c4a8980",
      op_arith => xlUnsigned,
      op_width => 14
    )
    port map (
      ce => ce_1_sg_x654,
      clk => clk_1_sg_x654,
      clr => '0',
      din => constant2_op_net,
      en(0) => logical1_y_net,
      load(0) => pre_sync_delay_q_net_x0,
      rst => "0",
      op => counter_op_net
    );

  logical: entity work.logical_aacf6e1b0e
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0(0) => pre_sync_delay_q_net_x0,
      d1(0) => relational1_op_net,
      y(0) => logical_y_net
    );

  logical1: entity work.logical_80f90b97d0
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0(0) => logical_y_net,
      d1(0) => or_y_net_x0,
      y(0) => logical1_y_net
    );

  mux: entity work.mux_1bef4ba0e4
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0(0) => pre_sync_delay_q_net_x0,
      d1(0) => relational_op_net,
      sel(0) => constant3_op_net,
      y(0) => mux_y_net_x0
    );

  relational: entity work.relational_d500ab1630
    port map (
      a => constant_op_net,
      b => counter_op_net,
      ce => '0',
      clk => '0',
      clr => '0',
      op(0) => relational_op_net
    );

  relational1: entity work.relational_7f67627fe4
    port map (
      a => counter_op_net,
      b => constant1_op_net,
      ce => '0',
      clk => '0',
      clr => '0',
      op(0) => relational1_op_net
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/qdr_ct/reorder"

entity reorder_entity_02db5289ec is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    din0: in std_logic_vector(15 downto 0); 
    en: in std_logic; 
    sync: in std_logic; 
    dout0: out std_logic_vector(15 downto 0); 
    sync_out: out std_logic; 
    valid: out std_logic
  );
end reorder_entity_02db5289ec;

architecture structural of reorder_entity_02db5289ec is
  signal ce_1_sg_x655: std_logic;
  signal clk_1_sg_x655: std_logic;
  signal counter_op_net: std_logic_vector(13 downto 0);
  signal delay1_q_net_x1: std_logic;
  signal delay_d0_q_net_x0: std_logic_vector(12 downto 0);
  signal delay_din0_q_net_x0: std_logic_vector(15 downto 0);
  signal delay_q_net_x1: std_logic;
  signal delay_sel_q_net_x0: std_logic;
  signal delay_valid_q_net_x0: std_logic;
  signal delay_we_q_net_x0: std_logic;
  signal map1_data_net_x0: std_logic_vector(12 downto 0);
  signal mux1_y_net_x1: std_logic_vector(15 downto 0);
  signal mux6_y_net_x1: std_logic_vector(15 downto 0);
  signal mux_y_net_x0: std_logic;
  signal or_y_net_x0: std_logic;
  signal post_sync_delay_q_net_x0: std_logic;
  signal pre_sync_delay_q_net_x0: std_logic;
  signal slice1_y_net: std_logic;
  signal slice2_y_net: std_logic_vector(12 downto 0);

begin
  ce_1_sg_x655 <= ce_1;
  clk_1_sg_x655 <= clk_1;
  mux1_y_net_x1 <= din0;
  delay1_q_net_x1 <= en;
  delay_q_net_x1 <= sync;
  dout0 <= mux6_y_net_x1;
  sync_out <= post_sync_delay_q_net_x0;
  valid <= delay_valid_q_net_x0;

  counter: entity work.xlcounter_limit_c09f12_01
    generic map (
      cnt_15_0 => 16383,
      cnt_31_16 => 0,
      cnt_47_32 => 0,
      cnt_63_48 => 0,
      core_name0 => "cntr_11_0_8438db56645cca14",
      count_limited => 0,
      op_arith => xlUnsigned,
      op_width => 14
    )
    port map (
      ce => ce_1_sg_x655,
      clk => clk_1_sg_x655,
      clr => '0',
      en(0) => delay1_q_net_x1,
      rst(0) => delay_q_net_x1,
      op => counter_op_net
    );

  dbl_buffer0_8618fa6b3a: entity work.dbl_buffer0_entity_8618fa6b3a
    port map (
      ce_1 => ce_1_sg_x655,
      clk_1 => clk_1_sg_x655,
      din1 => delay_din0_q_net_x0,
      rd_addr => map1_data_net_x0,
      rw_mode => delay_sel_q_net_x0,
      we => delay_we_q_net_x0,
      wr_addr => delay_d0_q_net_x0,
      dout => mux6_y_net_x1
    );

  delay_d0: entity work.xldelay
    generic map (
      latency => 1,
      reg_retiming => 0,
      reset => 0,
      width => 13
    )
    port map (
      ce => ce_1_sg_x655,
      clk => clk_1_sg_x655,
      d => slice2_y_net,
      en => '1',
      rst => '1',
      q => delay_d0_q_net_x0
    );

  delay_din0: entity work.xldelay
    generic map (
      latency => 1,
      reg_retiming => 0,
      reset => 0,
      width => 16
    )
    port map (
      ce => ce_1_sg_x655,
      clk => clk_1_sg_x655,
      d => mux1_y_net_x1,
      en => '1',
      rst => '1',
      q => delay_din0_q_net_x0
    );

  delay_sel: entity work.xldelay
    generic map (
      latency => 1,
      reg_retiming => 0,
      reset => 0,
      width => 1
    )
    port map (
      ce => ce_1_sg_x655,
      clk => clk_1_sg_x655,
      d(0) => slice1_y_net,
      en => '1',
      rst => '1',
      q(0) => delay_sel_q_net_x0
    );

  delay_valid: entity work.xldelay
    generic map (
      latency => 3,
      reg_retiming => 0,
      reset => 0,
      width => 1
    )
    port map (
      ce => ce_1_sg_x655,
      clk => clk_1_sg_x655,
      d(0) => delay_we_q_net_x0,
      en => '1',
      rst => '1',
      q(0) => delay_valid_q_net_x0
    );

  delay_we: entity work.xldelay
    generic map (
      latency => 1,
      reg_retiming => 0,
      reset => 0,
      width => 1
    )
    port map (
      ce => ce_1_sg_x655,
      clk => clk_1_sg_x655,
      d(0) => delay1_q_net_x1,
      en => '1',
      rst => '1',
      q(0) => delay_we_q_net_x0
    );

  map1: entity work.xlsprom_c09f12_01
    generic map (
      c_address_width => 13,
      c_width => 13,
      core_name0 => "bmg_72_b3ad50e1afdb9e3d",
      latency => 1
    )
    port map (
      addr => slice2_y_net,
      ce => ce_1_sg_x655,
      clk => clk_1_sg_x655,
      en => "1",
      rst => "0",
      data => map1_data_net_x0
    );

  or_x0: entity work.logical_aacf6e1b0e
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0(0) => pre_sync_delay_q_net_x0,
      d1(0) => delay_we_q_net_x0,
      y(0) => or_y_net_x0
    );

  post_sync_delay: entity work.xldelay
    generic map (
      latency => 3,
      reg_retiming => 0,
      reset => 0,
      width => 1
    )
    port map (
      ce => ce_1_sg_x655,
      clk => clk_1_sg_x655,
      d(0) => mux_y_net_x0,
      en => '1',
      rst => '1',
      q(0) => post_sync_delay_q_net_x0
    );

  pre_sync_delay: entity work.xldelay
    generic map (
      latency => 1,
      reg_retiming => 0,
      reset => 0,
      width => 1
    )
    port map (
      ce => ce_1_sg_x655,
      clk => clk_1_sg_x655,
      d(0) => delay_q_net_x1,
      en => '1',
      rst => '1',
      q(0) => pre_sync_delay_q_net_x0
    );

  slice1: entity work.xlslice
    generic map (
      new_lsb => 13,
      new_msb => 13,
      x_width => 14,
      y_width => 1
    )
    port map (
      x => counter_op_net,
      y(0) => slice1_y_net
    );

  slice2: entity work.xlslice
    generic map (
      new_lsb => 0,
      new_msb => 12,
      x_width => 14,
      y_width => 13
    )
    port map (
      x => counter_op_net,
      y => slice2_y_net
    );

  sync_delay_en_52d3bba593: entity work.sync_delay_en_entity_52d3bba593
    port map (
      ce_1 => ce_1_sg_x655,
      clk_1 => clk_1_sg_x655,
      en => or_y_net_x0,
      in_x0 => pre_sync_delay_q_net_x0,
      out_x0 => mux_y_net_x0
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/qdr_ct/sync_delay"

entity sync_delay_entity_1cfb55c2a5 is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    in_x0: in std_logic; 
    out_x0: out std_logic
  );
end sync_delay_entity_1cfb55c2a5;

architecture structural of sync_delay_entity_1cfb55c2a5 is
  signal ce_1_sg_x656: std_logic;
  signal clk_1_sg_x656: std_logic;
  signal constant1_op_net: std_logic_vector(3 downto 0);
  signal constant2_op_net: std_logic_vector(3 downto 0);
  signal constant3_op_net: std_logic;
  signal constant_op_net: std_logic_vector(3 downto 0);
  signal counter_op_net: std_logic_vector(3 downto 0);
  signal edge_op_y_net_x1: std_logic;
  signal logical_y_net: std_logic;
  signal mux_y_net_x1: std_logic;
  signal relational1_op_net: std_logic;
  signal relational_op_net: std_logic;

begin
  ce_1_sg_x656 <= ce_1;
  clk_1_sg_x656 <= clk_1;
  edge_op_y_net_x1 <= in_x0;
  out_x0 <= mux_y_net_x1;

  constant1: entity work.constant_4c449dd556
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op => constant1_op_net
    );

  constant2: entity work.constant_a629aefb53
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op => constant2_op_net
    );

  constant3: entity work.constant_6293007044
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op(0) => constant3_op_net
    );

  constant_x0: entity work.constant_67ad97ca70
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op => constant_op_net
    );

  counter: entity work.xlcounter_free_c09f12_01
    generic map (
      core_name0 => "cntr_11_0_81c610783c35b073",
      op_arith => xlUnsigned,
      op_width => 4
    )
    port map (
      ce => ce_1_sg_x656,
      clk => clk_1_sg_x656,
      clr => '0',
      din => constant2_op_net,
      en(0) => logical_y_net,
      load(0) => edge_op_y_net_x1,
      rst => "0",
      op => counter_op_net
    );

  logical: entity work.logical_aacf6e1b0e
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0(0) => edge_op_y_net_x1,
      d1(0) => relational1_op_net,
      y(0) => logical_y_net
    );

  mux: entity work.mux_1bef4ba0e4
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0(0) => edge_op_y_net_x1,
      d1(0) => relational_op_net,
      sel(0) => constant3_op_net,
      y(0) => mux_y_net_x1
    );

  relational: entity work.relational_4d3cfceaf4
    port map (
      a => constant_op_net,
      b => counter_op_net,
      ce => '0',
      clk => '0',
      clr => '0',
      op(0) => relational_op_net
    );

  relational1: entity work.relational_d930162434
    port map (
      a => counter_op_net,
      b => constant1_op_net,
      ce => '0',
      clk => '0',
      clr => '0',
      op(0) => relational1_op_net
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/qdr_ct"

entity qdr_ct_entity_bc79c61df7 is
  port (
    c09f12_01_qdr_ct_qdr_ack: in std_logic; 
    c09f12_01_qdr_ct_qdr_cal_fail: in std_logic; 
    c09f12_01_qdr_ct_qdr_data_out: in std_logic_vector(35 downto 0); 
    c09f12_01_qdr_ct_qdr_phy_ready: in std_logic; 
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    d: in std_logic_vector(15 downto 0); 
    en: in std_logic; 
    sync: in std_logic; 
    dv: out std_logic; 
    q: out std_logic_vector(63 downto 0); 
    qdr: out std_logic_vector(31 downto 0); 
    qdr_error: out std_logic; 
    qdr_x0: out std_logic_vector(3 downto 0); 
    qdr_x1: out std_logic_vector(35 downto 0); 
    qdr_x2: out std_logic; 
    qdr_x3: out std_logic; 
    snap64: out std_logic_vector(65 downto 0); 
    sync_out: out std_logic
  );
end qdr_ct_entity_bc79c61df7;

architecture structural of qdr_ct_entity_bc79c61df7 is
  signal addr_op_net: std_logic_vector(19 downto 0);
  signal buffer_y_net_x0: std_logic;
  signal c09f12_01_qdr_ct_qdr_ack_net_x1: std_logic;
  signal c09f12_01_qdr_ct_qdr_cal_fail_net_x1: std_logic;
  signal c09f12_01_qdr_ct_qdr_data_out_net_x1: std_logic_vector(35 downto 0);
  signal c09f12_01_qdr_ct_qdr_phy_ready_net_x1: std_logic;
  signal ce_1_sg_x657: std_logic;
  signal clk_1_sg_x657: std_logic;
  signal col_sel_y_net: std_logic_vector(11 downto 0);
  signal concat_y_net: std_logic_vector(18 downto 0);
  signal concatenate_y_net_x20: std_logic_vector(65 downto 0);
  signal constant_op_net_x0: std_logic_vector(3 downto 0);
  signal convert_address_dout_net_x1: std_logic_vector(31 downto 0);
  signal convert_be_dout_net_x1: std_logic_vector(3 downto 0);
  signal convert_cal_fail_dout_net_x0: std_logic;
  signal convert_data_in_dout_net_x1: std_logic_vector(35 downto 0);
  signal convert_rd_en_dout_net_x1: std_logic;
  signal convert_ready_dout_net_x0: std_logic;
  signal convert_wr_en_dout_net_x1: std_logic;
  signal delay1_q_net: std_logic_vector(18 downto 0);
  signal delay1_q_net_x2: std_logic;
  signal delay2_q_net: std_logic_vector(18 downto 0);
  signal delay3_q_net_x0: std_logic;
  signal delay6_q_net_x0: std_logic;
  signal delay_q_net_x2: std_logic;
  signal delay_valid_q_net_x0: std_logic;
  signal dvalid_x3: std_logic;
  signal edge_op_y_net_x0: std_logic;
  signal edge_op_y_net_x1: std_logic;
  signal extract_parity_b_net_x1: std_logic_vector(35 downto 0);
  signal first_q_net: std_logic_vector(15 downto 0);
  signal inverter1_op_net: std_logic;
  signal inverter2_op_net: std_logic;
  signal inverter7_op_net: std_logic;
  signal logical12_y_net_x2: std_logic;
  signal logical1_y_net: std_logic;
  signal logical1_y_net_x1: std_logic;
  signal logical3_y_net: std_logic;
  signal logical6_y_net: std_logic;
  signal logical_y_net: std_logic;
  signal mux1_y_net_x0: std_logic_vector(15 downto 0);
  signal mux1_y_net_x3: std_logic_vector(15 downto 0);
  signal mux1_y_net_x4: std_logic_vector(63 downto 0);
  signal mux2_y_net_x0: std_logic_vector(18 downto 0);
  signal mux6_y_net_x1: std_logic_vector(15 downto 0);
  signal mux_y_net_x1: std_logic;
  signal post_sync_delay_q_net_x0: std_logic;
  signal register2_q_net_x0: std_logic;
  signal register4_q_net: std_logic;
  signal row_sel_y_net: std_logic_vector(5 downto 0);
  signal second_q_net: std_logic_vector(15 downto 0);
  signal slice1_y_net: std_logic;
  signal slice3_y_net: std_logic_vector(18 downto 0);
  signal sync_out_x3: std_logic;

begin
  c09f12_01_qdr_ct_qdr_ack_net_x1 <= c09f12_01_qdr_ct_qdr_ack;
  c09f12_01_qdr_ct_qdr_cal_fail_net_x1 <= c09f12_01_qdr_ct_qdr_cal_fail;
  c09f12_01_qdr_ct_qdr_data_out_net_x1 <= c09f12_01_qdr_ct_qdr_data_out;
  c09f12_01_qdr_ct_qdr_phy_ready_net_x1 <= c09f12_01_qdr_ct_qdr_phy_ready;
  ce_1_sg_x657 <= ce_1;
  clk_1_sg_x657 <= clk_1;
  mux1_y_net_x3 <= d;
  delay1_q_net_x2 <= en;
  delay_q_net_x2 <= sync;
  dv <= dvalid_x3;
  q <= mux1_y_net_x4;
  qdr <= convert_address_dout_net_x1;
  qdr_error <= logical12_y_net_x2;
  qdr_x0 <= convert_be_dout_net_x1;
  qdr_x1 <= convert_data_in_dout_net_x1;
  qdr_x2 <= convert_rd_en_dout_net_x1;
  qdr_x3 <= convert_wr_en_dout_net_x1;
  snap64 <= concatenate_y_net_x20;
  sync_out <= sync_out_x3;

  addr: entity work.xlcounter_free_c09f12_01
    generic map (
      core_name0 => "cntr_11_0_d443bc0f2f8ab282",
      op_arith => xlUnsigned,
      op_width => 20
    )
    port map (
      ce => ce_1_sg_x657,
      clk => clk_1_sg_x657,
      clr => '0',
      en(0) => delay_valid_q_net_x0,
      rst(0) => post_sync_delay_q_net_x0,
      op => addr_op_net
    );

  buffer_to_64_dd495b5105: entity work.buffer_to_64_entity_dd495b5105
    port map (
      ce_1 => ce_1_sg_x657,
      clk_1 => clk_1_sg_x657,
      ct_data => extract_parity_b_net_x1,
      ct_valid => logical1_y_net_x1,
      sync => mux_y_net_x1,
      sync64 => sync_out_x3,
      x64_bit_data => mux1_y_net_x4,
      x64_bit_valid => dvalid_x3
    );

  buffer_x0: entity work.xlslice
    generic map (
      new_lsb => 18,
      new_msb => 18,
      x_width => 19,
      y_width => 1
    )
    port map (
      x => slice3_y_net,
      y(0) => buffer_y_net_x0
    );

  bus_create2_7faa65db15: entity work.bus_create2_entity_7faa65db15
    port map (
      in1 => sync_out_x3,
      in2 => mux1_y_net_x4,
      in3 => dvalid_x3,
      bus_out => concatenate_y_net_x20
    );

  col_sel: entity work.xlslice
    generic map (
      new_lsb => 6,
      new_msb => 17,
      x_width => 19,
      y_width => 12
    )
    port map (
      x => slice3_y_net,
      y => col_sel_y_net
    );

  concat: entity work.concat_566f280c69
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      in0(0) => inverter2_op_net,
      in1 => row_sel_y_net,
      in2 => col_sel_y_net,
      y => concat_y_net
    );

  constant_x0: entity work.constant_06590e4008
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op => constant_op_net_x0
    );

  delay1: entity work.xldelay
    generic map (
      latency => 1,
      reg_retiming => 0,
      reset => 0,
      width => 19
    )
    port map (
      ce => ce_1_sg_x657,
      clk => clk_1_sg_x657,
      d => concat_y_net,
      en => '1',
      rst => '1',
      q => delay1_q_net
    );

  delay2: entity work.xldelay
    generic map (
      latency => 1,
      reg_retiming => 0,
      reset => 0,
      width => 19
    )
    port map (
      ce => ce_1_sg_x657,
      clk => clk_1_sg_x657,
      d => slice3_y_net,
      en => '1',
      rst => '1',
      q => delay2_q_net
    );

  delay3: entity work.xldelay
    generic map (
      latency => 1,
      reg_retiming => 0,
      reset => 0,
      width => 1
    )
    port map (
      ce => ce_1_sg_x657,
      clk => clk_1_sg_x657,
      d(0) => logical3_y_net,
      en => '1',
      rst => '1',
      q(0) => delay3_q_net_x0
    );

  delay6: entity work.xldelay
    generic map (
      latency => 1,
      reg_retiming => 0,
      reset => 0,
      width => 1
    )
    port map (
      ce => ce_1_sg_x657,
      clk => clk_1_sg_x657,
      d(0) => delay3_q_net_x0,
      en => '1',
      rst => '1',
      q(0) => delay6_q_net_x0
    );

  edge_detect1_83b7cdb414: entity work.edge_detect_entity_cb656284f4
    port map (
      ce_1 => ce_1_sg_x657,
      clk_1 => clk_1_sg_x657,
      in_x0 => buffer_y_net_x0,
      out_x0 => edge_op_y_net_x0
    );

  edge_detect_6f91a5a955: entity work.edge_detect1_entity_75cedd2450
    port map (
      ce_1 => ce_1_sg_x657,
      clk_1 => clk_1_sg_x657,
      in_x0 => register2_q_net_x0,
      out_x0 => edge_op_y_net_x1
    );

  first: entity work.xlregister
    generic map (
      d_width => 16,
      init_value => b"0000000000000000"
    )
    port map (
      ce => ce_1_sg_x657,
      clk => clk_1_sg_x657,
      d => mux6_y_net_x1,
      en(0) => logical1_y_net,
      rst => "0",
      q => first_q_net
    );

  inverter1: entity work.inverter_e5b38cca3b
    port map (
      ce => ce_1_sg_x657,
      clk => clk_1_sg_x657,
      clr => '0',
      ip(0) => slice1_y_net,
      op(0) => inverter1_op_net
    );

  inverter2: entity work.inverter_e5b38cca3b
    port map (
      ce => ce_1_sg_x657,
      clk => clk_1_sg_x657,
      clr => '0',
      ip(0) => buffer_y_net_x0,
      op(0) => inverter2_op_net
    );

  inverter7: entity work.inverter_e5b38cca3b
    port map (
      ce => ce_1_sg_x657,
      clk => clk_1_sg_x657,
      clr => '0',
      ip(0) => convert_ready_dout_net_x0,
      op(0) => inverter7_op_net
    );

  logical: entity work.logical_80f90b97d0
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0(0) => slice1_y_net,
      d1(0) => delay_valid_q_net_x0,
      y(0) => logical_y_net
    );

  logical1: entity work.logical_80f90b97d0
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0(0) => inverter1_op_net,
      d1(0) => delay_valid_q_net_x0,
      y(0) => logical1_y_net
    );

  logical12: entity work.logical_444d3f5046
    port map (
      ce => ce_1_sg_x657,
      clk => clk_1_sg_x657,
      clr => '0',
      d0(0) => inverter7_op_net,
      d1(0) => convert_cal_fail_dout_net_x0,
      y(0) => logical12_y_net_x2
    );

  logical3: entity work.logical_80f90b97d0
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0(0) => delay_valid_q_net_x0,
      d1(0) => slice1_y_net,
      y(0) => logical3_y_net
    );

  logical6: entity work.logical_80f90b97d0
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0(0) => register4_q_net,
      d1(0) => logical3_y_net,
      y(0) => logical6_y_net
    );

  mux1: entity work.mux_bfe1d4f686
    port map (
      ce => ce_1_sg_x657,
      clk => clk_1_sg_x657,
      clr => '0',
      d0 => second_q_net,
      d1 => first_q_net,
      sel(0) => delay3_q_net_x0,
      y => mux1_y_net_x0
    );

  mux2: entity work.mux_58c87f2f80
    port map (
      ce => ce_1_sg_x657,
      clk => clk_1_sg_x657,
      clr => '0',
      d0 => delay1_q_net,
      d1 => delay2_q_net,
      sel(0) => delay3_q_net_x0,
      y => mux2_y_net_x0
    );

  qdr_5ce551e581: entity work.qdr_entity_5ce551e581
    port map (
      address => mux2_y_net_x0,
      be => constant_op_net_x0,
      c09f12_01_qdr_ct_qdr_ack => c09f12_01_qdr_ct_qdr_ack_net_x1,
      c09f12_01_qdr_ct_qdr_cal_fail => c09f12_01_qdr_ct_qdr_cal_fail_net_x1,
      c09f12_01_qdr_ct_qdr_data_out => c09f12_01_qdr_ct_qdr_data_out_net_x1,
      c09f12_01_qdr_ct_qdr_phy_ready => c09f12_01_qdr_ct_qdr_phy_ready_net_x1,
      ce_1 => ce_1_sg_x657,
      clk_1 => clk_1_sg_x657,
      data_in => mux1_y_net_x0,
      rd_en => delay3_q_net_x0,
      wr_en => delay6_q_net_x0,
      cal_fail => convert_cal_fail_dout_net_x0,
      convert_address_x0 => convert_address_dout_net_x1,
      convert_be_x0 => convert_be_dout_net_x1,
      convert_data_in_x0 => convert_data_in_dout_net_x1,
      convert_rd_en_x0 => convert_rd_en_dout_net_x1,
      convert_wr_en_x0 => convert_wr_en_dout_net_x1,
      data_out => extract_parity_b_net_x1,
      data_valid => logical1_y_net_x1,
      phy_ready => convert_ready_dout_net_x0
    );

  register2: entity work.xlregister
    generic map (
      d_width => 1,
      init_value => b"0"
    )
    port map (
      ce => ce_1_sg_x657,
      clk => clk_1_sg_x657,
      d(0) => post_sync_delay_q_net_x0,
      en(0) => post_sync_delay_q_net_x0,
      rst(0) => logical6_y_net,
      q(0) => register2_q_net_x0
    );

  register4: entity work.xlregister
    generic map (
      d_width => 1,
      init_value => b"0"
    )
    port map (
      ce => ce_1_sg_x657,
      clk => clk_1_sg_x657,
      d(0) => edge_op_y_net_x0,
      en(0) => edge_op_y_net_x0,
      rst(0) => logical6_y_net,
      q(0) => register4_q_net
    );

  reorder_02db5289ec: entity work.reorder_entity_02db5289ec
    port map (
      ce_1 => ce_1_sg_x657,
      clk_1 => clk_1_sg_x657,
      din0 => mux1_y_net_x3,
      en => delay1_q_net_x2,
      sync => delay_q_net_x2,
      dout0 => mux6_y_net_x1,
      sync_out => post_sync_delay_q_net_x0,
      valid => delay_valid_q_net_x0
    );

  row_sel: entity work.xlslice
    generic map (
      new_lsb => 0,
      new_msb => 5,
      x_width => 19,
      y_width => 6
    )
    port map (
      x => slice3_y_net,
      y => row_sel_y_net
    );

  second: entity work.xlregister
    generic map (
      d_width => 16,
      init_value => b"0000000000000000"
    )
    port map (
      ce => ce_1_sg_x657,
      clk => clk_1_sg_x657,
      d => mux6_y_net_x1,
      en(0) => logical_y_net,
      rst => "0",
      q => second_q_net
    );

  slice1: entity work.xlslice
    generic map (
      new_lsb => 0,
      new_msb => 0,
      x_width => 20,
      y_width => 1
    )
    port map (
      x => addr_op_net,
      y(0) => slice1_y_net
    );

  slice3: entity work.xlslice
    generic map (
      new_lsb => 1,
      new_msb => 19,
      x_width => 20,
      y_width => 19
    )
    port map (
      x => addr_op_net,
      y => slice3_y_net
    );

  sync_delay_1cfb55c2a5: entity work.sync_delay_entity_1cfb55c2a5
    port map (
      ce_1 => ce_1_sg_x657,
      clk_1 => clk_1_sg_x657,
      in_x0 => edge_op_y_net_x1,
      out_x0 => mux_y_net_x1
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/quantisation/bus_create2"

entity bus_create2_entity_b94cc2359f is
  port (
    in1: in std_logic_vector(7 downto 0); 
    in2: in std_logic_vector(7 downto 0); 
    bus_out: out std_logic_vector(15 downto 0)
  );
end bus_create2_entity_b94cc2359f;

architecture structural of bus_create2_entity_b94cc2359f is
  signal concat_y_net_x1: std_logic_vector(7 downto 0);
  signal concat_y_net_x2: std_logic_vector(7 downto 0);
  signal concatenate_y_net_x1: std_logic_vector(15 downto 0);
  signal reinterpret1_output_port_net: std_logic_vector(7 downto 0);
  signal reinterpret2_output_port_net: std_logic_vector(7 downto 0);

begin
  concat_y_net_x1 <= in1;
  concat_y_net_x2 <= in2;
  bus_out <= concatenate_y_net_x1;

  concatenate: entity work.concat_8e53793314
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      in0 => reinterpret1_output_port_net,
      in1 => reinterpret2_output_port_net,
      y => concatenate_y_net_x1
    );

  reinterpret1: entity work.reinterpret_f21e7f2ddf
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => concat_y_net_x1,
      output_port => reinterpret1_output_port_net
    );

  reinterpret2: entity work.reinterpret_f21e7f2ddf
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => concat_y_net_x2,
      output_port => reinterpret2_output_port_net
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/quantisation/bus_expand3"

entity bus_expand3_entity_825300c8f2 is
  port (
    bus_in: in std_logic_vector(63 downto 0); 
    lsb_out1: out std_logic_vector(15 downto 0); 
    msb_out4: out std_logic_vector(15 downto 0); 
    out2: out std_logic_vector(15 downto 0); 
    out3: out std_logic_vector(15 downto 0)
  );
end bus_expand3_entity_825300c8f2;

architecture structural of bus_expand3_entity_825300c8f2 is
  signal delay46_q_net_x0: std_logic_vector(63 downto 0);
  signal reinterpret1_output_port_net_x0: std_logic_vector(15 downto 0);
  signal reinterpret2_output_port_net_x0: std_logic_vector(15 downto 0);
  signal reinterpret3_output_port_net_x0: std_logic_vector(15 downto 0);
  signal reinterpret4_output_port_net_x0: std_logic_vector(15 downto 0);
  signal slice1_y_net: std_logic_vector(15 downto 0);
  signal slice2_y_net: std_logic_vector(15 downto 0);
  signal slice3_y_net: std_logic_vector(15 downto 0);
  signal slice4_y_net: std_logic_vector(15 downto 0);

begin
  delay46_q_net_x0 <= bus_in;
  lsb_out1 <= reinterpret1_output_port_net_x0;
  msb_out4 <= reinterpret4_output_port_net_x0;
  out2 <= reinterpret2_output_port_net_x0;
  out3 <= reinterpret3_output_port_net_x0;

  reinterpret1: entity work.reinterpret_151459306d
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => slice1_y_net,
      output_port => reinterpret1_output_port_net_x0
    );

  reinterpret2: entity work.reinterpret_151459306d
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => slice2_y_net,
      output_port => reinterpret2_output_port_net_x0
    );

  reinterpret3: entity work.reinterpret_151459306d
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => slice3_y_net,
      output_port => reinterpret3_output_port_net_x0
    );

  reinterpret4: entity work.reinterpret_151459306d
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => slice4_y_net,
      output_port => reinterpret4_output_port_net_x0
    );

  slice1: entity work.xlslice
    generic map (
      new_lsb => 0,
      new_msb => 15,
      x_width => 64,
      y_width => 16
    )
    port map (
      x => delay46_q_net_x0,
      y => slice1_y_net
    );

  slice2: entity work.xlslice
    generic map (
      new_lsb => 16,
      new_msb => 31,
      x_width => 64,
      y_width => 16
    )
    port map (
      x => delay46_q_net_x0,
      y => slice2_y_net
    );

  slice3: entity work.xlslice
    generic map (
      new_lsb => 32,
      new_msb => 47,
      x_width => 64,
      y_width => 16
    )
    port map (
      x => delay46_q_net_x0,
      y => slice3_y_net
    );

  slice4: entity work.xlslice
    generic map (
      new_lsb => 48,
      new_msb => 63,
      x_width => 64,
      y_width => 16
    )
    port map (
      x => delay46_q_net_x0,
      y => slice4_y_net
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/quantisation/quant/complex_mult_simple_full"

entity complex_mult_simple_full_entity_b8d4cf41a3 is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    i1: in std_logic_vector(15 downto 0); 
    i2: in std_logic_vector(30 downto 0); 
    r1: in std_logic_vector(15 downto 0); 
    r2: in std_logic_vector(30 downto 0); 
    imag: out std_logic_vector(47 downto 0); 
    real_x0: out std_logic_vector(47 downto 0)
  );
end complex_mult_simple_full_entity_b8d4cf41a3;

architecture structural of complex_mult_simple_full_entity_b8d4cf41a3 is
  signal ce_1_sg_x658: std_logic;
  signal clk_1_sg_x658: std_logic;
  signal force_im_output_port_net_x1: std_logic_vector(30 downto 0);
  signal force_re_output_port_net_x1: std_logic_vector(30 downto 0);
  signal i1i2_p_net: std_logic_vector(46 downto 0);
  signal i1r2_p_net: std_logic_vector(46 downto 0);
  signal imag_sum_s_net_x0: std_logic_vector(47 downto 0);
  signal r1i2_p_net: std_logic_vector(46 downto 0);
  signal r1r2_p_net: std_logic_vector(46 downto 0);
  signal real_sum_s_net_x0: std_logic_vector(47 downto 0);
  signal reinterpret3_output_port_net_x1: std_logic_vector(15 downto 0);
  signal reinterpret4_output_port_net_x1: std_logic_vector(15 downto 0);

begin
  ce_1_sg_x658 <= ce_1;
  clk_1_sg_x658 <= clk_1;
  reinterpret3_output_port_net_x1 <= i1;
  force_im_output_port_net_x1 <= i2;
  reinterpret4_output_port_net_x1 <= r1;
  force_re_output_port_net_x1 <= r2;
  imag <= imag_sum_s_net_x0;
  real_x0 <= real_sum_s_net_x0;

  i1i2: entity work.mult_08763981bc
    port map (
      a => reinterpret3_output_port_net_x1,
      b => force_im_output_port_net_x1,
      ce => ce_1_sg_x658,
      clk => clk_1_sg_x658,
      clr => '0',
      p => i1i2_p_net
    );

  i1r2: entity work.mult_08763981bc
    port map (
      a => reinterpret3_output_port_net_x1,
      b => force_re_output_port_net_x1,
      ce => ce_1_sg_x658,
      clk => clk_1_sg_x658,
      clr => '0',
      p => i1r2_p_net
    );

  imag_sum: entity work.addsub_c1a1687803
    port map (
      a => i1r2_p_net,
      b => r1i2_p_net,
      ce => ce_1_sg_x658,
      clk => clk_1_sg_x658,
      clr => '0',
      s => imag_sum_s_net_x0
    );

  r1i2: entity work.mult_08763981bc
    port map (
      a => reinterpret4_output_port_net_x1,
      b => force_im_output_port_net_x1,
      ce => ce_1_sg_x658,
      clk => clk_1_sg_x658,
      clr => '0',
      p => r1i2_p_net
    );

  r1r2: entity work.mult_08763981bc
    port map (
      a => reinterpret4_output_port_net_x1,
      b => force_re_output_port_net_x1,
      ce => ce_1_sg_x658,
      clk => clk_1_sg_x658,
      clr => '0',
      p => r1r2_p_net
    );

  real_sum: entity work.addsub_31c0c7c8b5
    port map (
      a => r1r2_p_net,
      b => i1i2_p_net,
      ce => ce_1_sg_x658,
      clk => clk_1_sg_x658,
      clr => '0',
      s => real_sum_s_net_x0
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/quantisation/quant/convert_of0/convert"

entity convert_entity_c9a192b6cd is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    in_x0: in std_logic_vector(47 downto 0); 
    out_x0: out std_logic_vector(3 downto 0)
  );
end convert_entity_c9a192b6cd;

architecture structural of convert_entity_c9a192b6cd is
  signal adder_s_net_x0: std_logic_vector(3 downto 0);
  signal almost_half_op_net: std_logic_vector(18 downto 0);
  signal bit_y_net: std_logic;
  signal ce_1_sg_x660: std_logic;
  signal clk_1_sg_x660: std_logic;
  signal concat_y_net: std_logic_vector(48 downto 0);
  signal constant_op_net: std_logic;
  signal force1_output_port_net: std_logic_vector(48 downto 0);
  signal force2_output_port_net: std_logic_vector(18 downto 0);
  signal real_sum_s_net_x1: std_logic_vector(47 downto 0);
  signal reinterpret_output_port_net: std_logic_vector(47 downto 0);
  signal tweak_op_y_net: std_logic;

begin
  ce_1_sg_x660 <= ce_1;
  clk_1_sg_x660 <= clk_1;
  real_sum_s_net_x1 <= in_x0;
  out_x0 <= adder_s_net_x0;

  adder: entity work.xladdsub_c09f12_01
    generic map (
      a_arith => xlSigned,
      a_bin_pt => 19,
      a_width => 49,
      b_arith => xlUnsigned,
      b_bin_pt => 19,
      b_width => 19,
      c_has_c_out => 0,
      c_latency => 1,
      c_output_width => 50,
      core_name0 => "addsb_11_0_6791698c7be255e7",
      extra_registers => 1,
      full_s_arith => 2,
      full_s_width => 50,
      latency => 2,
      overflow => 2,
      quantization => 1,
      s_arith => xlSigned,
      s_bin_pt => 3,
      s_width => 4
    )
    port map (
      a => force1_output_port_net,
      b => force2_output_port_net,
      ce => ce_1_sg_x660,
      clk => clk_1_sg_x660,
      clr => '0',
      en => "1",
      s => adder_s_net_x0
    );

  almost_half: entity work.constant_b6bf25629b
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op => almost_half_op_net
    );

  bit: entity work.xlslice
    generic map (
      new_lsb => 15,
      new_msb => 15,
      x_width => 48,
      y_width => 1
    )
    port map (
      x => real_sum_s_net_x1,
      y(0) => bit_y_net
    );

  concat: entity work.concat_b6b0f55f17
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      in0 => reinterpret_output_port_net,
      in1(0) => tweak_op_y_net,
      y => concat_y_net
    );

  constant_x0: entity work.constant_6293007044
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op(0) => constant_op_net
    );

  force1: entity work.reinterpret_e155c4bb93
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => concat_y_net,
      output_port => force1_output_port_net
    );

  force2: entity work.reinterpret_d2180c9169
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => almost_half_op_net,
      output_port => force2_output_port_net
    );

  reinterpret: entity work.reinterpret_72d35fae55
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => real_sum_s_net_x1,
      output_port => reinterpret_output_port_net
    );

  tweak_op: entity work.logical_938d99ac11
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0(0) => bit_y_net,
      d1(0) => constant_op_net,
      y(0) => tweak_op_y_net
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/quantisation/quant/convert_of0"

entity convert_of0_entity_7fe80d503c is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    din: in std_logic_vector(47 downto 0); 
    dout: out std_logic_vector(3 downto 0); 
    of_x0: out std_logic
  );
end convert_of0_entity_7fe80d503c;

architecture structural of convert_of0_entity_7fe80d503c is
  signal adder_s_net_x1: std_logic_vector(3 downto 0);
  signal all_0s_y_net: std_logic;
  signal all_1s_y_net: std_logic;
  signal and_y_net_x0: std_logic;
  signal ce_1_sg_x661: std_logic;
  signal clk_1_sg_x661: std_logic;
  signal invert10_op_net: std_logic;
  signal invert11_op_net: std_logic;
  signal invert12_op_net: std_logic;
  signal invert13_op_net: std_logic;
  signal invert14_op_net: std_logic;
  signal invert15_op_net: std_logic;
  signal invert16_op_net: std_logic;
  signal invert17_op_net: std_logic;
  signal invert18_op_net: std_logic;
  signal invert19_op_net: std_logic;
  signal invert1_op_net: std_logic;
  signal invert20_op_net: std_logic;
  signal invert21_op_net: std_logic;
  signal invert22_op_net: std_logic;
  signal invert23_op_net: std_logic;
  signal invert24_op_net: std_logic;
  signal invert25_op_net: std_logic;
  signal invert26_op_net: std_logic;
  signal invert27_op_net: std_logic;
  signal invert28_op_net: std_logic;
  signal invert29_op_net: std_logic;
  signal invert2_op_net: std_logic;
  signal invert30_op_net: std_logic;
  signal invert31_op_net: std_logic;
  signal invert3_op_net: std_logic;
  signal invert4_op_net: std_logic;
  signal invert5_op_net: std_logic;
  signal invert6_op_net: std_logic;
  signal invert7_op_net: std_logic;
  signal invert8_op_net: std_logic;
  signal invert9_op_net: std_logic;
  signal real_sum_s_net_x2: std_logic_vector(47 downto 0);
  signal slice10_y_net: std_logic;
  signal slice11_y_net: std_logic;
  signal slice12_y_net: std_logic;
  signal slice13_y_net: std_logic;
  signal slice14_y_net: std_logic;
  signal slice15_y_net: std_logic;
  signal slice16_y_net: std_logic;
  signal slice17_y_net: std_logic;
  signal slice18_y_net: std_logic;
  signal slice19_y_net: std_logic;
  signal slice1_y_net: std_logic;
  signal slice20_y_net: std_logic;
  signal slice21_y_net: std_logic;
  signal slice22_y_net: std_logic;
  signal slice23_y_net: std_logic;
  signal slice24_y_net: std_logic;
  signal slice25_y_net: std_logic;
  signal slice26_y_net: std_logic;
  signal slice27_y_net: std_logic;
  signal slice28_y_net: std_logic;
  signal slice29_y_net: std_logic;
  signal slice2_y_net: std_logic;
  signal slice30_y_net: std_logic;
  signal slice31_y_net: std_logic;
  signal slice3_y_net: std_logic;
  signal slice4_y_net: std_logic;
  signal slice5_y_net: std_logic;
  signal slice6_y_net: std_logic;
  signal slice7_y_net: std_logic;
  signal slice8_y_net: std_logic;
  signal slice9_y_net: std_logic;

begin
  ce_1_sg_x661 <= ce_1;
  clk_1_sg_x661 <= clk_1;
  real_sum_s_net_x2 <= din;
  dout <= adder_s_net_x1;
  of_x0 <= and_y_net_x0;

  all_0s: entity work.logical_b2983b6154
    port map (
      ce => ce_1_sg_x661,
      clk => clk_1_sg_x661,
      clr => '0',
      d0(0) => invert1_op_net,
      d1(0) => invert2_op_net,
      d10(0) => invert11_op_net,
      d11(0) => invert12_op_net,
      d12(0) => invert13_op_net,
      d13(0) => invert14_op_net,
      d14(0) => invert15_op_net,
      d15(0) => invert16_op_net,
      d16(0) => invert17_op_net,
      d17(0) => invert18_op_net,
      d18(0) => invert19_op_net,
      d19(0) => invert20_op_net,
      d2(0) => invert3_op_net,
      d20(0) => invert21_op_net,
      d21(0) => invert22_op_net,
      d22(0) => invert23_op_net,
      d23(0) => invert24_op_net,
      d24(0) => invert25_op_net,
      d25(0) => invert26_op_net,
      d26(0) => invert27_op_net,
      d27(0) => invert28_op_net,
      d28(0) => invert29_op_net,
      d29(0) => invert30_op_net,
      d3(0) => invert4_op_net,
      d30(0) => invert31_op_net,
      d4(0) => invert5_op_net,
      d5(0) => invert6_op_net,
      d6(0) => invert7_op_net,
      d7(0) => invert8_op_net,
      d8(0) => invert9_op_net,
      d9(0) => invert10_op_net,
      y(0) => all_0s_y_net
    );

  all_1s: entity work.logical_b2983b6154
    port map (
      ce => ce_1_sg_x661,
      clk => clk_1_sg_x661,
      clr => '0',
      d0(0) => slice1_y_net,
      d1(0) => slice2_y_net,
      d10(0) => slice11_y_net,
      d11(0) => slice12_y_net,
      d12(0) => slice13_y_net,
      d13(0) => slice14_y_net,
      d14(0) => slice15_y_net,
      d15(0) => slice16_y_net,
      d16(0) => slice17_y_net,
      d17(0) => slice18_y_net,
      d18(0) => slice19_y_net,
      d19(0) => slice20_y_net,
      d2(0) => slice3_y_net,
      d20(0) => slice21_y_net,
      d21(0) => slice22_y_net,
      d22(0) => slice23_y_net,
      d23(0) => slice24_y_net,
      d24(0) => slice25_y_net,
      d25(0) => slice26_y_net,
      d26(0) => slice27_y_net,
      d27(0) => slice28_y_net,
      d28(0) => slice29_y_net,
      d29(0) => slice30_y_net,
      d3(0) => slice4_y_net,
      d30(0) => slice31_y_net,
      d4(0) => slice5_y_net,
      d5(0) => slice6_y_net,
      d6(0) => slice7_y_net,
      d7(0) => slice8_y_net,
      d8(0) => slice9_y_net,
      d9(0) => slice10_y_net,
      y(0) => all_1s_y_net
    );

  and_x0: entity work.logical_80f90b97d0
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0(0) => all_0s_y_net,
      d1(0) => all_1s_y_net,
      y(0) => and_y_net_x0
    );

  convert_c9a192b6cd: entity work.convert_entity_c9a192b6cd
    port map (
      ce_1 => ce_1_sg_x661,
      clk_1 => clk_1_sg_x661,
      in_x0 => real_sum_s_net_x2,
      out_x0 => adder_s_net_x1
    );

  invert1: entity work.inverter_e5b38cca3b
    port map (
      ce => ce_1_sg_x661,
      clk => clk_1_sg_x661,
      clr => '0',
      ip(0) => slice1_y_net,
      op(0) => invert1_op_net
    );

  invert10: entity work.inverter_e5b38cca3b
    port map (
      ce => ce_1_sg_x661,
      clk => clk_1_sg_x661,
      clr => '0',
      ip(0) => slice10_y_net,
      op(0) => invert10_op_net
    );

  invert11: entity work.inverter_e5b38cca3b
    port map (
      ce => ce_1_sg_x661,
      clk => clk_1_sg_x661,
      clr => '0',
      ip(0) => slice11_y_net,
      op(0) => invert11_op_net
    );

  invert12: entity work.inverter_e5b38cca3b
    port map (
      ce => ce_1_sg_x661,
      clk => clk_1_sg_x661,
      clr => '0',
      ip(0) => slice12_y_net,
      op(0) => invert12_op_net
    );

  invert13: entity work.inverter_e5b38cca3b
    port map (
      ce => ce_1_sg_x661,
      clk => clk_1_sg_x661,
      clr => '0',
      ip(0) => slice13_y_net,
      op(0) => invert13_op_net
    );

  invert14: entity work.inverter_e5b38cca3b
    port map (
      ce => ce_1_sg_x661,
      clk => clk_1_sg_x661,
      clr => '0',
      ip(0) => slice14_y_net,
      op(0) => invert14_op_net
    );

  invert15: entity work.inverter_e5b38cca3b
    port map (
      ce => ce_1_sg_x661,
      clk => clk_1_sg_x661,
      clr => '0',
      ip(0) => slice15_y_net,
      op(0) => invert15_op_net
    );

  invert16: entity work.inverter_e5b38cca3b
    port map (
      ce => ce_1_sg_x661,
      clk => clk_1_sg_x661,
      clr => '0',
      ip(0) => slice16_y_net,
      op(0) => invert16_op_net
    );

  invert17: entity work.inverter_e5b38cca3b
    port map (
      ce => ce_1_sg_x661,
      clk => clk_1_sg_x661,
      clr => '0',
      ip(0) => slice17_y_net,
      op(0) => invert17_op_net
    );

  invert18: entity work.inverter_e5b38cca3b
    port map (
      ce => ce_1_sg_x661,
      clk => clk_1_sg_x661,
      clr => '0',
      ip(0) => slice18_y_net,
      op(0) => invert18_op_net
    );

  invert19: entity work.inverter_e5b38cca3b
    port map (
      ce => ce_1_sg_x661,
      clk => clk_1_sg_x661,
      clr => '0',
      ip(0) => slice19_y_net,
      op(0) => invert19_op_net
    );

  invert2: entity work.inverter_e5b38cca3b
    port map (
      ce => ce_1_sg_x661,
      clk => clk_1_sg_x661,
      clr => '0',
      ip(0) => slice2_y_net,
      op(0) => invert2_op_net
    );

  invert20: entity work.inverter_e5b38cca3b
    port map (
      ce => ce_1_sg_x661,
      clk => clk_1_sg_x661,
      clr => '0',
      ip(0) => slice20_y_net,
      op(0) => invert20_op_net
    );

  invert21: entity work.inverter_e5b38cca3b
    port map (
      ce => ce_1_sg_x661,
      clk => clk_1_sg_x661,
      clr => '0',
      ip(0) => slice21_y_net,
      op(0) => invert21_op_net
    );

  invert22: entity work.inverter_e5b38cca3b
    port map (
      ce => ce_1_sg_x661,
      clk => clk_1_sg_x661,
      clr => '0',
      ip(0) => slice22_y_net,
      op(0) => invert22_op_net
    );

  invert23: entity work.inverter_e5b38cca3b
    port map (
      ce => ce_1_sg_x661,
      clk => clk_1_sg_x661,
      clr => '0',
      ip(0) => slice23_y_net,
      op(0) => invert23_op_net
    );

  invert24: entity work.inverter_e5b38cca3b
    port map (
      ce => ce_1_sg_x661,
      clk => clk_1_sg_x661,
      clr => '0',
      ip(0) => slice24_y_net,
      op(0) => invert24_op_net
    );

  invert25: entity work.inverter_e5b38cca3b
    port map (
      ce => ce_1_sg_x661,
      clk => clk_1_sg_x661,
      clr => '0',
      ip(0) => slice25_y_net,
      op(0) => invert25_op_net
    );

  invert26: entity work.inverter_e5b38cca3b
    port map (
      ce => ce_1_sg_x661,
      clk => clk_1_sg_x661,
      clr => '0',
      ip(0) => slice26_y_net,
      op(0) => invert26_op_net
    );

  invert27: entity work.inverter_e5b38cca3b
    port map (
      ce => ce_1_sg_x661,
      clk => clk_1_sg_x661,
      clr => '0',
      ip(0) => slice27_y_net,
      op(0) => invert27_op_net
    );

  invert28: entity work.inverter_e5b38cca3b
    port map (
      ce => ce_1_sg_x661,
      clk => clk_1_sg_x661,
      clr => '0',
      ip(0) => slice28_y_net,
      op(0) => invert28_op_net
    );

  invert29: entity work.inverter_e5b38cca3b
    port map (
      ce => ce_1_sg_x661,
      clk => clk_1_sg_x661,
      clr => '0',
      ip(0) => slice29_y_net,
      op(0) => invert29_op_net
    );

  invert3: entity work.inverter_e5b38cca3b
    port map (
      ce => ce_1_sg_x661,
      clk => clk_1_sg_x661,
      clr => '0',
      ip(0) => slice3_y_net,
      op(0) => invert3_op_net
    );

  invert30: entity work.inverter_e5b38cca3b
    port map (
      ce => ce_1_sg_x661,
      clk => clk_1_sg_x661,
      clr => '0',
      ip(0) => slice30_y_net,
      op(0) => invert30_op_net
    );

  invert31: entity work.inverter_e5b38cca3b
    port map (
      ce => ce_1_sg_x661,
      clk => clk_1_sg_x661,
      clr => '0',
      ip(0) => slice31_y_net,
      op(0) => invert31_op_net
    );

  invert4: entity work.inverter_e5b38cca3b
    port map (
      ce => ce_1_sg_x661,
      clk => clk_1_sg_x661,
      clr => '0',
      ip(0) => slice4_y_net,
      op(0) => invert4_op_net
    );

  invert5: entity work.inverter_e5b38cca3b
    port map (
      ce => ce_1_sg_x661,
      clk => clk_1_sg_x661,
      clr => '0',
      ip(0) => slice5_y_net,
      op(0) => invert5_op_net
    );

  invert6: entity work.inverter_e5b38cca3b
    port map (
      ce => ce_1_sg_x661,
      clk => clk_1_sg_x661,
      clr => '0',
      ip(0) => slice6_y_net,
      op(0) => invert6_op_net
    );

  invert7: entity work.inverter_e5b38cca3b
    port map (
      ce => ce_1_sg_x661,
      clk => clk_1_sg_x661,
      clr => '0',
      ip(0) => slice7_y_net,
      op(0) => invert7_op_net
    );

  invert8: entity work.inverter_e5b38cca3b
    port map (
      ce => ce_1_sg_x661,
      clk => clk_1_sg_x661,
      clr => '0',
      ip(0) => slice8_y_net,
      op(0) => invert8_op_net
    );

  invert9: entity work.inverter_e5b38cca3b
    port map (
      ce => ce_1_sg_x661,
      clk => clk_1_sg_x661,
      clr => '0',
      ip(0) => slice9_y_net,
      op(0) => invert9_op_net
    );

  slice1: entity work.xlslice
    generic map (
      new_lsb => 47,
      new_msb => 47,
      x_width => 48,
      y_width => 1
    )
    port map (
      x => real_sum_s_net_x2,
      y(0) => slice1_y_net
    );

  slice10: entity work.xlslice
    generic map (
      new_lsb => 38,
      new_msb => 38,
      x_width => 48,
      y_width => 1
    )
    port map (
      x => real_sum_s_net_x2,
      y(0) => slice10_y_net
    );

  slice11: entity work.xlslice
    generic map (
      new_lsb => 37,
      new_msb => 37,
      x_width => 48,
      y_width => 1
    )
    port map (
      x => real_sum_s_net_x2,
      y(0) => slice11_y_net
    );

  slice12: entity work.xlslice
    generic map (
      new_lsb => 36,
      new_msb => 36,
      x_width => 48,
      y_width => 1
    )
    port map (
      x => real_sum_s_net_x2,
      y(0) => slice12_y_net
    );

  slice13: entity work.xlslice
    generic map (
      new_lsb => 35,
      new_msb => 35,
      x_width => 48,
      y_width => 1
    )
    port map (
      x => real_sum_s_net_x2,
      y(0) => slice13_y_net
    );

  slice14: entity work.xlslice
    generic map (
      new_lsb => 34,
      new_msb => 34,
      x_width => 48,
      y_width => 1
    )
    port map (
      x => real_sum_s_net_x2,
      y(0) => slice14_y_net
    );

  slice15: entity work.xlslice
    generic map (
      new_lsb => 33,
      new_msb => 33,
      x_width => 48,
      y_width => 1
    )
    port map (
      x => real_sum_s_net_x2,
      y(0) => slice15_y_net
    );

  slice16: entity work.xlslice
    generic map (
      new_lsb => 32,
      new_msb => 32,
      x_width => 48,
      y_width => 1
    )
    port map (
      x => real_sum_s_net_x2,
      y(0) => slice16_y_net
    );

  slice17: entity work.xlslice
    generic map (
      new_lsb => 31,
      new_msb => 31,
      x_width => 48,
      y_width => 1
    )
    port map (
      x => real_sum_s_net_x2,
      y(0) => slice17_y_net
    );

  slice18: entity work.xlslice
    generic map (
      new_lsb => 30,
      new_msb => 30,
      x_width => 48,
      y_width => 1
    )
    port map (
      x => real_sum_s_net_x2,
      y(0) => slice18_y_net
    );

  slice19: entity work.xlslice
    generic map (
      new_lsb => 29,
      new_msb => 29,
      x_width => 48,
      y_width => 1
    )
    port map (
      x => real_sum_s_net_x2,
      y(0) => slice19_y_net
    );

  slice2: entity work.xlslice
    generic map (
      new_lsb => 46,
      new_msb => 46,
      x_width => 48,
      y_width => 1
    )
    port map (
      x => real_sum_s_net_x2,
      y(0) => slice2_y_net
    );

  slice20: entity work.xlslice
    generic map (
      new_lsb => 28,
      new_msb => 28,
      x_width => 48,
      y_width => 1
    )
    port map (
      x => real_sum_s_net_x2,
      y(0) => slice20_y_net
    );

  slice21: entity work.xlslice
    generic map (
      new_lsb => 27,
      new_msb => 27,
      x_width => 48,
      y_width => 1
    )
    port map (
      x => real_sum_s_net_x2,
      y(0) => slice21_y_net
    );

  slice22: entity work.xlslice
    generic map (
      new_lsb => 26,
      new_msb => 26,
      x_width => 48,
      y_width => 1
    )
    port map (
      x => real_sum_s_net_x2,
      y(0) => slice22_y_net
    );

  slice23: entity work.xlslice
    generic map (
      new_lsb => 25,
      new_msb => 25,
      x_width => 48,
      y_width => 1
    )
    port map (
      x => real_sum_s_net_x2,
      y(0) => slice23_y_net
    );

  slice24: entity work.xlslice
    generic map (
      new_lsb => 24,
      new_msb => 24,
      x_width => 48,
      y_width => 1
    )
    port map (
      x => real_sum_s_net_x2,
      y(0) => slice24_y_net
    );

  slice25: entity work.xlslice
    generic map (
      new_lsb => 23,
      new_msb => 23,
      x_width => 48,
      y_width => 1
    )
    port map (
      x => real_sum_s_net_x2,
      y(0) => slice25_y_net
    );

  slice26: entity work.xlslice
    generic map (
      new_lsb => 22,
      new_msb => 22,
      x_width => 48,
      y_width => 1
    )
    port map (
      x => real_sum_s_net_x2,
      y(0) => slice26_y_net
    );

  slice27: entity work.xlslice
    generic map (
      new_lsb => 21,
      new_msb => 21,
      x_width => 48,
      y_width => 1
    )
    port map (
      x => real_sum_s_net_x2,
      y(0) => slice27_y_net
    );

  slice28: entity work.xlslice
    generic map (
      new_lsb => 20,
      new_msb => 20,
      x_width => 48,
      y_width => 1
    )
    port map (
      x => real_sum_s_net_x2,
      y(0) => slice28_y_net
    );

  slice29: entity work.xlslice
    generic map (
      new_lsb => 19,
      new_msb => 19,
      x_width => 48,
      y_width => 1
    )
    port map (
      x => real_sum_s_net_x2,
      y(0) => slice29_y_net
    );

  slice3: entity work.xlslice
    generic map (
      new_lsb => 45,
      new_msb => 45,
      x_width => 48,
      y_width => 1
    )
    port map (
      x => real_sum_s_net_x2,
      y(0) => slice3_y_net
    );

  slice30: entity work.xlslice
    generic map (
      new_lsb => 18,
      new_msb => 18,
      x_width => 48,
      y_width => 1
    )
    port map (
      x => real_sum_s_net_x2,
      y(0) => slice30_y_net
    );

  slice31: entity work.xlslice
    generic map (
      new_lsb => 17,
      new_msb => 17,
      x_width => 48,
      y_width => 1
    )
    port map (
      x => real_sum_s_net_x2,
      y(0) => slice31_y_net
    );

  slice4: entity work.xlslice
    generic map (
      new_lsb => 44,
      new_msb => 44,
      x_width => 48,
      y_width => 1
    )
    port map (
      x => real_sum_s_net_x2,
      y(0) => slice4_y_net
    );

  slice5: entity work.xlslice
    generic map (
      new_lsb => 43,
      new_msb => 43,
      x_width => 48,
      y_width => 1
    )
    port map (
      x => real_sum_s_net_x2,
      y(0) => slice5_y_net
    );

  slice6: entity work.xlslice
    generic map (
      new_lsb => 42,
      new_msb => 42,
      x_width => 48,
      y_width => 1
    )
    port map (
      x => real_sum_s_net_x2,
      y(0) => slice6_y_net
    );

  slice7: entity work.xlslice
    generic map (
      new_lsb => 41,
      new_msb => 41,
      x_width => 48,
      y_width => 1
    )
    port map (
      x => real_sum_s_net_x2,
      y(0) => slice7_y_net
    );

  slice8: entity work.xlslice
    generic map (
      new_lsb => 40,
      new_msb => 40,
      x_width => 48,
      y_width => 1
    )
    port map (
      x => real_sum_s_net_x2,
      y(0) => slice8_y_net
    );

  slice9: entity work.xlslice
    generic map (
      new_lsb => 39,
      new_msb => 39,
      x_width => 48,
      y_width => 1
    )
    port map (
      x => real_sum_s_net_x2,
      y(0) => slice9_y_net
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/quantisation/quant/ri_to_c"

entity ri_to_c_entity_b0914dff9c is
  port (
    im: in std_logic_vector(3 downto 0); 
    re: in std_logic_vector(3 downto 0); 
    c: out std_logic_vector(7 downto 0)
  );
end ri_to_c_entity_b0914dff9c;

architecture structural of ri_to_c_entity_b0914dff9c is
  signal concat_y_net_x2: std_logic_vector(7 downto 0);
  signal force_im_output_port_net: std_logic_vector(3 downto 0);
  signal force_re_output_port_net: std_logic_vector(3 downto 0);
  signal mux1_y_net_x0: std_logic_vector(3 downto 0);
  signal mux_y_net_x0: std_logic_vector(3 downto 0);

begin
  mux1_y_net_x0 <= im;
  mux_y_net_x0 <= re;
  c <= concat_y_net_x2;

  concat: entity work.concat_1a070f1f35
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      in0 => force_re_output_port_net,
      in1 => force_im_output_port_net,
      y => concat_y_net_x2
    );

  force_im: entity work.reinterpret_df53fd8fe7
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => mux1_y_net_x0,
      output_port => force_im_output_port_net
    );

  force_re: entity work.reinterpret_df53fd8fe7
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => mux_y_net_x0,
      output_port => force_re_output_port_net
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/quantisation/quant"

entity quant_entity_63fa21c236 is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    din0: in std_logic_vector(61 downto 0); 
    din1: in std_logic_vector(61 downto 0); 
    dv: in std_logic; 
    imag_in0: in std_logic_vector(15 downto 0); 
    imag_in1: in std_logic_vector(15 downto 0); 
    real_in0: in std_logic_vector(15 downto 0); 
    real_in1: in std_logic_vector(15 downto 0); 
    sync_in: in std_logic; 
    dout0: out std_logic_vector(7 downto 0); 
    dout1: out std_logic_vector(7 downto 0); 
    dv_out: out std_logic; 
    of_x0: out std_logic; 
    sync_out: out std_logic
  );
end quant_entity_63fa21c236;

architecture structural of quant_entity_63fa21c236 is
  signal adder_s_net_x1: std_logic_vector(3 downto 0);
  signal adder_s_net_x2: std_logic_vector(3 downto 0);
  signal adder_s_net_x3: std_logic_vector(3 downto 0);
  signal adder_s_net_x4: std_logic_vector(3 downto 0);
  signal and_y_net_x0: std_logic;
  signal and_y_net_x1: std_logic;
  signal and_y_net_x2: std_logic;
  signal and_y_net_x3: std_logic;
  signal ce_1_sg_x668: std_logic;
  signal clk_1_sg_x668: std_logic;
  signal concat_y_net_x4: std_logic_vector(7 downto 0);
  signal concat_y_net_x5: std_logic_vector(7 downto 0);
  signal constant1_op_net: std_logic_vector(47 downto 0);
  signal constant2_op_net: std_logic_vector(47 downto 0);
  signal constant3_op_net: std_logic_vector(47 downto 0);
  signal constant4_op_net: std_logic_vector(3 downto 0);
  signal constant5_op_net: std_logic_vector(3 downto 0);
  signal constant6_op_net: std_logic_vector(3 downto 0);
  signal constant7_op_net: std_logic_vector(3 downto 0);
  signal constant8_op_net: std_logic_vector(47 downto 0);
  signal delay13_q_net: std_logic;
  signal delay14_q_net: std_logic;
  signal delay16_q_net_x1: std_logic;
  signal delay1_q_net: std_logic;
  signal delay2_q_net: std_logic;
  signal delay43_q_net_x0: std_logic;
  signal delay45_q_net_x0: std_logic;
  signal delay6_q_net_x1: std_logic;
  signal force_im_output_port_net_x1: std_logic_vector(30 downto 0);
  signal force_im_output_port_net_x2: std_logic_vector(30 downto 0);
  signal force_re_output_port_net_x1: std_logic_vector(30 downto 0);
  signal force_re_output_port_net_x2: std_logic_vector(30 downto 0);
  signal imag_sum_s_net_x2: std_logic_vector(47 downto 0);
  signal imag_sum_s_net_x3: std_logic_vector(47 downto 0);
  signal logical_y_net_x2: std_logic;
  signal mux1_y_net_x0: std_logic_vector(3 downto 0);
  signal mux2_y_net_x0: std_logic_vector(3 downto 0);
  signal mux3_y_net_x0: std_logic_vector(3 downto 0);
  signal mux_y_net_x0: std_logic_vector(3 downto 0);
  signal real_sum_s_net_x2: std_logic_vector(47 downto 0);
  signal real_sum_s_net_x3: std_logic_vector(47 downto 0);
  signal reinterpret1_output_port_net_x3: std_logic_vector(15 downto 0);
  signal reinterpret1_output_port_net_x4: std_logic_vector(61 downto 0);
  signal reinterpret2_output_port_net_x3: std_logic_vector(15 downto 0);
  signal reinterpret2_output_port_net_x4: std_logic_vector(61 downto 0);
  signal reinterpret3_output_port_net_x2: std_logic_vector(15 downto 0);
  signal reinterpret4_output_port_net_x2: std_logic_vector(15 downto 0);
  signal relational1_op_net: std_logic;
  signal relational2_op_net: std_logic;
  signal relational3_op_net: std_logic;
  signal relational4_op_net: std_logic;

begin
  ce_1_sg_x668 <= ce_1;
  clk_1_sg_x668 <= clk_1;
  reinterpret2_output_port_net_x4 <= din0;
  reinterpret1_output_port_net_x4 <= din1;
  delay45_q_net_x0 <= dv;
  reinterpret3_output_port_net_x2 <= imag_in0;
  reinterpret1_output_port_net_x3 <= imag_in1;
  reinterpret4_output_port_net_x2 <= real_in0;
  reinterpret2_output_port_net_x3 <= real_in1;
  delay43_q_net_x0 <= sync_in;
  dout0 <= concat_y_net_x4;
  dout1 <= concat_y_net_x5;
  dv_out <= delay16_q_net_x1;
  of_x0 <= logical_y_net_x2;
  sync_out <= delay6_q_net_x1;

  c_to_ri1_34c6a32ddc: entity work.c_to_ri_entity_6fb343188d
    port map (
      c => reinterpret1_output_port_net_x4,
      im => force_im_output_port_net_x1,
      re => force_re_output_port_net_x1
    );

  c_to_ri4_71b4d5906d: entity work.c_to_ri_entity_6fb343188d
    port map (
      c => reinterpret2_output_port_net_x4,
      im => force_im_output_port_net_x2,
      re => force_re_output_port_net_x2
    );

  complex_mult_simple_full1_b949328f47: entity work.complex_mult_simple_full_entity_b8d4cf41a3
    port map (
      ce_1 => ce_1_sg_x668,
      clk_1 => clk_1_sg_x668,
      i1 => reinterpret1_output_port_net_x3,
      i2 => force_im_output_port_net_x1,
      r1 => reinterpret2_output_port_net_x3,
      r2 => force_re_output_port_net_x1,
      imag => imag_sum_s_net_x3,
      real_x0 => real_sum_s_net_x3
    );

  complex_mult_simple_full_b8d4cf41a3: entity work.complex_mult_simple_full_entity_b8d4cf41a3
    port map (
      ce_1 => ce_1_sg_x668,
      clk_1 => clk_1_sg_x668,
      i1 => reinterpret3_output_port_net_x2,
      i2 => force_im_output_port_net_x2,
      r1 => reinterpret4_output_port_net_x2,
      r2 => force_re_output_port_net_x2,
      imag => imag_sum_s_net_x2,
      real_x0 => real_sum_s_net_x2
    );

  constant1: entity work.constant_e99b17db38
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op => constant1_op_net
    );

  constant2: entity work.constant_e99b17db38
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op => constant2_op_net
    );

  constant3: entity work.constant_e99b17db38
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op => constant3_op_net
    );

  constant4: entity work.constant_a629aefb53
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op => constant4_op_net
    );

  constant5: entity work.constant_a629aefb53
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op => constant5_op_net
    );

  constant6: entity work.constant_a629aefb53
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op => constant6_op_net
    );

  constant7: entity work.constant_a629aefb53
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op => constant7_op_net
    );

  constant8: entity work.constant_e99b17db38
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op => constant8_op_net
    );

  convert_of0_7fe80d503c: entity work.convert_of0_entity_7fe80d503c
    port map (
      ce_1 => ce_1_sg_x668,
      clk_1 => clk_1_sg_x668,
      din => real_sum_s_net_x2,
      dout => adder_s_net_x1,
      of_x0 => and_y_net_x0
    );

  convert_of1_32cbcac732: entity work.convert_of0_entity_7fe80d503c
    port map (
      ce_1 => ce_1_sg_x668,
      clk_1 => clk_1_sg_x668,
      din => imag_sum_s_net_x2,
      dout => adder_s_net_x2,
      of_x0 => and_y_net_x1
    );

  convert_of2_ffebd21dfd: entity work.convert_of0_entity_7fe80d503c
    port map (
      ce_1 => ce_1_sg_x668,
      clk_1 => clk_1_sg_x668,
      din => real_sum_s_net_x3,
      dout => adder_s_net_x3,
      of_x0 => and_y_net_x2
    );

  convert_of3_e72d05c2e8: entity work.convert_of0_entity_7fe80d503c
    port map (
      ce_1 => ce_1_sg_x668,
      clk_1 => clk_1_sg_x668,
      din => imag_sum_s_net_x3,
      dout => adder_s_net_x4,
      of_x0 => and_y_net_x3
    );

  delay1: entity work.delay_14a6a51cbc
    port map (
      ce => ce_1_sg_x668,
      clk => clk_1_sg_x668,
      clr => '0',
      d(0) => delay43_q_net_x0,
      q(0) => delay1_q_net
    );

  delay13: entity work.delay_14a6a51cbc
    port map (
      ce => ce_1_sg_x668,
      clk => clk_1_sg_x668,
      clr => '0',
      d(0) => delay45_q_net_x0,
      q(0) => delay13_q_net
    );

  delay14: entity work.delay_e18fb31a3d
    port map (
      ce => ce_1_sg_x668,
      clk => clk_1_sg_x668,
      clr => '0',
      d(0) => delay13_q_net,
      q(0) => delay14_q_net
    );

  delay16: entity work.delay_9f02caa990
    port map (
      ce => ce_1_sg_x668,
      clk => clk_1_sg_x668,
      clr => '0',
      d(0) => delay14_q_net,
      q(0) => delay16_q_net_x1
    );

  delay2: entity work.delay_e18fb31a3d
    port map (
      ce => ce_1_sg_x668,
      clk => clk_1_sg_x668,
      clr => '0',
      d(0) => delay1_q_net,
      q(0) => delay2_q_net
    );

  delay6: entity work.delay_9f02caa990
    port map (
      ce => ce_1_sg_x668,
      clk => clk_1_sg_x668,
      clr => '0',
      d(0) => delay2_q_net,
      q(0) => delay6_q_net_x1
    );

  logical: entity work.logical_a6d07705dd
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0(0) => and_y_net_x0,
      d1(0) => and_y_net_x1,
      d2(0) => and_y_net_x2,
      d3(0) => and_y_net_x3,
      y(0) => logical_y_net_x2
    );

  mux: entity work.mux_ec62f2b06a
    port map (
      ce => ce_1_sg_x668,
      clk => clk_1_sg_x668,
      clr => '0',
      d0 => adder_s_net_x1,
      d1 => constant4_op_net,
      sel(0) => relational1_op_net,
      y => mux_y_net_x0
    );

  mux1: entity work.mux_ec62f2b06a
    port map (
      ce => ce_1_sg_x668,
      clk => clk_1_sg_x668,
      clr => '0',
      d0 => adder_s_net_x2,
      d1 => constant5_op_net,
      sel(0) => relational2_op_net,
      y => mux1_y_net_x0
    );

  mux2: entity work.mux_ec62f2b06a
    port map (
      ce => ce_1_sg_x668,
      clk => clk_1_sg_x668,
      clr => '0',
      d0 => adder_s_net_x3,
      d1 => constant6_op_net,
      sel(0) => relational3_op_net,
      y => mux2_y_net_x0
    );

  mux3: entity work.mux_ec62f2b06a
    port map (
      ce => ce_1_sg_x668,
      clk => clk_1_sg_x668,
      clr => '0',
      d0 => adder_s_net_x4,
      d1 => constant7_op_net,
      sel(0) => relational4_op_net,
      y => mux3_y_net_x0
    );

  relational1: entity work.relational_ada779c3b0
    port map (
      a => real_sum_s_net_x2,
      b => constant8_op_net,
      ce => ce_1_sg_x668,
      clk => clk_1_sg_x668,
      clr => '0',
      op(0) => relational1_op_net
    );

  relational2: entity work.relational_ada779c3b0
    port map (
      a => imag_sum_s_net_x2,
      b => constant1_op_net,
      ce => ce_1_sg_x668,
      clk => clk_1_sg_x668,
      clr => '0',
      op(0) => relational2_op_net
    );

  relational3: entity work.relational_ada779c3b0
    port map (
      a => real_sum_s_net_x3,
      b => constant2_op_net,
      ce => ce_1_sg_x668,
      clk => clk_1_sg_x668,
      clr => '0',
      op(0) => relational3_op_net
    );

  relational4: entity work.relational_ada779c3b0
    port map (
      a => imag_sum_s_net_x3,
      b => constant3_op_net,
      ce => ce_1_sg_x668,
      clk => clk_1_sg_x668,
      clr => '0',
      op(0) => relational4_op_net
    );

  ri_to_c1_de24955597: entity work.ri_to_c_entity_b0914dff9c
    port map (
      im => mux3_y_net_x0,
      re => mux2_y_net_x0,
      c => concat_y_net_x5
    );

  ri_to_c_b0914dff9c: entity work.ri_to_c_entity_b0914dff9c
    port map (
      im => mux1_y_net_x0,
      re => mux_y_net_x0,
      c => concat_y_net_x4
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/quantisation"

entity quantisation_entity_112ce4d84a is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    data: in std_logic_vector(123 downto 0); 
    dv: in std_logic; 
    eq_bus: in std_logic_vector(63 downto 0); 
    sync: in std_logic; 
    quant_data: out std_logic_vector(15 downto 0); 
    quant_dv: out std_logic; 
    quant_of: out std_logic; 
    sync_out: out std_logic
  );
end quantisation_entity_112ce4d84a;

architecture structural of quantisation_entity_112ce4d84a is
  signal ce_1_sg_x669: std_logic;
  signal clk_1_sg_x669: std_logic;
  signal concat_y_net_x4: std_logic_vector(7 downto 0);
  signal concat_y_net_x5: std_logic_vector(7 downto 0);
  signal concatenate_y_net_x2: std_logic_vector(15 downto 0);
  signal delay16_q_net_x2: std_logic;
  signal delay43_q_net_x1: std_logic;
  signal delay44_q_net_x1: std_logic_vector(123 downto 0);
  signal delay45_q_net_x1: std_logic;
  signal delay46_q_net_x1: std_logic_vector(63 downto 0);
  signal delay6_q_net_x2: std_logic;
  signal logical_y_net_x3: std_logic;
  signal reinterpret1_output_port_net_x3: std_logic_vector(15 downto 0);
  signal reinterpret1_output_port_net_x4: std_logic_vector(61 downto 0);
  signal reinterpret2_output_port_net_x3: std_logic_vector(15 downto 0);
  signal reinterpret2_output_port_net_x4: std_logic_vector(61 downto 0);
  signal reinterpret3_output_port_net_x2: std_logic_vector(15 downto 0);
  signal reinterpret4_output_port_net_x2: std_logic_vector(15 downto 0);

begin
  ce_1_sg_x669 <= ce_1;
  clk_1_sg_x669 <= clk_1;
  delay44_q_net_x1 <= data;
  delay45_q_net_x1 <= dv;
  delay46_q_net_x1 <= eq_bus;
  delay43_q_net_x1 <= sync;
  quant_data <= concatenate_y_net_x2;
  quant_dv <= delay16_q_net_x2;
  quant_of <= logical_y_net_x3;
  sync_out <= delay6_q_net_x2;

  bus_create2_b94cc2359f: entity work.bus_create2_entity_b94cc2359f
    port map (
      in1 => concat_y_net_x4,
      in2 => concat_y_net_x5,
      bus_out => concatenate_y_net_x2
    );

  bus_expand3_825300c8f2: entity work.bus_expand3_entity_825300c8f2
    port map (
      bus_in => delay46_q_net_x1,
      lsb_out1 => reinterpret1_output_port_net_x3,
      msb_out4 => reinterpret4_output_port_net_x2,
      out2 => reinterpret2_output_port_net_x3,
      out3 => reinterpret3_output_port_net_x2
    );

  expand_data_in_6408d99121: entity work.expand_data_in_entity_d5d71b9bb1
    port map (
      bus_in => delay44_q_net_x1,
      lsb_out1 => reinterpret1_output_port_net_x4,
      msb_out2 => reinterpret2_output_port_net_x4
    );

  quant_63fa21c236: entity work.quant_entity_63fa21c236
    port map (
      ce_1 => ce_1_sg_x669,
      clk_1 => clk_1_sg_x669,
      din0 => reinterpret2_output_port_net_x4,
      din1 => reinterpret1_output_port_net_x4,
      dv => delay45_q_net_x1,
      imag_in0 => reinterpret3_output_port_net_x2,
      imag_in1 => reinterpret1_output_port_net_x3,
      real_in0 => reinterpret4_output_port_net_x2,
      real_in1 => reinterpret2_output_port_net_x3,
      sync_in => delay43_q_net_x1,
      dout0 => concat_y_net_x4,
      dout1 => concat_y_net_x5,
      dv_out => delay16_q_net_x2,
      of_x0 => logical_y_net_x3,
      sync_out => delay6_q_net_x2
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/rcs/user"

entity user_entity_924243a28a is
  port (
    reg_out: in std_logic_vector(31 downto 0); 
    convert_x0: out std_logic_vector(31 downto 0)
  );
end user_entity_924243a28a;

architecture structural of user_entity_924243a28a is
  signal convert_dout_net_x0: std_logic_vector(31 downto 0);
  signal user_val_op_net_x0: std_logic_vector(31 downto 0);

begin
  user_val_op_net_x0 <= reg_out;
  convert_x0 <= convert_dout_net_x0;

  convert: entity work.xlconvert
    generic map (
      bool_conversion => 0,
      din_arith => 1,
      din_bin_pt => 0,
      din_width => 32,
      dout_arith => 1,
      dout_bin_pt => 0,
      dout_width => 32,
      latency => 0,
      overflow => xlWrap,
      quantization => xlTruncate
    )
    port map (
      ce => '1',
      clk => '1',
      clr => '0',
      din => user_val_op_net_x0,
      en => "1",
      dout => convert_dout_net_x0
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/rcs"

entity rcs_entity_fb62b436e0 is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    app: out std_logic_vector(31 downto 0); 
    lib: out std_logic_vector(31 downto 0); 
    user: out std_logic_vector(31 downto 0)
  );
end rcs_entity_fb62b436e0;

architecture structural of rcs_entity_fb62b436e0 is
  signal app_dirty_op_net: std_logic;
  signal app_info1_y_net: std_logic_vector(30 downto 0);
  signal app_info_y_net: std_logic_vector(30 downto 0);
  signal app_rcs_type_op_net: std_logic;
  signal app_reserved_op_net: std_logic;
  signal app_revision_op_net: std_logic_vector(27 downto 0);
  signal app_timestamp_op_net: std_logic_vector(30 downto 0);
  signal app_type_op_net: std_logic;
  signal ce_1_sg_x672: std_logic;
  signal clk_1_sg_x672: std_logic;
  signal concat1_y_net_x0: std_logic_vector(31 downto 0);
  signal concat_y_net_x0: std_logic_vector(31 downto 0);
  signal convert_dout_net_x3: std_logic_vector(31 downto 0);
  signal convert_dout_net_x4: std_logic_vector(31 downto 0);
  signal convert_dout_net_x5: std_logic_vector(31 downto 0);
  signal lib_dirty_op_net: std_logic;
  signal lib_rcs_type_op_net: std_logic;
  signal lib_reserved_op_net: std_logic;
  signal lib_revision_op_net: std_logic_vector(27 downto 0);
  signal lib_timestamp_op_net: std_logic_vector(30 downto 0);
  signal lib_type_op_net: std_logic;
  signal mux1_y_net: std_logic_vector(30 downto 0);
  signal mux_y_net: std_logic_vector(30 downto 0);
  signal user_val_op_net_x0: std_logic_vector(31 downto 0);

begin
  ce_1_sg_x672 <= ce_1;
  clk_1_sg_x672 <= clk_1;
  app <= convert_dout_net_x3;
  lib <= convert_dout_net_x4;
  user <= convert_dout_net_x5;

  app_0224193379: entity work.status_entity_7b6169195a
    port map (
      ce_1 => ce_1_sg_x672,
      clk_1 => clk_1_sg_x672,
      reg_out => concat_y_net_x0,
      convert_x0 => convert_dout_net_x3
    );

  app_dirty: entity work.constant_6293007044
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op(0) => app_dirty_op_net
    );

  app_info: entity work.concat_09ca9faec0
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      in0(0) => app_rcs_type_op_net,
      in1(0) => app_reserved_op_net,
      in2(0) => app_dirty_op_net,
      in3 => app_revision_op_net,
      y => app_info_y_net
    );

  app_info1: entity work.concat_09ca9faec0
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      in0(0) => lib_rcs_type_op_net,
      in1(0) => lib_reserved_op_net,
      in2(0) => lib_dirty_op_net,
      in3 => lib_revision_op_net,
      y => app_info1_y_net
    );

  app_rcs_type: entity work.constant_963ed6358a
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op(0) => app_rcs_type_op_net
    );

  app_reserved: entity work.constant_963ed6358a
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op(0) => app_reserved_op_net
    );

  app_revision: entity work.constant_98b461a391
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op => app_revision_op_net
    );

  app_timestamp: entity work.constant_e82da56f1e
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op => app_timestamp_op_net
    );

  app_type: entity work.constant_6293007044
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op(0) => app_type_op_net
    );

  concat: entity work.concat_c24e4e888e
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      in0(0) => app_type_op_net,
      in1 => mux_y_net,
      y => concat_y_net_x0
    );

  concat1: entity work.concat_c24e4e888e
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      in0(0) => lib_type_op_net,
      in1 => mux1_y_net,
      y => concat1_y_net_x0
    );

  lib_90dec1a45d: entity work.status_entity_7b6169195a
    port map (
      ce_1 => ce_1_sg_x672,
      clk_1 => clk_1_sg_x672,
      reg_out => concat1_y_net_x0,
      convert_x0 => convert_dout_net_x4
    );

  lib_dirty: entity work.constant_6293007044
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op(0) => lib_dirty_op_net
    );

  lib_rcs_type: entity work.constant_963ed6358a
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op(0) => lib_rcs_type_op_net
    );

  lib_reserved: entity work.constant_963ed6358a
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op(0) => lib_reserved_op_net
    );

  lib_revision: entity work.constant_98b461a391
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op => lib_revision_op_net
    );

  lib_timestamp: entity work.constant_1e1ea8370a
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op => lib_timestamp_op_net
    );

  lib_type: entity work.constant_6293007044
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op(0) => lib_type_op_net
    );

  mux: entity work.mux_7448b060f4
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0 => app_info_y_net,
      d1 => app_timestamp_op_net,
      sel(0) => app_type_op_net,
      y => mux_y_net
    );

  mux1: entity work.mux_7448b060f4
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0 => app_info1_y_net,
      d1 => lib_timestamp_op_net,
      sel(0) => lib_type_op_net,
      y => mux1_y_net
    );

  user_924243a28a: entity work.user_entity_924243a28a
    port map (
      reg_out => user_val_op_net_x0,
      convert_x0 => convert_dout_net_x5
    );

  user_val: entity work.constant_ebdfb0074f
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op => user_val_op_net_x0
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/repack_for_snap/bus_create2"

entity bus_create2_entity_8009be622f is
  port (
    in1: in std_logic; 
    in2: in std_logic_vector(15 downto 0); 
    in3: in std_logic; 
    bus_out: out std_logic_vector(17 downto 0)
  );
end bus_create2_entity_8009be622f;

architecture structural of bus_create2_entity_8009be622f is
  signal concatenate_y_net_x20: std_logic_vector(17 downto 0);
  signal delay1_q_net_x3: std_logic;
  signal delay_q_net_x3: std_logic;
  signal mux1_y_net_x4: std_logic_vector(15 downto 0);
  signal reinterpret1_output_port_net: std_logic;
  signal reinterpret2_output_port_net: std_logic_vector(15 downto 0);
  signal reinterpret3_output_port_net: std_logic;

begin
  delay_q_net_x3 <= in1;
  mux1_y_net_x4 <= in2;
  delay1_q_net_x3 <= in3;
  bus_out <= concatenate_y_net_x20;

  concatenate: entity work.concat_7d415c13b1
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      in0(0) => reinterpret1_output_port_net,
      in1 => reinterpret2_output_port_net,
      in2(0) => reinterpret3_output_port_net,
      y => concatenate_y_net_x20
    );

  reinterpret1: entity work.reinterpret_112d91c147
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port(0) => delay_q_net_x3,
      output_port(0) => reinterpret1_output_port_net
    );

  reinterpret2: entity work.reinterpret_ddc3ebdd7c
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => mux1_y_net_x4,
      output_port => reinterpret2_output_port_net
    );

  reinterpret3: entity work.reinterpret_112d91c147
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port(0) => delay1_q_net_x3,
      output_port(0) => reinterpret3_output_port_net
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/repack_for_snap"

entity repack_for_snap_entity_435cb8b557 is
  port (
    data_in: in std_logic_vector(15 downto 0); 
    dv_in: in std_logic; 
    sync_in: in std_logic; 
    snap_16bit: out std_logic_vector(17 downto 0)
  );
end repack_for_snap_entity_435cb8b557;

architecture structural of repack_for_snap_entity_435cb8b557 is
  signal concatenate_y_net_x21: std_logic_vector(17 downto 0);
  signal delay1_q_net_x4: std_logic;
  signal delay_q_net_x4: std_logic;
  signal mux1_y_net_x5: std_logic_vector(15 downto 0);

begin
  mux1_y_net_x5 <= data_in;
  delay1_q_net_x4 <= dv_in;
  delay_q_net_x4 <= sync_in;
  snap_16bit <= concatenate_y_net_x21;

  bus_create2_8009be622f: entity work.bus_create2_entity_8009be622f
    port map (
      in1 => delay_q_net_x4,
      in2 => mux1_y_net_x5,
      in3 => delay1_q_net_x4,
      bus_out => concatenate_y_net_x21
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/snap_debug/addr"

entity addr_entity_e4463d4a0b is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    reg_out: in std_logic_vector(10 downto 0); 
    convert_x0: out std_logic_vector(31 downto 0)
  );
end addr_entity_e4463d4a0b;

architecture structural of addr_entity_e4463d4a0b is
  signal ce_1_sg_x673: std_logic;
  signal clk_1_sg_x673: std_logic;
  signal convert_dout_net_x0: std_logic_vector(31 downto 0);
  signal register1_q_net_x0: std_logic_vector(10 downto 0);

begin
  ce_1_sg_x673 <= ce_1;
  clk_1_sg_x673 <= clk_1;
  register1_q_net_x0 <= reg_out;
  convert_x0 <= convert_dout_net_x0;

  convert: entity work.xlconvert
    generic map (
      bool_conversion => 0,
      din_arith => 1,
      din_bin_pt => 0,
      din_width => 11,
      dout_arith => 1,
      dout_bin_pt => 0,
      dout_width => 32,
      latency => 0,
      overflow => xlWrap,
      quantization => xlTruncate
    )
    port map (
      ce => ce_1_sg_x673,
      clk => clk_1_sg_x673,
      clr => '0',
      din => register1_q_net_x0,
      en => "1",
      dout => convert_dout_net_x0
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/snap_debug/bram/calc_add"

entity calc_add_entity_0b96421a51 is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    in_x0: in std_logic_vector(10 downto 0); 
    out_x0: out std_logic_vector(10 downto 0)
  );
end calc_add_entity_0b96421a51;

architecture structural of calc_add_entity_0b96421a51 is
  signal add_sub_s_net: std_logic;
  signal ce_1_sg_x674: std_logic;
  signal clk_1_sg_x674: std_logic;
  signal concat_y_net: std_logic_vector(10 downto 0);
  signal const_op_net: std_logic;
  signal convert_addr_dout_net: std_logic_vector(10 downto 0);
  signal enable_y_net_x0: std_logic_vector(10 downto 0);
  signal lsw_y_net: std_logic;
  signal manipulate_op_net: std_logic;
  signal msw_y_net: std_logic_vector(9 downto 0);
  signal mux_y_net_x0: std_logic_vector(10 downto 0);

begin
  ce_1_sg_x674 <= ce_1;
  clk_1_sg_x674 <= clk_1;
  enable_y_net_x0 <= in_x0;
  out_x0 <= mux_y_net_x0;

  add_sub: entity work.addsub_c13097e33e
    port map (
      a(0) => const_op_net,
      b(0) => lsw_y_net,
      ce => ce_1_sg_x674,
      clk => clk_1_sg_x674,
      clr => '0',
      s(0) => add_sub_s_net
    );

  concat: entity work.concat_83d07cc341
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      in0 => msw_y_net,
      in1(0) => add_sub_s_net,
      y => concat_y_net
    );

  const: entity work.constant_963ed6358a
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op(0) => const_op_net
    );

  convert_addr: entity work.xlconvert
    generic map (
      bool_conversion => 0,
      din_arith => 1,
      din_bin_pt => 0,
      din_width => 11,
      dout_arith => 1,
      dout_bin_pt => 0,
      dout_width => 11,
      latency => 0,
      overflow => xlWrap,
      quantization => xlTruncate
    )
    port map (
      ce => ce_1_sg_x674,
      clk => clk_1_sg_x674,
      clr => '0',
      din => enable_y_net_x0,
      en => "1",
      dout => convert_addr_dout_net
    );

  lsw: entity work.xlslice
    generic map (
      new_lsb => 0,
      new_msb => 0,
      x_width => 11,
      y_width => 1
    )
    port map (
      x => convert_addr_dout_net,
      y(0) => lsw_y_net
    );

  manipulate: entity work.constant_963ed6358a
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op(0) => manipulate_op_net
    );

  msw: entity work.xlslice
    generic map (
      new_lsb => 1,
      new_msb => 10,
      x_width => 11,
      y_width => 10
    )
    port map (
      x => convert_addr_dout_net,
      y => msw_y_net
    );

  mux: entity work.mux_eb6266ebdd
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0 => convert_addr_dout_net,
      d1 => concat_y_net,
      sel(0) => manipulate_op_net,
      y => mux_y_net_x0
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/snap_debug/bram"

entity bram_entity_663324a750 is
  port (
    addr: in std_logic_vector(10 downto 0); 
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    data_in: in std_logic_vector(127 downto 0); 
    we: in std_logic; 
    convert_addr_x0: out std_logic_vector(10 downto 0); 
    convert_din1_x0: out std_logic_vector(31 downto 0); 
    convert_we_x0: out std_logic
  );
end bram_entity_663324a750;

architecture structural of bram_entity_663324a750 is
  signal ce_1_sg_x675: std_logic;
  signal clk_1_sg_x675: std_logic;
  signal convert_addr_dout_net_x0: std_logic_vector(10 downto 0);
  signal convert_din1_dout_net_x0: std_logic_vector(31 downto 0);
  signal convert_din_dout_net: std_logic_vector(31 downto 0);
  signal convert_we_dout_net_x0: std_logic;
  signal enable_y_net_x1: std_logic_vector(10 downto 0);
  signal logical1_y_net_x0: std_logic;
  signal mux_y_net_x0: std_logic_vector(10 downto 0);
  signal reinterpret_output_port_net_x0: std_logic_vector(127 downto 0);

begin
  enable_y_net_x1 <= addr;
  ce_1_sg_x675 <= ce_1;
  clk_1_sg_x675 <= clk_1;
  reinterpret_output_port_net_x0 <= data_in;
  logical1_y_net_x0 <= we;
  convert_addr_x0 <= convert_addr_dout_net_x0;
  convert_din1_x0 <= convert_din1_dout_net_x0;
  convert_we_x0 <= convert_we_dout_net_x0;

  calc_add_0b96421a51: entity work.calc_add_entity_0b96421a51
    port map (
      ce_1 => ce_1_sg_x675,
      clk_1 => clk_1_sg_x675,
      in_x0 => enable_y_net_x1,
      out_x0 => mux_y_net_x0
    );

  convert_addr: entity work.xlconvert
    generic map (
      bool_conversion => 0,
      din_arith => 1,
      din_bin_pt => 0,
      din_width => 11,
      dout_arith => 1,
      dout_bin_pt => 0,
      dout_width => 11,
      latency => 0,
      overflow => xlWrap,
      quantization => xlTruncate
    )
    port map (
      ce => ce_1_sg_x675,
      clk => clk_1_sg_x675,
      clr => '0',
      din => mux_y_net_x0,
      en => "1",
      dout => convert_addr_dout_net_x0
    );

  convert_din: entity work.xlconvert
    generic map (
      bool_conversion => 0,
      din_arith => 1,
      din_bin_pt => 0,
      din_width => 128,
      dout_arith => 1,
      dout_bin_pt => 0,
      dout_width => 32,
      latency => 0,
      overflow => xlWrap,
      quantization => xlTruncate
    )
    port map (
      ce => ce_1_sg_x675,
      clk => clk_1_sg_x675,
      clr => '0',
      din => reinterpret_output_port_net_x0,
      en => "1",
      dout => convert_din_dout_net
    );

  convert_din1: entity work.xlconvert
    generic map (
      bool_conversion => 0,
      din_arith => 1,
      din_bin_pt => 0,
      din_width => 32,
      dout_arith => 1,
      dout_bin_pt => 0,
      dout_width => 32,
      latency => 0,
      overflow => xlWrap,
      quantization => xlTruncate
    )
    port map (
      ce => ce_1_sg_x675,
      clk => clk_1_sg_x675,
      clr => '0',
      din => convert_din_dout_net,
      en => "1",
      dout => convert_din1_dout_net_x0
    );

  convert_we: entity work.xlconvert
    generic map (
      bool_conversion => 0,
      din_arith => 1,
      din_bin_pt => 0,
      din_width => 1,
      dout_arith => 1,
      dout_bin_pt => 0,
      dout_width => 1,
      latency => 0,
      overflow => xlWrap,
      quantization => xlTruncate
    )
    port map (
      ce => ce_1_sg_x675,
      clk => clk_1_sg_x675,
      clr => '0',
      din(0) => logical1_y_net_x0,
      en => "1",
      dout(0) => convert_we_dout_net_x0
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/snap_debug/freeze_cntr"

entity freeze_cntr_entity_237822418c is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    en: in std_logic; 
    rst: in std_logic; 
    addr: out std_logic_vector(10 downto 0); 
    we: out std_logic
  );
end freeze_cntr_entity_237822418c;

architecture structural of freeze_cntr_entity_237822418c is
  signal ce_1_sg_x676: std_logic;
  signal clk_1_sg_x676: std_logic;
  signal counter3_op_net: std_logic_vector(11 downto 0);
  signal enable1_y_net: std_logic;
  signal enable_y_net_x2: std_logic_vector(10 downto 0);
  signal inverter1_op_net: std_logic;
  signal inverter_op_net: std_logic;
  signal logical1_y_net_x1: std_logic;
  signal logical5_y_net: std_logic;
  signal mux1_y_net_x0: std_logic;
  signal register_q_net_x0: std_logic;

begin
  ce_1_sg_x676 <= ce_1;
  clk_1_sg_x676 <= clk_1;
  mux1_y_net_x0 <= en;
  register_q_net_x0 <= rst;
  addr <= enable_y_net_x2;
  we <= logical1_y_net_x1;

  counter3: entity work.xlcounter_free_c09f12_01
    generic map (
      core_name0 => "cntr_11_0_ecb560ca58503876",
      op_arith => xlUnsigned,
      op_width => 12
    )
    port map (
      ce => ce_1_sg_x676,
      clk => clk_1_sg_x676,
      clr => '0',
      en(0) => logical5_y_net,
      rst(0) => register_q_net_x0,
      op => counter3_op_net
    );

  enable: entity work.xlslice
    generic map (
      new_lsb => 0,
      new_msb => 10,
      x_width => 12,
      y_width => 11
    )
    port map (
      x => counter3_op_net,
      y => enable_y_net_x2
    );

  enable1: entity work.xlslice
    generic map (
      new_lsb => 11,
      new_msb => 11,
      x_width => 12,
      y_width => 1
    )
    port map (
      x => counter3_op_net,
      y(0) => enable1_y_net
    );

  inverter: entity work.inverter_e5b38cca3b
    port map (
      ce => ce_1_sg_x676,
      clk => clk_1_sg_x676,
      clr => '0',
      ip(0) => register_q_net_x0,
      op(0) => inverter_op_net
    );

  inverter1: entity work.inverter_e5b38cca3b
    port map (
      ce => ce_1_sg_x676,
      clk => clk_1_sg_x676,
      clr => '0',
      ip(0) => enable1_y_net,
      op(0) => inverter1_op_net
    );

  logical1: entity work.logical_80f90b97d0
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0(0) => inverter_op_net,
      d1(0) => logical5_y_net,
      y(0) => logical1_y_net_x1
    );

  logical5: entity work.logical_80f90b97d0
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0(0) => mux1_y_net_x0,
      d1(0) => inverter1_op_net,
      y(0) => logical5_y_net
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/snap_debug"

entity snap_debug_entity_e25ad94b28 is
  port (
    c09f12_01_snap_debug_ctrl_user_data_out: in std_logic_vector(31 downto 0); 
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    din: in std_logic_vector(127 downto 0); 
    trig: in std_logic; 
    we: in std_logic; 
    addr: out std_logic_vector(31 downto 0); 
    bram: out std_logic_vector(10 downto 0); 
    bram_x0: out std_logic_vector(31 downto 0); 
    bram_x1: out std_logic
  );
end snap_debug_entity_e25ad94b28;

architecture structural of snap_debug_entity_e25ad94b28 is
  signal c09f12_01_snap_debug_ctrl_user_data_out_net_x0: std_logic_vector(31 downto 0);
  signal ce_1_sg_x678: std_logic;
  signal clk_1_sg_x678: std_logic;
  signal constant1_op_net: std_logic;
  signal constant2_op_net: std_logic;
  signal constant_op_net: std_logic;
  signal convert_addr_dout_net_x1: std_logic_vector(10 downto 0);
  signal convert_din1_dout_net_x1: std_logic_vector(31 downto 0);
  signal convert_dout_net_x1: std_logic_vector(31 downto 0);
  signal convert_we_dout_net_x1: std_logic;
  signal enable_y_net_x0: std_logic;
  signal enable_y_net_x2: std_logic_vector(10 downto 0);
  signal inverter_op_net: std_logic;
  signal logical1_y_net: std_logic;
  signal logical1_y_net_x1: std_logic;
  signal logical_y_net_x0: std_logic;
  signal mux1_y_net_x0: std_logic;
  signal mux2_y_net: std_logic;
  signal register1_q_net_x0: std_logic_vector(10 downto 0);
  signal register_q_net_x0: std_logic;
  signal reinterpret2_output_port_net_x7: std_logic_vector(127 downto 0);
  signal reinterpret_output_port_net_x0: std_logic_vector(127 downto 0);
  signal slice1_y_net_x7: std_logic;
  signal slice3_y_net_x7: std_logic;
  signal trig1_y_net: std_logic;
  signal valid_y_net: std_logic;

begin
  c09f12_01_snap_debug_ctrl_user_data_out_net_x0 <= c09f12_01_snap_debug_ctrl_user_data_out;
  ce_1_sg_x678 <= ce_1;
  clk_1_sg_x678 <= clk_1;
  reinterpret2_output_port_net_x7 <= din;
  slice1_y_net_x7 <= trig;
  slice3_y_net_x7 <= we;
  addr <= convert_dout_net_x1;
  bram <= convert_addr_dout_net_x1;
  bram_x0 <= convert_din1_dout_net_x1;
  bram_x1 <= convert_we_dout_net_x1;

  addr_e4463d4a0b: entity work.addr_entity_e4463d4a0b
    port map (
      ce_1 => ce_1_sg_x678,
      clk_1 => clk_1_sg_x678,
      reg_out => register1_q_net_x0,
      convert_x0 => convert_dout_net_x1
    );

  bram_663324a750: entity work.bram_entity_663324a750
    port map (
      addr => enable_y_net_x2,
      ce_1 => ce_1_sg_x678,
      clk_1 => clk_1_sg_x678,
      data_in => reinterpret_output_port_net_x0,
      we => logical1_y_net_x1,
      convert_addr_x0 => convert_addr_dout_net_x1,
      convert_din1_x0 => convert_din1_dout_net_x1,
      convert_we_x0 => convert_we_dout_net_x1
    );

  constant1: entity work.constant_6293007044
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op(0) => constant1_op_net
    );

  constant2: entity work.constant_6293007044
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op(0) => constant2_op_net
    );

  constant_x0: entity work.constant_6293007044
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op(0) => constant_op_net
    );

  enable: entity work.xlslice
    generic map (
      new_lsb => 0,
      new_msb => 0,
      x_width => 32,
      y_width => 1
    )
    port map (
      x => c09f12_01_snap_debug_ctrl_user_data_out_net_x0,
      y(0) => enable_y_net_x0
    );

  freeze_cntr_237822418c: entity work.freeze_cntr_entity_237822418c
    port map (
      ce_1 => ce_1_sg_x678,
      clk_1 => clk_1_sg_x678,
      en => mux1_y_net_x0,
      rst => register_q_net_x0,
      addr => enable_y_net_x2,
      we => logical1_y_net_x1
    );

  inverter: entity work.inverter_e5b38cca3b
    port map (
      ce => ce_1_sg_x678,
      clk => clk_1_sg_x678,
      clr => '0',
      ip(0) => logical_y_net_x0,
      op(0) => inverter_op_net
    );

  logical1: entity work.logical_80f90b97d0
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0(0) => mux2_y_net,
      d1(0) => inverter_op_net,
      y(0) => logical1_y_net
    );

  mux1: entity work.mux_d99e59b6d4
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0(0) => slice3_y_net_x7,
      d1(0) => constant2_op_net,
      sel(0) => valid_y_net,
      y(0) => mux1_y_net_x0
    );

  mux2: entity work.mux_d99e59b6d4
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0(0) => slice1_y_net_x7,
      d1(0) => constant1_op_net,
      sel(0) => trig1_y_net,
      y(0) => mux2_y_net
    );

  posedge_1a086dc6b6: entity work.posedge_entity_8c9b4fc2fb
    port map (
      ce_1 => ce_1_sg_x678,
      clk_1 => clk_1_sg_x678,
      in_x0 => enable_y_net_x0,
      out_x0 => logical_y_net_x0
    );

  register1: entity work.xlregister
    generic map (
      d_width => 11,
      init_value => b"00000000000"
    )
    port map (
      ce => ce_1_sg_x678,
      clk => clk_1_sg_x678,
      d => enable_y_net_x2,
      en(0) => logical1_y_net_x1,
      rst(0) => logical_y_net_x0,
      q => register1_q_net_x0
    );

  register_x0: entity work.xlregister
    generic map (
      d_width => 1,
      init_value => b"0"
    )
    port map (
      ce => ce_1_sg_x678,
      clk => clk_1_sg_x678,
      d(0) => constant_op_net,
      en(0) => logical_y_net_x0,
      rst(0) => logical1_y_net,
      q(0) => register_q_net_x0
    );

  reinterpret: entity work.reinterpret_28b9ecc6fc
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => reinterpret2_output_port_net_x7,
      output_port => reinterpret_output_port_net_x0
    );

  trig1: entity work.xlslice
    generic map (
      new_lsb => 1,
      new_msb => 1,
      x_width => 32,
      y_width => 1
    )
    port map (
      x => c09f12_01_snap_debug_ctrl_user_data_out_net_x0,
      y(0) => trig1_y_net
    );

  valid: entity work.xlslice
    generic map (
      new_lsb => 2,
      new_msb => 2,
      x_width => 32,
      y_width => 1
    )
    port map (
      x => c09f12_01_snap_debug_ctrl_user_data_out_net_x0,
      y(0) => valid_y_net
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/timing/rst_gen"

entity rst_gen_entity_a459e59885 is
  port (
    arm: in std_logic; 
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    din: in std_logic_vector(64 downto 0); 
    pps_in: in std_logic; 
    dout: out std_logic_vector(64 downto 0); 
    mrst: out std_logic
  );
end rst_gen_entity_a459e59885;

architecture structural of rst_gen_entity_a459e59885 is
  signal ce_1_sg_x679: std_logic;
  signal clk_1_sg_x679: std_logic;
  signal concat_y_net_x0: std_logic_vector(64 downto 0);
  signal constant_op_net: std_logic_vector(3 downto 0);
  signal counter_op_net: std_logic_vector(3 downto 0);
  signal delay3_q_net_x0: std_logic_vector(64 downto 0);
  signal edge_op_y_net_x1: std_logic;
  signal logical5_y_net_x1: std_logic;
  signal logical_y_net: std_logic;
  signal relational_op_net_x0: std_logic;

begin
  edge_op_y_net_x1 <= arm;
  ce_1_sg_x679 <= ce_1;
  clk_1_sg_x679 <= clk_1;
  concat_y_net_x0 <= din;
  logical5_y_net_x1 <= pps_in;
  dout <= delay3_q_net_x0;
  mrst <= relational_op_net_x0;

  constant_x0: entity work.constant_4c449dd556
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op => constant_op_net
    );

  counter: entity work.xlcounter_free_c09f12_01
    generic map (
      core_name0 => "cntr_11_0_14e5b6d5c91ed436",
      op_arith => xlUnsigned,
      op_width => 4
    )
    port map (
      ce => ce_1_sg_x679,
      clk => clk_1_sg_x679,
      clr => '0',
      en(0) => logical_y_net,
      rst(0) => edge_op_y_net_x1,
      op => counter_op_net
    );

  delay3: entity work.delay_15f5a81b1f
    port map (
      ce => ce_1_sg_x679,
      clk => clk_1_sg_x679,
      clr => '0',
      d => concat_y_net_x0,
      q => delay3_q_net_x0
    );

  logical: entity work.logical_80f90b97d0
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0(0) => logical5_y_net_x1,
      d1(0) => relational_op_net_x0,
      y(0) => logical_y_net
    );

  relational: entity work.relational_297b184c8e
    port map (
      a => counter_op_net,
      b => constant_op_net,
      ce => '0',
      clk => '0',
      clr => '0',
      op(0) => relational_op_net_x0
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/timing/sync_gen"

entity sync_gen_entity_4666f37e63 is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    rst: in std_logic; 
    sync_period: in std_logic_vector(30 downto 0); 
    sync: out std_logic
  );
end sync_gen_entity_4666f37e63;

architecture structural of sync_gen_entity_4666f37e63 is
  signal ce_1_sg_x682: std_logic;
  signal clk_1_sg_x682: std_logic;
  signal delay_q_net: std_logic;
  signal edge_op_y_net_x0: std_logic;
  signal edge_op_y_net_x1: std_logic;
  signal logical1_y_net_x0: std_logic;
  signal logical_y_net: std_logic;
  signal relational_op_net_x0: std_logic;
  signal relational_op_net_x2: std_logic;
  signal slice_y_net_x0: std_logic_vector(30 downto 0);
  signal sync_count_op_net: std_logic_vector(30 downto 0);

begin
  ce_1_sg_x682 <= ce_1;
  clk_1_sg_x682 <= clk_1;
  relational_op_net_x2 <= rst;
  slice_y_net_x0 <= sync_period;
  sync <= logical1_y_net_x0;

  delay: entity work.xldelay
    generic map (
      latency => 1,
      reg_retiming => 0,
      reset => 0,
      width => 1
    )
    port map (
      ce => ce_1_sg_x682,
      clk => clk_1_sg_x682,
      d(0) => relational_op_net_x2,
      en => '1',
      rst => '1',
      q(0) => delay_q_net
    );

  edge_detect1_17d2e1c55a: entity work.edge_detect_entity_cb656284f4
    port map (
      ce_1 => ce_1_sg_x682,
      clk_1 => clk_1_sg_x682,
      in_x0 => relational_op_net_x0,
      out_x0 => edge_op_y_net_x0
    );

  edge_detect2_3eb30ed69c: entity work.edge_detect1_entity_75cedd2450
    port map (
      ce_1 => ce_1_sg_x682,
      clk_1 => clk_1_sg_x682,
      in_x0 => relational_op_net_x2,
      out_x0 => edge_op_y_net_x1
    );

  logical: entity work.logical_444d3f5046
    port map (
      ce => ce_1_sg_x682,
      clk => clk_1_sg_x682,
      clr => '0',
      d0(0) => delay_q_net,
      d1(0) => edge_op_y_net_x0,
      y(0) => logical_y_net
    );

  logical1: entity work.logical_aacf6e1b0e
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0(0) => edge_op_y_net_x1,
      d1(0) => edge_op_y_net_x0,
      y(0) => logical1_y_net_x0
    );

  relational: entity work.relational_a0704033ef
    port map (
      a => sync_count_op_net,
      b => slice_y_net_x0,
      ce => ce_1_sg_x682,
      clk => clk_1_sg_x682,
      clr => '0',
      op(0) => relational_op_net_x0
    );

  sync_count: entity work.xlcounter_free_c09f12_01
    generic map (
      core_name0 => "cntr_11_0_85571b722fff644c",
      op_arith => xlUnsigned,
      op_width => 31
    )
    port map (
      ce => ce_1_sg_x682,
      clk => clk_1_sg_x682,
      clr => '0',
      en => "1",
      rst(0) => logical_y_net,
      op => sync_count_op_net
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/timing"

entity timing_entity_75b27e8515 is
  port (
    arm: in std_logic; 
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    data_in: in std_logic_vector(64 downto 0); 
    pps_in: in std_logic; 
    sync_period: in std_logic_vector(30 downto 0); 
    armed: out std_logic; 
    data_out: out std_logic_vector(64 downto 0); 
    sync: out std_logic
  );
end timing_entity_75b27e8515;

architecture structural of timing_entity_75b27e8515 is
  signal ce_1_sg_x683: std_logic;
  signal clk_1_sg_x683: std_logic;
  signal concat_y_net_x1: std_logic_vector(64 downto 0);
  signal delay1_q_net_x4: std_logic;
  signal delay2_q_net_x1: std_logic_vector(64 downto 0);
  signal delay3_q_net_x0: std_logic_vector(64 downto 0);
  signal delay_q_net_x0: std_logic;
  signal edge_op_y_net_x2: std_logic;
  signal logical1_y_net_x0: std_logic;
  signal logical5_y_net_x2: std_logic;
  signal relational_op_net_x2: std_logic;
  signal slice_y_net_x0: std_logic_vector(30 downto 0);
  signal sync_period_constant_op_net_x0: std_logic_vector(30 downto 0);

begin
  edge_op_y_net_x2 <= arm;
  ce_1_sg_x683 <= ce_1;
  clk_1_sg_x683 <= clk_1;
  concat_y_net_x1 <= data_in;
  logical5_y_net_x2 <= pps_in;
  sync_period_constant_op_net_x0 <= sync_period;
  armed <= delay_q_net_x0;
  data_out <= delay2_q_net_x1;
  sync <= delay1_q_net_x4;

  delay: entity work.delay_9f02caa990
    port map (
      ce => ce_1_sg_x683,
      clk => clk_1_sg_x683,
      clr => '0',
      d(0) => relational_op_net_x2,
      q(0) => delay_q_net_x0
    );

  delay1: entity work.delay_9f02caa990
    port map (
      ce => ce_1_sg_x683,
      clk => clk_1_sg_x683,
      clr => '0',
      d(0) => logical1_y_net_x0,
      q(0) => delay1_q_net_x4
    );

  delay2: entity work.delay_15f5a81b1f
    port map (
      ce => ce_1_sg_x683,
      clk => clk_1_sg_x683,
      clr => '0',
      d => delay3_q_net_x0,
      q => delay2_q_net_x1
    );

  rst_gen_a459e59885: entity work.rst_gen_entity_a459e59885
    port map (
      arm => edge_op_y_net_x2,
      ce_1 => ce_1_sg_x683,
      clk_1 => clk_1_sg_x683,
      din => concat_y_net_x1,
      pps_in => logical5_y_net_x2,
      dout => delay3_q_net_x0,
      mrst => relational_op_net_x2
    );

  slice: entity work.xlslice
    generic map (
      new_lsb => 0,
      new_msb => 30,
      x_width => 31,
      y_width => 31
    )
    port map (
      x => sync_period_constant_op_net_x0,
      y => slice_y_net_x0
    );

  sync_gen_4666f37e63: entity work.sync_gen_entity_4666f37e63
    port map (
      ce_1 => ce_1_sg_x683,
      clk_1 => clk_1_sg_x683,
      rst => relational_op_net_x2,
      sync_period => slice_y_net_x0,
      sync => logical1_y_net_x0
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/trig0/Subsystem1"

entity subsystem1_entity_761d3d4af3 is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    din: in std_logic_vector(7 downto 0); 
    thresh: in std_logic_vector(15 downto 0); 
    trig: out std_logic
  );
end subsystem1_entity_761d3d4af3;

architecture structural of subsystem1_entity_761d3d4af3 is
  signal ce_1_sg_x684: std_logic;
  signal clk_1_sg_x684: std_logic;
  signal mult_p_net_x0: std_logic_vector(15 downto 0);
  signal mult_p_net_x1: std_logic_vector(15 downto 0);
  signal reinterpret1_output_port_net_x0: std_logic_vector(7 downto 0);
  signal relational_op_net_x0: std_logic;

begin
  ce_1_sg_x684 <= ce_1;
  clk_1_sg_x684 <= clk_1;
  reinterpret1_output_port_net_x0 <= din;
  mult_p_net_x1 <= thresh;
  trig <= relational_op_net_x0;

  mult: entity work.mult_1f4d330bcc
    port map (
      a => reinterpret1_output_port_net_x0,
      b => reinterpret1_output_port_net_x0,
      ce => ce_1_sg_x684,
      clk => clk_1_sg_x684,
      clr => '0',
      p => mult_p_net_x0
    );

  relational: entity work.relational_6e942c7926
    port map (
      a => mult_p_net_x0,
      b => mult_p_net_x1,
      ce => ce_1_sg_x684,
      clk => clk_1_sg_x684,
      clr => '0',
      op(0) => relational_op_net_x0
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/trig0/decat1"

entity decat1_entity_b0939b337a is
  port (
    i1: in std_logic_vector(31 downto 0); 
    o1: out std_logic_vector(7 downto 0); 
    o2: out std_logic_vector(7 downto 0); 
    o3: out std_logic_vector(7 downto 0); 
    o4: out std_logic_vector(7 downto 0)
  );
end decat1_entity_b0939b337a;

architecture structural of decat1_entity_b0939b337a is
  signal reinterpret1_output_port_net_x1: std_logic_vector(7 downto 0);
  signal reinterpret2_output_port_net_x1: std_logic_vector(7 downto 0);
  signal reinterpret2_output_port_net_x5: std_logic_vector(31 downto 0);
  signal reinterpret3_output_port_net_x1: std_logic_vector(7 downto 0);
  signal reinterpret4_output_port_net_x1: std_logic_vector(7 downto 0);
  signal slice15_y_net: std_logic_vector(7 downto 0);
  signal slice16_y_net: std_logic_vector(7 downto 0);
  signal slice17_y_net: std_logic_vector(7 downto 0);
  signal slice9_y_net: std_logic_vector(7 downto 0);

begin
  reinterpret2_output_port_net_x5 <= i1;
  o1 <= reinterpret2_output_port_net_x1;
  o2 <= reinterpret1_output_port_net_x1;
  o3 <= reinterpret3_output_port_net_x1;
  o4 <= reinterpret4_output_port_net_x1;

  reinterpret1: entity work.reinterpret_4389dc89bf
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => slice16_y_net,
      output_port => reinterpret1_output_port_net_x1
    );

  reinterpret2: entity work.reinterpret_4389dc89bf
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => slice17_y_net,
      output_port => reinterpret2_output_port_net_x1
    );

  reinterpret3: entity work.reinterpret_4389dc89bf
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => slice15_y_net,
      output_port => reinterpret3_output_port_net_x1
    );

  reinterpret4: entity work.reinterpret_4389dc89bf
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => slice9_y_net,
      output_port => reinterpret4_output_port_net_x1
    );

  slice15: entity work.xlslice
    generic map (
      new_lsb => 8,
      new_msb => 15,
      x_width => 32,
      y_width => 8
    )
    port map (
      x => reinterpret2_output_port_net_x5,
      y => slice15_y_net
    );

  slice16: entity work.xlslice
    generic map (
      new_lsb => 16,
      new_msb => 23,
      x_width => 32,
      y_width => 8
    )
    port map (
      x => reinterpret2_output_port_net_x5,
      y => slice16_y_net
    );

  slice17: entity work.xlslice
    generic map (
      new_lsb => 24,
      new_msb => 31,
      x_width => 32,
      y_width => 8
    )
    port map (
      x => reinterpret2_output_port_net_x5,
      y => slice17_y_net
    );

  slice9: entity work.xlslice
    generic map (
      new_lsb => 0,
      new_msb => 7,
      x_width => 32,
      y_width => 8
    )
    port map (
      x => reinterpret2_output_port_net_x5,
      y => slice9_y_net
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/trig0"

entity trig0_entity_def9f75207 is
  port (
    adc_data: in std_logic_vector(31 downto 0); 
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    synci: in std_logic_vector(32 downto 0); 
    trig_pnt: in std_logic_vector(31 downto 0); 
    data: out std_logic_vector(31 downto 0); 
    synco: out std_logic_vector(32 downto 0); 
    trig: out std_logic
  );
end trig0_entity_def9f75207;

architecture structural of trig0_entity_def9f75207 is
  signal ce_1_sg_x688: std_logic;
  signal clk_1_sg_x688: std_logic;
  signal concat6_y_net_x0: std_logic_vector(32 downto 0);
  signal delay1_q_net_x1: std_logic_vector(31 downto 0);
  signal delay2_q_net_x1: std_logic_vector(32 downto 0);
  signal delay35_q_net_x0: std_logic_vector(31 downto 0);
  signal logical1_y_net_x2: std_logic;
  signal mult_p_net_x4: std_logic_vector(15 downto 0);
  signal reinterpret1_output_port_net_x1: std_logic_vector(7 downto 0);
  signal reinterpret2_output_port_net_x1: std_logic_vector(7 downto 0);
  signal reinterpret2_output_port_net_x6: std_logic_vector(31 downto 0);
  signal reinterpret3_output_port_net_x1: std_logic_vector(7 downto 0);
  signal reinterpret4_output_port_net: std_logic_vector(7 downto 0);
  signal reinterpret4_output_port_net_x1: std_logic_vector(7 downto 0);
  signal relational_op_net_x0: std_logic;
  signal relational_op_net_x1: std_logic;
  signal relational_op_net_x2: std_logic;
  signal relational_op_net_x3: std_logic;
  signal slice3_y_net: std_logic_vector(7 downto 0);

begin
  reinterpret2_output_port_net_x6 <= adc_data;
  ce_1_sg_x688 <= ce_1;
  clk_1_sg_x688 <= clk_1;
  concat6_y_net_x0 <= synci;
  delay35_q_net_x0 <= trig_pnt;
  data <= delay1_q_net_x1;
  synco <= delay2_q_net_x1;
  trig <= logical1_y_net_x2;

  decat1_b0939b337a: entity work.decat1_entity_b0939b337a
    port map (
      i1 => reinterpret2_output_port_net_x6,
      o1 => reinterpret2_output_port_net_x1,
      o2 => reinterpret1_output_port_net_x1,
      o3 => reinterpret3_output_port_net_x1,
      o4 => reinterpret4_output_port_net_x1
    );

  delay1: entity work.xldelay
    generic map (
      latency => 5,
      reg_retiming => 0,
      reset => 0,
      width => 32
    )
    port map (
      ce => ce_1_sg_x688,
      clk => clk_1_sg_x688,
      d => reinterpret2_output_port_net_x6,
      en => '1',
      rst => '1',
      q => delay1_q_net_x1
    );

  delay2: entity work.xldelay
    generic map (
      latency => 5,
      reg_retiming => 0,
      reset => 0,
      width => 33
    )
    port map (
      ce => ce_1_sg_x688,
      clk => clk_1_sg_x688,
      d => concat6_y_net_x0,
      en => '1',
      rst => '1',
      q => delay2_q_net_x1
    );

  logical1: entity work.logical_1cef476837
    port map (
      ce => ce_1_sg_x688,
      clk => clk_1_sg_x688,
      clr => '0',
      d0(0) => relational_op_net_x3,
      d1(0) => relational_op_net_x0,
      d2(0) => relational_op_net_x1,
      d3(0) => relational_op_net_x2,
      y(0) => logical1_y_net_x2
    );

  mult: entity work.mult_1f4d330bcc
    port map (
      a => reinterpret4_output_port_net,
      b => reinterpret4_output_port_net,
      ce => ce_1_sg_x688,
      clk => clk_1_sg_x688,
      clr => '0',
      p => mult_p_net_x4
    );

  reinterpret4: entity work.reinterpret_4389dc89bf
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => slice3_y_net,
      output_port => reinterpret4_output_port_net
    );

  slice3: entity work.xlslice
    generic map (
      new_lsb => 0,
      new_msb => 7,
      x_width => 32,
      y_width => 8
    )
    port map (
      x => delay35_q_net_x0,
      y => slice3_y_net
    );

  subsystem1_761d3d4af3: entity work.subsystem1_entity_761d3d4af3
    port map (
      ce_1 => ce_1_sg_x688,
      clk_1 => clk_1_sg_x688,
      din => reinterpret1_output_port_net_x1,
      thresh => mult_p_net_x4,
      trig => relational_op_net_x0
    );

  subsystem2_976f81216f: entity work.subsystem1_entity_761d3d4af3
    port map (
      ce_1 => ce_1_sg_x688,
      clk_1 => clk_1_sg_x688,
      din => reinterpret3_output_port_net_x1,
      thresh => mult_p_net_x4,
      trig => relational_op_net_x1
    );

  subsystem3_6c171c7ce2: entity work.subsystem1_entity_761d3d4af3
    port map (
      ce_1 => ce_1_sg_x688,
      clk_1 => clk_1_sg_x688,
      din => reinterpret4_output_port_net_x1,
      thresh => mult_p_net_x4,
      trig => relational_op_net_x2
    );

  subsystem5_1be93d09ae: entity work.subsystem1_entity_761d3d4af3
    port map (
      ce_1 => ce_1_sg_x688,
      clk_1 => clk_1_sg_x688,
      din => reinterpret2_output_port_net_x1,
      thresh => mult_p_net_x4,
      trig => relational_op_net_x3
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/trig1"

entity trig1_entity_891d75ae5b is
  port (
    adc_data: in std_logic_vector(31 downto 0); 
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    trig_pnt: in std_logic_vector(31 downto 0); 
    data: out std_logic_vector(31 downto 0); 
    trig: out std_logic
  );
end trig1_entity_891d75ae5b;

architecture structural of trig1_entity_891d75ae5b is
  signal ce_1_sg_x693: std_logic;
  signal clk_1_sg_x693: std_logic;
  signal delay1_q_net_x1: std_logic_vector(31 downto 0);
  signal delay35_q_net_x1: std_logic_vector(31 downto 0);
  signal logical1_y_net_x2: std_logic;
  signal mult_p_net_x4: std_logic_vector(15 downto 0);
  signal reinterpret1_output_port_net_x1: std_logic_vector(7 downto 0);
  signal reinterpret1_output_port_net_x7: std_logic_vector(31 downto 0);
  signal reinterpret2_output_port_net_x1: std_logic_vector(7 downto 0);
  signal reinterpret3_output_port_net_x1: std_logic_vector(7 downto 0);
  signal reinterpret4_output_port_net: std_logic_vector(7 downto 0);
  signal reinterpret4_output_port_net_x1: std_logic_vector(7 downto 0);
  signal relational_op_net_x0: std_logic;
  signal relational_op_net_x1: std_logic;
  signal relational_op_net_x2: std_logic;
  signal relational_op_net_x3: std_logic;
  signal slice3_y_net: std_logic_vector(7 downto 0);

begin
  reinterpret1_output_port_net_x7 <= adc_data;
  ce_1_sg_x693 <= ce_1;
  clk_1_sg_x693 <= clk_1;
  delay35_q_net_x1 <= trig_pnt;
  data <= delay1_q_net_x1;
  trig <= logical1_y_net_x2;

  decat1_2d3ffff654: entity work.decat1_entity_b0939b337a
    port map (
      i1 => reinterpret1_output_port_net_x7,
      o1 => reinterpret2_output_port_net_x1,
      o2 => reinterpret1_output_port_net_x1,
      o3 => reinterpret3_output_port_net_x1,
      o4 => reinterpret4_output_port_net_x1
    );

  delay1: entity work.xldelay
    generic map (
      latency => 5,
      reg_retiming => 0,
      reset => 0,
      width => 32
    )
    port map (
      ce => ce_1_sg_x693,
      clk => clk_1_sg_x693,
      d => reinterpret1_output_port_net_x7,
      en => '1',
      rst => '1',
      q => delay1_q_net_x1
    );

  logical1: entity work.logical_1cef476837
    port map (
      ce => ce_1_sg_x693,
      clk => clk_1_sg_x693,
      clr => '0',
      d0(0) => relational_op_net_x3,
      d1(0) => relational_op_net_x0,
      d2(0) => relational_op_net_x1,
      d3(0) => relational_op_net_x2,
      y(0) => logical1_y_net_x2
    );

  mult: entity work.mult_1f4d330bcc
    port map (
      a => reinterpret4_output_port_net,
      b => reinterpret4_output_port_net,
      ce => ce_1_sg_x693,
      clk => clk_1_sg_x693,
      clr => '0',
      p => mult_p_net_x4
    );

  reinterpret4: entity work.reinterpret_4389dc89bf
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      input_port => slice3_y_net,
      output_port => reinterpret4_output_port_net
    );

  slice3: entity work.xlslice
    generic map (
      new_lsb => 0,
      new_msb => 7,
      x_width => 32,
      y_width => 8
    )
    port map (
      x => delay35_q_net_x1,
      y => slice3_y_net
    );

  subsystem1_462e93dec5: entity work.subsystem1_entity_761d3d4af3
    port map (
      ce_1 => ce_1_sg_x693,
      clk_1 => clk_1_sg_x693,
      din => reinterpret1_output_port_net_x1,
      thresh => mult_p_net_x4,
      trig => relational_op_net_x0
    );

  subsystem2_27bc6f4f76: entity work.subsystem1_entity_761d3d4af3
    port map (
      ce_1 => ce_1_sg_x693,
      clk_1 => clk_1_sg_x693,
      din => reinterpret3_output_port_net_x1,
      thresh => mult_p_net_x4,
      trig => relational_op_net_x1
    );

  subsystem3_1aa1690e7f: entity work.subsystem1_entity_761d3d4af3
    port map (
      ce_1 => ce_1_sg_x693,
      clk_1 => clk_1_sg_x693,
      din => reinterpret4_output_port_net_x1,
      thresh => mult_p_net_x4,
      trig => relational_op_net_x2
    );

  subsystem5_a1210e6dd0: entity work.subsystem1_entity_761d3d4af3
    port map (
      ce_1 => ce_1_sg_x693,
      clk_1 => clk_1_sg_x693,
      din => reinterpret2_output_port_net_x1,
      thresh => mult_p_net_x4,
      trig => relational_op_net_x3
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/xaui_pack0/neg_edge_delay"

entity neg_edge_delay_entity_668f7e6187 is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    in_x0: in std_logic; 
    out_x0: out std_logic
  );
end neg_edge_delay_entity_668f7e6187;

architecture structural of neg_edge_delay_entity_668f7e6187 is
  signal ce_1_sg_x703: std_logic;
  signal clk_1_sg_x703: std_logic;
  signal constant5_op_net: std_logic_vector(2 downto 0);
  signal counter3_op_net: std_logic_vector(2 downto 0);
  signal register0_q_net_x1: std_logic;
  signal relational5_op_net_x0: std_logic;

begin
  ce_1_sg_x703 <= ce_1;
  clk_1_sg_x703 <= clk_1;
  register0_q_net_x1 <= in_x0;
  out_x0 <= relational5_op_net_x0;

  constant5: entity work.constant_4e64dfaf34
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op => constant5_op_net
    );

  counter3: entity work.xlcounter_free_c09f12_01
    generic map (
      core_name0 => "cntr_11_0_514048f9c72a30b1",
      op_arith => xlUnsigned,
      op_width => 3
    )
    port map (
      ce => ce_1_sg_x703,
      clk => clk_1_sg_x703,
      clr => '0',
      en(0) => relational5_op_net_x0,
      rst(0) => register0_q_net_x1,
      op => counter3_op_net
    );

  relational5: entity work.relational_47b317dab6
    port map (
      a => counter3_op_net,
      b => constant5_op_net,
      ce => '0',
      clk => '0',
      clr => '0',
      op(0) => relational5_op_net_x0
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/xaui_pack0/oob_decode"

entity oob_decode_entity_1e541f49c9 is
  port (
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    oob_in: in std_logic_vector(7 downto 0); 
    valid_in: in std_logic; 
    eof: out std_logic; 
    header: out std_logic; 
    packet_data: out std_logic
  );
end oob_decode_entity_1e541f49c9;

architecture structural of oob_decode_entity_1e541f49c9 is
  signal ce_1_sg_x704: std_logic;
  signal clk_1_sg_x704: std_logic;
  signal inverter1_op_net: std_logic;
  signal inverter5_op_net: std_logic;
  signal logical1_y_net_x0: std_logic;
  signal logical2_y_net_x2: std_logic;
  signal logical3_y_net_x1: std_logic;
  signal logical_y_net_x0: std_logic;
  signal register0_q_net_x1: std_logic_vector(7 downto 0);
  signal slice1_y_net: std_logic;
  signal slice2_y_net: std_logic;
  signal slice6_y_net: std_logic;

begin
  ce_1_sg_x704 <= ce_1;
  clk_1_sg_x704 <= clk_1;
  register0_q_net_x1 <= oob_in;
  logical_y_net_x0 <= valid_in;
  eof <= logical2_y_net_x2;
  header <= logical3_y_net_x1;
  packet_data <= logical1_y_net_x0;

  inverter1: entity work.inverter_e5b38cca3b
    port map (
      ce => ce_1_sg_x704,
      clk => clk_1_sg_x704,
      clr => '0',
      ip(0) => slice2_y_net,
      op(0) => inverter1_op_net
    );

  inverter5: entity work.inverter_e5b38cca3b
    port map (
      ce => ce_1_sg_x704,
      clk => clk_1_sg_x704,
      clr => '0',
      ip(0) => slice6_y_net,
      op(0) => inverter5_op_net
    );

  logical1: entity work.logical_954ee29728
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0(0) => inverter5_op_net,
      d1(0) => logical_y_net_x0,
      d2(0) => inverter1_op_net,
      y(0) => logical1_y_net_x0
    );

  logical2: entity work.logical_80f90b97d0
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0(0) => slice1_y_net,
      d1(0) => logical_y_net_x0,
      y(0) => logical2_y_net_x2
    );

  logical3: entity work.logical_80f90b97d0
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0(0) => slice2_y_net,
      d1(0) => logical_y_net_x0,
      y(0) => logical3_y_net_x1
    );

  slice1: entity work.xlslice
    generic map (
      new_lsb => 2,
      new_msb => 2,
      x_width => 8,
      y_width => 1
    )
    port map (
      x => register0_q_net_x1,
      y(0) => slice1_y_net
    );

  slice2: entity work.xlslice
    generic map (
      new_lsb => 0,
      new_msb => 0,
      x_width => 8,
      y_width => 1
    )
    port map (
      x => register0_q_net_x1,
      y(0) => slice2_y_net
    );

  slice6: entity work.xlslice
    generic map (
      new_lsb => 3,
      new_msb => 3,
      x_width => 8,
      y_width => 1
    )
    port map (
      x => register0_q_net_x1,
      y(0) => slice6_y_net
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01/xaui_pack0"

entity xaui_pack0_entity_ebab7cc6d0 is
  port (
    base_ip: in std_logic_vector(31 downto 0); 
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    din: in std_logic_vector(63 downto 0); 
    linkdown_in: in std_logic; 
    oob: in std_logic_vector(7 downto 0); 
    valid_in: in std_logic; 
    dest_ip: out std_logic_vector(31 downto 0); 
    discard: out std_logic; 
    dout: out std_logic_vector(63 downto 0); 
    eof: out std_logic; 
    valid_out: out std_logic
  );
end xaui_pack0_entity_ebab7cc6d0;

architecture structural of xaui_pack0_entity_ebab7cc6d0 is
  signal ce_1_sg_x705: std_logic;
  signal clk_1_sg_x705: std_logic;
  signal concat6_y_net_x0: std_logic_vector(31 downto 0);
  signal constant2_op_net: std_logic_vector(6 downto 0);
  signal convert_dout_net: std_logic;
  signal delay37_q_net_x0: std_logic_vector(31 downto 0);
  signal inverter1_op_net: std_logic;
  signal inverter_op_net: std_logic;
  signal logical1_y_net_x1: std_logic;
  signal logical1_y_net_x2: std_logic;
  signal logical2_y_net_x0: std_logic;
  signal logical2_y_net_x2: std_logic;
  signal logical3_y_net_x1: std_logic;
  signal logical_y_net_x0: std_logic;
  signal mux1_y_net_x0: std_logic_vector(63 downto 0);
  signal payload_cnt_op_net: std_logic_vector(6 downto 0);
  signal register0_q_net_x10: std_logic;
  signal register0_q_net_x12: std_logic;
  signal register0_q_net_x13: std_logic_vector(63 downto 0);
  signal register0_q_net_x14: std_logic_vector(7 downto 0);
  signal register0_q_net_x15: std_logic;
  signal register0_q_net_x16: std_logic;
  signal register0_q_net_x17: std_logic_vector(63 downto 0);
  signal register0_q_net_x18: std_logic_vector(31 downto 0);
  signal register0_q_net_x19: std_logic;
  signal register0_q_net_x4: std_logic_vector(63 downto 0);
  signal register0_q_net_x5: std_logic;
  signal register0_q_net_x8: std_logic;
  signal register0_q_net_x9: std_logic;
  signal register1_q_net: std_logic_vector(63 downto 0);
  signal register5_q_net_x1: std_logic;
  signal register_q_net: std_logic_vector(3 downto 0);
  signal relational1_op_net: std_logic;
  signal relational5_op_net_x0: std_logic;
  signal slice11_y_net: std_logic_vector(28 downto 0);
  signal slice4_y_net: std_logic_vector(3 downto 0);
  signal slice7_y_net: std_logic_vector(2 downto 0);

begin
  delay37_q_net_x0 <= base_ip;
  ce_1_sg_x705 <= ce_1;
  clk_1_sg_x705 <= clk_1;
  register0_q_net_x13 <= din;
  register0_q_net_x16 <= linkdown_in;
  register0_q_net_x14 <= oob;
  register0_q_net_x15 <= valid_in;
  dest_ip <= register0_q_net_x18;
  discard <= register5_q_net_x1;
  dout <= register0_q_net_x17;
  eof <= logical1_y_net_x2;
  valid_out <= register0_q_net_x19;

  concat6: entity work.concat_397b8dc5c3
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      in0 => slice11_y_net,
      in1 => slice7_y_net,
      y => concat6_y_net_x0
    );

  constant2: entity work.constant_473db002f8
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op => constant2_op_net
    );

  convert: entity work.xlconvert
    generic map (
      bool_conversion => 0,
      din_arith => 1,
      din_bin_pt => 0,
      din_width => 1,
      dout_arith => 1,
      dout_bin_pt => 0,
      dout_width => 1,
      latency => 0,
      overflow => xlWrap,
      quantization => xlTruncate
    )
    port map (
      ce => ce_1_sg_x705,
      clk => clk_1_sg_x705,
      clr => '0',
      din(0) => register0_q_net_x9,
      en => "1",
      dout(0) => convert_dout_net
    );

  delay10_550f6ae361: entity work.delay3_entity_1a1c4e6264
    port map (
      ce_1 => ce_1_sg_x705,
      clk_1 => clk_1_sg_x705,
      d => mux1_y_net_x0,
      q => register0_q_net_x17
    );

  delay11_12d6774927: entity work.delay10_entity_8181a66134
    port map (
      ce_1 => ce_1_sg_x705,
      clk_1 => clk_1_sg_x705,
      d => concat6_y_net_x0,
      q => register0_q_net_x18
    );

  delay1_a10eb1dda2: entity work.delay11_entity_c2a06abd76
    port map (
      ce_1 => ce_1_sg_x705,
      clk_1 => clk_1_sg_x705,
      d => logical2_y_net_x0,
      q => register0_q_net_x5
    );

  delay2_0f506f8e22: entity work.delay11_entity_c2a06abd76
    port map (
      ce_1 => ce_1_sg_x705,
      clk_1 => clk_1_sg_x705,
      d => logical2_y_net_x2,
      q => register0_q_net_x8
    );

  delay3_abdffc720d: entity work.delay11_entity_c2a06abd76
    port map (
      ce_1 => ce_1_sg_x705,
      clk_1 => clk_1_sg_x705,
      d => logical3_y_net_x1,
      q => register0_q_net_x9
    );

  delay4_4321f85336: entity work.delay11_entity_c2a06abd76
    port map (
      ce_1 => ce_1_sg_x705,
      clk_1 => clk_1_sg_x705,
      d => logical2_y_net_x2,
      q => register0_q_net_x10
    );

  delay6_d627d8a13a: entity work.delay11_entity_c2a06abd76
    port map (
      ce_1 => ce_1_sg_x705,
      clk_1 => clk_1_sg_x705,
      d => register0_q_net_x5,
      q => register0_q_net_x19
    );

  delay7_96d4554068: entity work.delay11_entity_c2a06abd76
    port map (
      ce_1 => ce_1_sg_x705,
      clk_1 => clk_1_sg_x705,
      d => register0_q_net_x8,
      q => register0_q_net_x12
    );

  delay_d38b8a8bd4: entity work.delay3_entity_1a1c4e6264
    port map (
      ce_1 => ce_1_sg_x705,
      clk_1 => clk_1_sg_x705,
      d => register0_q_net_x13,
      q => register0_q_net_x4
    );

  inverter: entity work.inverter_e5b38cca3b
    port map (
      ce => ce_1_sg_x705,
      clk => clk_1_sg_x705,
      clr => '0',
      ip(0) => relational5_op_net_x0,
      op(0) => inverter_op_net
    );

  inverter1: entity work.inverter_e5b38cca3b
    port map (
      ce => ce_1_sg_x705,
      clk => clk_1_sg_x705,
      clr => '0',
      ip(0) => register5_q_net_x1,
      op(0) => inverter1_op_net
    );

  logical: entity work.logical_80f90b97d0
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0(0) => register0_q_net_x15,
      d1(0) => inverter_op_net,
      y(0) => logical_y_net_x0
    );

  logical1: entity work.logical_80f90b97d0
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0(0) => register0_q_net_x12,
      d1(0) => inverter1_op_net,
      y(0) => logical1_y_net_x2
    );

  logical2: entity work.logical_aacf6e1b0e
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0(0) => logical3_y_net_x1,
      d1(0) => logical1_y_net_x1,
      y(0) => logical2_y_net_x0
    );

  mux1: entity work.mux_dc8b84fd59
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0 => register0_q_net_x4,
      d1 => register1_q_net,
      sel(0) => convert_dout_net,
      y => mux1_y_net_x0
    );

  neg_edge_delay_668f7e6187: entity work.neg_edge_delay_entity_668f7e6187
    port map (
      ce_1 => ce_1_sg_x705,
      clk_1 => clk_1_sg_x705,
      in_x0 => register0_q_net_x16,
      out_x0 => relational5_op_net_x0
    );

  oob_decode_1e541f49c9: entity work.oob_decode_entity_1e541f49c9
    port map (
      ce_1 => ce_1_sg_x705,
      clk_1 => clk_1_sg_x705,
      oob_in => register0_q_net_x14,
      valid_in => logical_y_net_x0,
      eof => logical2_y_net_x2,
      header => logical3_y_net_x1,
      packet_data => logical1_y_net_x1
    );

  payload_cnt: entity work.xlcounter_free_c09f12_01
    generic map (
      core_name0 => "cntr_11_0_aeada998ec385fcd",
      op_arith => xlUnsigned,
      op_width => 7
    )
    port map (
      ce => ce_1_sg_x705,
      clk => clk_1_sg_x705,
      clr => '0',
      en(0) => logical1_y_net_x1,
      rst(0) => logical3_y_net_x1,
      op => payload_cnt_op_net
    );

  register1: entity work.xlregister
    generic map (
      d_width => 64,
      init_value => b"0000000000000000000000000000000000000000000000000000000000000000"
    )
    port map (
      ce => ce_1_sg_x705,
      clk => clk_1_sg_x705,
      d => register0_q_net_x13,
      en(0) => logical3_y_net_x1,
      rst => "0",
      q => register1_q_net
    );

  register5: entity work.xlregister
    generic map (
      d_width => 1,
      init_value => b"0"
    )
    port map (
      ce => ce_1_sg_x705,
      clk => clk_1_sg_x705,
      d(0) => relational1_op_net,
      en(0) => register0_q_net_x10,
      rst => "0",
      q(0) => register5_q_net_x1
    );

  register_x0: entity work.xlregister
    generic map (
      d_width => 4,
      init_value => b"0000"
    )
    port map (
      ce => ce_1_sg_x705,
      clk => clk_1_sg_x705,
      d => slice4_y_net,
      en(0) => logical3_y_net_x1,
      rst => "0",
      q => register_q_net
    );

  relational1: entity work.relational_23065a6aa3
    port map (
      a => payload_cnt_op_net,
      b => constant2_op_net,
      ce => '0',
      clk => '0',
      clr => '0',
      op(0) => relational1_op_net
    );

  slice11: entity work.xlslice
    generic map (
      new_lsb => 3,
      new_msb => 31,
      x_width => 32,
      y_width => 29
    )
    port map (
      x => delay37_q_net_x0,
      y => slice11_y_net
    );

  slice4: entity work.xlslice
    generic map (
      new_lsb => 24,
      new_msb => 27,
      x_width => 64,
      y_width => 4
    )
    port map (
      x => register0_q_net_x13,
      y => slice4_y_net
    );

  slice7: entity work.xlslice
    generic map (
      new_lsb => 1,
      new_msb => 3,
      x_width => 4,
      y_width => 3
    )
    port map (
      x => register_q_net,
      y => slice7_y_net
    );

end structural;
library IEEE;
use IEEE.std_logic_1164.all;
use work.conv_pkg.all;

-- Generated from Simulink block "c09f12_01"

entity c09f12_01 is
  port (
    c09f12_01_a0_fd0_user_data_out: in std_logic_vector(31 downto 0); 
    c09f12_01_a0_fd1_user_data_out: in std_logic_vector(31 downto 0); 
    c09f12_01_a1_fd0_user_data_out: in std_logic_vector(31 downto 0); 
    c09f12_01_a1_fd1_user_data_out: in std_logic_vector(31 downto 0); 
    c09f12_01_adc_ctrl0_user_data_out: in std_logic_vector(31 downto 0); 
    c09f12_01_adc_ctrl1_user_data_out: in std_logic_vector(31 downto 0); 
    c09f12_01_adc_snap0_bram_data_out: in std_logic_vector(31 downto 0); 
    c09f12_01_adc_snap0_ctrl_user_data_out: in std_logic_vector(31 downto 0); 
    c09f12_01_adc_snap0_trig_offset_user_data_out: in std_logic_vector(31 downto 0); 
    c09f12_01_adc_snap1_bram_data_out: in std_logic_vector(31 downto 0); 
    c09f12_01_adc_snap1_ctrl_user_data_out: in std_logic_vector(31 downto 0); 
    c09f12_01_adc_snap1_trig_offset_user_data_out: in std_logic_vector(31 downto 0); 
    c09f12_01_board_id_user_data_out: in std_logic_vector(31 downto 0); 
    c09f12_01_coarse_ctrl_user_data_out: in std_logic_vector(31 downto 0); 
    c09f12_01_coarse_delay0_user_data_out: in std_logic_vector(31 downto 0); 
    c09f12_01_coarse_delay1_user_data_out: in std_logic_vector(31 downto 0); 
    c09f12_01_control_user_data_out: in std_logic_vector(31 downto 0); 
    c09f12_01_eq0_data_out: in std_logic_vector(31 downto 0); 
    c09f12_01_eq1_data_out: in std_logic_vector(31 downto 0); 
    c09f12_01_fine_ctrl_user_data_out: in std_logic_vector(31 downto 0); 
    c09f12_01_gbe0_led_rx: in std_logic; 
    c09f12_01_gbe0_led_tx: in std_logic; 
    c09f12_01_gbe0_led_up: in std_logic; 
    c09f12_01_gbe0_rx_bad_frame: in std_logic; 
    c09f12_01_gbe0_rx_data: in std_logic_vector(63 downto 0); 
    c09f12_01_gbe0_rx_end_of_frame: in std_logic; 
    c09f12_01_gbe0_rx_overrun: in std_logic; 
    c09f12_01_gbe0_rx_source_ip: in std_logic_vector(31 downto 0); 
    c09f12_01_gbe0_rx_source_port: in std_logic_vector(15 downto 0); 
    c09f12_01_gbe0_rx_valid: in std_logic; 
    c09f12_01_gbe0_tx_afull: in std_logic; 
    c09f12_01_gbe0_tx_overflow: in std_logic; 
    c09f12_01_gbe_ip0_user_data_out: in std_logic_vector(31 downto 0); 
    c09f12_01_gbe_port_user_data_out: in std_logic_vector(31 downto 0); 
    c09f12_01_katadc0_user_data_valid: in std_logic; 
    c09f12_01_katadc0_user_datai0: in std_logic_vector(7 downto 0); 
    c09f12_01_katadc0_user_datai1: in std_logic_vector(7 downto 0); 
    c09f12_01_katadc0_user_datai2: in std_logic_vector(7 downto 0); 
    c09f12_01_katadc0_user_datai3: in std_logic_vector(7 downto 0); 
    c09f12_01_katadc0_user_dataq0: in std_logic_vector(7 downto 0); 
    c09f12_01_katadc0_user_dataq1: in std_logic_vector(7 downto 0); 
    c09f12_01_katadc0_user_dataq2: in std_logic_vector(7 downto 0); 
    c09f12_01_katadc0_user_dataq3: in std_logic_vector(7 downto 0); 
    c09f12_01_katadc0_user_outofrange0: in std_logic; 
    c09f12_01_katadc0_user_outofrange1: in std_logic; 
    c09f12_01_katadc0_user_sync0: in std_logic; 
    c09f12_01_katadc0_user_sync1: in std_logic; 
    c09f12_01_katadc0_user_sync2: in std_logic; 
    c09f12_01_katadc0_user_sync3: in std_logic; 
    c09f12_01_ld_time_lsw0_user_data_out: in std_logic_vector(31 downto 0); 
    c09f12_01_ld_time_lsw1_user_data_out: in std_logic_vector(31 downto 0); 
    c09f12_01_ld_time_msw0_user_data_out: in std_logic_vector(31 downto 0); 
    c09f12_01_ld_time_msw1_user_data_out: in std_logic_vector(31 downto 0); 
    c09f12_01_qdr_ct_qdr_ack: in std_logic; 
    c09f12_01_qdr_ct_qdr_cal_fail: in std_logic; 
    c09f12_01_qdr_ct_qdr_data_out: in std_logic_vector(35 downto 0); 
    c09f12_01_qdr_ct_qdr_phy_ready: in std_logic; 
    c09f12_01_snap_debug_bram_data_out: in std_logic_vector(31 downto 0); 
    c09f12_01_snap_debug_ctrl_user_data_out: in std_logic_vector(31 downto 0); 
    c09f12_01_trig_level_user_data_out: in std_logic_vector(31 downto 0); 
    ce_1: in std_logic; 
    clk_1: in std_logic; 
    c09f12_01_adc_snap0_bram_addr: out std_logic_vector(9 downto 0); 
    c09f12_01_adc_snap0_bram_data_in: out std_logic_vector(31 downto 0); 
    c09f12_01_adc_snap0_bram_we: out std_logic; 
    c09f12_01_adc_snap0_status_user_data_in: out std_logic_vector(31 downto 0); 
    c09f12_01_adc_snap0_tr_en_cnt_user_data_in: out std_logic_vector(31 downto 0); 
    c09f12_01_adc_snap0_val_user_data_in: out std_logic_vector(31 downto 0); 
    c09f12_01_adc_snap1_bram_addr: out std_logic_vector(9 downto 0); 
    c09f12_01_adc_snap1_bram_data_in: out std_logic_vector(31 downto 0); 
    c09f12_01_adc_snap1_bram_we: out std_logic; 
    c09f12_01_adc_snap1_status_user_data_in: out std_logic_vector(31 downto 0); 
    c09f12_01_adc_snap1_tr_en_cnt_user_data_in: out std_logic_vector(31 downto 0); 
    c09f12_01_adc_snap1_val_user_data_in: out std_logic_vector(31 downto 0); 
    c09f12_01_adc_sum_sq0_user_data_in: out std_logic_vector(31 downto 0); 
    c09f12_01_adc_sum_sq1_user_data_in: out std_logic_vector(31 downto 0); 
    c09f12_01_clk_frequency_user_data_in: out std_logic_vector(31 downto 0); 
    c09f12_01_delay_tr_status0_user_data_in: out std_logic_vector(31 downto 0); 
    c09f12_01_delay_tr_status1_user_data_in: out std_logic_vector(31 downto 0); 
    c09f12_01_eq0_addr: out std_logic_vector(11 downto 0); 
    c09f12_01_eq0_data_in: out std_logic_vector(31 downto 0); 
    c09f12_01_eq0_we: out std_logic; 
    c09f12_01_eq1_addr: out std_logic_vector(11 downto 0); 
    c09f12_01_eq1_data_in: out std_logic_vector(31 downto 0); 
    c09f12_01_eq1_we: out std_logic; 
    c09f12_01_fstatus0_user_data_in: out std_logic_vector(31 downto 0); 
    c09f12_01_fstatus1_user_data_in: out std_logic_vector(31 downto 0); 
    c09f12_01_gbe0_rst: out std_logic; 
    c09f12_01_gbe0_rx_ack: out std_logic; 
    c09f12_01_gbe0_rx_overrun_ack: out std_logic; 
    c09f12_01_gbe0_tx_data: out std_logic_vector(63 downto 0); 
    c09f12_01_gbe0_tx_dest_ip: out std_logic_vector(31 downto 0); 
    c09f12_01_gbe0_tx_dest_port: out std_logic_vector(15 downto 0); 
    c09f12_01_gbe0_tx_end_of_frame: out std_logic; 
    c09f12_01_gbe0_tx_valid: out std_logic; 
    c09f12_01_gbe_tx_cnt0_user_data_in: out std_logic_vector(31 downto 0); 
    c09f12_01_gbe_tx_err_cnt0_user_data_in: out std_logic_vector(31 downto 0); 
    c09f12_01_katadc0_gain_load: out std_logic; 
    c09f12_01_katadc0_gain_value: out std_logic_vector(13 downto 0); 
    c09f12_01_leds_roach_gpioa0_gateway: out std_logic; 
    c09f12_01_leds_roach_gpioa1_gateway: out std_logic; 
    c09f12_01_leds_roach_gpioa2_gateway: out std_logic; 
    c09f12_01_leds_roach_gpioa3_gateway: out std_logic; 
    c09f12_01_leds_roach_gpioa4_gateway: out std_logic; 
    c09f12_01_leds_roach_gpioa5_gateway: out std_logic; 
    c09f12_01_leds_roach_gpioa6_gateway: out std_logic; 
    c09f12_01_leds_roach_gpioa7_gateway: out std_logic; 
    c09f12_01_leds_roach_gpioa_oe_gateway: out std_logic; 
    c09f12_01_leds_roach_led0_gateway: out std_logic; 
    c09f12_01_leds_roach_led1_gateway: out std_logic; 
    c09f12_01_leds_roach_led2_gateway: out std_logic; 
    c09f12_01_leds_roach_led3_gateway: out std_logic; 
    c09f12_01_mcount_lsw_user_data_in: out std_logic_vector(31 downto 0); 
    c09f12_01_mcount_msw_user_data_in: out std_logic_vector(31 downto 0); 
    c09f12_01_pps_count_user_data_in: out std_logic_vector(31 downto 0); 
    c09f12_01_qdr_ct_qdr_address: out std_logic_vector(31 downto 0); 
    c09f12_01_qdr_ct_qdr_be: out std_logic_vector(3 downto 0); 
    c09f12_01_qdr_ct_qdr_data_in: out std_logic_vector(35 downto 0); 
    c09f12_01_qdr_ct_qdr_rd_en: out std_logic; 
    c09f12_01_qdr_ct_qdr_wr_en: out std_logic; 
    c09f12_01_rcs_app_user_data_in: out std_logic_vector(31 downto 0); 
    c09f12_01_rcs_lib_user_data_in: out std_logic_vector(31 downto 0); 
    c09f12_01_rcs_user_user_data_in: out std_logic_vector(31 downto 0); 
    c09f12_01_snap_debug_addr_user_data_in: out std_logic_vector(31 downto 0); 
    c09f12_01_snap_debug_bram_addr: out std_logic_vector(10 downto 0); 
    c09f12_01_snap_debug_bram_data_in: out std_logic_vector(31 downto 0); 
    c09f12_01_snap_debug_bram_we: out std_logic; 
    gateway_out: out std_logic; 
    gateway_out1: out std_logic_vector(25 downto 0); 
    gateway_out1_x0: out std_logic_vector(25 downto 0); 
    gateway_out1_x1: out std_logic_vector(25 downto 0); 
    gateway_out1_x2: out std_logic_vector(25 downto 0); 
    gateway_out1_x3: out std_logic_vector(25 downto 0); 
    gateway_out1_x4: out std_logic_vector(25 downto 0); 
    gateway_out1_x5: out std_logic_vector(25 downto 0); 
    gateway_out1_x6: out std_logic_vector(25 downto 0); 
    gateway_out2: out std_logic; 
    gateway_out2_x0: out std_logic; 
    gateway_out2_x1: out std_logic; 
    gateway_out2_x2: out std_logic; 
    gateway_out2_x3: out std_logic; 
    gateway_out2_x4: out std_logic; 
    gateway_out2_x5: out std_logic; 
    gateway_out2_x6: out std_logic; 
    gateway_out_x0: out std_logic; 
    gateway_out_x1: out std_logic; 
    gateway_out_x2: out std_logic; 
    gateway_out_x3: out std_logic; 
    gateway_out_x4: out std_logic; 
    gateway_out_x5: out std_logic; 
    gateway_out_x6: out std_logic; 
    gateway_t1: out std_logic_vector(7 downto 0); 
    gateway_t1_x0: out std_logic_vector(7 downto 0); 
    gateway_t1_x1: out std_logic_vector(7 downto 0); 
    gateway_t1_x2: out std_logic_vector(7 downto 0); 
    gateway_t1_x3: out std_logic_vector(7 downto 0); 
    gateway_t1_x4: out std_logic_vector(7 downto 0); 
    gateway_t1_x5: out std_logic_vector(7 downto 0); 
    gateway_t1_x6: out std_logic_vector(7 downto 0); 
    gateway_t2: out std_logic; 
    gateway_t2_x0: out std_logic; 
    gateway_t2_x1: out std_logic; 
    gateway_t2_x2: out std_logic; 
    gateway_t2_x3: out std_logic; 
    gateway_t2_x4: out std_logic; 
    gateway_t2_x5: out std_logic; 
    gateway_t2_x6: out std_logic; 
    gateway_t3: out std_logic_vector(8 downto 0); 
    gateway_t3_x0: out std_logic_vector(8 downto 0); 
    gateway_t3_x1: out std_logic_vector(8 downto 0); 
    gateway_t3_x2: out std_logic_vector(8 downto 0); 
    gateway_t3_x3: out std_logic_vector(8 downto 0); 
    gateway_t3_x4: out std_logic_vector(8 downto 0); 
    gateway_t3_x5: out std_logic_vector(8 downto 0); 
    gateway_t3_x6: out std_logic_vector(8 downto 0)
  );
end c09f12_01;

architecture structural of c09f12_01 is
  attribute core_generation_info: string;
  attribute core_generation_info of structural : architecture is "c09f12_01,sysgen_core,{clock_period=5.00000000,clocking=Clock_Enables,compilation=NGC_Netlist,sample_periods=1.00000000000,testbench=0,total_blocks=14359,xilinx_accumulator_block=2,xilinx_adder_subtracter_block=192,xilinx_arithmetic_relational_operator_block=143,xilinx_assert_block=6,xilinx_binary_shift_operator_block=26,xilinx_bit_slice_extractor_block=1362,xilinx_bitbasher_block=2,xilinx_bus_concatenator_block=401,xilinx_bus_multiplexer_block=276,xilinx_constant_block_block=764,xilinx_counter_block=218,xilinx_delay_block=709,xilinx_disregard_subsystem_for_generation_block=10,xilinx_dsp48e_block=52,xilinx_dual_port_random_access_memory_block=10,xilinx_fast_fourier_transform_7_0_block=2,xilinx_gateway_in_block=79,xilinx_gateway_out_block=204,xilinx_input_scaler_block=116,xilinx_inverter_block=571,xilinx_logical_block_block=662,xilinx_multiplier_block=126,xilinx_negate_block_block=14,xilinx_register_block=214,xilinx_single_port_random_access_memory_block=53,xilinx_single_port_read_only_memory_block=79,xilinx_system_generator_block=1,xilinx_type_converter_block=536,xilinx_type_reinterpreter_block=1370,xilinx_wavescope_block=8,}";

  signal addsub1_s_net: std_logic_vector(14 downto 0);
  signal addsub_s_net: std_logic_vector(14 downto 0);
  signal arm10_y_net: std_logic;
  signal arm11_y_net: std_logic;
  signal arm12_y_net_x0: std_logic;
  signal arm14_y_net_x0: std_logic_vector(2 downto 0);
  signal arm1_y_net_x0: std_logic;
  signal arm2_y_net_x0: std_logic;
  signal arm3_y_net_x0: std_logic;
  signal arm4_y_net: std_logic;
  signal arm5_y_net: std_logic;
  signal arm6_y_net: std_logic;
  signal arm8_y_net_x0: std_logic;
  signal arm9_y_net_x0: std_logic;
  signal c09f12_01_a0_fd0_user_data_out_net: std_logic_vector(31 downto 0);
  signal c09f12_01_a0_fd1_user_data_out_net: std_logic_vector(31 downto 0);
  signal c09f12_01_a1_fd0_user_data_out_net: std_logic_vector(31 downto 0);
  signal c09f12_01_a1_fd1_user_data_out_net: std_logic_vector(31 downto 0);
  signal c09f12_01_adc_ctrl0_user_data_out_net: std_logic_vector(31 downto 0);
  signal c09f12_01_adc_ctrl1_user_data_out_net: std_logic_vector(31 downto 0);
  signal c09f12_01_adc_snap0_bram_addr_net: std_logic_vector(9 downto 0);
  signal c09f12_01_adc_snap0_bram_data_in_net: std_logic_vector(31 downto 0);
  signal c09f12_01_adc_snap0_bram_data_out_net: std_logic_vector(31 downto 0);
  signal c09f12_01_adc_snap0_bram_we_net: std_logic;
  signal c09f12_01_adc_snap0_ctrl_user_data_out_net: std_logic_vector(31 downto 0);
  signal c09f12_01_adc_snap0_status_user_data_in_net: std_logic_vector(31 downto 0);
  signal c09f12_01_adc_snap0_tr_en_cnt_user_data_in_net: std_logic_vector(31 downto 0);
  signal c09f12_01_adc_snap0_trig_offset_user_data_out_net: std_logic_vector(31 downto 0);
  signal c09f12_01_adc_snap0_val_user_data_in_net: std_logic_vector(31 downto 0);
  signal c09f12_01_adc_snap1_bram_addr_net: std_logic_vector(9 downto 0);
  signal c09f12_01_adc_snap1_bram_data_in_net: std_logic_vector(31 downto 0);
  signal c09f12_01_adc_snap1_bram_data_out_net: std_logic_vector(31 downto 0);
  signal c09f12_01_adc_snap1_bram_we_net: std_logic;
  signal c09f12_01_adc_snap1_ctrl_user_data_out_net: std_logic_vector(31 downto 0);
  signal c09f12_01_adc_snap1_status_user_data_in_net: std_logic_vector(31 downto 0);
  signal c09f12_01_adc_snap1_tr_en_cnt_user_data_in_net: std_logic_vector(31 downto 0);
  signal c09f12_01_adc_snap1_trig_offset_user_data_out_net: std_logic_vector(31 downto 0);
  signal c09f12_01_adc_snap1_val_user_data_in_net: std_logic_vector(31 downto 0);
  signal c09f12_01_adc_sum_sq0_user_data_in_net: std_logic_vector(31 downto 0);
  signal c09f12_01_adc_sum_sq1_user_data_in_net: std_logic_vector(31 downto 0);
  signal c09f12_01_board_id_user_data_out_net: std_logic_vector(31 downto 0);
  signal c09f12_01_clk_frequency_user_data_in_net: std_logic_vector(31 downto 0);
  signal c09f12_01_coarse_ctrl_user_data_out_net: std_logic_vector(31 downto 0);
  signal c09f12_01_coarse_delay0_user_data_out_net: std_logic_vector(31 downto 0);
  signal c09f12_01_coarse_delay1_user_data_out_net: std_logic_vector(31 downto 0);
  signal c09f12_01_control_user_data_out_net: std_logic_vector(31 downto 0);
  signal c09f12_01_delay_tr_status0_user_data_in_net: std_logic_vector(31 downto 0);
  signal c09f12_01_delay_tr_status1_user_data_in_net: std_logic_vector(31 downto 0);
  signal c09f12_01_eq0_addr_net: std_logic_vector(11 downto 0);
  signal c09f12_01_eq0_data_in_net: std_logic_vector(31 downto 0);
  signal c09f12_01_eq0_data_out_net: std_logic_vector(31 downto 0);
  signal c09f12_01_eq0_we_net: std_logic;
  signal c09f12_01_eq1_addr_net: std_logic_vector(11 downto 0);
  signal c09f12_01_eq1_data_in_net: std_logic_vector(31 downto 0);
  signal c09f12_01_eq1_data_out_net: std_logic_vector(31 downto 0);
  signal c09f12_01_eq1_we_net: std_logic;
  signal c09f12_01_fine_ctrl_user_data_out_net: std_logic_vector(31 downto 0);
  signal c09f12_01_fstatus0_user_data_in_net: std_logic_vector(31 downto 0);
  signal c09f12_01_fstatus1_user_data_in_net: std_logic_vector(31 downto 0);
  signal c09f12_01_gbe0_led_rx_net: std_logic;
  signal c09f12_01_gbe0_led_tx_net: std_logic;
  signal c09f12_01_gbe0_led_up_net: std_logic;
  signal c09f12_01_gbe0_rst_net: std_logic;
  signal c09f12_01_gbe0_rx_ack_net: std_logic;
  signal c09f12_01_gbe0_rx_bad_frame_net: std_logic;
  signal c09f12_01_gbe0_rx_data_net: std_logic_vector(63 downto 0);
  signal c09f12_01_gbe0_rx_end_of_frame_net: std_logic;
  signal c09f12_01_gbe0_rx_overrun_ack_net: std_logic;
  signal c09f12_01_gbe0_rx_overrun_net: std_logic;
  signal c09f12_01_gbe0_rx_source_ip_net: std_logic_vector(31 downto 0);
  signal c09f12_01_gbe0_rx_source_port_net: std_logic_vector(15 downto 0);
  signal c09f12_01_gbe0_rx_valid_net: std_logic;
  signal c09f12_01_gbe0_tx_afull_net: std_logic;
  signal c09f12_01_gbe0_tx_data_net: std_logic_vector(63 downto 0);
  signal c09f12_01_gbe0_tx_dest_ip_net: std_logic_vector(31 downto 0);
  signal c09f12_01_gbe0_tx_dest_port_net: std_logic_vector(15 downto 0);
  signal c09f12_01_gbe0_tx_end_of_frame_net: std_logic;
  signal c09f12_01_gbe0_tx_overflow_net: std_logic;
  signal c09f12_01_gbe0_tx_valid_net: std_logic;
  signal c09f12_01_gbe_ip0_user_data_out_net: std_logic_vector(31 downto 0);
  signal c09f12_01_gbe_port_user_data_out_net: std_logic_vector(31 downto 0);
  signal c09f12_01_gbe_tx_cnt0_user_data_in_net: std_logic_vector(31 downto 0);
  signal c09f12_01_gbe_tx_err_cnt0_user_data_in_net: std_logic_vector(31 downto 0);
  signal c09f12_01_katadc0_gain_load_net: std_logic;
  signal c09f12_01_katadc0_gain_value_net: std_logic_vector(13 downto 0);
  signal c09f12_01_katadc0_user_data_valid_net: std_logic;
  signal c09f12_01_katadc0_user_datai0_net: std_logic_vector(7 downto 0);
  signal c09f12_01_katadc0_user_datai1_net: std_logic_vector(7 downto 0);
  signal c09f12_01_katadc0_user_datai2_net: std_logic_vector(7 downto 0);
  signal c09f12_01_katadc0_user_datai3_net: std_logic_vector(7 downto 0);
  signal c09f12_01_katadc0_user_dataq0_net: std_logic_vector(7 downto 0);
  signal c09f12_01_katadc0_user_dataq1_net: std_logic_vector(7 downto 0);
  signal c09f12_01_katadc0_user_dataq2_net: std_logic_vector(7 downto 0);
  signal c09f12_01_katadc0_user_dataq3_net: std_logic_vector(7 downto 0);
  signal c09f12_01_katadc0_user_outofrange0_net: std_logic;
  signal c09f12_01_katadc0_user_outofrange1_net: std_logic;
  signal c09f12_01_katadc0_user_sync0_net: std_logic;
  signal c09f12_01_katadc0_user_sync1_net: std_logic;
  signal c09f12_01_katadc0_user_sync2_net: std_logic;
  signal c09f12_01_katadc0_user_sync3_net: std_logic;
  signal c09f12_01_ld_time_lsw0_user_data_out_net: std_logic_vector(31 downto 0);
  signal c09f12_01_ld_time_lsw1_user_data_out_net: std_logic_vector(31 downto 0);
  signal c09f12_01_ld_time_msw0_user_data_out_net: std_logic_vector(31 downto 0);
  signal c09f12_01_ld_time_msw1_user_data_out_net: std_logic_vector(31 downto 0);
  signal c09f12_01_leds_roach_gpioa0_gateway_net: std_logic;
  signal c09f12_01_leds_roach_gpioa1_gateway_net: std_logic;
  signal c09f12_01_leds_roach_gpioa2_gateway_net: std_logic;
  signal c09f12_01_leds_roach_gpioa3_gateway_net: std_logic;
  signal c09f12_01_leds_roach_gpioa4_gateway_net: std_logic;
  signal c09f12_01_leds_roach_gpioa5_gateway_net: std_logic;
  signal c09f12_01_leds_roach_gpioa6_gateway_net: std_logic;
  signal c09f12_01_leds_roach_gpioa7_gateway_net: std_logic;
  signal c09f12_01_leds_roach_gpioa_oe_gateway_net: std_logic;
  signal c09f12_01_leds_roach_led0_gateway_net: std_logic;
  signal c09f12_01_leds_roach_led1_gateway_net: std_logic;
  signal c09f12_01_leds_roach_led2_gateway_net: std_logic;
  signal c09f12_01_leds_roach_led3_gateway_net: std_logic;
  signal c09f12_01_mcount_lsw_user_data_in_net: std_logic_vector(31 downto 0);
  signal c09f12_01_mcount_msw_user_data_in_net: std_logic_vector(31 downto 0);
  signal c09f12_01_pps_count_user_data_in_net: std_logic_vector(31 downto 0);
  signal c09f12_01_qdr_ct_qdr_ack_net: std_logic;
  signal c09f12_01_qdr_ct_qdr_address_net: std_logic_vector(31 downto 0);
  signal c09f12_01_qdr_ct_qdr_be_net: std_logic_vector(3 downto 0);
  signal c09f12_01_qdr_ct_qdr_cal_fail_net: std_logic;
  signal c09f12_01_qdr_ct_qdr_data_in_net: std_logic_vector(35 downto 0);
  signal c09f12_01_qdr_ct_qdr_data_out_net: std_logic_vector(35 downto 0);
  signal c09f12_01_qdr_ct_qdr_phy_ready_net: std_logic;
  signal c09f12_01_qdr_ct_qdr_rd_en_net: std_logic;
  signal c09f12_01_qdr_ct_qdr_wr_en_net: std_logic;
  signal c09f12_01_rcs_app_user_data_in_net: std_logic_vector(31 downto 0);
  signal c09f12_01_rcs_lib_user_data_in_net: std_logic_vector(31 downto 0);
  signal c09f12_01_rcs_user_user_data_in_net: std_logic_vector(31 downto 0);
  signal c09f12_01_snap_debug_addr_user_data_in_net: std_logic_vector(31 downto 0);
  signal c09f12_01_snap_debug_bram_addr_net: std_logic_vector(10 downto 0);
  signal c09f12_01_snap_debug_bram_data_in_net: std_logic_vector(31 downto 0);
  signal c09f12_01_snap_debug_bram_data_out_net: std_logic_vector(31 downto 0);
  signal c09f12_01_snap_debug_bram_we_net: std_logic;
  signal c09f12_01_snap_debug_ctrl_user_data_out_net: std_logic_vector(31 downto 0);
  signal c09f12_01_trig_level_user_data_out_net: std_logic_vector(31 downto 0);
  signal ce_1_sg_x706: std_logic;
  signal clk_1_sg_x706: std_logic;
  signal clock_op_net_x3: std_logic_vector(63 downto 0);
  signal concat13_y_net_x1: std_logic_vector(31 downto 0);
  signal concat13_y_net_x2: std_logic_vector(31 downto 0);
  signal concat13_y_net_x3: std_logic_vector(31 downto 0);
  signal concat1_y_net_x4: std_logic_vector(78 downto 0);
  signal concat1_y_net_x5: std_logic_vector(31 downto 0);
  signal concat21_y_net_x0: std_logic_vector(31 downto 0);
  signal concat22_y_net_x3: std_logic_vector(78 downto 0);
  signal concat2_y_net_x3: std_logic_vector(47 downto 0);
  signal concat6_y_net_x0: std_logic_vector(32 downto 0);
  signal concat9_y_net_x4: std_logic_vector(47 downto 0);
  signal concat_y_net_x1: std_logic_vector(64 downto 0);
  signal concatenate_y_net_x0: std_logic_vector(63 downto 0);
  signal concatenate_y_net_x1: std_logic_vector(31 downto 0);
  signal concatenate_y_net_x12: std_logic_vector(129 downto 0);
  signal concatenate_y_net_x13: std_logic_vector(129 downto 0);
  signal concatenate_y_net_x2: std_logic_vector(3 downto 0);
  signal concatenate_y_net_x20: std_logic_vector(65 downto 0);
  signal concatenate_y_net_x21: std_logic_vector(73 downto 0);
  signal concatenate_y_net_x22: std_logic_vector(31 downto 0);
  signal concatenate_y_net_x23: std_logic_vector(31 downto 0);
  signal concatenate_y_net_x24: std_logic_vector(73 downto 0);
  signal concatenate_y_net_x25: std_logic_vector(73 downto 0);
  signal concatenate_y_net_x26: std_logic_vector(129 downto 0);
  signal concatenate_y_net_x27: std_logic_vector(17 downto 0);
  signal concatenate_y_net_x3: std_logic_vector(31 downto 0);
  signal concatenate_y_net_x4: std_logic_vector(71 downto 0);
  signal concatenate_y_net_x5: std_logic_vector(123 downto 0);
  signal concatenate_y_net_x6: std_logic_vector(15 downto 0);
  signal constant14_op_net_x0: std_logic;
  signal constant15_op_net_x1: std_logic;
  signal constant17_op_net_x1: std_logic;
  signal constant1_op_net_x3: std_logic;
  signal constant20_op_net: std_logic;
  signal constant23_op_net_x1: std_logic;
  signal constant24_op_net_x0: std_logic;
  signal constant37_op_net: std_logic_vector(31 downto 0);
  signal constant3_op_net_x2: std_logic;
  signal constant41_op_net_x0: std_logic_vector(31 downto 0);
  signal constant46_op_net_x0: std_logic;
  signal constant5_op_net: std_logic_vector(31 downto 0);
  signal constant8_op_net_x0: std_logic_vector(31 downto 0);
  signal convert1_dout_net_x1: std_logic_vector(31 downto 0);
  signal convert1_dout_net_x2: std_logic_vector(31 downto 0);
  signal counter1_op_net: std_logic_vector(31 downto 0);
  signal counter3_op_net: std_logic_vector(30 downto 0);
  signal counter8_op_net_x3: std_logic_vector(11 downto 0);
  signal delay12_q_net: std_logic;
  signal delay14_q_net_x1: std_logic_vector(123 downto 0);
  signal delay15_q_net_x2: std_logic;
  signal delay16_q_net_x1: std_logic;
  signal delay16_q_net_x2: std_logic;
  signal delay17_q_net: std_logic_vector(31 downto 0);
  signal delay18_q_net: std_logic_vector(31 downto 0);
  signal delay19_q_net: std_logic_vector(31 downto 0);
  signal delay1_q_net: std_logic;
  signal delay1_q_net_x0: std_logic;
  signal delay1_q_net_x1: std_logic_vector(123 downto 0);
  signal delay1_q_net_x4: std_logic;
  signal delay1_q_net_x5: std_logic;
  signal delay1_q_net_x6: std_logic;
  signal delay1_q_net_x7: std_logic_vector(31 downto 0);
  signal delay1_q_net_x8: std_logic_vector(31 downto 0);
  signal delay20_q_net: std_logic_vector(31 downto 0);
  signal delay21_q_net_x1: std_logic_vector(19 downto 0);
  signal delay22_q_net_x2: std_logic;
  signal delay24_q_net_x1: std_logic_vector(71 downto 0);
  signal delay25_q_net: std_logic_vector(31 downto 0);
  signal delay26_q_net: std_logic_vector(31 downto 0);
  signal delay27_q_net: std_logic_vector(31 downto 0);
  signal delay28_q_net: std_logic_vector(31 downto 0);
  signal delay29_q_net: std_logic_vector(31 downto 0);
  signal delay2_q_net_x1: std_logic;
  signal delay2_q_net_x2: std_logic;
  signal delay2_q_net_x3: std_logic_vector(64 downto 0);
  signal delay2_q_net_x4: std_logic_vector(32 downto 0);
  signal delay30_q_net: std_logic_vector(31 downto 0);
  signal delay32_q_net: std_logic_vector(31 downto 0);
  signal delay35_q_net_x1: std_logic_vector(31 downto 0);
  signal delay36_q_net_x0: std_logic_vector(31 downto 0);
  signal delay37_q_net_x0: std_logic_vector(31 downto 0);
  signal delay39_q_net: std_logic_vector(31 downto 0);
  signal delay3_q_net_x1: std_logic;
  signal delay40_q_net: std_logic_vector(31 downto 0);
  signal delay41_q_net: std_logic_vector(31 downto 0);
  signal delay42_q_net_x0: std_logic_vector(31 downto 0);
  signal delay43_q_net_x1: std_logic;
  signal delay44_q_net_x1: std_logic_vector(123 downto 0);
  signal delay45_q_net_x1: std_logic;
  signal delay46_q_net_x1: std_logic_vector(63 downto 0);
  signal delay4_q_net_x3: std_logic;
  signal delay5_q_net_x2: std_logic;
  signal delay6_q_net_x0: std_logic_vector(19 downto 0);
  signal delay6_q_net_x2: std_logic;
  signal delay6_q_net_x7: std_logic;
  signal delay8_q_net: std_logic_vector(123 downto 0);
  signal delay_q_net_x0: std_logic;
  signal delay_q_net_x4: std_logic;
  signal delay_sync_q_net_x12: std_logic;
  signal dvalid_x3: std_logic;
  signal edge_op_y_net_x0: std_logic;
  signal edge_op_y_net_x1: std_logic;
  signal edge_op_y_net_x2: std_logic;
  signal edge_op_y_net_x3: std_logic;
  signal edge_op_y_net_x4: std_logic;
  signal edge_op_y_net_x5: std_logic;
  signal edge_op_y_net_x6: std_logic;
  signal fstatcbits0_op_net_x0: std_logic_vector(4 downto 0);
  signal fstatcbits1_op_net_x0: std_logic_vector(4 downto 0);
  signal fstatfbits0_op_net_x0: std_logic_vector(4 downto 0);
  signal fstatfbits1_op_net_x0: std_logic_vector(4 downto 0);
  signal gateway_out1_net: std_logic_vector(25 downto 0);
  signal gateway_out1_x0_net: std_logic_vector(25 downto 0);
  signal gateway_out1_x1_net: std_logic_vector(25 downto 0);
  signal gateway_out1_x2_net: std_logic_vector(25 downto 0);
  signal gateway_out1_x3_net: std_logic_vector(25 downto 0);
  signal gateway_out1_x4_net: std_logic_vector(25 downto 0);
  signal gateway_out1_x5_net: std_logic_vector(25 downto 0);
  signal gateway_out1_x6_net: std_logic_vector(25 downto 0);
  signal gateway_out2_net: std_logic;
  signal gateway_out2_x0_net: std_logic;
  signal gateway_out2_x1_net: std_logic;
  signal gateway_out2_x2_net: std_logic;
  signal gateway_out2_x3_net: std_logic;
  signal gateway_out2_x4_net: std_logic;
  signal gateway_out2_x5_net: std_logic;
  signal gateway_out2_x6_net: std_logic;
  signal gateway_out_net: std_logic;
  signal gateway_out_x0_net: std_logic;
  signal gateway_out_x1_net: std_logic;
  signal gateway_out_x2_net: std_logic;
  signal gateway_out_x3_net: std_logic;
  signal gateway_out_x4_net: std_logic;
  signal gateway_out_x5_net: std_logic;
  signal gateway_out_x6_net: std_logic;
  signal gateway_t1_net: std_logic_vector(7 downto 0);
  signal gateway_t1_x0_net: std_logic_vector(7 downto 0);
  signal gateway_t1_x1_net: std_logic_vector(7 downto 0);
  signal gateway_t1_x2_net: std_logic_vector(7 downto 0);
  signal gateway_t1_x3_net: std_logic_vector(7 downto 0);
  signal gateway_t1_x4_net: std_logic_vector(7 downto 0);
  signal gateway_t1_x5_net: std_logic_vector(7 downto 0);
  signal gateway_t1_x6_net: std_logic_vector(7 downto 0);
  signal gateway_t2_net: std_logic;
  signal gateway_t2_x0_net: std_logic;
  signal gateway_t2_x1_net: std_logic;
  signal gateway_t2_x2_net: std_logic;
  signal gateway_t2_x3_net: std_logic;
  signal gateway_t2_x4_net: std_logic;
  signal gateway_t2_x5_net: std_logic;
  signal gateway_t2_x6_net: std_logic;
  signal gateway_t3_net: std_logic_vector(8 downto 0);
  signal gateway_t3_x0_net: std_logic_vector(8 downto 0);
  signal gateway_t3_x1_net: std_logic_vector(8 downto 0);
  signal gateway_t3_x2_net: std_logic_vector(8 downto 0);
  signal gateway_t3_x3_net: std_logic_vector(8 downto 0);
  signal gateway_t3_x4_net: std_logic_vector(8 downto 0);
  signal gateway_t3_x5_net: std_logic_vector(8 downto 0);
  signal gateway_t3_x6_net: std_logic_vector(8 downto 0);
  signal inverter1_op_net: std_logic;
  signal inverter2_op_net: std_logic;
  signal inverter3_op_net_x0: std_logic;
  signal inverter4_op_net: std_logic;
  signal inverter5_op_net_x0: std_logic;
  signal inverter6_op_net: std_logic;
  signal inverter_op_net_x1: std_logic;
  signal logical10_y_net_x1: std_logic;
  signal logical11_y_net: std_logic;
  signal logical12_y_net_x2: std_logic;
  signal logical12_y_net_x3: std_logic;
  signal logical14_y_net_x19: std_logic;
  signal logical17_y_net_x2: std_logic;
  signal logical1_y_net_x0: std_logic;
  signal logical1_y_net_x2: std_logic;
  signal logical1_y_net_x3: std_logic;
  signal logical1_y_net_x4: std_logic;
  signal logical21_y_net_x1: std_logic;
  signal logical2_y_net_x3: std_logic;
  signal logical3_y_net_x0: std_logic;
  signal logical4_y_net_x2: std_logic;
  signal logical5_y_net_x2: std_logic;
  signal logical6_y_net: std_logic;
  signal logical7_y_net_x0: std_logic;
  signal logical8_y_net_x1: std_logic;
  signal logical9_y_net: std_logic;
  signal logical_y_net_x3: std_logic;
  signal man_sync1_y_net_x0: std_logic;
  signal mux1_y_net_x4: std_logic_vector(63 downto 0);
  signal mux1_y_net_x5: std_logic_vector(15 downto 0);
  signal mux3_y_net_x1: std_logic_vector(63 downto 0);
  signal mux_y_net_x2: std_logic_vector(1 downto 0);
  signal oob_out_x2: std_logic_vector(7 downto 0);
  signal payload_cnt1_op_net_x1: std_logic_vector(31 downto 0);
  signal payload_cnt_op_net_x1: std_logic_vector(31 downto 0);
  signal pkt_out_x2: std_logic_vector(63 downto 0);
  signal register0_q_net_x1: std_logic;
  signal register0_q_net_x13: std_logic_vector(63 downto 0);
  signal register0_q_net_x14: std_logic_vector(7 downto 0);
  signal register0_q_net_x15: std_logic;
  signal register0_q_net_x16: std_logic;
  signal register0_q_net_x17: std_logic_vector(63 downto 0);
  signal register0_q_net_x18: std_logic_vector(63 downto 0);
  signal register0_q_net_x19: std_logic_vector(31 downto 0);
  signal register0_q_net_x2: std_logic;
  signal register0_q_net_x20: std_logic;
  signal register0_q_net_x7: std_logic_vector(31 downto 0);
  signal register0_q_net_x9: std_logic;
  signal register19_q_net_x0: std_logic_vector(31 downto 0);
  signal register1_q_net_x0: std_logic;
  signal register1_q_net_x1: std_logic;
  signal register1_q_net_x2: std_logic;
  signal register2_q_net_x0: std_logic;
  signal register3_q_net_x0: std_logic_vector(3 downto 0);
  signal register4_q_net_x0: std_logic;
  signal register5_q_net_x1: std_logic;
  signal register5_q_net_x2: std_logic;
  signal register7_q_net_x0: std_logic;
  signal register7_q_net_x1: std_logic;
  signal reinterpret0_0_output_port_net_x1: std_logic_vector(7 downto 0);
  signal reinterpret0_1_output_port_net_x1: std_logic_vector(7 downto 0);
  signal reinterpret0_2_output_port_net_x1: std_logic_vector(7 downto 0);
  signal reinterpret0_3_output_port_net_x1: std_logic_vector(7 downto 0);
  signal reinterpret1_0_output_port_net_x1: std_logic_vector(7 downto 0);
  signal reinterpret1_1_output_port_net_x1: std_logic_vector(7 downto 0);
  signal reinterpret1_2_output_port_net_x1: std_logic_vector(7 downto 0);
  signal reinterpret1_3_output_port_net_x1: std_logic_vector(7 downto 0);
  signal reinterpret1_output_port_net_x1: std_logic_vector(7 downto 0);
  signal reinterpret1_output_port_net_x2: std_logic_vector(7 downto 0);
  signal reinterpret1_output_port_net_x6: std_logic_vector(31 downto 0);
  signal reinterpret1_output_port_net_x7: std_logic_vector(31 downto 0);
  signal reinterpret2_output_port_net_x1: std_logic_vector(7 downto 0);
  signal reinterpret2_output_port_net_x2: std_logic_vector(7 downto 0);
  signal reinterpret2_output_port_net_x6: std_logic_vector(31 downto 0);
  signal reinterpret2_output_port_net_x7: std_logic_vector(127 downto 0);
  signal reinterpret3_output_port_net_x1: std_logic_vector(7 downto 0);
  signal reinterpret3_output_port_net_x2: std_logic_vector(7 downto 0);
  signal reinterpret4_output_port_net_x1: std_logic_vector(7 downto 0);
  signal reinterpret4_output_port_net_x2: std_logic_vector(7 downto 0);
  signal relational1_op_net: std_logic;
  signal relational_op_net: std_logic;
  signal slice10_y_net: std_logic_vector(15 downto 0);
  signal slice11_y_net_x1: std_logic;
  signal slice12_y_net: std_logic_vector(15 downto 0);
  signal slice13_y_net_x1: std_logic;
  signal slice14_y_net: std_logic_vector(14 downto 0);
  signal slice15_y_net: std_logic_vector(15 downto 0);
  signal slice16_y_net: std_logic_vector(31 downto 0);
  signal slice17_y_net_x1: std_logic;
  signal slice18_y_net_x1: std_logic;
  signal slice19_y_net_x1: std_logic_vector(5 downto 0);
  signal slice1_y_net: std_logic_vector(15 downto 0);
  signal slice1_y_net_x2: std_logic;
  signal slice1_y_net_x7: std_logic;
  signal slice21_y_net_x3: std_logic_vector(9 downto 0);
  signal slice29_y_net: std_logic;
  signal slice2_y_net: std_logic_vector(15 downto 0);
  signal slice2_y_net_x5: std_logic;
  signal slice30_y_net_x0: std_logic_vector(5 downto 0);
  signal slice33_y_net: std_logic;
  signal slice34_y_net_x0: std_logic_vector(5 downto 0);
  signal slice35_y_net: std_logic;
  signal slice36_y_net: std_logic;
  signal slice38_y_net: std_logic_vector(14 downto 0);
  signal slice3_y_net: std_logic_vector(15 downto 0);
  signal slice3_y_net_x0: std_logic;
  signal slice3_y_net_x7: std_logic;
  signal slice40_y_net: std_logic;
  signal slice45_y_net: std_logic;
  signal slice4_y_net: std_logic_vector(15 downto 0);
  signal slice6_y_net_x20: std_logic_vector(9 downto 0);
  signal slice73_y_net: std_logic_vector(15 downto 0);
  signal slice78_y_net: std_logic;
  signal slice7_y_net: std_logic_vector(15 downto 0);
  signal slice8_y_net: std_logic_vector(15 downto 0);
  signal slice9_y_net_x0: std_logic_vector(31 downto 0);
  signal slice_y_net_x0: std_logic_vector(31 downto 0);
  signal slice_y_net_x1: std_logic;
  signal sync_out_x3: std_logic;
  signal sync_period_constant_op_net_x0: std_logic_vector(30 downto 0);
  signal valid_out_x3: std_logic;

begin
  c09f12_01_a0_fd0_user_data_out_net <= c09f12_01_a0_fd0_user_data_out;
  c09f12_01_a0_fd1_user_data_out_net <= c09f12_01_a0_fd1_user_data_out;
  c09f12_01_a1_fd0_user_data_out_net <= c09f12_01_a1_fd0_user_data_out;
  c09f12_01_a1_fd1_user_data_out_net <= c09f12_01_a1_fd1_user_data_out;
  c09f12_01_adc_ctrl0_user_data_out_net <= c09f12_01_adc_ctrl0_user_data_out;
  c09f12_01_adc_ctrl1_user_data_out_net <= c09f12_01_adc_ctrl1_user_data_out;
  c09f12_01_adc_snap0_bram_data_out_net <= c09f12_01_adc_snap0_bram_data_out;
  c09f12_01_adc_snap0_ctrl_user_data_out_net <= c09f12_01_adc_snap0_ctrl_user_data_out;
  c09f12_01_adc_snap0_trig_offset_user_data_out_net <= c09f12_01_adc_snap0_trig_offset_user_data_out;
  c09f12_01_adc_snap1_bram_data_out_net <= c09f12_01_adc_snap1_bram_data_out;
  c09f12_01_adc_snap1_ctrl_user_data_out_net <= c09f12_01_adc_snap1_ctrl_user_data_out;
  c09f12_01_adc_snap1_trig_offset_user_data_out_net <= c09f12_01_adc_snap1_trig_offset_user_data_out;
  c09f12_01_board_id_user_data_out_net <= c09f12_01_board_id_user_data_out;
  c09f12_01_coarse_ctrl_user_data_out_net <= c09f12_01_coarse_ctrl_user_data_out;
  c09f12_01_coarse_delay0_user_data_out_net <= c09f12_01_coarse_delay0_user_data_out;
  c09f12_01_coarse_delay1_user_data_out_net <= c09f12_01_coarse_delay1_user_data_out;
  c09f12_01_control_user_data_out_net <= c09f12_01_control_user_data_out;
  c09f12_01_eq0_data_out_net <= c09f12_01_eq0_data_out;
  c09f12_01_eq1_data_out_net <= c09f12_01_eq1_data_out;
  c09f12_01_fine_ctrl_user_data_out_net <= c09f12_01_fine_ctrl_user_data_out;
  c09f12_01_gbe0_led_rx_net <= c09f12_01_gbe0_led_rx;
  c09f12_01_gbe0_led_tx_net <= c09f12_01_gbe0_led_tx;
  c09f12_01_gbe0_led_up_net <= c09f12_01_gbe0_led_up;
  c09f12_01_gbe0_rx_bad_frame_net <= c09f12_01_gbe0_rx_bad_frame;
  c09f12_01_gbe0_rx_data_net <= c09f12_01_gbe0_rx_data;
  c09f12_01_gbe0_rx_end_of_frame_net <= c09f12_01_gbe0_rx_end_of_frame;
  c09f12_01_gbe0_rx_overrun_net <= c09f12_01_gbe0_rx_overrun;
  c09f12_01_gbe0_rx_source_ip_net <= c09f12_01_gbe0_rx_source_ip;
  c09f12_01_gbe0_rx_source_port_net <= c09f12_01_gbe0_rx_source_port;
  c09f12_01_gbe0_rx_valid_net <= c09f12_01_gbe0_rx_valid;
  c09f12_01_gbe0_tx_afull_net <= c09f12_01_gbe0_tx_afull;
  c09f12_01_gbe0_tx_overflow_net <= c09f12_01_gbe0_tx_overflow;
  c09f12_01_gbe_ip0_user_data_out_net <= c09f12_01_gbe_ip0_user_data_out;
  c09f12_01_gbe_port_user_data_out_net <= c09f12_01_gbe_port_user_data_out;
  c09f12_01_katadc0_user_data_valid_net <= c09f12_01_katadc0_user_data_valid;
  c09f12_01_katadc0_user_datai0_net <= c09f12_01_katadc0_user_datai0;
  c09f12_01_katadc0_user_datai1_net <= c09f12_01_katadc0_user_datai1;
  c09f12_01_katadc0_user_datai2_net <= c09f12_01_katadc0_user_datai2;
  c09f12_01_katadc0_user_datai3_net <= c09f12_01_katadc0_user_datai3;
  c09f12_01_katadc0_user_dataq0_net <= c09f12_01_katadc0_user_dataq0;
  c09f12_01_katadc0_user_dataq1_net <= c09f12_01_katadc0_user_dataq1;
  c09f12_01_katadc0_user_dataq2_net <= c09f12_01_katadc0_user_dataq2;
  c09f12_01_katadc0_user_dataq3_net <= c09f12_01_katadc0_user_dataq3;
  c09f12_01_katadc0_user_outofrange0_net <= c09f12_01_katadc0_user_outofrange0;
  c09f12_01_katadc0_user_outofrange1_net <= c09f12_01_katadc0_user_outofrange1;
  c09f12_01_katadc0_user_sync0_net <= c09f12_01_katadc0_user_sync0;
  c09f12_01_katadc0_user_sync1_net <= c09f12_01_katadc0_user_sync1;
  c09f12_01_katadc0_user_sync2_net <= c09f12_01_katadc0_user_sync2;
  c09f12_01_katadc0_user_sync3_net <= c09f12_01_katadc0_user_sync3;
  c09f12_01_ld_time_lsw0_user_data_out_net <= c09f12_01_ld_time_lsw0_user_data_out;
  c09f12_01_ld_time_lsw1_user_data_out_net <= c09f12_01_ld_time_lsw1_user_data_out;
  c09f12_01_ld_time_msw0_user_data_out_net <= c09f12_01_ld_time_msw0_user_data_out;
  c09f12_01_ld_time_msw1_user_data_out_net <= c09f12_01_ld_time_msw1_user_data_out;
  c09f12_01_qdr_ct_qdr_ack_net <= c09f12_01_qdr_ct_qdr_ack;
  c09f12_01_qdr_ct_qdr_cal_fail_net <= c09f12_01_qdr_ct_qdr_cal_fail;
  c09f12_01_qdr_ct_qdr_data_out_net <= c09f12_01_qdr_ct_qdr_data_out;
  c09f12_01_qdr_ct_qdr_phy_ready_net <= c09f12_01_qdr_ct_qdr_phy_ready;
  c09f12_01_snap_debug_bram_data_out_net <= c09f12_01_snap_debug_bram_data_out;
  c09f12_01_snap_debug_ctrl_user_data_out_net <= c09f12_01_snap_debug_ctrl_user_data_out;
  c09f12_01_trig_level_user_data_out_net <= c09f12_01_trig_level_user_data_out;
  ce_1_sg_x706 <= ce_1;
  clk_1_sg_x706 <= clk_1;
  c09f12_01_adc_snap0_bram_addr <= c09f12_01_adc_snap0_bram_addr_net;
  c09f12_01_adc_snap0_bram_data_in <= c09f12_01_adc_snap0_bram_data_in_net;
  c09f12_01_adc_snap0_bram_we <= c09f12_01_adc_snap0_bram_we_net;
  c09f12_01_adc_snap0_status_user_data_in <= c09f12_01_adc_snap0_status_user_data_in_net;
  c09f12_01_adc_snap0_tr_en_cnt_user_data_in <= c09f12_01_adc_snap0_tr_en_cnt_user_data_in_net;
  c09f12_01_adc_snap0_val_user_data_in <= c09f12_01_adc_snap0_val_user_data_in_net;
  c09f12_01_adc_snap1_bram_addr <= c09f12_01_adc_snap1_bram_addr_net;
  c09f12_01_adc_snap1_bram_data_in <= c09f12_01_adc_snap1_bram_data_in_net;
  c09f12_01_adc_snap1_bram_we <= c09f12_01_adc_snap1_bram_we_net;
  c09f12_01_adc_snap1_status_user_data_in <= c09f12_01_adc_snap1_status_user_data_in_net;
  c09f12_01_adc_snap1_tr_en_cnt_user_data_in <= c09f12_01_adc_snap1_tr_en_cnt_user_data_in_net;
  c09f12_01_adc_snap1_val_user_data_in <= c09f12_01_adc_snap1_val_user_data_in_net;
  c09f12_01_adc_sum_sq0_user_data_in <= c09f12_01_adc_sum_sq0_user_data_in_net;
  c09f12_01_adc_sum_sq1_user_data_in <= c09f12_01_adc_sum_sq1_user_data_in_net;
  c09f12_01_clk_frequency_user_data_in <= c09f12_01_clk_frequency_user_data_in_net;
  c09f12_01_delay_tr_status0_user_data_in <= c09f12_01_delay_tr_status0_user_data_in_net;
  c09f12_01_delay_tr_status1_user_data_in <= c09f12_01_delay_tr_status1_user_data_in_net;
  c09f12_01_eq0_addr <= c09f12_01_eq0_addr_net;
  c09f12_01_eq0_data_in <= c09f12_01_eq0_data_in_net;
  c09f12_01_eq0_we <= c09f12_01_eq0_we_net;
  c09f12_01_eq1_addr <= c09f12_01_eq1_addr_net;
  c09f12_01_eq1_data_in <= c09f12_01_eq1_data_in_net;
  c09f12_01_eq1_we <= c09f12_01_eq1_we_net;
  c09f12_01_fstatus0_user_data_in <= c09f12_01_fstatus0_user_data_in_net;
  c09f12_01_fstatus1_user_data_in <= c09f12_01_fstatus1_user_data_in_net;
  c09f12_01_gbe0_rst <= c09f12_01_gbe0_rst_net;
  c09f12_01_gbe0_rx_ack <= c09f12_01_gbe0_rx_ack_net;
  c09f12_01_gbe0_rx_overrun_ack <= c09f12_01_gbe0_rx_overrun_ack_net;
  c09f12_01_gbe0_tx_data <= c09f12_01_gbe0_tx_data_net;
  c09f12_01_gbe0_tx_dest_ip <= c09f12_01_gbe0_tx_dest_ip_net;
  c09f12_01_gbe0_tx_dest_port <= c09f12_01_gbe0_tx_dest_port_net;
  c09f12_01_gbe0_tx_end_of_frame <= c09f12_01_gbe0_tx_end_of_frame_net;
  c09f12_01_gbe0_tx_valid <= c09f12_01_gbe0_tx_valid_net;
  c09f12_01_gbe_tx_cnt0_user_data_in <= c09f12_01_gbe_tx_cnt0_user_data_in_net;
  c09f12_01_gbe_tx_err_cnt0_user_data_in <= c09f12_01_gbe_tx_err_cnt0_user_data_in_net;
  c09f12_01_katadc0_gain_load <= c09f12_01_katadc0_gain_load_net;
  c09f12_01_katadc0_gain_value <= c09f12_01_katadc0_gain_value_net;
  c09f12_01_leds_roach_gpioa0_gateway <= c09f12_01_leds_roach_gpioa0_gateway_net;
  c09f12_01_leds_roach_gpioa1_gateway <= c09f12_01_leds_roach_gpioa1_gateway_net;
  c09f12_01_leds_roach_gpioa2_gateway <= c09f12_01_leds_roach_gpioa2_gateway_net;
  c09f12_01_leds_roach_gpioa3_gateway <= c09f12_01_leds_roach_gpioa3_gateway_net;
  c09f12_01_leds_roach_gpioa4_gateway <= c09f12_01_leds_roach_gpioa4_gateway_net;
  c09f12_01_leds_roach_gpioa5_gateway <= c09f12_01_leds_roach_gpioa5_gateway_net;
  c09f12_01_leds_roach_gpioa6_gateway <= c09f12_01_leds_roach_gpioa6_gateway_net;
  c09f12_01_leds_roach_gpioa7_gateway <= c09f12_01_leds_roach_gpioa7_gateway_net;
  c09f12_01_leds_roach_gpioa_oe_gateway <= c09f12_01_leds_roach_gpioa_oe_gateway_net;
  c09f12_01_leds_roach_led0_gateway <= c09f12_01_leds_roach_led0_gateway_net;
  c09f12_01_leds_roach_led1_gateway <= c09f12_01_leds_roach_led1_gateway_net;
  c09f12_01_leds_roach_led2_gateway <= c09f12_01_leds_roach_led2_gateway_net;
  c09f12_01_leds_roach_led3_gateway <= c09f12_01_leds_roach_led3_gateway_net;
  c09f12_01_mcount_lsw_user_data_in <= c09f12_01_mcount_lsw_user_data_in_net;
  c09f12_01_mcount_msw_user_data_in <= c09f12_01_mcount_msw_user_data_in_net;
  c09f12_01_pps_count_user_data_in <= c09f12_01_pps_count_user_data_in_net;
  c09f12_01_qdr_ct_qdr_address <= c09f12_01_qdr_ct_qdr_address_net;
  c09f12_01_qdr_ct_qdr_be <= c09f12_01_qdr_ct_qdr_be_net;
  c09f12_01_qdr_ct_qdr_data_in <= c09f12_01_qdr_ct_qdr_data_in_net;
  c09f12_01_qdr_ct_qdr_rd_en <= c09f12_01_qdr_ct_qdr_rd_en_net;
  c09f12_01_qdr_ct_qdr_wr_en <= c09f12_01_qdr_ct_qdr_wr_en_net;
  c09f12_01_rcs_app_user_data_in <= c09f12_01_rcs_app_user_data_in_net;
  c09f12_01_rcs_lib_user_data_in <= c09f12_01_rcs_lib_user_data_in_net;
  c09f12_01_rcs_user_user_data_in <= c09f12_01_rcs_user_user_data_in_net;
  c09f12_01_snap_debug_addr_user_data_in <= c09f12_01_snap_debug_addr_user_data_in_net;
  c09f12_01_snap_debug_bram_addr <= c09f12_01_snap_debug_bram_addr_net;
  c09f12_01_snap_debug_bram_data_in <= c09f12_01_snap_debug_bram_data_in_net;
  c09f12_01_snap_debug_bram_we <= c09f12_01_snap_debug_bram_we_net;
  gateway_out <= gateway_out_net;
  gateway_out1 <= gateway_out1_net;
  gateway_out1_x0 <= gateway_out1_x0_net;
  gateway_out1_x1 <= gateway_out1_x1_net;
  gateway_out1_x2 <= gateway_out1_x2_net;
  gateway_out1_x3 <= gateway_out1_x3_net;
  gateway_out1_x4 <= gateway_out1_x4_net;
  gateway_out1_x5 <= gateway_out1_x5_net;
  gateway_out1_x6 <= gateway_out1_x6_net;
  gateway_out2 <= gateway_out2_net;
  gateway_out2_x0 <= gateway_out2_x0_net;
  gateway_out2_x1 <= gateway_out2_x1_net;
  gateway_out2_x2 <= gateway_out2_x2_net;
  gateway_out2_x3 <= gateway_out2_x3_net;
  gateway_out2_x4 <= gateway_out2_x4_net;
  gateway_out2_x5 <= gateway_out2_x5_net;
  gateway_out2_x6 <= gateway_out2_x6_net;
  gateway_out_x0 <= gateway_out_x0_net;
  gateway_out_x1 <= gateway_out_x1_net;
  gateway_out_x2 <= gateway_out_x2_net;
  gateway_out_x3 <= gateway_out_x3_net;
  gateway_out_x4 <= gateway_out_x4_net;
  gateway_out_x5 <= gateway_out_x5_net;
  gateway_out_x6 <= gateway_out_x6_net;
  gateway_t1 <= gateway_t1_net;
  gateway_t1_x0 <= gateway_t1_x0_net;
  gateway_t1_x1 <= gateway_t1_x1_net;
  gateway_t1_x2 <= gateway_t1_x2_net;
  gateway_t1_x3 <= gateway_t1_x3_net;
  gateway_t1_x4 <= gateway_t1_x4_net;
  gateway_t1_x5 <= gateway_t1_x5_net;
  gateway_t1_x6 <= gateway_t1_x6_net;
  gateway_t2 <= gateway_t2_net;
  gateway_t2_x0 <= gateway_t2_x0_net;
  gateway_t2_x1 <= gateway_t2_x1_net;
  gateway_t2_x2 <= gateway_t2_x2_net;
  gateway_t2_x3 <= gateway_t2_x3_net;
  gateway_t2_x4 <= gateway_t2_x4_net;
  gateway_t2_x5 <= gateway_t2_x5_net;
  gateway_t2_x6 <= gateway_t2_x6_net;
  gateway_t3 <= gateway_t3_net;
  gateway_t3_x0 <= gateway_t3_x0_net;
  gateway_t3_x1 <= gateway_t3_x1_net;
  gateway_t3_x2 <= gateway_t3_x2_net;
  gateway_t3_x3 <= gateway_t3_x3_net;
  gateway_t3_x4 <= gateway_t3_x4_net;
  gateway_t3_x5 <= gateway_t3_x5_net;
  gateway_t3_x6 <= gateway_t3_x6_net;

  adc_snap0_e5d722f3d9: entity work.adc_snap0_entity_e5d722f3d9
    port map (
      c09f12_01_adc_snap0_ctrl_user_data_out => c09f12_01_adc_snap0_ctrl_user_data_out_net,
      c09f12_01_adc_snap0_trig_offset_user_data_out => c09f12_01_adc_snap0_trig_offset_user_data_out_net,
      ce_1 => ce_1_sg_x706,
      clk_1 => clk_1_sg_x706,
      din => delay1_q_net_x7,
      stop => logical1_y_net_x2,
      trig => slice2_y_net_x5,
      vin => reinterpret1_output_port_net_x6,
      we => constant23_op_net_x1,
      bram => c09f12_01_adc_snap0_bram_addr_net,
      bram_x0 => c09f12_01_adc_snap0_bram_data_in_net,
      bram_x1 => c09f12_01_adc_snap0_bram_we_net,
      status => c09f12_01_adc_snap0_status_user_data_in_net,
      tr_en_cnt => c09f12_01_adc_snap0_tr_en_cnt_user_data_in_net,
      val => c09f12_01_adc_snap0_val_user_data_in_net
    );

  adc_snap1_3fff712eed: entity work.adc_snap1_entity_3fff712eed
    port map (
      c09f12_01_adc_snap1_ctrl_user_data_out => c09f12_01_adc_snap1_ctrl_user_data_out_net,
      c09f12_01_adc_snap1_trig_offset_user_data_out => c09f12_01_adc_snap1_trig_offset_user_data_out_net,
      ce_1 => ce_1_sg_x706,
      clk_1 => clk_1_sg_x706,
      din => delay1_q_net_x8,
      stop => logical1_y_net_x3,
      trig => slice2_y_net_x5,
      vin => reinterpret1_output_port_net_x6,
      we => constant15_op_net_x1,
      bram => c09f12_01_adc_snap1_bram_addr_net,
      bram_x0 => c09f12_01_adc_snap1_bram_data_in_net,
      bram_x1 => c09f12_01_adc_snap1_bram_we_net,
      status => c09f12_01_adc_snap1_status_user_data_in_net,
      tr_en_cnt => c09f12_01_adc_snap1_tr_en_cnt_user_data_in_net,
      val => c09f12_01_adc_snap1_val_user_data_in_net
    );

  adc_sum_sq0_f3af8eb2c5: entity work.status_entity_7b6169195a
    port map (
      ce_1 => ce_1_sg_x706,
      clk_1 => clk_1_sg_x706,
      reg_out => convert1_dout_net_x1,
      convert_x0 => c09f12_01_adc_sum_sq0_user_data_in_net
    );

  adc_sum_sq1_b1185a146c: entity work.status_entity_7b6169195a
    port map (
      ce_1 => ce_1_sg_x706,
      clk_1 => clk_1_sg_x706,
      reg_out => convert1_dout_net_x2,
      convert_x0 => c09f12_01_adc_sum_sq1_user_data_in_net
    );

  addsub: entity work.xladdsub_c09f12_01
    generic map (
      a_arith => xlUnsigned,
      a_bin_pt => 0,
      a_width => 15,
      b_arith => xlUnsigned,
      b_bin_pt => 0,
      b_width => 2,
      c_has_c_out => 0,
      c_latency => 1,
      c_output_width => 16,
      core_name0 => "addsb_11_0_a37a2abb0bb82ab2",
      extra_registers => 0,
      full_s_arith => 1,
      full_s_width => 16,
      latency => 1,
      overflow => 2,
      quantization => 1,
      s_arith => xlUnsigned,
      s_bin_pt => 0,
      s_width => 15
    )
    port map (
      a => slice38_y_net,
      b => mux_y_net_x2,
      ce => ce_1_sg_x706,
      clk => clk_1_sg_x706,
      clr => '0',
      en => "1",
      s => addsub_s_net
    );

  addsub1: entity work.xladdsub_c09f12_01
    generic map (
      a_arith => xlUnsigned,
      a_bin_pt => 0,
      a_width => 15,
      b_arith => xlUnsigned,
      b_bin_pt => 0,
      b_width => 2,
      c_has_c_out => 0,
      c_latency => 1,
      c_output_width => 16,
      core_name0 => "addsb_11_0_a37a2abb0bb82ab2",
      extra_registers => 0,
      full_s_arith => 1,
      full_s_width => 16,
      latency => 1,
      overflow => 2,
      quantization => 1,
      s_arith => xlUnsigned,
      s_bin_pt => 0,
      s_width => 15
    )
    port map (
      a => slice14_y_net,
      b => mux_y_net_x2,
      ce => ce_1_sg_x706,
      clk => clk_1_sg_x706,
      clr => '0',
      en => "1",
      s => addsub1_s_net
    );

  arm1: entity work.xlslice
    generic map (
      new_lsb => 2,
      new_msb => 2,
      x_width => 32,
      y_width => 1
    )
    port map (
      x => delay41_q_net,
      y(0) => arm1_y_net_x0
    );

  arm10: entity work.xlslice
    generic map (
      new_lsb => 10,
      new_msb => 10,
      x_width => 32,
      y_width => 1
    )
    port map (
      x => delay41_q_net,
      y(0) => arm10_y_net
    );

  arm11: entity work.xlslice
    generic map (
      new_lsb => 21,
      new_msb => 21,
      x_width => 32,
      y_width => 1
    )
    port map (
      x => delay41_q_net,
      y(0) => arm11_y_net
    );

  arm12: entity work.xlslice
    generic map (
      new_lsb => 11,
      new_msb => 11,
      x_width => 32,
      y_width => 1
    )
    port map (
      x => delay41_q_net,
      y(0) => arm12_y_net_x0
    );

  arm14: entity work.xlslice
    generic map (
      new_lsb => 25,
      new_msb => 27,
      x_width => 32,
      y_width => 3
    )
    port map (
      x => delay41_q_net,
      y => arm14_y_net_x0
    );

  arm2: entity work.xlslice
    generic map (
      new_lsb => 3,
      new_msb => 3,
      x_width => 32,
      y_width => 1
    )
    port map (
      x => delay41_q_net,
      y(0) => arm2_y_net_x0
    );

  arm3: entity work.xlslice
    generic map (
      new_lsb => 16,
      new_msb => 16,
      x_width => 32,
      y_width => 1
    )
    port map (
      x => delay41_q_net,
      y(0) => arm3_y_net_x0
    );

  arm4: entity work.xlslice
    generic map (
      new_lsb => 17,
      new_msb => 17,
      x_width => 32,
      y_width => 1
    )
    port map (
      x => delay41_q_net,
      y(0) => arm4_y_net
    );

  arm5: entity work.xlslice
    generic map (
      new_lsb => 18,
      new_msb => 18,
      x_width => 32,
      y_width => 1
    )
    port map (
      x => delay41_q_net,
      y(0) => arm5_y_net
    );

  arm6: entity work.xlslice
    generic map (
      new_lsb => 19,
      new_msb => 19,
      x_width => 32,
      y_width => 1
    )
    port map (
      x => delay41_q_net,
      y(0) => arm6_y_net
    );

  arm8: entity work.xlslice
    generic map (
      new_lsb => 9,
      new_msb => 9,
      x_width => 32,
      y_width => 1
    )
    port map (
      x => delay41_q_net,
      y(0) => arm8_y_net_x0
    );

  arm9: entity work.xlslice
    generic map (
      new_lsb => 8,
      new_msb => 8,
      x_width => 32,
      y_width => 1
    )
    port map (
      x => delay41_q_net,
      y(0) => arm9_y_net_x0
    );

  bus_create11_ca7f9dbf2e: entity work.bus_create11_entity_ca7f9dbf2e
    port map (
      in1 => c09f12_01_eq0_data_out_net,
      in2 => c09f12_01_eq1_data_out_net,
      bus_out => concatenate_y_net_x0
    );

  bus_create2_26f43c2bb1: entity work.bus_create2_entity_26f43c2bb1
    port map (
      in1 => reinterpret1_0_output_port_net_x1,
      in2 => reinterpret1_1_output_port_net_x1,
      in3 => reinterpret1_2_output_port_net_x1,
      in4 => reinterpret1_3_output_port_net_x1,
      bus_out => concatenate_y_net_x1
    );

  bus_create7_57af54f9e5: entity work.bus_create7_entity_57af54f9e5
    port map (
      in1 => c09f12_01_katadc0_user_sync0_net,
      in2 => c09f12_01_katadc0_user_sync1_net,
      in3 => c09f12_01_katadc0_user_sync2_net,
      in4 => c09f12_01_katadc0_user_sync3_net,
      bus_out => concatenate_y_net_x2
    );

  bus_create9_d0a2f41ff0: entity work.bus_create2_entity_26f43c2bb1
    port map (
      in1 => reinterpret0_0_output_port_net_x1,
      in2 => reinterpret0_1_output_port_net_x1,
      in3 => reinterpret0_2_output_port_net_x1,
      in4 => reinterpret0_3_output_port_net_x1,
      bus_out => concatenate_y_net_x3
    );

  bus_expand6_289d91e26d: entity work.bus_expand6_entity_289d91e26d
    port map (
      bus_in => delay2_q_net_x3,
      lsb_out1 => reinterpret1_output_port_net_x7,
      msb_out3 => slice3_y_net_x0,
      out2 => reinterpret2_output_port_net_x6
    );

  bus_expand_42329a104d: entity work.bus_expand_entity_42329a104d
    port map (
      bus_in => delay2_q_net_x4,
      lsb_out1 => reinterpret1_output_port_net_x6,
      msb_out2 => slice2_y_net_x5
    );

  calc_adc_sum_sq1_784d560211: entity work.calc_adc_sum_sq_entity_6e70db58e3
    port map (
      ce_1 => ce_1_sg_x706,
      clk_1 => clk_1_sg_x706,
      in1 => reinterpret2_output_port_net_x2,
      in2 => reinterpret1_output_port_net_x2,
      in3 => reinterpret3_output_port_net_x2,
      in4 => reinterpret4_output_port_net_x2,
      sum_sq => convert1_dout_net_x2
    );

  calc_adc_sum_sq_6e70db58e3: entity work.calc_adc_sum_sq_entity_6e70db58e3
    port map (
      ce_1 => ce_1_sg_x706,
      clk_1 => clk_1_sg_x706,
      in1 => reinterpret2_output_port_net_x1,
      in2 => reinterpret1_output_port_net_x1,
      in3 => reinterpret3_output_port_net_x1,
      in4 => reinterpret4_output_port_net_x1,
      sum_sq => convert1_dout_net_x1
    );

  cd_local_time_9ff6e19688: entity work.cd_local_time_entity_9ff6e19688
    port map (
      ce_1 => ce_1_sg_x706,
      clk_1 => clk_1_sg_x706,
      reset => logical14_y_net_x19,
      sync => delay1_q_net_x6,
      time_x0 => clock_op_net_x3
    );

  clk_frequency_747c20c338: entity work.status_entity_7b6169195a
    port map (
      ce_1 => ce_1_sg_x706,
      clk_1 => clk_1_sg_x706,
      reg_out => register19_q_net_x0,
      convert_x0 => c09f12_01_clk_frequency_user_data_in_net
    );

  coarse_a91220dfb7: entity work.coarse_entity_a91220dfb7
    port map (
      ce_1 => ce_1_sg_x706,
      channel_select => slice21_y_net_x3,
      clk_1 => clk_1_sg_x706,
      data0 => concatenate_y_net_x23,
      data1 => concatenate_y_net_x22,
      debug_chan => slice19_y_net_x1,
      debug_chansel => slice18_y_net_x1,
      debug_polsel => slice17_y_net_x1,
      fft_shift => slice6_y_net_x20,
      sync => delay_sync_q_net_x12,
      data_out => concatenate_y_net_x4,
      fft_of0 => delay2_q_net_x1,
      fft_of1 => delay3_q_net_x1,
      snap72 => concatenate_y_net_x21,
      sync_out => delay1_q_net_x0
    );

  coarse_delay_14c739abb5: entity work.coarse_delay_entity_14c739abb5
    port map (
      arm0 => slice13_y_net_x1,
      arm1 => slice11_y_net_x1,
      cd_lt => clock_op_net_x3,
      ce_1 => ce_1_sg_x706,
      clk_1 => clk_1_sg_x706,
      data0 => reinterpret2_output_port_net_x6,
      data1 => reinterpret1_output_port_net_x7,
      ld_time0 => concat9_y_net_x4,
      ld_time1 => concat2_y_net_x3,
      ld_val0 => concat22_y_net_x3,
      ld_val1 => concat1_y_net_x4,
      load_now => delay6_q_net_x7,
      mrst => logical14_y_net_x19,
      sync => delay1_q_net_x6,
      data4_0 => concatenate_y_net_x23,
      data4_1 => concatenate_y_net_x22,
      sync_out => delay_sync_q_net_x12
    );

  concat: entity work.concat_cab3ba8c97
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      in0(0) => edge_op_y_net_x0,
      in1 => concatenate_y_net_x3,
      in2 => concatenate_y_net_x1,
      y => concat_y_net_x1
    );

  concat1: entity work.concat_d01593648d
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      in0 => slice1_y_net,
      in1 => slice8_y_net,
      in2 => addsub1_s_net,
      in3 => slice15_y_net,
      in4 => slice10_y_net,
      y => concat1_y_net_x4
    );

  concat2: entity work.concat_6964870821
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      in0 => slice12_y_net,
      in1 => delay28_q_net,
      y => concat2_y_net_x3
    );

  concat21: entity work.concat_55c7ba900f
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      in0(0) => delay_q_net_x0,
      in1 => counter3_op_net,
      y => concat21_y_net_x0
    );

  concat22: entity work.concat_d01593648d
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      in0 => slice2_y_net,
      in1 => slice3_y_net,
      in2 => addsub_s_net,
      in3 => slice4_y_net,
      in4 => slice7_y_net,
      y => concat22_y_net_x3
    );

  concat6: entity work.concat_7d5080ab25
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      in0(0) => slice3_y_net_x0,
      in1 => slice16_y_net,
      y => concat6_y_net_x0
    );

  concat9: entity work.concat_6964870821
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      in0 => slice73_y_net,
      in1 => delay19_q_net,
      y => concat9_y_net_x4
    );

  constant14: entity work.constant_6293007044
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op(0) => constant14_op_net_x0
    );

  constant15: entity work.constant_6293007044
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op(0) => constant15_op_net_x1
    );

  constant17: entity work.constant_963ed6358a
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op(0) => constant17_op_net_x1
    );

  constant20: entity work.constant_963ed6358a
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op(0) => constant20_op_net
    );

  constant23: entity work.constant_6293007044
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op(0) => constant23_op_net_x1
    );

  constant24: entity work.constant_963ed6358a
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op(0) => constant24_op_net_x0
    );

  constant37: entity work.constant_a1d3429a21
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op => constant37_op_net
    );

  constant41: entity work.constant_37567836aa
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op => constant41_op_net_x0
    );

  constant46: entity work.constant_963ed6358a
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op(0) => constant46_op_net_x0
    );

  constant5: entity work.constant_61027e1056
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op => constant5_op_net
    );

  constant8: entity work.constant_37567836aa
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op => constant8_op_net_x0
    );

  convert_c5755984be: entity work.convert_entity_c5755984be
    port map (
      ce_1 => ce_1_sg_x706,
      clk_1 => clk_1_sg_x706,
      in_x0 => register3_q_net_x0,
      out1 => mux_y_net_x2
    );

  counter1: entity work.xlcounter_free_c09f12_01
    generic map (
      core_name0 => "cntr_11_0_ed472a6d5a5cb515",
      op_arith => xlUnsigned,
      op_width => 32
    )
    port map (
      ce => ce_1_sg_x706,
      clk => clk_1_sg_x706,
      clr => '0',
      en => "1",
      rst(0) => logical5_y_net_x2,
      op => counter1_op_net
    );

  counter3: entity work.xlcounter_free_c09f12_01
    generic map (
      core_name0 => "cntr_11_0_904cce14b13b282e",
      op_arith => xlUnsigned,
      op_width => 31
    )
    port map (
      ce => ce_1_sg_x706,
      clk => clk_1_sg_x706,
      clr => '0',
      en(0) => logical5_y_net_x2,
      rst(0) => logical14_y_net_x19,
      op => counter3_op_net
    );

  counter8: entity work.xlcounter_free_c09f12_01
    generic map (
      core_name0 => "cntr_11_0_ecb560ca58503876",
      op_arith => xlUnsigned,
      op_width => 12
    )
    port map (
      ce => ce_1_sg_x706,
      clk => clk_1_sg_x706,
      clr => '0',
      en(0) => slice_y_net_x1,
      rst(0) => slice1_y_net_x2,
      op => counter8_op_net_x3
    );

  ct_tvg_81cd2f878e: entity work.ct_tvg_entity_81cd2f878e
    port map (
      ce_1 => ce_1_sg_x706,
      clk_1 => clk_1_sg_x706,
      datain => concatenate_y_net_x6,
      syncin => delay6_q_net_x2,
      tvg_en => register2_q_net_x0,
      validin => delay16_q_net_x2,
      dataout => mux1_y_net_x5,
      syncout => delay_q_net_x4,
      validout => delay1_q_net_x4
    );

  decat0_2340466183: entity work.decat0_entity_2340466183
    port map (
      in1 => concatenate_y_net_x3,
      out1 => reinterpret2_output_port_net_x1,
      out2 => reinterpret1_output_port_net_x1,
      out3 => reinterpret3_output_port_net_x1,
      out4 => reinterpret4_output_port_net_x1
    );

  decat1_c52e2d685b: entity work.decat0_entity_2340466183
    port map (
      in1 => concatenate_y_net_x1,
      out1 => reinterpret2_output_port_net_x2,
      out2 => reinterpret1_output_port_net_x2,
      out3 => reinterpret3_output_port_net_x2,
      out4 => reinterpret4_output_port_net_x2
    );

  delay1: entity work.delay_9f02caa990
    port map (
      ce => ce_1_sg_x706,
      clk => clk_1_sg_x706,
      clr => '0',
      d(0) => slice1_y_net_x2,
      q(0) => delay1_q_net
    );

  delay100_f5402d4afa: entity work.delay100_entity_f5402d4afa
    port map (
      ce_1 => ce_1_sg_x706,
      clk_1 => clk_1_sg_x706,
      d => arm8_y_net_x0,
      q => register1_q_net_x0
    );

  delay10_8181a66134: entity work.delay10_entity_8181a66134
    port map (
      ce_1 => ce_1_sg_x706,
      clk_1 => clk_1_sg_x706,
      d => register0_q_net_x19,
      q => register0_q_net_x7
    );

  delay11_c2a06abd76: entity work.delay11_entity_c2a06abd76
    port map (
      ce_1 => ce_1_sg_x706,
      clk_1 => clk_1_sg_x706,
      d => logical1_y_net_x4,
      q => register0_q_net_x9
    );

  delay12: entity work.delay_9f02caa990
    port map (
      ce => ce_1_sg_x706,
      clk => clk_1_sg_x706,
      clr => '0',
      d(0) => slice_y_net_x1,
      q(0) => delay12_q_net
    );

  delay14: entity work.delay_2940aaa0cf
    port map (
      ce => ce_1_sg_x706,
      clk => clk_1_sg_x706,
      clr => '0',
      d => delay1_q_net_x1,
      q => delay14_q_net_x1
    );

  delay15: entity work.delay_9f02caa990
    port map (
      ce => ce_1_sg_x706,
      clk => clk_1_sg_x706,
      clr => '0',
      d(0) => delay5_q_net_x2,
      q(0) => delay15_q_net_x2
    );

  delay16: entity work.delay_9f02caa990
    port map (
      ce => ce_1_sg_x706,
      clk => clk_1_sg_x706,
      clr => '0',
      d(0) => delay4_q_net_x3,
      q(0) => delay16_q_net_x1
    );

  delay17: entity work.delay_672d2b8d1e
    port map (
      ce => ce_1_sg_x706,
      clk => clk_1_sg_x706,
      clr => '0',
      d => c09f12_01_coarse_ctrl_user_data_out_net,
      q => delay17_q_net
    );

  delay18: entity work.delay_672d2b8d1e
    port map (
      ce => ce_1_sg_x706,
      clk => clk_1_sg_x706,
      clr => '0',
      d => c09f12_01_ld_time_msw0_user_data_out_net,
      q => delay18_q_net
    );

  delay19: entity work.delay_672d2b8d1e
    port map (
      ce => ce_1_sg_x706,
      clk => clk_1_sg_x706,
      clr => '0',
      d => c09f12_01_ld_time_lsw0_user_data_out_net,
      q => delay19_q_net
    );

  delay20: entity work.delay_672d2b8d1e
    port map (
      ce => ce_1_sg_x706,
      clk => clk_1_sg_x706,
      clr => '0',
      d => c09f12_01_a0_fd0_user_data_out_net,
      q => delay20_q_net
    );

  delay21: entity work.delay_a5c036284d
    port map (
      ce => ce_1_sg_x706,
      clk => clk_1_sg_x706,
      clr => '0',
      d => delay6_q_net_x0,
      q => delay21_q_net_x1
    );

  delay22: entity work.delay_9f02caa990
    port map (
      ce => ce_1_sg_x706,
      clk => clk_1_sg_x706,
      clr => '0',
      d(0) => delay1_q_net_x0,
      q(0) => delay22_q_net_x2
    );

  delay23_60867eb0d0: entity work.delay11_entity_c2a06abd76
    port map (
      ce_1 => ce_1_sg_x706,
      clk_1 => clk_1_sg_x706,
      d => register0_q_net_x20,
      q => register0_q_net_x2
    );

  delay24: entity work.delay_a8953e790b
    port map (
      ce => ce_1_sg_x706,
      clk => clk_1_sg_x706,
      clr => '0',
      d => concatenate_y_net_x4,
      q => delay24_q_net_x1
    );

  delay25: entity work.delay_672d2b8d1e
    port map (
      ce => ce_1_sg_x706,
      clk => clk_1_sg_x706,
      clr => '0',
      d => c09f12_01_coarse_delay0_user_data_out_net,
      q => delay25_q_net
    );

  delay26: entity work.delay_672d2b8d1e
    port map (
      ce => ce_1_sg_x706,
      clk => clk_1_sg_x706,
      clr => '0',
      d => c09f12_01_a1_fd0_user_data_out_net,
      q => delay26_q_net
    );

  delay27: entity work.delay_672d2b8d1e
    port map (
      ce => ce_1_sg_x706,
      clk => clk_1_sg_x706,
      clr => '0',
      d => c09f12_01_ld_time_msw1_user_data_out_net,
      q => delay27_q_net
    );

  delay28: entity work.delay_672d2b8d1e
    port map (
      ce => ce_1_sg_x706,
      clk => clk_1_sg_x706,
      clr => '0',
      d => c09f12_01_ld_time_lsw1_user_data_out_net,
      q => delay28_q_net
    );

  delay29: entity work.delay_672d2b8d1e
    port map (
      ce => ce_1_sg_x706,
      clk => clk_1_sg_x706,
      clr => '0',
      d => c09f12_01_a0_fd1_user_data_out_net,
      q => delay29_q_net
    );

  delay2_2931713490: entity work.delay100_entity_f5402d4afa
    port map (
      ce_1 => ce_1_sg_x706,
      clk_1 => clk_1_sg_x706,
      d => arm9_y_net_x0,
      q => register1_q_net_x1
    );

  delay30: entity work.delay_672d2b8d1e
    port map (
      ce => ce_1_sg_x706,
      clk => clk_1_sg_x706,
      clr => '0',
      d => c09f12_01_coarse_delay1_user_data_out_net,
      q => delay30_q_net
    );

  delay32: entity work.delay_672d2b8d1e
    port map (
      ce => ce_1_sg_x706,
      clk => clk_1_sg_x706,
      clr => '0',
      d => c09f12_01_a1_fd1_user_data_out_net,
      q => delay32_q_net
    );

  delay33_c908484cd5: entity work.delay11_entity_c2a06abd76
    port map (
      ce_1 => ce_1_sg_x706,
      clk_1 => clk_1_sg_x706,
      d => register5_q_net_x1,
      q => register0_q_net_x1
    );

  delay35: entity work.delay_672d2b8d1e
    port map (
      ce => ce_1_sg_x706,
      clk => clk_1_sg_x706,
      clr => '0',
      d => c09f12_01_trig_level_user_data_out_net,
      q => delay35_q_net_x1
    );

  delay36: entity work.delay_672d2b8d1e
    port map (
      ce => ce_1_sg_x706,
      clk => clk_1_sg_x706,
      clr => '0',
      d => c09f12_01_gbe_port_user_data_out_net,
      q => delay36_q_net_x0
    );

  delay37: entity work.delay_672d2b8d1e
    port map (
      ce => ce_1_sg_x706,
      clk => clk_1_sg_x706,
      clr => '0',
      d => c09f12_01_gbe_ip0_user_data_out_net,
      q => delay37_q_net_x0
    );

  delay39: entity work.delay_672d2b8d1e
    port map (
      ce => ce_1_sg_x706,
      clk => clk_1_sg_x706,
      clr => '0',
      d => c09f12_01_adc_ctrl0_user_data_out_net,
      q => delay39_q_net
    );

  delay3_1a1c4e6264: entity work.delay3_entity_1a1c4e6264
    port map (
      ce_1 => ce_1_sg_x706,
      clk_1 => clk_1_sg_x706,
      d => pkt_out_x2,
      q => register0_q_net_x13
    );

  delay40: entity work.delay_672d2b8d1e
    port map (
      ce => ce_1_sg_x706,
      clk => clk_1_sg_x706,
      clr => '0',
      d => c09f12_01_adc_ctrl1_user_data_out_net,
      q => delay40_q_net
    );

  delay41: entity work.delay_672d2b8d1e
    port map (
      ce => ce_1_sg_x706,
      clk => clk_1_sg_x706,
      clr => '0',
      d => c09f12_01_control_user_data_out_net,
      q => delay41_q_net
    );

  delay42: entity work.delay_672d2b8d1e
    port map (
      ce => ce_1_sg_x706,
      clk => clk_1_sg_x706,
      clr => '0',
      d => c09f12_01_board_id_user_data_out_net,
      q => delay42_q_net_x0
    );

  delay43: entity work.delay_9f02caa990
    port map (
      ce => ce_1_sg_x706,
      clk => clk_1_sg_x706,
      clr => '0',
      d(0) => delay1_q_net,
      q(0) => delay43_q_net_x1
    );

  delay44: entity work.delay_2940aaa0cf
    port map (
      ce => ce_1_sg_x706,
      clk => clk_1_sg_x706,
      clr => '0',
      d => delay8_q_net,
      q => delay44_q_net_x1
    );

  delay45: entity work.delay_9f02caa990
    port map (
      ce => ce_1_sg_x706,
      clk => clk_1_sg_x706,
      clr => '0',
      d(0) => delay12_q_net,
      q(0) => delay45_q_net_x1
    );

  delay46: entity work.delay_e2d047c154
    port map (
      ce => ce_1_sg_x706,
      clk => clk_1_sg_x706,
      clr => '0',
      d => concatenate_y_net_x0,
      q => delay46_q_net_x1
    );

  delay4_dd35b94c7d: entity work.delay4_entity_dd35b94c7d
    port map (
      ce_1 => ce_1_sg_x706,
      clk_1 => clk_1_sg_x706,
      d => oob_out_x2,
      q => register0_q_net_x14
    );

  delay5_62d9e92bef: entity work.delay11_entity_c2a06abd76
    port map (
      ce_1 => ce_1_sg_x706,
      clk_1 => clk_1_sg_x706,
      d => valid_out_x3,
      q => register0_q_net_x15
    );

  delay6: entity work.xldelay
    generic map (
      latency => 1,
      reg_retiming => 0,
      reset => 0,
      width => 1
    )
    port map (
      ce => ce_1_sg_x706,
      clk => clk_1_sg_x706,
      d(0) => edge_op_y_net_x1,
      en => '1',
      rst => '1',
      q(0) => delay6_q_net_x7
    );

  delay7_fd89a59433: entity work.delay11_entity_c2a06abd76
    port map (
      ce_1 => ce_1_sg_x706,
      clk_1 => clk_1_sg_x706,
      d => constant17_op_net_x1,
      q => register0_q_net_x16
    );

  delay8: entity work.delay_2940aaa0cf
    port map (
      ce => ce_1_sg_x706,
      clk => clk_1_sg_x706,
      clr => '0',
      d => concatenate_y_net_x5,
      q => delay8_q_net
    );

  delay9_11a818bf77: entity work.delay3_entity_1a1c4e6264
    port map (
      ce_1 => ce_1_sg_x706,
      clk_1 => clk_1_sg_x706,
      d => register0_q_net_x18,
      q => register0_q_net_x17
    );

  delay_tr_status0_2fd3325278: entity work.status_entity_7b6169195a
    port map (
      ce_1 => ce_1_sg_x706,
      clk_1 => clk_1_sg_x706,
      reg_out => concat13_y_net_x3,
      convert_x0 => c09f12_01_delay_tr_status0_user_data_in_net
    );

  delay_tr_status1_61b3628fb4: entity work.status_entity_7b6169195a
    port map (
      ce_1 => ce_1_sg_x706,
      clk_1 => clk_1_sg_x706,
      reg_out => concat1_y_net_x5,
      convert_x0 => c09f12_01_delay_tr_status1_user_data_in_net
    );

  edge_detect1_d42863678e: entity work.edge_detect_entity_cb656284f4
    port map (
      ce_1 => ce_1_sg_x706,
      clk_1 => clk_1_sg_x706,
      in_x0 => logical1_y_net_x0,
      out_x0 => edge_op_y_net_x0
    );

  edge_detect2_e15afde8cf: entity work.edge_detect1_entity_75cedd2450
    port map (
      ce_1 => ce_1_sg_x706,
      clk_1 => clk_1_sg_x706,
      in_x0 => logical14_y_net_x19,
      out_x0 => edge_op_y_net_x1
    );

  edge_detect3_7fdf419596: entity work.edge_detect_entity_cb656284f4
    port map (
      ce_1 => ce_1_sg_x706,
      clk_1 => clk_1_sg_x706,
      in_x0 => delay5_q_net_x2,
      out_x0 => edge_op_y_net_x2
    );

  edge_detect4_b874b4c164: entity work.edge_detect_entity_cb656284f4
    port map (
      ce_1 => ce_1_sg_x706,
      clk_1 => clk_1_sg_x706,
      in_x0 => arm3_y_net_x0,
      out_x0 => edge_op_y_net_x3
    );

  edge_detect5_6f07fcbf3d: entity work.edge_detect_entity_cb656284f4
    port map (
      ce_1 => ce_1_sg_x706,
      clk_1 => clk_1_sg_x706,
      in_x0 => arm2_y_net_x0,
      out_x0 => edge_op_y_net_x4
    );

  edge_detect6_0acb394efe: entity work.edge_detect_entity_cb656284f4
    port map (
      ce_1 => ce_1_sg_x706,
      clk_1 => clk_1_sg_x706,
      in_x0 => arm1_y_net_x0,
      out_x0 => edge_op_y_net_x5
    );

  edge_detect7_b53eb9e8ff: entity work.edge_detect_entity_cb656284f4
    port map (
      ce_1 => ce_1_sg_x706,
      clk_1 => clk_1_sg_x706,
      in_x0 => man_sync1_y_net_x0,
      out_x0 => edge_op_y_net_x6
    );

  eq0_4c0c77caa2: entity work.eq0_entity_4c0c77caa2
    port map (
      addr => counter8_op_net_x3,
      ce_1 => ce_1_sg_x706,
      clk_1 => clk_1_sg_x706,
      data_in => constant41_op_net_x0,
      we => constant46_op_net_x0,
      convert_addr_x0 => c09f12_01_eq0_addr_net,
      convert_din1_x0 => c09f12_01_eq0_data_in_net,
      convert_we_x0 => c09f12_01_eq0_we_net
    );

  eq1_8c899296cf: entity work.eq0_entity_4c0c77caa2
    port map (
      addr => counter8_op_net_x3,
      ce_1 => ce_1_sg_x706,
      clk_1 => clk_1_sg_x706,
      data_in => constant8_op_net_x0,
      we => constant24_op_net_x0,
      convert_addr_x0 => c09f12_01_eq1_addr_net,
      convert_din1_x0 => c09f12_01_eq1_data_in_net,
      convert_we_x0 => c09f12_01_eq1_we_net
    );

  fdfs_063070395a: entity work.fdfs_entity_063070395a
    port map (
      arm0 => slice13_y_net_x1,
      arm1 => slice11_y_net_x1,
      ce_1 => ce_1_sg_x706,
      clk_1 => clk_1_sg_x706,
      data => delay14_q_net_x1,
      dv => delay15_q_net_x2,
      index => delay21_q_net_x1,
      ld_time0 => concat9_y_net_x4,
      ld_time1 => concat2_y_net_x3,
      ld_val0 => concat22_y_net_x3,
      ld_val1 => concat1_y_net_x4,
      load_now => delay6_q_net_x7,
      mrst => logical14_y_net_x19,
      sync => delay16_q_net_x1,
      tvg_en => register5_q_net_x2,
      window_start => edge_op_y_net_x2,
      data_out => concatenate_y_net_x5,
      dv_out => slice_y_net_x1,
      fd_status0 => concat13_y_net_x3,
      fd_status1 => concat1_y_net_x5,
      sync_out => slice1_y_net_x2
    );

  fine_d92fd9f38e: entity work.fine_entity_d92fd9f38e
    port map (
      ce_1 => ce_1_sg_x706,
      clk_1 => clk_1_sg_x706,
      coarse_chan_sel => slice21_y_net_x3,
      data => delay24_q_net_x1,
      mrst => logical14_y_net_x19,
      sync => delay22_q_net_x2,
      tvg_en => register4_q_net_x0,
      data_index => delay6_q_net_x0,
      data_out => delay1_q_net_x1,
      fft_dv => delay5_q_net_x2,
      fft_or0 => constant3_op_net_x2,
      fft_or1 => constant1_op_net_x3,
      snap_128bit => concatenate_y_net_x26,
      snap_buffer72 => concatenate_y_net_x24,
      snap_pfb72 => concatenate_y_net_x25,
      sync_out => delay4_q_net_x3
    );

  fstatcbits0: entity work.constant_e3e2bf8850
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op => fstatcbits0_op_net_x0
    );

  fstatcbits1: entity work.constant_e3e2bf8850
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op => fstatcbits1_op_net_x0
    );

  fstatfbits0: entity work.constant_7770c5583c
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op => fstatfbits0_op_net_x0
    );

  fstatfbits1: entity work.constant_7770c5583c
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op => fstatfbits1_op_net_x0
    );

  fstatus0_4bc9dfbca6: entity work.status_entity_7b6169195a
    port map (
      ce_1 => ce_1_sg_x706,
      clk_1 => clk_1_sg_x706,
      reg_out => concat13_y_net_x1,
      convert_x0 => c09f12_01_fstatus0_user_data_in_net
    );

  fstatus1_9e03235355: entity work.status_entity_7b6169195a
    port map (
      ce_1 => ce_1_sg_x706,
      clk_1 => clk_1_sg_x706,
      reg_out => concat13_y_net_x2,
      convert_x0 => c09f12_01_fstatus1_user_data_in_net
    );

  gbe0_a4d9102883: entity work.gbe0_entity_a4d9102883
    port map (
      ce_1 => ce_1_sg_x706,
      clk_1 => clk_1_sg_x706,
      rst => logical3_y_net_x0,
      rx_ack => constant14_op_net_x0,
      tx_data => register0_q_net_x17,
      tx_dest_ip => register0_q_net_x7,
      tx_dest_port => delay36_q_net_x0,
      tx_end_of_frame => register0_q_net_x9,
      tx_valid => logical2_y_net_x3,
      convert_rst_x0 => c09f12_01_gbe0_rst_net,
      convert_rx_ack_x0 => c09f12_01_gbe0_rx_ack_net,
      convert_rx_overrun_ack_x0 => c09f12_01_gbe0_rx_overrun_ack_net,
      convert_tx_data_x0 => c09f12_01_gbe0_tx_data_net,
      convert_tx_dest_ip_x0 => c09f12_01_gbe0_tx_dest_ip_net,
      convert_tx_end_of_frame_x0 => c09f12_01_gbe0_tx_end_of_frame_net,
      convert_tx_port_x0 => c09f12_01_gbe0_tx_dest_port_net,
      convert_tx_valid_x0 => c09f12_01_gbe0_tx_valid_net
    );

  gbe_err_4ff5b5b3bc: entity work.gbe_err_entity_4ff5b5b3bc
    port map (
      ce_1 => ce_1_sg_x706,
      clk_1 => clk_1_sg_x706,
      discard => register0_q_net_x1,
      eof => register0_q_net_x9,
      rst => edge_op_y_net_x4,
      valid => logical2_y_net_x3,
      err_cnt => payload_cnt1_op_net_x1,
      tx_cnt => payload_cnt_op_net_x1
    );

  gbe_tx_cnt0_48aed4a82e: entity work.status_entity_7b6169195a
    port map (
      ce_1 => ce_1_sg_x706,
      clk_1 => clk_1_sg_x706,
      reg_out => payload_cnt_op_net_x1,
      convert_x0 => c09f12_01_gbe_tx_cnt0_user_data_in_net
    );

  gbe_tx_err_cnt0_b43f17e31c: entity work.status_entity_7b6169195a
    port map (
      ce_1 => ce_1_sg_x706,
      clk_1 => clk_1_sg_x706,
      reg_out => payload_cnt1_op_net_x1,
      convert_x0 => c09f12_01_gbe_tx_err_cnt0_user_data_in_net
    );

  inverter: entity work.inverter_e5b38cca3b
    port map (
      ce => ce_1_sg_x706,
      clk => clk_1_sg_x706,
      clr => '0',
      ip(0) => c09f12_01_gbe0_led_up_net,
      op(0) => inverter_op_net_x1
    );

  inverter1: entity work.inverter_e5b38cca3b
    port map (
      ce => ce_1_sg_x706,
      clk => clk_1_sg_x706,
      clr => '0',
      ip(0) => register7_q_net_x0,
      op(0) => inverter1_op_net
    );

  inverter2: entity work.inverter_e5b38cca3b
    port map (
      ce => ce_1_sg_x706,
      clk => clk_1_sg_x706,
      clr => '0',
      ip(0) => register7_q_net_x1,
      op(0) => inverter2_op_net
    );

  inverter3: entity work.inverter_e5b38cca3b
    port map (
      ce => ce_1_sg_x706,
      clk => clk_1_sg_x706,
      clr => '0',
      ip(0) => logical10_y_net_x1,
      op(0) => inverter3_op_net_x0
    );

  inverter4: entity work.inverter_e5b38cca3b
    port map (
      ce => ce_1_sg_x706,
      clk => clk_1_sg_x706,
      clr => '0',
      ip(0) => logical8_y_net_x1,
      op(0) => inverter4_op_net
    );

  inverter5: entity work.inverter_e5b38cca3b
    port map (
      ce => ce_1_sg_x706,
      clk => clk_1_sg_x706,
      clr => '0',
      ip(0) => logical8_y_net_x1,
      op(0) => inverter5_op_net_x0
    );

  inverter6: entity work.inverter_e5b38cca3b
    port map (
      ce => ce_1_sg_x706,
      clk => clk_1_sg_x706,
      clr => '0',
      ip(0) => logical10_y_net_x1,
      op(0) => inverter6_op_net
    );

  katadc0_180325740b: entity work.katadc0_entity_180325740b
    port map (
      atten0 => slice30_y_net_x0,
      atten1 => slice34_y_net_x0,
      c09f12_01_katadc0_user_datai0 => c09f12_01_katadc0_user_datai0_net,
      c09f12_01_katadc0_user_datai1 => c09f12_01_katadc0_user_datai1_net,
      c09f12_01_katadc0_user_datai2 => c09f12_01_katadc0_user_datai2_net,
      c09f12_01_katadc0_user_datai3 => c09f12_01_katadc0_user_datai3_net,
      c09f12_01_katadc0_user_dataq0 => c09f12_01_katadc0_user_dataq0_net,
      c09f12_01_katadc0_user_dataq1 => c09f12_01_katadc0_user_dataq1_net,
      c09f12_01_katadc0_user_dataq2 => c09f12_01_katadc0_user_dataq2_net,
      c09f12_01_katadc0_user_dataq3 => c09f12_01_katadc0_user_dataq3_net,
      ce_1 => ce_1_sg_x706,
      clk_1 => clk_1_sg_x706,
      en0 => logical8_y_net_x1,
      en1 => logical10_y_net_x1,
      cast0_x0 => c09f12_01_katadc0_gain_value_net,
      cast1_x0 => c09f12_01_katadc0_gain_load_net,
      data0_0 => reinterpret0_0_output_port_net_x1,
      data0_1 => reinterpret0_1_output_port_net_x1,
      data0_2 => reinterpret0_2_output_port_net_x1,
      data0_3 => reinterpret0_3_output_port_net_x1,
      data1_0 => reinterpret1_0_output_port_net_x1,
      data1_1 => reinterpret1_1_output_port_net_x1,
      data1_2 => reinterpret1_2_output_port_net_x1,
      data1_3 => reinterpret1_3_output_port_net_x1
    );

  leds_7bfe27f09c: entity work.leds_entity_7bfe27f09c
    port map (
      adc_en0 => logical8_y_net_x1,
      adc_en1 => logical10_y_net_x1,
      ce_1 => ce_1_sg_x706,
      clk_1 => clk_1_sg_x706,
      comms => logical4_y_net_x2,
      fancy_en => arm12_y_net_x0,
      or0 => logical17_y_net_x2,
      or1 => logical12_y_net_x2,
      pps => logical5_y_net_x2,
      rst => logical14_y_net_x19,
      sync_led => delay1_q_net_x6,
      warning => logical7_y_net_x0,
      roach_gpioa0 => c09f12_01_leds_roach_gpioa0_gateway_net,
      roach_gpioa1 => c09f12_01_leds_roach_gpioa1_gateway_net,
      roach_gpioa2 => c09f12_01_leds_roach_gpioa2_gateway_net,
      roach_gpioa3 => c09f12_01_leds_roach_gpioa3_gateway_net,
      roach_gpioa4 => c09f12_01_leds_roach_gpioa4_gateway_net,
      roach_gpioa5 => c09f12_01_leds_roach_gpioa5_gateway_net,
      roach_gpioa6 => c09f12_01_leds_roach_gpioa6_gateway_net,
      roach_gpioa7 => c09f12_01_leds_roach_gpioa7_gateway_net,
      roach_gpioa_oe => c09f12_01_leds_roach_gpioa_oe_gateway_net,
      roach_led0 => c09f12_01_leds_roach_led0_gateway_net,
      roach_led1 => c09f12_01_leds_roach_led1_gateway_net,
      roach_led2 => c09f12_01_leds_roach_led2_gateway_net,
      roach_led3 => c09f12_01_leds_roach_led3_gateway_net,
      subsystem => gateway_t1_net,
      subsystem_x0 => gateway_t3_net,
      subsystem_x1 => gateway_t2_net,
      subsystem_x10 => gateway_out1_x0_net,
      subsystem_x11 => gateway_t1_x1_net,
      subsystem_x12 => gateway_t3_x1_net,
      subsystem_x13 => gateway_t2_x1_net,
      subsystem_x14 => gateway_out2_x1_net,
      subsystem_x15 => gateway_out_x1_net,
      subsystem_x16 => gateway_out1_x1_net,
      subsystem_x17 => gateway_t1_x2_net,
      subsystem_x18 => gateway_t3_x2_net,
      subsystem_x19 => gateway_t2_x2_net,
      subsystem_x2 => gateway_out2_net,
      subsystem_x20 => gateway_out2_x2_net,
      subsystem_x21 => gateway_out_x2_net,
      subsystem_x22 => gateway_out1_x2_net,
      subsystem_x23 => gateway_t1_x3_net,
      subsystem_x24 => gateway_t3_x3_net,
      subsystem_x25 => gateway_t2_x3_net,
      subsystem_x26 => gateway_out2_x3_net,
      subsystem_x27 => gateway_out_x3_net,
      subsystem_x28 => gateway_out1_x3_net,
      subsystem_x29 => gateway_t1_x4_net,
      subsystem_x3 => gateway_out_net,
      subsystem_x30 => gateway_t3_x4_net,
      subsystem_x31 => gateway_t2_x4_net,
      subsystem_x32 => gateway_out2_x4_net,
      subsystem_x33 => gateway_out_x4_net,
      subsystem_x34 => gateway_out1_x4_net,
      subsystem_x35 => gateway_t1_x5_net,
      subsystem_x36 => gateway_t3_x5_net,
      subsystem_x37 => gateway_t2_x5_net,
      subsystem_x38 => gateway_out2_x5_net,
      subsystem_x39 => gateway_out_x5_net,
      subsystem_x4 => gateway_out1_net,
      subsystem_x40 => gateway_out1_x5_net,
      subsystem_x41 => gateway_t1_x6_net,
      subsystem_x42 => gateway_t3_x6_net,
      subsystem_x43 => gateway_t2_x6_net,
      subsystem_x44 => gateway_out2_x6_net,
      subsystem_x45 => gateway_out_x6_net,
      subsystem_x46 => gateway_out1_x6_net,
      subsystem_x5 => gateway_t1_x0_net,
      subsystem_x6 => gateway_t3_x0_net,
      subsystem_x7 => gateway_t2_x0_net,
      subsystem_x8 => gateway_out2_x0_net,
      subsystem_x9 => gateway_out_x0_net
    );

  logical1: entity work.logical_a6d07705dd
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0(0) => slice35_y_net,
      d1(0) => slice36_y_net,
      d2(0) => slice40_y_net,
      d3(0) => slice45_y_net,
      y(0) => logical1_y_net_x0
    );

  logical10: entity work.logical_80f90b97d0
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0(0) => logical9_y_net,
      d1(0) => slice33_y_net,
      y(0) => logical10_y_net_x1
    );

  logical11: entity work.logical_80f90b97d0
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0(0) => edge_op_y_net_x0,
      d1(0) => logical14_y_net_x19,
      y(0) => logical11_y_net
    );

  logical12: entity work.logical_5773759131
    port map (
      ce => ce_1_sg_x706,
      clk => clk_1_sg_x706,
      clr => '0',
      d0(0) => c09f12_01_katadc0_user_outofrange1_net,
      d1(0) => delay3_q_net_x1,
      d2(0) => constant1_op_net_x3,
      y(0) => logical12_y_net_x2
    );

  logical14: entity work.logical_aacf6e1b0e
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0(0) => slice78_y_net,
      d1(0) => delay_q_net_x0,
      y(0) => logical14_y_net_x19
    );

  logical17: entity work.logical_5773759131
    port map (
      ce => ce_1_sg_x706,
      clk => clk_1_sg_x706,
      clr => '0',
      d0(0) => c09f12_01_katadc0_user_outofrange0_net,
      d1(0) => delay2_q_net_x1,
      d2(0) => constant3_op_net_x2,
      y(0) => logical17_y_net_x2
    );

  logical2: entity work.logical_80f90b97d0
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0(0) => register0_q_net_x2,
      d1(0) => register1_q_net_x0,
      y(0) => logical2_y_net_x3
    );

  logical21: entity work.logical_aacf6e1b0e
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0(0) => relational_op_net,
      d1(0) => relational1_op_net,
      y(0) => logical21_y_net_x1
    );

  logical3: entity work.logical_444d3f5046
    port map (
      ce => ce_1_sg_x706,
      clk => clk_1_sg_x706,
      clr => '0',
      d0(0) => constant20_op_net,
      d1(0) => register1_q_net_x1,
      y(0) => logical3_y_net_x0
    );

  logical4: entity work.logical_444d3f5046
    port map (
      ce => ce_1_sg_x706,
      clk => clk_1_sg_x706,
      clr => '0',
      d0(0) => inverter_op_net_x1,
      d1(0) => c09f12_01_gbe0_tx_overflow_net,
      y(0) => logical4_y_net_x2
    );

  logical5: entity work.logical_aacf6e1b0e
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0(0) => edge_op_y_net_x6,
      d1(0) => edge_op_y_net_x0,
      y(0) => logical5_y_net_x2
    );

  logical6: entity work.logical_aacf6e1b0e
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0(0) => inverter1_op_net,
      d1(0) => arm10_y_net,
      y(0) => logical6_y_net
    );

  logical7: entity work.logical_1df98b5f16
    port map (
      ce => ce_1_sg_x706,
      clk => clk_1_sg_x706,
      clr => '0',
      d0(0) => inverter_op_net_x1,
      d1(0) => c09f12_01_gbe0_tx_overflow_net,
      d2(0) => inverter4_op_net,
      d3(0) => inverter6_op_net,
      d4(0) => logical21_y_net_x1,
      d5(0) => logical12_y_net_x3,
      y(0) => logical7_y_net_x0
    );

  logical8: entity work.logical_80f90b97d0
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0(0) => logical6_y_net,
      d1(0) => slice29_y_net,
      y(0) => logical8_y_net_x1
    );

  logical9: entity work.logical_aacf6e1b0e
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      d0(0) => inverter2_op_net,
      d1(0) => arm10_y_net,
      y(0) => logical9_y_net
    );

  man_sync1: entity work.xlslice
    generic map (
      new_lsb => 1,
      new_msb => 1,
      x_width => 32,
      y_width => 1
    )
    port map (
      x => delay41_q_net,
      y(0) => man_sync1_y_net_x0
    );

  mcount_lsw_20ce63de57: entity work.status_entity_7b6169195a
    port map (
      ce_1 => ce_1_sg_x706,
      clk_1 => clk_1_sg_x706,
      reg_out => slice_y_net_x0,
      convert_x0 => c09f12_01_mcount_lsw_user_data_in_net
    );

  mcount_msw_d32deeb8a5: entity work.status_entity_7b6169195a
    port map (
      ce_1 => ce_1_sg_x706,
      clk_1 => clk_1_sg_x706,
      reg_out => slice9_y_net_x0,
      convert_x0 => c09f12_01_mcount_msw_user_data_in_net
    );

  packetiser_38cd0f1979: entity work.packetiser_entity_38cd0f1979
    port map (
      antbase => delay42_q_net_x0,
      ce_1 => ce_1_sg_x706,
      clk_1 => clk_1_sg_x706,
      data_x0 => mux3_y_net_x1,
      dv_x0 => delay1_q_net_x5,
      mrst => logical14_y_net_x19,
      sync => delay2_q_net_x2,
      out_oob => oob_out_x2,
      out_pkt => pkt_out_x2,
      out_valid => valid_out_x3
    );

  packetiser_tvg_contiguous_8f915d99f4: entity work.packetiser_tvg_contiguous_entity_8f915d99f4
    port map (
      ce_1 => ce_1_sg_x706,
      clk_1 => clk_1_sg_x706,
      din => mux1_y_net_x4,
      dv => dvalid_x3,
      sync => sync_out_x3,
      use_tvg => register1_q_net_x2,
      dout => mux3_y_net_x1,
      dv_out => delay1_q_net_x5,
      sync_out_x1 => delay2_q_net_x2
    );

  pps_count_06cc0b86fd: entity work.status_entity_7b6169195a
    port map (
      ce_1 => ce_1_sg_x706,
      clk_1 => clk_1_sg_x706,
      reg_out => concat21_y_net_x0,
      convert_x0 => c09f12_01_pps_count_user_data_in_net
    );

  qdr_ct_bc79c61df7: entity work.qdr_ct_entity_bc79c61df7
    port map (
      c09f12_01_qdr_ct_qdr_ack => c09f12_01_qdr_ct_qdr_ack_net,
      c09f12_01_qdr_ct_qdr_cal_fail => c09f12_01_qdr_ct_qdr_cal_fail_net,
      c09f12_01_qdr_ct_qdr_data_out => c09f12_01_qdr_ct_qdr_data_out_net,
      c09f12_01_qdr_ct_qdr_phy_ready => c09f12_01_qdr_ct_qdr_phy_ready_net,
      ce_1 => ce_1_sg_x706,
      clk_1 => clk_1_sg_x706,
      d => mux1_y_net_x5,
      en => delay1_q_net_x4,
      sync => delay_q_net_x4,
      dv => dvalid_x3,
      q => mux1_y_net_x4,
      qdr => c09f12_01_qdr_ct_qdr_address_net,
      qdr_error => logical12_y_net_x3,
      qdr_x0 => c09f12_01_qdr_ct_qdr_be_net,
      qdr_x1 => c09f12_01_qdr_ct_qdr_data_in_net,
      qdr_x2 => c09f12_01_qdr_ct_qdr_rd_en_net,
      qdr_x3 => c09f12_01_qdr_ct_qdr_wr_en_net,
      snap64 => concatenate_y_net_x20,
      sync_out => sync_out_x3
    );

  quantisation_112ce4d84a: entity work.quantisation_entity_112ce4d84a
    port map (
      ce_1 => ce_1_sg_x706,
      clk_1 => clk_1_sg_x706,
      data => delay44_q_net_x1,
      dv => delay45_q_net_x1,
      eq_bus => delay46_q_net_x1,
      sync => delay43_q_net_x1,
      quant_data => concatenate_y_net_x6,
      quant_dv => delay16_q_net_x2,
      quant_of => logical_y_net_x3,
      sync_out => delay6_q_net_x2
    );

  rcs_fb62b436e0: entity work.rcs_entity_fb62b436e0
    port map (
      ce_1 => ce_1_sg_x706,
      clk_1 => clk_1_sg_x706,
      app => c09f12_01_rcs_app_user_data_in_net,
      lib => c09f12_01_rcs_lib_user_data_in_net,
      user => c09f12_01_rcs_user_user_data_in_net
    );

  register1: entity work.xlregister
    generic map (
      d_width => 1,
      init_value => b"0"
    )
    port map (
      ce => ce_1_sg_x706,
      clk => clk_1_sg_x706,
      d(0) => arm5_y_net,
      en(0) => edge_op_y_net_x3,
      rst => "0",
      q(0) => register1_q_net_x2
    );

  register19: entity work.xlregister
    generic map (
      d_width => 32,
      init_value => b"00000000000000000000000000000000"
    )
    port map (
      ce => ce_1_sg_x706,
      clk => clk_1_sg_x706,
      d => counter1_op_net,
      en(0) => logical5_y_net_x2,
      rst => "0",
      q => register19_q_net_x0
    );

  register2: entity work.xlregister
    generic map (
      d_width => 1,
      init_value => b"0"
    )
    port map (
      ce => ce_1_sg_x706,
      clk => clk_1_sg_x706,
      d(0) => arm4_y_net,
      en(0) => edge_op_y_net_x3,
      rst => "0",
      q(0) => register2_q_net_x0
    );

  register3: entity work.xlregister
    generic map (
      d_width => 4,
      init_value => b"0000"
    )
    port map (
      ce => ce_1_sg_x706,
      clk => clk_1_sg_x706,
      d => concatenate_y_net_x2,
      en(0) => logical11_y_net,
      rst => "0",
      q => register3_q_net_x0
    );

  register4: entity work.xlregister
    generic map (
      d_width => 1,
      init_value => b"0"
    )
    port map (
      ce => ce_1_sg_x706,
      clk => clk_1_sg_x706,
      d(0) => arm11_y_net,
      en(0) => edge_op_y_net_x3,
      rst => "0",
      q(0) => register4_q_net_x0
    );

  register5: entity work.xlregister
    generic map (
      d_width => 1,
      init_value => b"0"
    )
    port map (
      ce => ce_1_sg_x706,
      clk => clk_1_sg_x706,
      d(0) => arm6_y_net,
      en(0) => edge_op_y_net_x3,
      rst => "0",
      q(0) => register5_q_net_x2
    );

  relational: entity work.relational_34fc311f5b
    port map (
      a => register19_q_net_x0,
      b => constant5_op_net,
      ce => ce_1_sg_x706,
      clk => clk_1_sg_x706,
      clr => '0',
      op(0) => relational_op_net
    );

  relational1: entity work.relational_f5d1a8e480
    port map (
      a => register19_q_net_x0,
      b => constant37_op_net,
      ce => ce_1_sg_x706,
      clk => clk_1_sg_x706,
      clr => '0',
      op(0) => relational1_op_net
    );

  repack_for_snap_435cb8b557: entity work.repack_for_snap_entity_435cb8b557
    port map (
      data_in => mux1_y_net_x5,
      dv_in => delay1_q_net_x4,
      sync_in => delay_q_net_x4,
      snap_16bit => concatenate_y_net_x27
    );

  slice: entity work.xlslice
    generic map (
      new_lsb => 0,
      new_msb => 31,
      x_width => 64,
      y_width => 32
    )
    port map (
      x => clock_op_net_x3,
      y => slice_y_net_x0
    );

  slice1: entity work.xlslice
    generic map (
      new_lsb => 0,
      new_msb => 15,
      x_width => 32,
      y_width => 16
    )
    port map (
      x => delay29_q_net,
      y => slice1_y_net
    );

  slice10: entity work.xlslice
    generic map (
      new_lsb => 16,
      new_msb => 31,
      x_width => 32,
      y_width => 16
    )
    port map (
      x => delay32_q_net,
      y => slice10_y_net
    );

  slice11: entity work.xlslice
    generic map (
      new_lsb => 31,
      new_msb => 31,
      x_width => 32,
      y_width => 1
    )
    port map (
      x => delay27_q_net,
      y(0) => slice11_y_net_x1
    );

  slice12: entity work.xlslice
    generic map (
      new_lsb => 0,
      new_msb => 15,
      x_width => 32,
      y_width => 16
    )
    port map (
      x => delay27_q_net,
      y => slice12_y_net
    );

  slice13: entity work.xlslice
    generic map (
      new_lsb => 31,
      new_msb => 31,
      x_width => 32,
      y_width => 1
    )
    port map (
      x => delay18_q_net,
      y(0) => slice13_y_net_x1
    );

  slice14: entity work.xlslice
    generic map (
      new_lsb => 0,
      new_msb => 14,
      x_width => 32,
      y_width => 15
    )
    port map (
      x => delay30_q_net,
      y => slice14_y_net
    );

  slice15: entity work.xlslice
    generic map (
      new_lsb => 0,
      new_msb => 15,
      x_width => 32,
      y_width => 16
    )
    port map (
      x => delay32_q_net,
      y => slice15_y_net
    );

  slice16: entity work.xlslice
    generic map (
      new_lsb => 0,
      new_msb => 31,
      x_width => 64,
      y_width => 32
    )
    port map (
      x => clock_op_net_x3,
      y => slice16_y_net
    );

  slice17: entity work.xlslice
    generic map (
      new_lsb => 20,
      new_msb => 20,
      x_width => 32,
      y_width => 1
    )
    port map (
      x => delay17_q_net,
      y(0) => slice17_y_net_x1
    );

  slice18: entity work.xlslice
    generic map (
      new_lsb => 21,
      new_msb => 21,
      x_width => 32,
      y_width => 1
    )
    port map (
      x => delay17_q_net,
      y(0) => slice18_y_net_x1
    );

  slice19: entity work.xlslice
    generic map (
      new_lsb => 22,
      new_msb => 27,
      x_width => 32,
      y_width => 6
    )
    port map (
      x => delay17_q_net,
      y => slice19_y_net_x1
    );

  slice2: entity work.xlslice
    generic map (
      new_lsb => 0,
      new_msb => 15,
      x_width => 32,
      y_width => 16
    )
    port map (
      x => delay20_q_net,
      y => slice2_y_net
    );

  slice21: entity work.xlslice
    generic map (
      new_lsb => 10,
      new_msb => 19,
      x_width => 32,
      y_width => 10
    )
    port map (
      x => delay17_q_net,
      y => slice21_y_net_x3
    );

  slice29: entity work.xlslice
    generic map (
      new_lsb => 31,
      new_msb => 31,
      x_width => 32,
      y_width => 1
    )
    port map (
      x => delay39_q_net,
      y(0) => slice29_y_net
    );

  slice3: entity work.xlslice
    generic map (
      new_lsb => 16,
      new_msb => 31,
      x_width => 32,
      y_width => 16
    )
    port map (
      x => delay20_q_net,
      y => slice3_y_net
    );

  slice30: entity work.xlslice
    generic map (
      new_lsb => 0,
      new_msb => 5,
      x_width => 32,
      y_width => 6
    )
    port map (
      x => delay39_q_net,
      y => slice30_y_net_x0
    );

  slice33: entity work.xlslice
    generic map (
      new_lsb => 31,
      new_msb => 31,
      x_width => 32,
      y_width => 1
    )
    port map (
      x => delay40_q_net,
      y(0) => slice33_y_net
    );

  slice34: entity work.xlslice
    generic map (
      new_lsb => 0,
      new_msb => 5,
      x_width => 32,
      y_width => 6
    )
    port map (
      x => delay40_q_net,
      y => slice34_y_net_x0
    );

  slice35: entity work.xlslice
    generic map (
      new_lsb => 3,
      new_msb => 3,
      x_width => 4,
      y_width => 1
    )
    port map (
      x => concatenate_y_net_x2,
      y(0) => slice35_y_net
    );

  slice36: entity work.xlslice
    generic map (
      new_lsb => 2,
      new_msb => 2,
      x_width => 4,
      y_width => 1
    )
    port map (
      x => concatenate_y_net_x2,
      y(0) => slice36_y_net
    );

  slice38: entity work.xlslice
    generic map (
      new_lsb => 0,
      new_msb => 14,
      x_width => 32,
      y_width => 15
    )
    port map (
      x => delay25_q_net,
      y => slice38_y_net
    );

  slice4: entity work.xlslice
    generic map (
      new_lsb => 0,
      new_msb => 15,
      x_width => 32,
      y_width => 16
    )
    port map (
      x => delay26_q_net,
      y => slice4_y_net
    );

  slice40: entity work.xlslice
    generic map (
      new_lsb => 1,
      new_msb => 1,
      x_width => 4,
      y_width => 1
    )
    port map (
      x => concatenate_y_net_x2,
      y(0) => slice40_y_net
    );

  slice45: entity work.xlslice
    generic map (
      new_lsb => 0,
      new_msb => 0,
      x_width => 4,
      y_width => 1
    )
    port map (
      x => concatenate_y_net_x2,
      y(0) => slice45_y_net
    );

  slice6: entity work.xlslice
    generic map (
      new_lsb => 0,
      new_msb => 9,
      x_width => 32,
      y_width => 10
    )
    port map (
      x => delay17_q_net,
      y => slice6_y_net_x20
    );

  slice7: entity work.xlslice
    generic map (
      new_lsb => 16,
      new_msb => 31,
      x_width => 32,
      y_width => 16
    )
    port map (
      x => delay26_q_net,
      y => slice7_y_net
    );

  slice73: entity work.xlslice
    generic map (
      new_lsb => 0,
      new_msb => 15,
      x_width => 32,
      y_width => 16
    )
    port map (
      x => delay18_q_net,
      y => slice73_y_net
    );

  slice78: entity work.xlslice
    generic map (
      new_lsb => 0,
      new_msb => 0,
      x_width => 32,
      y_width => 1
    )
    port map (
      x => delay41_q_net,
      y(0) => slice78_y_net
    );

  slice8: entity work.xlslice
    generic map (
      new_lsb => 16,
      new_msb => 31,
      x_width => 32,
      y_width => 16
    )
    port map (
      x => delay29_q_net,
      y => slice8_y_net
    );

  slice9: entity work.xlslice
    generic map (
      new_lsb => 32,
      new_msb => 63,
      x_width => 64,
      y_width => 32
    )
    port map (
      x => clock_op_net_x3,
      y => slice9_y_net_x0
    );

  snap_debug_e25ad94b28: entity work.snap_debug_entity_e25ad94b28
    port map (
      c09f12_01_snap_debug_ctrl_user_data_out => c09f12_01_snap_debug_ctrl_user_data_out_net,
      ce_1 => ce_1_sg_x706,
      clk_1 => clk_1_sg_x706,
      din => reinterpret2_output_port_net_x7,
      trig => slice1_y_net_x7,
      we => slice3_y_net_x7,
      addr => c09f12_01_snap_debug_addr_user_data_in_net,
      bram => c09f12_01_snap_debug_bram_addr_net,
      bram_x0 => c09f12_01_snap_debug_bram_data_in_net,
      bram_x1 => c09f12_01_snap_debug_bram_we_net
    );

  subsystem1_1d30495a1f: entity work.subsystem1_entity_1d30495a1f
    port map (
      ce_1 => ce_1_sg_x706,
      clk_1 => clk_1_sg_x706,
      data_in => register0_q_net_x17,
      eof_in => register0_q_net_x9,
      ip_in => register0_q_net_x7,
      led_tx => c09f12_01_gbe0_led_tx_net,
      link_up => c09f12_01_gbe0_led_up_net,
      tx_full => c09f12_01_gbe0_tx_afull_net,
      tx_over => c09f12_01_gbe0_tx_overflow_net,
      valid_in => logical2_y_net_x3,
      debug_out => concatenate_y_net_x12
    );

  subsystem2_c612b0eca6: entity work.subsystem2_entity_c612b0eca6
    port map (
      ce_1 => ce_1_sg_x706,
      clk_1 => clk_1_sg_x706,
      data_in => pkt_out_x2,
      link_down => constant17_op_net_x1,
      oob_in => oob_out_x2,
      we_in => valid_out_x3,
      debug_out => concatenate_y_net_x13
    );

  subsystem3_78a9a05795: entity work.subsystem_entity_2a44c7d8dc
    port map (
      adc_disabled => inverter3_op_net_x0,
      adcor => c09f12_01_katadc0_user_outofrange1_net,
      ce_1 => ce_1_sg_x706,
      clk_1 => clk_1_sg_x706,
      clk_err => logical21_y_net_x1,
      clr => edge_op_y_net_x4,
      coarse_bits => fstatcbits1_op_net_x0,
      coarsefftor => delay3_q_net_x1,
      ct_err => logical12_y_net_x3,
      fine_bits => fstatfbits1_op_net_x0,
      finefftor => constant1_op_net_x3,
      quantor => logical_y_net_x3,
      sync_val => mux_y_net_x2,
      xaui_of => c09f12_01_gbe0_tx_overflow_net,
      xuai_ldn => inverter_op_net_x1,
      adc0_bad_latch => register7_q_net_x1,
      status => concat13_y_net_x2
    );

  subsystem4_878b3c265c: entity work.subsystem4_entity_878b3c265c
    port map (
      buffer_72 => concatenate_y_net_x24,
      ce_1 => ce_1_sg_x706,
      clk_1 => clk_1_sg_x706,
      coarse_72 => concatenate_y_net_x21,
      ct_64 => concatenate_y_net_x20,
      fine_128 => concatenate_y_net_x26,
      finepfb_72 => concatenate_y_net_x25,
      gbetx0_128 => concatenate_y_net_x12,
      quant_16 => concatenate_y_net_x27,
      select_x0 => arm14_y_net_x0,
      xaui_128 => concatenate_y_net_x13,
      data => reinterpret2_output_port_net_x7,
      sync => slice3_y_net_x7,
      valid => slice1_y_net_x7
    );

  subsystem_2a44c7d8dc: entity work.subsystem_entity_2a44c7d8dc
    port map (
      adc_disabled => inverter5_op_net_x0,
      adcor => c09f12_01_katadc0_user_outofrange0_net,
      ce_1 => ce_1_sg_x706,
      clk_1 => clk_1_sg_x706,
      clk_err => logical21_y_net_x1,
      clr => edge_op_y_net_x4,
      coarse_bits => fstatcbits0_op_net_x0,
      coarsefftor => delay2_q_net_x1,
      ct_err => logical12_y_net_x3,
      fine_bits => fstatfbits0_op_net_x0,
      finefftor => constant3_op_net_x2,
      quantor => logical_y_net_x3,
      sync_val => mux_y_net_x2,
      xaui_of => c09f12_01_gbe0_tx_overflow_net,
      xuai_ldn => inverter_op_net_x1,
      adc0_bad_latch => register7_q_net_x0,
      status => concat13_y_net_x1
    );

  sync_period_constant: entity work.constant_0904137f94
    port map (
      ce => '0',
      clk => '0',
      clr => '0',
      op => sync_period_constant_op_net_x0
    );

  timing_75b27e8515: entity work.timing_entity_75b27e8515
    port map (
      arm => edge_op_y_net_x5,
      ce_1 => ce_1_sg_x706,
      clk_1 => clk_1_sg_x706,
      data_in => concat_y_net_x1,
      pps_in => logical5_y_net_x2,
      sync_period => sync_period_constant_op_net_x0,
      armed => delay_q_net_x0,
      data_out => delay2_q_net_x3,
      sync => delay1_q_net_x6
    );

  trig0_def9f75207: entity work.trig0_entity_def9f75207
    port map (
      adc_data => reinterpret2_output_port_net_x6,
      ce_1 => ce_1_sg_x706,
      clk_1 => clk_1_sg_x706,
      synci => concat6_y_net_x0,
      trig_pnt => delay35_q_net_x1,
      data => delay1_q_net_x7,
      synco => delay2_q_net_x4,
      trig => logical1_y_net_x2
    );

  trig1_891d75ae5b: entity work.trig1_entity_891d75ae5b
    port map (
      adc_data => reinterpret1_output_port_net_x7,
      ce_1 => ce_1_sg_x706,
      clk_1 => clk_1_sg_x706,
      trig_pnt => delay35_q_net_x1,
      data => delay1_q_net_x8,
      trig => logical1_y_net_x3
    );

  xaui_pack0_ebab7cc6d0: entity work.xaui_pack0_entity_ebab7cc6d0
    port map (
      base_ip => delay37_q_net_x0,
      ce_1 => ce_1_sg_x706,
      clk_1 => clk_1_sg_x706,
      din => register0_q_net_x13,
      linkdown_in => register0_q_net_x16,
      oob => register0_q_net_x14,
      valid_in => register0_q_net_x15,
      dest_ip => register0_q_net_x19,
      discard => register5_q_net_x1,
      dout => register0_q_net_x18,
      eof => logical1_y_net_x4,
      valid_out => register0_q_net_x20
    );

end structural;
